0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   22 4E                  DW   HEAP   ; vStrPtr pointer into BUF
01E6   6F 0F                  DW   next   ; nNext
01E8   22 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 4D            LD   de,(vPointer)   
0208   21 F8 4D               LD   hl,vPointer   
020B   C3 9B 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 51 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 BC 04               JP   percent   
021C                RBRACE_:      
021C   C3 A4 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 11 0C               JP   caret   
0228                COMMA_:      
0228   C3 E3 0A               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 E3 0A               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD E9 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 4D               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 4D            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 8E 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 4D               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 4D               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 4D                  LD   h,msb(vars)   
02BA   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 4D               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 4D               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 12 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 12 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD B0 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 8E 0F               JP   error   
0416                LAMBDA2:      
0416   CD E9 0C               CALL   parseBlock   
0419   CD 57 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 4D            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 4D            LD   de,(vStrPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 4D            LD   (vStrPtr),de   ; save buffer*' in pointer
048F   C3 E5 0A               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0495   23                     INC   hl   ; skip length field to start
0496   23                     INC   hl   
0497   E5                     PUSH   hl   ; save start of string
0498   0A                     LD   a,(bc)   
0499   5F                     LD   e,a   ; e = matching terminator
049A   03                     INC   bc   ; point to next char
049B   18 03                  JR   string2   
049D                STRING1:      
049D   77                     LD   (hl),a   
049E   23                     INC   hl   ; increase count
049F   03                     INC   bc   ; point to next char
04A0                STRING2:      
04A0   0A                     LD   a,(bc)   
04A1   BB                     CP   e   ; is it the string terminator
04A2   28 02                  JR   z,string3   
04A4   18 F7                  JR   string1   
04A6                STRING3:      
04A6   AF                     XOR   a   ; write NUL to terminate string
04A7   77                     LD   (hl),a   ; hl = end of string
04A8   23                     INC   hl   
04A9   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AC   22 EC 4D               LD   (vStrPtr),hl   
04AF   2B                     DEC   hl   ; hl = end of string without terminator
04B0   D1                     POP   de   ; de = start of string
04B1   D5                     PUSH   de   ; return start of string
04B2   B7                     OR   a   ; hl = length bytes, de = start of string
04B3   ED 52                  SBC   hl,de   
04B5   EB                     EX   de,hl   
04B6   2B                     DEC   hl   ; write length bytes to length field at start - 2
04B7   72                     LD   (hl),d   
04B8   2B                     DEC   hl   
04B9   73                     LD   (hl),e   
04BA   DD E9                  JP   (ix)   
04BC                             ; %a .. %z                      43
04BC                             ; -- value
04BC                             ; returns value of arg
04BC                PERCENT:      
04BC                ARG:         
04BC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04BF   FD 56 05               LD   d,(iy+5)   
04C2   EB                     EX   de,hl   
04C3   7D                     LD   a,l   ; arg_list* == null, skip
04C4   B4                     OR   h   
04C5   28 1A                  JR   z,arg0a   
04C7   23                     INC   hl   ; a = num_args, hl = arg_list*
04C8   7E                     LD   a,(hl)   
04C9   23                     INC   hl   
04CA   B7                     OR   a   
04CB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04CD   5F                     LD   e,a   ; e = a = num_args
04CE   03                     INC   bc   ; a = next char = dollar_name
04CF   0A                     LD   a,(bc)   
04D0   C5                     PUSH   bc   ; save IP
04D1   43                     LD   b,e   ; b = e = num_args
04D2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04D5   FD 56 03               LD   d,(iy+3)   
04D8                ARG0:        
04D8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04D9   1B                     DEC   de   
04DA   BE                     CP   (hl)   
04DB   28 09                  JR   z,arg1   
04DD   23                     INC   hl   ; hl = next arg_list*
04DE   10 F8                  DJNZ   arg0   
04E0   C1                     POP   bc   ; no match, restore IP
04E1                ARG0A:       
04E1   11 00 00               LD   de,0   ; return 0
04E4   18 08                  JR   arg1a   
04E6                ARG1:        
04E6   C1                     POP   bc   ; restore IP
04E7   EB                     EX   de,hl   ; hl = arg*
04E8   22 F8 4D               LD   (vPointer),hl   ; store arg* in setter
04EB   5E                     LD   e,(hl)   
04EC   23                     INC   hl   
04ED   56                     LD   d,(hl)   ; de = arg
04EE                ARG1A:       
04EE   D5                     PUSH   de   ; push arg
04EF   DD E9                  JP   (ix)   
04F1                             ;********************** PAGE 3,4 END *********************************************
04F1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 10 0E               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   0F                     DB   lsb(dotArray_)   
0505   63                     DB   "c"   ; .c print char
0506   C0                     DB   lsb(dotChar_)   
0507   73                     DB   "s"   ; .s print string
0508   AB                     DB   lsb(dotString_)   
0509   78                     DB   "x"   ; .x print x chars
050A   C5                     DB   lsb(dotXChars_)   
050B   00                     DB   NUL   ; .  print number
050C   C3 12 05               JP   dotNumber_   
050F                DOTARRAY_:      
050F   C3 9B 0A               JP   dotArray   
0512                             ; /bd buffer decimal
0512                             ; value --
0512                DOTNUMBER_:      
0512   3A E8 4D               LD   a,(vNumBase)   
0515   FE 10                  CP   16   
0517   CA 7B 05               JP   z,dotHex   ; else falls through
051A   C3 1D 05               JP   dotDec   
051D                             ; print decimal                 ; 70
051D                             ; value --
051D                DOTDEC:      
051D   ED 5B EC 4D            LD   de,(vStrPtr)   ; de"= buffer* bc" = IP
0521   D9                     EXX      
0522   E1                     POP   hl   ; hl = value
0523   CD 32 05               CALL   dotDec0   
0526   D9                     EXX      ; de = buffer*' bc = IP
0527   3E 20                  LD   a," "   ; append space to buffer
0529   12                     LD   (de),a   
052A   13                     INC   de   ; string*++,
052B   ED 53 EC 4D            LD   (vStrPtr),de   ; update buffer* with buffer*'
052F   C3 E5 0A               JP   dotNext   
0532                             ; hl = value
0532                             ; de' = buffer*
0532                             ; a, bc, de, hl destroyed
0532                DOTDEC0:      
0532   CB 7C                  BIT   7,h   
0534   28 0C                  JR   z,dotDec1   
0536   D9                     EXX      
0537   3E 2D                  LD   a,"-"   
0539   12                     LD   (de),a   
053A   13                     INC   de   
053B   D9                     EXX      
053C   AF                     XOR   a   
053D   95                     SUB   l   
053E   6F                     LD   l,a   
053F   9F                     SBC   a,a   
0540   94                     SUB   h   
0541   67                     LD   h,a   
0542                DOTDEC1:      
0542   0E 00                  LD   c,0   ; leading zeros flag = false
0544   11 F0 D8               LD   de,-10000   
0547   CD 62 05               CALL   dotDec2   
054A   11 18 FC               LD   de,-1000   
054D   CD 62 05               CALL   dotDec2   
0550   11 9C FF               LD   de,-100   
0553   CD 62 05               CALL   dotDec2   
0556   1E F6                  LD   e,-10   
0558   CD 62 05               CALL   dotDec2   
055B   0C                     INC   c   ; flag = true for at least digit
055C   1E FF                  LD   e,-1   
055E   CD 62 05               CALL   dotDec2   
0561   C9                     RET      
0562                DOTDEC2:      
0562   06 2F                  LD   b,"0"-1   
0564                DOTDEC3:      
0564   04                     INC   b   
0565   19                     ADD   hl,de   
0566   38 FC                  JR   c,dotDec3   
0568   ED 52                  SBC   hl,de   
056A   3E 30                  LD   a,"0"   
056C   B8                     CP   b   
056D   20 05                  JR   nz,dotDec4   
056F   AF                     XOR   a   
0570   B1                     OR   c   
0571   C8                     RET   z   
0572   18 01                  JR   dotDec5   
0574                DOTDEC4:      
0574   0C                     INC   c   
0575                DOTDEC5:      
0575   78                     LD   a,b   
0576   D9                     EXX      
0577   12                     LD   (de),a   
0578   13                     INC   de   
0579   D9                     EXX      
057A   C9                     RET      
057B                             ; buffer hex                    37
057B                             ; value --
057B                DOTHEX:      
057B   E1                     POP   hl   ; hl = value
057C   ED 5B EC 4D            LD   de,(vStrPtr)   
0580   3E 24                  LD   a,"$"   ; # prefix
0582   12                     LD   (de),a   
0583   13                     INC   de   ; string*++,
0584   7C                     LD   a,h   
0585   CD 97 05               CALL   dotHex1   
0588   7D                     LD   a,l   
0589   CD 97 05               CALL   dotHex1   
058C   3E 20                  LD   a," "   ; append space to buffer
058E   12                     LD   (de),a   
058F   13                     INC   de   ; string*++,
0590   ED 53 EC 4D            LD   (vStrPtr),de   
0594   C3 E5 0A               JP   dotNext   
0597                DOTHEX1:      
0597   F5                     PUSH   af   
0598   1F                     RRA      
0599   1F                     RRA      
059A   1F                     RRA      
059B   1F                     RRA      
059C   CD A0 05               CALL   dotHex2   
059F   F1                     POP   af   
05A0                DOTHEX2:      
05A0   E6 0F                  AND   0x0F   
05A2   C6 90                  ADD   a,0x90   
05A4   27                     DAA      
05A5   CE 40                  ADC   a,0x40   
05A7   27                     DAA      
05A8   12                     LD   (de),a   
05A9   13                     INC   de   ; string*++,
05AA   C9                     RET      
05AB                             ; /bs buffered string
05AB                             ; string* --
05AB                DOTSTRING_:      
05AB   E1                     POP   hl   ; hl = string*
05AC   ED 5B EC 4D            LD   de,(vStrPtr)   ; de = buffer*
05B0   18 03                  JR   dotString1   
05B2                DOTSTRING0:      
05B2   12                     LD   (de),a   ; a -> buffer*
05B3   13                     INC   de   ; string*++,
05B4   23                     INC   hl   
05B5                DOTSTRING1:      
05B5   7E                     LD   a,(hl)   ; a <- string*
05B6   B7                     OR   a   ; if NUL exit loop
05B7   20 F9                  JR   nz,dotString0   
05B9   ED 53 EC 4D            LD   (vStrPtr),de   ; save buffer*' in pointer
05BD   C3 E5 0A               JP   dotNext   
05C0                             ; .c print char
05C0                             ; char --
05C0                DOTCHAR_:      
05C0   21 01 00               LD   hl,1   
05C3   18 01                  JR   dotXChars0   
05C5                             ; .x print x chars
05C5                             ; char length --
05C5                DOTXCHARS_:      
05C5   E1                     POP   hl   ; hl = length
05C6                DOTXCHARS0:      
05C6   D1                     POP   de   ; a' = char
05C7   7B                     LD   a,e   
05C8   08                     EX   af,af'   
05C9   ED 5B EC 4D            LD   de,(vStrPtr)   ; de = buffer*
05CD   18 05                  JR   dotXChars2   
05CF                DOTXCHARS1:      
05CF   08                     EX   af,af'   
05D0   12                     LD   (de),a   
05D1   08                     EX   af,af'   
05D2   13                     INC   de   ; string*++,
05D3   2B                     DEC   hl   
05D4                DOTXCHARS2:      
05D4   7D                     LD   a,l   
05D5   B4                     OR   h   
05D6   20 F7                  JR   nz,dotXChars1   
05D8   ED 53 EC 4D            LD   (vStrPtr),de   ; save buffer*'
05DC   C3 E5 0A               JP   dotNext   
05DF                             ;********************** PAGE 5 END *********************************************
05DF                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA C6 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD FC 0D               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   35                     DB   lsb(command_b_)   
060D   97                     DB   lsb(command_nop_)   
060E   99                     DB   lsb(decimal_)   
060F   97                     DB   lsb(command_nop_)   
0610   FF                     DB   lsb(command_f_)   
0611   97                     DB   lsb(command_nop_)   
0612   AB                     DB   lsb(hexadecimal_)   
0613   40                     DB   lsb(command_i_)   
0614   97                     DB   lsb(command_nop_)   
0615   F4                     DB   lsb(key_)   
0616   97                     DB   lsb(command_nop_)   
0617   8B                     DB   lsb(command_m_)   
0618   97                     DB   lsb(command_nop_)   
0619   FD                     DB   lsb(output_)   
061A   49                     DB   lsb(command_p_)   
061B   50                     DB   lsb(command_q_)   
061C   8E                     DB   lsb(command_r_)   
061D   91                     DB   lsb(command_s_)   
061E   B1                     DB   lsb(true_)   
061F   97                     DB   lsb(command_nop_)   
0620   94                     DB   lsb(command_v_)   
0621   B4                     DB   lsb(words_)   
0622   E9                     DB   lsb(xor_)   
0623   97                     DB   lsb(command_nop_)   
0624   97                     DB   lsb(command_nop_)   
0625   A1                     DB   lsb(div_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   CD 10 0E               CALL   jumpTable   
0629   62                     DB   "b"   ; /ab absolute
062A   59                     DB   lsb(absolute_)   
062B   64                     DB   "d"   ; /ad address of
062C   B7                     DB   lsb(addrOf_)   
062D   69                     DB   "i"   ; /ad address of
062E   BA                     DB   lsb(arrayIter_)   
062F   73                     DB   "s"   ; /as array size
0630   E1                     DB   lsb(arraySize_)   
0631   00                     DB   NUL   
0632   C3 A5 06               JP   error1_   
0635                COMMAND_B_:      
0635   CD 10 0E               CALL   jumpTable   
0638   72                     DB   "r"   ; /br break
0639   66                     DB   lsb(break_)   
063A   79                     DB   "y"   ; /by cold boot
063B   BD                     DB   lsb(coldStart_)   
063C   00                     DB   NUL   
063D   C3 CF 06               JP   bytes_   ; /b bytes
0640                             ; 6
0640                COMMAND_I_:      
0640   CD 10 0E               CALL   jumpTable   
0643   6E                     DB   "n"   ; /in input
0644   80                     DB   lsb(input_)   
0645   00                     DB   NUL   
0646   C3 A5 06               JP   error1_   
0649                             ; 4
0649                COMMAND_P_:      
0649   CD 10 0E               CALL   jumpTable   
064C   00                     DB   NUL   
064D   C3 A5 06               JP   error1_   
0650                             ; 6
0650                COMMAND_Q_:      
0650   CD 10 0E               CALL   jumpTable   
0653   74                     DB   "t"   ; /qt quit
0654   D7                     DB   lsb(quit_)   
0655   00                     DB   NUL   
0656   C3 A5 06               JP   error1_   
0659                             ; 14
0659                             ; /ab absolute
0659                             ; num -- num
0659                ABSOLUTE_:      
0659   E1                     POP   hl   
065A   CB 7C                  BIT   7,h   
065C   C8                     RET   z   
065D   AF                     XOR   a   
065E   95                     SUB   l   
065F   6F                     LD   l,a   
0660   9F                     SBC   a,a   
0661   94                     SUB   h   
0662   67                     LD   h,a   
0663   E5                     PUSH   hl   
0664   DD E9                  JP   (ix)   
0666                             ; 8
0666                             ; 13
0666                             ; /br break from loop
0666                             ; --
0666                BREAK_:      
0666                BREAK:       
0666   E1                     POP   hl   ; hl = condition, break if false
0667   7D                     LD   a,l   
0668   B4                     OR   h   
0669   28 02                  JR   z,break1   
066B   DD E9                  JP   (ix)   
066D                BREAK1:      
066D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
066F   FD 54                  LD   d,iyh   
0671   21 08 00               LD   hl,8   
0674   19                     ADD   hl,de   
0675   23                     INC   hl   
0676   23                     INC   hl   
0677   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
067A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
067D   C3 A4 0B               JP   blockEnd   
0680                             ; 11
0680                             ; Z80 port input
0680                             ; port -- value
0680                INPUT_:      
0680   E1                     POP   hl   
0681   59                     LD   e,c   ; save IP
0682   4D                     LD   c,l   
0683   ED 68                  IN   l,(c)   
0685   26 00                  LD   h,0   
0687   4B                     LD   c,e   ; restore IP
0688   E5                     PUSH   hl   
0689   DD E9                  JP   (ix)   
068B                             ; 2
068B                COMMAND_M_:      
068B   C3 21 07               JP   command_m   
068E                             ; 2
068E                COMMAND_R_:      
068E   C3 2A 07               JP   command_r   
0691                             ; 2
0691                COMMAND_S_:      
0691   C3 46 07               JP   command_s   
0694                             ; 2
0694                COMMAND_V_:      
0694   C3 37 07               JP   command_v   
0697                             ; 2
0697                COMMAND_NOP_:      
0697   DD E9                  JP   (ix)   
0699                             ; 5
0699                DECIMAL_:      
0699   21 0A 00               LD   hl,10   
069C                DECIMAL1:      
069C   22 E8 4D               LD   (vNumBase),hl   
069F   DD E9                  JP   (ix)   
06A1                             ; 3
06A1                DIV_:        
06A1   00                     DB   NUL   
06A2   C3 22 04               JP   div   
06A5                             ; 3
06A5                ERROR1_:      
06A5   21 01 00               LD   hl,1   ; error 1: unknown command
06A8   C3 8E 0F               JP   error   
06AB                             ; 3
06AB                HEXADECIMAL_:      
06AB   21 10 00               LD   hl,16   
06AE   C3 9C 06               JP   decimal1   
06B1                             ; 2
06B1                TRUE_:       
06B1   C3 9C 03               JP   true1   
06B4                             ; 2
06B4                WORDS_:      
06B4   C3 C0 06               JP   words   
06B7                             ; ; 2
06B7                ADDROF_:      
06B7   C3 30 0B               JP   addrOf   
06BA                             ; 2
06BA                ARRAYITER_:      
06BA   C3 1D 08               JP   arrayIter   
06BD                             ; 3
06BD                             ; /by
06BD                COLDSTART_:      
06BD   C3 DA 0E               JP   coldStart   
06C0                             ; 4
06C0                             ; /w
06C0                WORDS:       
06C0   21 02 00               LD   hl,2   
06C3   C3 D2 06               JP   bytes1   
06C6                             ; 8
06C6                             ; //
06C6                COMMENT:      
06C6   03                     INC   bc   ; point to next char
06C7   0A                     LD   a,(bc)   
06C8   FE 20                  CP   " "   ; terminate on any char less than SP
06CA   30 FA                  JR   nc,comment   
06CC   0B                     DEC   bc   
06CD   DD E9                  JP   (ix)   
06CF                             ; 6
06CF                             ; /b
06CF                BYTES_:      
06CF   21 01 00               LD   hl,1   
06D2                BYTES1:      
06D2   22 E6 4D               LD   (vDataWidth),hl   
06D5   DD E9                  JP   (ix)   
06D7                             ; 10
06D7                             ; /qt
06D7                             ; bool --
06D7                QUIT_:       
06D7   E1                     POP   hl   ; hl = condition, exit if true
06D8   7D                     LD   a,l   
06D9   B4                     OR   h   
06DA   20 02                  JR   nz,quit1   
06DC   DD E9                  JP   (ix)   
06DE                QUIT1:       
06DE   C3 A4 0B               JP   blockEnd   
06E1                             ; 10
06E1                             ; /as size of an array, num elements, ignores vDataWidth :-/
06E1                             ; array* -- num
06E1                ARRAYSIZE_:      
06E1   E1                     POP   hl   
06E2   2B                     DEC   hl   ; msb size
06E3   56                     LD   d,(hl)   
06E4   2B                     DEC   hl   ; lsb size
06E5   5E                     LD   e,(hl)   
06E6   D5                     PUSH   de   
06E7   DD E9                  JP   (ix)   
06E9                             ; 12
06E9                XOR_:        
06E9   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06EA                XOR1:        
06EA   E1                     POP   hl   
06EB   7B                     LD   a,e   
06EC   AD                     XOR   l   
06ED   6F                     LD   l,a   
06EE   7A                     LD   a,d   
06EF   AC                     XOR   h   
06F0   67                     LD   h,a   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; 2
06F4                             ; key_:
06F4                             ;     jr key
06F4                             ; /k                              6
06F4                KEY_:        
06F4                KEY:         
06F4   CD 81 00               CALL   getchar   
06F7   26 00                  LD   h,0   
06F9   6F                     LD   l,a   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                             ; 2
06FD                OUTPUT_:      
06FD   18 02                  JR   output   
06FF                             ; 2
06FF                COMMAND_F_:      
06FF   18 09                  JR   command_f   
0701                             ;********************** PAGE 6 END *********************************************
0701                             ; .align $100
0701                             ;********************** PAGE 7 BEGIN *********************************************
0701                             ; /o Z80 port output               9
0701                             ; value port --
0701                OUTPUT:      
0701   E1                     POP   hl   
0702   59                     LD   e,c   ; save IP
0703   4D                     LD   c,l   
0704   E1                     POP   hl   
0705   ED 69                  OUT   (c),l   
0707   4B                     LD   c,e   ; restore IP
0708   DD E9                  JP   (ix)   
070A                COMMAND_F:      
070A   CD 10 0E               CALL   jumpTable   
070D   64                     DB   "d"   ; /fd fold
070E   55                     DB   lsb(fold_)   
070F   65                     DB   "e"   ; /fe forEach
0710   4F                     DB   lsb(forEach_)   
0711   73                     DB   "s"   ; /fs funcSrc
0712   58                     DB   lsb(funcSrc_)   
0713   74                     DB   "t"   ; /ft filter
0714   52                     DB   lsb(filter_)   
0715   31                     DB   "1"   
0716   5B                     DB   lsb(f1_)   
0717   32                     DB   "2"   
0718   5E                     DB   lsb(f2_)   
0719   33                     DB   "3"   
071A   61                     DB   lsb(f3_)   
071B   34                     DB   "4"   
071C   64                     DB   lsb(f4_)   
071D   00                     DB   NUL   
071E   C3 67 07               JP   false_   
0721                COMMAND_M:      
0721   CD 10 0E               CALL   jumpTable   
0724   70                     DB   "p"   ; /mp map
0725   6A                     DB   lsb(map_)   
0726   00                     DB   NUL   
0727   C3 A5 06               JP   error1_   
072A                COMMAND_R:      
072A   CD 10 0E               CALL   jumpTable   
072D   63                     DB   "c"   ; /rc tail call optimisation
072E   6D                     DB   lsb(recur_)   
072F   65                     DB   "e"   ; /re remainder
0730   73                     DB   lsb(remain_)   
0731   67                     DB   "g"   ; /rg range src
0732   7C                     DB   lsb(rangeSrc_)   
0733   00                     DB   NUL   
0734   C3 A5 06               JP   error1_   
0737                COMMAND_V:      
0737   CD 10 0E               CALL   jumpTable   
073A   68                     DB   "h"   
073B   89                     DB   lsb(varHeapPtr_)   
073C   74                     DB   "t"   
073D   92                     DB   lsb(varTIBPtr_)   
073E   48                     DB   "H"   
073F   7F                     DB   lsb(constHeapStart_)   
0740   54                     DB   "T"   
0741   84                     DB   lsb(constTIBStart_)   
0742   00                     DB   NUL   
0743   C3 A5 06               JP   error1_   
0746                COMMAND_S:      
0746   CD 10 0E               CALL   jumpTable   
0749   69                     DB   "i"   
074A   79                     DB   lsb(stringIter_)   
074B   00                     DB   NUL   
074C   C3 A5 06               JP   error1_   
074F                FOREACH_:      
074F   C3 16 0A               JP   forEach   
0752                FILTER_:      
0752   C3 66 09               JP   filter   
0755                FOLD_:       
0755   C3 C4 09               JP   fold   
0758                FUNCSRC_:      
0758   C3 62 0A               JP   funcSrc   
075B                F1_:         
075B   C3 D7 0F               JP   f1   
075E                F2_:         
075E   C3 1F 10               JP   f2   
0761                F3_:         
0761   C3 2B 10               JP   f3   
0764                F4_:         
0764   C3 37 10               JP   f4   
0767                FALSE_:      
0767   C3 A2 03               JP   false1   
076A                MAP_:        
076A   C3 24 09               JP   map   
076D                RECUR_:      
076D   E1                     POP   hl   
076E   22 F2 4D               LD   (vRecur),hl   
0771   DD E9                  JP   (ix)   
0773                REMAIN_:      
0773   2A FA 4D               LD   hl,(vRemain)   
0776   E5                     PUSH   hl   
0777   DD E9                  JP   (ix)   
0779                STRINGITER_:      
0779   C3 9E 08               JP   stringIter   
077C                RANGESRC_:      
077C   C3 A1 07               JP   rangeSrc   
077F                CONSTHEAPSTART_:      
077F   11 22 4E               LD   de,HEAP   
0782   18 1A                  JR   constant   
0784                CONSTTIBSTART_:      
0784   11 00 4B               LD   de,TIB   
0787   18 15                  JR   constant   
0789                VARHEAPPTR_:      
0789   ED 5B F0 4D            LD   de,(vHeapPtr)   
078D   21 F0 4D               LD   hl,vHeapPtr   
0790   18 09                  JR   variable   
0792                VARTIBPTR_:      
0792   ED 5B EA 4D            LD   de,(vTIBPtr)   
0796   21 EA 4D               LD   hl,vTIBPtr   
0799   18 00                  JR   variable   
079B                VARIABLE:      
079B   22 F8 4D               LD   (vPointer),hl   
079E                CONSTANT:      
079E   D5                     PUSH   de   
079F   DD E9                  JP   (ix)   
07A1                             ;********************** PAGE 7 END *********************************************
07A1                             ;*******************************************************************
07A1                             ; Monty implementations
07A1                             ;*******************************************************************
07A1                             ; /rg rangeSrc
07A1                             ; begin end step -- src
07A1                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07A1                RANGESRC:      ; range source: begin, end, step, local: L
07A1   CD 11 0C               CALL   go   
07A4   00 00                  DW   NUL   
07A6   B0 07                  DW   rangeSrcM_1900S1468   
07A8   AA 07                  DW   $+2   
07AA   01                     DB   1   
07AB   04 62 65 73 4C         .PSTR   "besL"   
07B0                RANGESRCM_1900S1468:      
07B0   7B                     DB   "{"   
07B1   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07BC   5C 6B 74 7B            DB   "\\kt{"   
07C0   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07C8   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07CE   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07D6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07DE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07E8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07F0   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
07F7   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
080B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0813   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
081A   7D                     DB   "}"   
081B   7D                     DB   "}"   
081C   00                     DB   0   
081D                             ; /ai arrayIter
081D                             ; array* -- src
081D                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
081D                ARRAYITER:      
081D   CD 11 0C               CALL   go   
0820   00 00                  DW   NUL   
0822   2A 08                  DW   arrayIterM_1919S1488   
0824   26 08                  DW   $+2   
0826   01                     DB   1   
0827   02 61 4C               .PSTR   "aL"   
082A                ARRAYITERM_1919S1488:      
082A   7B                     DB   "{"   
082B   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
083B   5C 6B 74 7B            DB   "\\kt{"   
083F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0847   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
084D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0855   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
085D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0864   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
086C   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0875   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
088C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0894   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
089B   7D                     DB   "}"   
089C   7D                     DB   "}"   
089D   00                     DB   0   
089E                             ; /si stringIter
089E                             ; string* -- src
089E                          ;*Macro unroll: FUNC stringIter, 1, "sL"
089E                STRINGITER:      
089E   CD 11 0C               CALL   go   
08A1   00 00                  DW   NUL   
08A3   AB 08                  DW   stringIterM_1938S1508   
08A5   A7 08                  DW   $+2   
08A7   01                     DB   1   
08A8   02 73 4C               .PSTR   "sL"   
08AB                STRINGITERM_1938S1508:      
08AB   7B                     DB   "{"   
08AC   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08B6   5C 6B 74 7B            DB   "\\kt{"   
08BA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08C2   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08C9   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08D1   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08D9   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08E0   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
08EF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08F7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08FE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0912   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
091A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0921   7D                     DB   "}"   
0922   7D                     DB   "}"   
0923   00                     DB   0   
0924                             ; /mp map
0924                             ; src func -- src1
0924                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0924                MAP:         ; map: source, function
0924   CD 11 0C               CALL   go   
0927   00 00                  DW   NUL   
0929   31 09                  DW   mapM_1958S1530   
092B   2D 09                  DW   $+2   
092D   00                     DB   0   
092E   02 73 66               .PSTR   "sf"   
0931                MAPM_1958S1530:      
0931   7B                     DB   "{"   
0932   5C 6B 74 7B            DB   "\\kt{"   
0936   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
093E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0942   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0947   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0953   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
095C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0963   7D                     DB   "}"   
0964   7D                     DB   "}"   
0965   00                     DB   0   
0966                             ; /ft filter
0966                             ; src pred -- src1
0966                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0966                FILTER:      ; filter: source, predicate, local: T
0966   CD 11 0C               CALL   go   
0969   00 00                  DW   NUL   
096B   74 09                  DW   filterM_1972S1545   
096D   6F 09                  DW   $+2   
096F   01                     DB   1   
0970   03 73 70 54            .PSTR   "spT"   
0974                FILTERM_1972S1545:      
0974   7B                     DB   "{"   
0975   5B 30 5D 25 54 3D      DB   "[0]%T="   
097B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
097F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0983   5B                     DB   "["   
0984   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0991   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0999   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
099D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09A2   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09B8   3F 3F                  DB   "??"   
09BA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09C1   7D                     DB   "}"   
09C2   7D                     DB   "}"   
09C3   00                     DB   0   
09C4                             ; /fd fold
09C4                             ; reducer is a function like: \\da00bbLi4u
09C4                             ; src init reducer -- src1
09C4                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09C4                FOLD:        ; src, init, reducer
09C4   CD 11 0C               CALL   go   
09C7   00 00                  DW   NUL   
09C9   D3 09                  DW   foldM_1991S1565   
09CB   CD 09                  DW   $+2   
09CD   01                     DB   1   
09CE   04 73 69 72 41         .PSTR   "sirA"   
09D3                FOLDM_1991S1565:      
09D3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09D4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09DB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09DF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09E3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09E8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A03   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A0C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A13   7D                     DB   "}"   
0A14   7D                     DB   "}"   
0A15   00                     DB   0   
0A16                             ; /fe forEach
0A16                             ; src proc --
0A16                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A16                FOREACH:      ; forEach: source, procedure, local: T
0A16   CD 11 0C               CALL   go   
0A19   00 00                  DW   NUL   
0A1B   24 0A                  DW   forEachM_2005S1580   
0A1D   1F 0A                  DW   $+2   
0A1F   01                     DB   1   
0A20   03 73 70 54            .PSTR   "spT"   
0A24                FOREACHM_2005S1580:      
0A24   7B                     DB   "{"   
0A25   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A2B   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A2F   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A37   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A3C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A4E   3F 3F                  DB   "??"   ; ifte:
0A50   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A59   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A60   7D                     DB   "}"   
0A61   00                     DB   0   
0A62                             ; ; /fs funcSrc
0A62                             ; ; func -- src
0A62                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A62                FUNCSRC:      ; :f func or block
0A62   CD 11 0C               CALL   go   
0A65   00 00                  DW   NUL   
0A67   6E 0A                  DW   funcSrcM_2019S1595   
0A69   6B 0A                  DW   $+2   
0A6B   00                     DB   0   
0A6C   01 66                  .PSTR   "f"   
0A6E                FUNCSRCM_2019S1595:      
0A6E   7B                     DB   "{"   
0A6F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A73   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A7B   5C 64 74 7B            DB   "\\dt{"   
0A7F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A91   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A98   7D                     DB   "}"   
0A99   7D                     DB   "}"   
0A9A   00                     DB   0   
0A9B                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0A9B                DOTARRAY:      
0A9B   CD 11 0C               CALL   go   
0A9E   00 00                  DW   NUL   
0AA0   A9 0A                  DW   dotArrayM_2029S1606   
0AA2   A4 0A                  DW   $+2   
0AA4   02                     DB   2   
0AA5   03 61 62 63            .PSTR   "abc"   
0AA9                DOTARRAYM_2029S1606:      
0AA9   7B                     DB   "{"   
0AAA   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AE1   7D                     DB   "}"   
0AE2   00                     DB   0   
0AE3                             ;*******************************************************************
0AE3                             ; unused opcodes (reserved)
0AE3                             ;*******************************************************************
0AE3                UNDERSCORE:      
0AE3                COMMA:       
0AE3   DD E9                  JP   (ix)   
0AE5                             ;*******************************************************************
0AE5                             ; implementations
0AE5                             ;*******************************************************************
0AE5                DOTNEXT:      
0AE5   3A F6 4D               LD   a,(vStrMode)   ; if string mode then exit
0AE8   3C                     INC   a   
0AE9   20 02                  JR   nz,dotNext1   
0AEB   DD E9                  JP   (ix)   
0AED                DOTNEXT1:      
0AED   ED 5B F0 4D            LD   de,(vHeapPtr)   
0AF1   2A EC 4D               LD   hl,(vStrPtr)   
0AF4   B7                     OR   a   ; hl = count, de = vHeapPtr
0AF5   ED 52                  SBC   hl,de   
0AF7   C3 00 0B               JP   dotNext3   
0AFA                DOTNEXT2:      
0AFA   1A                     LD   a,(de)   ; print char at char*
0AFB   CD 85 00               CALL   putchar   
0AFE   13                     INC   de   ; char*++
0AFF   2B                     DEC   hl   ; count--
0B00                DOTNEXT3:      
0B00   7D                     LD   a,l   ; count == 0?
0B01   B4                     OR   h   
0B02   20 F6                  JR   nz,dotNext2   ; if not loop
0B04   2A F0 4D               LD   hl,(vHeapPtr)   ; reset vStrPtr to vHeapPtr
0B07   22 EC 4D               LD   (vStrPtr),hl   
0B0A   DD E9                  JP   (ix)   
0B0C                STRINGMODEENTER:      
0B0C   21 FF FF               LD   hl,TRUE   
0B0F   22 F6 4D               LD   (vStrMode),hl   
0B12   2A F0 4D               LD   hl,(vHeapPtr)   
0B15   18 14                  JR   stringModeExit1   
0B17                STRINGMODEEXIT:      
0B17   21 00 00               LD   hl,FALSE   
0B1A   22 F6 4D               LD   (vStrMode),hl   
0B1D   2A EC 4D               LD   hl,(vStrPtr)   ; append NUL to string
0B20   AF                     XOR   a   
0B21   77                     LD   (hl),a   
0B22   23                     INC   hl   ; hl = string_end*
0B23   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = string*
0B27   D5                     PUSH   de   ; return string*
0B28   22 F0 4D               LD   (vHeapPtr),hl   ; vHeapPtr = string_end*
0B2B                STRINGMODEEXIT1:      
0B2B   22 EC 4D               LD   (vStrPtr),hl   ; vStrPtr = vHeapPtr
0B2E   DD E9                  JP   (ix)   
0B30                             ; /ad addrOf                    24
0B30                             ; char -- addr
0B30                ADDROF:      
0B30   E1                     POP   hl   ; a = char
0B31   7D                     LD   a,l   
0B32   FE 7B                  CP   "z"+1   ; if a > z then exit
0B34   30 19                  JR   nc,addrOf2   
0B36   D6 41                  SUB   "A"   ; a - 65
0B38   38 15                  JR   c,addrOf2   ; if < A then exit
0B3A   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B3C   38 06                  JR   c,addrOf1   
0B3E   D6 06                  SUB   "a"-("Z"+1)   
0B40   FE 1A                  CP   "Z"-"A"+1   
0B42   38 0B                  JR   c,addrOf2   ; if < a then exit
0B44                ADDROF1:      
0B44   87                     ADD   a,a   ; double a
0B45   21 00 4D               LD   hl,VARS   ; hl = VARS + a
0B48   85                     ADD   a,l   
0B49   6F                     LD   l,a   
0B4A   3E 00                  LD   a,0   
0B4C   8C                     ADC   a,h   
0B4D   67                     LD   h,a   
0B4E   E5                     PUSH   hl   
0B4F                ADDROF2:      
0B4F   DD E9                  JP   (ix)   
0B51                             ;                               51
0B51                RBRACK:      
0B51                ARRAYEND:      
0B51   FD 54                  LD   d,iyh   ; de = BP
0B53   FD 5D                  LD   e,iyl   
0B55   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0B59   62 6B                  LD   hl,de   ; hl = de = BP
0B5B   B7                     OR   a   
0B5C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B5E   CB 3C                  SRL   h   ; 
0B60   CB 1D                  RR   l   
0B62   44 4D                  LD   bc,hl   ; bc = count
0B64   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B67   71                     LD   (hl),c   ; write num items in length word
0B68   23                     INC   hl   
0B69   70                     LD   (hl),b   
0B6A   23                     INC   hl   ; hl = array[0], bc = count
0B6B                             ; de = BP, hl = array[0], bc = count
0B6B   18 15                  JR   arrayEnd3   
0B6D                ARRAYEND1:      
0B6D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B70   77                     LD   (hl),a   ; write lsb of array item
0B71   23                     INC   hl   ; move to msb of array item
0B72   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0B75   3D                     DEC   a   
0B76   28 05                  JR   z,arrayEnd2   
0B78   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B7B   77                     LD   (hl),a   ; write msb of array item
0B7C   23                     INC   hl   ; move to next word in array
0B7D                ARRAYEND2:      
0B7D   FD 2B                  DEC   iy   ; move to next word on stack
0B7F   FD 2B                  DEC   iy   
0B81   0B                     DEC   bc   ; dec items count
0B82                ARRAYEND3:      
0B82   79                     LD   a,c   ; if not zero loop
0B83   B0                     OR   b   
0B84   20 E7                  JR   nz,arrayEnd1   
0B86   EB                     EX   de,hl   ; de = end of array, hl = BP
0B87   F9                     LD   sp,hl   ; sp = BP
0B88   E1                     POP   hl   ; de = end of array, hl = old BP
0B89   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B8A   FD 62                  LD   iyh,d   
0B8C   FD 6B                  LD   iyl,e   
0B8E   D1                     POP   de   ; pop arg_list (discard)
0B8F   D1                     POP   de   ; pop first_arg* (discard)
0B90   D1                     POP   de   ; pop IP (discard)
0B91   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
0B95   13                     INC   de   
0B96   13                     INC   de   
0B97   D5                     PUSH   de   ; return array[0]
0B98   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
0B9B   22 EC 4D               LD   (vStrPtr),hl   
0B9E   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0BA2   DD E9                  JP   (ix)   
0BA4                             ;                               58
0BA4                RBRACE:      
0BA4                BLOCKEND:      
0BA4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BA7   FD 56 01               LD   d,(iy+1)   
0BAA   ED 53 04 4E            LD   (vTemp1),de   
0BAE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BB1   FD 56 07               LD   d,(iy+7)   
0BB4   ED 53 06 4E            LD   (vTemp2),de   
0BB8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BBB   FD 56 03               LD   d,(iy+3)   
0BBE   EB                     EX   de,hl   
0BBF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BC2   FD 56 01               LD   d,(iy+1)   
0BC5   13                     INC   de   ; for carry flag <=
0BC6   B7                     OR   a   
0BC7   ED 52                  SBC   hl,de   
0BC9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BCB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BCD   FD 5D                  LD   e,iyl   
0BCF   21 08 00               LD   hl,8   
0BD2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BD3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BD4   18 0C                  JR   blockEnd2   
0BD6                BLOCKEND1:      ; same scope
0BD6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD9   FD 56 03               LD   d,(iy+3)   
0BDC   EB                     EX   de,hl   
0BDD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BDF   FD 5D                  LD   e,iyl   
0BE1   EB                     EX   de,hl   
0BE2                BLOCKEND2:      
0BE2   44 4D                  LD   bc,hl   ; bc = hl = BP
0BE4   B7                     OR   a   ; hl = BP - SP = count
0BE5   ED 72                  SBC   hl,sp   
0BE7   7D                     LD   a,l   
0BE8   B4                     OR   h   
0BE9   28 09                  JR   z,blockEnd3   
0BEB   C5                     PUSH   bc   ; bc = count, hl = BP
0BEC   44 4D                  LD   bc,hl   
0BEE   E1                     POP   hl   
0BEF   2B                     DEC   hl   ; hl = BP-1
0BF0   1B                     DEC   de   ; de = args*-1
0BF1   ED B8                  LDDR      
0BF3   13                     INC   de   
0BF4                BLOCKEND3:      
0BF4   EB                     EX   de,hl   ; sp = de = new tos*
0BF5   F9                     LD   sp,hl   
0BF6   ED 4B 06 4E            LD   bc,(vTemp2)   
0BFA   FD 2A 04 4E            LD   iy,(vTemp1)   
0BFE   ED 5B F2 4D            LD   de,(vRecur)   ; de = recur vector
0C02   7B                     LD   a,e   ; check for NUL
0C03   B2                     OR   d   
0C04   20 02                  JR   nz,blockEnd4   
0C06   DD E9                  JP   (ix)   
0C08                BLOCKEND4:      
0C08   21 00 00               LD   hl,0   ; clear recur vector
0C0B   22 F2 4D               LD   (vRecur),hl   
0C0E   C3 12 0C               JP   go1   ; execute de
0C11                             ; execute a block of code which ends with } 116
0C11                             ; creates a root scope if BP == stack
0C11                             ; else uses outer scope
0C11                CARET:       
0C11                GO:          
0C11   D1                     POP   de   ; de = block*
0C12                GO1:         
0C12   7B                     LD   a,e   ; if block* == null, exit
0C13   B2                     OR   d   
0C14   20 02                  JR   nz,go2   
0C16   DD E9                  JP   (ix)   
0C18                GO2:         
0C18   1A                     LD   a,(de)   
0C19   FE 7B                  CP   "{"   
0C1B   28 06                  JR   z,goBlock   
0C1D   FE 28                  CP   "("   
0C1F   C2 56 0C               JP   nz,goFunc   
0C22   D5                     PUSH   de   ; push de just before stack frame
0C23                GOBLOCK:      
0C23   ED 53 04 4E            LD   (vTemp1),de   ; save de
0C27   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C2A   FD 54                  LD   d,iyh   
0C2C   FD 5D                  LD   e,iyl   
0C2E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C2F   ED 52                  SBC   hl,de   
0C31   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de
0C35   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C36   B4                     OR   h   
0C37   3E 00                  LD   a,0   
0C39   28 6A                  JR   z,goFunc8   
0C3B   C5                     PUSH   bc   ; push IP
0C3C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C3F   FD 46 05               LD   b,(iy+5)   
0C42   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C45   FD 66 03               LD   h,(iy+3)   
0C48                GOBLOCK2:      
0C48   C5                     PUSH   bc   ; arg_list*
0C49   E5                     PUSH   hl   ; first_arg*
0C4A   FD E5                  PUSH   iy   ; push BP
0C4C   FD 21 00 00            LD   iy,0   ; BP = SP
0C50   FD 39                  ADD   iy,sp   
0C52                GOBLOCK3:      
0C52   42 4B                  LD   bc,de   ; bc = de = block*-1
0C54   DD E9                  JP   (ix)   
0C56                GOFUNC:      ; execute func
0C56   EB                     EX   de,hl   ; hl = func*
0C57   5E                     LD   e,(hl)   ; de = partial_array*
0C58   23                     INC   hl   
0C59   56                     LD   d,(hl)   
0C5A   23                     INC   hl   
0C5B   7B                     LD   a,e   ; if partial_array* == null skip
0C5C   B2                     OR   d   
0C5D   28 21                  JR   z,goFunc3   
0C5F   ED 43 04 4E            LD   (vTemp1),bc   
0C63   22 06 4E               LD   (vTemp2),hl   ; save bc,hl
0C66   EB                     EX   de,hl   ; hl = partial_array*
0C67   2B                     DEC   hl   ; bc = count
0C68   46                     LD   b,(hl)   
0C69   2B                     DEC   hl   
0C6A   4E                     LD   c,(hl)   
0C6B   23                     INC   hl   ; hl = array data*
0C6C   23                     INC   hl   
0C6D   18 06                  JR   goFunc2   ; push each item on stack
0C6F                GOFUNC1:      
0C6F   5E                     LD   e,(hl)   ; de = partial item
0C70   23                     INC   hl   
0C71   56                     LD   d,(hl)   
0C72   23                     INC   hl   
0C73   D5                     PUSH   de   ; push on stack
0C74   0B                     DEC   bc   
0C75                GOFUNC2:      
0C75   79                     LD   a,c   ; if count != 0 then loop
0C76   B0                     OR   b   
0C77   20 F6                  JR   nz,goFunc1   
0C79   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore bc
0C7D   2A 06 4E               LD   hl,(vTemp2)   ; restore hl
0C80                GOFUNC3:      
0C80   5E                     LD   e,(hl)   ; de = block*
0C81   23                     INC   hl   
0C82   56                     LD   d,(hl)   
0C83   23                     INC   hl   
0C84   ED 53 04 4E            LD   (vTemp1),de   ; save block*
0C88   5E                     LD   e,(hl)   ; de = arg_list*
0C89   23                     INC   hl   
0C8A   56                     LD   d,(hl)   
0C8B   23                     INC   hl   
0C8C   EB                     EX   de,hl   ; hl = arg_list*
0C8D   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de = block*
0C91   7D                     LD   a,l   ; if arg_list* == null a = 0
0C92   B4                     OR   h   
0C93   20 03                  JR   nz,goFunc4   
0C95   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C96   18 0D                  JR   goFunc8   
0C98                GOFUNC4:      ; allocate locals
0C98   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C99   18 03                  JR   goFunc6   
0C9B                GOFUNC5:      ; loop
0C9B   3B                     DEC   sp   
0C9C   3B                     DEC   sp   
0C9D   3D                     DEC   a   
0C9E                GOFUNC6:      
0C9E   B7                     OR   a   
0C9F   20 FA                  JR   nz,goFunc5   ; end loop
0CA1                GOFUNC7:      
0CA1   23                     INC   hl   ; a = num_args* x 2
0CA2   7E                     LD   a,(hl)   
0CA3   2B                     DEC   hl   
0CA4   87                     ADD   a,a   ; a *= 2
0CA5                GOFUNC8:      
0CA5   C5                     PUSH   bc   ; push IP
0CA6   44 4D                  LD   bc,hl   
0CA8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CAB   85                     ADD   a,l   
0CAC   6F                     LD   l,a   
0CAD   39                     ADD   hl,sp   
0CAE   18 98                  JR   goBlock2   
0CB0                             ; 
0CB0                             ;*******************************************************************
0CB0                             ; general routines
0CB0                             ;*******************************************************************
0CB0                             ; arg_list - parses arg_list e.g. ab:c
0CB0                             ; -- arg_list*
0CB0                PARSEARGS:      
0CB0   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CB3   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0CB6   E5                     PUSH   hl   ; save start of arg_list
0CB7   23                     INC   hl   ; skip length fields to start of string
0CB8   23                     INC   hl   
0CB9   03                     INC   bc   ; point to next char
0CBA                PARSEARGS1:      
0CBA   0A                     LD   a,(bc)   
0CBB   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CBD   20 03                  JR   nz,parseArgs1a   
0CBF   14                     INC   d   ; non zero value local count acts as flag
0CC0   18 10                  JR   parseArgs3   
0CC2                PARSEARGS1A:      
0CC2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CC4   38 0F                  JR   c,parseArgs4   
0CC6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CC8   30 0B                  JR   nc,parseArgs4   
0CCA                PARSEARGS2:      
0CCA   77                     LD   (hl),a   
0CCB   23                     INC   hl   
0CCC   1C                     INC   e   ; increase arg count
0CCD   AF                     XOR   a   
0CCE   B2                     OR   d   
0CCF   28 01                  JR   z,parseArgs3   
0CD1   14                     INC   d   ; if d > 0 increase local count
0CD2                PARSEARGS3:      
0CD2   03                     INC   bc   ; point to next char
0CD3   18 E5                  JR   parseArgs1   
0CD5                PARSEARGS4:      
0CD5   0B                     DEC   bc   
0CD6   AF                     XOR   a   
0CD7   B2                     OR   d   
0CD8   28 01                  JR   z,parseArgs5   
0CDA   15                     DEC   d   ; remove initial inc
0CDB                PARSEARGS5:      
0CDB   23                     INC   hl   
0CDC   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CDF   22 EC 4D               LD   (vStrPtr),hl   
0CE2   E1                     POP   hl   ; hl = start of arg_list
0CE3   72                     LD   (hl),d   ; write number of locals at start - 1
0CE4   23                     INC   hl   
0CE5   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CE6   2B                     DEC   hl   
0CE7   E3                     EX   (sp),hl   
0CE8   E9                     JP   (hl)   
0CE9                             ; create block: parses block e.g. 00bbIC4uLi4g
0CE9                             ; -- block*
0CE9                PARSEBLOCK:      
0CE9   C5                     PUSH   bc   ; return pointer to first { of block
0CEA   03                     INC   bc   
0CEB   16 01                  LD   d,1   ; nesting: count first parenthesis
0CED                PARSEBLOCK1:      ; Skip to end of definition
0CED   0A                     LD   a,(bc)   ; Get the next character
0CEE   03                     INC   bc   ; Point to next character
0CEF   FE 21                  CP   " " + 1   ; ignore whitespace
0CF1   38 FA                  JR   c,parseBlock1   
0CF3   FE 29                  CP   ")"   
0CF5   28 2D                  JR   z,parseBlock4   
0CF7   FE 7D                  CP   "}"   
0CF9   28 29                  JR   z,parseBlock4   
0CFB   FE 5D                  CP   "]"   
0CFD   28 25                  JR   z,parseBlock4   
0CFF   FE 28                  CP   "("   
0D01   28 16                  JR   z,parseBlock2   
0D03   FE 7B                  CP   "{"   
0D05   28 12                  JR   z,parseBlock2   
0D07   FE 5B                  CP   "["   
0D09   28 0E                  JR   z,parseBlock2   
0D0B   FE 27                  CP   "'"   
0D0D   28 0D                  JR   z,parseBlock3   
0D0F   FE 60                  CP   "`"   
0D11   28 09                  JR   z,parseBlock3   
0D13   FE 22                  CP   DQ   
0D15   28 05                  JR   z,parseBlock3   
0D17   18 D4                  JR   parseBlock1   
0D19                PARSEBLOCK2:      
0D19   14                     INC   d   
0D1A   18 D1                  JR   parseBlock1   
0D1C                PARSEBLOCK3:      
0D1C   3E 80                  LD   a,$80   
0D1E   AA                     XOR   d   
0D1F   57                     LD   d,a   
0D20   20 CB                  JR   nz,parseBlock1   
0D22   18 03                  JR   parseBlock5   
0D24                PARSEBLOCK4:      
0D24   15                     DEC   d   
0D25   20 C6                  JR   nz,parseBlock1   ; get the next element
0D27                PARSEBLOCK5:      
0D27   60 69                  LD   hl,bc   ; hl = IP
0D29   11 22 4E               LD   de,HEAP   ; is IP pointing to object in heap
0D2C   B7                     OR   a   ; IP - HEAP
0D2D   ED 52                  SBC   hl,de   
0D2F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D31   28 20                  JR   z,parseBlock6   
0D33   60 69                  LD   hl,bc   ; hl = IP
0D35   D1                     POP   de   ; de = block*
0D36   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D3A   B7                     OR   a   ; bc = size
0D3B   ED 52                  SBC   hl,de   
0D3D   44 4D                  LD   bc,hl   
0D3F   EB                     EX   de,hl   ; hl = block* de = heap*
0D40   ED 5B F0 4D            LD   de,(vHeapPtr)   
0D44   D5                     PUSH   de   ; return hblock*
0D45   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D47   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0D4B   ED 53 EC 4D            LD   (vStrPtr),de   
0D4F   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0D53                PARSEBLOCK6:      
0D53   0B                     DEC   bc   ; balanced, exit
0D54   E1                     POP   hl   ; hl = block*
0D55   E3                     EX   (sp),hl   ; return to caller
0D56   E9                     JP   (hl)   
0D57                             ; create function
0D57                             ; arg_list* block* -- func*
0D57                CREATEFUNC:      
0D57   E1                     POP   hl   ; save retrn address
0D58   22 08 4E               LD   (vTemp3),hl   
0D5B   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D5F   E1                     POP   hl   ; hl = block*
0D60   22 06 4E               LD   (vTemp2),hl   ; save block*
0D63   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D66   FD 56 05               LD   d,(iy+5)   
0D69   7B                     LD   a,e   ; if arg_list == null then make a func
0D6A   B2                     OR   d   
0D6B   20 09                  JR   nz,createFunc0   
0D6D   21 00 00               LD   hl,0   ; partial_array = null
0D70   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0D74   18 65                  JR   createFunc5   
0D76                CREATEFUNC0:      
0D76   E1                     POP   hl   ; hl = inner_arg_list*
0D77   E5                     PUSH   hl   ; save inner_arg_list
0D78   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0D7C   7E                     LD   a,(hl)   ; compile inner_num_locals
0D7D   4F                     LD   c,a   ; b = inner_num_locals
0D7E   12                     LD   (de),a   
0D7F   23                     INC   hl   
0D80   13                     INC   de   
0D81   7E                     LD   a,(hl)   ; compile inner_length
0D82   12                     LD   (de),a   
0D83   91                     SUB   c   ; a = inner_num args
0D84   23                     INC   hl   
0D85   13                     INC   de   
0D86   B7                     OR   a   ; compile args if inner_length > 0
0D87   28 05                  JR   z,createFunc1   
0D89   4F                     LD   c,a   ; bc = a
0D8A   06 00                  LD   b,0   
0D8C   ED B0                  LDIR      
0D8E                CREATEFUNC1:      
0D8E   EB                     EX   de,hl   ; hl = outer_arg_list
0D8F   FD 5E 04               LD   e,(iy+4)   
0D92   FD 56 05               LD   d,(iy+5)   
0D95   EB                     EX   de,hl   
0D96   23                     INC   hl   ; a = outer_length
0D97   7E                     LD   a,(hl)   
0D98   23                     INC   hl   
0D99   B7                     OR   a   
0D9A   28 05                  JR   z,createFunc2   
0D9C   4F                     LD   c,a   
0D9D   06 00                  LD   b,0   
0D9F   ED B0                  LDIR      ; append outer_args
0DA1                CREATEFUNC2:      ; a = outer_length
0DA1   47                     LD   b,a   ; b = a = outer_length
0DA2   2A F0 4D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DA5   23                     INC   hl   
0DA6   7E                     LD   a,(hl)   ; add outer_length to new length
0DA7   80                     ADD   a,b   
0DA8   77                     LD   (hl),a   
0DA9   2B                     DEC   hl   
0DAA   78                     LD   a,b   ; save outer_length in a'
0DAB   08                     EX   af,af'   
0DAC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DAD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DAE   B7                     OR   a   
0DAF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DB1   4F                     LD   c,a   ; c = inner_num_locals
0DB2   06 00                  LD   b,0   ; bc = inner_num_locals
0DB4   23                     INC   hl   ; a = inner_length
0DB5   7E                     LD   a,(hl)   
0DB6   91                     SUB   c   ; a = inner_num_args
0DB7   23                     INC   hl   ; hl = inner_arg_chars
0DB8   85                     ADD   a,l   ; hl += a
0DB9   6F                     LD   l,a   
0DBA   3E 00                  LD   a,0   
0DBC   84                     ADD   a,h   
0DBD   67                     LD   h,a   
0DBE   ED B0                  LDIR      ; append inner_locals
0DC0                CREATEFUNC2A:      
0DC0   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DC1   12                     LD   (de),a   ; compile partial_array length field
0DC2   13                     INC   de   
0DC3   AF                     XOR   a   
0DC4   12                     LD   (de),a   
0DC5   13                     INC   de   
0DC6   D5                     PUSH   de   ; push partial_array*
0DC7   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DC8   FD 5E 02               LD   e,(iy+2)   
0DCB   FD 56 03               LD   d,(iy+3)   
0DCE   EB                     EX   de,hl   
0DCF                CREATEFUNC3:      
0DCF   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DD0   4E                     LD   c,(hl)   
0DD1   2B                     DEC   hl   
0DD2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DD3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DD4   13                     INC   de   
0DD5   79                     LD   a,c   
0DD6   12                     LD   (de),a   
0DD7   13                     INC   de   
0DD8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DDA                CREATEFUNC4:      
0DDA   E1                     POP   hl   ; hl = partial_array*
0DDB                CREATEFUNC5:      
0DDB   C1                     POP   bc   ; bc = new_arg_list*
0DDC   D5                     PUSH   de   ; return new func*
0DDD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DDE   73                     LD   (hl),e   ; compile partial_array* to func
0DDF   23                     INC   hl   
0DE0   72                     LD   (hl),d   
0DE1   23                     INC   hl   
0DE2   ED 5B 06 4E            LD   de,(vTemp2)   ; de = block*
0DE6   73                     LD   (hl),e   ; compile block* to func
0DE7   23                     INC   hl   
0DE8   72                     LD   (hl),d   
0DE9   23                     INC   hl   
0DEA   71                     LD   (hl),c   ; compile new_arg_list* to func
0DEB   23                     INC   hl   
0DEC   70                     LD   (hl),b   
0DED   23                     INC   hl   
0DEE   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap ptr
0DF1   22 EC 4D               LD   (vStrPtr),hl   
0DF4   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0DF8   2A 08 4E               LD   hl,(vTemp3)   ; jump to return address
0DFB   E9                     JP   (hl)   
0DFC                             ; ; prints whatever in in buffer starting from BUF and ending at vStrPtr*
0DFC                             ; flushBuffer:
0DFC                             ;     push af
0DFC                             ;     push de
0DFC                             ;     push hl
0DFC                             ;     ld hl,(vStrPtr)
0DFC                             ;     ld de,BUF
0DFC                             ;     ld (vStrPtr),de
0DFC                             ;     or a
0DFC                             ;     sbc hl,de
0DFC                             ;     call printChars2
0DFC                             ;     pop hl
0DFC                             ;     pop de
0DFC                             ;     pop af
0DFC                             ;     ret
0DFC                             ; printChars1:
0DFC                             ;     ld a,(de)                           ; print char at char*
0DFC                             ;     call putchar
0DFC                             ;     inc de                              ; char*++
0DFC                             ;     dec hl                              ; count--
0DFC                             ; printChars2:
0DFC                             ;     ld a,l                              ; count == 0?
0DFC                             ;     or h
0DFC                             ;     ret z
0DFC                             ;     jr printChars1                      ; if not loop
0DFC                COMMANDTABLE:      
0DFC   03                     INC   bc   
0DFD   0A                     LD   a,(bc)   
0DFE   FE 7B                  CP   "z"+1   
0E00   30 09                  JR   nc,commandTable2   
0E02   D6 61                  SUB   "a"   
0E04   38 05                  JR   c,commandTable2   
0E06                COMMANDTABLE1:      
0E06   E1                     POP   hl   
0E07   85                     ADD   a,l   
0E08   6F                     LD   l,a   
0E09   6E                     LD   l,(hl)   ; must have the same msb as the table
0E0A   E9                     JP   (hl)   
0E0B                COMMANDTABLE2:      
0E0B   3E 1A                  LD   a,26   
0E0D   0B                     DEC   bc   
0E0E   18 F6                  JR   commandTable1   
0E10                             ; followed by a table
0E10                             ; db char
0E10                             ; db lsb(addr)
0E10                             ; the final item must have char == NUL
0E10                JUMPTABLE:      
0E10   E1                     POP   hl   
0E11   03                     INC   bc   
0E12                JUMPTABLE0:      
0E12   AF                     XOR   a   
0E13   BE                     CP   (hl)   
0E14   28 0B                  JR   z,jumpTable2   
0E16   0A                     LD   a,(bc)   
0E17   BE                     CP   (hl)   
0E18   28 04                  JR   z,jumpTable1   
0E1A   23                     INC   hl   
0E1B   23                     INC   hl   
0E1C   18 F4                  JR   jumpTable0   
0E1E                JUMPTABLE1:      
0E1E   23                     INC   hl   
0E1F   6E                     LD   l,(hl)   ; must have the same msb as the table
0E20   E9                     JP   (hl)   
0E21                JUMPTABLE2:      
0E21   0B                     DEC   bc   
0E22   23                     INC   hl   
0E23   E9                     JP   (hl)   
0E24                             ; followed by a table
0E24                             ; db char
0E24                             ; db lsb(addr)
0E24                             ; the final item must have char == NUL
0E24                XJUMPTABLE:      
0E24   E1                     POP   hl   
0E25   03                     INC   bc   
0E26                XJUMPTABLE0:      
0E26   AF                     XOR   a   
0E27   BE                     CP   (hl)   
0E28   28 10                  JR   z,xjumpTable2   
0E2A   0A                     LD   a,(bc)   
0E2B   BE                     CP   (hl)   
0E2C   28 04                  JR   z,xjumpTable1   
0E2E   23                     INC   hl   
0E2F   23                     INC   hl   
0E30   18 F4                  JR   xjumpTable0   
0E32                XJUMPTABLE1:      
0E32   23                     INC   hl   
0E33   7E                     LD   a,(hl)   
0E34   87                     ADD   a,a   
0E35   6F                     LD   l,a   
0E36   3E 00                  LD   a,0   
0E38   8C                     ADC   a,h   
0E39   E9                     JP   (hl)   
0E3A                XJUMPTABLE2:      
0E3A   0B                     DEC   bc   
0E3B   23                     INC   hl   
0E3C   E9                     JP   (hl)   
0E3D                PRTSTR0:      
0E3D   CD 85 00               CALL   putchar   
0E40   23                     INC   hl   
0E41                PRTSTR:      
0E41   7E                     LD   a,(hl)   
0E42   B7                     OR   a   
0E43   20 F8                  JR   nz,prtstr0   
0E45   C9                     RET      
0E46                             ; **************************************************************************
0E46                             ; calculate nesting value
0E46                             ; a is char to be tested,
0E46                             ; e is the nesting value (initially 0)
0E46                             ; e is increased by ( and [
0E46                             ; e is decreased by ) and ]
0E46                             ; e has its bit 7 toggled by `
0E46                             ; limited to 127 levels
0E46                             ; **************************************************************************
0E46                NESTING:      
0E46   FE 22                  CP   DQ   ; quote char
0E48   28 06                  JR   z,nesting0   
0E4A   FE 60                  CP   "`"   ; quote char
0E4C   28 02                  JR   z,nesting0   
0E4E   18 0A                  JR   nesting1   
0E50                NESTING0:      
0E50   CB 7B                  BIT   7,e   
0E52   28 03                  JR   z,nesting1a   
0E54   CB BB                  RES   7,e   
0E56   C9                     RET      
0E57                NESTING1A:      
0E57   CB FB                  SET   7,e   
0E59   C9                     RET      
0E5A                NESTING1:      
0E5A   CB 7B                  BIT   7,e   
0E5C   C0                     RET   nz   
0E5D   FE 7B                  CP   "{"   
0E5F   28 08                  JR   z,nesting2   
0E61   FE 5B                  CP   "["   
0E63   28 04                  JR   z,nesting2   
0E65   FE 28                  CP   "("   
0E67   20 02                  JR   nz,nesting3   
0E69                NESTING2:      
0E69   1C                     INC   e   
0E6A   C9                     RET      
0E6B                NESTING3:      
0E6B   FE 7D                  CP   "}"   
0E6D   28 07                  JR   z,nesting4   
0E6F   FE 5D                  CP   "]"   
0E71   28 03                  JR   z,nesting4   
0E73   FE 29                  CP   ")"   
0E75   C0                     RET   nz   
0E76                NESTING4:      
0E76   1D                     DEC   e   
0E77   C9                     RET      
0E78                PROMPT:      
0E78   CD 88 0E               CALL   printStr   
0E7B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E80   C9                     RET      
0E81                CRLF:        
0E81   CD 88 0E               CALL   printStr   
0E84   0D 0A 00               .CSTR   "\r\n"   
0E87   C9                     RET      
0E88                             ; prints a null teminated string
0E88                             ; the string should be immediately following the call
0E88                PRINTSTR:      
0E88   E3                     EX   (sp),hl   ; swap			
0E89   CD 41 0E               CALL   prtstr   
0E8C   23                     INC   hl   ; inc past NUL
0E8D   E3                     EX   (sp),hl   ; put it back	
0E8E   C9                     RET      
0E8F                INIT:        
0E8F   21 F0 01               LD   hl,titleStr   
0E92   11 0E 4E               LD   de,titleBuf   
0E95   06 14                  LD   b,20   
0E97                INIT1:       
0E97   1A                     LD   a,(de)   
0E98   BE                     CP   (hl)   
0E99   20 17                  JR   nz,coldBoot0   
0E9B   13                     INC   de   
0E9C   23                     INC   hl   
0E9D   10 F8                  DJNZ   init1   
0E9F                WARMINIT:      
0E9F   ED 4B FC 4D            LD   bc,(vSavedIP)   ; restore IP
0EA3   ED 7B FE 4D            LD   sp,(vSavedSP)   ; restore SP
0EA7   DD 2A 00 4E            LD   ix,(vSavedNext)   ; restore Next
0EAB   FD 2A 02 4E            LD   iy,(vSavedBP)   ; restore BP
0EAF   C3 E9 0E               JP   start1   
0EB2                COLDBOOT0:      
0EB2   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EB5   11 0E 4E               LD   de,titleBuf   
0EB8   06 14                  LD   b,20   
0EBA   ED B0                  LDIR      
0EBC                COLDINIT:      
0EBC   21 DE 01               LD   hl,isysVars   
0EBF   11 E6 4D               LD   de,sysVars   
0EC2   01 12 00               LD   bc,9 * 2   
0EC5   ED B0                  LDIR      
0EC7   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0ECA   06 34                  LD   b,26*2   
0ECC   AF                     XOR   a   
0ECD                COLDBOOT1:      
0ECD   77                     LD   (hl),a   
0ECE   23                     INC   hl   
0ECF   10 FC                  DJNZ   coldBoot1   
0ED1   DD 2A EE 4D            LD   ix,(vNext)   
0ED5   FD 21 00 4B            LD   iy,STACK   
0ED9   C9                     RET      
0EDA                COLDSTART:      
0EDA   31 00 4B               LD   sp,STACK   
0EDD   CD B2 0E               CALL   coldBoot0   
0EE0   C3 E9 0E               JP   start1   
0EE3                START:       
0EE3   31 00 4B               LD   sp,STACK   ; start Monty
0EE6   CD 8F 0E               CALL   init   ; setups
0EE9                START1:      
0EE9   21 0E 4E               LD   hl,titleBuf   
0EEC   CD 41 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EEF                INTERPRET:      
0EEF   CD 78 0E               CALL   prompt   
0EF2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EF5   21 00 4B               LD   hl,TIB   
0EF8   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EFB                INTERPRET2:      ; calculate nesting
0EFB   1E 00                  LD   e,0   ; initilize nesting value
0EFD   C5                     PUSH   bc   ; save offset into TIB,
0EFE                             ; bc is also the count of chars in TIB
0EFE   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0F01   18 0B                  JR   interpret4   
0F03                INTERPRET3:      
0F03   3E 33                  LD   a,"3"   
0F05   CD 85 00               CALL   putchar   
0F08   7E                     LD   a,(hl)   ; a = char in TIB
0F09   23                     INC   hl   ; inc pointer into TIB
0F0A   0B                     DEC   bc   ; dec count of chars in TIB
0F0B   CD 46 0E               CALL   nesting   ; update nesting value
0F0E                INTERPRET4:      
0F0E   79                     LD   a,c   ; is count zero?
0F0F   B0                     OR   b   
0F10   20 F1                  JR   nz,interpret3   ; if not loop
0F12   C1                     POP   bc   ; restore offset into TIB
0F13                INTERPRET5:      
0F13   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F16   FE 20                  CP   $20   ; compare to space
0F18   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F1A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F1C                             ; ???? NEEDED?
0F1C   28 36                  JR   z,interpret8   
0F1E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F20   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F22   FE 05                  CP   CTRL_E   
0F24   CA B2 0F               JP   z,edit_   
0F27   FE 08                  CP   CTRL_H   
0F29   CA A2 0F               JP   z,backSpace_   
0F2C   FE 0A                  CP   CTRL_J   
0F2E   CA CA 0F               JP   z,reEdit_   
0F31                             ; cp CTRL_S
0F31                             ; jp z,printStack_
0F31                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F31                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F31                             ; DB     lsb(list_)       ; FF  ^L 12
0F31                             ; DB     lsb(printStack_) ; DLE ^P 16
0F31                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F31                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F31                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F31                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F31                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F31                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F31                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F31                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F31                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F31                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F31                INTERPRET5A:      
0F31                             ; ld (vTIBPtr),bc
0F31                             ; ld bc,(vTIBPtr)
0F31   18 C8                  JR   interpret2   
0F33                INTERPRET6:      
0F33   21 00 4B               LD   hl,TIB   
0F36   09                     ADD   hl,bc   
0F37   77                     LD   (hl),a   ; store the character in textbuf
0F38   03                     INC   bc   
0F39   CD 85 00               CALL   putchar   ; echo character to screen
0F3C   CD 46 0E               CALL   nesting   
0F3F   18 D2                  JR   interpret5   ; wait for next character
0F41                INTERPRET7:      
0F41   21 00 4B               LD   hl,TIB   
0F44   09                     ADD   hl,bc   
0F45   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F47   23                     INC   hl   
0F48   36 0A                  LD   (hl),"\n"   
0F4A   23                     INC   hl   
0F4B   03                     INC   bc   
0F4C   03                     INC   bc   
0F4D   CD 81 0E               CALL   crlf   ; echo character to screen
0F50   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F51   B7                     OR   a   
0F52   20 BF                  JR   nz,interpret5   
0F54                INTERPRET8:      
0F54   21 00 4B               LD   hl,TIB   
0F57   09                     ADD   hl,bc   
0F58   22 EA 4D               LD   (vTIBPtr),hl   
0F5B   01 00 4B               LD   bc,TIB   
0F5E   ED 43 FC 4D            LD   (vSavedIP),bc   ; save IP
0F62   ED 73 FE 4D            LD   (vSavedSP),sp   ; save SP
0F66   DD 22 00 4E            LD   (vSavedNext),ix   ; save Next
0F6A   FD 22 02 4E            LD   (vSavedBP),iy   ; save BP
0F6E   0B                     DEC   bc   
0F6F                NEXT:        
0F6F   03                     INC   bc   ; Increment the IP
0F70   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F71   FE 20                  CP   " "   ; whitespace?
0F73   28 FA                  JR   z,next   ; space? ignore
0F75   38 08                  JR   c,next1   
0F77   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F79   6F                     LD   l,a   ; index into table
0F7A   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F7C   6E                     LD   l,(hl)   ; get low jump address
0F7D   24                     INC   h   ; Load h with page after opcodes
0F7E   E9                     JP   (hl)   ; Jump to routine
0F7F                NEXT1:       
0F7F   FE 00                  CP   NUL   ; end of input string?
0F81   28 03                  JR   z,exit   
0F83   C3 EF 0E               JP   interpret   ; no, other whitespace, macros?
0F86                EXIT:        
0F86   03                     INC   bc   
0F87   60 69                  LD   hl,bc   
0F89   E9                     JP   (hl)   
0F8A                RUN:         
0F8A   C1                     POP   bc   
0F8B   0B                     DEC   bc   
0F8C   DD E9                  JP   (ix)   
0F8E                ERROR:       
0F8E   E5                     PUSH   hl   
0F8F   CD 8A 0F               CALL   run   
0F92   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F9F   C3 EF 0E               JP   interpret   
0FA2                BACKSPACE_:      
0FA2   79                     LD   a,c   
0FA3   B0                     OR   b   
0FA4   CA FB 0E               JP   z,interpret2   
0FA7   0B                     DEC   bc   
0FA8   CD 88 0E               CALL   printStr   
0FAB   08 20 08 00            .CSTR   "\b \b"   
0FAF   C3 FB 0E               JP   interpret2   
0FB2                             ; edit
0FB2                EDIT_:       
0FB2   CD 8A 0F               CALL   run   
0FB5   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FC7   C3 EF 0E               JP   interpret   
0FCA                REEDIT_:      
0FCA   C3 EF 0E               JP   interpret   
0FCD                PRINTSTACK_:      
0FCD   CD 8A 0F               CALL   run   
0FD0   2F 70 6B 00            .CSTR   "/pk"   
0FD4   C3 EF 0E               JP   interpret   
0FD7                             ; editDef:
0FD7                             ;     pop hl                      ; pop ret address
0FD7                             ;     ex (sp),hl                  ; swap with TOS
0FD7                             ;     push hl                     ; dup TOS
0FD7                             ;     ld a,l                      ; a = ident
0FD7                             ;     ld de,TIB                   ; de = start of TIB
0FD7                             ;     ld (vTIBPtr),de             ; update TIB*
0FD7                             ;     push ix                     ; save NEXT
0FD7                             ;     ld ix,editDef0              ; NEXT = editDef0
0FD7                             ;     jp lookupRef                ; convert letter into address
0FD7                             ; editDef0:
0FD7                             ;     ld e,(hl)                   ; de = (hl++)
0FD7                             ;     inc hl
0FD7                             ;     ld d,(hl)
0FD7                             ;     ld a,d                      ; de == 0 ?
0FD7                             ;     or e
0FD7                             ;     jr z,editDef4
0FD7                             ;     ld ix,editDef3              ; NEXT = editDef3
0FD7                             ;     ex de,hl
0FD7                             ;     ld a,(hl)
0FD7                             ;     cp "{"
0FD7                             ;     jr nz,editDef1
0FD7                             ;     jp editBlock0               ; convert letter into address
0FD7                             ; editDef1:
0FD7                             ;     cp "("
0FD7                             ;     jr nz,editDef2
0FD7                             ;     jp editBlock0               ; convert letter into address
0FD7                             ; editDef2:
0FD7                             ;     jp editFunc
0FD7                             ; editDef3:
0FD7                             ;     ld a," "                    ; write assign
0FD7                             ;     call writeChar
0FD7                             ;     pop hl                      ; a = ident
0FD7                             ;     ld a,l
0FD7                             ;     call writeChar
0FD7                             ;     ld a,"="                    ; write assign
0FD7                             ;     call writeChar
0FD7                             ;     ld ix,editDef4              ; NEXT = editDef4
0FD7                             ;     jp printTIB
0FD7                             ; editDef4:
0FD7                             ;     pop ix                      ; restore NEXT
0FD7                             ;     jp (ix)
0FD7                             ; writeChar:
0FD7                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FD7                             ;     ld (de),a                   ; write ident
0FD7                             ;     inc de
0FD7                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FD7                             ;     ret
0FD7                             ; ; printTIB
0FD7                             ; printTIB:
0FD7                             ;     ld hl,(vTIBPtr)
0FD7                             ;     ld de,TIB
0FD7                             ;     or a
0FD7                             ;     sbc hl,de
0FD7                             ;     jp printTIB2
0FD7                             ; printTIB1:
0FD7                             ;     ld a,(de)
0FD7                             ;     call putchar
0FD7                             ; printTIB2:
0FD7                             ;     ld a,l
0FD7                             ;     or h
0FD7                             ;     jr nz,printTIB1
0FD7                             ;     jp (ix)
0FD7                             ; editBlock:
0FD7                             ;     pop hl                      ; hl = block*
0FD7                             ; editBlock0:
0FD7                             ;     push ix                     ; save next
0FD7                             ;     push hl                     ; push block*
0FD7                             ;     push hl                     ; push block*
0FD7                             ;     ld ix,(editBlock2)
0FD7                             ;     jp blockLength
0FD7                             ; editBlock1:
0FD7                             ;     pop hl                      ; bc = length, (sp) = IP
0FD7                             ;     pop de                      ; de = block*
0FD7                             ;     ld a,l
0FD7                             ;     or h
0FD7                             ;     jr z,editBlock2
0FD7                             ;     push bc
0FD7                             ;     ld bc,hl
0FD7                             ;     ex de,hl                    ; hl = block*
0FD7                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FD7                             ;     ldir                        ; copy block to TIB
0FD7                             ;     ld (vTIBPtr),de              ; save TIB*
0FD7                             ;     pop bc
0FD7                             ; editBlock2:
0FD7                             ;     pop ix                      ; restore next
0FD7                             ;     jp (ix)
0FD7                             ; editFunc:
0FD7                             ;     jp (ix)
0FD7                             ; editArray:
0FD7                             ;     jp (ix)
0FD7                             ; editparseArgs:
0FD7                             ;     jp (ix)
0FD7                             ; ; blockLength
0FD7                             ; ; addr1 -- length
0FD7                             ; blockLength:
0FD7                             ;     pop hl                      ; block*
0FD7                             ;     push hl                     ; save block*
0FD7                             ;     inc hl                      ; skip first char
0FD7                             ;     ld d,1                      ; increase nesting
0FD7                             ; blockLength1:                   ; Skip to end of definition
0FD7                             ;     ld a,(hl)                   ; Get the next character
0FD7                             ;     inc hl                      ; Point to next character
0FD7                             ;     cp " " + 1                  ; ignore whitespace
0FD7                             ;     jr c,blockLength1
0FD7                             ;     cp ")"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "}"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "]"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "("
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "{"
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "["
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "'"
0FD7                             ;     jr z,blockLength3
0FD7                             ;     cp "`"
0FD7                             ;     jr z,blockLength3
0FD7                             ;     cp DQ
0FD7                             ;     jr z,blockLength3
0FD7                             ;     jr blockLength1
0FD7                             ; blockLength2:
0FD7                             ;     inc d
0FD7                             ;     jr blockLength1
0FD7                             ; blockLength4:
0FD7                             ;     dec d
0FD7                             ;     jr nz, blockLength1         ; get the next element
0FD7                             ; blockLength3:
0FD7                             ;     ld a,$80
0FD7                             ;     xor d
0FD7                             ;     ld d,a
0FD7                             ;     jr nz, blockLength1
0FD7                             ;     pop hl                      ; hl = block*
0FD7                             ;     or a
0FD7                             ;     sbc hl,de
0FD7                             ;     push hl
0FD7                             ;     jp (ix)
0FD7                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FD7                             ; \a start of stack \#3 depth \b base \$ prompt
0FD7                             ; DW dStack               ; a vS0 start of datastack			
0FD7                             ; DW FALSE                ; b vBase16
0FD7                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FD7                             ; DW 0                    ; d
0FD7                             ; DW 65                   ; e vLastDef "A" last command u defined
0FD7                             ; DW 0                    ; f
0FD7                             ; DW page6                ; g 256 bytes limits
0FD7                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FD7                          ;*Macro unroll: FUNC f1, 2, "abc"
0FD7                F1:          
0FD7   CD 11 0C               CALL   go   
0FDA   00 00                  DW   NUL   
0FDC   E5 0F                  DW   f1M_3077S12   
0FDE   E0 0F                  DW   $+2   
0FE0   02                     DB   2   
0FE1   03 61 62 63            .PSTR   "abc"   
0FE5                F1M_3077S12:      
0FE5   7B                     DB   "{"   
0FE6   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
101D   7D                     DB   "}"   
101E   00                     DB   0   
101F                          ;*Macro unroll: FUNC f2, 0, ""
101F                F2:          
101F   CD 11 0C               CALL   go   
1022   00 00                  DW   NUL   
1024   2A 10                  DW   f2M_3082S18   
1026   28 10                  DW   $+2   
1028   00                     DB   0   
1029   00                     .PSTR   ""   
102A                F2M_3082S18:      
102A   00                     DB   0   
102B                          ;*Macro unroll: FUNC f3, 0, ""
102B                F3:          
102B   CD 11 0C               CALL   go   
102E   00 00                  DW   NUL   
1030   36 10                  DW   f3M_3084S21   
1032   34 10                  DW   $+2   
1034   00                     DB   0   
1035   00                     .PSTR   ""   
1036                F3M_3084S21:      
1036   00                     DB   0   
1037                          ;*Macro unroll: FUNC f4, 0, ""
1037                F4:          
1037   CD 11 0C               CALL   go   
103A   00 00                  DW   NUL   
103C   42 10                  DW   f4M_3086S24   
103E   40 10                  DW   $+2   
1040   00                     DB   0   
1041   00                     .PSTR   ""   
1042                F4M_3086S24:      
1042   00                     DB   0   
1043                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "[1 2 3].a", 0
1100                             ; test "2 3 ==", FALSE
1100                             ; call printStr
1100                             ; .cstr "Done!"
1100                             ; HALT
1100                             ; 
1100                          ;*Macro unroll:  test "/f", false
1100   31 00 4B               LD   SP,STACK   
1103   CD BC 0E               CALL   coldInit   
1106   CD 4C 49               CALL   execStr   
1109   2F 66 00               DB   "/f",0   
110C   E1                     POP   HL   
110D   E5                     PUSH   HL   
110E   11 00 00               LD   DE,false   
1111   B7                     OR   A   
1112   ED 52                  SBC   HL,DE   
1114   7D                     LD   A,L   
1115   B4                     OR   H   
1116   CA 6D 11               JP   Z,expectM_3103S46   
1119   CD 88 0E               CALL   printStr   
111C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1125   CD 88 0E               CALL   printStr   
1128   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1137   21 00 00               LD   hl,false   
113A   E5                     PUSH   hl   
113B   E5                     PUSH   hl   
113C   CD 8A 0F               CALL   run   
113F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1147   CD 88 0E               CALL   printStr   
114A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1157   E1                     POP   hl   
1158   E5                     PUSH   hl   
1159   E5                     PUSH   hl   
115A   CD 8A 0F               CALL   run   
115D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
116C   76                     HALT      
116D                EXPECTM_3103S46:      
116D   E1                     POP   HL   
116E                          ;*Macro unroll:  test "/t", true
116E   31 00 4B               LD   SP,STACK   
1171   CD BC 0E               CALL   coldInit   
1174   CD 4C 49               CALL   execStr   
1177   2F 74 00               DB   "/t",0   
117A   E1                     POP   HL   
117B   E5                     PUSH   HL   
117C   11 FF FF               LD   DE,true   
117F   B7                     OR   A   
1180   ED 52                  SBC   HL,DE   
1182   7D                     LD   A,L   
1183   B4                     OR   H   
1184   CA DB 11               JP   Z,expectM_3104S47   
1187   CD 88 0E               CALL   printStr   
118A   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1193   CD 88 0E               CALL   printStr   
1196   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A5   21 FF FF               LD   hl,true   
11A8   E5                     PUSH   hl   
11A9   E5                     PUSH   hl   
11AA   CD 8A 0F               CALL   run   
11AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11B5   CD 88 0E               CALL   printStr   
11B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C5   E1                     POP   hl   
11C6   E5                     PUSH   hl   
11C7   E5                     PUSH   hl   
11C8   CD 8A 0F               CALL   run   
11CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11DA   76                     HALT      
11DB                EXPECTM_3104S47:      
11DB   E1                     POP   HL   
11DC                          ;*Macro unroll:  test "1", 1
11DC   31 00 4B               LD   SP,STACK   
11DF   CD BC 0E               CALL   coldInit   
11E2   CD 4C 49               CALL   execStr   
11E5   31 00                  DB   "1",0   
11E7   E1                     POP   HL   
11E8   E5                     PUSH   HL   
11E9   11 01 00               LD   DE,1   
11EC   B7                     OR   A   
11ED   ED 52                  SBC   HL,DE   
11EF   7D                     LD   A,L   
11F0   B4                     OR   H   
11F1   CA 47 12               JP   Z,expectM_3105S48   
11F4   CD 88 0E               CALL   printStr   
11F7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11FF   CD 88 0E               CALL   printStr   
1202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1211   21 01 00               LD   hl,1   
1214   E5                     PUSH   hl   
1215   E5                     PUSH   hl   
1216   CD 8A 0F               CALL   run   
1219   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1221   CD 88 0E               CALL   printStr   
1224   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1231   E1                     POP   hl   
1232   E5                     PUSH   hl   
1233   E5                     PUSH   hl   
1234   CD 8A 0F               CALL   run   
1237   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1246   76                     HALT      
1247                EXPECTM_3105S48:      
1247   E1                     POP   HL   
1248                          ;*Macro unroll:  test "2", 2
1248   31 00 4B               LD   SP,STACK   
124B   CD BC 0E               CALL   coldInit   
124E   CD 4C 49               CALL   execStr   
1251   32 00                  DB   "2",0   
1253   E1                     POP   HL   
1254   E5                     PUSH   HL   
1255   11 02 00               LD   DE,2   
1258   B7                     OR   A   
1259   ED 52                  SBC   HL,DE   
125B   7D                     LD   A,L   
125C   B4                     OR   H   
125D   CA B3 12               JP   Z,expectM_3106S49   
1260   CD 88 0E               CALL   printStr   
1263   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
126B   CD 88 0E               CALL   printStr   
126E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127D   21 02 00               LD   hl,2   
1280   E5                     PUSH   hl   
1281   E5                     PUSH   hl   
1282   CD 8A 0F               CALL   run   
1285   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
128D   CD 88 0E               CALL   printStr   
1290   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129D   E1                     POP   hl   
129E   E5                     PUSH   hl   
129F   E5                     PUSH   hl   
12A0   CD 8A 0F               CALL   run   
12A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12B2   76                     HALT      
12B3                EXPECTM_3106S49:      
12B3   E1                     POP   HL   
12B4                          ;*Macro unroll:  test "1", 1
12B4   31 00 4B               LD   SP,STACK   
12B7   CD BC 0E               CALL   coldInit   
12BA   CD 4C 49               CALL   execStr   
12BD   31 00                  DB   "1",0   
12BF   E1                     POP   HL   
12C0   E5                     PUSH   HL   
12C1   11 01 00               LD   DE,1   
12C4   B7                     OR   A   
12C5   ED 52                  SBC   HL,DE   
12C7   7D                     LD   A,L   
12C8   B4                     OR   H   
12C9   CA 1F 13               JP   Z,expectM_3107S50   
12CC   CD 88 0E               CALL   printStr   
12CF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12D7   CD 88 0E               CALL   printStr   
12DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E9   21 01 00               LD   hl,1   
12EC   E5                     PUSH   hl   
12ED   E5                     PUSH   hl   
12EE   CD 8A 0F               CALL   run   
12F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12F9   CD 88 0E               CALL   printStr   
12FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1309   E1                     POP   hl   
130A   E5                     PUSH   hl   
130B   E5                     PUSH   hl   
130C   CD 8A 0F               CALL   run   
130F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
131E   76                     HALT      
131F                EXPECTM_3107S50:      
131F   E1                     POP   HL   
1320                          ;*Macro unroll:  test "0", 0
1320   31 00 4B               LD   SP,STACK   
1323   CD BC 0E               CALL   coldInit   
1326   CD 4C 49               CALL   execStr   
1329   30 00                  DB   "0",0   
132B   E1                     POP   HL   
132C   E5                     PUSH   HL   
132D   11 00 00               LD   DE,0   
1330   B7                     OR   A   
1331   ED 52                  SBC   HL,DE   
1333   7D                     LD   A,L   
1334   B4                     OR   H   
1335   CA 8B 13               JP   Z,expectM_3108S51   
1338   CD 88 0E               CALL   printStr   
133B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1343   CD 88 0E               CALL   printStr   
1346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1355   21 00 00               LD   hl,0   
1358   E5                     PUSH   hl   
1359   E5                     PUSH   hl   
135A   CD 8A 0F               CALL   run   
135D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1365   CD 88 0E               CALL   printStr   
1368   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1375   E1                     POP   hl   
1376   E5                     PUSH   hl   
1377   E5                     PUSH   hl   
1378   CD 8A 0F               CALL   run   
137B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138A   76                     HALT      
138B                EXPECTM_3108S51:      
138B   E1                     POP   HL   
138C                          ;*Macro unroll:  test "10", 10
138C   31 00 4B               LD   SP,STACK   
138F   CD BC 0E               CALL   coldInit   
1392   CD 4C 49               CALL   execStr   
1395   31 30 00               DB   "10",0   
1398   E1                     POP   HL   
1399   E5                     PUSH   HL   
139A   11 0A 00               LD   DE,10   
139D   B7                     OR   A   
139E   ED 52                  SBC   HL,DE   
13A0   7D                     LD   A,L   
13A1   B4                     OR   H   
13A2   CA F9 13               JP   Z,expectM_3109S52   
13A5   CD 88 0E               CALL   printStr   
13A8   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13B1   CD 88 0E               CALL   printStr   
13B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C3   21 0A 00               LD   hl,10   
13C6   E5                     PUSH   hl   
13C7   E5                     PUSH   hl   
13C8   CD 8A 0F               CALL   run   
13CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D3   CD 88 0E               CALL   printStr   
13D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E3   E1                     POP   hl   
13E4   E5                     PUSH   hl   
13E5   E5                     PUSH   hl   
13E6   CD 8A 0F               CALL   run   
13E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13F8   76                     HALT      
13F9                EXPECTM_3109S52:      
13F9   E1                     POP   HL   
13FA                          ;*Macro unroll:  test "123", 123
13FA   31 00 4B               LD   SP,STACK   
13FD   CD BC 0E               CALL   coldInit   
1400   CD 4C 49               CALL   execStr   
1403   31 32 33 00            DB   "123",0   
1407   E1                     POP   HL   
1408   E5                     PUSH   HL   
1409   11 7B 00               LD   DE,123   
140C   B7                     OR   A   
140D   ED 52                  SBC   HL,DE   
140F   7D                     LD   A,L   
1410   B4                     OR   H   
1411   CA 69 14               JP   Z,expectM_3110S53   
1414   CD 88 0E               CALL   printStr   
1417   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1421   CD 88 0E               CALL   printStr   
1424   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1433   21 7B 00               LD   hl,123   
1436   E5                     PUSH   hl   
1437   E5                     PUSH   hl   
1438   CD 8A 0F               CALL   run   
143B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1443   CD 88 0E               CALL   printStr   
1446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1453   E1                     POP   hl   
1454   E5                     PUSH   hl   
1455   E5                     PUSH   hl   
1456   CD 8A 0F               CALL   run   
1459   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1468   76                     HALT      
1469                EXPECTM_3110S53:      
1469   E1                     POP   HL   
146A                          ;*Macro unroll:  test "-1",-1
146A   31 00 4B               LD   SP,STACK   
146D   CD BC 0E               CALL   coldInit   
1470   CD 4C 49               CALL   execStr   
1473   2D 31 00               DB   "-1",0   
1476   E1                     POP   HL   
1477   E5                     PUSH   HL   
1478   11 FF FF               LD   DE,-1   
147B   B7                     OR   A   
147C   ED 52                  SBC   HL,DE   
147E   7D                     LD   A,L   
147F   B4                     OR   H   
1480   CA D7 14               JP   Z,expectM_3111S54   
1483   CD 88 0E               CALL   printStr   
1486   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
148F   CD 88 0E               CALL   printStr   
1492   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A1   21 FF FF               LD   hl,-1   
14A4   E5                     PUSH   hl   
14A5   E5                     PUSH   hl   
14A6   CD 8A 0F               CALL   run   
14A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14B1   CD 88 0E               CALL   printStr   
14B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C1   E1                     POP   hl   
14C2   E5                     PUSH   hl   
14C3   E5                     PUSH   hl   
14C4   CD 8A 0F               CALL   run   
14C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14D6   76                     HALT      
14D7                EXPECTM_3111S54:      
14D7   E1                     POP   HL   
14D8                          ;*Macro unroll:  test "~a", $61
14D8   31 00 4B               LD   SP,STACK   
14DB   CD BC 0E               CALL   coldInit   
14DE   CD 4C 49               CALL   execStr   
14E1   7E 61 00               DB   "~a",0   
14E4   E1                     POP   HL   
14E5   E5                     PUSH   HL   
14E6   11 61 00               LD   DE,$61   
14E9   B7                     OR   A   
14EA   ED 52                  SBC   HL,DE   
14EC   7D                     LD   A,L   
14ED   B4                     OR   H   
14EE   CA 45 15               JP   Z,expectM_3112S55   
14F1   CD 88 0E               CALL   printStr   
14F4   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
14FD   CD 88 0E               CALL   printStr   
1500   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150F   21 61 00               LD   hl,$61   
1512   E5                     PUSH   hl   
1513   E5                     PUSH   hl   
1514   CD 8A 0F               CALL   run   
1517   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
151F   CD 88 0E               CALL   printStr   
1522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
152F   E1                     POP   hl   
1530   E5                     PUSH   hl   
1531   E5                     PUSH   hl   
1532   CD 8A 0F               CALL   run   
1535   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1544   76                     HALT      
1545                EXPECTM_3112S55:      
1545   E1                     POP   HL   
1546                          ;*Macro unroll:  test "~~", $7e
1546   31 00 4B               LD   SP,STACK   
1549   CD BC 0E               CALL   coldInit   
154C   CD 4C 49               CALL   execStr   
154F   7E 7E 00               DB   "~~",0   
1552   E1                     POP   HL   
1553   E5                     PUSH   HL   
1554   11 7E 00               LD   DE,$7e   
1557   B7                     OR   A   
1558   ED 52                  SBC   HL,DE   
155A   7D                     LD   A,L   
155B   B4                     OR   H   
155C   CA B3 15               JP   Z,expectM_3113S56   
155F   CD 88 0E               CALL   printStr   
1562   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
156B   CD 88 0E               CALL   printStr   
156E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
157D   21 7E 00               LD   hl,$7e   
1580   E5                     PUSH   hl   
1581   E5                     PUSH   hl   
1582   CD 8A 0F               CALL   run   
1585   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
158D   CD 88 0E               CALL   printStr   
1590   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
159D   E1                     POP   hl   
159E   E5                     PUSH   hl   
159F   E5                     PUSH   hl   
15A0   CD 8A 0F               CALL   run   
15A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15B2   76                     HALT      
15B3                EXPECTM_3113S56:      
15B3   E1                     POP   HL   
15B4                          ;*Macro unroll:  test "$10", $10
15B4   31 00 4B               LD   SP,STACK   
15B7   CD BC 0E               CALL   coldInit   
15BA   CD 4C 49               CALL   execStr   
15BD   24 31 30 00            DB   "$10",0   
15C1   E1                     POP   HL   
15C2   E5                     PUSH   HL   
15C3   11 10 00               LD   DE,$10   
15C6   B7                     OR   A   
15C7   ED 52                  SBC   HL,DE   
15C9   7D                     LD   A,L   
15CA   B4                     OR   H   
15CB   CA 23 16               JP   Z,expectM_3114S57   
15CE   CD 88 0E               CALL   printStr   
15D1   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
15DB   CD 88 0E               CALL   printStr   
15DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15ED   21 10 00               LD   hl,$10   
15F0   E5                     PUSH   hl   
15F1   E5                     PUSH   hl   
15F2   CD 8A 0F               CALL   run   
15F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15FD   CD 88 0E               CALL   printStr   
1600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
160D   E1                     POP   hl   
160E   E5                     PUSH   hl   
160F   E5                     PUSH   hl   
1610   CD 8A 0F               CALL   run   
1613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1622   76                     HALT      
1623                EXPECTM_3114S57:      
1623   E1                     POP   HL   
1624                          ;*Macro unroll:  test "$FF", $FF
1624   31 00 4B               LD   SP,STACK   
1627   CD BC 0E               CALL   coldInit   
162A   CD 4C 49               CALL   execStr   
162D   24 46 46 00            DB   "$FF",0   
1631   E1                     POP   HL   
1632   E5                     PUSH   HL   
1633   11 FF 00               LD   DE,$FF   
1636   B7                     OR   A   
1637   ED 52                  SBC   HL,DE   
1639   7D                     LD   A,L   
163A   B4                     OR   H   
163B   CA 93 16               JP   Z,expectM_3115S58   
163E   CD 88 0E               CALL   printStr   
1641   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
164B   CD 88 0E               CALL   printStr   
164E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
165D   21 FF 00               LD   hl,$FF   
1660   E5                     PUSH   hl   
1661   E5                     PUSH   hl   
1662   CD 8A 0F               CALL   run   
1665   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
166D   CD 88 0E               CALL   printStr   
1670   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
167D   E1                     POP   hl   
167E   E5                     PUSH   hl   
167F   E5                     PUSH   hl   
1680   CD 8A 0F               CALL   run   
1683   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1692   76                     HALT      
1693                EXPECTM_3115S58:      
1693   E1                     POP   HL   
1694                          ;*Macro unroll:  test "-1 2 +",1
1694   31 00 4B               LD   SP,STACK   
1697   CD BC 0E               CALL   coldInit   
169A   CD 4C 49               CALL   execStr   
169D   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
16A4   E1                     POP   HL   
16A5   E5                     PUSH   HL   
16A6   11 01 00               LD   DE,1   
16A9   B7                     OR   A   
16AA   ED 52                  SBC   HL,DE   
16AC   7D                     LD   A,L   
16AD   B4                     OR   H   
16AE   CA 09 17               JP   Z,expectM_3116S59   
16B1   CD 88 0E               CALL   printStr   
16B4   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
16C1   CD 88 0E               CALL   printStr   
16C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D3   21 01 00               LD   hl,1   
16D6   E5                     PUSH   hl   
16D7   E5                     PUSH   hl   
16D8   CD 8A 0F               CALL   run   
16DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E3   CD 88 0E               CALL   printStr   
16E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F3   E1                     POP   hl   
16F4   E5                     PUSH   hl   
16F5   E5                     PUSH   hl   
16F6   CD 8A 0F               CALL   run   
16F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1708   76                     HALT      
1709                EXPECTM_3116S59:      
1709   E1                     POP   HL   
170A                          ;*Macro unroll:  test "-1 1 +",0
170A   31 00 4B               LD   SP,STACK   
170D   CD BC 0E               CALL   coldInit   
1710   CD 4C 49               CALL   execStr   
1713   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
171A   E1                     POP   HL   
171B   E5                     PUSH   HL   
171C   11 00 00               LD   DE,0   
171F   B7                     OR   A   
1720   ED 52                  SBC   HL,DE   
1722   7D                     LD   A,L   
1723   B4                     OR   H   
1724   CA 7F 17               JP   Z,expectM_3117S60   
1727   CD 88 0E               CALL   printStr   
172A   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1737   CD 88 0E               CALL   printStr   
173A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1749   21 00 00               LD   hl,0   
174C   E5                     PUSH   hl   
174D   E5                     PUSH   hl   
174E   CD 8A 0F               CALL   run   
1751   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1759   CD 88 0E               CALL   printStr   
175C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1769   E1                     POP   hl   
176A   E5                     PUSH   hl   
176B   E5                     PUSH   hl   
176C   CD 8A 0F               CALL   run   
176F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
177E   76                     HALT      
177F                EXPECTM_3117S60:      
177F   E1                     POP   HL   
1780                          ;*Macro unroll:  test "1 2 +", 3
1780   31 00 4B               LD   SP,STACK   
1783   CD BC 0E               CALL   coldInit   
1786   CD 4C 49               CALL   execStr   
1789   31 20 32 20 2B 00      DB   "1 2 +",0   
178F   E1                     POP   HL   
1790   E5                     PUSH   HL   
1791   11 03 00               LD   DE,3   
1794   B7                     OR   A   
1795   ED 52                  SBC   HL,DE   
1797   7D                     LD   A,L   
1798   B4                     OR   H   
1799   CA F3 17               JP   Z,expectM_3118S61   
179C   CD 88 0E               CALL   printStr   
179F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17AB   CD 88 0E               CALL   printStr   
17AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17BD   21 03 00               LD   hl,3   
17C0   E5                     PUSH   hl   
17C1   E5                     PUSH   hl   
17C2   CD 8A 0F               CALL   run   
17C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17CD   CD 88 0E               CALL   printStr   
17D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17DD   E1                     POP   hl   
17DE   E5                     PUSH   hl   
17DF   E5                     PUSH   hl   
17E0   CD 8A 0F               CALL   run   
17E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17F2   76                     HALT      
17F3                EXPECTM_3118S61:      
17F3   E1                     POP   HL   
17F4                          ;*Macro unroll:  test "4 1 2 +", 3
17F4   31 00 4B               LD   SP,STACK   
17F7   CD BC 0E               CALL   coldInit   
17FA   CD 4C 49               CALL   execStr   
17FD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1805   E1                     POP   HL   
1806   E5                     PUSH   HL   
1807   11 03 00               LD   DE,3   
180A   B7                     OR   A   
180B   ED 52                  SBC   HL,DE   
180D   7D                     LD   A,L   
180E   B4                     OR   H   
180F   CA 6B 18               JP   Z,expectM_3119S62   
1812   CD 88 0E               CALL   printStr   
1815   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1823   CD 88 0E               CALL   printStr   
1826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1835   21 03 00               LD   hl,3   
1838   E5                     PUSH   hl   
1839   E5                     PUSH   hl   
183A   CD 8A 0F               CALL   run   
183D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1845   CD 88 0E               CALL   printStr   
1848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1855   E1                     POP   hl   
1856   E5                     PUSH   hl   
1857   E5                     PUSH   hl   
1858   CD 8A 0F               CALL   run   
185B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
186A   76                     HALT      
186B                EXPECTM_3119S62:      
186B   E1                     POP   HL   
186C                          ;*Macro unroll:  test "123 456 +", 123+456
186C   31 00 4B               LD   SP,STACK   
186F   CD BC 0E               CALL   coldInit   
1872   CD 4C 49               CALL   execStr   
1875   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
187F   E1                     POP   HL   
1880   E5                     PUSH   HL   
1881   11 43 02               LD   DE,123+456   
1884   B7                     OR   A   
1885   ED 52                  SBC   HL,DE   
1887   7D                     LD   A,L   
1888   B4                     OR   H   
1889   CA E7 18               JP   Z,expectM_3120S63   
188C   CD 88 0E               CALL   printStr   
188F   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
189F   CD 88 0E               CALL   printStr   
18A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B1   21 43 02               LD   hl,123+456   
18B4   E5                     PUSH   hl   
18B5   E5                     PUSH   hl   
18B6   CD 8A 0F               CALL   run   
18B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18C1   CD 88 0E               CALL   printStr   
18C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D1   E1                     POP   hl   
18D2   E5                     PUSH   hl   
18D3   E5                     PUSH   hl   
18D4   CD 8A 0F               CALL   run   
18D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18E6   76                     HALT      
18E7                EXPECTM_3120S63:      
18E7   E1                     POP   HL   
18E8                          ;*Macro unroll:  test "64 128 +", 64+128
18E8   31 00 4B               LD   SP,STACK   
18EB   CD BC 0E               CALL   coldInit   
18EE   CD 4C 49               CALL   execStr   
18F1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
18FA   E1                     POP   HL   
18FB   E5                     PUSH   HL   
18FC   11 C0 00               LD   DE,64+128   
18FF   B7                     OR   A   
1900   ED 52                  SBC   HL,DE   
1902   7D                     LD   A,L   
1903   B4                     OR   H   
1904   CA 61 19               JP   Z,expectM_3121S64   
1907   CD 88 0E               CALL   printStr   
190A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1919   CD 88 0E               CALL   printStr   
191C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192B   21 C0 00               LD   hl,64+128   
192E   E5                     PUSH   hl   
192F   E5                     PUSH   hl   
1930   CD 8A 0F               CALL   run   
1933   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
193B   CD 88 0E               CALL   printStr   
193E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
194B   E1                     POP   hl   
194C   E5                     PUSH   hl   
194D   E5                     PUSH   hl   
194E   CD 8A 0F               CALL   run   
1951   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1960   76                     HALT      
1961                EXPECTM_3121S64:      
1961   E1                     POP   HL   
1962                          ;*Macro unroll:  test "1 2 +", 3
1962   31 00 4B               LD   SP,STACK   
1965   CD BC 0E               CALL   coldInit   
1968   CD 4C 49               CALL   execStr   
196B   31 20 32 20 2B 00      DB   "1 2 +",0   
1971   E1                     POP   HL   
1972   E5                     PUSH   HL   
1973   11 03 00               LD   DE,3   
1976   B7                     OR   A   
1977   ED 52                  SBC   HL,DE   
1979   7D                     LD   A,L   
197A   B4                     OR   H   
197B   CA D5 19               JP   Z,expectM_3122S65   
197E   CD 88 0E               CALL   printStr   
1981   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
198D   CD 88 0E               CALL   printStr   
1990   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199F   21 03 00               LD   hl,3   
19A2   E5                     PUSH   hl   
19A3   E5                     PUSH   hl   
19A4   CD 8A 0F               CALL   run   
19A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19AF   CD 88 0E               CALL   printStr   
19B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BF   E1                     POP   hl   
19C0   E5                     PUSH   hl   
19C1   E5                     PUSH   hl   
19C2   CD 8A 0F               CALL   run   
19C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19D4   76                     HALT      
19D5                EXPECTM_3122S65:      
19D5   E1                     POP   HL   
19D6                          ;*Macro unroll:  test "1a= a++ a",2
19D6   31 00 4B               LD   SP,STACK   
19D9   CD BC 0E               CALL   coldInit   
19DC   CD 4C 49               CALL   execStr   
19DF   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19E9   E1                     POP   HL   
19EA   E5                     PUSH   HL   
19EB   11 02 00               LD   DE,2   
19EE   B7                     OR   A   
19EF   ED 52                  SBC   HL,DE   
19F1   7D                     LD   A,L   
19F2   B4                     OR   H   
19F3   CA 51 1A               JP   Z,expectM_3123S66   
19F6   CD 88 0E               CALL   printStr   
19F9   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A09   CD 88 0E               CALL   printStr   
1A0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A1B   21 02 00               LD   hl,2   
1A1E   E5                     PUSH   hl   
1A1F   E5                     PUSH   hl   
1A20   CD 8A 0F               CALL   run   
1A23   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A2B   CD 88 0E               CALL   printStr   
1A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3B   E1                     POP   hl   
1A3C   E5                     PUSH   hl   
1A3D   E5                     PUSH   hl   
1A3E   CD 8A 0F               CALL   run   
1A41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A50   76                     HALT      
1A51                EXPECTM_3123S66:      
1A51   E1                     POP   HL   
1A52                          ;*Macro unroll:  test "-1 -1 -",0
1A52   31 00 4B               LD   SP,STACK   
1A55   CD BC 0E               CALL   coldInit   
1A58   CD 4C 49               CALL   execStr   
1A5B   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A63   E1                     POP   HL   
1A64   E5                     PUSH   HL   
1A65   11 00 00               LD   DE,0   
1A68   B7                     OR   A   
1A69   ED 52                  SBC   HL,DE   
1A6B   7D                     LD   A,L   
1A6C   B4                     OR   H   
1A6D   CA C9 1A               JP   Z,expectM_3124S67   
1A70   CD 88 0E               CALL   printStr   
1A73   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A81   CD 88 0E               CALL   printStr   
1A84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A93   21 00 00               LD   hl,0   
1A96   E5                     PUSH   hl   
1A97   E5                     PUSH   hl   
1A98   CD 8A 0F               CALL   run   
1A9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AA3   CD 88 0E               CALL   printStr   
1AA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB3   E1                     POP   hl   
1AB4   E5                     PUSH   hl   
1AB5   E5                     PUSH   hl   
1AB6   CD 8A 0F               CALL   run   
1AB9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AC8   76                     HALT      
1AC9                EXPECTM_3124S67:      
1AC9   E1                     POP   HL   
1ACA                          ;*Macro unroll:  test "5 3 -", 2
1ACA   31 00 4B               LD   SP,STACK   
1ACD   CD BC 0E               CALL   coldInit   
1AD0   CD 4C 49               CALL   execStr   
1AD3   35 20 33 20 2D 00      DB   "5 3 -",0   
1AD9   E1                     POP   HL   
1ADA   E5                     PUSH   HL   
1ADB   11 02 00               LD   DE,2   
1ADE   B7                     OR   A   
1ADF   ED 52                  SBC   HL,DE   
1AE1   7D                     LD   A,L   
1AE2   B4                     OR   H   
1AE3   CA 3D 1B               JP   Z,expectM_3125S68   
1AE6   CD 88 0E               CALL   printStr   
1AE9   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1AF5   CD 88 0E               CALL   printStr   
1AF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B07   21 02 00               LD   hl,2   
1B0A   E5                     PUSH   hl   
1B0B   E5                     PUSH   hl   
1B0C   CD 8A 0F               CALL   run   
1B0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B17   CD 88 0E               CALL   printStr   
1B1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B27   E1                     POP   hl   
1B28   E5                     PUSH   hl   
1B29   E5                     PUSH   hl   
1B2A   CD 8A 0F               CALL   run   
1B2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B3C   76                     HALT      
1B3D                EXPECTM_3125S68:      
1B3D   E1                     POP   HL   
1B3E                          ;*Macro unroll:  test "2 1 -",1
1B3E   31 00 4B               LD   SP,STACK   
1B41   CD BC 0E               CALL   coldInit   
1B44   CD 4C 49               CALL   execStr   
1B47   32 20 31 20 2D 00      DB   "2 1 -",0   
1B4D   E1                     POP   HL   
1B4E   E5                     PUSH   HL   
1B4F   11 01 00               LD   DE,1   
1B52   B7                     OR   A   
1B53   ED 52                  SBC   HL,DE   
1B55   7D                     LD   A,L   
1B56   B4                     OR   H   
1B57   CA B1 1B               JP   Z,expectM_3126S69   
1B5A   CD 88 0E               CALL   printStr   
1B5D   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B69   CD 88 0E               CALL   printStr   
1B6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B7B   21 01 00               LD   hl,1   
1B7E   E5                     PUSH   hl   
1B7F   E5                     PUSH   hl   
1B80   CD 8A 0F               CALL   run   
1B83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B8B   CD 88 0E               CALL   printStr   
1B8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B9B   E1                     POP   hl   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD 8A 0F               CALL   run   
1BA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BB0   76                     HALT      
1BB1                EXPECTM_3126S69:      
1BB1   E1                     POP   HL   
1BB2                          ;*Macro unroll:  test "3a= a-- a",2
1BB2   31 00 4B               LD   SP,STACK   
1BB5   CD BC 0E               CALL   coldInit   
1BB8   CD 4C 49               CALL   execStr   
1BBB   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BC5   E1                     POP   HL   
1BC6   E5                     PUSH   HL   
1BC7   11 02 00               LD   DE,2   
1BCA   B7                     OR   A   
1BCB   ED 52                  SBC   HL,DE   
1BCD   7D                     LD   A,L   
1BCE   B4                     OR   H   
1BCF   CA 2D 1C               JP   Z,expectM_3127S70   
1BD2   CD 88 0E               CALL   printStr   
1BD5   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1BE5   CD 88 0E               CALL   printStr   
1BE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF7   21 02 00               LD   hl,2   
1BFA   E5                     PUSH   hl   
1BFB   E5                     PUSH   hl   
1BFC   CD 8A 0F               CALL   run   
1BFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C07   CD 88 0E               CALL   printStr   
1C0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C17   E1                     POP   hl   
1C18   E5                     PUSH   hl   
1C19   E5                     PUSH   hl   
1C1A   CD 8A 0F               CALL   run   
1C1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C2C   76                     HALT      
1C2D                EXPECTM_3127S70:      
1C2D   E1                     POP   HL   
1C2E                          ;*Macro unroll:  test "3 5 &", 1
1C2E   31 00 4B               LD   SP,STACK   
1C31   CD BC 0E               CALL   coldInit   
1C34   CD 4C 49               CALL   execStr   
1C37   33 20 35 20 26 00      DB   "3 5 &",0   
1C3D   E1                     POP   HL   
1C3E   E5                     PUSH   HL   
1C3F   11 01 00               LD   DE,1   
1C42   B7                     OR   A   
1C43   ED 52                  SBC   HL,DE   
1C45   7D                     LD   A,L   
1C46   B4                     OR   H   
1C47   CA A1 1C               JP   Z,expectM_3128S71   
1C4A   CD 88 0E               CALL   printStr   
1C4D   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C59   CD 88 0E               CALL   printStr   
1C5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6B   21 01 00               LD   hl,1   
1C6E   E5                     PUSH   hl   
1C6F   E5                     PUSH   hl   
1C70   CD 8A 0F               CALL   run   
1C73   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C7B   CD 88 0E               CALL   printStr   
1C7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C8B   E1                     POP   hl   
1C8C   E5                     PUSH   hl   
1C8D   E5                     PUSH   hl   
1C8E   CD 8A 0F               CALL   run   
1C91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CA0   76                     HALT      
1CA1                EXPECTM_3128S71:      
1CA1   E1                     POP   HL   
1CA2                          ;*Macro unroll:  test "3 5 |", 7
1CA2   31 00 4B               LD   SP,STACK   
1CA5   CD BC 0E               CALL   coldInit   
1CA8   CD 4C 49               CALL   execStr   
1CAB   33 20 35 20 7C 00      DB   "3 5 |",0   
1CB1   E1                     POP   HL   
1CB2   E5                     PUSH   HL   
1CB3   11 07 00               LD   DE,7   
1CB6   B7                     OR   A   
1CB7   ED 52                  SBC   HL,DE   
1CB9   7D                     LD   A,L   
1CBA   B4                     OR   H   
1CBB   CA 15 1D               JP   Z,expectM_3129S72   
1CBE   CD 88 0E               CALL   printStr   
1CC1   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1CCD   CD 88 0E               CALL   printStr   
1CD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CDF   21 07 00               LD   hl,7   
1CE2   E5                     PUSH   hl   
1CE3   E5                     PUSH   hl   
1CE4   CD 8A 0F               CALL   run   
1CE7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CEF   CD 88 0E               CALL   printStr   
1CF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFF   E1                     POP   hl   
1D00   E5                     PUSH   hl   
1D01   E5                     PUSH   hl   
1D02   CD 8A 0F               CALL   run   
1D05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D14   76                     HALT      
1D15                EXPECTM_3129S72:      
1D15   E1                     POP   HL   
1D16                          ;*Macro unroll:  test "3 5 /x", 6
1D16   31 00 4B               LD   SP,STACK   
1D19   CD BC 0E               CALL   coldInit   
1D1C   CD 4C 49               CALL   execStr   
1D1F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D26   E1                     POP   HL   
1D27   E5                     PUSH   HL   
1D28   11 06 00               LD   DE,6   
1D2B   B7                     OR   A   
1D2C   ED 52                  SBC   HL,DE   
1D2E   7D                     LD   A,L   
1D2F   B4                     OR   H   
1D30   CA 8B 1D               JP   Z,expectM_3130S73   
1D33   CD 88 0E               CALL   printStr   
1D36   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D43   CD 88 0E               CALL   printStr   
1D46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D55   21 06 00               LD   hl,6   
1D58   E5                     PUSH   hl   
1D59   E5                     PUSH   hl   
1D5A   CD 8A 0F               CALL   run   
1D5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D65   CD 88 0E               CALL   printStr   
1D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D75   E1                     POP   hl   
1D76   E5                     PUSH   hl   
1D77   E5                     PUSH   hl   
1D78   CD 8A 0F               CALL   run   
1D7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D8A   76                     HALT      
1D8B                EXPECTM_3130S73:      
1D8B   E1                     POP   HL   
1D8C                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1D8C   31 00 4B               LD   SP,STACK   
1D8F   CD BC 0E               CALL   coldInit   
1D92   CD 4C 49               CALL   execStr   
1D95   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1DA4   E1                     POP   HL   
1DA5   E5                     PUSH   HL   
1DA6   11 06 00               LD   DE,6   
1DA9   B7                     OR   A   
1DAA   ED 52                  SBC   HL,DE   
1DAC   7D                     LD   A,L   
1DAD   B4                     OR   H   
1DAE   CA 11 1E               JP   Z,expectM_3131S74   
1DB1   CD 88 0E               CALL   printStr   
1DB4   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1DC9   CD 88 0E               CALL   printStr   
1DCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDB   21 06 00               LD   hl,6   
1DDE   E5                     PUSH   hl   
1DDF   E5                     PUSH   hl   
1DE0   CD 8A 0F               CALL   run   
1DE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DEB   CD 88 0E               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD 8A 0F               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   76                     HALT      
1E11                EXPECTM_3131S74:      
1E11   E1                     POP   HL   
1E12                          ;*Macro unroll:  test "2 3 *", 6
1E12   31 00 4B               LD   SP,STACK   
1E15   CD BC 0E               CALL   coldInit   
1E18   CD 4C 49               CALL   execStr   
1E1B   32 20 33 20 2A 00      DB   "2 3 *",0   
1E21   E1                     POP   HL   
1E22   E5                     PUSH   HL   
1E23   11 06 00               LD   DE,6   
1E26   B7                     OR   A   
1E27   ED 52                  SBC   HL,DE   
1E29   7D                     LD   A,L   
1E2A   B4                     OR   H   
1E2B   CA 85 1E               JP   Z,expectM_3132S75   
1E2E   CD 88 0E               CALL   printStr   
1E31   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E3D   CD 88 0E               CALL   printStr   
1E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4F   21 06 00               LD   hl,6   
1E52   E5                     PUSH   hl   
1E53   E5                     PUSH   hl   
1E54   CD 8A 0F               CALL   run   
1E57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E5F   CD 88 0E               CALL   printStr   
1E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6F   E1                     POP   hl   
1E70   E5                     PUSH   hl   
1E71   E5                     PUSH   hl   
1E72   CD 8A 0F               CALL   run   
1E75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E84   76                     HALT      
1E85                EXPECTM_3132S75:      
1E85   E1                     POP   HL   
1E86                          ;*Macro unroll:  test "1 2 3 + *", 5
1E86   31 00 4B               LD   SP,STACK   
1E89   CD BC 0E               CALL   coldInit   
1E8C   CD 4C 49               CALL   execStr   
1E8F   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1E99   E1                     POP   HL   
1E9A   E5                     PUSH   HL   
1E9B   11 05 00               LD   DE,5   
1E9E   B7                     OR   A   
1E9F   ED 52                  SBC   HL,DE   
1EA1   7D                     LD   A,L   
1EA2   B4                     OR   H   
1EA3   CA 01 1F               JP   Z,expectM_3133S76   
1EA6   CD 88 0E               CALL   printStr   
1EA9   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1EB9   CD 88 0E               CALL   printStr   
1EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ECB   21 05 00               LD   hl,5   
1ECE   E5                     PUSH   hl   
1ECF   E5                     PUSH   hl   
1ED0   CD 8A 0F               CALL   run   
1ED3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EDB   CD 88 0E               CALL   printStr   
1EDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EEB   E1                     POP   hl   
1EEC   E5                     PUSH   hl   
1EED   E5                     PUSH   hl   
1EEE   CD 8A 0F               CALL   run   
1EF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F00   76                     HALT      
1F01                EXPECTM_3133S76:      
1F01   E1                     POP   HL   
1F02                          ;*Macro unroll:  test "7 3 /", 2
1F02   31 00 4B               LD   SP,STACK   
1F05   CD BC 0E               CALL   coldInit   
1F08   CD 4C 49               CALL   execStr   
1F0B   37 20 33 20 2F 00      DB   "7 3 /",0   
1F11   E1                     POP   HL   
1F12   E5                     PUSH   HL   
1F13   11 02 00               LD   DE,2   
1F16   B7                     OR   A   
1F17   ED 52                  SBC   HL,DE   
1F19   7D                     LD   A,L   
1F1A   B4                     OR   H   
1F1B   CA 75 1F               JP   Z,expectM_3134S77   
1F1E   CD 88 0E               CALL   printStr   
1F21   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F2D   CD 88 0E               CALL   printStr   
1F30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F3F   21 02 00               LD   hl,2   
1F42   E5                     PUSH   hl   
1F43   E5                     PUSH   hl   
1F44   CD 8A 0F               CALL   run   
1F47   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F4F   CD 88 0E               CALL   printStr   
1F52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F5F   E1                     POP   hl   
1F60   E5                     PUSH   hl   
1F61   E5                     PUSH   hl   
1F62   CD 8A 0F               CALL   run   
1F65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F74   76                     HALT      
1F75                EXPECTM_3134S77:      
1F75   E1                     POP   HL   
1F76                          ;*Macro unroll:  test "100a= 1a+= a", 101
1F76   31 00 4B               LD   SP,STACK   
1F79   CD BC 0E               CALL   coldInit   
1F7C   CD 4C 49               CALL   execStr   
1F7F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1F8C   E1                     POP   HL   
1F8D   E5                     PUSH   HL   
1F8E   11 65 00               LD   DE,101   
1F91   B7                     OR   A   
1F92   ED 52                  SBC   HL,DE   
1F94   7D                     LD   A,L   
1F95   B4                     OR   H   
1F96   CA F7 1F               JP   Z,expectM_3135S78   
1F99   CD 88 0E               CALL   printStr   
1F9C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1FAF   CD 88 0E               CALL   printStr   
1FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC1   21 65 00               LD   hl,101   
1FC4   E5                     PUSH   hl   
1FC5   E5                     PUSH   hl   
1FC6   CD 8A 0F               CALL   run   
1FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FD1   CD 88 0E               CALL   printStr   
1FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE1   E1                     POP   hl   
1FE2   E5                     PUSH   hl   
1FE3   E5                     PUSH   hl   
1FE4   CD 8A 0F               CALL   run   
1FE7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FF6   76                     HALT      
1FF7                EXPECTM_3135S78:      
1FF7   E1                     POP   HL   
1FF8                          ;*Macro unroll:  test "100a= a1-= a", 99
1FF8   31 00 4B               LD   SP,STACK   
1FFB   CD BC 0E               CALL   coldInit   
1FFE   CD 4C 49               CALL   execStr   
2001   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
200E   E1                     POP   HL   
200F   E5                     PUSH   HL   
2010   11 63 00               LD   DE,99   
2013   B7                     OR   A   
2014   ED 52                  SBC   HL,DE   
2016   7D                     LD   A,L   
2017   B4                     OR   H   
2018   CA 79 20               JP   Z,expectM_3136S79   
201B   CD 88 0E               CALL   printStr   
201E   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
2031   CD 88 0E               CALL   printStr   
2034   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2043   21 63 00               LD   hl,99   
2046   E5                     PUSH   hl   
2047   E5                     PUSH   hl   
2048   CD 8A 0F               CALL   run   
204B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2053   CD 88 0E               CALL   printStr   
2056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2063   E1                     POP   hl   
2064   E5                     PUSH   hl   
2065   E5                     PUSH   hl   
2066   CD 8A 0F               CALL   run   
2069   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2078   76                     HALT      
2079                EXPECTM_3136S79:      
2079   E1                     POP   HL   
207A                          ;*Macro unroll:  test "100a= a2*= a", 200
207A   31 00 4B               LD   SP,STACK   
207D   CD BC 0E               CALL   coldInit   
2080   CD 4C 49               CALL   execStr   
2083   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2090   E1                     POP   HL   
2091   E5                     PUSH   HL   
2092   11 C8 00               LD   DE,200   
2095   B7                     OR   A   
2096   ED 52                  SBC   HL,DE   
2098   7D                     LD   A,L   
2099   B4                     OR   H   
209A   CA FB 20               JP   Z,expectM_3137S80   
209D   CD 88 0E               CALL   printStr   
20A0   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
20B3   CD 88 0E               CALL   printStr   
20B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C5   21 C8 00               LD   hl,200   
20C8   E5                     PUSH   hl   
20C9   E5                     PUSH   hl   
20CA   CD 8A 0F               CALL   run   
20CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20D5   CD 88 0E               CALL   printStr   
20D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E5   E1                     POP   hl   
20E6   E5                     PUSH   hl   
20E7   E5                     PUSH   hl   
20E8   CD 8A 0F               CALL   run   
20EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20FA   76                     HALT      
20FB                EXPECTM_3137S80:      
20FB   E1                     POP   HL   
20FC                          ;*Macro unroll:  test "100a= a2/= a", 50
20FC   31 00 4B               LD   SP,STACK   
20FF   CD BC 0E               CALL   coldInit   
2102   CD 4C 49               CALL   execStr   
2105   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2112   E1                     POP   HL   
2113   E5                     PUSH   HL   
2114   11 32 00               LD   DE,50   
2117   B7                     OR   A   
2118   ED 52                  SBC   HL,DE   
211A   7D                     LD   A,L   
211B   B4                     OR   H   
211C   CA 7D 21               JP   Z,expectM_3138S81   
211F   CD 88 0E               CALL   printStr   
2122   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
2135   CD 88 0E               CALL   printStr   
2138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2147   21 32 00               LD   hl,50   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD 8A 0F               CALL   run   
214F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2157   CD 88 0E               CALL   printStr   
215A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2167   E1                     POP   hl   
2168   E5                     PUSH   hl   
2169   E5                     PUSH   hl   
216A   CD 8A 0F               CALL   run   
216D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217C   76                     HALT      
217D                EXPECTM_3138S81:      
217D   E1                     POP   HL   
217E                          ;*Macro unroll:  test "7 3 / /re", 1
217E   31 00 4B               LD   SP,STACK   
2181   CD BC 0E               CALL   coldInit   
2184   CD 4C 49               CALL   execStr   
2187   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2191   E1                     POP   HL   
2192   E5                     PUSH   HL   
2193   11 01 00               LD   DE,1   
2196   B7                     OR   A   
2197   ED 52                  SBC   HL,DE   
2199   7D                     LD   A,L   
219A   B4                     OR   H   
219B   CA F9 21               JP   Z,expectM_3139S82   
219E   CD 88 0E               CALL   printStr   
21A1   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
21B1   CD 88 0E               CALL   printStr   
21B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C3   21 01 00               LD   hl,1   
21C6   E5                     PUSH   hl   
21C7   E5                     PUSH   hl   
21C8   CD 8A 0F               CALL   run   
21CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D3   CD 88 0E               CALL   printStr   
21D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E3   E1                     POP   hl   
21E4   E5                     PUSH   hl   
21E5   E5                     PUSH   hl   
21E6   CD 8A 0F               CALL   run   
21E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F8   76                     HALT      
21F9                EXPECTM_3139S82:      
21F9   E1                     POP   HL   
21FA                          ;*Macro unroll:  test "7 3 /", 2
21FA   31 00 4B               LD   SP,STACK   
21FD   CD BC 0E               CALL   coldInit   
2200   CD 4C 49               CALL   execStr   
2203   37 20 33 20 2F 00      DB   "7 3 /",0   
2209   E1                     POP   HL   
220A   E5                     PUSH   HL   
220B   11 02 00               LD   DE,2   
220E   B7                     OR   A   
220F   ED 52                  SBC   HL,DE   
2211   7D                     LD   A,L   
2212   B4                     OR   H   
2213   CA 6D 22               JP   Z,expectM_3140S83   
2216   CD 88 0E               CALL   printStr   
2219   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2225   CD 88 0E               CALL   printStr   
2228   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2237   21 02 00               LD   hl,2   
223A   E5                     PUSH   hl   
223B   E5                     PUSH   hl   
223C   CD 8A 0F               CALL   run   
223F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2247   CD 88 0E               CALL   printStr   
224A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2257   E1                     POP   hl   
2258   E5                     PUSH   hl   
2259   E5                     PUSH   hl   
225A   CD 8A 0F               CALL   run   
225D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
226C   76                     HALT      
226D                EXPECTM_3140S83:      
226D   E1                     POP   HL   
226E                          ;*Macro unroll:  test "2 3 ==", FALSE
226E   31 00 4B               LD   SP,STACK   
2271   CD BC 0E               CALL   coldInit   
2274   CD 4C 49               CALL   execStr   
2277   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
227E   E1                     POP   HL   
227F   E5                     PUSH   HL   
2280   11 00 00               LD   DE,FALSE   
2283   B7                     OR   A   
2284   ED 52                  SBC   HL,DE   
2286   7D                     LD   A,L   
2287   B4                     OR   H   
2288   CA E3 22               JP   Z,expectM_3141S84   
228B   CD 88 0E               CALL   printStr   
228E   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
229B   CD 88 0E               CALL   printStr   
229E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22AD   21 00 00               LD   hl,FALSE   
22B0   E5                     PUSH   hl   
22B1   E5                     PUSH   hl   
22B2   CD 8A 0F               CALL   run   
22B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22BD   CD 88 0E               CALL   printStr   
22C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22CD   E1                     POP   hl   
22CE   E5                     PUSH   hl   
22CF   E5                     PUSH   hl   
22D0   CD 8A 0F               CALL   run   
22D3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22E2   76                     HALT      
22E3                EXPECTM_3141S84:      
22E3   E1                     POP   HL   
22E4                          ;*Macro unroll:  test "3 3 ==", TRUE
22E4   31 00 4B               LD   SP,STACK   
22E7   CD BC 0E               CALL   coldInit   
22EA   CD 4C 49               CALL   execStr   
22ED   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
22F4   E1                     POP   HL   
22F5   E5                     PUSH   HL   
22F6   11 FF FF               LD   DE,TRUE   
22F9   B7                     OR   A   
22FA   ED 52                  SBC   HL,DE   
22FC   7D                     LD   A,L   
22FD   B4                     OR   H   
22FE   CA 59 23               JP   Z,expectM_3142S85   
2301   CD 88 0E               CALL   printStr   
2304   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2311   CD 88 0E               CALL   printStr   
2314   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2323   21 FF FF               LD   hl,TRUE   
2326   E5                     PUSH   hl   
2327   E5                     PUSH   hl   
2328   CD 8A 0F               CALL   run   
232B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2333   CD 88 0E               CALL   printStr   
2336   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2343   E1                     POP   hl   
2344   E5                     PUSH   hl   
2345   E5                     PUSH   hl   
2346   CD 8A 0F               CALL   run   
2349   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2358   76                     HALT      
2359                EXPECTM_3142S85:      
2359   E1                     POP   HL   
235A                          ;*Macro unroll:  test "1 2 <", TRUE
235A   31 00 4B               LD   SP,STACK   
235D   CD BC 0E               CALL   coldInit   
2360   CD 4C 49               CALL   execStr   
2363   31 20 32 20 3C 00      DB   "1 2 <",0   
2369   E1                     POP   HL   
236A   E5                     PUSH   HL   
236B   11 FF FF               LD   DE,TRUE   
236E   B7                     OR   A   
236F   ED 52                  SBC   HL,DE   
2371   7D                     LD   A,L   
2372   B4                     OR   H   
2373   CA CD 23               JP   Z,expectM_3143S86   
2376   CD 88 0E               CALL   printStr   
2379   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2385   CD 88 0E               CALL   printStr   
2388   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2397   21 FF FF               LD   hl,TRUE   
239A   E5                     PUSH   hl   
239B   E5                     PUSH   hl   
239C   CD 8A 0F               CALL   run   
239F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23A7   CD 88 0E               CALL   printStr   
23AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23B7   E1                     POP   hl   
23B8   E5                     PUSH   hl   
23B9   E5                     PUSH   hl   
23BA   CD 8A 0F               CALL   run   
23BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23CC   76                     HALT      
23CD                EXPECTM_3143S86:      
23CD   E1                     POP   HL   
23CE                          ;*Macro unroll:  test "2 1 <", FALSE
23CE   31 00 4B               LD   SP,STACK   
23D1   CD BC 0E               CALL   coldInit   
23D4   CD 4C 49               CALL   execStr   
23D7   32 20 31 20 3C 00      DB   "2 1 <",0   
23DD   E1                     POP   HL   
23DE   E5                     PUSH   HL   
23DF   11 00 00               LD   DE,FALSE   
23E2   B7                     OR   A   
23E3   ED 52                  SBC   HL,DE   
23E5   7D                     LD   A,L   
23E6   B4                     OR   H   
23E7   CA 41 24               JP   Z,expectM_3144S87   
23EA   CD 88 0E               CALL   printStr   
23ED   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
23F9   CD 88 0E               CALL   printStr   
23FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
240B   21 00 00               LD   hl,FALSE   
240E   E5                     PUSH   hl   
240F   E5                     PUSH   hl   
2410   CD 8A 0F               CALL   run   
2413   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
241B   CD 88 0E               CALL   printStr   
241E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
242B   E1                     POP   hl   
242C   E5                     PUSH   hl   
242D   E5                     PUSH   hl   
242E   CD 8A 0F               CALL   run   
2431   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2440   76                     HALT      
2441                EXPECTM_3144S87:      
2441   E1                     POP   HL   
2442                          ;*Macro unroll:  test "2 3 <", TRUE
2442   31 00 4B               LD   SP,STACK   
2445   CD BC 0E               CALL   coldInit   
2448   CD 4C 49               CALL   execStr   
244B   32 20 33 20 3C 00      DB   "2 3 <",0   
2451   E1                     POP   HL   
2452   E5                     PUSH   HL   
2453   11 FF FF               LD   DE,TRUE   
2456   B7                     OR   A   
2457   ED 52                  SBC   HL,DE   
2459   7D                     LD   A,L   
245A   B4                     OR   H   
245B   CA B5 24               JP   Z,expectM_3145S88   
245E   CD 88 0E               CALL   printStr   
2461   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
246D   CD 88 0E               CALL   printStr   
2470   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
247F   21 FF FF               LD   hl,TRUE   
2482   E5                     PUSH   hl   
2483   E5                     PUSH   hl   
2484   CD 8A 0F               CALL   run   
2487   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
248F   CD 88 0E               CALL   printStr   
2492   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
249F   E1                     POP   hl   
24A0   E5                     PUSH   hl   
24A1   E5                     PUSH   hl   
24A2   CD 8A 0F               CALL   run   
24A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24B4   76                     HALT      
24B5                EXPECTM_3145S88:      
24B5   E1                     POP   HL   
24B6                          ;*Macro unroll:  test "3 3 <", FALSE
24B6   31 00 4B               LD   SP,STACK   
24B9   CD BC 0E               CALL   coldInit   
24BC   CD 4C 49               CALL   execStr   
24BF   33 20 33 20 3C 00      DB   "3 3 <",0   
24C5   E1                     POP   HL   
24C6   E5                     PUSH   HL   
24C7   11 00 00               LD   DE,FALSE   
24CA   B7                     OR   A   
24CB   ED 52                  SBC   HL,DE   
24CD   7D                     LD   A,L   
24CE   B4                     OR   H   
24CF   CA 29 25               JP   Z,expectM_3146S89   
24D2   CD 88 0E               CALL   printStr   
24D5   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
24E1   CD 88 0E               CALL   printStr   
24E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F3   21 00 00               LD   hl,FALSE   
24F6   E5                     PUSH   hl   
24F7   E5                     PUSH   hl   
24F8   CD 8A 0F               CALL   run   
24FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2503   CD 88 0E               CALL   printStr   
2506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2513   E1                     POP   hl   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD 8A 0F               CALL   run   
2519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2528   76                     HALT      
2529                EXPECTM_3146S89:      
2529   E1                     POP   HL   
252A                          ;*Macro unroll:  test "1 2 >", FALSE
252A   31 00 4B               LD   SP,STACK   
252D   CD BC 0E               CALL   coldInit   
2530   CD 4C 49               CALL   execStr   
2533   31 20 32 20 3E 00      DB   "1 2 >",0   
2539   E1                     POP   HL   
253A   E5                     PUSH   HL   
253B   11 00 00               LD   DE,FALSE   
253E   B7                     OR   A   
253F   ED 52                  SBC   HL,DE   
2541   7D                     LD   A,L   
2542   B4                     OR   H   
2543   CA 9D 25               JP   Z,expectM_3147S90   
2546   CD 88 0E               CALL   printStr   
2549   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2555   CD 88 0E               CALL   printStr   
2558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2567   21 00 00               LD   hl,FALSE   
256A   E5                     PUSH   hl   
256B   E5                     PUSH   hl   
256C   CD 8A 0F               CALL   run   
256F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2577   CD 88 0E               CALL   printStr   
257A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2587   E1                     POP   hl   
2588   E5                     PUSH   hl   
2589   E5                     PUSH   hl   
258A   CD 8A 0F               CALL   run   
258D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
259C   76                     HALT      
259D                EXPECTM_3147S90:      
259D   E1                     POP   HL   
259E                          ;*Macro unroll:  test "2 1 >", TRUE
259E   31 00 4B               LD   SP,STACK   
25A1   CD BC 0E               CALL   coldInit   
25A4   CD 4C 49               CALL   execStr   
25A7   32 20 31 20 3E 00      DB   "2 1 >",0   
25AD   E1                     POP   HL   
25AE   E5                     PUSH   HL   
25AF   11 FF FF               LD   DE,TRUE   
25B2   B7                     OR   A   
25B3   ED 52                  SBC   HL,DE   
25B5   7D                     LD   A,L   
25B6   B4                     OR   H   
25B7   CA 11 26               JP   Z,expectM_3148S91   
25BA   CD 88 0E               CALL   printStr   
25BD   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
25C9   CD 88 0E               CALL   printStr   
25CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25DB   21 FF FF               LD   hl,TRUE   
25DE   E5                     PUSH   hl   
25DF   E5                     PUSH   hl   
25E0   CD 8A 0F               CALL   run   
25E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25EB   CD 88 0E               CALL   printStr   
25EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25FB   E1                     POP   hl   
25FC   E5                     PUSH   hl   
25FD   E5                     PUSH   hl   
25FE   CD 8A 0F               CALL   run   
2601   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2610   76                     HALT      
2611                EXPECTM_3148S91:      
2611   E1                     POP   HL   
2612                          ;*Macro unroll:  test "3 3 >", FALSE
2612   31 00 4B               LD   SP,STACK   
2615   CD BC 0E               CALL   coldInit   
2618   CD 4C 49               CALL   execStr   
261B   33 20 33 20 3E 00      DB   "3 3 >",0   
2621   E1                     POP   HL   
2622   E5                     PUSH   HL   
2623   11 00 00               LD   DE,FALSE   
2626   B7                     OR   A   
2627   ED 52                  SBC   HL,DE   
2629   7D                     LD   A,L   
262A   B4                     OR   H   
262B   CA 85 26               JP   Z,expectM_3149S92   
262E   CD 88 0E               CALL   printStr   
2631   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
263D   CD 88 0E               CALL   printStr   
2640   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264F   21 00 00               LD   hl,FALSE   
2652   E5                     PUSH   hl   
2653   E5                     PUSH   hl   
2654   CD 8A 0F               CALL   run   
2657   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
265F   CD 88 0E               CALL   printStr   
2662   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266F   E1                     POP   hl   
2670   E5                     PUSH   hl   
2671   E5                     PUSH   hl   
2672   CD 8A 0F               CALL   run   
2675   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2684   76                     HALT      
2685                EXPECTM_3149S92:      
2685   E1                     POP   HL   
2686                          ;*Macro unroll:  test "4 3 >", TRUE
2686   31 00 4B               LD   SP,STACK   
2689   CD BC 0E               CALL   coldInit   
268C   CD 4C 49               CALL   execStr   
268F   34 20 33 20 3E 00      DB   "4 3 >",0   
2695   E1                     POP   HL   
2696   E5                     PUSH   HL   
2697   11 FF FF               LD   DE,TRUE   
269A   B7                     OR   A   
269B   ED 52                  SBC   HL,DE   
269D   7D                     LD   A,L   
269E   B4                     OR   H   
269F   CA F9 26               JP   Z,expectM_3150S93   
26A2   CD 88 0E               CALL   printStr   
26A5   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
26B1   CD 88 0E               CALL   printStr   
26B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C3   21 FF FF               LD   hl,TRUE   
26C6   E5                     PUSH   hl   
26C7   E5                     PUSH   hl   
26C8   CD 8A 0F               CALL   run   
26CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D3   CD 88 0E               CALL   printStr   
26D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E3   E1                     POP   hl   
26E4   E5                     PUSH   hl   
26E5   E5                     PUSH   hl   
26E6   CD 8A 0F               CALL   run   
26E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26F8   76                     HALT      
26F9                EXPECTM_3150S93:      
26F9   E1                     POP   HL   
26FA                          ;*Macro unroll:  test "2 2 <=", TRUE
26FA   31 00 4B               LD   SP,STACK   
26FD   CD BC 0E               CALL   coldInit   
2700   CD 4C 49               CALL   execStr   
2703   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
270A   E1                     POP   HL   
270B   E5                     PUSH   HL   
270C   11 FF FF               LD   DE,TRUE   
270F   B7                     OR   A   
2710   ED 52                  SBC   HL,DE   
2712   7D                     LD   A,L   
2713   B4                     OR   H   
2714   CA 6F 27               JP   Z,expectM_3151S94   
2717   CD 88 0E               CALL   printStr   
271A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2727   CD 88 0E               CALL   printStr   
272A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2739   21 FF FF               LD   hl,TRUE   
273C   E5                     PUSH   hl   
273D   E5                     PUSH   hl   
273E   CD 8A 0F               CALL   run   
2741   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2749   CD 88 0E               CALL   printStr   
274C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2759   E1                     POP   hl   
275A   E5                     PUSH   hl   
275B   E5                     PUSH   hl   
275C   CD 8A 0F               CALL   run   
275F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276E   76                     HALT      
276F                EXPECTM_3151S94:      
276F   E1                     POP   HL   
2770                          ;*Macro unroll:  test "2 2 >=", TRUE
2770   31 00 4B               LD   SP,STACK   
2773   CD BC 0E               CALL   coldInit   
2776   CD 4C 49               CALL   execStr   
2779   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2780   E1                     POP   HL   
2781   E5                     PUSH   HL   
2782   11 FF FF               LD   DE,TRUE   
2785   B7                     OR   A   
2786   ED 52                  SBC   HL,DE   
2788   7D                     LD   A,L   
2789   B4                     OR   H   
278A   CA E5 27               JP   Z,expectM_3152S95   
278D   CD 88 0E               CALL   printStr   
2790   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
279D   CD 88 0E               CALL   printStr   
27A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27AF   21 FF FF               LD   hl,TRUE   
27B2   E5                     PUSH   hl   
27B3   E5                     PUSH   hl   
27B4   CD 8A 0F               CALL   run   
27B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27BF   CD 88 0E               CALL   printStr   
27C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27CF   E1                     POP   hl   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD 8A 0F               CALL   run   
27D5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27E4   76                     HALT      
27E5                EXPECTM_3152S95:      
27E5   E1                     POP   HL   
27E6                          ;*Macro unroll:  test "3 1 <<", 6
27E6   31 00 4B               LD   SP,STACK   
27E9   CD BC 0E               CALL   coldInit   
27EC   CD 4C 49               CALL   execStr   
27EF   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
27F6   E1                     POP   HL   
27F7   E5                     PUSH   HL   
27F8   11 06 00               LD   DE,6   
27FB   B7                     OR   A   
27FC   ED 52                  SBC   HL,DE   
27FE   7D                     LD   A,L   
27FF   B4                     OR   H   
2800   CA 5B 28               JP   Z,expectM_3153S96   
2803   CD 88 0E               CALL   printStr   
2806   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2813   CD 88 0E               CALL   printStr   
2816   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2825   21 06 00               LD   hl,6   
2828   E5                     PUSH   hl   
2829   E5                     PUSH   hl   
282A   CD 8A 0F               CALL   run   
282D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2835   CD 88 0E               CALL   printStr   
2838   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2845   E1                     POP   hl   
2846   E5                     PUSH   hl   
2847   E5                     PUSH   hl   
2848   CD 8A 0F               CALL   run   
284B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
285A   76                     HALT      
285B                EXPECTM_3153S96:      
285B   E1                     POP   HL   
285C                          ;*Macro unroll:  test "10 1 >>", 5
285C   31 00 4B               LD   SP,STACK   
285F   CD BC 0E               CALL   coldInit   
2862   CD 4C 49               CALL   execStr   
2865   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
286D   E1                     POP   HL   
286E   E5                     PUSH   HL   
286F   11 05 00               LD   DE,5   
2872   B7                     OR   A   
2873   ED 52                  SBC   HL,DE   
2875   7D                     LD   A,L   
2876   B4                     OR   H   
2877   CA D3 28               JP   Z,expectM_3154S97   
287A   CD 88 0E               CALL   printStr   
287D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
288B   CD 88 0E               CALL   printStr   
288E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
289D   21 05 00               LD   hl,5   
28A0   E5                     PUSH   hl   
28A1   E5                     PUSH   hl   
28A2   CD 8A 0F               CALL   run   
28A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28AD   CD 88 0E               CALL   printStr   
28B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28BD   E1                     POP   hl   
28BE   E5                     PUSH   hl   
28BF   E5                     PUSH   hl   
28C0   CD 8A 0F               CALL   run   
28C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28D2   76                     HALT      
28D3                EXPECTM_3154S97:      
28D3   E1                     POP   HL   
28D4                          ;*Macro unroll:  test "1 x = x", 1
28D4   31 00 4B               LD   SP,STACK   
28D7   CD BC 0E               CALL   coldInit   
28DA   CD 4C 49               CALL   execStr   
28DD   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
28E5   E1                     POP   HL   
28E6   E5                     PUSH   HL   
28E7   11 01 00               LD   DE,1   
28EA   B7                     OR   A   
28EB   ED 52                  SBC   HL,DE   
28ED   7D                     LD   A,L   
28EE   B4                     OR   H   
28EF   CA 4B 29               JP   Z,expectM_3155S98   
28F2   CD 88 0E               CALL   printStr   
28F5   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2903   CD 88 0E               CALL   printStr   
2906   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2915   21 01 00               LD   hl,1   
2918   E5                     PUSH   hl   
2919   E5                     PUSH   hl   
291A   CD 8A 0F               CALL   run   
291D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2925   CD 88 0E               CALL   printStr   
2928   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2935   E1                     POP   hl   
2936   E5                     PUSH   hl   
2937   E5                     PUSH   hl   
2938   CD 8A 0F               CALL   run   
293B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
294A   76                     HALT      
294B                EXPECTM_3155S98:      
294B   E1                     POP   HL   
294C                          ;*Macro unroll:  test "1{}^", 1
294C   31 00 4B               LD   SP,STACK   
294F   CD BC 0E               CALL   coldInit   
2952   CD 4C 49               CALL   execStr   
2955   31 7B 7D 5E 00         DB   "1{}^",0   
295A   E1                     POP   HL   
295B   E5                     PUSH   HL   
295C   11 01 00               LD   DE,1   
295F   B7                     OR   A   
2960   ED 52                  SBC   HL,DE   
2962   7D                     LD   A,L   
2963   B4                     OR   H   
2964   CA BD 29               JP   Z,expectM_3156S99   
2967   CD 88 0E               CALL   printStr   
296A   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2975   CD 88 0E               CALL   printStr   
2978   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2987   21 01 00               LD   hl,1   
298A   E5                     PUSH   hl   
298B   E5                     PUSH   hl   
298C   CD 8A 0F               CALL   run   
298F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2997   CD 88 0E               CALL   printStr   
299A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29A7   E1                     POP   hl   
29A8   E5                     PUSH   hl   
29A9   E5                     PUSH   hl   
29AA   CD 8A 0F               CALL   run   
29AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29BC   76                     HALT      
29BD                EXPECTM_3156S99:      
29BD   E1                     POP   HL   
29BE                          ;*Macro unroll:  test "{1}^", 1
29BE   31 00 4B               LD   SP,STACK   
29C1   CD BC 0E               CALL   coldInit   
29C4   CD 4C 49               CALL   execStr   
29C7   7B 31 7D 5E 00         DB   "{1}^",0   
29CC   E1                     POP   HL   
29CD   E5                     PUSH   HL   
29CE   11 01 00               LD   DE,1   
29D1   B7                     OR   A   
29D2   ED 52                  SBC   HL,DE   
29D4   7D                     LD   A,L   
29D5   B4                     OR   H   
29D6   CA 2F 2A               JP   Z,expectM_3157S100   
29D9   CD 88 0E               CALL   printStr   
29DC   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
29E7   CD 88 0E               CALL   printStr   
29EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F9   21 01 00               LD   hl,1   
29FC   E5                     PUSH   hl   
29FD   E5                     PUSH   hl   
29FE   CD 8A 0F               CALL   run   
2A01   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A09   CD 88 0E               CALL   printStr   
2A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A19   E1                     POP   hl   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD 8A 0F               CALL   run   
2A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2E   76                     HALT      
2A2F                EXPECTM_3157S100:      
2A2F   E1                     POP   HL   
2A30                          ;*Macro unroll:  test "{{1}^}^", 1
2A30   31 00 4B               LD   SP,STACK   
2A33   CD BC 0E               CALL   coldInit   
2A36   CD 4C 49               CALL   execStr   
2A39   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 01 00               LD   DE,1   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA A7 2A               JP   Z,expectM_3158S101   
2A4E   CD 88 0E               CALL   printStr   
2A51   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2A5F   CD 88 0E               CALL   printStr   
2A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A71   21 01 00               LD   hl,1   
2A74   E5                     PUSH   hl   
2A75   E5                     PUSH   hl   
2A76   CD 8A 0F               CALL   run   
2A79   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A81   CD 88 0E               CALL   printStr   
2A84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A91   E1                     POP   hl   
2A92   E5                     PUSH   hl   
2A93   E5                     PUSH   hl   
2A94   CD 8A 0F               CALL   run   
2A97   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA6   76                     HALT      
2AA7                EXPECTM_3158S101:      
2AA7   E1                     POP   HL   
2AA8                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2AA8   31 00 4B               LD   SP,STACK   
2AAB   CD BC 0E               CALL   coldInit   
2AAE   CD 4C 49               CALL   execStr   
2AB1   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2ABC   E1                     POP   HL   
2ABD   E5                     PUSH   HL   
2ABE   11 01 00               LD   DE,1   
2AC1   B7                     OR   A   
2AC2   ED 52                  SBC   HL,DE   
2AC4   7D                     LD   A,L   
2AC5   B4                     OR   H   
2AC6   CA 25 2B               JP   Z,expectM_3159S102   
2AC9   CD 88 0E               CALL   printStr   
2ACC   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2ADD   CD 88 0E               CALL   printStr   
2AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEF   21 01 00               LD   hl,1   
2AF2   E5                     PUSH   hl   
2AF3   E5                     PUSH   hl   
2AF4   CD 8A 0F               CALL   run   
2AF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFF   CD 88 0E               CALL   printStr   
2B02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B0F   E1                     POP   hl   
2B10   E5                     PUSH   hl   
2B11   E5                     PUSH   hl   
2B12   CD 8A 0F               CALL   run   
2B15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B24   76                     HALT      
2B25                EXPECTM_3159S102:      
2B25   E1                     POP   HL   
2B26                          ;*Macro unroll:  test "5 /f{10} ?", 5
2B26   31 00 4B               LD   SP,STACK   
2B29   CD BC 0E               CALL   coldInit   
2B2C   CD 4C 49               CALL   execStr   
2B2F   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2B3A   E1                     POP   HL   
2B3B   E5                     PUSH   HL   
2B3C   11 05 00               LD   DE,5   
2B3F   B7                     OR   A   
2B40   ED 52                  SBC   HL,DE   
2B42   7D                     LD   A,L   
2B43   B4                     OR   H   
2B44   CA A3 2B               JP   Z,expectM_3160S103   
2B47   CD 88 0E               CALL   printStr   
2B4A   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2B5B   CD 88 0E               CALL   printStr   
2B5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6D   21 05 00               LD   hl,5   
2B70   E5                     PUSH   hl   
2B71   E5                     PUSH   hl   
2B72   CD 8A 0F               CALL   run   
2B75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7D   CD 88 0E               CALL   printStr   
2B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B8D   E1                     POP   hl   
2B8E   E5                     PUSH   hl   
2B8F   E5                     PUSH   hl   
2B90   CD 8A 0F               CALL   run   
2B93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA2   76                     HALT      
2BA3                EXPECTM_3160S103:      
2BA3   E1                     POP   HL   
2BA4                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2BA4   31 00 4B               LD   SP,STACK   
2BA7   CD BC 0E               CALL   coldInit   
2BAA   CD 4C 49               CALL   execStr   
2BAD   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2BBA   E1                     POP   HL   
2BBB   E5                     PUSH   HL   
2BBC   11 0F 00               LD   DE,15   
2BBF   B7                     OR   A   
2BC0   ED 52                  SBC   HL,DE   
2BC2   7D                     LD   A,L   
2BC3   B4                     OR   H   
2BC4   CA 25 2C               JP   Z,expectM_3161S104   
2BC7   CD 88 0E               CALL   printStr   
2BCA   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2BDD   CD 88 0E               CALL   printStr   
2BE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEF   21 0F 00               LD   hl,15   
2BF2   E5                     PUSH   hl   
2BF3   E5                     PUSH   hl   
2BF4   CD 8A 0F               CALL   run   
2BF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFF   CD 88 0E               CALL   printStr   
2C02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0F   E1                     POP   hl   
2C10   E5                     PUSH   hl   
2C11   E5                     PUSH   hl   
2C12   CD 8A 0F               CALL   run   
2C15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C24   76                     HALT      
2C25                EXPECTM_3161S104:      
2C25   E1                     POP   HL   
2C26                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2C26   31 00 4B               LD   SP,STACK   
2C29   CD BC 0E               CALL   coldInit   
2C2C   CD 4C 49               CALL   execStr   
2C2F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2C41   E1                     POP   HL   
2C42   E5                     PUSH   HL   
2C43   11 15 00               LD   DE,21   
2C46   B7                     OR   A   
2C47   ED 52                  SBC   HL,DE   
2C49   7D                     LD   A,L   
2C4A   B4                     OR   H   
2C4B   CA B1 2C               JP   Z,expectM_3162S105   
2C4E   CD 88 0E               CALL   printStr   
2C51   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2C69   CD 88 0E               CALL   printStr   
2C6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7B   21 15 00               LD   hl,21   
2C7E   E5                     PUSH   hl   
2C7F   E5                     PUSH   hl   
2C80   CD 8A 0F               CALL   run   
2C83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C8B   CD 88 0E               CALL   printStr   
2C8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9B   E1                     POP   hl   
2C9C   E5                     PUSH   hl   
2C9D   E5                     PUSH   hl   
2C9E   CD 8A 0F               CALL   run   
2CA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CB0   76                     HALT      
2CB1                EXPECTM_3162S105:      
2CB1   E1                     POP   HL   
2CB2                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2CB2   31 00 4B               LD   SP,STACK   
2CB5   CD BC 0E               CALL   coldInit   
2CB8   CD 4C 49               CALL   execStr   
2CBB   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2CCD   E1                     POP   HL   
2CCE   E5                     PUSH   HL   
2CCF   11 0B 00               LD   DE,11   
2CD2   B7                     OR   A   
2CD3   ED 52                  SBC   HL,DE   
2CD5   7D                     LD   A,L   
2CD6   B4                     OR   H   
2CD7   CA 3D 2D               JP   Z,expectM_3163S106   
2CDA   CD 88 0E               CALL   printStr   
2CDD   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2CF5   CD 88 0E               CALL   printStr   
2CF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D07   21 0B 00               LD   hl,11   
2D0A   E5                     PUSH   hl   
2D0B   E5                     PUSH   hl   
2D0C   CD 8A 0F               CALL   run   
2D0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D17   CD 88 0E               CALL   printStr   
2D1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D27   E1                     POP   hl   
2D28   E5                     PUSH   hl   
2D29   E5                     PUSH   hl   
2D2A   CD 8A 0F               CALL   run   
2D2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D3C   76                     HALT      
2D3D                EXPECTM_3163S106:      
2D3D   E1                     POP   HL   
2D3E                          ;*Macro unroll:  test "\\{2}^", 2
2D3E   31 00 4B               LD   SP,STACK   
2D41   CD BC 0E               CALL   coldInit   
2D44   CD 4C 49               CALL   execStr   
2D47   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2D4D   E1                     POP   HL   
2D4E   E5                     PUSH   HL   
2D4F   11 02 00               LD   DE,2   
2D52   B7                     OR   A   
2D53   ED 52                  SBC   HL,DE   
2D55   7D                     LD   A,L   
2D56   B4                     OR   H   
2D57   CA B1 2D               JP   Z,expectM_3164S107   
2D5A   CD 88 0E               CALL   printStr   
2D5D   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2D69   CD 88 0E               CALL   printStr   
2D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7B   21 02 00               LD   hl,2   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD 8A 0F               CALL   run   
2D83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D8B   CD 88 0E               CALL   printStr   
2D8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9B   E1                     POP   hl   
2D9C   E5                     PUSH   hl   
2D9D   E5                     PUSH   hl   
2D9E   CD 8A 0F               CALL   run   
2DA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB0   76                     HALT      
2DB1                EXPECTM_3164S107:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test "\\a{2}^", 2
2DB2   31 00 4B               LD   SP,STACK   
2DB5   CD BC 0E               CALL   coldInit   
2DB8   CD 4C 49               CALL   execStr   
2DBB   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2DC2   E1                     POP   HL   
2DC3   E5                     PUSH   HL   
2DC4   11 02 00               LD   DE,2   
2DC7   B7                     OR   A   
2DC8   ED 52                  SBC   HL,DE   
2DCA   7D                     LD   A,L   
2DCB   B4                     OR   H   
2DCC   CA 27 2E               JP   Z,expectM_3165S108   
2DCF   CD 88 0E               CALL   printStr   
2DD2   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2DDF   CD 88 0E               CALL   printStr   
2DE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF1   21 02 00               LD   hl,2   
2DF4   E5                     PUSH   hl   
2DF5   E5                     PUSH   hl   
2DF6   CD 8A 0F               CALL   run   
2DF9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E01   CD 88 0E               CALL   printStr   
2E04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E11   E1                     POP   hl   
2E12   E5                     PUSH   hl   
2E13   E5                     PUSH   hl   
2E14   CD 8A 0F               CALL   run   
2E17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E26   76                     HALT      
2E27                EXPECTM_3165S108:      
2E27   E1                     POP   HL   
2E28                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2E28   31 00 4B               LD   SP,STACK   
2E2B   CD BC 0E               CALL   coldInit   
2E2E   CD 4C 49               CALL   execStr   
2E31   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2E3B   E1                     POP   HL   
2E3C   E5                     PUSH   HL   
2E3D   11 05 00               LD   DE,5   
2E40   B7                     OR   A   
2E41   ED 52                  SBC   HL,DE   
2E43   7D                     LD   A,L   
2E44   B4                     OR   H   
2E45   CA A3 2E               JP   Z,expectM_3166S109   
2E48   CD 88 0E               CALL   printStr   
2E4B   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2E5B   CD 88 0E               CALL   printStr   
2E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6D   21 05 00               LD   hl,5   
2E70   E5                     PUSH   hl   
2E71   E5                     PUSH   hl   
2E72   CD 8A 0F               CALL   run   
2E75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E7D   CD 88 0E               CALL   printStr   
2E80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E8D   E1                     POP   hl   
2E8E   E5                     PUSH   hl   
2E8F   E5                     PUSH   hl   
2E90   CD 8A 0F               CALL   run   
2E93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EA2   76                     HALT      
2EA3                EXPECTM_3166S109:      
2EA3   E1                     POP   HL   
2EA4                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2EA4   31 00 4B               LD   SP,STACK   
2EA7   CD BC 0E               CALL   coldInit   
2EAA   CD 4C 49               CALL   execStr   
2EAD   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2EB9   E1                     POP   HL   
2EBA   E5                     PUSH   HL   
2EBB   11 05 00               LD   DE,5   
2EBE   B7                     OR   A   
2EBF   ED 52                  SBC   HL,DE   
2EC1   7D                     LD   A,L   
2EC2   B4                     OR   H   
2EC3   CA 23 2F               JP   Z,expectM_3167S110   
2EC6   CD 88 0E               CALL   printStr   
2EC9   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2EDB   CD 88 0E               CALL   printStr   
2EDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EED   21 05 00               LD   hl,5   
2EF0   E5                     PUSH   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD 8A 0F               CALL   run   
2EF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EFD   CD 88 0E               CALL   printStr   
2F00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0D   E1                     POP   hl   
2F0E   E5                     PUSH   hl   
2F0F   E5                     PUSH   hl   
2F10   CD 8A 0F               CALL   run   
2F13   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F22   76                     HALT      
2F23                EXPECTM_3167S110:      
2F23   E1                     POP   HL   
2F24                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2F24   31 00 4B               LD   SP,STACK   
2F27   CD BC 0E               CALL   coldInit   
2F2A   CD 4C 49               CALL   execStr   
2F2D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2F37   E1                     POP   HL   
2F38   E5                     PUSH   HL   
2F39   11 02 00               LD   DE,2   
2F3C   B7                     OR   A   
2F3D   ED 52                  SBC   HL,DE   
2F3F   7D                     LD   A,L   
2F40   B4                     OR   H   
2F41   CA 9F 2F               JP   Z,expectM_3168S111   
2F44   CD 88 0E               CALL   printStr   
2F47   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
2F57   CD 88 0E               CALL   printStr   
2F5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F69   21 02 00               LD   hl,2   
2F6C   E5                     PUSH   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD 8A 0F               CALL   run   
2F71   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F79   CD 88 0E               CALL   printStr   
2F7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F89   E1                     POP   hl   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD 8A 0F               CALL   run   
2F8F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F9E   76                     HALT      
2F9F                EXPECTM_3168S111:      
2F9F   E1                     POP   HL   
2FA0                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
2FA0   31 00 4B               LD   SP,STACK   
2FA3   CD BC 0E               CALL   coldInit   
2FA6   CD 4C 49               CALL   execStr   
2FA9   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
2FB8   E1                     POP   HL   
2FB9   E5                     PUSH   HL   
2FBA   11 05 00               LD   DE,5   
2FBD   B7                     OR   A   
2FBE   ED 52                  SBC   HL,DE   
2FC0   7D                     LD   A,L   
2FC1   B4                     OR   H   
2FC2   CA 25 30               JP   Z,expectM_3169S112   
2FC5   CD 88 0E               CALL   printStr   
2FC8   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
2FDD   CD 88 0E               CALL   printStr   
2FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FEF   21 05 00               LD   hl,5   
2FF2   E5                     PUSH   hl   
2FF3   E5                     PUSH   hl   
2FF4   CD 8A 0F               CALL   run   
2FF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FFF   CD 88 0E               CALL   printStr   
3002   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300F   E1                     POP   hl   
3010   E5                     PUSH   hl   
3011   E5                     PUSH   hl   
3012   CD 8A 0F               CALL   run   
3015   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3024   76                     HALT      
3025                EXPECTM_3169S112:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3026   31 00 4B               LD   SP,STACK   
3029   CD BC 0E               CALL   coldInit   
302C   CD 4C 49               CALL   execStr   
302F   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
303F   E1                     POP   HL   
3040   E5                     PUSH   HL   
3041   11 01 00               LD   DE,1   
3044   B7                     OR   A   
3045   ED 52                  SBC   HL,DE   
3047   7D                     LD   A,L   
3048   B4                     OR   H   
3049   CA AD 30               JP   Z,expectM_3170S113   
304C   CD 88 0E               CALL   printStr   
304F   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3065   CD 88 0E               CALL   printStr   
3068   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3077   21 01 00               LD   hl,1   
307A   E5                     PUSH   hl   
307B   E5                     PUSH   hl   
307C   CD 8A 0F               CALL   run   
307F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3087   CD 88 0E               CALL   printStr   
308A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3097   E1                     POP   hl   
3098   E5                     PUSH   hl   
3099   E5                     PUSH   hl   
309A   CD 8A 0F               CALL   run   
309D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30AC   76                     HALT      
30AD                EXPECTM_3170S113:      
30AD   E1                     POP   HL   
30AE                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
30AE   31 00 4B               LD   SP,STACK   
30B1   CD BC 0E               CALL   coldInit   
30B4   CD 4C 49               CALL   execStr   
30B7   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
30CA   E1                     POP   HL   
30CB   E5                     PUSH   HL   
30CC   11 07 00               LD   DE,7   
30CF   B7                     OR   A   
30D0   ED 52                  SBC   HL,DE   
30D2   7D                     LD   A,L   
30D3   B4                     OR   H   
30D4   CA 3B 31               JP   Z,expectM_3171S114   
30D7   CD 88 0E               CALL   printStr   
30DA   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
30F3   CD 88 0E               CALL   printStr   
30F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3105   21 07 00               LD   hl,7   
3108   E5                     PUSH   hl   
3109   E5                     PUSH   hl   
310A   CD 8A 0F               CALL   run   
310D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3115   CD 88 0E               CALL   printStr   
3118   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3125   E1                     POP   hl   
3126   E5                     PUSH   hl   
3127   E5                     PUSH   hl   
3128   CD 8A 0F               CALL   run   
312B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
313A   76                     HALT      
313B                EXPECTM_3171S114:      
313B   E1                     POP   HL   
313C                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
313C   31 00 4B               LD   SP,STACK   
313F   CD BC 0E               CALL   coldInit   
3142   CD 4C 49               CALL   execStr   
3145   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
315A   E1                     POP   HL   
315B   E5                     PUSH   HL   
315C   11 06 00               LD   DE,6   
315F   B7                     OR   A   
3160   ED 52                  SBC   HL,DE   
3162   7D                     LD   A,L   
3163   B4                     OR   H   
3164   CA CD 31               JP   Z,expectM_3172S115   
3167   CD 88 0E               CALL   printStr   
316A   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3185   CD 88 0E               CALL   printStr   
3188   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3197   21 06 00               LD   hl,6   
319A   E5                     PUSH   hl   
319B   E5                     PUSH   hl   
319C   CD 8A 0F               CALL   run   
319F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31A7   CD 88 0E               CALL   printStr   
31AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31B7   E1                     POP   hl   
31B8   E5                     PUSH   hl   
31B9   E5                     PUSH   hl   
31BA   CD 8A 0F               CALL   run   
31BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31CC   76                     HALT      
31CD                EXPECTM_3172S115:      
31CD   E1                     POP   HL   
31CE                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
31CE   31 00 4B               LD   SP,STACK   
31D1   CD BC 0E               CALL   coldInit   
31D4   CD 4C 49               CALL   execStr   
31D7   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
31E5   E1                     POP   HL   
31E6   E5                     PUSH   HL   
31E7   11 02 00               LD   DE,2   
31EA   B7                     OR   A   
31EB   ED 52                  SBC   HL,DE   
31ED   7D                     LD   A,L   
31EE   B4                     OR   H   
31EF   CA 51 32               JP   Z,expectM_3173S116   
31F2   CD 88 0E               CALL   printStr   
31F5   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3209   CD 88 0E               CALL   printStr   
320C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
321B   21 02 00               LD   hl,2   
321E   E5                     PUSH   hl   
321F   E5                     PUSH   hl   
3220   CD 8A 0F               CALL   run   
3223   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
322B   CD 88 0E               CALL   printStr   
322E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
323B   E1                     POP   hl   
323C   E5                     PUSH   hl   
323D   E5                     PUSH   hl   
323E   CD 8A 0F               CALL   run   
3241   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3250   76                     HALT      
3251                EXPECTM_3173S116:      
3251   E1                     POP   HL   
3252                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3252   31 00 4B               LD   SP,STACK   
3255   CD BC 0E               CALL   coldInit   
3258   CD 4C 49               CALL   execStr   
325B   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
326C   E1                     POP   HL   
326D   E5                     PUSH   HL   
326E   11 01 00               LD   DE,1   
3271   B7                     OR   A   
3272   ED 52                  SBC   HL,DE   
3274   7D                     LD   A,L   
3275   B4                     OR   H   
3276   CA DB 32               JP   Z,expectM_3174S117   
3279   CD 88 0E               CALL   printStr   
327C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3293   CD 88 0E               CALL   printStr   
3296   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A5   21 01 00               LD   hl,1   
32A8   E5                     PUSH   hl   
32A9   E5                     PUSH   hl   
32AA   CD 8A 0F               CALL   run   
32AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B5   CD 88 0E               CALL   printStr   
32B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C5   E1                     POP   hl   
32C6   E5                     PUSH   hl   
32C7   E5                     PUSH   hl   
32C8   CD 8A 0F               CALL   run   
32CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32DA   76                     HALT      
32DB                EXPECTM_3174S117:      
32DB   E1                     POP   HL   
32DC                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
32DC   31 00 4B               LD   SP,STACK   
32DF   CD BC 0E               CALL   coldInit   
32E2   CD 4C 49               CALL   execStr   
32E5   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
32F7   E1                     POP   HL   
32F8   E5                     PUSH   HL   
32F9   11 02 00               LD   DE,2   
32FC   B7                     OR   A   
32FD   ED 52                  SBC   HL,DE   
32FF   7D                     LD   A,L   
3300   B4                     OR   H   
3301   CA 67 33               JP   Z,expectM_3175S118   
3304   CD 88 0E               CALL   printStr   
3307   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
331F   CD 88 0E               CALL   printStr   
3322   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3331   21 02 00               LD   hl,2   
3334   E5                     PUSH   hl   
3335   E5                     PUSH   hl   
3336   CD 8A 0F               CALL   run   
3339   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3341   CD 88 0E               CALL   printStr   
3344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3351   E1                     POP   hl   
3352   E5                     PUSH   hl   
3353   E5                     PUSH   hl   
3354   CD 8A 0F               CALL   run   
3357   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3366   76                     HALT      
3367                EXPECTM_3175S118:      
3367   E1                     POP   HL   
3368                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3368   31 00 4B               LD   SP,STACK   
336B   CD BC 0E               CALL   coldInit   
336E   CD 4C 49               CALL   execStr   
3371   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3384   E1                     POP   HL   
3385   E5                     PUSH   HL   
3386   11 02 00               LD   DE,2   
3389   B7                     OR   A   
338A   ED 52                  SBC   HL,DE   
338C   7D                     LD   A,L   
338D   B4                     OR   H   
338E   CA F5 33               JP   Z,expectM_3176S119   
3391   CD 88 0E               CALL   printStr   
3394   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
33AD   CD 88 0E               CALL   printStr   
33B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BF   21 02 00               LD   hl,2   
33C2   E5                     PUSH   hl   
33C3   E5                     PUSH   hl   
33C4   CD 8A 0F               CALL   run   
33C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33CF   CD 88 0E               CALL   printStr   
33D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33DF   E1                     POP   hl   
33E0   E5                     PUSH   hl   
33E1   E5                     PUSH   hl   
33E2   CD 8A 0F               CALL   run   
33E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33F4   76                     HALT      
33F5                EXPECTM_3176S119:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
33F6   31 00 4B               LD   SP,STACK   
33F9   CD BC 0E               CALL   coldInit   
33FC   CD 4C 49               CALL   execStr   
33FF   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3411   E1                     POP   HL   
3412   E5                     PUSH   HL   
3413   11 02 00               LD   DE,2   
3416   B7                     OR   A   
3417   ED 52                  SBC   HL,DE   
3419   7D                     LD   A,L   
341A   B4                     OR   H   
341B   CA 81 34               JP   Z,expectM_3177S120   
341E   CD 88 0E               CALL   printStr   
3421   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3439   CD 88 0E               CALL   printStr   
343C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
344B   21 02 00               LD   hl,2   
344E   E5                     PUSH   hl   
344F   E5                     PUSH   hl   
3450   CD 8A 0F               CALL   run   
3453   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
345B   CD 88 0E               CALL   printStr   
345E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
346B   E1                     POP   hl   
346C   E5                     PUSH   hl   
346D   E5                     PUSH   hl   
346E   CD 8A 0F               CALL   run   
3471   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3480   76                     HALT      
3481                EXPECTM_3177S120:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3482   31 00 4B               LD   SP,STACK   
3485   CD BC 0E               CALL   coldInit   
3488   CD 4C 49               CALL   execStr   
348B   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
34A4   E1                     POP   HL   
34A5   E5                     PUSH   HL   
34A6   11 05 00               LD   DE,5   
34A9   B7                     OR   A   
34AA   ED 52                  SBC   HL,DE   
34AC   7D                     LD   A,L   
34AD   B4                     OR   H   
34AE   CA 1B 35               JP   Z,expectM_3178S121   
34B1   CD 88 0E               CALL   printStr   
34B4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
34D3   CD 88 0E               CALL   printStr   
34D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E5   21 05 00               LD   hl,5   
34E8   E5                     PUSH   hl   
34E9   E5                     PUSH   hl   
34EA   CD 8A 0F               CALL   run   
34ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34F5   CD 88 0E               CALL   printStr   
34F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3505   E1                     POP   hl   
3506   E5                     PUSH   hl   
3507   E5                     PUSH   hl   
3508   CD 8A 0F               CALL   run   
350B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
351A   76                     HALT      
351B                EXPECTM_3178S121:      
351B   E1                     POP   HL   
351C                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
351C   31 00 4B               LD   SP,STACK   
351F   CD BC 0E               CALL   coldInit   
3522   CD 4C 49               CALL   execStr   
3525   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3535   E1                     POP   HL   
3536   E5                     PUSH   HL   
3537   11 02 00               LD   DE,2   
353A   B7                     OR   A   
353B   ED 52                  SBC   HL,DE   
353D   7D                     LD   A,L   
353E   B4                     OR   H   
353F   CA A3 35               JP   Z,expectM_3179S122   
3542   CD 88 0E               CALL   printStr   
3545   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
355B   CD 88 0E               CALL   printStr   
355E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
356D   21 02 00               LD   hl,2   
3570   E5                     PUSH   hl   
3571   E5                     PUSH   hl   
3572   CD 8A 0F               CALL   run   
3575   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
357D   CD 88 0E               CALL   printStr   
3580   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
358D   E1                     POP   hl   
358E   E5                     PUSH   hl   
358F   E5                     PUSH   hl   
3590   CD 8A 0F               CALL   run   
3593   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35A2   76                     HALT      
35A3                EXPECTM_3179S122:      
35A3   E1                     POP   HL   
35A4                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
35A4   31 00 4B               LD   SP,STACK   
35A7   CD BC 0E               CALL   coldInit   
35AA   CD 4C 49               CALL   execStr   
35AD   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
35C4   E1                     POP   HL   
35C5   E5                     PUSH   HL   
35C6   11 64 00               LD   DE,100   
35C9   B7                     OR   A   
35CA   ED 52                  SBC   HL,DE   
35CC   7D                     LD   A,L   
35CD   B4                     OR   H   
35CE   CA 39 36               JP   Z,expectM_3180S123   
35D1   CD 88 0E               CALL   printStr   
35D4   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
35F1   CD 88 0E               CALL   printStr   
35F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3603   21 64 00               LD   hl,100   
3606   E5                     PUSH   hl   
3607   E5                     PUSH   hl   
3608   CD 8A 0F               CALL   run   
360B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3613   CD 88 0E               CALL   printStr   
3616   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3623   E1                     POP   hl   
3624   E5                     PUSH   hl   
3625   E5                     PUSH   hl   
3626   CD 8A 0F               CALL   run   
3629   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3638   76                     HALT      
3639                EXPECTM_3180S123:      
3639   E1                     POP   HL   
363A                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
363A   31 00 4B               LD   SP,STACK   
363D   CD BC 0E               CALL   coldInit   
3640   CD 4C 49               CALL   execStr   
3643   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
365B   E1                     POP   HL   
365C   E5                     PUSH   HL   
365D   11 01 00               LD   DE,1   
3660   B7                     OR   A   
3661   ED 52                  SBC   HL,DE   
3663   7D                     LD   A,L   
3664   B4                     OR   H   
3665   CA D1 36               JP   Z,expectM_3181S124   
3668   CD 88 0E               CALL   printStr   
366B   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3689   CD 88 0E               CALL   printStr   
368C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
369B   21 01 00               LD   hl,1   
369E   E5                     PUSH   hl   
369F   E5                     PUSH   hl   
36A0   CD 8A 0F               CALL   run   
36A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36AB   CD 88 0E               CALL   printStr   
36AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36BB   E1                     POP   hl   
36BC   E5                     PUSH   hl   
36BD   E5                     PUSH   hl   
36BE   CD 8A 0F               CALL   run   
36C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36D0   76                     HALT      
36D1                EXPECTM_3181S124:      
36D1   E1                     POP   HL   
36D2                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
36D2   31 00 4B               LD   SP,STACK   
36D5   CD BC 0E               CALL   coldInit   
36D8   CD 4C 49               CALL   execStr   
36DB   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
36F4   E1                     POP   HL   
36F5   E5                     PUSH   HL   
36F6   11 02 00               LD   DE,2   
36F9   B7                     OR   A   
36FA   ED 52                  SBC   HL,DE   
36FC   7D                     LD   A,L   
36FD   B4                     OR   H   
36FE   CA 6B 37               JP   Z,expectM_3182S125   
3701   CD 88 0E               CALL   printStr   
3704   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3723   CD 88 0E               CALL   printStr   
3726   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3735   21 02 00               LD   hl,2   
3738   E5                     PUSH   hl   
3739   E5                     PUSH   hl   
373A   CD 8A 0F               CALL   run   
373D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3745   CD 88 0E               CALL   printStr   
3748   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3755   E1                     POP   hl   
3756   E5                     PUSH   hl   
3757   E5                     PUSH   hl   
3758   CD 8A 0F               CALL   run   
375B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
376A   76                     HALT      
376B                EXPECTM_3182S125:      
376B   E1                     POP   HL   
376C                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
376C   31 00 4B               LD   SP,STACK   
376F   CD BC 0E               CALL   coldInit   
3772   CD 4C 49               CALL   execStr   
3775   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3793   E1                     POP   HL   
3794   E5                     PUSH   HL   
3795   11 0B 00               LD   DE,11   
3798   B7                     OR   A   
3799   ED 52                  SBC   HL,DE   
379B   7D                     LD   A,L   
379C   B4                     OR   H   
379D   CA 0F 38               JP   Z,expectM_3183S126   
37A0   CD 88 0E               CALL   printStr   
37A3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
37C7   CD 88 0E               CALL   printStr   
37CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D9   21 0B 00               LD   hl,11   
37DC   E5                     PUSH   hl   
37DD   E5                     PUSH   hl   
37DE   CD 8A 0F               CALL   run   
37E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37E9   CD 88 0E               CALL   printStr   
37EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F9   E1                     POP   hl   
37FA   E5                     PUSH   hl   
37FB   E5                     PUSH   hl   
37FC   CD 8A 0F               CALL   run   
37FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
380E   76                     HALT      
380F                EXPECTM_3183S126:      
380F   E1                     POP   HL   
3810                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3810   31 00 4B               LD   SP,STACK   
3813   CD BC 0E               CALL   coldInit   
3816   CD 4C 49               CALL   execStr   
3819   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3837   E1                     POP   HL   
3838   E5                     PUSH   HL   
3839   11 15 00               LD   DE,21   
383C   B7                     OR   A   
383D   ED 52                  SBC   HL,DE   
383F   7D                     LD   A,L   
3840   B4                     OR   H   
3841   CA B3 38               JP   Z,expectM_3184S127   
3844   CD 88 0E               CALL   printStr   
3847   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
386B   CD 88 0E               CALL   printStr   
386E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
387D   21 15 00               LD   hl,21   
3880   E5                     PUSH   hl   
3881   E5                     PUSH   hl   
3882   CD 8A 0F               CALL   run   
3885   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
388D   CD 88 0E               CALL   printStr   
3890   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
389D   E1                     POP   hl   
389E   E5                     PUSH   hl   
389F   E5                     PUSH   hl   
38A0   CD 8A 0F               CALL   run   
38A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38B2   76                     HALT      
38B3                EXPECTM_3184S127:      
38B3   E1                     POP   HL   
38B4                          ;*Macro unroll:  test "[10 20 30] 1#", 20
38B4   31 00 4B               LD   SP,STACK   
38B7   CD BC 0E               CALL   coldInit   
38BA   CD 4C 49               CALL   execStr   
38BD   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
38CB   E1                     POP   HL   
38CC   E5                     PUSH   HL   
38CD   11 14 00               LD   DE,20   
38D0   B7                     OR   A   
38D1   ED 52                  SBC   HL,DE   
38D3   7D                     LD   A,L   
38D4   B4                     OR   H   
38D5   CA 37 39               JP   Z,expectM_3185S128   
38D8   CD 88 0E               CALL   printStr   
38DB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
38EF   CD 88 0E               CALL   printStr   
38F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3901   21 14 00               LD   hl,20   
3904   E5                     PUSH   hl   
3905   E5                     PUSH   hl   
3906   CD 8A 0F               CALL   run   
3909   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3911   CD 88 0E               CALL   printStr   
3914   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3921   E1                     POP   hl   
3922   E5                     PUSH   hl   
3923   E5                     PUSH   hl   
3924   CD 8A 0F               CALL   run   
3927   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3936   76                     HALT      
3937                EXPECTM_3185S128:      
3937   E1                     POP   HL   
3938                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3938   31 00 4B               LD   SP,STACK   
393B   CD BC 0E               CALL   coldInit   
393E   CD 4C 49               CALL   execStr   
3941   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3953   E1                     POP   HL   
3954   E5                     PUSH   HL   
3955   11 04 00               LD   DE,4   
3958   B7                     OR   A   
3959   ED 52                  SBC   HL,DE   
395B   7D                     LD   A,L   
395C   B4                     OR   H   
395D   CA C3 39               JP   Z,expectM_3186S129   
3960   CD 88 0E               CALL   printStr   
3963   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
397B   CD 88 0E               CALL   printStr   
397E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
398D   21 04 00               LD   hl,4   
3990   E5                     PUSH   hl   
3991   E5                     PUSH   hl   
3992   CD 8A 0F               CALL   run   
3995   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
399D   CD 88 0E               CALL   printStr   
39A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39AD   E1                     POP   hl   
39AE   E5                     PUSH   hl   
39AF   E5                     PUSH   hl   
39B0   CD 8A 0F               CALL   run   
39B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39C2   76                     HALT      
39C3                EXPECTM_3186S129:      
39C3   E1                     POP   HL   
39C4                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
39C4   31 00 4B               LD   SP,STACK   
39C7   CD BC 0E               CALL   coldInit   
39CA   CD 4C 49               CALL   execStr   
39CD   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
39DB   E1                     POP   HL   
39DC   E5                     PUSH   HL   
39DD   11 02 00               LD   DE,2   
39E0   B7                     OR   A   
39E1   ED 52                  SBC   HL,DE   
39E3   7D                     LD   A,L   
39E4   B4                     OR   H   
39E5   CA 47 3A               JP   Z,expectM_3187S130   
39E8   CD 88 0E               CALL   printStr   
39EB   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
39FF   CD 88 0E               CALL   printStr   
3A02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A11   21 02 00               LD   hl,2   
3A14   E5                     PUSH   hl   
3A15   E5                     PUSH   hl   
3A16   CD 8A 0F               CALL   run   
3A19   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A21   CD 88 0E               CALL   printStr   
3A24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A31   E1                     POP   hl   
3A32   E5                     PUSH   hl   
3A33   E5                     PUSH   hl   
3A34   CD 8A 0F               CALL   run   
3A37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A46   76                     HALT      
3A47                EXPECTM_3187S130:      
3A47   E1                     POP   HL   
3A48                          ;*Macro unroll:  test "/b [~A ~B ~C] 1#", 66
3A48   31 00 4B               LD   SP,STACK   
3A4B   CD BC 0E               CALL   coldInit   
3A4E   CD 4C 49               CALL   execStr   
3A51   2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/b [~A ~B ~C] 1#",0   
3A62   E1                     POP   HL   
3A63   E5                     PUSH   HL   
3A64   11 42 00               LD   DE,66   
3A67   B7                     OR   A   
3A68   ED 52                  SBC   HL,DE   
3A6A   7D                     LD   A,L   
3A6B   B4                     OR   H   
3A6C   CA D1 3A               JP   Z,expectM_3188S131   
3A6F   CD 88 0E               CALL   printStr   
3A72   43 6F 64 65 3A 20 2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/b [~A ~B ~C] 1#"   
3A89   CD 88 0E               CALL   printStr   
3A8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A9B   21 42 00               LD   hl,66   
3A9E   E5                     PUSH   hl   
3A9F   E5                     PUSH   hl   
3AA0   CD 8A 0F               CALL   run   
3AA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AAB   CD 88 0E               CALL   printStr   
3AAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ABB   E1                     POP   hl   
3ABC   E5                     PUSH   hl   
3ABD   E5                     PUSH   hl   
3ABE   CD 8A 0F               CALL   run   
3AC1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AD0   76                     HALT      
3AD1                EXPECTM_3188S131:      
3AD1   E1                     POP   HL   
3AD2                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3AD2   31 00 4B               LD   SP,STACK   
3AD5   CD BC 0E               CALL   coldInit   
3AD8   CD 4C 49               CALL   execStr   
3ADB   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3AEF   E1                     POP   HL   
3AF0   E5                     PUSH   HL   
3AF1   11 0A 00               LD   DE,10   
3AF4   B7                     OR   A   
3AF5   ED 52                  SBC   HL,DE   
3AF7   7D                     LD   A,L   
3AF8   B4                     OR   H   
3AF9   CA 61 3B               JP   Z,expectM_3189S132   
3AFC   CD 88 0E               CALL   printStr   
3AFF   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3B19   CD 88 0E               CALL   printStr   
3B1C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2B   21 0A 00               LD   hl,10   
3B2E   E5                     PUSH   hl   
3B2F   E5                     PUSH   hl   
3B30   CD 8A 0F               CALL   run   
3B33   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B3B   CD 88 0E               CALL   printStr   
3B3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4B   E1                     POP   hl   
3B4C   E5                     PUSH   hl   
3B4D   E5                     PUSH   hl   
3B4E   CD 8A 0F               CALL   run   
3B51   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B60   76                     HALT      
3B61                EXPECTM_3189S132:      
3B61   E1                     POP   HL   
3B62                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3B62   31 00 4B               LD   SP,STACK   
3B65   CD BC 0E               CALL   coldInit   
3B68   CD 4C 49               CALL   execStr   
3B6B   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3B86   E1                     POP   HL   
3B87   E5                     PUSH   HL   
3B88   11 0A 00               LD   DE,10   
3B8B   B7                     OR   A   
3B8C   ED 52                  SBC   HL,DE   
3B8E   7D                     LD   A,L   
3B8F   B4                     OR   H   
3B90   CA FF 3B               JP   Z,expectM_3190S133   
3B93   CD 88 0E               CALL   printStr   
3B96   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3BB7   CD 88 0E               CALL   printStr   
3BBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BC9   21 0A 00               LD   hl,10   
3BCC   E5                     PUSH   hl   
3BCD   E5                     PUSH   hl   
3BCE   CD 8A 0F               CALL   run   
3BD1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BD9   CD 88 0E               CALL   printStr   
3BDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE9   E1                     POP   hl   
3BEA   E5                     PUSH   hl   
3BEB   E5                     PUSH   hl   
3BEC   CD 8A 0F               CALL   run   
3BEF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BFE   76                     HALT      
3BFF                EXPECTM_3190S133:      
3BFF   E1                     POP   HL   
3C00                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3C00   31 00 4B               LD   SP,STACK   
3C03   CD BC 0E               CALL   coldInit   
3C06   CD 4C 49               CALL   execStr   
3C09   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3C28   E1                     POP   HL   
3C29   E5                     PUSH   HL   
3C2A   11 0A 00               LD   DE,10   
3C2D   B7                     OR   A   
3C2E   ED 52                  SBC   HL,DE   
3C30   7D                     LD   A,L   
3C31   B4                     OR   H   
3C32   CA A5 3C               JP   Z,expectM_3191S134   
3C35   CD 88 0E               CALL   printStr   
3C38   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3C5D   CD 88 0E               CALL   printStr   
3C60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C6F   21 0A 00               LD   hl,10   
3C72   E5                     PUSH   hl   
3C73   E5                     PUSH   hl   
3C74   CD 8A 0F               CALL   run   
3C77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C7F   CD 88 0E               CALL   printStr   
3C82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C8F   E1                     POP   hl   
3C90   E5                     PUSH   hl   
3C91   E5                     PUSH   hl   
3C92   CD 8A 0F               CALL   run   
3C95   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CA4   76                     HALT      
3CA5                EXPECTM_3191S134:      
3CA5   E1                     POP   HL   
3CA6                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3CA6   31 00 4B               LD   SP,STACK   
3CA9   CD BC 0E               CALL   coldInit   
3CAC   CD 4C 49               CALL   execStr   
3CAF   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CCE   E1                     POP   HL   
3CCF   E5                     PUSH   HL   
3CD0   11 14 00               LD   DE,20   
3CD3   B7                     OR   A   
3CD4   ED 52                  SBC   HL,DE   
3CD6   7D                     LD   A,L   
3CD7   B4                     OR   H   
3CD8   CA 4B 3D               JP   Z,expectM_3192S135   
3CDB   CD 88 0E               CALL   printStr   
3CDE   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D03   CD 88 0E               CALL   printStr   
3D06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D15   21 14 00               LD   hl,20   
3D18   E5                     PUSH   hl   
3D19   E5                     PUSH   hl   
3D1A   CD 8A 0F               CALL   run   
3D1D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D25   CD 88 0E               CALL   printStr   
3D28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D35   E1                     POP   hl   
3D36   E5                     PUSH   hl   
3D37   E5                     PUSH   hl   
3D38   CD 8A 0F               CALL   run   
3D3B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D4A   76                     HALT      
3D4B                EXPECTM_3192S135:      
3D4B   E1                     POP   HL   
3D4C                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3D4C   31 00 4B               LD   SP,STACK   
3D4F   CD BC 0E               CALL   coldInit   
3D52   CD 4C 49               CALL   execStr   
3D55   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3D6D   E1                     POP   HL   
3D6E   E5                     PUSH   HL   
3D6F   11 06 00               LD   DE,6   
3D72   B7                     OR   A   
3D73   ED 52                  SBC   HL,DE   
3D75   7D                     LD   A,L   
3D76   B4                     OR   H   
3D77   CA E3 3D               JP   Z,expectM_3193S136   
3D7A   CD 88 0E               CALL   printStr   
3D7D   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3D9B   CD 88 0E               CALL   printStr   
3D9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DAD   21 06 00               LD   hl,6   
3DB0   E5                     PUSH   hl   
3DB1   E5                     PUSH   hl   
3DB2   CD 8A 0F               CALL   run   
3DB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DBD   CD 88 0E               CALL   printStr   
3DC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DCD   E1                     POP   hl   
3DCE   E5                     PUSH   hl   
3DCF   E5                     PUSH   hl   
3DD0   CD 8A 0F               CALL   run   
3DD3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DE2   76                     HALT      
3DE3                EXPECTM_3193S136:      
3DE3   E1                     POP   HL   
3DE4                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3DE4   31 00 4B               LD   SP,STACK   
3DE7   CD BC 0E               CALL   coldInit   
3DEA   CD 4C 49               CALL   execStr   
3DED   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3E08   E1                     POP   HL   
3E09   E5                     PUSH   HL   
3E0A   11 02 00               LD   DE,2   
3E0D   B7                     OR   A   
3E0E   ED 52                  SBC   HL,DE   
3E10   7D                     LD   A,L   
3E11   B4                     OR   H   
3E12   CA 81 3E               JP   Z,expectM_3194S137   
3E15   CD 88 0E               CALL   printStr   
3E18   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3E39   CD 88 0E               CALL   printStr   
3E3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4B   21 02 00               LD   hl,2   
3E4E   E5                     PUSH   hl   
3E4F   E5                     PUSH   hl   
3E50   CD 8A 0F               CALL   run   
3E53   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E5B   CD 88 0E               CALL   printStr   
3E5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6B   E1                     POP   hl   
3E6C   E5                     PUSH   hl   
3E6D   E5                     PUSH   hl   
3E6E   CD 8A 0F               CALL   run   
3E71   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E80   76                     HALT      
3E81                EXPECTM_3194S137:      
3E81   E1                     POP   HL   
3E82                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3E82   31 00 4B               LD   SP,STACK   
3E85   CD BC 0E               CALL   coldInit   
3E88   CD 4C 49               CALL   execStr   
3E8B   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3EB1   E1                     POP   HL   
3EB2   E5                     PUSH   HL   
3EB3   11 0A 00               LD   DE,10   
3EB6   B7                     OR   A   
3EB7   ED 52                  SBC   HL,DE   
3EB9   7D                     LD   A,L   
3EBA   B4                     OR   H   
3EBB   CA 35 3F               JP   Z,expectM_3195S138   
3EBE   CD 88 0E               CALL   printStr   
3EC1   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3EED   CD 88 0E               CALL   printStr   
3EF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EFF   21 0A 00               LD   hl,10   
3F02   E5                     PUSH   hl   
3F03   E5                     PUSH   hl   
3F04   CD 8A 0F               CALL   run   
3F07   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F0F   CD 88 0E               CALL   printStr   
3F12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F1F   E1                     POP   hl   
3F20   E5                     PUSH   hl   
3F21   E5                     PUSH   hl   
3F22   CD 8A 0F               CALL   run   
3F25   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F34   76                     HALT      
3F35                EXPECTM_3195S138:      
3F35   E1                     POP   HL   
3F36                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3F36   31 00 4B               LD   SP,STACK   
3F39   CD BC 0E               CALL   coldInit   
3F3C   CD 4C 49               CALL   execStr   
3F3F   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
3F6A   E1                     POP   HL   
3F6B   E5                     PUSH   HL   
3F6C   11 06 00               LD   DE,6   
3F6F   B7                     OR   A   
3F70   ED 52                  SBC   HL,DE   
3F72   7D                     LD   A,L   
3F73   B4                     OR   H   
3F74   CA F3 3F               JP   Z,expectM_3196S139   
3F77   CD 88 0E               CALL   printStr   
3F7A   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
3FAB   CD 88 0E               CALL   printStr   
3FAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FBD   21 06 00               LD   hl,6   
3FC0   E5                     PUSH   hl   
3FC1   E5                     PUSH   hl   
3FC2   CD 8A 0F               CALL   run   
3FC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FCD   CD 88 0E               CALL   printStr   
3FD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FDD   E1                     POP   hl   
3FDE   E5                     PUSH   hl   
3FDF   E5                     PUSH   hl   
3FE0   CD 8A 0F               CALL   run   
3FE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF2   76                     HALT      
3FF3                EXPECTM_3196S139:      
3FF3   E1                     POP   HL   
3FF4                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
3FF4   31 00 4B               LD   SP,STACK   
3FF7   CD BC 0E               CALL   coldInit   
3FFA   CD 4C 49               CALL   execStr   
3FFD   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4011   E1                     POP   HL   
4012   E5                     PUSH   HL   
4013   11 03 00               LD   DE,3   
4016   B7                     OR   A   
4017   ED 52                  SBC   HL,DE   
4019   7D                     LD   A,L   
401A   B4                     OR   H   
401B   CA 83 40               JP   Z,expectM_3197S140   
401E   CD 88 0E               CALL   printStr   
4021   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
403B   CD 88 0E               CALL   printStr   
403E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404D   21 03 00               LD   hl,3   
4050   E5                     PUSH   hl   
4051   E5                     PUSH   hl   
4052   CD 8A 0F               CALL   run   
4055   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
405D   CD 88 0E               CALL   printStr   
4060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
406D   E1                     POP   hl   
406E   E5                     PUSH   hl   
406F   E5                     PUSH   hl   
4070   CD 8A 0F               CALL   run   
4073   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4082   76                     HALT      
4083                EXPECTM_3197S140:      
4083   E1                     POP   HL   
4084                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4084   31 00 4B               LD   SP,STACK   
4087   CD BC 0E               CALL   coldInit   
408A   CD 4C 49               CALL   execStr   
408D   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
40A1   E1                     POP   HL   
40A2   E5                     PUSH   HL   
40A3   11 01 00               LD   DE,1   
40A6   B7                     OR   A   
40A7   ED 52                  SBC   HL,DE   
40A9   7D                     LD   A,L   
40AA   B4                     OR   H   
40AB   CA 13 41               JP   Z,expectM_3198S141   
40AE   CD 88 0E               CALL   printStr   
40B1   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
40CB   CD 88 0E               CALL   printStr   
40CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40DD   21 01 00               LD   hl,1   
40E0   E5                     PUSH   hl   
40E1   E5                     PUSH   hl   
40E2   CD 8A 0F               CALL   run   
40E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40ED   CD 88 0E               CALL   printStr   
40F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40FD   E1                     POP   hl   
40FE   E5                     PUSH   hl   
40FF   E5                     PUSH   hl   
4100   CD 8A 0F               CALL   run   
4103   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4112   76                     HALT      
4113                EXPECTM_3198S141:      
4113   E1                     POP   HL   
4114                          ;*Macro unroll:  test "~A 1 - /ad", NUL
4114   31 00 4B               LD   SP,STACK   
4117   CD BC 0E               CALL   coldInit   
411A   CD 4C 49               CALL   execStr   
411D   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
4128   E1                     POP   HL   
4129   E5                     PUSH   HL   
412A   11 00 00               LD   DE,NUL   
412D   B7                     OR   A   
412E   ED 52                  SBC   HL,DE   
4130   7D                     LD   A,L   
4131   B4                     OR   H   
4132   CA 91 41               JP   Z,expectM_3199S142   
4135   CD 88 0E               CALL   printStr   
4138   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
4149   CD 88 0E               CALL   printStr   
414C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
415B   21 00 00               LD   hl,NUL   
415E   E5                     PUSH   hl   
415F   E5                     PUSH   hl   
4160   CD 8A 0F               CALL   run   
4163   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
416B   CD 88 0E               CALL   printStr   
416E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417B   E1                     POP   hl   
417C   E5                     PUSH   hl   
417D   E5                     PUSH   hl   
417E   CD 8A 0F               CALL   run   
4181   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4190   76                     HALT      
4191                EXPECTM_3199S142:      
4191   E1                     POP   HL   
4192                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
4192   31 00 4B               LD   SP,STACK   
4195   CD BC 0E               CALL   coldInit   
4198   CD 4C 49               CALL   execStr   
419B   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
41A6   E1                     POP   HL   
41A7   E5                     PUSH   HL   
41A8   11 00 00               LD   DE,NUL   
41AB   B7                     OR   A   
41AC   ED 52                  SBC   HL,DE   
41AE   7D                     LD   A,L   
41AF   B4                     OR   H   
41B0   CA 0F 42               JP   Z,expectM_3200S143   
41B3   CD 88 0E               CALL   printStr   
41B6   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
41C7   CD 88 0E               CALL   printStr   
41CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D9   21 00 00               LD   hl,NUL   
41DC   E5                     PUSH   hl   
41DD   E5                     PUSH   hl   
41DE   CD 8A 0F               CALL   run   
41E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41E9   CD 88 0E               CALL   printStr   
41EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41F9   E1                     POP   hl   
41FA   E5                     PUSH   hl   
41FB   E5                     PUSH   hl   
41FC   CD 8A 0F               CALL   run   
41FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
420E   76                     HALT      
420F                EXPECTM_3200S143:      
420F   E1                     POP   HL   
4210                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4210   31 00 4B               LD   SP,STACK   
4213   CD BC 0E               CALL   coldInit   
4216   CD 4C 49               CALL   execStr   
4219   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
4224   E1                     POP   HL   
4225   E5                     PUSH   HL   
4226   11 00 00               LD   DE,NUL   
4229   B7                     OR   A   
422A   ED 52                  SBC   HL,DE   
422C   7D                     LD   A,L   
422D   B4                     OR   H   
422E   CA 8D 42               JP   Z,expectM_3201S144   
4231   CD 88 0E               CALL   printStr   
4234   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
4245   CD 88 0E               CALL   printStr   
4248   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4257   21 00 00               LD   hl,NUL   
425A   E5                     PUSH   hl   
425B   E5                     PUSH   hl   
425C   CD 8A 0F               CALL   run   
425F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4267   CD 88 0E               CALL   printStr   
426A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4277   E1                     POP   hl   
4278   E5                     PUSH   hl   
4279   E5                     PUSH   hl   
427A   CD 8A 0F               CALL   run   
427D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
428C   76                     HALT      
428D                EXPECTM_3201S144:      
428D   E1                     POP   HL   
428E                          ;*Macro unroll:  test "~z 1 + /ad", NUL
428E   31 00 4B               LD   SP,STACK   
4291   CD BC 0E               CALL   coldInit   
4294   CD 4C 49               CALL   execStr   
4297   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
42A2   E1                     POP   HL   
42A3   E5                     PUSH   HL   
42A4   11 00 00               LD   DE,NUL   
42A7   B7                     OR   A   
42A8   ED 52                  SBC   HL,DE   
42AA   7D                     LD   A,L   
42AB   B4                     OR   H   
42AC   CA 0B 43               JP   Z,expectM_3202S145   
42AF   CD 88 0E               CALL   printStr   
42B2   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
42C3   CD 88 0E               CALL   printStr   
42C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D5   21 00 00               LD   hl,NUL   
42D8   E5                     PUSH   hl   
42D9   E5                     PUSH   hl   
42DA   CD 8A 0F               CALL   run   
42DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E5   CD 88 0E               CALL   printStr   
42E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F5   E1                     POP   hl   
42F6   E5                     PUSH   hl   
42F7   E5                     PUSH   hl   
42F8   CD 8A 0F               CALL   run   
42FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430A   76                     HALT      
430B                EXPECTM_3202S145:      
430B   E1                     POP   HL   
430C                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
430C   31 00 4B               LD   SP,STACK   
430F   CD BC 0E               CALL   coldInit   
4312   CD 4C 49               CALL   execStr   
4315   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
431C   E1                     POP   HL   
431D   E5                     PUSH   HL   
431E   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4321   B7                     OR   A   
4322   ED 52                  SBC   HL,DE   
4324   7D                     LD   A,L   
4325   B4                     OR   H   
4326   CA 81 43               JP   Z,expectM_3203S146   
4329   CD 88 0E               CALL   printStr   
432C   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
4339   CD 88 0E               CALL   printStr   
433C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
434B   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
434E   E5                     PUSH   hl   
434F   E5                     PUSH   hl   
4350   CD 8A 0F               CALL   run   
4353   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
435B   CD 88 0E               CALL   printStr   
435E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
436B   E1                     POP   hl   
436C   E5                     PUSH   hl   
436D   E5                     PUSH   hl   
436E   CD 8A 0F               CALL   run   
4371   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4380   76                     HALT      
4381                EXPECTM_3203S146:      
4381   E1                     POP   HL   
4382                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
4382   31 00 4B               LD   SP,STACK   
4385   CD BC 0E               CALL   coldInit   
4388   CD 4C 49               CALL   execStr   
438B   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
4392   E1                     POP   HL   
4393   E5                     PUSH   HL   
4394   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
4397   B7                     OR   A   
4398   ED 52                  SBC   HL,DE   
439A   7D                     LD   A,L   
439B   B4                     OR   H   
439C   CA F7 43               JP   Z,expectM_3204S147   
439F   CD 88 0E               CALL   printStr   
43A2   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
43AF   CD 88 0E               CALL   printStr   
43B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C1   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
43C4   E5                     PUSH   hl   
43C5   E5                     PUSH   hl   
43C6   CD 8A 0F               CALL   run   
43C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43D1   CD 88 0E               CALL   printStr   
43D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E1   E1                     POP   hl   
43E2   E5                     PUSH   hl   
43E3   E5                     PUSH   hl   
43E4   CD 8A 0F               CALL   run   
43E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43F6   76                     HALT      
43F7                EXPECTM_3204S147:      
43F7   E1                     POP   HL   
43F8                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
43F8   31 00 4B               LD   SP,STACK   
43FB   CD BC 0E               CALL   coldInit   
43FE   CD 4C 49               CALL   execStr   
4401   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
4408   E1                     POP   HL   
4409   E5                     PUSH   HL   
440A   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
440D   B7                     OR   A   
440E   ED 52                  SBC   HL,DE   
4410   7D                     LD   A,L   
4411   B4                     OR   H   
4412   CA 6D 44               JP   Z,expectM_3205S148   
4415   CD 88 0E               CALL   printStr   
4418   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
4425   CD 88 0E               CALL   printStr   
4428   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4437   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
443A   E5                     PUSH   hl   
443B   E5                     PUSH   hl   
443C   CD 8A 0F               CALL   run   
443F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4447   CD 88 0E               CALL   printStr   
444A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4457   E1                     POP   hl   
4458   E5                     PUSH   hl   
4459   E5                     PUSH   hl   
445A   CD 8A 0F               CALL   run   
445D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
446C   76                     HALT      
446D                EXPECTM_3205S148:      
446D   E1                     POP   HL   
446E                          ;*Macro unroll:  test "~A /ad", VARS
446E   31 00 4B               LD   SP,STACK   
4471   CD BC 0E               CALL   coldInit   
4474   CD 4C 49               CALL   execStr   
4477   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
447E   E1                     POP   HL   
447F   E5                     PUSH   HL   
4480   11 00 4D               LD   DE,VARS   
4483   B7                     OR   A   
4484   ED 52                  SBC   HL,DE   
4486   7D                     LD   A,L   
4487   B4                     OR   H   
4488   CA E3 44               JP   Z,expectM_3206S149   
448B   CD 88 0E               CALL   printStr   
448E   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
449B   CD 88 0E               CALL   printStr   
449E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44AD   21 00 4D               LD   hl,VARS   
44B0   E5                     PUSH   hl   
44B1   E5                     PUSH   hl   
44B2   CD 8A 0F               CALL   run   
44B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44BD   CD 88 0E               CALL   printStr   
44C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44CD   E1                     POP   hl   
44CE   E5                     PUSH   hl   
44CF   E5                     PUSH   hl   
44D0   CD 8A 0F               CALL   run   
44D3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E2   76                     HALT      
44E3                EXPECTM_3206S149:      
44E3   E1                     POP   HL   
44E4                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
44E4   31 00 4B               LD   SP,STACK   
44E7   CD BC 0E               CALL   coldInit   
44EA   CD 4C 49               CALL   execStr   
44ED   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
44FA   E1                     POP   HL   
44FB   E5                     PUSH   HL   
44FC   11 01 00               LD   DE,1   
44FF   B7                     OR   A   
4500   ED 52                  SBC   HL,DE   
4502   7D                     LD   A,L   
4503   B4                     OR   H   
4504   CA 65 45               JP   Z,expectM_3207S150   
4507   CD 88 0E               CALL   printStr   
450A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
451D   CD 88 0E               CALL   printStr   
4520   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
452F   21 01 00               LD   hl,1   
4532   E5                     PUSH   hl   
4533   E5                     PUSH   hl   
4534   CD 8A 0F               CALL   run   
4537   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
453F   CD 88 0E               CALL   printStr   
4542   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
454F   E1                     POP   hl   
4550   E5                     PUSH   hl   
4551   E5                     PUSH   hl   
4552   CD 8A 0F               CALL   run   
4555   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4564   76                     HALT      
4565                EXPECTM_3207S150:      
4565   E1                     POP   HL   
4566                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4566   31 00 4B               LD   SP,STACK   
4569   CD BC 0E               CALL   coldInit   
456C   CD 4C 49               CALL   execStr   
456F   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4583   E1                     POP   HL   
4584   E5                     PUSH   HL   
4585   11 03 00               LD   DE,3   
4588   B7                     OR   A   
4589   ED 52                  SBC   HL,DE   
458B   7D                     LD   A,L   
458C   B4                     OR   H   
458D   CA F5 45               JP   Z,expectM_3208S151   
4590   CD 88 0E               CALL   printStr   
4593   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
45AD   CD 88 0E               CALL   printStr   
45B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45BF   21 03 00               LD   hl,3   
45C2   E5                     PUSH   hl   
45C3   E5                     PUSH   hl   
45C4   CD 8A 0F               CALL   run   
45C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45CF   CD 88 0E               CALL   printStr   
45D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45DF   E1                     POP   hl   
45E0   E5                     PUSH   hl   
45E1   E5                     PUSH   hl   
45E2   CD 8A 0F               CALL   run   
45E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45F4   76                     HALT      
45F5                EXPECTM_3208S151:      
45F5   E1                     POP   HL   
45F6                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
45F6   31 00 4B               LD   SP,STACK   
45F9   CD BC 0E               CALL   coldInit   
45FC   CD 4C 49               CALL   execStr   
45FF   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4616   E1                     POP   HL   
4617   E5                     PUSH   HL   
4618   11 02 00               LD   DE,2   
461B   B7                     OR   A   
461C   ED 52                  SBC   HL,DE   
461E   7D                     LD   A,L   
461F   B4                     OR   H   
4620   CA 8B 46               JP   Z,expectM_3209S152   
4623   CD 88 0E               CALL   printStr   
4626   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4643   CD 88 0E               CALL   printStr   
4646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4655   21 02 00               LD   hl,2   
4658   E5                     PUSH   hl   
4659   E5                     PUSH   hl   
465A   CD 8A 0F               CALL   run   
465D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4665   CD 88 0E               CALL   printStr   
4668   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4675   E1                     POP   hl   
4676   E5                     PUSH   hl   
4677   E5                     PUSH   hl   
4678   CD 8A 0F               CALL   run   
467B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
468A   76                     HALT      
468B                EXPECTM_3209S152:      
468B   E1                     POP   HL   
468C                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
468C   31 00 4B               LD   SP,STACK   
468F   CD BC 0E               CALL   coldInit   
4692   CD 4C 49               CALL   execStr   
4695   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
46B8   E1                     POP   HL   
46B9   E5                     PUSH   HL   
46BA   11 01 00               LD   DE,1   
46BD   B7                     OR   A   
46BE   ED 52                  SBC   HL,DE   
46C0   7D                     LD   A,L   
46C1   B4                     OR   H   
46C2   CA 39 47               JP   Z,expectM_3210S153   
46C5   CD 88 0E               CALL   printStr   
46C8   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
46F1   CD 88 0E               CALL   printStr   
46F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4703   21 01 00               LD   hl,1   
4706   E5                     PUSH   hl   
4707   E5                     PUSH   hl   
4708   CD 8A 0F               CALL   run   
470B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4713   CD 88 0E               CALL   printStr   
4716   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4723   E1                     POP   hl   
4724   E5                     PUSH   hl   
4725   E5                     PUSH   hl   
4726   CD 8A 0F               CALL   run   
4729   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4738   76                     HALT      
4739                EXPECTM_3210S153:      
4739   E1                     POP   HL   
473A                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
473A   31 00 4B               LD   SP,STACK   
473D   CD BC 0E               CALL   coldInit   
4740   CD 4C 49               CALL   execStr   
4743   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4766   E1                     POP   HL   
4767   E5                     PUSH   HL   
4768   11 01 00               LD   DE,1   
476B   B7                     OR   A   
476C   ED 52                  SBC   HL,DE   
476E   7D                     LD   A,L   
476F   B4                     OR   H   
4770   CA E7 47               JP   Z,expectM_3211S154   
4773   CD 88 0E               CALL   printStr   
4776   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
479F   CD 88 0E               CALL   printStr   
47A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47B1   21 01 00               LD   hl,1   
47B4   E5                     PUSH   hl   
47B5   E5                     PUSH   hl   
47B6   CD 8A 0F               CALL   run   
47B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47C1   CD 88 0E               CALL   printStr   
47C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D1   E1                     POP   hl   
47D2   E5                     PUSH   hl   
47D3   E5                     PUSH   hl   
47D4   CD 8A 0F               CALL   run   
47D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47E6   76                     HALT      
47E7                EXPECTM_3211S154:      
47E7   E1                     POP   HL   
47E8                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
47E8   31 00 4B               LD   SP,STACK   
47EB   CD BC 0E               CALL   coldInit   
47EE   CD 4C 49               CALL   execStr   
47F1   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4821   E1                     POP   HL   
4822   E5                     PUSH   HL   
4823   11 02 00               LD   DE,2   
4826   B7                     OR   A   
4827   ED 52                  SBC   HL,DE   
4829   7D                     LD   A,L   
482A   B4                     OR   H   
482B   CA AF 48               JP   Z,expectM_3212S155   
482E   CD 88 0E               CALL   printStr   
4831   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4867   CD 88 0E               CALL   printStr   
486A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4879   21 02 00               LD   hl,2   
487C   E5                     PUSH   hl   
487D   E5                     PUSH   hl   
487E   CD 8A 0F               CALL   run   
4881   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4889   CD 88 0E               CALL   printStr   
488C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4899   E1                     POP   hl   
489A   E5                     PUSH   hl   
489B   E5                     PUSH   hl   
489C   CD 8A 0F               CALL   run   
489F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48AE   76                     HALT      
48AF                EXPECTM_3212S155:      
48AF   E1                     POP   HL   
48B0                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
48B0   31 00 4B               LD   SP,STACK   
48B3   CD BC 0E               CALL   coldInit   
48B6   CD 4C 49               CALL   execStr   
48B9   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
48CE   E1                     POP   HL   
48CF   E5                     PUSH   HL   
48D0   11 02 00               LD   DE,2   
48D3   B7                     OR   A   
48D4   ED 52                  SBC   HL,DE   
48D6   7D                     LD   A,L   
48D7   B4                     OR   H   
48D8   CA 41 49               JP   Z,expectM_3213S156   
48DB   CD 88 0E               CALL   printStr   
48DE   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
48F9   CD 88 0E               CALL   printStr   
48FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
490B   21 02 00               LD   hl,2   
490E   E5                     PUSH   hl   
490F   E5                     PUSH   hl   
4910   CD 8A 0F               CALL   run   
4913   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
491B   CD 88 0E               CALL   printStr   
491E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
492B   E1                     POP   hl   
492C   E5                     PUSH   hl   
492D   E5                     PUSH   hl   
492E   CD 8A 0F               CALL   run   
4931   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4940   76                     HALT      
4941                EXPECTM_3213S156:      
4941   E1                     POP   HL   
4942                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4942                             ; 
4942   CD 88 0E               CALL   printStr   
4945   44 6F 6E 65 21 00      .CSTR   "Done!"   
494B   76                     HALT      
494C                             ; executes a null teminated string (null executes exit_)
494C                             ; the string should be immedaitely following the call
494C                EXECSTR:      ; create a root stack frame
494C   C1                     POP   bc   ; bc = code*
494D   0B                     DEC   bc   ; dec to prepare for next routine
494E   11 00 00               LD   de,0   
4951   D5                     PUSH   de   ; push fake IP
4952   D5                     PUSH   de   ; push null arg_list*
4953   D5                     PUSH   de   ; push null first_arg*
4954   D5                     PUSH   de   ; push fake BP
4955   DD E9                  JP   (ix)   
4957                STKSIZE:   EQU   $100   ; Stack size
4957                TIBSIZE:   EQU   $100   ; 256 bytes
4957                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4957                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VSTRPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                VRECUR:   DS   2   ; 
4DF4                VDEFINE:   DS   2   ; 
4DF6                VSTRMODE:   DS   2   ; 
4DF8                             ; uninitialised sys variables (preserved)
4DF8                VPOINTER:   DS   2   ; 
4DFA                VREMAIN:   DS   2   ; 
4DFC                VSAVEDIP:   DS   2   ; 
4DFE                VSAVEDSP:   DS   2   ; 
4E00                VSAVEDNEXT:   DS   2   ; 
4E02                VSAVEDBP:   DS   2   ; 
4E04                             ; uninitialised sys variables (unpreserved)
4E04                VTEMP1:   DS   2   ; 
4E06                VTEMP2:   DS   2   ; 
4E08                VTEMP3:   DS   2   ; 
4E0A                VLASTDEF:   DS   2   ; 
4E0C                TBPTR:    DS   2   ; reserved for tests
4E0E                TITLEBUF:   DS   20   
4E22                HEAP:        
4E22                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
4E22                             ; db "{"
4E22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4E22                             ; db        "%L1#!/qt"                ; if not active don't send
4E22                             ; db        "%L0# %a="                ; store current index in A
4E22                             ; db        "%s %L0# +="              ; inc value of index by step
4E22                             ; db        "1%t!=/qt"                ; break if type != 0
4E22                             ; db        "%a %e <"                 ; ifte: in range?
4E22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
4E22                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
4E22                             ; db      "} 0 %k^"                   ; init sink
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC map, 0, "sf"                   ; map
4E22                             ; db "{"
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4E22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4E22                             ; db        "?? %t %k^"               ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; ; /ft filter
4E22                             ; ; src pred -- src1
4E22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\kt{"                       ; return talkback to receive data
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "["
4E22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4E22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4E22                             ; db          "{/t}"                  ; case 2: return true
4E22                             ; db        "]%t#^"                   ; select on %t
4E22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4E22                             ; db        "??"
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC forEach, 1, "spT"
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4E22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4E22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4E22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4E22                             ; db      "??"                      ; ifte:
4E22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4E22                             ; db    "} 0 %s^"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4E22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4E22                             ; db    "[%i]%A="
4E22                             ; db    "\\kt{"                         ; return talkback to receive data
4E22                             ; db      "\\dt{"                         ; call source with tb
4E22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4E22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4E22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2451 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049D DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
STRING2:            04A0 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
STRING3:            04A6 DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
PERCENT:            04BC DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04BC DEFINED AT LINE 810 IN MAIN.asm
ARG0:               04D8 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
ARG0A:              04E1 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ARG1:               04E6 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
ARG1A:              04EE DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTARRAY_:          050F DEFINED AT LINE 870 IN MAIN.asm
DOTNUMBER_:         0512 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
DOTDEC:             051D DEFINED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
DOTDEC0:            0532 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
DOTDEC1:            0542 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
DOTDEC2:            0562 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
DOTDEC3:            0564 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
DOTDEC4:            0574 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
DOTDEC5:            0575 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
DOTHEX:             057B DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
DOTHEX1:            0597 DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
DOTHEX2:            05A0 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
DOTSTRING_:         05AB DEFINED AT LINE 987 IN MAIN.asm
DOTSTRING0:         05B2 DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
DOTSTRING1:         05B5 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
DOTCHAR_:           05C0 DEFINED AT LINE 1004 IN MAIN.asm
DOTXCHARS_:         05C5 DEFINED AT LINE 1010 IN MAIN.asm
DOTXCHARS0:         05C6 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
DOTXCHARS1:         05CF DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
DOTXCHARS2:         05D4 DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1037 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1073 IN MAIN.asm
COMMAND_B_:         0635 DEFINED AT LINE 1086 IN MAIN.asm
COMMAND_I_:         0640 DEFINED AT LINE 1096 IN MAIN.asm
COMMAND_P_:         0649 DEFINED AT LINE 1104 IN MAIN.asm
COMMAND_Q_:         0650 DEFINED AT LINE 1110 IN MAIN.asm
ABSOLUTE_:          0659 DEFINED AT LINE 1120 IN MAIN.asm
BREAK_:             0666 DEFINED AT LINE 1137 IN MAIN.asm
BREAK:              0666 DEFINED AT LINE 1138 IN MAIN.asm
BREAK1:             066D DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
INPUT_:             0680 DEFINED AT LINE 1158 IN MAIN.asm
COMMAND_M_:         068B DEFINED AT LINE 1169 IN MAIN.asm
COMMAND_R_:         068E DEFINED AT LINE 1173 IN MAIN.asm
COMMAND_S_:         0691 DEFINED AT LINE 1177 IN MAIN.asm
COMMAND_V_:         0694 DEFINED AT LINE 1181 IN MAIN.asm
COMMAND_NOP_:       0697 DEFINED AT LINE 1185 IN MAIN.asm
DECIMAL_:           0699 DEFINED AT LINE 1189 IN MAIN.asm
DECIMAL1:           069C DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
DIV_:               06A1 DEFINED AT LINE 1196 IN MAIN.asm
ERROR1_:            06A5 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
HEXADECIMAL_:       06AB DEFINED AT LINE 1206 IN MAIN.asm
TRUE_:              06B1 DEFINED AT LINE 1211 IN MAIN.asm
WORDS_:             06B4 DEFINED AT LINE 1215 IN MAIN.asm
ADDROF_:            06B7 DEFINED AT LINE 1219 IN MAIN.asm
ARRAYITER_:         06BA DEFINED AT LINE 1223 IN MAIN.asm
COLDSTART_:         06BD DEFINED AT LINE 1228 IN MAIN.asm
WORDS:              06C0 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
COMMENT:            06C6 DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
BYTES_:             06CF DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
BYTES1:             06D2 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
QUIT_:              06D7 DEFINED AT LINE 1258 IN MAIN.asm
QUIT1:              06DE DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
ARRAYSIZE_:         06E1 DEFINED AT LINE 1270 IN MAIN.asm
XOR_:               06E9 DEFINED AT LINE 1280 IN MAIN.asm
XOR1:               06EA DEFINED AT LINE 1282 IN MAIN.asm
KEY_:               06F4 DEFINED AT LINE 1297 IN MAIN.asm
KEY:                06F4 DEFINED AT LINE 1298 IN MAIN.asm
OUTPUT_:            06FD DEFINED AT LINE 1307 IN MAIN.asm
COMMAND_F_:         06FF DEFINED AT LINE 1311 IN MAIN.asm
OUTPUT:             0701 DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
COMMAND_F:          070A DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
COMMAND_M:          0721 DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
COMMAND_R:          072A DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
COMMAND_V:          0737 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
COMMAND_S:          0746 DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
FOREACH_:           074F DEFINED AT LINE 1389 IN MAIN.asm
FILTER_:            0752 DEFINED AT LINE 1392 IN MAIN.asm
FOLD_:              0755 DEFINED AT LINE 1395 IN MAIN.asm
FUNCSRC_:           0758 DEFINED AT LINE 1398 IN MAIN.asm
F1_:                075B DEFINED AT LINE 1401 IN MAIN.asm
F2_:                075E DEFINED AT LINE 1404 IN MAIN.asm
F3_:                0761 DEFINED AT LINE 1407 IN MAIN.asm
F4_:                0764 DEFINED AT LINE 1410 IN MAIN.asm
FALSE_:             0767 DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
MAP_:               076A DEFINED AT LINE 1416 IN MAIN.asm
RECUR_:             076D DEFINED AT LINE 1419 IN MAIN.asm
REMAIN_:            0773 DEFINED AT LINE 1424 IN MAIN.asm
STRINGITER_:        0779 DEFINED AT LINE 1429 IN MAIN.asm
RANGESRC_:          077C DEFINED AT LINE 1432 IN MAIN.asm
CONSTHEAPSTART_:    077F DEFINED AT LINE 1435 IN MAIN.asm
CONSTTIBSTART_:     0784 DEFINED AT LINE 1439 IN MAIN.asm
VARHEAPPTR_:        0789 DEFINED AT LINE 1443 IN MAIN.asm
VARTIBPTR_:         0792 DEFINED AT LINE 1448 IN MAIN.asm
VARIABLE:           079B DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
CONSTANT:           079E DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
RANGESRC:           07A1 DEFINED AT LINE 32
                    > USED AT LINE 1433 IN MAIN.asm
RANGESRCM_1900S1468: 07B0 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          081D DEFINED AT LINE 32
                    > USED AT LINE 1224 IN MAIN.asm
ARRAYITERM_1919S1488: 082A DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         089E DEFINED AT LINE 32
                    > USED AT LINE 1430 IN MAIN.asm
STRINGITERM_1938S1508: 08AB DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0924 DEFINED AT LINE 32
                    > USED AT LINE 1417 IN MAIN.asm
MAPM_1958S1530:     0931 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0966 DEFINED AT LINE 32
                    > USED AT LINE 1393 IN MAIN.asm
FILTERM_1972S1545:  0974 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09C4 DEFINED AT LINE 32
                    > USED AT LINE 1396 IN MAIN.asm
FOLDM_1991S1565:    09D3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A16 DEFINED AT LINE 32
                    > USED AT LINE 1390 IN MAIN.asm
FOREACHM_2005S1580: 0A24 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A62 DEFINED AT LINE 32
                    > USED AT LINE 1399 IN MAIN.asm
FUNCSRCM_2019S1595: 0A6E DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0A9B DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
DOTARRAYM_2029S1606: 0AA9 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0AE3 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0AE3 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
DOTNEXT:            0AE5 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
DOTNEXT1:           0AED DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
DOTNEXT2:           0AFA DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
DOTNEXT3:           0B00 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
STRINGMODEENTER:    0B0C DEFINED AT LINE 1648 IN MAIN.asm
STRINGMODEEXIT:     0B17 DEFINED AT LINE 1654 IN MAIN.asm
STRINGMODEEXIT1:    0B2B DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
ADDROF:             0B30 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
ADDROF1:            0B44 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
ADDROF2:            0B4F DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
RBRACK:             0B51 DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B51 DEFINED AT LINE 1697 IN MAIN.asm
ARRAYEND1:          0B6D DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
ARRAYEND2:          0B7D DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
ARRAYEND3:          0B82 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
RBRACE:             0BA4 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BA4 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
BLOCKEND1:          0BD6 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
BLOCKEND2:          0BE2 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
BLOCKEND3:          0BF4 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
BLOCKEND4:          0C08 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
CARET:              0C11 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C11 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C12 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
GO2:                0C18 DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
GOBLOCK:            0C23 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
GOBLOCK2:           0C48 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
GOBLOCK3:           0C52 DEFINED AT LINE 1851 IN MAIN.asm
GOFUNC:             0C56 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
GOFUNC1:            0C6F DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
GOFUNC2:            0C75 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
GOFUNC3:            0C80 DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
GOFUNC4:            0C98 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
GOFUNC5:            0C9B DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
GOFUNC6:            0C9E DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
GOFUNC7:            0CA1 DEFINED AT LINE 1914 IN MAIN.asm
GOFUNC8:            0CA5 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
PARSEARGS:          0CB0 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CBA DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PARSEARGS1A:        0CC2 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
PARSEARGS2:         0CCA DEFINED AT LINE 1954 IN MAIN.asm
PARSEARGS3:         0CD2 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
PARSEARGS4:         0CD5 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
PARSEARGS5:         0CDB DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PARSEBLOCK:         0CE9 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0CED DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
PARSEBLOCK2:        0D19 DEFINED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
PARSEBLOCK3:        0D1C DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
PARSEBLOCK4:        0D24 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
PARSEBLOCK5:        0D27 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
PARSEBLOCK6:        0D53 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CREATEFUNC:         0D57 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D76 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
CREATEFUNC1:        0D8E DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
CREATEFUNC2:        0DA1 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
CREATEFUNC2A:       0DC0 DEFINED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
CREATEFUNC3:        0DCF DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
CREATEFUNC4:        0DDA DEFINED AT LINE 2151 IN MAIN.asm
CREATEFUNC5:        0DDB DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
COMMANDTABLE:       0DFC DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
COMMANDTABLE1:      0E06 DEFINED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
COMMANDTABLE2:      0E0B DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
JUMPTABLE:          0E10 DEFINED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
JUMPTABLE0:         0E12 DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
JUMPTABLE1:         0E1E DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
JUMPTABLE2:         0E21 DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
XJUMPTABLE:         0E24 DEFINED AT LINE 2252 IN MAIN.asm
XJUMPTABLE0:        0E26 DEFINED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
XJUMPTABLE1:        0E32 DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
XJUMPTABLE2:        0E3A DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
PRTSTR0:            0E3D DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
PRTSTR:             0E41 DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
NESTING:            0E46 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
NESTING0:           0E50 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
NESTING1A:          0E57 DEFINED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
NESTING1:           0E5A DEFINED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
NESTING2:           0E69 DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
NESTING3:           0E6B DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
NESTING4:           0E76 DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
PROMPT:             0E78 DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
CRLF:               0E81 DEFINED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2502 IN MAIN.asm
PRINTSTR:           0E88 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 161
INIT:               0E8F DEFINED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
INIT1:              0E97 DEFINED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
WARMINIT:           0E9F DEFINED AT LINE 2366 IN MAIN.asm
COLDBOOT0:          0EB2 DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
COLDINIT:           0EBC DEFINED AT LINE 2379 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0ECD DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
COLDSTART:          0EDA DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
START:              0EE3 DEFINED AT LINE 2401 IN MAIN.asm
START1:             0EE9 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
INTERPRET:          0EEF DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
                    > USED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2570 IN MAIN.asm
                    > USED AT LINE 2575 IN MAIN.asm
INTERPRET2:         0EFB DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
INTERPRET3:         0F03 DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
INTERPRET4:         0F0E DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
INTERPRET5:         0F13 DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
INTERPRET5A:        0F31 DEFINED AT LINE 2477 IN MAIN.asm
INTERPRET6:         0F33 DEFINED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
INTERPRET7:         0F41 DEFINED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
INTERPRET8:         0F54 DEFINED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
NEXT:               0F6F DEFINED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
NEXT1:              0F7F DEFINED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
EXIT:               0F86 DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
RUN:                0F8A DEFINED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 2573 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0F8E DEFINED AT LINE 2546 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
BACKSPACE_:         0FA2 DEFINED AT LINE 2554 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
EDIT_:              0FB2 DEFINED AT LINE 2564 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
REEDIT_:            0FCA DEFINED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 2456 IN MAIN.asm
PRINTSTACK_:        0FCD DEFINED AT LINE 2572 IN MAIN.asm
F1:                 0FD7 DEFINED AT LINE 32
                    > USED AT LINE 1402 IN MAIN.asm
F1M_3077S12:        0FE5 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 101F DEFINED AT LINE 32
                    > USED AT LINE 1405 IN MAIN.asm
F2M_3082S18:        102A DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 102B DEFINED AT LINE 32
                    > USED AT LINE 1408 IN MAIN.asm
F3M_3084S21:        1036 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1037 DEFINED AT LINE 32
                    > USED AT LINE 1411 IN MAIN.asm
F4M_3086S24:        1042 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 28
                    > USED AT LINE 8
EXPECTM_3103S46:    116D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S47:    11DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S48:    1247 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S49:    12B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S50:    131F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S51:    138B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S52:    13F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S53:    1469 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S54:    14D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S55:    1545 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S56:    15B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S57:    1623 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S58:    1693 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S59:    1709 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S60:    177F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S61:    17F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S62:    186B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S63:    18E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S64:    1961 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S65:    19D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S66:    1A51 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S67:    1AC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S68:    1B3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S69:    1BB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S70:    1C2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S71:    1CA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S72:    1D15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S73:    1D8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S74:    1E11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S75:    1E85 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S76:    1F01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S77:    1F75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S78:    1FF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S79:    2079 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S80:    20FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S81:    217D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S82:    21F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S83:    226D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S84:    22E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S85:    2359 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S86:    23CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S87:    2441 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S88:    24B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S89:    2529 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S90:    259D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S91:    2611 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S92:    2685 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S93:    26F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S94:    276F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S95:    27E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S96:    285B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S97:    28D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S98:    294B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S99:    29BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S100:   2A2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S101:   2AA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S102:   2B25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S103:   2BA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S104:   2C25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S105:   2CB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S106:   2D3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S107:   2DB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S108:   2E27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S109:   2EA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S110:   2F23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S111:   2F9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S112:   3025 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S113:   30AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S114:   313B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S115:   31CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S116:   3251 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S117:   32DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S118:   3367 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S119:   33F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S120:   3481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S121:   351B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S122:   35A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S123:   3639 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S124:   36D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S125:   376B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S126:   380F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S127:   38B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S128:   3937 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S129:   39C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S130:   3A47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S131:   3AD1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S132:   3B61 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S133:   3BFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S134:   3CA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S135:   3D4B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S136:   3DE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S137:   3E81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S138:   3F35 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S139:   3FF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S140:   4083 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S141:   4113 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S142:   4191 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S143:   420F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S144:   428D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S145:   430B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S146:   4381 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S147:   43F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S148:   446D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S149:   44E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S150:   4565 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S151:   45F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S152:   468B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S153:   4739 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S154:   47E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S155:   48AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S156:   4941 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            494C DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
BUF:                4C00 DEFINED AT LINE 13 IN ram.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2381 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
VSTRPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2393 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
VRECUR:             4DF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
VDEFINE:            4DF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           4DF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
VPOINTER:           4DF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
VREMAIN:            4DFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
VSAVEDIP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
VSAVEDSP:           4DFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
VSAVEDNEXT:         4E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
VSAVEDBP:           4E02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
VTEMP1:             4E04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
VTEMP2:             4E06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
VTEMP3:             4E08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
VLASTDEF:           4E0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4E0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4E0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
HEAP:               4E22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
