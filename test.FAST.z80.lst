0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4C               LD   (RST08),HL   
0094   22 D2 4C               LD   (RST10),HL   
0097   22 D4 4C               LD   (RST18),HL   
009A   22 D6 4C               LD   (RST20),HL   
009D   22 D8 4C               LD   (RST28),HL   
00A0   22 DA 4C               LD   (RST30),HL   
00A3   22 DE 4C               LD   (INTVEC),HL   
00A6   22 E0 4C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   44 0C                  DW   next   ; nNext
018A   1E 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 74 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AE 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3D 05               JP   rbrace   
031E                TICK_:       
031E   C3 99 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9E 07               JP   semicolon   
0324                DOT_:        
0324   C3 06 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 90 07               JP   underscore   
032A                COLON_:      
032A   C3 9D 04               JP   colon   
032D                UPCASE_:      
032D   C3 14 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 19 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2B 07               JP   question   
0336                STAR_:       
0336   C3 44 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 60 07               JP   num   
0341                HASH_:       
0341   C3 F7 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 52 06               JP   caret   
034A                COMMA_:      
034A   C3 B0 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DD 07               JP   dblquote   
0350                MINUS_:      
0350   C3 05 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8C 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 31 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA CA 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA BA 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 39 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3E 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BF 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 96 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8E 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 4C            LD   de,(vPointer)   
039D   21 F2 4C               LD   hl,vPointer   
03A0   C3 75 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 4C               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C   18 15                  JR   arrayEnd3   
043E                ARRAYEND1:      
043E   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0441   77                     LD   (hl),a   ; write lsb of array item
0442   23                     INC   hl   ; move to msb of array item
0443   3A E6 4C               LD   a,(vDataWidth)   ; vDataWidth=1?
0446   3D                     DEC   a   
0447   28 05                  JR   z,arrayEnd2   
0449   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044C   77                     LD   (hl),a   ; write msb of array item
044D   23                     INC   hl   ; move to next word in array
044E                ARRAYEND2:      
044E   FD 2B                  DEC   iy   ; move to next word on stack
0450   FD 2B                  DEC   iy   
0452   0B                     DEC   bc   ; dec items count
0453                ARRAYEND3:      
0453   79                     LD   a,c   ; if not zero loop
0454   B0                     OR   b   
0455   20 E7                  JR   nz,arrayEnd1   
0457   EB                     EX   de,hl   ; de = end of array, hl = BP
0458   F9                     LD   sp,hl   ; sp = BP
0459   E1                     POP   hl   ; de = end of array, hl = old BP
045A   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045B   FD 62                  LD   iyh,d   
045D   FD 6B                  LD   iyl,e   
045F   D1                     POP   de   ; pop arg_list (discard)
0460   D1                     POP   de   ; pop first_arg* (discard)
0461   D1                     POP   de   ; pop IP (discard)
0462   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = array[-4]
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   13                     INC   de   
0469   13                     INC   de   
046A   D5                     PUSH   de   ; return array[0]
046B   22 F0 4C               LD   (vHeapPtr),hl   ; move heap* to end of array
046E   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
0472   DD E9                  JP   (ix)   
0474                             ; index of an array, based on vDataWidth
0474                             ; array num -- value    ; also sets vPointer to address
0474                ARRINDEX:      
0474   E1                     POP   hl   ; hl = index
0475   D1                     POP   de   ; de = array
0476   3A E6 4C               LD   a,(vDataWidth)   ; a = data width
0479   3D                     DEC   a   
047A   28 01                  JR   z,arrIndex1   
047C                ARRINDEX0:      
047C   29                     ADD   hl,hl   ; if data width = 2 then double
047D                ARRINDEX1:      
047D   19                     ADD   hl,de   ; add addr
047E   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0481   16 00                  LD   d,0   
0483   5E                     LD   e,(hl)   
0484   B7                     OR   a   ; check data width again
0485   28 02                  JR   z,arrIndex2   
0487   23                     INC   hl   
0488   56                     LD   d,(hl)   
0489                ARRINDEX2:      
0489   D5                     PUSH   de   
048A   DD E9                  JP   (ix)   
048C                             ; value _oldValue --            ; uses address in vPointer
048C                ASSIGN:      
048C   E1                     POP   hl   ; discard last accessed value
048D   E1                     POP   hl   ; hl = new value
048E                ASSIGN0:      
048E   EB                     EX   de,hl   ; de = new value
048F                ASSIGNX:      
048F   2A F2 4C               LD   hl,(vPointer)   
0492   73                     LD   (hl),e   
0493   3A E6 4C               LD   a,(vDataWidth)   
0496   3D                     DEC   a   ; is it byte?
0497   28 02                  JR   z,assign1   
0499   23                     INC   hl   
049A   72                     LD   (hl),d   
049B                ASSIGN1:      
049B   DD E9                  JP   (ix)   
049D                             ; arg_list - parses input (ab:c)
049D                             ; names after the : represent uninitialised locals
049D                             ; return values are the state of the stack after the block ends
049D                COLON:       
049D                ARGLIST:      
049D   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A0   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
04A3   23                     INC   hl   ; skip length field to start
04A4   23                     INC   hl   
04A5   E5                     PUSH   hl   ; save start of arg_list
04A6   03                     INC   bc   ; point to next char
04A7                ARGLIST1:      
04A7   0A                     LD   a,(bc)   
04A8   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AA   20 03                  JR   nz,arglist1a   
04AC   14                     INC   d   ; non zero value local count acts as flag
04AD   18 10                  JR   arglist3   
04AF                ARGLIST1A:      
04AF   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B1   38 0F                  JR   c,arglist4   
04B3   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B5   30 0B                  JR   nc,arglist4   
04B7                ARGLIST2:      
04B7   77                     LD   (hl),a   
04B8   23                     INC   hl   
04B9   1C                     INC   e   ; increase arg count
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist3   
04BE   14                     INC   d   ; if d > 0 increase local count
04BF                ARGLIST3:      
04BF   03                     INC   bc   ; point to next char
04C0   18 E5                  JR   arglist1   
04C2                ARGLIST4:      
04C2   0B                     DEC   bc   
04C3   AF                     XOR   a   
04C4   B2                     OR   d   
04C5   28 01                  JR   z,arglist5   
04C7   15                     DEC   d   ; remove initial inc
04C8                ARGLIST5:      
04C8   23                     INC   hl   
04C9   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CC   E1                     POP   hl   ; hl = start of arg_list
04CD   E5                     PUSH   hl   ; return start of arg_list
04CE   2B                     DEC   hl   ; write number of locals at start - 1
04CF   72                     LD   (hl),d   
04D0   2B                     DEC   hl   ; write number of args + locals at start - 2
04D1   73                     LD   (hl),e   
04D2   DD E9                  JP   (ix)   
04D4                LBRACE:      
04D4                BLOCKSTART:      
04D4   C5                     PUSH   bc   ; return pointer to first { of block
04D5   03                     INC   bc   
04D6   16 01                  LD   d,1   ; nesting: count first parenthesis
04D8                BLOCKSTART1:      ; Skip to end of definition
04D8   0A                     LD   a,(bc)   ; Get the next character
04D9   03                     INC   bc   ; Point to next character
04DA   FE 21                  CP   " " + 1   ; ignore whitespace
04DC   38 FA                  JR   c,blockStart1   
04DE   FE 29                  CP   ")"   
04E0   28 2D                  JR   z,blockStart4   
04E2   FE 7D                  CP   "}"   
04E4   28 29                  JR   z,blockStart4   
04E6   FE 5D                  CP   "]"   
04E8   28 25                  JR   z,blockStart4   
04EA   FE 28                  CP   "("   
04EC   28 16                  JR   z,blockStart2   
04EE   FE 7B                  CP   "{"   
04F0   28 12                  JR   z,blockStart2   
04F2   FE 5B                  CP   "["   
04F4   28 0E                  JR   z,blockStart2   
04F6   FE 27                  CP   "'"   
04F8   28 0D                  JR   z,blockStart3   
04FA   FE 60                  CP   "`"   
04FC   28 09                  JR   z,blockStart3   
04FE   FE 22                  CP   DQUOTE   
0500   28 05                  JR   z,blockStart3   
0502   18 D4                  JR   blockStart1   
0504                BLOCKSTART2:      
0504   14                     INC   d   
0505   18 D1                  JR   blockStart1   
0507                BLOCKSTART3:      
0507   3E 80                  LD   a,$80   
0509   AA                     XOR   d   
050A   57                     LD   d,a   
050B   20 CB                  JR   nz,blockStart1   
050D   18 03                  JR   blockStart5   
050F                BLOCKSTART4:      
050F   15                     DEC   d   
0510   20 C6                  JR   nz,blockStart1   ; get the next element
0512                BLOCKSTART5:      
0512   60 69                  LD   hl,bc   ; hl = IP
0514   11 1E 4D               LD   de,HEAP   ; is IP pointing to object in heap
0517   B7                     OR   a   ; IP - HEAP
0518   ED 52                  SBC   hl,de   
051A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051C   28 1C                  JR   z,blockStart6   
051E   60 69                  LD   hl,bc   ; hl = IP
0520   D1                     POP   de   ; de = block*
0521   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0525   B7                     OR   a   ; bc = size
0526   ED 52                  SBC   hl,de   
0528   44 4D                  LD   bc,hl   
052A   EB                     EX   de,hl   ; hl = block* de = heap*
052B   ED 5B F0 4C            LD   de,(vHeapPtr)   
052F   D5                     PUSH   de   ; return hblock*
0530   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0532   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += size
0536   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
053A                BLOCKSTART6:      
053A   0B                     DEC   bc   ; balanced, exit
053B   DD E9                  JP   (ix)   
053D                RBRACE:      
053D                BLOCKEND:      
053D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0540   FD 56 01               LD   d,(iy+1)   
0543   ED 53 00 4D            LD   (vTemp1),de   
0547   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
054A   FD 56 07               LD   d,(iy+7)   
054D   ED 53 02 4D            LD   (vTemp2),de   
0551   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0554   FD 56 03               LD   d,(iy+3)   
0557   EB                     EX   de,hl   
0558   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
055B   FD 56 01               LD   d,(iy+1)   
055E   13                     INC   de   ; for carry flag <=
055F   B7                     OR   a   
0560   ED 52                  SBC   hl,de   
0562   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0564   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0566   FD 5D                  LD   e,iyl   
0568   21 08 00               LD   hl,8   
056B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056D   18 0C                  JR   blockEnd2   
056F                BLOCKEND1:      ; same scope
056F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0572   FD 56 03               LD   d,(iy+3)   
0575   EB                     EX   de,hl   
0576   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0578   FD 5D                  LD   e,iyl   
057A   EB                     EX   de,hl   
057B                BLOCKEND2:      
057B   44 4D                  LD   bc,hl   ; bc = hl = BP
057D   B7                     OR   a   ; hl = BP - SP = count
057E   ED 72                  SBC   hl,sp   
0580   7D                     LD   a,l   
0581   B4                     OR   h   
0582   28 09                  JR   z,blockEnd3   
0584   C5                     PUSH   bc   ; bc = count, hl = BP
0585   44 4D                  LD   bc,hl   
0587   E1                     POP   hl   
0588   2B                     DEC   hl   ; hl = BP-1
0589   1B                     DEC   de   ; de = args*-1
058A   ED B8                  LDDR      
058C   13                     INC   de   
058D                BLOCKEND3:      
058D   EB                     EX   de,hl   ; sp = de = new tos*
058E   F9                     LD   sp,hl   
058F   ED 4B 02 4D            LD   bc,(vTemp2)   
0593   FD 2A 00 4D            LD   iy,(vTemp1)   
0597   DD E9                  JP   (ix)   
0599                TICK:        
0599                CHAR:        
0599   21 00 00               LD   hl,0   ; if "" is empty or null
059C                CHAR1:       
059C   03                     INC   bc   ; point to next char
059D   0A                     LD   a,(bc)   
059E   FE 27                  CP   "'"   ; ' is the terminator
05A0   28 09                  JR   z,char3   
05A2   FE 5C                  CP   $5c   ; \ is the escape
05A4   20 02                  JR   nz,char2   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8                CHAR2:       
05A8   6F                     LD   l,a   
05A9   18 F1                  JR   char1   
05AB                CHAR3:       
05AB   E5                     PUSH   hl   
05AC   DD E9                  JP   (ix)   
05AE                BACKSLASH:      
05AE   DD E9                  JP   (ix)   
05B0                             ; , discard stack item
05B0                             ; x y -- x
05B0                COMMA:       
05B0                DISCARD:      
05B0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B2   FD 5D                  LD   e,iyl   
05B4   EB                     EX   de,hl   
05B5   B7                     OR   a   
05B6   ED 72                  SBC   hl,sp   
05B8   CB 7C                  BIT   7,h   
05BA   20 01                  JR   nz,discard1   
05BC   E1                     POP   hl   
05BD                DISCARD1:      
05BD   DD E9                  JP   (ix)   
05BF                SLASH:       
05BF   CD E0 0A               CALL   jumpTable   
05C2   2F                     DB   "/"   
05C3   2B 08                  DW   comment   
05C5   61                     DB   "a"   
05C6   34 08                  DW   command_a   
05C8   62                     DB   "b"   
05C9   6E 08                  DW   command_b   
05CB   63                     DB   "c"   
05CC   7B 0A                  DW   chars   
05CE   64                     DB   "d"   
05CF   83 0A                  DW   decimal   
05D1   66                     DB   "f"   
05D2   4C 06                  DW   false1   
05D4   68                     DB   "h"   
05D5   8B 0A                  DW   hexadecimal   
05D7   69                     DB   "i"   
05D8   B7 09                  DW   command_i   
05DA   6B                     DB   "k"   
05DB   9C 0A                  DW   key   
05DD   6E                     DB   "n"   
05DE   AE 0A                  DW   numbers   
05E0   6F                     DB   "o"   
05E1   A5 0A                  DW   output   
05E3   70                     DB   "p"   
05E4   C3 09                  DW   command_p   
05E6   73                     DB   "s"   
05E7   2C 0A                  DW   size   
05E9   74                     DB   "t"   
05EA   46 06                  DW   true1   
05EC   76                     DB   "v"   
05ED   36 0A                  DW   command_v   
05EF   78                     DB   "x"   
05F0   B7 03                  DW   xor   
05F2   00                     DB   NUL   
05F3   F5 05                  DW   div   
05F5                DIV:         
05F5   D1                     POP   de   
05F6   E1                     POP   hl   
05F7   C5                     PUSH   bc   ; preserve the IP
05F8   44 4D                  LD   bc,hl   
05FA   CD 18 06               CALL   divide   
05FD   EB                     EX   de,hl   
05FE   ED 53 F4 4C            LD   (vRemain),de   
0602   C1                     POP   bc   
0603   C3 96 03               JP   add3   
0606                DOT:         
0606   CD E0 0A               CALL   jumpTable   
0609   61                     DB   "a"   
060A   89 08                  DW   bufferArray   
060C   63                     DB   "c"   
060D   96 09                  DW   bufferChar   
060F   73                     DB   "s"   
0610   7C 09                  DW   bufferString   
0612   78                     DB   "x"   
0613   9B 09                  DW   bufferXChars   
0615   00                     DB   NUL   
0616   BD 08                  DW   bufferNumber   
0618                             ; division subroutine.
0618                             ; bc: divisor, de: dividend, hl: remainder
0618                DIVIDE:      
0618   21 00 00               LD   hl,0   ; zero the remainder
061B   3E 10                  LD   a,16   ; loop counter
061D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061D   CB 21                  SLA   c   
061F   CB 10                  RL   b   
0621   ED 6A                  ADC   hl,hl   
0623   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0625   38 03                  JR   c,divide2   
0627   0C                     INC   c   
0628   18 01                  JR   divide3   
062A                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
062A   19                     ADD   hl,de   
062B                DIVIDE3:      
062B   3D                     DEC   a   
062C   20 EF                  JR   nz,divide1   
062E   50 59                  LD   de,bc   ; result from bc to de
0630   C9                     RET      
0631                             ; hl = value1, de = value2
0631                             ; hl = result
0631                EQUALS:      
0631   B7                     OR   a   ; reset the carry flag
0632   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0634   28 10                  JR   z,true1   
0636   C3 4C 06               JP   false1   
0639                             ; hl = value1 de = value2
0639                             ; hl = result
0639                LESSTHANEQ:      
0639   B7                     OR   a   
063A   ED 52                  SBC   hl,de   
063C   18 05                  JR   lessthan1   
063E                             ; hl = value1 de = value2
063E                             ; hl = result
063E                LESSTHAN:      
063E   B7                     OR   a   
063F   ED 52                  SBC   hl,de   
0641   28 09                  JR   z,false1   
0643                LESSTHAN1:      
0643   FA 4C 06               JP   m,false1   
0646                TRUE1:       
0646   21 FF FF               LD   hl,TRUE   
0649   E5                     PUSH   hl   
064A   DD E9                  JP   (ix)   
064C                NULL1:       
064C                FALSE1:      
064C   21 00 00               LD   hl,FALSE   
064F   E5                     PUSH   hl   
0650   DD E9                  JP   (ix)   
0652                             ; execute a block of code which ends with }
0652                             ; creates a root scope if BP == stack
0652                             ; else uses outer scope
0652                CARET:       
0652                GO:          
0652   D1                     POP   de   ; de = block*
0653                GO1:         
0653   7B                     LD   a,e   ; if block* == null, exit
0654   B2                     OR   d   
0655   20 02                  JR   nz,go2   
0657   DD E9                  JP   (ix)   
0659                GO2:         
0659   1A                     LD   a,(de)   
065A   FE 7B                  CP   "{"   
065C   28 06                  JR   z,goBlock1   
065E   FE 28                  CP   "("   
0660   C2 97 06               JP   nz,goLambda   
0663                             ; inc de                      ; de is the address to jump back to
0663   D5                     PUSH   de   ; push de just before stack frame
0664                GOBLOCK:      
0664                GOBLOCK1:      
0664   ED 53 00 4D            LD   (vTemp1),de   ; save de
0668   21 00 4A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066B   FD 54                  LD   d,iyh   
066D   FD 5D                  LD   e,iyl   
066F   B7                     OR   a   ; if stack* == BP then this is the root_scope
0670   ED 52                  SBC   hl,de   
0672   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de
0676   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0677   B4                     OR   h   
0678   3E 00                  LD   a,0   
067A   28 70                  JR   z,goLambda8   
067C   C5                     PUSH   bc   ; push IP
067D   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0680   FD 46 05               LD   b,(iy+5)   
0683   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0686   FD 66 03               LD   h,(iy+3)   
0689                GOBLOCK2:      
0689   C5                     PUSH   bc   ; arg_list*
068A   E5                     PUSH   hl   ; first_arg*
068B   FD E5                  PUSH   iy   ; push BP
068D   FD 21 00 00            LD   iy,0   ; BP = SP
0691   FD 39                  ADD   iy,sp   
0693   42 4B                  LD   bc,de   ; bc = de = block*-1
0695   DD E9                  JP   (ix)   
0697                GOLAMBDA:      ; execute lambda
0697   EB                     EX   de,hl   ; hl = lambda*
0698   5E                     LD   e,(hl)   ; de = partial_array*
0699   23                     INC   hl   
069A   56                     LD   d,(hl)   
069B   23                     INC   hl   
069C   7B                     LD   a,e   ; if partial_array* == null skip
069D   B2                     OR   d   
069E   28 25                  JR   z,goLambda3   
06A0   ED 43 00 4D            LD   (vTemp1),bc   
06A4   22 02 4D               LD   (vTemp2),hl   ; save bc,hl
06A7   EB                     EX   de,hl   ; hl = partial_array*
06A8   2B                     DEC   hl   ; skip type byte
06A9   2B                     DEC   hl   ; skip magic byte
06AA   2B                     DEC   hl   ; bc = count
06AB   46                     LD   b,(hl)   
06AC   2B                     DEC   hl   
06AD   4E                     LD   c,(hl)   
06AE   23                     INC   hl   ; hl = array data*
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   23                     INC   hl   
06B2   18 06                  JR   goLambda2   ; push each item on stack
06B4                GOLAMBDA1:      
06B4   5E                     LD   e,(hl)   ; de = partial item
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   D5                     PUSH   de   ; push on stack
06B9   0B                     DEC   bc   
06BA                GOLAMBDA2:      
06BA   79                     LD   a,c   ; if count != 0 then loop
06BB   B0                     OR   b   
06BC   20 F6                  JR   nz,goLambda1   
06BE   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore bc
06C2   2A 02 4D               LD   hl,(vTemp2)   ; restore hl
06C5                GOLAMBDA3:      
06C5   5E                     LD   e,(hl)   ; de = block*
06C6   23                     INC   hl   
06C7   56                     LD   d,(hl)   
06C8   23                     INC   hl   
06C9   ED 53 00 4D            LD   (vTemp1),de   ; save block*
06CD   5E                     LD   e,(hl)   ; de = arg_list*
06CE   23                     INC   hl   
06CF   56                     LD   d,(hl)   
06D0   23                     INC   hl   
06D1   EB                     EX   de,hl   ; hl = arg_list*
06D2   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de = block*
06D6   7D                     LD   a,l   ; if arg_list* == null a = 0
06D7   B4                     OR   h   
06D8   20 03                  JR   nz,goLambda4   
06DA   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DB   18 0F                  JR   goLambda8   
06DD                GOLAMBDA4:      ; allocate locals
06DD   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DE   7E                     LD   a,(hl)   
06DF   18 03                  JR   goLambda6   
06E1                GOLAMBDA5:      ; loop
06E1   3B                     DEC   sp   
06E2   3B                     DEC   sp   
06E3   3D                     DEC   a   
06E4                GOLAMBDA6:      
06E4   B7                     OR   a   
06E5   20 FA                  JR   nz,goLambda5   ; end loop
06E7                GOLAMBDA7:      
06E7   2B                     DEC   hl   ; a = num_args* x 2
06E8   7E                     LD   a,(hl)   
06E9   23                     INC   hl   
06EA   23                     INC   hl   
06EB   87                     ADD   a,a   ; a *= 2
06EC                GOLAMBDA8:      
06EC   C5                     PUSH   bc   ; push IP
06ED   44 4D                  LD   bc,hl   
06EF   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F2   85                     ADD   a,l   
06F3   6F                     LD   l,a   
06F4   39                     ADD   hl,sp   
06F5   18 92                  JR   goBlock2   
06F7                HASH:        
06F7                HEXNUM:      
06F7   21 00 00               LD   hl,0   ; Clear hl to accept the number
06FA                HEXNUM1:      
06FA   03                     INC   bc   
06FB   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FC   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FE   28 02                  JR   z,hexnum2   ; no a decimal
0700   D6 07                  SUB   7   ; sub 7  to make $a - $F
0702                HEXNUM2:      
0702   D6 30                  SUB   $30   ; form decimal digit
0704   DA 82 07               JP   c,num2   
0707   FE 10                  CP   $0F+1   
0709   D2 82 07               JP   nc,num2   
070C   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070D   29                     ADD   hl,hl   ; 4X
070E   29                     ADD   hl,hl   ; 8X
070F   29                     ADD   hl,hl   ; 16X
0710   85                     ADD   a,l   ; add into bottom of hl
0711   6F                     LD   l,a   
0712   18 E6                  JR   hexnum1   
0714                UPCASE:      
0714   0A                     LD   a,(bc)   ; a = identifier char
0715   D6 41                  SUB   "A"   ; "A" = 0
0717   18 05                  JR   ident1   
0719                LOWCASE:      
0719   0A                     LD   a,(bc)   
071A   D6 61                  SUB   "a"   
071C   C6 1A                  ADD   a,26   
071E                IDENT1:      
071E   87                     ADD   a,a   ; l = a * 2
071F   6F                     LD   l,a   
0720   26 4C                  LD   h,msb(vars)   
0722   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0725   5E                     LD   e,(hl)   
0726   23                     INC   hl   
0727   56                     LD   d,(hl)   
0728   D5                     PUSH   de   
0729   DD E9                  JP   (ix)   
072B                             ; if
072B                             ; condition then -- value
072B                QUESTION:      
072B                IF:          
072B   03                     INC   bc   
072C   0A                     LD   a,(bc)   
072D   FE 3F                  CP   "?"   
072F   28 06                  JR   z,ifte   
0731   0B                     DEC   bc   
0732   11 00 00               LD   de,NUL   ; NUL pointer for else
0735   18 01                  JR   ifte1   
0737                             ; ifte
0737                             ; condition then else -- value
0737                IFTE:        
0737   D1                     POP   de   ; de = else
0738                IFTE1:       
0738   E1                     POP   hl   ; hl = then
0739   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
073A   7C                     LD   a,h   
073B   B5                     OR   l   
073C   E1                     POP   hl   ; hl = then
073D   CA 53 06               JP   z,go1   ; if z de = else
0740   EB                     EX   de,hl   ; condition = false, de = then
0741   C3 53 06               JP   go1   
0744                STAR:        
0744                MUL:         
0744   D1                     POP   de   ; get first value
0745   E1                     POP   hl   
0746                MUL2:        
0746   C5                     PUSH   bc   ; Preserve the IP
0747   44 4D                  LD   bc,hl   ; bc = 2nd value
0749   21 00 00               LD   hl,0   
074C   3E 10                  LD   a,16   
074E                MUL3:        
074E   29                     ADD   hl,hl   
074F   CB 13                  RL   e   
0751   CB 12                  RL   d   
0753   30 04                  JR   nc,$+6   
0755   09                     ADD   hl,bc   
0756   30 01                  JR   nc,$+3   
0758   13                     INC   de   
0759   3D                     DEC   a   
075A   20 F2                  JR   nz,mul3   
075C   C1                     POP   bc   ; Restore the IP
075D   C3 96 03               JP   add3   
0760                NUM:         
0760   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0763   0A                     LD   a,(bc)   ; Get numeral or -
0764   FE 2D                  CP   "-"   
0766   20 01                  JR   nz,num0   
0768   03                     INC   bc   ; move to next char, no flags affected
0769                NUM0:        
0769   08                     EX   af,af'   ; save zero flag = 0 for later
076A                NUM1:        
076A   0A                     LD   a,(bc)   ; read digit
076B   D6 30                  SUB   "0"   ; less than 0?
076D   38 13                  JR   c,num2   ; not a digit, exit loop
076F   FE 0A                  CP   10   ; greater that 9?
0771   30 0F                  JR   nc,num2   ; not a digit, exit loop
0773   03                     INC   bc   ; inc IP
0774   54 5D                  LD   de,hl   ; multiply hl * 10
0776   29                     ADD   hl,hl   
0777   29                     ADD   hl,hl   
0778   19                     ADD   hl,de   
0779   29                     ADD   hl,hl   
077A   85                     ADD   a,l   ; add digit in a to hl
077B   6F                     LD   l,a   
077C   3E 00                  LD   a,0   
077E   8C                     ADC   a,h   
077F   67                     LD   h,a   
0780   18 E8                  JR   num1   
0782                NUM2:        
0782   0B                     DEC   bc   
0783   08                     EX   af,af'   ; restore zero flag
0784   20 07                  JR   nz,num3   
0786   EB                     EX   de,hl   ; negate the value of hl
0787   21 00 00               LD   hl,0   
078A   B7                     OR   a   ; jump to sub2
078B   ED 52                  SBC   hl,de   
078D                NUM3:        
078D   E5                     PUSH   hl   ; Put the number on the stack
078E   DD E9                  JP   (ix)   ; and process the next character
0790                UNDERSCORE:      
0790                REMAIN:      
0790   2A F4 4C               LD   hl,(vRemain)   
0793   E5                     PUSH   hl   
0794   DD E9                  JP   (ix)   
0796                RPAREN:      
0796   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0799   FD 46 09               LD   b,(iy+9)   
079C   DD E9                  JP   (ix)   
079E                             ; arg_list* block* -- ptr
079E                SEMICOLON:      
079E   D1                     POP   de   ; de = block* hl = heap*
079F   2A F0 4C               LD   hl,(vHeapPtr)   
07A2   AF                     XOR   a   
07A3   77                     LD   (hl),a   ; compile null partial_array*
07A4   23                     INC   hl   
07A5   77                     LD   (hl),a   
07A6   23                     INC   hl   
07A7   73                     LD   (hl),e   ; compile block*
07A8   23                     INC   hl   
07A9   72                     LD   (hl),d   
07AA   23                     INC   hl   
07AB   D1                     POP   de   ; de = block*
07AC   73                     LD   (hl),e   ; compile arg_list*
07AD   23                     INC   hl   
07AE   72                     LD   (hl),d   
07AF   23                     INC   hl   
07B0   ED 5B F0 4C            LD   de,(vHeapPtr)   ; return lambda*
07B4   D5                     PUSH   de   
07B5   22 F0 4C               LD   (vHeapPtr),hl   ; heap* += 4
07B8   DD E9                  JP   (ix)   
07BA                             ; shiftLeft
07BA                             ; value count -- value2          shift left count places
07BA                SHIFTLEFT:      
07BA   50 59                  LD   de,bc   ; save IP
07BC   C1                     POP   bc   ; bc = count
07BD   41                     LD   b,c   ; b = loop counter
07BE   E1                     POP   hl   
07BF   04                     INC   b   ; test for counter=0 case
07C0   18 01                  JR   shiftLeft2   
07C2                SHIFTLEFT1:      
07C2   29                     ADD   hl,hl   ; left shift hl
07C3                SHIFTLEFT2:      
07C3   10 FD                  DJNZ   shiftLeft1   
07C5   E5                     PUSH   hl   
07C6   42 4B                  LD   bc,de   ; restore IP
07C8   DD E9                  JP   (ix)   
07CA                             ; shiftRight
07CA                             ; value count -- value2          shift left count places
07CA                SHIFTRIGHT:      
07CA   50 59                  LD   de,bc   ; save IP
07CC   C1                     POP   bc   ; bc = count
07CD   41                     LD   b,c   ; b = loop counter
07CE   E1                     POP   hl   
07CF   04                     INC   b   ; test for counter=0 case
07D0   18 04                  JR   shiftRight2   
07D2                SHIFTRIGHT1:      
07D2   CB 3C                  SRL   h   ; right shift hl
07D4   CB 1D                  RR   l   
07D6                SHIFTRIGHT2:      
07D6   10 FA                  DJNZ   shiftRight1   
07D8   E5                     PUSH   hl   
07D9   42 4B                  LD   bc,de   ; restore IP
07DB   DD E9                  JP   (ix)   
07DD                             ; string
07DD                             ; -- ptr                        ; points to start of string chars,
07DD                             ; length is stored at start - 2 bytes
07DD                DBLQUOTE:      
07DD                STRING:      
07DD   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
07E0   23                     INC   hl   ; skip length field to start
07E1   23                     INC   hl   
07E2   E5                     PUSH   hl   ; save start of string
07E3   03                     INC   bc   ; point to next char
07E4   18 03                  JR   string2   
07E6                STRING1:      
07E6   77                     LD   (hl),a   
07E7   23                     INC   hl   ; increase count
07E8   03                     INC   bc   ; point to next char
07E9                STRING2:      
07E9   0A                     LD   a,(bc)   
07EA   FE 22                  CP   DQUOTE   ; " is the string terminator
07EC   28 04                  JR   z,string3   
07EE   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07F0   20 F4                  JR   nz,string1   
07F2                STRING3:      
07F2   AF                     XOR   a   ; write NUL to terminate string
07F3   77                     LD   (hl),a   ; hl = end of string
07F4   23                     INC   hl   
07F5   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F8   2B                     DEC   hl   ; hl = end of string without terminator
07F9   D1                     POP   de   ; de = start of string
07FA   D5                     PUSH   de   ; return start of string
07FB   B7                     OR   a   ; hl = length bytes, de = start of string
07FC   ED 52                  SBC   hl,de   
07FE   EB                     EX   de,hl   
07FF   2B                     DEC   hl   ; write length bytes to length field at start - 2
0800   72                     LD   (hl),d   
0801   2B                     DEC   hl   
0802   73                     LD   (hl),e   
0803   DD E9                  JP   (ix)   
0805                MINUS:       ; negative sign or subtract
0805   03                     INC   bc   ; check if sign of a number
0806   0A                     LD   a,(bc)   
0807   0B                     DEC   bc   
0808   FE 30                  CP   "0"   
080A   38 05                  JR   c,sub   
080C   FE 3A                  CP   "9"+1   
080E   DA 3E 03               JP   c,num_   
0811                SUB:         ; Subtract the value 2nd on stack from top of stack
0811   03                     INC   bc   
0812   FE 2D                  CP   "-"   
0814   20 05                  JR   nz,sub1   
0816   E1                     POP   hl   
0817   2B                     DEC   hl   
0818   C3 8E 04               JP   assign0   
081B                SUB1:        
081B   0B                     DEC   bc   
081C   D1                     POP   de   
081D   E1                     POP   hl   
081E   B7                     OR   a   
081F   ED 52                  SBC   hl,de   
0821   C3 96 03               JP   add3   
0824                ERROR1:      
0824   21 01 00               LD   hl,1   ; error 1: unknown command
0827   E5                     PUSH   hl   
0828   C3 64 0C               JP   error   
082B                COMMENT:      
082B   03                     INC   bc   ; point to next char
082C   0A                     LD   a,(bc)   
082D   FE 20                  CP   " "   ; terminate on any char less than SP
082F   30 FA                  JR   nc,comment   
0831   0B                     DEC   bc   
0832   DD E9                  JP   (ix)   
0834                COMMAND_A:      
0834   CD E0 0A               CALL   jumpTable   
0837   62                     DB   "b"   
0838   40 08                  DW   absolute   
083A   64                     DB   "d"   
083B   4D 08                  DW   addrOf   
083D   00                     DB   NUL   
083E   24 08                  DW   error1   
0840                             ; /ab absolute
0840                             ; num -- num
0840                ABSOLUTE:      
0840   E1                     POP   hl   
0841   CB 7C                  BIT   7,h   
0843   C8                     RET   z   
0844   AF                     XOR   a   
0845   95                     SUB   l   
0846   6F                     LD   l,a   
0847   9F                     SBC   a,a   
0848   94                     SUB   h   
0849   67                     LD   h,a   
084A   E5                     PUSH   hl   
084B   DD E9                  JP   (ix)   
084D                             ; /ad addrOf
084D                             ; char -- addr
084D                ADDROF:      
084D   E1                     POP   hl   ; a = char
084E   7D                     LD   a,l   
084F   FE 7B                  CP   "z"+1   ; if a > z then exit
0851   30 19                  JR   nc,addrOf2   
0853   D6 41                  SUB   "A"   ; a - 65
0855   38 15                  JR   c,addrOf2   ; if < A then exit
0857   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0859   38 06                  JR   c,addrOf1   
085B   D6 06                  SUB   "a"-("Z"+1)   
085D   FE 1A                  CP   "Z"-"A"+1   
085F   38 0B                  JR   c,addrOf2   ; if < a then exit
0861                ADDROF1:      
0861   87                     ADD   a,a   ; double a
0862   21 00 4C               LD   hl,VARS   ; hl = VARS + a
0865   85                     ADD   a,l   
0866   6F                     LD   l,a   
0867   3E 00                  LD   a,0   
0869   8C                     ADC   a,h   
086A   67                     LD   h,a   
086B   E5                     PUSH   hl   
086C                ADDROF2:      
086C   DD E9                  JP   (ix)   
086E                COMMAND_B:      
086E   CD E0 0A               CALL   jumpTable   
0871   61                     DB   "a"   
0872   89 08                  DW   bufferArray   
0874   63                     DB   "c"   
0875   96 09                  DW   bufferChar   
0877   6E                     DB   "n"   
0878   BD 08                  DW   bufferNumber   
087A   72                     DB   "r"   
087B   62 09                  DW   break   
087D   73                     DB   "s"   
087E   7C 09                  DW   bufferString   
0880   78                     DB   "x"   
0881   9B 09                  DW   bufferXChars   
0883   79                     DB   "y"   
0884   A7 0B                  DW   coldStart   
0886   00                     DB   NUL   
0887   24 08                  DW   error1   
0889                             ; /ba buffer array
0889                             ; array* --
0889                BUFFERARRAY:      
0889   CD 52 06               CALL   go   
088C   00 00                  DW   NUL   ; NUL closure
088E   92 08                  DW   $+4   
0890   C6 0A                  DW   args1A2L   
0892   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08BD                             ; /bd buffer decimal
08BD                             ; value --
08BD                BUFFERNUMBER:      
08BD   3A E8 4C               LD   a,(vNumBase)   
08C0   FE 10                  CP   16   
08C2   28 66                  JR   z,bufferHex   ; else falls through
08C4                             ; /bd buffer decimal
08C4                             ; value --
08C4                BUFFERDEC:      
08C4   ED 5B EC 4C            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C8   D9                     EXX      
08C9   E1                     POP   hl   ; hl = value
08CA   CD DE 08               CALL   bufferDec0   
08CD   D9                     EXX      ; de = buffer*' bc = IP
08CE   3E 20                  LD   a," "   ; append space to buffer
08D0   12                     LD   (de),a   
08D1   1C                     INC   e   ; buffer*++, wraparound
08D2   CC C9 0A               CALL   z,flushBuffer   
08D5   2A EC 4C               LD   hl,(vBufPtr)   ; hl = buffer*
08D8   ED 53 EC 4C            LD   (vBufPtr),de   ; update buffer* with buffer*'
08DC   DD E9                  JP   (ix)   
08DE                             ; hl = value
08DE                             ; de' = buffer*
08DE                             ; a, bc, de, hl destroyed
08DE                BUFFERDEC0:      
08DE   CB 7C                  BIT   7,h   
08E0   28 0C                  JR   z,bufferDec1   
08E2   D9                     EXX      
08E3   3E 2D                  LD   a,"-"   
08E5   12                     LD   (de),a   
08E6   13                     INC   de   
08E7   D9                     EXX      
08E8   AF                     XOR   a   
08E9   95                     SUB   l   
08EA   6F                     LD   l,a   
08EB   9F                     SBC   a,a   
08EC   94                     SUB   h   
08ED   67                     LD   h,a   
08EE                BUFFERDEC1:      
08EE   0E 00                  LD   c,0   ; leading zeros flag = false
08F0   11 F0 D8               LD   de,-10000   
08F3   CD 0E 09               CALL   bufferDec2   
08F6   11 18 FC               LD   de,-1000   
08F9   CD 0E 09               CALL   bufferDec2   
08FC   11 9C FF               LD   de,-100   
08FF   CD 0E 09               CALL   bufferDec2   
0902   1E F6                  LD   e,-10   
0904   CD 0E 09               CALL   bufferDec2   
0907   0C                     INC   c   ; flag = true for at least digit
0908   1E FF                  LD   e,-1   
090A   CD 0E 09               CALL   bufferDec2   
090D   C9                     RET      
090E                BUFFERDEC2:      
090E   06 2F                  LD   b,"0"-1   
0910                BUFFERDEC3:      
0910   04                     INC   b   
0911   19                     ADD   hl,de   
0912   38 FC                  JR   c,bufferDec3   
0914   ED 52                  SBC   hl,de   
0916   3E 30                  LD   a,"0"   
0918   B8                     CP   b   
0919   20 05                  JR   nz,bufferDec4   
091B   AF                     XOR   a   
091C   B1                     OR   c   
091D   C8                     RET   z   
091E   18 01                  JR   bufferDec5   
0920                BUFFERDEC4:      
0920   0C                     INC   c   
0921                BUFFERDEC5:      
0921   78                     LD   a,b   
0922   D9                     EXX      
0923   12                     LD   (de),a   
0924   1C                     INC   e   
0925   CC C9 0A               CALL   z,flushBuffer   
0928   D9                     EXX      
0929   C9                     RET      
092A                             ; /bh buffer hex
092A                             ; value --
092A                BUFFERHEX:      
092A   E1                     POP   hl   ; hl = value
092B   ED 5B EC 4C            LD   de,(vBufPtr)   
092F   3E 23                  LD   a,"#"   ; # prefix
0931   12                     LD   (de),a   
0932   1C                     INC   e   ; buffer*++, wraparound
0933   CC C9 0A               CALL   z,flushBuffer   
0936   7C                     LD   a,h   
0937   CD 4B 09               CALL   bufferHex1   
093A   7D                     LD   a,l   
093B   CD 4B 09               CALL   bufferHex1   
093E   3E 20                  LD   a," "   ; append space to buffer
0940   12                     LD   (de),a   
0941   1C                     INC   e   ; buffer*++, wraparound
0942   CC C9 0A               CALL   z,flushBuffer   
0945   ED 53 EC 4C            LD   (vBufPtr),de   
0949   DD E9                  JP   (ix)   
094B                BUFFERHEX1:      
094B   F5                     PUSH   af   
094C   1F                     RRA      
094D   1F                     RRA      
094E   1F                     RRA      
094F   1F                     RRA      
0950   CD 54 09               CALL   bufferHex2   
0953   F1                     POP   af   
0954                BUFFERHEX2:      
0954   E6 0F                  AND   0x0F   
0956   C6 90                  ADD   a,0x90   
0958   27                     DAA      
0959   CE 40                  ADC   a,0x40   
095B   27                     DAA      
095C   12                     LD   (de),a   
095D   1C                     INC   e   ; buffer*++, wraparound
095E   CC C9 0A               CALL   z,flushBuffer   
0961   C9                     RET      
0962                             ; /br break from loop
0962                             ; --
0962                BREAK:       
0962   E1                     POP   hl   
0963   7D                     LD   a,l   
0964   B4                     OR   h   
0965   28 02                  JR   z,break1   
0967   DD E9                  JP   (ix)   
0969                BREAK1:      
0969   FD 5D                  LD   e,iyl   ; get block* just under stack frame
096B   FD 54                  LD   d,iyh   
096D   21 08 00               LD   hl,8   
0970   19                     ADD   hl,de   
0971   23                     INC   hl   
0972   23                     INC   hl   
0973   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0976   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0979   C3 3D 05               JP   blockEnd   
097C                             ; /bs buffered string
097C                             ; string* --
097C                BUFFERSTRING:      
097C   E1                     POP   hl   ; hl = string*
097D   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
0981   18 06                  JR   bufferString1   
0983                BUFFERSTRING0:      
0983   12                     LD   (de),a   ; a -> buffer*
0984   1C                     INC   e   ; buffer*++, wraparound
0985   CC C9 0A               CALL   z,flushBuffer   
0988   23                     INC   hl   
0989                BUFFERSTRING1:      
0989   7E                     LD   a,(hl)   ; a <- string*
098A   B7                     OR   a   ; if NUL exit loop
098B   20 F6                  JR   nz,bufferString0   
098D   2A EC 4C               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0990   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*' in pointer
0994   DD E9                  JP   (ix)   
0996                             ; /bc buffer char
0996                             ; char --
0996                BUFFERCHAR:      
0996   21 01 00               LD   hl,1   
0999   18 01                  JR   bufferXChars0   
099B                             ; /bx buffered x chars
099B                             ; char length --
099B                BUFFERXCHARS:      
099B   E1                     POP   hl   ; hl = length
099C                BUFFERXCHARS0:      
099C   D1                     POP   de   ; a' = char
099D   7B                     LD   a,e   
099E   08                     EX   af,af'   
099F   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
09A3   18 08                  JR   bufferXChars2   
09A5                BUFFERXCHARS1:      
09A5   08                     EX   af,af'   
09A6   12                     LD   (de),a   
09A7   08                     EX   af,af'   
09A8   1C                     INC   e   ; buffer*++, wraparound
09A9   CC C9 0A               CALL   z,flushBuffer   
09AC   2B                     DEC   hl   
09AD                BUFFERXCHARS2:      
09AD   7D                     LD   a,l   
09AE   B4                     OR   h   
09AF   20 F4                  JR   nz,bufferXChars1   
09B1   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*'
09B5   DD E9                  JP   (ix)   
09B7                COMMAND_I:      
09B7   CD E0 0A               CALL   jumpTable   
09BA   6E                     DB   "n"   
09BB   91 0A                  DW   input   
09BD   76                     DB   "v"   
09BE   C2 03                  DW   invert   
09C0   00                     DB   NUL   
09C1   24 08                  DW   error1   
09C3                COMMAND_P:      
09C3   CD E0 0A               CALL   jumpTable   
09C6   61                     DB   "a"   
09C7   D5 09                  DW   partial   
09C9   62                     DB   "b"   
09CA   F5 09                  DW   printBuffer   
09CC   63                     DB   "c"   
09CD   18 0A                  DW   printChars   
09CF   6B                     DB   "k"   
09D0   2A 0A                  DW   printStack   
09D2   00                     DB   NUL   
09D3   24 08                  DW   error1   
09D5                             ; partial
09D5                             ; array* lambda* -- lambda1*
09D5                PARTIAL:      
09D5   E1                     POP   hl   ; h1 = lambda*
09D6   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09DA   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
09DE   01 06 00               LD   bc,6   ; bc = count
09E1   ED B0                  LDIR      ; clone lambda
09E3   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
09E7   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09EA   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += 6
09EE   D1                     POP   de   ; de = array*
09EF   E5                     PUSH   hl   ; return partial_array*
09F0   73                     LD   (hl),e   ; compile array*
09F1   23                     INC   hl   
09F2   72                     LD   (hl),d   
09F3   DD E9                  JP   (ix)   
09F5                             ; /pb printBuffer
09F5                             ; --
09F5                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F5                PRINTBUFFER:      
09F5   CD 52 06               CALL   go   
09F8   00 00                  DW   NUL   ; NUL closure
09FA   FE 09                  DW   $+4   
09FC   BB 0A                  DW   args1A0L   
09FE   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A18                             ; printChars
0A18                             ; char* len --
0A18                PRINTCHARS:      
0A18   E1                     POP   hl   ; hl = count
0A19   D1                     POP   de   ; de = char*
0A1A   CD 25 0A               CALL   printChars2   
0A1D   DD E9                  JP   (ix)   
0A1F                PRINTCHARS1:      
0A1F   1A                     LD   a,(de)   ; print char at char*
0A20   CD 85 00               CALL   putchar   
0A23   13                     INC   de   ; char*++
0A24   2B                     DEC   hl   ; count--
0A25                PRINTCHARS2:      
0A25   7D                     LD   a,l   ; count == 0?
0A26   B4                     OR   h   
0A27   C8                     RET   z   
0A28   18 F5                  JR   printChars1   ; if not loop
0A2A                             ; /pk print stack
0A2A                             ; --
0A2A                PRINTSTACK:      
0A2A                             ;     ld (vTemp1),bc
0A2A                             ;     call printStr
0A2A                             ;     .cstr "=> "
0A2A                             ;     ld hl,STACK
0A2A                             ;     sbc hl,sp
0A2A                             ;     srl h
0A2A                             ;     rr l
0A2A                             ;     ld bc,hl
0A2A                             ;     ld hl,STACK
0A2A                             ;     jr printStack2
0A2A                             ; printStack1:
0A2A                             ;     dec bc
0A2A                             ;     dec hl
0A2A                             ;     ld d,(hl)
0A2A                             ;     dec hl
0A2A                             ;     ld e,(hl)
0A2A                             ;     ex de,hl
0A2A                             ;     call prthex
0A2A                             ;     ex de,hl
0A2A                             ;     ld a," "
0A2A                             ;     call putchar
0A2A                             ; printStack2:
0A2A                             ;     ld a,c
0A2A                             ;     or b
0A2A                             ;     jr nz,printStack1
0A2A                             ;     call prompt
0A2A                             ;     ld bc,(vTemp1)
0A2A   DD E9                  JP   (ix)   
0A2C                SIZE:        
0A2C   E1                     POP   hl   
0A2D   2B                     DEC   hl   ; skip magic byte
0A2E   2B                     DEC   hl   ; skip type tag
0A2F   2B                     DEC   hl   ; msb size
0A30   56                     LD   d,(hl)   
0A31   2B                     DEC   hl   ; lsb size
0A32   5E                     LD   e,(hl)   
0A33   D5                     PUSH   de   
0A34   DD E9                  JP   (ix)   
0A36                COMMAND_V:      
0A36   CD E0 0A               CALL   jumpTable   
0A39   62                     DB   "b"   
0A3A   5A 0A                  DW   varBufPtr   
0A3C   68                     DB   "h"   
0A3D   63 0A                  DW   varHeapPtr   
0A3F   74                     DB   "t"   
0A40   6C 0A                  DW   varTIBPtr   
0A42   42                     DB   "B"   
0A43   4B 0A                  DW   constBufStart   
0A45   54                     DB   "T"   
0A46   55 0A                  DW   constTIBStart   
0A48   00                     DB   NUL   
0A49   24 08                  DW   error1   
0A4B                CONSTBUFSTART:      
0A4B   11 00 4B               LD   de,BUF   
0A4E   18 28                  JR   constant   
0A50                CONSTHEAPSTART:      
0A50   11 1E 4D               LD   de,HEAP   
0A53   18 23                  JR   constant   
0A55                CONSTTIBSTART:      
0A55   11 00 4A               LD   de,TIB   
0A58   18 1E                  JR   constant   
0A5A                VARBUFPTR:      
0A5A   ED 5B EC 4C            LD   de,(vBufPtr)   
0A5E   21 EC 4C               LD   hl,vBufPtr   
0A61   18 12                  JR   variable   
0A63                VARHEAPPTR:      
0A63   ED 5B F0 4C            LD   de,(vHeapPtr)   
0A67   21 F0 4C               LD   hl,vHeapPtr   
0A6A   18 09                  JR   variable   
0A6C                VARTIBPTR:      
0A6C   ED 5B EA 4C            LD   de,(vTIBPtr)   
0A70   21 EA 4C               LD   hl,vTIBPtr   
0A73   18 00                  JR   variable   
0A75                VARIABLE:      
0A75   22 F2 4C               LD   (vPointer),hl   
0A78                CONSTANT:      
0A78   D5                     PUSH   de   
0A79   DD E9                  JP   (ix)   
0A7B                CHARS:       
0A7B   21 01 00               LD   hl,1   
0A7E                CHARS1:      
0A7E   22 E6 4C               LD   (vDataWidth),hl   
0A81   DD E9                  JP   (ix)   
0A83                DECIMAL:      
0A83   21 0A 00               LD   hl,10   
0A86                DECIMAL1:      
0A86   22 E8 4C               LD   (vNumBase),hl   
0A89   DD E9                  JP   (ix)   
0A8B                HEXADECIMAL:      
0A8B   21 10 00               LD   hl,16   
0A8E   C3 86 0A               JP   decimal1   
0A91                             ; Z80 port input
0A91                             ; port -- value
0A91                INPUT:       
0A91   E1                     POP   hl   
0A92   59                     LD   e,c   ; save IP
0A93   4D                     LD   c,l   
0A94   ED 68                  IN   l,(c)   
0A96   26 00                  LD   h,0   
0A98   4B                     LD   c,e   ; restore IP
0A99   E5                     PUSH   hl   
0A9A   DD E9                  JP   (ix)   
0A9C                KEY:         
0A9C   CD 81 00               CALL   getchar   
0A9F   26 00                  LD   h,0   
0AA1   6F                     LD   l,a   
0AA2   E5                     PUSH   hl   
0AA3   DD E9                  JP   (ix)   
0AA5                             ; Z80 port output
0AA5                             ; value port --
0AA5                OUTPUT:      
0AA5   E1                     POP   hl   
0AA6   59                     LD   e,c   ; save IP
0AA7   4D                     LD   c,l   
0AA8   E1                     POP   hl   
0AA9   ED 69                  OUT   (c),l   
0AAB   4B                     LD   c,e   ; restore IP
0AAC   DD E9                  JP   (ix)   
0AAE                NUMBERS:      
0AAE   21 02 00               LD   hl,2   
0AB1   C3 7E 0A               JP   chars1   
0AB4                             ; 
0AB4                             ; 
0AB4                             ; 
0AB4                             ; 
0AB4                FILTER:      
0AB4                MAP:         
0AB4                SCAN:        
0AB4   DD E9                  JP   (ix)   
0AB6                             ;*******************************************************************
0AB6                             ; reusable arglists
0AB6                             ;*******************************************************************
0AB6                ARGS0A1L_:      ; zero args one local
0AB6   01                     DB   1   ; num args + locals
0AB7   01                     DB   1   ; num locals
0AB8                ARGS0A1L:      
0AB8   61                     DB   "a"   
0AB9                ARGS1A0L_:      ; one arg zero locals
0AB9   01                     DB   1   ; num args + locals
0ABA   00                     DB   0   ; num locals
0ABB                ARGS1A0L:      
0ABB   61                     DB   "a"   
0ABC                ARGS1A1L_:      ; one arg one local
0ABC   02                     DB   2   ; num args + locals
0ABD   01                     DB   1   ; num locals
0ABE                ARGS1A1L:      
0ABE   61 62                  DB   "ab"   
0AC0                ARGS2A0L_:      ; two args zero locals
0AC0   02                     DB   2   ; num args + locals
0AC1   00                     DB   0   ; num locals
0AC2                ARGS2A0L:      
0AC2   61 62                  DB   "ab"   
0AC4                ARGS1A2L_:      ; one arg two locals
0AC4   03                     DB   3   ; num args + locals
0AC5   02                     DB   2   ; num locals
0AC6                ARGS1A2L:      
0AC6   61 62 63               DB   "abc"   
0AC9                             ;*******************************************************************
0AC9                             ; general routines
0AC9                             ;*******************************************************************
0AC9                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AC9                FLUSHBUFFER:      
0AC9   F5                     PUSH   af   
0ACA   D5                     PUSH   de   
0ACB   E5                     PUSH   hl   
0ACC   2A EC 4C               LD   hl,(vBufPtr)   
0ACF   11 00 4B               LD   de,BUF   
0AD2   ED 53 EC 4C            LD   (vBufPtr),de   
0AD6   B7                     OR   a   
0AD7   ED 52                  SBC   hl,de   
0AD9   CD 25 0A               CALL   printChars2   
0ADC   E1                     POP   hl   
0ADD   D1                     POP   de   
0ADE   F1                     POP   af   
0ADF   C9                     RET      
0AE0                             ; followed by a table
0AE0                             ; db char
0AE0                             ; dw addr
0AE0                             ; the final item must have char == NUL
0AE0                JUMPTABLE:      
0AE0   03                     INC   bc   
0AE1   E1                     POP   hl   
0AE2                JUMPTABLE0:      
0AE2   AF                     XOR   a   
0AE3   BE                     CP   (hl)   
0AE4   28 09                  JR   z,jumpTable1   
0AE6   0A                     LD   a,(bc)   
0AE7   BE                     CP   (hl)   
0AE8   28 06                  JR   z,jumpTable2   
0AEA   23                     INC   hl   
0AEB   23                     INC   hl   
0AEC   23                     INC   hl   
0AED   18 F3                  JR   jumpTable0   
0AEF                JUMPTABLE1:      
0AEF   0B                     DEC   bc   
0AF0                JUMPTABLE2:      
0AF0   23                     INC   hl   
0AF1   5E                     LD   e,(hl)   
0AF2   23                     INC   hl   
0AF3   56                     LD   d,(hl)   
0AF4   EB                     EX   de,hl   
0AF5   E9                     JP   (hl)   
0AF6                PRTSTR0:      
0AF6   CD 85 00               CALL   putchar   
0AF9   23                     INC   hl   
0AFA                PRTSTR:      
0AFA   7E                     LD   a,(hl)   
0AFB   B7                     OR   a   
0AFC   20 F8                  JR   nz,prtstr0   
0AFE   C9                     RET      
0AFF                             ; **************************************************************************
0AFF                             ; calculate nesting value
0AFF                             ; a is char to be tested,
0AFF                             ; e is the nesting value (initially 0)
0AFF                             ; e is increased by ( and [
0AFF                             ; e is decreased by ) and ]
0AFF                             ; e has its bit 7 toggled by `
0AFF                             ; limited to 127 levels
0AFF                             ; **************************************************************************
0AFF                NESTING:      
0AFF   FE 22                  CP   DQUOTE   ; quote char
0B01   28 06                  JR   z,nesting0   
0B03   FE 60                  CP   "`"   ; quote char
0B05   28 02                  JR   z,nesting0   
0B07   18 0A                  JR   nesting1   
0B09                NESTING0:      
0B09   CB 7B                  BIT   7,e   
0B0B   28 03                  JR   z,nesting1a   
0B0D   CB BB                  RES   7,e   
0B0F   C9                     RET      
0B10                NESTING1A:      
0B10   CB FB                  SET   7,e   
0B12   C9                     RET      
0B13                NESTING1:      
0B13   CB 7B                  BIT   7,e   
0B15   C0                     RET   nz   
0B16   FE 7B                  CP   "{"   
0B18   28 08                  JR   z,nesting2   
0B1A   FE 5B                  CP   "["   
0B1C   28 04                  JR   z,nesting2   
0B1E   FE 28                  CP   "("   
0B20   20 02                  JR   nz,nesting3   
0B22                NESTING2:      
0B22   1C                     INC   e   
0B23   C9                     RET      
0B24                NESTING3:      
0B24   FE 7D                  CP   "}"   
0B26   28 07                  JR   z,nesting4   
0B28   FE 5D                  CP   "]"   
0B2A   28 03                  JR   z,nesting4   
0B2C   FE 29                  CP   ")"   
0B2E   C0                     RET   nz   
0B2F                NESTING4:      
0B2F   1D                     DEC   e   
0B30   C9                     RET      
0B31                PROMPT:      
0B31   CD 41 0B               CALL   printStr   
0B34   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B39   C9                     RET      
0B3A                CRLF:        
0B3A   CD 41 0B               CALL   printStr   
0B3D   0D 0A 00               .CSTR   "\r\n"   
0B40   C9                     RET      
0B41                             ; prints a null teminated string
0B41                             ; the string should be immediately following the call
0B41                PRINTSTR:      
0B41   E3                     EX   (sp),hl   ; swap			
0B42   CD FA 0A               CALL   prtstr   
0B45   23                     INC   hl   ; inc past NUL
0B46   E3                     EX   (sp),hl   ; put it back	
0B47   C9                     RET      
0B48                TITLESTR:      
0B48   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B5C                INIT:        
0B5C   21 48 0B               LD   hl,titleStr   
0B5F   11 0A 4D               LD   de,titleBuf   
0B62   06 14                  LD   b,20   
0B64                INIT1:       
0B64   1A                     LD   a,(de)   
0B65   BE                     CP   (hl)   
0B66   20 17                  JR   nz,coldBoot0   
0B68   13                     INC   de   
0B69   23                     INC   hl   
0B6A   10 F8                  DJNZ   init1   
0B6C                WARMINIT:      
0B6C   ED 4B F6 4C            LD   bc,(vSavedIP)   ; restore IP
0B70   ED 7B F8 4C            LD   sp,(vSavedSP)   ; restore SP
0B74   DD 2A FA 4C            LD   ix,(vSavedNext)   ; restore Next
0B78   FD 2A FC 4C            LD   iy,(vSavedBP)   ; restore BP
0B7C   C3 B6 0B               JP   start1   
0B7F                COLDBOOT0:      
0B7F   21 48 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B82   11 0A 4D               LD   de,titleBuf   
0B85   06 14                  LD   b,20   
0B87   ED B0                  LDIR      
0B89                COLDINIT:      
0B89   21 80 01               LD   hl,isysVars   
0B8C   11 E6 4C               LD   de,sysVars   
0B8F   01 10 00               LD   bc,8 * 2   
0B92   ED B0                  LDIR      
0B94   21 00 4C               LD   hl,vars   ; 52 vars LO HI
0B97   06 34                  LD   b,26*2   
0B99   AF                     XOR   a   
0B9A                COLDBOOT1:      
0B9A   77                     LD   (hl),a   
0B9B   23                     INC   hl   
0B9C   10 FC                  DJNZ   coldBoot1   
0B9E   DD 2A EE 4C            LD   ix,(vNext)   
0BA2   FD 21 00 4A            LD   iy,STACK   
0BA6   C9                     RET      
0BA7                COLDSTART:      
0BA7   31 00 4A               LD   sp,STACK   
0BAA   CD 7F 0B               CALL   coldBoot0   
0BAD   C3 B6 0B               JP   start1   
0BB0                START:       
0BB0   31 00 4A               LD   sp,STACK   ; start Monty
0BB3   CD 5C 0B               CALL   init   ; setups
0BB6                START1:      
0BB6   21 0A 4D               LD   hl,titleBuf   
0BB9   CD FA 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBC                INTERPRET:      
0BBC   CD C9 0A               CALL   flushBuffer   
0BBF   CD 31 0B               CALL   prompt   
0BC2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC5   21 00 4A               LD   hl,TIB   
0BC8   22 EA 4C               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCB                INTERPRET2:      ; calculate nesting
0BCB   1E 00                  LD   e,0   ; initilize nesting value
0BCD   C5                     PUSH   bc   ; save offset into TIB,
0BCE                             ; bc is also the count of chars in TIB
0BCE   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0BD1   18 0B                  JR   interpret4   
0BD3                INTERPRET3:      
0BD3   3E 33                  LD   a,"3"   
0BD5   CD 85 00               CALL   putchar   
0BD8   7E                     LD   a,(hl)   ; a = char in TIB
0BD9   23                     INC   hl   ; inc pointer into TIB
0BDA   0B                     DEC   bc   ; dec count of chars in TIB
0BDB   CD FF 0A               CALL   nesting   ; update nesting value
0BDE                INTERPRET4:      
0BDE   79                     LD   a,c   ; is count zero?
0BDF   B0                     OR   b   
0BE0   20 F1                  JR   nz,interpret3   ; if not loop
0BE2   C1                     POP   bc   ; restore offset into TIB
0BE3                INTERPRET5:      
0BE3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE6   FE 20                  CP   $20   ; compare to space
0BE8   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BEA   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BEC                             ; ???? NEEDED?
0BEC   28 3B                  JR   z,interpret8   
0BEE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF0   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF2   FE 05                  CP   CTRL_E   
0BF4   CA 87 0C               JP   z,edit_   
0BF7   FE 08                  CP   CTRL_H   
0BF9   CA 77 0C               JP   z,backSpace_   
0BFC   FE 0A                  CP   CTRL_J   
0BFE   CA 9F 0C               JP   z,reEdit_   
0C01   FE 13                  CP   CTRL_S   
0C03   CA A2 0C               JP   z,printStack_   
0C06                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C06                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C06                             ; DB     lsb(list_)       ; FF  ^L 12
0C06                             ; DB     lsb(printStack_) ; DLE ^P 16
0C06                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C06                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C06                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C06                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C06                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C06                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C06                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C06                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C06                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C06                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C06                INTERPRET5A:      
0C06                             ; ld (vTIBPtr),bc
0C06                             ; ld bc,(vTIBPtr)
0C06   18 C3                  JR   interpret2   
0C08                INTERPRET6:      
0C08   21 00 4A               LD   hl,TIB   
0C0B   09                     ADD   hl,bc   
0C0C   77                     LD   (hl),a   ; store the character in textbuf
0C0D   03                     INC   bc   
0C0E   CD 85 00               CALL   putchar   ; echo character to screen
0C11   CD FF 0A               CALL   nesting   
0C14   18 CD                  JR   interpret5   ; wait for next character
0C16                INTERPRET7:      
0C16   21 00 4A               LD   hl,TIB   
0C19   09                     ADD   hl,bc   
0C1A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1C   23                     INC   hl   
0C1D   36 0A                  LD   (hl),"\n"   
0C1F   23                     INC   hl   
0C20   03                     INC   bc   
0C21   03                     INC   bc   
0C22   CD 3A 0B               CALL   crlf   ; echo character to screen
0C25   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C26   B7                     OR   a   
0C27   20 BA                  JR   nz,interpret5   
0C29                INTERPRET8:      
0C29   21 00 4A               LD   hl,TIB   
0C2C   09                     ADD   hl,bc   
0C2D   22 EA 4C               LD   (vTIBPtr),hl   
0C30   01 00 4A               LD   bc,TIB   
0C33   ED 43 F6 4C            LD   (vSavedIP),bc   ; save IP
0C37   ED 73 F8 4C            LD   (vSavedSP),sp   ; save SP
0C3B   DD 22 FA 4C            LD   (vSavedNext),ix   ; save Next
0C3F   FD 22 FC 4C            LD   (vSavedBP),iy   ; save BP
0C43   0B                     DEC   bc   
0C44                NEXT:        
0C44   03                     INC   bc   ; Increment the IP
0C45   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C46   FE 20                  CP   " "   ; whitespace?
0C48   28 FA                  JR   z,next   ; space? ignore
0C4A   38 09                  JR   c,next1   
0C4C   D6 20                  SUB   " "   
0C4E   6F                     LD   l,a   ; index into table
0C4F   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C51   6E                     LD   l,(hl)   ; get low jump address
0C52   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C54   E9                     JP   (hl)   ; Jump to routine
0C55                NEXT1:       
0C55   FE 00                  CP   NUL   ; end of input string?
0C57   28 03                  JR   z,exit   
0C59   C3 BC 0B               JP   interpret   ; no, other whitespace, macros?
0C5C                EXIT:        
0C5C   03                     INC   bc   
0C5D   60 69                  LD   hl,bc   
0C5F   E9                     JP   (hl)   
0C60                RUN:         
0C60   C1                     POP   bc   
0C61   0B                     DEC   bc   
0C62   DD E9                  JP   (ix)   
0C64                ERROR:       
0C64   CD 60 0C               CALL   run   
0C67   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C74   C3 BC 0B               JP   interpret   
0C77                BACKSPACE_:      
0C77   79                     LD   a,c   
0C78   B0                     OR   b   
0C79   CA CB 0B               JP   z,interpret2   
0C7C   0B                     DEC   bc   
0C7D   CD 41 0B               CALL   printStr   
0C80   08 20 08 00            .CSTR   "\b \b"   
0C84   C3 CB 0B               JP   interpret2   
0C87                             ; edit
0C87                EDIT_:       
0C87   CD 60 0C               CALL   run   
0C8A   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9C   C3 BC 0B               JP   interpret   
0C9F                REEDIT_:      
0C9F   C3 BC 0B               JP   interpret   
0CA2                PRINTSTACK_:      
0CA2   CD 60 0C               CALL   run   
0CA5   2F 70 6B 00            .CSTR   "/pk"   
0CA9   C3 BC 0B               JP   interpret   
0CAC                             ; editDef:
0CAC                             ;     pop hl                      ; pop ret address
0CAC                             ;     ex (sp),hl                  ; swap with TOS
0CAC                             ;     push hl                     ; dup TOS
0CAC                             ;     ld a,l                      ; a = ident
0CAC                             ;     ld de,TIB                   ; de = start of TIB
0CAC                             ;     ld (vTIBPtr),de             ; update TIB*
0CAC                             ;     push ix                     ; save NEXT
0CAC                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAC                             ;     jp lookupRef                ; convert letter into address
0CAC                             ; editDef0:
0CAC                             ;     ld e,(hl)                   ; de = (hl++)
0CAC                             ;     inc hl
0CAC                             ;     ld d,(hl)
0CAC                             ;     ld a,d                      ; de == 0 ?
0CAC                             ;     or e
0CAC                             ;     jr z,editDef4
0CAC                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAC                             ;     ex de,hl
0CAC                             ;     ld a,(hl)
0CAC                             ;     cp "{"
0CAC                             ;     jr nz,editDef1
0CAC                             ;     jp editBlock0               ; convert letter into address
0CAC                             ; editDef1:
0CAC                             ;     cp "("
0CAC                             ;     jr nz,editDef2
0CAC                             ;     jp editBlock0               ; convert letter into address
0CAC                             ; editDef2:
0CAC                             ;     jp editLambda
0CAC                             ; editDef3:
0CAC                             ;     ld a," "                    ; write assign
0CAC                             ;     call writeChar
0CAC                             ;     pop hl                      ; a = ident
0CAC                             ;     ld a,l
0CAC                             ;     call writeChar
0CAC                             ;     ld a,"="                    ; write assign
0CAC                             ;     call writeChar
0CAC                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAC                             ;     jp printTIB
0CAC                             ; editDef4:
0CAC                             ;     pop ix                      ; restore NEXT
0CAC                             ;     jp (ix)
0CAC                             ; writeChar:
0CAC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAC                             ;     ld (de),a                   ; write ident
0CAC                             ;     inc de
0CAC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAC                             ;     ret
0CAC                             ; ; printTIB
0CAC                             ; printTIB:
0CAC                             ;     ld hl,(vTIBPtr)
0CAC                             ;     ld de,TIB
0CAC                             ;     or a
0CAC                             ;     sbc hl,de
0CAC                             ;     jp printTIB2
0CAC                             ; printTIB1:
0CAC                             ;     ld a,(de)
0CAC                             ;     call putchar
0CAC                             ; printTIB2:
0CAC                             ;     ld a,l
0CAC                             ;     or h
0CAC                             ;     jr nz,printTIB1
0CAC                             ;     jp (ix)
0CAC                             ; editBlock:
0CAC                             ;     pop hl                      ; hl = block*
0CAC                             ; editBlock0:
0CAC                             ;     push ix                     ; save next
0CAC                             ;     push hl                     ; push block*
0CAC                             ;     push hl                     ; push block*
0CAC                             ;     ld ix,(editBlock2)
0CAC                             ;     jp blockLength
0CAC                             ; editBlock1:
0CAC                             ;     pop hl                      ; bc = length, (sp) = IP
0CAC                             ;     pop de                      ; de = block*
0CAC                             ;     ld a,l
0CAC                             ;     or h
0CAC                             ;     jr z,editBlock2
0CAC                             ;     push bc
0CAC                             ;     ld bc,hl
0CAC                             ;     ex de,hl                    ; hl = block*
0CAC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAC                             ;     ldir                        ; copy block to TIB
0CAC                             ;     ld (vTIBPtr),de              ; save TIB*
0CAC                             ;     pop bc
0CAC                             ; editBlock2:
0CAC                             ;     pop ix                      ; restore next
0CAC                             ;     jp (ix)
0CAC                             ; editLambda:
0CAC                             ;     jp (ix)
0CAC                             ; editArray:
0CAC                             ;     jp (ix)
0CAC                             ; editArglist:
0CAC                             ;     jp (ix)
0CAC                             ; ; blockLength
0CAC                             ; ; addr1 -- length
0CAC                             ; blockLength:
0CAC                             ;     pop hl                      ; block*
0CAC                             ;     push hl                     ; save block*
0CAC                             ;     inc hl                      ; skip first char
0CAC                             ;     ld d,1                      ; increase nesting
0CAC                             ; blockLength1:                   ; Skip to end of definition
0CAC                             ;     ld a,(hl)                   ; Get the next character
0CAC                             ;     inc hl                      ; Point to next character
0CAC                             ;     cp " " + 1                  ; ignore whitespace
0CAC                             ;     jr c,blockLength1
0CAC                             ;     cp ")"
0CAC                             ;     jr z,blockLength4
0CAC                             ;     cp "}"
0CAC                             ;     jr z,blockLength4
0CAC                             ;     cp "]"
0CAC                             ;     jr z,blockLength4
0CAC                             ;     cp "("
0CAC                             ;     jr z,blockLength2
0CAC                             ;     cp "{"
0CAC                             ;     jr z,blockLength2
0CAC                             ;     cp "["
0CAC                             ;     jr z,blockLength2
0CAC                             ;     cp "'"
0CAC                             ;     jr z,blockLength3
0CAC                             ;     cp "`"
0CAC                             ;     jr z,blockLength3
0CAC                             ;     cp DQUOTE
0CAC                             ;     jr z,blockLength3
0CAC                             ;     jr blockLength1
0CAC                             ; blockLength2:
0CAC                             ;     inc d
0CAC                             ;     jr blockLength1
0CAC                             ; blockLength4:
0CAC                             ;     dec d
0CAC                             ;     jr nz, blockLength1         ; get the next element
0CAC                             ; blockLength3:
0CAC                             ;     ld a,$80
0CAC                             ;     xor d
0CAC                             ;     ld d,a
0CAC                             ;     jr nz, blockLength1
0CAC                             ;     pop hl                      ; hl = block*
0CAC                             ;     or a
0CAC                             ;     sbc hl,de
0CAC                             ;     push hl
0CAC                             ;     jp (ix)
0CAC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAC                             ; \a start of stack \#3 depth \b base \$ prompt
0CAC                             ; DW dStack               ; a vS0 start of datastack			
0CAC                             ; DW FALSE                ; b vBase16
0CAC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAC                             ; DW 0                    ; d
0CAC                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAC                             ; DW 0                    ; f
0CAC                             ; DW page6                ; g 256 bytes limits
0CAC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAC                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "(1.)^", 0
0D00   31 00 4A               LD   SP,STACK   
0D03   CD 89 0B               CALL   coldInit   
0D06   CD 6D 48               CALL   execStr   
0D09   28 31 2E 29 5E 00      .CSTR   "(1.)^"   
0D0F   CD C9 0A               CALL   flushBuffer   
0D12                          ;*Macro unroll:  expect "(1.)^",0
0D12   E1                     POP   HL   
0D13   E5                     PUSH   HL   
0D14   11 00 00               LD   DE,0   
0D17   B7                     OR   A   
0D18   ED 52                  SBC   HL,DE   
0D1A   7D                     LD   A,L   
0D1B   B4                     OR   H   
0D1C   CA 7C 0D               JP   Z,expectM_0_2654S45   
0D1F   CD 41 0B               CALL   printStr   
0D22   43 6F 64 65 3A 20 28 31 2E 29 5E 00 .CSTR   "Code: ","(1.)^"   
0D2E   CD 41 0B               CALL   printStr   
0D31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D40   21 00 00               LD   hl,0   
0D43   E5                     PUSH   hl   
0D44   E5                     PUSH   hl   
0D45   CD 60 0C               CALL   run   
0D48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0D50   CD C9 0A               CALL   flushBuffer   
0D53   CD 41 0B               CALL   printStr   
0D56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D63   E1                     POP   hl   
0D64   E5                     PUSH   hl   
0D65   E5                     PUSH   hl   
0D66   CD 60 0C               CALL   run   
0D69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0D78   CD C9 0A               CALL   flushBuffer   
0D7B   76                     HALT      
0D7C                EXPECTM_0_2654S45:      
0D7C   E1                     POP   HL   
0D7D   CD 41 0B               CALL   printStr   
0D80   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D86   76                     HALT      
0D87                             ; 
0D87                          ;*Macro unroll:  test "/f", false
0D87   31 00 4A               LD   SP,STACK   
0D8A   CD 89 0B               CALL   coldInit   
0D8D   CD 6D 48               CALL   execStr   
0D90   2F 66 00               .CSTR   "/f"   
0D93   CD C9 0A               CALL   flushBuffer   
0D96                          ;*Macro unroll:  expect "/f",false
0D96   E1                     POP   HL   
0D97   E5                     PUSH   HL   
0D98   11 00 00               LD   DE,false   
0D9B   B7                     OR   A   
0D9C   ED 52                  SBC   HL,DE   
0D9E   7D                     LD   A,L   
0D9F   B4                     OR   H   
0DA0   CA FD 0D               JP   Z,expectM_0_2659S45   
0DA3   CD 41 0B               CALL   printStr   
0DA6   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DAF   CD 41 0B               CALL   printStr   
0DB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DC1   21 00 00               LD   hl,false   
0DC4   E5                     PUSH   hl   
0DC5   E5                     PUSH   hl   
0DC6   CD 60 0C               CALL   run   
0DC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0DD1   CD C9 0A               CALL   flushBuffer   
0DD4   CD 41 0B               CALL   printStr   
0DD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DE4   E1                     POP   hl   
0DE5   E5                     PUSH   hl   
0DE6   E5                     PUSH   hl   
0DE7   CD 60 0C               CALL   run   
0DEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0DF9   CD C9 0A               CALL   flushBuffer   
0DFC   76                     HALT      
0DFD                EXPECTM_0_2659S45:      
0DFD   E1                     POP   HL   
0DFE                          ;*Macro unroll:  test "/t", true
0DFE   31 00 4A               LD   SP,STACK   
0E01   CD 89 0B               CALL   coldInit   
0E04   CD 6D 48               CALL   execStr   
0E07   2F 74 00               .CSTR   "/t"   
0E0A   CD C9 0A               CALL   flushBuffer   
0E0D                          ;*Macro unroll:  expect "/t",true
0E0D   E1                     POP   HL   
0E0E   E5                     PUSH   HL   
0E0F   11 FF FF               LD   DE,true   
0E12   B7                     OR   A   
0E13   ED 52                  SBC   HL,DE   
0E15   7D                     LD   A,L   
0E16   B4                     OR   H   
0E17   CA 74 0E               JP   Z,expectM_0_2660S45   
0E1A   CD 41 0B               CALL   printStr   
0E1D   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E26   CD 41 0B               CALL   printStr   
0E29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E38   21 FF FF               LD   hl,true   
0E3B   E5                     PUSH   hl   
0E3C   E5                     PUSH   hl   
0E3D   CD 60 0C               CALL   run   
0E40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E48   CD C9 0A               CALL   flushBuffer   
0E4B   CD 41 0B               CALL   printStr   
0E4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5B   E1                     POP   hl   
0E5C   E5                     PUSH   hl   
0E5D   E5                     PUSH   hl   
0E5E   CD 60 0C               CALL   run   
0E61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E70   CD C9 0A               CALL   flushBuffer   
0E73   76                     HALT      
0E74                EXPECTM_0_2660S45:      
0E74   E1                     POP   HL   
0E75                          ;*Macro unroll:  test "1", 1
0E75   31 00 4A               LD   SP,STACK   
0E78   CD 89 0B               CALL   coldInit   
0E7B   CD 6D 48               CALL   execStr   
0E7E   31 00                  .CSTR   "1"   
0E80   CD C9 0A               CALL   flushBuffer   
0E83                          ;*Macro unroll:  expect "1",1
0E83   E1                     POP   HL   
0E84   E5                     PUSH   HL   
0E85   11 01 00               LD   DE,1   
0E88   B7                     OR   A   
0E89   ED 52                  SBC   HL,DE   
0E8B   7D                     LD   A,L   
0E8C   B4                     OR   H   
0E8D   CA E9 0E               JP   Z,expectM_0_2661S45   
0E90   CD 41 0B               CALL   printStr   
0E93   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E9B   CD 41 0B               CALL   printStr   
0E9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EAD   21 01 00               LD   hl,1   
0EB0   E5                     PUSH   hl   
0EB1   E5                     PUSH   hl   
0EB2   CD 60 0C               CALL   run   
0EB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EBD   CD C9 0A               CALL   flushBuffer   
0EC0   CD 41 0B               CALL   printStr   
0EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ED0   E1                     POP   hl   
0ED1   E5                     PUSH   hl   
0ED2   E5                     PUSH   hl   
0ED3   CD 60 0C               CALL   run   
0ED6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE5   CD C9 0A               CALL   flushBuffer   
0EE8   76                     HALT      
0EE9                EXPECTM_0_2661S45:      
0EE9   E1                     POP   HL   
0EEA                          ;*Macro unroll:  test "2", 2
0EEA   31 00 4A               LD   SP,STACK   
0EED   CD 89 0B               CALL   coldInit   
0EF0   CD 6D 48               CALL   execStr   
0EF3   32 00                  .CSTR   "2"   
0EF5   CD C9 0A               CALL   flushBuffer   
0EF8                          ;*Macro unroll:  expect "2",2
0EF8   E1                     POP   HL   
0EF9   E5                     PUSH   HL   
0EFA   11 02 00               LD   DE,2   
0EFD   B7                     OR   A   
0EFE   ED 52                  SBC   HL,DE   
0F00   7D                     LD   A,L   
0F01   B4                     OR   H   
0F02   CA 5E 0F               JP   Z,expectM_0_2662S45   
0F05   CD 41 0B               CALL   printStr   
0F08   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F10   CD 41 0B               CALL   printStr   
0F13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F22   21 02 00               LD   hl,2   
0F25   E5                     PUSH   hl   
0F26   E5                     PUSH   hl   
0F27   CD 60 0C               CALL   run   
0F2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F32   CD C9 0A               CALL   flushBuffer   
0F35   CD 41 0B               CALL   printStr   
0F38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F45   E1                     POP   hl   
0F46   E5                     PUSH   hl   
0F47   E5                     PUSH   hl   
0F48   CD 60 0C               CALL   run   
0F4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F5A   CD C9 0A               CALL   flushBuffer   
0F5D   76                     HALT      
0F5E                EXPECTM_0_2662S45:      
0F5E   E1                     POP   HL   
0F5F                          ;*Macro unroll:  test "1", 1
0F5F   31 00 4A               LD   SP,STACK   
0F62   CD 89 0B               CALL   coldInit   
0F65   CD 6D 48               CALL   execStr   
0F68   31 00                  .CSTR   "1"   
0F6A   CD C9 0A               CALL   flushBuffer   
0F6D                          ;*Macro unroll:  expect "1",1
0F6D   E1                     POP   HL   
0F6E   E5                     PUSH   HL   
0F6F   11 01 00               LD   DE,1   
0F72   B7                     OR   A   
0F73   ED 52                  SBC   HL,DE   
0F75   7D                     LD   A,L   
0F76   B4                     OR   H   
0F77   CA D3 0F               JP   Z,expectM_0_2663S45   
0F7A   CD 41 0B               CALL   printStr   
0F7D   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F85   CD 41 0B               CALL   printStr   
0F88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F97   21 01 00               LD   hl,1   
0F9A   E5                     PUSH   hl   
0F9B   E5                     PUSH   hl   
0F9C   CD 60 0C               CALL   run   
0F9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FA7   CD C9 0A               CALL   flushBuffer   
0FAA   CD 41 0B               CALL   printStr   
0FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBA   E1                     POP   hl   
0FBB   E5                     PUSH   hl   
0FBC   E5                     PUSH   hl   
0FBD   CD 60 0C               CALL   run   
0FC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FCF   CD C9 0A               CALL   flushBuffer   
0FD2   76                     HALT      
0FD3                EXPECTM_0_2663S45:      
0FD3   E1                     POP   HL   
0FD4                          ;*Macro unroll:  test "0", 0
0FD4   31 00 4A               LD   SP,STACK   
0FD7   CD 89 0B               CALL   coldInit   
0FDA   CD 6D 48               CALL   execStr   
0FDD   30 00                  .CSTR   "0"   
0FDF   CD C9 0A               CALL   flushBuffer   
0FE2                          ;*Macro unroll:  expect "0",0
0FE2   E1                     POP   HL   
0FE3   E5                     PUSH   HL   
0FE4   11 00 00               LD   DE,0   
0FE7   B7                     OR   A   
0FE8   ED 52                  SBC   HL,DE   
0FEA   7D                     LD   A,L   
0FEB   B4                     OR   H   
0FEC   CA 48 10               JP   Z,expectM_0_2664S45   
0FEF   CD 41 0B               CALL   printStr   
0FF2   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FFA   CD 41 0B               CALL   printStr   
0FFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
100C   21 00 00               LD   hl,0   
100F   E5                     PUSH   hl   
1010   E5                     PUSH   hl   
1011   CD 60 0C               CALL   run   
1014   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
101C   CD C9 0A               CALL   flushBuffer   
101F   CD 41 0B               CALL   printStr   
1022   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
102F   E1                     POP   hl   
1030   E5                     PUSH   hl   
1031   E5                     PUSH   hl   
1032   CD 60 0C               CALL   run   
1035   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1044   CD C9 0A               CALL   flushBuffer   
1047   76                     HALT      
1048                EXPECTM_0_2664S45:      
1048   E1                     POP   HL   
1049                          ;*Macro unroll:  test "10", 10
1049   31 00 4A               LD   SP,STACK   
104C   CD 89 0B               CALL   coldInit   
104F   CD 6D 48               CALL   execStr   
1052   31 30 00               .CSTR   "10"   
1055   CD C9 0A               CALL   flushBuffer   
1058                          ;*Macro unroll:  expect "10",10
1058   E1                     POP   HL   
1059   E5                     PUSH   HL   
105A   11 0A 00               LD   DE,10   
105D   B7                     OR   A   
105E   ED 52                  SBC   HL,DE   
1060   7D                     LD   A,L   
1061   B4                     OR   H   
1062   CA BF 10               JP   Z,expectM_0_2665S45   
1065   CD 41 0B               CALL   printStr   
1068   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1071   CD 41 0B               CALL   printStr   
1074   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1083   21 0A 00               LD   hl,10   
1086   E5                     PUSH   hl   
1087   E5                     PUSH   hl   
1088   CD 60 0C               CALL   run   
108B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1093   CD C9 0A               CALL   flushBuffer   
1096   CD 41 0B               CALL   printStr   
1099   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A6   E1                     POP   hl   
10A7   E5                     PUSH   hl   
10A8   E5                     PUSH   hl   
10A9   CD 60 0C               CALL   run   
10AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BB   CD C9 0A               CALL   flushBuffer   
10BE   76                     HALT      
10BF                EXPECTM_0_2665S45:      
10BF   E1                     POP   HL   
10C0                          ;*Macro unroll:  test "123", 123
10C0   31 00 4A               LD   SP,STACK   
10C3   CD 89 0B               CALL   coldInit   
10C6   CD 6D 48               CALL   execStr   
10C9   31 32 33 00            .CSTR   "123"   
10CD   CD C9 0A               CALL   flushBuffer   
10D0                          ;*Macro unroll:  expect "123",123
10D0   E1                     POP   HL   
10D1   E5                     PUSH   HL   
10D2   11 7B 00               LD   DE,123   
10D5   B7                     OR   A   
10D6   ED 52                  SBC   HL,DE   
10D8   7D                     LD   A,L   
10D9   B4                     OR   H   
10DA   CA 38 11               JP   Z,expectM_0_2666S45   
10DD   CD 41 0B               CALL   printStr   
10E0   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10EA   CD 41 0B               CALL   printStr   
10ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FC   21 7B 00               LD   hl,123   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD 60 0C               CALL   run   
1104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110C   CD C9 0A               CALL   flushBuffer   
110F   CD 41 0B               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 60 0C               CALL   run   
1125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1134   CD C9 0A               CALL   flushBuffer   
1137   76                     HALT      
1138                EXPECTM_0_2666S45:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "-1",-1
1139   31 00 4A               LD   SP,STACK   
113C   CD 89 0B               CALL   coldInit   
113F   CD 6D 48               CALL   execStr   
1142   2D 31 00               .CSTR   "-1"   
1145   CD C9 0A               CALL   flushBuffer   
1148                          ;*Macro unroll:  expect "-1",-1
1148   E1                     POP   HL   
1149   E5                     PUSH   HL   
114A   11 FF FF               LD   DE,-1   
114D   B7                     OR   A   
114E   ED 52                  SBC   HL,DE   
1150   7D                     LD   A,L   
1151   B4                     OR   H   
1152   CA AF 11               JP   Z,expectM_0_2667S45   
1155   CD 41 0B               CALL   printStr   
1158   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1161   CD 41 0B               CALL   printStr   
1164   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1173   21 FF FF               LD   hl,-1   
1176   E5                     PUSH   hl   
1177   E5                     PUSH   hl   
1178   CD 60 0C               CALL   run   
117B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1183   CD C9 0A               CALL   flushBuffer   
1186   CD 41 0B               CALL   printStr   
1189   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1196   E1                     POP   hl   
1197   E5                     PUSH   hl   
1198   E5                     PUSH   hl   
1199   CD 60 0C               CALL   run   
119C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AB   CD C9 0A               CALL   flushBuffer   
11AE   76                     HALT      
11AF                EXPECTM_0_2667S45:      
11AF   E1                     POP   HL   
11B0                          ;*Macro unroll:  test "''", 0
11B0   31 00 4A               LD   SP,STACK   
11B3   CD 89 0B               CALL   coldInit   
11B6   CD 6D 48               CALL   execStr   
11B9   27 27 00               .CSTR   "''"   
11BC   CD C9 0A               CALL   flushBuffer   
11BF                          ;*Macro unroll:  expect "''",0
11BF   E1                     POP   HL   
11C0   E5                     PUSH   HL   
11C1   11 00 00               LD   DE,0   
11C4   B7                     OR   A   
11C5   ED 52                  SBC   HL,DE   
11C7   7D                     LD   A,L   
11C8   B4                     OR   H   
11C9   CA 26 12               JP   Z,expectM_0_2668S45   
11CC   CD 41 0B               CALL   printStr   
11CF   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11D8   CD 41 0B               CALL   printStr   
11DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EA   21 00 00               LD   hl,0   
11ED   E5                     PUSH   hl   
11EE   E5                     PUSH   hl   
11EF   CD 60 0C               CALL   run   
11F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FA   CD C9 0A               CALL   flushBuffer   
11FD   CD 41 0B               CALL   printStr   
1200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120D   E1                     POP   hl   
120E   E5                     PUSH   hl   
120F   E5                     PUSH   hl   
1210   CD 60 0C               CALL   run   
1213   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1222   CD C9 0A               CALL   flushBuffer   
1225   76                     HALT      
1226                EXPECTM_0_2668S45:      
1226   E1                     POP   HL   
1227                          ;*Macro unroll:  test "'a'", $61
1227   31 00 4A               LD   SP,STACK   
122A   CD 89 0B               CALL   coldInit   
122D   CD 6D 48               CALL   execStr   
1230   27 61 27 00            .CSTR   "'a'"   
1234   CD C9 0A               CALL   flushBuffer   
1237                          ;*Macro unroll:  expect "'a'",$61
1237   E1                     POP   HL   
1238   E5                     PUSH   HL   
1239   11 61 00               LD   DE,$61   
123C   B7                     OR   A   
123D   ED 52                  SBC   HL,DE   
123F   7D                     LD   A,L   
1240   B4                     OR   H   
1241   CA 9F 12               JP   Z,expectM_0_2669S45   
1244   CD 41 0B               CALL   printStr   
1247   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1251   CD 41 0B               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 61 00               LD   hl,$61   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 60 0C               CALL   run   
126B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1273   CD C9 0A               CALL   flushBuffer   
1276   CD 41 0B               CALL   printStr   
1279   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1286   E1                     POP   hl   
1287   E5                     PUSH   hl   
1288   E5                     PUSH   hl   
1289   CD 60 0C               CALL   run   
128C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129B   CD C9 0A               CALL   flushBuffer   
129E   76                     HALT      
129F                EXPECTM_0_2669S45:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "'\\''", $27
12A0   31 00 4A               LD   SP,STACK   
12A3   CD 89 0B               CALL   coldInit   
12A6   CD 6D 48               CALL   execStr   
12A9   27 5C 27 27 00         .CSTR   "'\\''"   
12AE   CD C9 0A               CALL   flushBuffer   
12B1                          ;*Macro unroll:  expect "'\\''",$27
12B1   E1                     POP   HL   
12B2   E5                     PUSH   HL   
12B3   11 27 00               LD   DE,$27   
12B6   B7                     OR   A   
12B7   ED 52                  SBC   HL,DE   
12B9   7D                     LD   A,L   
12BA   B4                     OR   H   
12BB   CA 1A 13               JP   Z,expectM_0_2670S45   
12BE   CD 41 0B               CALL   printStr   
12C1   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12CC   CD 41 0B               CALL   printStr   
12CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DE   21 27 00               LD   hl,$27   
12E1   E5                     PUSH   hl   
12E2   E5                     PUSH   hl   
12E3   CD 60 0C               CALL   run   
12E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EE   CD C9 0A               CALL   flushBuffer   
12F1   CD 41 0B               CALL   printStr   
12F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1301   E1                     POP   hl   
1302   E5                     PUSH   hl   
1303   E5                     PUSH   hl   
1304   CD 60 0C               CALL   run   
1307   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1316   CD C9 0A               CALL   flushBuffer   
1319   76                     HALT      
131A                EXPECTM_0_2670S45:      
131A   E1                     POP   HL   
131B                          ;*Macro unroll:  test "#10", $10
131B   31 00 4A               LD   SP,STACK   
131E   CD 89 0B               CALL   coldInit   
1321   CD 6D 48               CALL   execStr   
1324   23 31 30 00            .CSTR   "#10"   
1328   CD C9 0A               CALL   flushBuffer   
132B                          ;*Macro unroll:  expect "#10",$10
132B   E1                     POP   HL   
132C   E5                     PUSH   HL   
132D   11 10 00               LD   DE,$10   
1330   B7                     OR   A   
1331   ED 52                  SBC   HL,DE   
1333   7D                     LD   A,L   
1334   B4                     OR   H   
1335   CA 93 13               JP   Z,expectM_0_2671S45   
1338   CD 41 0B               CALL   printStr   
133B   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1345   CD 41 0B               CALL   printStr   
1348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1357   21 10 00               LD   hl,$10   
135A   E5                     PUSH   hl   
135B   E5                     PUSH   hl   
135C   CD 60 0C               CALL   run   
135F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1367   CD C9 0A               CALL   flushBuffer   
136A   CD 41 0B               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   E5                     PUSH   hl   
137D   CD 60 0C               CALL   run   
1380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138F   CD C9 0A               CALL   flushBuffer   
1392   76                     HALT      
1393                EXPECTM_0_2671S45:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "#FF", $FF
1394   31 00 4A               LD   SP,STACK   
1397   CD 89 0B               CALL   coldInit   
139A   CD 6D 48               CALL   execStr   
139D   23 46 46 00            .CSTR   "#FF"   
13A1   CD C9 0A               CALL   flushBuffer   
13A4                          ;*Macro unroll:  expect "#FF",$FF
13A4   E1                     POP   HL   
13A5   E5                     PUSH   HL   
13A6   11 FF 00               LD   DE,$FF   
13A9   B7                     OR   A   
13AA   ED 52                  SBC   HL,DE   
13AC   7D                     LD   A,L   
13AD   B4                     OR   H   
13AE   CA 0C 14               JP   Z,expectM_0_2672S45   
13B1   CD 41 0B               CALL   printStr   
13B4   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
13BE   CD 41 0B               CALL   printStr   
13C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D0   21 FF 00               LD   hl,$FF   
13D3   E5                     PUSH   hl   
13D4   E5                     PUSH   hl   
13D5   CD 60 0C               CALL   run   
13D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E0   CD C9 0A               CALL   flushBuffer   
13E3   CD 41 0B               CALL   printStr   
13E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F3   E1                     POP   hl   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD 60 0C               CALL   run   
13F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1408   CD C9 0A               CALL   flushBuffer   
140B   76                     HALT      
140C                EXPECTM_0_2672S45:      
140C   E1                     POP   HL   
140D                          ;*Macro unroll:  test "-1 2 +",1
140D   31 00 4A               LD   SP,STACK   
1410   CD 89 0B               CALL   coldInit   
1413   CD 6D 48               CALL   execStr   
1416   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
141D   CD C9 0A               CALL   flushBuffer   
1420                          ;*Macro unroll:  expect "-1 2 +",1
1420   E1                     POP   HL   
1421   E5                     PUSH   HL   
1422   11 01 00               LD   DE,1   
1425   B7                     OR   A   
1426   ED 52                  SBC   HL,DE   
1428   7D                     LD   A,L   
1429   B4                     OR   H   
142A   CA 8B 14               JP   Z,expectM_0_2673S45   
142D   CD 41 0B               CALL   printStr   
1430   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
143D   CD 41 0B               CALL   printStr   
1440   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144F   21 01 00               LD   hl,1   
1452   E5                     PUSH   hl   
1453   E5                     PUSH   hl   
1454   CD 60 0C               CALL   run   
1457   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
145F   CD C9 0A               CALL   flushBuffer   
1462   CD 41 0B               CALL   printStr   
1465   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1472   E1                     POP   hl   
1473   E5                     PUSH   hl   
1474   E5                     PUSH   hl   
1475   CD 60 0C               CALL   run   
1478   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1487   CD C9 0A               CALL   flushBuffer   
148A   76                     HALT      
148B                EXPECTM_0_2673S45:      
148B   E1                     POP   HL   
148C                          ;*Macro unroll:  test "-1 1 +",0
148C   31 00 4A               LD   SP,STACK   
148F   CD 89 0B               CALL   coldInit   
1492   CD 6D 48               CALL   execStr   
1495   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
149C   CD C9 0A               CALL   flushBuffer   
149F                          ;*Macro unroll:  expect "-1 1 +",0
149F   E1                     POP   HL   
14A0   E5                     PUSH   HL   
14A1   11 00 00               LD   DE,0   
14A4   B7                     OR   A   
14A5   ED 52                  SBC   HL,DE   
14A7   7D                     LD   A,L   
14A8   B4                     OR   H   
14A9   CA 0A 15               JP   Z,expectM_0_2674S45   
14AC   CD 41 0B               CALL   printStr   
14AF   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
14BC   CD 41 0B               CALL   printStr   
14BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CE   21 00 00               LD   hl,0   
14D1   E5                     PUSH   hl   
14D2   E5                     PUSH   hl   
14D3   CD 60 0C               CALL   run   
14D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14DE   CD C9 0A               CALL   flushBuffer   
14E1   CD 41 0B               CALL   printStr   
14E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14F1   E1                     POP   hl   
14F2   E5                     PUSH   hl   
14F3   E5                     PUSH   hl   
14F4   CD 60 0C               CALL   run   
14F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1506   CD C9 0A               CALL   flushBuffer   
1509   76                     HALT      
150A                EXPECTM_0_2674S45:      
150A   E1                     POP   HL   
150B                          ;*Macro unroll:  test "1 2 +", 3
150B   31 00 4A               LD   SP,STACK   
150E   CD 89 0B               CALL   coldInit   
1511   CD 6D 48               CALL   execStr   
1514   31 20 32 20 2B 00      .CSTR   "1 2 +"   
151A   CD C9 0A               CALL   flushBuffer   
151D                          ;*Macro unroll:  expect "1 2 +",3
151D   E1                     POP   HL   
151E   E5                     PUSH   HL   
151F   11 03 00               LD   DE,3   
1522   B7                     OR   A   
1523   ED 52                  SBC   HL,DE   
1525   7D                     LD   A,L   
1526   B4                     OR   H   
1527   CA 87 15               JP   Z,expectM_0_2675S45   
152A   CD 41 0B               CALL   printStr   
152D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1539   CD 41 0B               CALL   printStr   
153C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
154B   21 03 00               LD   hl,3   
154E   E5                     PUSH   hl   
154F   E5                     PUSH   hl   
1550   CD 60 0C               CALL   run   
1553   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
155B   CD C9 0A               CALL   flushBuffer   
155E   CD 41 0B               CALL   printStr   
1561   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156E   E1                     POP   hl   
156F   E5                     PUSH   hl   
1570   E5                     PUSH   hl   
1571   CD 60 0C               CALL   run   
1574   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1583   CD C9 0A               CALL   flushBuffer   
1586   76                     HALT      
1587                EXPECTM_0_2675S45:      
1587   E1                     POP   HL   
1588                          ;*Macro unroll:  test "4 1 2 +", 3
1588   31 00 4A               LD   SP,STACK   
158B   CD 89 0B               CALL   coldInit   
158E   CD 6D 48               CALL   execStr   
1591   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1599   CD C9 0A               CALL   flushBuffer   
159C                          ;*Macro unroll:  expect "4 1 2 +",3
159C   E1                     POP   HL   
159D   E5                     PUSH   HL   
159E   11 03 00               LD   DE,3   
15A1   B7                     OR   A   
15A2   ED 52                  SBC   HL,DE   
15A4   7D                     LD   A,L   
15A5   B4                     OR   H   
15A6   CA 08 16               JP   Z,expectM_0_2676S45   
15A9   CD 41 0B               CALL   printStr   
15AC   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
15BA   CD 41 0B               CALL   printStr   
15BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CC   21 03 00               LD   hl,3   
15CF   E5                     PUSH   hl   
15D0   E5                     PUSH   hl   
15D1   CD 60 0C               CALL   run   
15D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15DC   CD C9 0A               CALL   flushBuffer   
15DF   CD 41 0B               CALL   printStr   
15E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15EF   E1                     POP   hl   
15F0   E5                     PUSH   hl   
15F1   E5                     PUSH   hl   
15F2   CD 60 0C               CALL   run   
15F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1604   CD C9 0A               CALL   flushBuffer   
1607   76                     HALT      
1608                EXPECTM_0_2676S45:      
1608   E1                     POP   HL   
1609                          ;*Macro unroll:  test "123 456 +", 123+456
1609   31 00 4A               LD   SP,STACK   
160C   CD 89 0B               CALL   coldInit   
160F   CD 6D 48               CALL   execStr   
1612   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
161C   CD C9 0A               CALL   flushBuffer   
161F                          ;*Macro unroll:  expect "123 456 +",123+456
161F   E1                     POP   HL   
1620   E5                     PUSH   HL   
1621   11 43 02               LD   DE,123+456   
1624   B7                     OR   A   
1625   ED 52                  SBC   HL,DE   
1627   7D                     LD   A,L   
1628   B4                     OR   H   
1629   CA 8D 16               JP   Z,expectM_0_2677S45   
162C   CD 41 0B               CALL   printStr   
162F   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
163F   CD 41 0B               CALL   printStr   
1642   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1651   21 43 02               LD   hl,123+456   
1654   E5                     PUSH   hl   
1655   E5                     PUSH   hl   
1656   CD 60 0C               CALL   run   
1659   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1661   CD C9 0A               CALL   flushBuffer   
1664   CD 41 0B               CALL   printStr   
1667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1674   E1                     POP   hl   
1675   E5                     PUSH   hl   
1676   E5                     PUSH   hl   
1677   CD 60 0C               CALL   run   
167A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1689   CD C9 0A               CALL   flushBuffer   
168C   76                     HALT      
168D                EXPECTM_0_2677S45:      
168D   E1                     POP   HL   
168E                          ;*Macro unroll:  test "64 128 +", 64+128
168E   31 00 4A               LD   SP,STACK   
1691   CD 89 0B               CALL   coldInit   
1694   CD 6D 48               CALL   execStr   
1697   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
16A0   CD C9 0A               CALL   flushBuffer   
16A3                          ;*Macro unroll:  expect "64 128 +",64+128
16A3   E1                     POP   HL   
16A4   E5                     PUSH   HL   
16A5   11 C0 00               LD   DE,64+128   
16A8   B7                     OR   A   
16A9   ED 52                  SBC   HL,DE   
16AB   7D                     LD   A,L   
16AC   B4                     OR   H   
16AD   CA 10 17               JP   Z,expectM_0_2678S45   
16B0   CD 41 0B               CALL   printStr   
16B3   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
16C2   CD 41 0B               CALL   printStr   
16C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D4   21 C0 00               LD   hl,64+128   
16D7   E5                     PUSH   hl   
16D8   E5                     PUSH   hl   
16D9   CD 60 0C               CALL   run   
16DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E4   CD C9 0A               CALL   flushBuffer   
16E7   CD 41 0B               CALL   printStr   
16EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F7   E1                     POP   hl   
16F8   E5                     PUSH   hl   
16F9   E5                     PUSH   hl   
16FA   CD 60 0C               CALL   run   
16FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
170C   CD C9 0A               CALL   flushBuffer   
170F   76                     HALT      
1710                EXPECTM_0_2678S45:      
1710   E1                     POP   HL   
1711                          ;*Macro unroll:  test "1 2 +", 3
1711   31 00 4A               LD   SP,STACK   
1714   CD 89 0B               CALL   coldInit   
1717   CD 6D 48               CALL   execStr   
171A   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1720   CD C9 0A               CALL   flushBuffer   
1723                          ;*Macro unroll:  expect "1 2 +",3
1723   E1                     POP   HL   
1724   E5                     PUSH   HL   
1725   11 03 00               LD   DE,3   
1728   B7                     OR   A   
1729   ED 52                  SBC   HL,DE   
172B   7D                     LD   A,L   
172C   B4                     OR   H   
172D   CA 8D 17               JP   Z,expectM_0_2679S45   
1730   CD 41 0B               CALL   printStr   
1733   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
173F   CD 41 0B               CALL   printStr   
1742   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1751   21 03 00               LD   hl,3   
1754   E5                     PUSH   hl   
1755   E5                     PUSH   hl   
1756   CD 60 0C               CALL   run   
1759   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1761   CD C9 0A               CALL   flushBuffer   
1764   CD 41 0B               CALL   printStr   
1767   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1774   E1                     POP   hl   
1775   E5                     PUSH   hl   
1776   E5                     PUSH   hl   
1777   CD 60 0C               CALL   run   
177A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1789   CD C9 0A               CALL   flushBuffer   
178C   76                     HALT      
178D                EXPECTM_0_2679S45:      
178D   E1                     POP   HL   
178E                          ;*Macro unroll:  test "1a= a++ a",2
178E   31 00 4A               LD   SP,STACK   
1791   CD 89 0B               CALL   coldInit   
1794   CD 6D 48               CALL   execStr   
1797   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
17A1   CD C9 0A               CALL   flushBuffer   
17A4                          ;*Macro unroll:  expect "1a= a++ a",2
17A4   E1                     POP   HL   
17A5   E5                     PUSH   HL   
17A6   11 02 00               LD   DE,2   
17A9   B7                     OR   A   
17AA   ED 52                  SBC   HL,DE   
17AC   7D                     LD   A,L   
17AD   B4                     OR   H   
17AE   CA 12 18               JP   Z,expectM_0_2680S45   
17B1   CD 41 0B               CALL   printStr   
17B4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
17C4   CD 41 0B               CALL   printStr   
17C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D6   21 02 00               LD   hl,2   
17D9   E5                     PUSH   hl   
17DA   E5                     PUSH   hl   
17DB   CD 60 0C               CALL   run   
17DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17E6   CD C9 0A               CALL   flushBuffer   
17E9   CD 41 0B               CALL   printStr   
17EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F9   E1                     POP   hl   
17FA   E5                     PUSH   hl   
17FB   E5                     PUSH   hl   
17FC   CD 60 0C               CALL   run   
17FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
180E   CD C9 0A               CALL   flushBuffer   
1811   76                     HALT      
1812                EXPECTM_0_2680S45:      
1812   E1                     POP   HL   
1813                          ;*Macro unroll:  test "-1 -1 -",0
1813   31 00 4A               LD   SP,STACK   
1816   CD 89 0B               CALL   coldInit   
1819   CD 6D 48               CALL   execStr   
181C   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1824   CD C9 0A               CALL   flushBuffer   
1827                          ;*Macro unroll:  expect "-1 -1 -",0
1827   E1                     POP   HL   
1828   E5                     PUSH   HL   
1829   11 00 00               LD   DE,0   
182C   B7                     OR   A   
182D   ED 52                  SBC   HL,DE   
182F   7D                     LD   A,L   
1830   B4                     OR   H   
1831   CA 93 18               JP   Z,expectM_0_2681S45   
1834   CD 41 0B               CALL   printStr   
1837   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1845   CD 41 0B               CALL   printStr   
1848   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1857   21 00 00               LD   hl,0   
185A   E5                     PUSH   hl   
185B   E5                     PUSH   hl   
185C   CD 60 0C               CALL   run   
185F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1867   CD C9 0A               CALL   flushBuffer   
186A   CD 41 0B               CALL   printStr   
186D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
187A   E1                     POP   hl   
187B   E5                     PUSH   hl   
187C   E5                     PUSH   hl   
187D   CD 60 0C               CALL   run   
1880   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
188F   CD C9 0A               CALL   flushBuffer   
1892   76                     HALT      
1893                EXPECTM_0_2681S45:      
1893   E1                     POP   HL   
1894                          ;*Macro unroll:  test "5 3 -", 2
1894   31 00 4A               LD   SP,STACK   
1897   CD 89 0B               CALL   coldInit   
189A   CD 6D 48               CALL   execStr   
189D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
18A3   CD C9 0A               CALL   flushBuffer   
18A6                          ;*Macro unroll:  expect "5 3 -",2
18A6   E1                     POP   HL   
18A7   E5                     PUSH   HL   
18A8   11 02 00               LD   DE,2   
18AB   B7                     OR   A   
18AC   ED 52                  SBC   HL,DE   
18AE   7D                     LD   A,L   
18AF   B4                     OR   H   
18B0   CA 10 19               JP   Z,expectM_0_2682S45   
18B3   CD 41 0B               CALL   printStr   
18B6   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
18C2   CD 41 0B               CALL   printStr   
18C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D4   21 02 00               LD   hl,2   
18D7   E5                     PUSH   hl   
18D8   E5                     PUSH   hl   
18D9   CD 60 0C               CALL   run   
18DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E4   CD C9 0A               CALL   flushBuffer   
18E7   CD 41 0B               CALL   printStr   
18EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F7   E1                     POP   hl   
18F8   E5                     PUSH   hl   
18F9   E5                     PUSH   hl   
18FA   CD 60 0C               CALL   run   
18FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
190C   CD C9 0A               CALL   flushBuffer   
190F   76                     HALT      
1910                EXPECTM_0_2682S45:      
1910   E1                     POP   HL   
1911                          ;*Macro unroll:  test "2 1 -",1
1911   31 00 4A               LD   SP,STACK   
1914   CD 89 0B               CALL   coldInit   
1917   CD 6D 48               CALL   execStr   
191A   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1920   CD C9 0A               CALL   flushBuffer   
1923                          ;*Macro unroll:  expect "2 1 -",1
1923   E1                     POP   HL   
1924   E5                     PUSH   HL   
1925   11 01 00               LD   DE,1   
1928   B7                     OR   A   
1929   ED 52                  SBC   HL,DE   
192B   7D                     LD   A,L   
192C   B4                     OR   H   
192D   CA 8D 19               JP   Z,expectM_0_2683S45   
1930   CD 41 0B               CALL   printStr   
1933   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
193F   CD 41 0B               CALL   printStr   
1942   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1951   21 01 00               LD   hl,1   
1954   E5                     PUSH   hl   
1955   E5                     PUSH   hl   
1956   CD 60 0C               CALL   run   
1959   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1961   CD C9 0A               CALL   flushBuffer   
1964   CD 41 0B               CALL   printStr   
1967   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1974   E1                     POP   hl   
1975   E5                     PUSH   hl   
1976   E5                     PUSH   hl   
1977   CD 60 0C               CALL   run   
197A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1989   CD C9 0A               CALL   flushBuffer   
198C   76                     HALT      
198D                EXPECTM_0_2683S45:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "3a= a-- a",2
198E   31 00 4A               LD   SP,STACK   
1991   CD 89 0B               CALL   coldInit   
1994   CD 6D 48               CALL   execStr   
1997   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
19A1   CD C9 0A               CALL   flushBuffer   
19A4                          ;*Macro unroll:  expect "3a= a-- a",2
19A4   E1                     POP   HL   
19A5   E5                     PUSH   HL   
19A6   11 02 00               LD   DE,2   
19A9   B7                     OR   A   
19AA   ED 52                  SBC   HL,DE   
19AC   7D                     LD   A,L   
19AD   B4                     OR   H   
19AE   CA 12 1A               JP   Z,expectM_0_2684S45   
19B1   CD 41 0B               CALL   printStr   
19B4   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
19C4   CD 41 0B               CALL   printStr   
19C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D6   21 02 00               LD   hl,2   
19D9   E5                     PUSH   hl   
19DA   E5                     PUSH   hl   
19DB   CD 60 0C               CALL   run   
19DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19E6   CD C9 0A               CALL   flushBuffer   
19E9   CD 41 0B               CALL   printStr   
19EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F9   E1                     POP   hl   
19FA   E5                     PUSH   hl   
19FB   E5                     PUSH   hl   
19FC   CD 60 0C               CALL   run   
19FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A0E   CD C9 0A               CALL   flushBuffer   
1A11   76                     HALT      
1A12                EXPECTM_0_2684S45:      
1A12   E1                     POP   HL   
1A13                          ;*Macro unroll:  test "3 5 &", 1
1A13   31 00 4A               LD   SP,STACK   
1A16   CD 89 0B               CALL   coldInit   
1A19   CD 6D 48               CALL   execStr   
1A1C   33 20 35 20 26 00      .CSTR   "3 5 &"   
1A22   CD C9 0A               CALL   flushBuffer   
1A25                          ;*Macro unroll:  expect "3 5 &",1
1A25   E1                     POP   HL   
1A26   E5                     PUSH   HL   
1A27   11 01 00               LD   DE,1   
1A2A   B7                     OR   A   
1A2B   ED 52                  SBC   HL,DE   
1A2D   7D                     LD   A,L   
1A2E   B4                     OR   H   
1A2F   CA 8F 1A               JP   Z,expectM_0_2685S45   
1A32   CD 41 0B               CALL   printStr   
1A35   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1A41   CD 41 0B               CALL   printStr   
1A44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A53   21 01 00               LD   hl,1   
1A56   E5                     PUSH   hl   
1A57   E5                     PUSH   hl   
1A58   CD 60 0C               CALL   run   
1A5B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A63   CD C9 0A               CALL   flushBuffer   
1A66   CD 41 0B               CALL   printStr   
1A69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A76   E1                     POP   hl   
1A77   E5                     PUSH   hl   
1A78   E5                     PUSH   hl   
1A79   CD 60 0C               CALL   run   
1A7C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A8B   CD C9 0A               CALL   flushBuffer   
1A8E   76                     HALT      
1A8F                EXPECTM_0_2685S45:      
1A8F   E1                     POP   HL   
1A90                          ;*Macro unroll:  test "3 5 |", 7
1A90   31 00 4A               LD   SP,STACK   
1A93   CD 89 0B               CALL   coldInit   
1A96   CD 6D 48               CALL   execStr   
1A99   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A9F   CD C9 0A               CALL   flushBuffer   
1AA2                          ;*Macro unroll:  expect "3 5 |",7
1AA2   E1                     POP   HL   
1AA3   E5                     PUSH   HL   
1AA4   11 07 00               LD   DE,7   
1AA7   B7                     OR   A   
1AA8   ED 52                  SBC   HL,DE   
1AAA   7D                     LD   A,L   
1AAB   B4                     OR   H   
1AAC   CA 0C 1B               JP   Z,expectM_0_2686S45   
1AAF   CD 41 0B               CALL   printStr   
1AB2   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1ABE   CD 41 0B               CALL   printStr   
1AC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD0   21 07 00               LD   hl,7   
1AD3   E5                     PUSH   hl   
1AD4   E5                     PUSH   hl   
1AD5   CD 60 0C               CALL   run   
1AD8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AE0   CD C9 0A               CALL   flushBuffer   
1AE3   CD 41 0B               CALL   printStr   
1AE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AF3   E1                     POP   hl   
1AF4   E5                     PUSH   hl   
1AF5   E5                     PUSH   hl   
1AF6   CD 60 0C               CALL   run   
1AF9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B08   CD C9 0A               CALL   flushBuffer   
1B0B   76                     HALT      
1B0C                EXPECTM_0_2686S45:      
1B0C   E1                     POP   HL   
1B0D                          ;*Macro unroll:  test "3 5 /x", 6
1B0D   31 00 4A               LD   SP,STACK   
1B10   CD 89 0B               CALL   coldInit   
1B13   CD 6D 48               CALL   execStr   
1B16   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1B1D   CD C9 0A               CALL   flushBuffer   
1B20                          ;*Macro unroll:  expect "3 5 /x",6
1B20   E1                     POP   HL   
1B21   E5                     PUSH   HL   
1B22   11 06 00               LD   DE,6   
1B25   B7                     OR   A   
1B26   ED 52                  SBC   HL,DE   
1B28   7D                     LD   A,L   
1B29   B4                     OR   H   
1B2A   CA 8B 1B               JP   Z,expectM_0_2687S45   
1B2D   CD 41 0B               CALL   printStr   
1B30   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1B3D   CD 41 0B               CALL   printStr   
1B40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B4F   21 06 00               LD   hl,6   
1B52   E5                     PUSH   hl   
1B53   E5                     PUSH   hl   
1B54   CD 60 0C               CALL   run   
1B57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B5F   CD C9 0A               CALL   flushBuffer   
1B62   CD 41 0B               CALL   printStr   
1B65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B72   E1                     POP   hl   
1B73   E5                     PUSH   hl   
1B74   E5                     PUSH   hl   
1B75   CD 60 0C               CALL   run   
1B78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B87   CD C9 0A               CALL   flushBuffer   
1B8A   76                     HALT      
1B8B                EXPECTM_0_2687S45:      
1B8B   E1                     POP   HL   
1B8C                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B8C   31 00 4A               LD   SP,STACK   
1B8F   CD 89 0B               CALL   coldInit   
1B92   CD 6D 48               CALL   execStr   
1B95   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1BA4   CD C9 0A               CALL   flushBuffer   
1BA7                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1BA7   E1                     POP   HL   
1BA8   E5                     PUSH   HL   
1BA9   11 06 00               LD   DE,6   
1BAC   B7                     OR   A   
1BAD   ED 52                  SBC   HL,DE   
1BAF   7D                     LD   A,L   
1BB0   B4                     OR   H   
1BB1   CA 1A 1C               JP   Z,expectM_0_2688S45   
1BB4   CD 41 0B               CALL   printStr   
1BB7   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1BCC   CD 41 0B               CALL   printStr   
1BCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BDE   21 06 00               LD   hl,6   
1BE1   E5                     PUSH   hl   
1BE2   E5                     PUSH   hl   
1BE3   CD 60 0C               CALL   run   
1BE6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BEE   CD C9 0A               CALL   flushBuffer   
1BF1   CD 41 0B               CALL   printStr   
1BF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C01   E1                     POP   hl   
1C02   E5                     PUSH   hl   
1C03   E5                     PUSH   hl   
1C04   CD 60 0C               CALL   run   
1C07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C16   CD C9 0A               CALL   flushBuffer   
1C19   76                     HALT      
1C1A                EXPECTM_0_2688S45:      
1C1A   E1                     POP   HL   
1C1B                          ;*Macro unroll:  test "2 3 *", 6
1C1B   31 00 4A               LD   SP,STACK   
1C1E   CD 89 0B               CALL   coldInit   
1C21   CD 6D 48               CALL   execStr   
1C24   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1C2A   CD C9 0A               CALL   flushBuffer   
1C2D                          ;*Macro unroll:  expect "2 3 *",6
1C2D   E1                     POP   HL   
1C2E   E5                     PUSH   HL   
1C2F   11 06 00               LD   DE,6   
1C32   B7                     OR   A   
1C33   ED 52                  SBC   HL,DE   
1C35   7D                     LD   A,L   
1C36   B4                     OR   H   
1C37   CA 97 1C               JP   Z,expectM_0_2689S45   
1C3A   CD 41 0B               CALL   printStr   
1C3D   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1C49   CD 41 0B               CALL   printStr   
1C4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C5B   21 06 00               LD   hl,6   
1C5E   E5                     PUSH   hl   
1C5F   E5                     PUSH   hl   
1C60   CD 60 0C               CALL   run   
1C63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C6B   CD C9 0A               CALL   flushBuffer   
1C6E   CD 41 0B               CALL   printStr   
1C71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7E   E1                     POP   hl   
1C7F   E5                     PUSH   hl   
1C80   E5                     PUSH   hl   
1C81   CD 60 0C               CALL   run   
1C84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C93   CD C9 0A               CALL   flushBuffer   
1C96   76                     HALT      
1C97                EXPECTM_0_2689S45:      
1C97   E1                     POP   HL   
1C98                          ;*Macro unroll:  test "1 2 3 + *", 5
1C98   31 00 4A               LD   SP,STACK   
1C9B   CD 89 0B               CALL   coldInit   
1C9E   CD 6D 48               CALL   execStr   
1CA1   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1CAB   CD C9 0A               CALL   flushBuffer   
1CAE                          ;*Macro unroll:  expect "1 2 3 + *",5
1CAE   E1                     POP   HL   
1CAF   E5                     PUSH   HL   
1CB0   11 05 00               LD   DE,5   
1CB3   B7                     OR   A   
1CB4   ED 52                  SBC   HL,DE   
1CB6   7D                     LD   A,L   
1CB7   B4                     OR   H   
1CB8   CA 1C 1D               JP   Z,expectM_0_2690S45   
1CBB   CD 41 0B               CALL   printStr   
1CBE   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1CCE   CD 41 0B               CALL   printStr   
1CD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CE0   21 05 00               LD   hl,5   
1CE3   E5                     PUSH   hl   
1CE4   E5                     PUSH   hl   
1CE5   CD 60 0C               CALL   run   
1CE8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CF0   CD C9 0A               CALL   flushBuffer   
1CF3   CD 41 0B               CALL   printStr   
1CF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D03   E1                     POP   hl   
1D04   E5                     PUSH   hl   
1D05   E5                     PUSH   hl   
1D06   CD 60 0C               CALL   run   
1D09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D18   CD C9 0A               CALL   flushBuffer   
1D1B   76                     HALT      
1D1C                EXPECTM_0_2690S45:      
1D1C   E1                     POP   HL   
1D1D                          ;*Macro unroll:  test "7 3 /", 2
1D1D   31 00 4A               LD   SP,STACK   
1D20   CD 89 0B               CALL   coldInit   
1D23   CD 6D 48               CALL   execStr   
1D26   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D2C   CD C9 0A               CALL   flushBuffer   
1D2F                          ;*Macro unroll:  expect "7 3 /",2
1D2F   E1                     POP   HL   
1D30   E5                     PUSH   HL   
1D31   11 02 00               LD   DE,2   
1D34   B7                     OR   A   
1D35   ED 52                  SBC   HL,DE   
1D37   7D                     LD   A,L   
1D38   B4                     OR   H   
1D39   CA 99 1D               JP   Z,expectM_0_2691S45   
1D3C   CD 41 0B               CALL   printStr   
1D3F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D4B   CD 41 0B               CALL   printStr   
1D4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5D   21 02 00               LD   hl,2   
1D60   E5                     PUSH   hl   
1D61   E5                     PUSH   hl   
1D62   CD 60 0C               CALL   run   
1D65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D6D   CD C9 0A               CALL   flushBuffer   
1D70   CD 41 0B               CALL   printStr   
1D73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D80   E1                     POP   hl   
1D81   E5                     PUSH   hl   
1D82   E5                     PUSH   hl   
1D83   CD 60 0C               CALL   run   
1D86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D95   CD C9 0A               CALL   flushBuffer   
1D98   76                     HALT      
1D99                EXPECTM_0_2691S45:      
1D99   E1                     POP   HL   
1D9A                          ;*Macro unroll:  test "7 3 / _", 1
1D9A   31 00 4A               LD   SP,STACK   
1D9D   CD 89 0B               CALL   coldInit   
1DA0   CD 6D 48               CALL   execStr   
1DA3   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1DAB   CD C9 0A               CALL   flushBuffer   
1DAE                          ;*Macro unroll:  expect "7 3 / _",1
1DAE   E1                     POP   HL   
1DAF   E5                     PUSH   HL   
1DB0   11 01 00               LD   DE,1   
1DB3   B7                     OR   A   
1DB4   ED 52                  SBC   HL,DE   
1DB6   7D                     LD   A,L   
1DB7   B4                     OR   H   
1DB8   CA 1A 1E               JP   Z,expectM_0_2692S45   
1DBB   CD 41 0B               CALL   printStr   
1DBE   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1DCC   CD 41 0B               CALL   printStr   
1DCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDE   21 01 00               LD   hl,1   
1DE1   E5                     PUSH   hl   
1DE2   E5                     PUSH   hl   
1DE3   CD 60 0C               CALL   run   
1DE6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DEE   CD C9 0A               CALL   flushBuffer   
1DF1   CD 41 0B               CALL   printStr   
1DF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E01   E1                     POP   hl   
1E02   E5                     PUSH   hl   
1E03   E5                     PUSH   hl   
1E04   CD 60 0C               CALL   run   
1E07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E16   CD C9 0A               CALL   flushBuffer   
1E19   76                     HALT      
1E1A                EXPECTM_0_2692S45:      
1E1A   E1                     POP   HL   
1E1B                          ;*Macro unroll:  test "7 3 /", 2
1E1B   31 00 4A               LD   SP,STACK   
1E1E   CD 89 0B               CALL   coldInit   
1E21   CD 6D 48               CALL   execStr   
1E24   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1E2A   CD C9 0A               CALL   flushBuffer   
1E2D                          ;*Macro unroll:  expect "7 3 /",2
1E2D   E1                     POP   HL   
1E2E   E5                     PUSH   HL   
1E2F   11 02 00               LD   DE,2   
1E32   B7                     OR   A   
1E33   ED 52                  SBC   HL,DE   
1E35   7D                     LD   A,L   
1E36   B4                     OR   H   
1E37   CA 97 1E               JP   Z,expectM_0_2693S45   
1E3A   CD 41 0B               CALL   printStr   
1E3D   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1E49   CD 41 0B               CALL   printStr   
1E4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E5B   21 02 00               LD   hl,2   
1E5E   E5                     PUSH   hl   
1E5F   E5                     PUSH   hl   
1E60   CD 60 0C               CALL   run   
1E63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E6B   CD C9 0A               CALL   flushBuffer   
1E6E   CD 41 0B               CALL   printStr   
1E71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7E   E1                     POP   hl   
1E7F   E5                     PUSH   hl   
1E80   E5                     PUSH   hl   
1E81   CD 60 0C               CALL   run   
1E84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E93   CD C9 0A               CALL   flushBuffer   
1E96   76                     HALT      
1E97                EXPECTM_0_2693S45:      
1E97   E1                     POP   HL   
1E98                          ;*Macro unroll:  test "2 3 ==", FALSE
1E98   31 00 4A               LD   SP,STACK   
1E9B   CD 89 0B               CALL   coldInit   
1E9E   CD 6D 48               CALL   execStr   
1EA1   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1EA8   CD C9 0A               CALL   flushBuffer   
1EAB                          ;*Macro unroll:  expect "2 3 ==",FALSE
1EAB   E1                     POP   HL   
1EAC   E5                     PUSH   HL   
1EAD   11 00 00               LD   DE,FALSE   
1EB0   B7                     OR   A   
1EB1   ED 52                  SBC   HL,DE   
1EB3   7D                     LD   A,L   
1EB4   B4                     OR   H   
1EB5   CA 16 1F               JP   Z,expectM_0_2694S45   
1EB8   CD 41 0B               CALL   printStr   
1EBB   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1EC8   CD 41 0B               CALL   printStr   
1ECB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EDA   21 00 00               LD   hl,FALSE   
1EDD   E5                     PUSH   hl   
1EDE   E5                     PUSH   hl   
1EDF   CD 60 0C               CALL   run   
1EE2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EEA   CD C9 0A               CALL   flushBuffer   
1EED   CD 41 0B               CALL   printStr   
1EF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EFD   E1                     POP   hl   
1EFE   E5                     PUSH   hl   
1EFF   E5                     PUSH   hl   
1F00   CD 60 0C               CALL   run   
1F03   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F12   CD C9 0A               CALL   flushBuffer   
1F15   76                     HALT      
1F16                EXPECTM_0_2694S45:      
1F16   E1                     POP   HL   
1F17                          ;*Macro unroll:  test "3 3 ==", TRUE
1F17   31 00 4A               LD   SP,STACK   
1F1A   CD 89 0B               CALL   coldInit   
1F1D   CD 6D 48               CALL   execStr   
1F20   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1F27   CD C9 0A               CALL   flushBuffer   
1F2A                          ;*Macro unroll:  expect "3 3 ==",TRUE
1F2A   E1                     POP   HL   
1F2B   E5                     PUSH   HL   
1F2C   11 FF FF               LD   DE,TRUE   
1F2F   B7                     OR   A   
1F30   ED 52                  SBC   HL,DE   
1F32   7D                     LD   A,L   
1F33   B4                     OR   H   
1F34   CA 95 1F               JP   Z,expectM_0_2695S45   
1F37   CD 41 0B               CALL   printStr   
1F3A   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1F47   CD 41 0B               CALL   printStr   
1F4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F59   21 FF FF               LD   hl,TRUE   
1F5C   E5                     PUSH   hl   
1F5D   E5                     PUSH   hl   
1F5E   CD 60 0C               CALL   run   
1F61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F69   CD C9 0A               CALL   flushBuffer   
1F6C   CD 41 0B               CALL   printStr   
1F6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F7C   E1                     POP   hl   
1F7D   E5                     PUSH   hl   
1F7E   E5                     PUSH   hl   
1F7F   CD 60 0C               CALL   run   
1F82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F91   CD C9 0A               CALL   flushBuffer   
1F94   76                     HALT      
1F95                EXPECTM_0_2695S45:      
1F95   E1                     POP   HL   
1F96                          ;*Macro unroll:  test "1 2 <", TRUE
1F96   31 00 4A               LD   SP,STACK   
1F99   CD 89 0B               CALL   coldInit   
1F9C   CD 6D 48               CALL   execStr   
1F9F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1FA5   CD C9 0A               CALL   flushBuffer   
1FA8                          ;*Macro unroll:  expect "1 2 <",TRUE
1FA8   E1                     POP   HL   
1FA9   E5                     PUSH   HL   
1FAA   11 FF FF               LD   DE,TRUE   
1FAD   B7                     OR   A   
1FAE   ED 52                  SBC   HL,DE   
1FB0   7D                     LD   A,L   
1FB1   B4                     OR   H   
1FB2   CA 12 20               JP   Z,expectM_0_2696S45   
1FB5   CD 41 0B               CALL   printStr   
1FB8   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1FC4   CD 41 0B               CALL   printStr   
1FC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD6   21 FF FF               LD   hl,TRUE   
1FD9   E5                     PUSH   hl   
1FDA   E5                     PUSH   hl   
1FDB   CD 60 0C               CALL   run   
1FDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE6   CD C9 0A               CALL   flushBuffer   
1FE9   CD 41 0B               CALL   printStr   
1FEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF9   E1                     POP   hl   
1FFA   E5                     PUSH   hl   
1FFB   E5                     PUSH   hl   
1FFC   CD 60 0C               CALL   run   
1FFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
200E   CD C9 0A               CALL   flushBuffer   
2011   76                     HALT      
2012                EXPECTM_0_2696S45:      
2012   E1                     POP   HL   
2013                          ;*Macro unroll:  test "2 1 <", FALSE
2013   31 00 4A               LD   SP,STACK   
2016   CD 89 0B               CALL   coldInit   
2019   CD 6D 48               CALL   execStr   
201C   32 20 31 20 3C 00      .CSTR   "2 1 <"   
2022   CD C9 0A               CALL   flushBuffer   
2025                          ;*Macro unroll:  expect "2 1 <",FALSE
2025   E1                     POP   HL   
2026   E5                     PUSH   HL   
2027   11 00 00               LD   DE,FALSE   
202A   B7                     OR   A   
202B   ED 52                  SBC   HL,DE   
202D   7D                     LD   A,L   
202E   B4                     OR   H   
202F   CA 8F 20               JP   Z,expectM_0_2697S45   
2032   CD 41 0B               CALL   printStr   
2035   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2041   CD 41 0B               CALL   printStr   
2044   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2053   21 00 00               LD   hl,FALSE   
2056   E5                     PUSH   hl   
2057   E5                     PUSH   hl   
2058   CD 60 0C               CALL   run   
205B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2063   CD C9 0A               CALL   flushBuffer   
2066   CD 41 0B               CALL   printStr   
2069   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2076   E1                     POP   hl   
2077   E5                     PUSH   hl   
2078   E5                     PUSH   hl   
2079   CD 60 0C               CALL   run   
207C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
208B   CD C9 0A               CALL   flushBuffer   
208E   76                     HALT      
208F                EXPECTM_0_2697S45:      
208F   E1                     POP   HL   
2090                          ;*Macro unroll:  test "2 3 <", TRUE
2090   31 00 4A               LD   SP,STACK   
2093   CD 89 0B               CALL   coldInit   
2096   CD 6D 48               CALL   execStr   
2099   32 20 33 20 3C 00      .CSTR   "2 3 <"   
209F   CD C9 0A               CALL   flushBuffer   
20A2                          ;*Macro unroll:  expect "2 3 <",TRUE
20A2   E1                     POP   HL   
20A3   E5                     PUSH   HL   
20A4   11 FF FF               LD   DE,TRUE   
20A7   B7                     OR   A   
20A8   ED 52                  SBC   HL,DE   
20AA   7D                     LD   A,L   
20AB   B4                     OR   H   
20AC   CA 0C 21               JP   Z,expectM_0_2698S45   
20AF   CD 41 0B               CALL   printStr   
20B2   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
20BE   CD 41 0B               CALL   printStr   
20C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D0   21 FF FF               LD   hl,TRUE   
20D3   E5                     PUSH   hl   
20D4   E5                     PUSH   hl   
20D5   CD 60 0C               CALL   run   
20D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20E0   CD C9 0A               CALL   flushBuffer   
20E3   CD 41 0B               CALL   printStr   
20E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20F3   E1                     POP   hl   
20F4   E5                     PUSH   hl   
20F5   E5                     PUSH   hl   
20F6   CD 60 0C               CALL   run   
20F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2108   CD C9 0A               CALL   flushBuffer   
210B   76                     HALT      
210C                EXPECTM_0_2698S45:      
210C   E1                     POP   HL   
210D                          ;*Macro unroll:  test "3 3 <", FALSE
210D   31 00 4A               LD   SP,STACK   
2110   CD 89 0B               CALL   coldInit   
2113   CD 6D 48               CALL   execStr   
2116   33 20 33 20 3C 00      .CSTR   "3 3 <"   
211C   CD C9 0A               CALL   flushBuffer   
211F                          ;*Macro unroll:  expect "3 3 <",FALSE
211F   E1                     POP   HL   
2120   E5                     PUSH   HL   
2121   11 00 00               LD   DE,FALSE   
2124   B7                     OR   A   
2125   ED 52                  SBC   HL,DE   
2127   7D                     LD   A,L   
2128   B4                     OR   H   
2129   CA 89 21               JP   Z,expectM_0_2699S45   
212C   CD 41 0B               CALL   printStr   
212F   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
213B   CD 41 0B               CALL   printStr   
213E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214D   21 00 00               LD   hl,FALSE   
2150   E5                     PUSH   hl   
2151   E5                     PUSH   hl   
2152   CD 60 0C               CALL   run   
2155   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
215D   CD C9 0A               CALL   flushBuffer   
2160   CD 41 0B               CALL   printStr   
2163   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2170   E1                     POP   hl   
2171   E5                     PUSH   hl   
2172   E5                     PUSH   hl   
2173   CD 60 0C               CALL   run   
2176   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2185   CD C9 0A               CALL   flushBuffer   
2188   76                     HALT      
2189                EXPECTM_0_2699S45:      
2189   E1                     POP   HL   
218A                          ;*Macro unroll:  test "1 2 >", FALSE
218A   31 00 4A               LD   SP,STACK   
218D   CD 89 0B               CALL   coldInit   
2190   CD 6D 48               CALL   execStr   
2193   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2199   CD C9 0A               CALL   flushBuffer   
219C                          ;*Macro unroll:  expect "1 2 >",FALSE
219C   E1                     POP   HL   
219D   E5                     PUSH   HL   
219E   11 00 00               LD   DE,FALSE   
21A1   B7                     OR   A   
21A2   ED 52                  SBC   HL,DE   
21A4   7D                     LD   A,L   
21A5   B4                     OR   H   
21A6   CA 06 22               JP   Z,expectM_0_2700S45   
21A9   CD 41 0B               CALL   printStr   
21AC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
21B8   CD 41 0B               CALL   printStr   
21BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21CA   21 00 00               LD   hl,FALSE   
21CD   E5                     PUSH   hl   
21CE   E5                     PUSH   hl   
21CF   CD 60 0C               CALL   run   
21D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21DA   CD C9 0A               CALL   flushBuffer   
21DD   CD 41 0B               CALL   printStr   
21E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21ED   E1                     POP   hl   
21EE   E5                     PUSH   hl   
21EF   E5                     PUSH   hl   
21F0   CD 60 0C               CALL   run   
21F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2202   CD C9 0A               CALL   flushBuffer   
2205   76                     HALT      
2206                EXPECTM_0_2700S45:      
2206   E1                     POP   HL   
2207                          ;*Macro unroll:  test "2 1 >", TRUE
2207   31 00 4A               LD   SP,STACK   
220A   CD 89 0B               CALL   coldInit   
220D   CD 6D 48               CALL   execStr   
2210   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2216   CD C9 0A               CALL   flushBuffer   
2219                          ;*Macro unroll:  expect "2 1 >",TRUE
2219   E1                     POP   HL   
221A   E5                     PUSH   HL   
221B   11 FF FF               LD   DE,TRUE   
221E   B7                     OR   A   
221F   ED 52                  SBC   HL,DE   
2221   7D                     LD   A,L   
2222   B4                     OR   H   
2223   CA 83 22               JP   Z,expectM_0_2701S45   
2226   CD 41 0B               CALL   printStr   
2229   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2235   CD 41 0B               CALL   printStr   
2238   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2247   21 FF FF               LD   hl,TRUE   
224A   E5                     PUSH   hl   
224B   E5                     PUSH   hl   
224C   CD 60 0C               CALL   run   
224F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2257   CD C9 0A               CALL   flushBuffer   
225A   CD 41 0B               CALL   printStr   
225D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226A   E1                     POP   hl   
226B   E5                     PUSH   hl   
226C   E5                     PUSH   hl   
226D   CD 60 0C               CALL   run   
2270   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
227F   CD C9 0A               CALL   flushBuffer   
2282   76                     HALT      
2283                EXPECTM_0_2701S45:      
2283   E1                     POP   HL   
2284                          ;*Macro unroll:  test "3 3 >", FALSE
2284   31 00 4A               LD   SP,STACK   
2287   CD 89 0B               CALL   coldInit   
228A   CD 6D 48               CALL   execStr   
228D   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2293   CD C9 0A               CALL   flushBuffer   
2296                          ;*Macro unroll:  expect "3 3 >",FALSE
2296   E1                     POP   HL   
2297   E5                     PUSH   HL   
2298   11 00 00               LD   DE,FALSE   
229B   B7                     OR   A   
229C   ED 52                  SBC   HL,DE   
229E   7D                     LD   A,L   
229F   B4                     OR   H   
22A0   CA 00 23               JP   Z,expectM_0_2702S45   
22A3   CD 41 0B               CALL   printStr   
22A6   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
22B2   CD 41 0B               CALL   printStr   
22B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C4   21 00 00               LD   hl,FALSE   
22C7   E5                     PUSH   hl   
22C8   E5                     PUSH   hl   
22C9   CD 60 0C               CALL   run   
22CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22D4   CD C9 0A               CALL   flushBuffer   
22D7   CD 41 0B               CALL   printStr   
22DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E7   E1                     POP   hl   
22E8   E5                     PUSH   hl   
22E9   E5                     PUSH   hl   
22EA   CD 60 0C               CALL   run   
22ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22FC   CD C9 0A               CALL   flushBuffer   
22FF   76                     HALT      
2300                EXPECTM_0_2702S45:      
2300   E1                     POP   HL   
2301                          ;*Macro unroll:  test "4 3 >", TRUE
2301   31 00 4A               LD   SP,STACK   
2304   CD 89 0B               CALL   coldInit   
2307   CD 6D 48               CALL   execStr   
230A   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2310   CD C9 0A               CALL   flushBuffer   
2313                          ;*Macro unroll:  expect "4 3 >",TRUE
2313   E1                     POP   HL   
2314   E5                     PUSH   HL   
2315   11 FF FF               LD   DE,TRUE   
2318   B7                     OR   A   
2319   ED 52                  SBC   HL,DE   
231B   7D                     LD   A,L   
231C   B4                     OR   H   
231D   CA 7D 23               JP   Z,expectM_0_2703S45   
2320   CD 41 0B               CALL   printStr   
2323   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
232F   CD 41 0B               CALL   printStr   
2332   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2341   21 FF FF               LD   hl,TRUE   
2344   E5                     PUSH   hl   
2345   E5                     PUSH   hl   
2346   CD 60 0C               CALL   run   
2349   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2351   CD C9 0A               CALL   flushBuffer   
2354   CD 41 0B               CALL   printStr   
2357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2364   E1                     POP   hl   
2365   E5                     PUSH   hl   
2366   E5                     PUSH   hl   
2367   CD 60 0C               CALL   run   
236A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2379   CD C9 0A               CALL   flushBuffer   
237C   76                     HALT      
237D                EXPECTM_0_2703S45:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "2 2 <=", TRUE
237E   31 00 4A               LD   SP,STACK   
2381   CD 89 0B               CALL   coldInit   
2384   CD 6D 48               CALL   execStr   
2387   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
238E   CD C9 0A               CALL   flushBuffer   
2391                          ;*Macro unroll:  expect "2 2 <=",TRUE
2391   E1                     POP   HL   
2392   E5                     PUSH   HL   
2393   11 FF FF               LD   DE,TRUE   
2396   B7                     OR   A   
2397   ED 52                  SBC   HL,DE   
2399   7D                     LD   A,L   
239A   B4                     OR   H   
239B   CA FC 23               JP   Z,expectM_0_2704S45   
239E   CD 41 0B               CALL   printStr   
23A1   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
23AE   CD 41 0B               CALL   printStr   
23B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23C0   21 FF FF               LD   hl,TRUE   
23C3   E5                     PUSH   hl   
23C4   E5                     PUSH   hl   
23C5   CD 60 0C               CALL   run   
23C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23D0   CD C9 0A               CALL   flushBuffer   
23D3   CD 41 0B               CALL   printStr   
23D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E3   E1                     POP   hl   
23E4   E5                     PUSH   hl   
23E5   E5                     PUSH   hl   
23E6   CD 60 0C               CALL   run   
23E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F8   CD C9 0A               CALL   flushBuffer   
23FB   76                     HALT      
23FC                EXPECTM_0_2704S45:      
23FC   E1                     POP   HL   
23FD                          ;*Macro unroll:  test "2 2 >=", TRUE
23FD   31 00 4A               LD   SP,STACK   
2400   CD 89 0B               CALL   coldInit   
2403   CD 6D 48               CALL   execStr   
2406   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
240D   CD C9 0A               CALL   flushBuffer   
2410                          ;*Macro unroll:  expect "2 2 >=",TRUE
2410   E1                     POP   HL   
2411   E5                     PUSH   HL   
2412   11 FF FF               LD   DE,TRUE   
2415   B7                     OR   A   
2416   ED 52                  SBC   HL,DE   
2418   7D                     LD   A,L   
2419   B4                     OR   H   
241A   CA 7B 24               JP   Z,expectM_0_2705S45   
241D   CD 41 0B               CALL   printStr   
2420   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
242D   CD 41 0B               CALL   printStr   
2430   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243F   21 FF FF               LD   hl,TRUE   
2442   E5                     PUSH   hl   
2443   E5                     PUSH   hl   
2444   CD 60 0C               CALL   run   
2447   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244F   CD C9 0A               CALL   flushBuffer   
2452   CD 41 0B               CALL   printStr   
2455   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2462   E1                     POP   hl   
2463   E5                     PUSH   hl   
2464   E5                     PUSH   hl   
2465   CD 60 0C               CALL   run   
2468   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2477   CD C9 0A               CALL   flushBuffer   
247A   76                     HALT      
247B                EXPECTM_0_2705S45:      
247B   E1                     POP   HL   
247C                          ;*Macro unroll:  test "3 1 <<", 6
247C   31 00 4A               LD   SP,STACK   
247F   CD 89 0B               CALL   coldInit   
2482   CD 6D 48               CALL   execStr   
2485   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
248C   CD C9 0A               CALL   flushBuffer   
248F                          ;*Macro unroll:  expect "3 1 <<",6
248F   E1                     POP   HL   
2490   E5                     PUSH   HL   
2491   11 06 00               LD   DE,6   
2494   B7                     OR   A   
2495   ED 52                  SBC   HL,DE   
2497   7D                     LD   A,L   
2498   B4                     OR   H   
2499   CA FA 24               JP   Z,expectM_0_2706S45   
249C   CD 41 0B               CALL   printStr   
249F   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
24AC   CD 41 0B               CALL   printStr   
24AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BE   21 06 00               LD   hl,6   
24C1   E5                     PUSH   hl   
24C2   E5                     PUSH   hl   
24C3   CD 60 0C               CALL   run   
24C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CE   CD C9 0A               CALL   flushBuffer   
24D1   CD 41 0B               CALL   printStr   
24D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E1   E1                     POP   hl   
24E2   E5                     PUSH   hl   
24E3   E5                     PUSH   hl   
24E4   CD 60 0C               CALL   run   
24E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F6   CD C9 0A               CALL   flushBuffer   
24F9   76                     HALT      
24FA                EXPECTM_0_2706S45:      
24FA   E1                     POP   HL   
24FB                          ;*Macro unroll:  test "10 1 >>", 5
24FB   31 00 4A               LD   SP,STACK   
24FE   CD 89 0B               CALL   coldInit   
2501   CD 6D 48               CALL   execStr   
2504   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
250C   CD C9 0A               CALL   flushBuffer   
250F                          ;*Macro unroll:  expect "10 1 >>",5
250F   E1                     POP   HL   
2510   E5                     PUSH   HL   
2511   11 05 00               LD   DE,5   
2514   B7                     OR   A   
2515   ED 52                  SBC   HL,DE   
2517   7D                     LD   A,L   
2518   B4                     OR   H   
2519   CA 7B 25               JP   Z,expectM_0_2707S45   
251C   CD 41 0B               CALL   printStr   
251F   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
252D   CD 41 0B               CALL   printStr   
2530   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253F   21 05 00               LD   hl,5   
2542   E5                     PUSH   hl   
2543   E5                     PUSH   hl   
2544   CD 60 0C               CALL   run   
2547   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254F   CD C9 0A               CALL   flushBuffer   
2552   CD 41 0B               CALL   printStr   
2555   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2562   E1                     POP   hl   
2563   E5                     PUSH   hl   
2564   E5                     PUSH   hl   
2565   CD 60 0C               CALL   run   
2568   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2577   CD C9 0A               CALL   flushBuffer   
257A   76                     HALT      
257B                EXPECTM_0_2707S45:      
257B   E1                     POP   HL   
257C                          ;*Macro unroll:  test "1 x = x", 1
257C   31 00 4A               LD   SP,STACK   
257F   CD 89 0B               CALL   coldInit   
2582   CD 6D 48               CALL   execStr   
2585   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
258D   CD C9 0A               CALL   flushBuffer   
2590                          ;*Macro unroll:  expect "1 x = x",1
2590   E1                     POP   HL   
2591   E5                     PUSH   HL   
2592   11 01 00               LD   DE,1   
2595   B7                     OR   A   
2596   ED 52                  SBC   HL,DE   
2598   7D                     LD   A,L   
2599   B4                     OR   H   
259A   CA FC 25               JP   Z,expectM_0_2708S45   
259D   CD 41 0B               CALL   printStr   
25A0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
25AE   CD 41 0B               CALL   printStr   
25B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C0   21 01 00               LD   hl,1   
25C3   E5                     PUSH   hl   
25C4   E5                     PUSH   hl   
25C5   CD 60 0C               CALL   run   
25C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25D0   CD C9 0A               CALL   flushBuffer   
25D3   CD 41 0B               CALL   printStr   
25D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25E3   E1                     POP   hl   
25E4   E5                     PUSH   hl   
25E5   E5                     PUSH   hl   
25E6   CD 60 0C               CALL   run   
25E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F8   CD C9 0A               CALL   flushBuffer   
25FB   76                     HALT      
25FC                EXPECTM_0_2708S45:      
25FC   E1                     POP   HL   
25FD                          ;*Macro unroll:  test "1{}^", 1
25FD   31 00 4A               LD   SP,STACK   
2600   CD 89 0B               CALL   coldInit   
2603   CD 6D 48               CALL   execStr   
2606   31 7B 7D 5E 00         .CSTR   "1{}^"   
260B   CD C9 0A               CALL   flushBuffer   
260E                          ;*Macro unroll:  expect "1{}^",1
260E   E1                     POP   HL   
260F   E5                     PUSH   HL   
2610   11 01 00               LD   DE,1   
2613   B7                     OR   A   
2614   ED 52                  SBC   HL,DE   
2616   7D                     LD   A,L   
2617   B4                     OR   H   
2618   CA 77 26               JP   Z,expectM_0_2709S45   
261B   CD 41 0B               CALL   printStr   
261E   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2629   CD 41 0B               CALL   printStr   
262C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
263B   21 01 00               LD   hl,1   
263E   E5                     PUSH   hl   
263F   E5                     PUSH   hl   
2640   CD 60 0C               CALL   run   
2643   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
264B   CD C9 0A               CALL   flushBuffer   
264E   CD 41 0B               CALL   printStr   
2651   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
265E   E1                     POP   hl   
265F   E5                     PUSH   hl   
2660   E5                     PUSH   hl   
2661   CD 60 0C               CALL   run   
2664   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2673   CD C9 0A               CALL   flushBuffer   
2676   76                     HALT      
2677                EXPECTM_0_2709S45:      
2677   E1                     POP   HL   
2678                          ;*Macro unroll:  test "{1}^", 1
2678   31 00 4A               LD   SP,STACK   
267B   CD 89 0B               CALL   coldInit   
267E   CD 6D 48               CALL   execStr   
2681   7B 31 7D 5E 00         .CSTR   "{1}^"   
2686   CD C9 0A               CALL   flushBuffer   
2689                          ;*Macro unroll:  expect "{1}^",1
2689   E1                     POP   HL   
268A   E5                     PUSH   HL   
268B   11 01 00               LD   DE,1   
268E   B7                     OR   A   
268F   ED 52                  SBC   HL,DE   
2691   7D                     LD   A,L   
2692   B4                     OR   H   
2693   CA F2 26               JP   Z,expectM_0_2710S45   
2696   CD 41 0B               CALL   printStr   
2699   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
26A4   CD 41 0B               CALL   printStr   
26A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B6   21 01 00               LD   hl,1   
26B9   E5                     PUSH   hl   
26BA   E5                     PUSH   hl   
26BB   CD 60 0C               CALL   run   
26BE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C6   CD C9 0A               CALL   flushBuffer   
26C9   CD 41 0B               CALL   printStr   
26CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D9   E1                     POP   hl   
26DA   E5                     PUSH   hl   
26DB   E5                     PUSH   hl   
26DC   CD 60 0C               CALL   run   
26DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26EE   CD C9 0A               CALL   flushBuffer   
26F1   76                     HALT      
26F2                EXPECTM_0_2710S45:      
26F2   E1                     POP   HL   
26F3                          ;*Macro unroll:  test "{{1}^}^", 1
26F3   31 00 4A               LD   SP,STACK   
26F6   CD 89 0B               CALL   coldInit   
26F9   CD 6D 48               CALL   execStr   
26FC   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2704   CD C9 0A               CALL   flushBuffer   
2707                          ;*Macro unroll:  expect "{{1}^}^",1
2707   E1                     POP   HL   
2708   E5                     PUSH   HL   
2709   11 01 00               LD   DE,1   
270C   B7                     OR   A   
270D   ED 52                  SBC   HL,DE   
270F   7D                     LD   A,L   
2710   B4                     OR   H   
2711   CA 73 27               JP   Z,expectM_0_2711S45   
2714   CD 41 0B               CALL   printStr   
2717   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2725   CD 41 0B               CALL   printStr   
2728   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2737   21 01 00               LD   hl,1   
273A   E5                     PUSH   hl   
273B   E5                     PUSH   hl   
273C   CD 60 0C               CALL   run   
273F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2747   CD C9 0A               CALL   flushBuffer   
274A   CD 41 0B               CALL   printStr   
274D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275A   E1                     POP   hl   
275B   E5                     PUSH   hl   
275C   E5                     PUSH   hl   
275D   CD 60 0C               CALL   run   
2760   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276F   CD C9 0A               CALL   flushBuffer   
2772   76                     HALT      
2773                EXPECTM_0_2711S45:      
2773   E1                     POP   HL   
2774                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2774   31 00 4A               LD   SP,STACK   
2777   CD 89 0B               CALL   coldInit   
277A   CD 6D 48               CALL   execStr   
277D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2788   CD C9 0A               CALL   flushBuffer   
278B                          ;*Macro unroll:  expect "{{{1}^}^}^",1
278B   E1                     POP   HL   
278C   E5                     PUSH   HL   
278D   11 01 00               LD   DE,1   
2790   B7                     OR   A   
2791   ED 52                  SBC   HL,DE   
2793   7D                     LD   A,L   
2794   B4                     OR   H   
2795   CA FA 27               JP   Z,expectM_0_2712S45   
2798   CD 41 0B               CALL   printStr   
279B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
27AC   CD 41 0B               CALL   printStr   
27AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BE   21 01 00               LD   hl,1   
27C1   E5                     PUSH   hl   
27C2   E5                     PUSH   hl   
27C3   CD 60 0C               CALL   run   
27C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CE   CD C9 0A               CALL   flushBuffer   
27D1   CD 41 0B               CALL   printStr   
27D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E1   E1                     POP   hl   
27E2   E5                     PUSH   hl   
27E3   E5                     PUSH   hl   
27E4   CD 60 0C               CALL   run   
27E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F6   CD C9 0A               CALL   flushBuffer   
27F9   76                     HALT      
27FA                EXPECTM_0_2712S45:      
27FA   E1                     POP   HL   
27FB                          ;*Macro unroll:  test "5 /f{10} ?", 5
27FB   31 00 4A               LD   SP,STACK   
27FE   CD 89 0B               CALL   coldInit   
2801   CD 6D 48               CALL   execStr   
2804   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
280F   CD C9 0A               CALL   flushBuffer   
2812                          ;*Macro unroll:  expect "5 /f{10} ?",5
2812   E1                     POP   HL   
2813   E5                     PUSH   HL   
2814   11 05 00               LD   DE,5   
2817   B7                     OR   A   
2818   ED 52                  SBC   HL,DE   
281A   7D                     LD   A,L   
281B   B4                     OR   H   
281C   CA 81 28               JP   Z,expectM_0_2713S45   
281F   CD 41 0B               CALL   printStr   
2822   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2833   CD 41 0B               CALL   printStr   
2836   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2845   21 05 00               LD   hl,5   
2848   E5                     PUSH   hl   
2849   E5                     PUSH   hl   
284A   CD 60 0C               CALL   run   
284D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2855   CD C9 0A               CALL   flushBuffer   
2858   CD 41 0B               CALL   printStr   
285B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2868   E1                     POP   hl   
2869   E5                     PUSH   hl   
286A   E5                     PUSH   hl   
286B   CD 60 0C               CALL   run   
286E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
287D   CD C9 0A               CALL   flushBuffer   
2880   76                     HALT      
2881                EXPECTM_0_2713S45:      
2881   E1                     POP   HL   
2882                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2882   31 00 4A               LD   SP,STACK   
2885   CD 89 0B               CALL   coldInit   
2888   CD 6D 48               CALL   execStr   
288B   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2898   CD C9 0A               CALL   flushBuffer   
289B                          ;*Macro unroll:  expect "5 /t{10} ? +",15
289B   E1                     POP   HL   
289C   E5                     PUSH   HL   
289D   11 0F 00               LD   DE,15   
28A0   B7                     OR   A   
28A1   ED 52                  SBC   HL,DE   
28A3   7D                     LD   A,L   
28A4   B4                     OR   H   
28A5   CA 0C 29               JP   Z,expectM_0_2714S45   
28A8   CD 41 0B               CALL   printStr   
28AB   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
28BE   CD 41 0B               CALL   printStr   
28C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D0   21 0F 00               LD   hl,15   
28D3   E5                     PUSH   hl   
28D4   E5                     PUSH   hl   
28D5   CD 60 0C               CALL   run   
28D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28E0   CD C9 0A               CALL   flushBuffer   
28E3   CD 41 0B               CALL   printStr   
28E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28F3   E1                     POP   hl   
28F4   E5                     PUSH   hl   
28F5   E5                     PUSH   hl   
28F6   CD 60 0C               CALL   run   
28F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2908   CD C9 0A               CALL   flushBuffer   
290B   76                     HALT      
290C                EXPECTM_0_2714S45:      
290C   E1                     POP   HL   
290D                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
290D   31 00 4A               LD   SP,STACK   
2910   CD 89 0B               CALL   coldInit   
2913   CD 6D 48               CALL   execStr   
2916   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
2928   CD C9 0A               CALL   flushBuffer   
292B                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
292B   E1                     POP   HL   
292C   E5                     PUSH   HL   
292D   11 15 00               LD   DE,21   
2930   B7                     OR   A   
2931   ED 52                  SBC   HL,DE   
2933   7D                     LD   A,L   
2934   B4                     OR   H   
2935   CA A1 29               JP   Z,expectM_0_2715S45   
2938   CD 41 0B               CALL   printStr   
293B   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2953   CD 41 0B               CALL   printStr   
2956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2965   21 15 00               LD   hl,21   
2968   E5                     PUSH   hl   
2969   E5                     PUSH   hl   
296A   CD 60 0C               CALL   run   
296D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2975   CD C9 0A               CALL   flushBuffer   
2978   CD 41 0B               CALL   printStr   
297B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2988   E1                     POP   hl   
2989   E5                     PUSH   hl   
298A   E5                     PUSH   hl   
298B   CD 60 0C               CALL   run   
298E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
299D   CD C9 0A               CALL   flushBuffer   
29A0   76                     HALT      
29A1                EXPECTM_0_2715S45:      
29A1   E1                     POP   HL   
29A2                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
29A2   31 00 4A               LD   SP,STACK   
29A5   CD 89 0B               CALL   coldInit   
29A8   CD 6D 48               CALL   execStr   
29AB   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
29BD   CD C9 0A               CALL   flushBuffer   
29C0                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
29C0   E1                     POP   HL   
29C1   E5                     PUSH   HL   
29C2   11 0B 00               LD   DE,11   
29C5   B7                     OR   A   
29C6   ED 52                  SBC   HL,DE   
29C8   7D                     LD   A,L   
29C9   B4                     OR   H   
29CA   CA 36 2A               JP   Z,expectM_0_2716S45   
29CD   CD 41 0B               CALL   printStr   
29D0   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
29E8   CD 41 0B               CALL   printStr   
29EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FA   21 0B 00               LD   hl,11   
29FD   E5                     PUSH   hl   
29FE   E5                     PUSH   hl   
29FF   CD 60 0C               CALL   run   
2A02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A0A   CD C9 0A               CALL   flushBuffer   
2A0D   CD 41 0B               CALL   printStr   
2A10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A1D   E1                     POP   hl   
2A1E   E5                     PUSH   hl   
2A1F   E5                     PUSH   hl   
2A20   CD 60 0C               CALL   run   
2A23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A32   CD C9 0A               CALL   flushBuffer   
2A35   76                     HALT      
2A36                EXPECTM_0_2716S45:      
2A36   E1                     POP   HL   
2A37                          ;*Macro unroll:  test ": -2%", $0000
2A37   31 00 4A               LD   SP,STACK   
2A3A   CD 89 0B               CALL   coldInit   
2A3D   CD 6D 48               CALL   execStr   
2A40   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2A46   CD C9 0A               CALL   flushBuffer   
2A49                          ;*Macro unroll:  expect ": -2%",$0000
2A49   E1                     POP   HL   
2A4A   E5                     PUSH   HL   
2A4B   11 00 00               LD   DE,$0000   
2A4E   B7                     OR   A   
2A4F   ED 52                  SBC   HL,DE   
2A51   7D                     LD   A,L   
2A52   B4                     OR   H   
2A53   CA B3 2A               JP   Z,expectM_0_2717S45   
2A56   CD 41 0B               CALL   printStr   
2A59   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2A65   CD 41 0B               CALL   printStr   
2A68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A77   21 00 00               LD   hl,$0000   
2A7A   E5                     PUSH   hl   
2A7B   E5                     PUSH   hl   
2A7C   CD 60 0C               CALL   run   
2A7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A87   CD C9 0A               CALL   flushBuffer   
2A8A   CD 41 0B               CALL   printStr   
2A8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A9A   E1                     POP   hl   
2A9B   E5                     PUSH   hl   
2A9C   E5                     PUSH   hl   
2A9D   CD 60 0C               CALL   run   
2AA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AAF   CD C9 0A               CALL   flushBuffer   
2AB2   76                     HALT      
2AB3                EXPECTM_0_2717S45:      
2AB3   E1                     POP   HL   
2AB4                          ;*Macro unroll:  test ":a -1%", $0001
2AB4   31 00 4A               LD   SP,STACK   
2AB7   CD 89 0B               CALL   coldInit   
2ABA   CD 6D 48               CALL   execStr   
2ABD   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2AC4   CD C9 0A               CALL   flushBuffer   
2AC7                          ;*Macro unroll:  expect ":a -1%",$0001
2AC7   E1                     POP   HL   
2AC8   E5                     PUSH   HL   
2AC9   11 01 00               LD   DE,$0001   
2ACC   B7                     OR   A   
2ACD   ED 52                  SBC   HL,DE   
2ACF   7D                     LD   A,L   
2AD0   B4                     OR   H   
2AD1   CA 32 2B               JP   Z,expectM_0_2718S45   
2AD4   CD 41 0B               CALL   printStr   
2AD7   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
2AE4   CD 41 0B               CALL   printStr   
2AE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF6   21 01 00               LD   hl,$0001   
2AF9   E5                     PUSH   hl   
2AFA   E5                     PUSH   hl   
2AFB   CD 60 0C               CALL   run   
2AFE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B06   CD C9 0A               CALL   flushBuffer   
2B09   CD 41 0B               CALL   printStr   
2B0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B19   E1                     POP   hl   
2B1A   E5                     PUSH   hl   
2B1B   E5                     PUSH   hl   
2B1C   CD 60 0C               CALL   run   
2B1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B2E   CD C9 0A               CALL   flushBuffer   
2B31   76                     HALT      
2B32                EXPECTM_0_2718S45:      
2B32   E1                     POP   HL   
2B33                          ;*Macro unroll:  test ":a: -1%", $0001
2B33   31 00 4A               LD   SP,STACK   
2B36   CD 89 0B               CALL   coldInit   
2B39   CD 6D 48               CALL   execStr   
2B3C   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2B44   CD C9 0A               CALL   flushBuffer   
2B47                          ;*Macro unroll:  expect ":a: -1%",$0001
2B47   E1                     POP   HL   
2B48   E5                     PUSH   HL   
2B49   11 01 00               LD   DE,$0001   
2B4C   B7                     OR   A   
2B4D   ED 52                  SBC   HL,DE   
2B4F   7D                     LD   A,L   
2B50   B4                     OR   H   
2B51   CA B3 2B               JP   Z,expectM_0_2719S45   
2B54   CD 41 0B               CALL   printStr   
2B57   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2B65   CD 41 0B               CALL   printStr   
2B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B77   21 01 00               LD   hl,$0001   
2B7A   E5                     PUSH   hl   
2B7B   E5                     PUSH   hl   
2B7C   CD 60 0C               CALL   run   
2B7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B87   CD C9 0A               CALL   flushBuffer   
2B8A   CD 41 0B               CALL   printStr   
2B8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9A   E1                     POP   hl   
2B9B   E5                     PUSH   hl   
2B9C   E5                     PUSH   hl   
2B9D   CD 60 0C               CALL   run   
2BA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BAF   CD C9 0A               CALL   flushBuffer   
2BB2   76                     HALT      
2BB3                EXPECTM_0_2719S45:      
2BB3   E1                     POP   HL   
2BB4                          ;*Macro unroll:  test ":a:b -1%", $0102
2BB4   31 00 4A               LD   SP,STACK   
2BB7   CD 89 0B               CALL   coldInit   
2BBA   CD 6D 48               CALL   execStr   
2BBD   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2BC6   CD C9 0A               CALL   flushBuffer   
2BC9                          ;*Macro unroll:  expect ":a:b -1%",$0102
2BC9   E1                     POP   HL   
2BCA   E5                     PUSH   HL   
2BCB   11 02 01               LD   DE,$0102   
2BCE   B7                     OR   A   
2BCF   ED 52                  SBC   HL,DE   
2BD1   7D                     LD   A,L   
2BD2   B4                     OR   H   
2BD3   CA 36 2C               JP   Z,expectM_0_2720S45   
2BD6   CD 41 0B               CALL   printStr   
2BD9   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2BE8   CD 41 0B               CALL   printStr   
2BEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BFA   21 02 01               LD   hl,$0102   
2BFD   E5                     PUSH   hl   
2BFE   E5                     PUSH   hl   
2BFF   CD 60 0C               CALL   run   
2C02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C0A   CD C9 0A               CALL   flushBuffer   
2C0D   CD 41 0B               CALL   printStr   
2C10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C1D   E1                     POP   hl   
2C1E   E5                     PUSH   hl   
2C1F   E5                     PUSH   hl   
2C20   CD 60 0C               CALL   run   
2C23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C32   CD C9 0A               CALL   flushBuffer   
2C35   76                     HALT      
2C36                EXPECTM_0_2720S45:      
2C36   E1                     POP   HL   
2C37                          ;*Macro unroll:  test "::b -1%", $0101
2C37   31 00 4A               LD   SP,STACK   
2C3A   CD 89 0B               CALL   coldInit   
2C3D   CD 6D 48               CALL   execStr   
2C40   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2C48   CD C9 0A               CALL   flushBuffer   
2C4B                          ;*Macro unroll:  expect "::b -1%",$0101
2C4B   E1                     POP   HL   
2C4C   E5                     PUSH   HL   
2C4D   11 01 01               LD   DE,$0101   
2C50   B7                     OR   A   
2C51   ED 52                  SBC   HL,DE   
2C53   7D                     LD   A,L   
2C54   B4                     OR   H   
2C55   CA B7 2C               JP   Z,expectM_0_2721S45   
2C58   CD 41 0B               CALL   printStr   
2C5B   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2C69   CD 41 0B               CALL   printStr   
2C6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7B   21 01 01               LD   hl,$0101   
2C7E   E5                     PUSH   hl   
2C7F   E5                     PUSH   hl   
2C80   CD 60 0C               CALL   run   
2C83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C8B   CD C9 0A               CALL   flushBuffer   
2C8E   CD 41 0B               CALL   printStr   
2C91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9E   E1                     POP   hl   
2C9F   E5                     PUSH   hl   
2CA0   E5                     PUSH   hl   
2CA1   CD 60 0C               CALL   run   
2CA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CB3   CD C9 0A               CALL   flushBuffer   
2CB6   76                     HALT      
2CB7                EXPECTM_0_2721S45:      
2CB7   E1                     POP   HL   
2CB8                          ;*Macro unroll:  test ":{2};^", 2
2CB8   31 00 4A               LD   SP,STACK   
2CBB   CD 89 0B               CALL   coldInit   
2CBE   CD 6D 48               CALL   execStr   
2CC1   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2CC8   CD C9 0A               CALL   flushBuffer   
2CCB                          ;*Macro unroll:  expect ":{2};^",2
2CCB   E1                     POP   HL   
2CCC   E5                     PUSH   HL   
2CCD   11 02 00               LD   DE,2   
2CD0   B7                     OR   A   
2CD1   ED 52                  SBC   HL,DE   
2CD3   7D                     LD   A,L   
2CD4   B4                     OR   H   
2CD5   CA 36 2D               JP   Z,expectM_0_2722S45   
2CD8   CD 41 0B               CALL   printStr   
2CDB   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2CE8   CD 41 0B               CALL   printStr   
2CEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CFA   21 02 00               LD   hl,2   
2CFD   E5                     PUSH   hl   
2CFE   E5                     PUSH   hl   
2CFF   CD 60 0C               CALL   run   
2D02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D0A   CD C9 0A               CALL   flushBuffer   
2D0D   CD 41 0B               CALL   printStr   
2D10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D1D   E1                     POP   hl   
2D1E   E5                     PUSH   hl   
2D1F   E5                     PUSH   hl   
2D20   CD 60 0C               CALL   run   
2D23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D32   CD C9 0A               CALL   flushBuffer   
2D35   76                     HALT      
2D36                EXPECTM_0_2722S45:      
2D36   E1                     POP   HL   
2D37                          ;*Macro unroll:  test ":a{2};^", 2
2D37   31 00 4A               LD   SP,STACK   
2D3A   CD 89 0B               CALL   coldInit   
2D3D   CD 6D 48               CALL   execStr   
2D40   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2D48   CD C9 0A               CALL   flushBuffer   
2D4B                          ;*Macro unroll:  expect ":a{2};^",2
2D4B   E1                     POP   HL   
2D4C   E5                     PUSH   HL   
2D4D   11 02 00               LD   DE,2   
2D50   B7                     OR   A   
2D51   ED 52                  SBC   HL,DE   
2D53   7D                     LD   A,L   
2D54   B4                     OR   H   
2D55   CA B7 2D               JP   Z,expectM_0_2723S45   
2D58   CD 41 0B               CALL   printStr   
2D5B   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2D69   CD 41 0B               CALL   printStr   
2D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7B   21 02 00               LD   hl,2   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD 60 0C               CALL   run   
2D83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D8B   CD C9 0A               CALL   flushBuffer   
2D8E   CD 41 0B               CALL   printStr   
2D91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9E   E1                     POP   hl   
2D9F   E5                     PUSH   hl   
2DA0   E5                     PUSH   hl   
2DA1   CD 60 0C               CALL   run   
2DA4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB3   CD C9 0A               CALL   flushBuffer   
2DB6   76                     HALT      
2DB7                EXPECTM_0_2723S45:      
2DB7   E1                     POP   HL   
2DB8                          ;*Macro unroll:  test "5 :a{$a};^", 5
2DB8   31 00 4A               LD   SP,STACK   
2DBB   CD 89 0B               CALL   coldInit   
2DBE   CD 6D 48               CALL   execStr   
2DC1   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2DCC   CD C9 0A               CALL   flushBuffer   
2DCF                          ;*Macro unroll:  expect "5 :a{$a};^",5
2DCF   E1                     POP   HL   
2DD0   E5                     PUSH   HL   
2DD1   11 05 00               LD   DE,5   
2DD4   B7                     OR   A   
2DD5   ED 52                  SBC   HL,DE   
2DD7   7D                     LD   A,L   
2DD8   B4                     OR   H   
2DD9   CA 3E 2E               JP   Z,expectM_0_2724S45   
2DDC   CD 41 0B               CALL   printStr   
2DDF   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2DF0   CD 41 0B               CALL   printStr   
2DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E02   21 05 00               LD   hl,5   
2E05   E5                     PUSH   hl   
2E06   E5                     PUSH   hl   
2E07   CD 60 0C               CALL   run   
2E0A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E12   CD C9 0A               CALL   flushBuffer   
2E15   CD 41 0B               CALL   printStr   
2E18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E25   E1                     POP   hl   
2E26   E5                     PUSH   hl   
2E27   E5                     PUSH   hl   
2E28   CD 60 0C               CALL   run   
2E2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E3A   CD C9 0A               CALL   flushBuffer   
2E3D   76                     HALT      
2E3E                EXPECTM_0_2724S45:      
2E3E   E1                     POP   HL   
2E3F                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2E3F   31 00 4A               LD   SP,STACK   
2E42   CD 89 0B               CALL   coldInit   
2E45   CD 6D 48               CALL   execStr   
2E48   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2E55   CD C9 0A               CALL   flushBuffer   
2E58                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2E58   E1                     POP   HL   
2E59   E5                     PUSH   HL   
2E5A   11 05 00               LD   DE,5   
2E5D   B7                     OR   A   
2E5E   ED 52                  SBC   HL,DE   
2E60   7D                     LD   A,L   
2E61   B4                     OR   H   
2E62   CA C9 2E               JP   Z,expectM_0_2725S45   
2E65   CD 41 0B               CALL   printStr   
2E68   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2E7B   CD 41 0B               CALL   printStr   
2E7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8D   21 05 00               LD   hl,5   
2E90   E5                     PUSH   hl   
2E91   E5                     PUSH   hl   
2E92   CD 60 0C               CALL   run   
2E95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E9D   CD C9 0A               CALL   flushBuffer   
2EA0   CD 41 0B               CALL   printStr   
2EA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB0   E1                     POP   hl   
2EB1   E5                     PUSH   hl   
2EB2   E5                     PUSH   hl   
2EB3   CD 60 0C               CALL   run   
2EB6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EC5   CD C9 0A               CALL   flushBuffer   
2EC8   76                     HALT      
2EC9                EXPECTM_0_2725S45:      
2EC9   E1                     POP   HL   
2ECA                          ;*Macro unroll:  test ":a{{2}^};^", 2
2ECA   31 00 4A               LD   SP,STACK   
2ECD   CD 89 0B               CALL   coldInit   
2ED0   CD 6D 48               CALL   execStr   
2ED3   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2EDE   CD C9 0A               CALL   flushBuffer   
2EE1                          ;*Macro unroll:  expect ":a{{2}^};^",2
2EE1   E1                     POP   HL   
2EE2   E5                     PUSH   HL   
2EE3   11 02 00               LD   DE,2   
2EE6   B7                     OR   A   
2EE7   ED 52                  SBC   HL,DE   
2EE9   7D                     LD   A,L   
2EEA   B4                     OR   H   
2EEB   CA 50 2F               JP   Z,expectM_0_2726S45   
2EEE   CD 41 0B               CALL   printStr   
2EF1   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2F02   CD 41 0B               CALL   printStr   
2F05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F14   21 02 00               LD   hl,2   
2F17   E5                     PUSH   hl   
2F18   E5                     PUSH   hl   
2F19   CD 60 0C               CALL   run   
2F1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F24   CD C9 0A               CALL   flushBuffer   
2F27   CD 41 0B               CALL   printStr   
2F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F37   E1                     POP   hl   
2F38   E5                     PUSH   hl   
2F39   E5                     PUSH   hl   
2F3A   CD 60 0C               CALL   run   
2F3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F4C   CD C9 0A               CALL   flushBuffer   
2F4F   76                     HALT      
2F50                EXPECTM_0_2726S45:      
2F50   E1                     POP   HL   
2F51                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2F51   31 00 4A               LD   SP,STACK   
2F54   CD 89 0B               CALL   coldInit   
2F57   CD 6D 48               CALL   execStr   
2F5A   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2F6A   CD C9 0A               CALL   flushBuffer   
2F6D                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2F6D   E1                     POP   HL   
2F6E   E5                     PUSH   HL   
2F6F   11 05 00               LD   DE,5   
2F72   B7                     OR   A   
2F73   ED 52                  SBC   HL,DE   
2F75   7D                     LD   A,L   
2F76   B4                     OR   H   
2F77   CA E1 2F               JP   Z,expectM_0_2727S45   
2F7A   CD 41 0B               CALL   printStr   
2F7D   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2F93   CD 41 0B               CALL   printStr   
2F96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA5   21 05 00               LD   hl,5   
2FA8   E5                     PUSH   hl   
2FA9   E5                     PUSH   hl   
2FAA   CD 60 0C               CALL   run   
2FAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FB5   CD C9 0A               CALL   flushBuffer   
2FB8   CD 41 0B               CALL   printStr   
2FBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC8   E1                     POP   hl   
2FC9   E5                     PUSH   hl   
2FCA   E5                     PUSH   hl   
2FCB   CD 60 0C               CALL   run   
2FCE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FDD   CD C9 0A               CALL   flushBuffer   
2FE0   76                     HALT      
2FE1                EXPECTM_0_2727S45:      
2FE1   E1                     POP   HL   
2FE2                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2FE2   31 00 4A               LD   SP,STACK   
2FE5   CD 89 0B               CALL   coldInit   
2FE8   CD 6D 48               CALL   execStr   
2FEB   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2FFC   CD C9 0A               CALL   flushBuffer   
2FFF                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2FFF   E1                     POP   HL   
3000   E5                     PUSH   HL   
3001   11 01 00               LD   DE,1   
3004   B7                     OR   A   
3005   ED 52                  SBC   HL,DE   
3007   7D                     LD   A,L   
3008   B4                     OR   H   
3009   CA 74 30               JP   Z,expectM_0_2728S45   
300C   CD 41 0B               CALL   printStr   
300F   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
3026   CD 41 0B               CALL   printStr   
3029   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3038   21 01 00               LD   hl,1   
303B   E5                     PUSH   hl   
303C   E5                     PUSH   hl   
303D   CD 60 0C               CALL   run   
3040   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3048   CD C9 0A               CALL   flushBuffer   
304B   CD 41 0B               CALL   printStr   
304E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
305B   E1                     POP   hl   
305C   E5                     PUSH   hl   
305D   E5                     PUSH   hl   
305E   CD 60 0C               CALL   run   
3061   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3070   CD C9 0A               CALL   flushBuffer   
3073   76                     HALT      
3074                EXPECTM_0_2728S45:      
3074   E1                     POP   HL   
3075                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
3075   31 00 4A               LD   SP,STACK   
3078   CD 89 0B               CALL   coldInit   
307B   CD 6D 48               CALL   execStr   
307E   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
3092   CD C9 0A               CALL   flushBuffer   
3095                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
3095   E1                     POP   HL   
3096   E5                     PUSH   HL   
3097   11 07 00               LD   DE,7   
309A   B7                     OR   A   
309B   ED 52                  SBC   HL,DE   
309D   7D                     LD   A,L   
309E   B4                     OR   H   
309F   CA 0D 31               JP   Z,expectM_0_2729S45   
30A2   CD 41 0B               CALL   printStr   
30A5   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
30BF   CD 41 0B               CALL   printStr   
30C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D1   21 07 00               LD   hl,7   
30D4   E5                     PUSH   hl   
30D5   E5                     PUSH   hl   
30D6   CD 60 0C               CALL   run   
30D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30E1   CD C9 0A               CALL   flushBuffer   
30E4   CD 41 0B               CALL   printStr   
30E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F4   E1                     POP   hl   
30F5   E5                     PUSH   hl   
30F6   E5                     PUSH   hl   
30F7   CD 60 0C               CALL   run   
30FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3109   CD C9 0A               CALL   flushBuffer   
310C   76                     HALT      
310D                EXPECTM_0_2729S45:      
310D   E1                     POP   HL   
310E                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
310E   31 00 4A               LD   SP,STACK   
3111   CD 89 0B               CALL   coldInit   
3114   CD 6D 48               CALL   execStr   
3117   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
312D   CD C9 0A               CALL   flushBuffer   
3130                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
3130   E1                     POP   HL   
3131   E5                     PUSH   HL   
3132   11 06 00               LD   DE,6   
3135   B7                     OR   A   
3136   ED 52                  SBC   HL,DE   
3138   7D                     LD   A,L   
3139   B4                     OR   H   
313A   CA AA 31               JP   Z,expectM_0_2730S45   
313D   CD 41 0B               CALL   printStr   
3140   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
315C   CD 41 0B               CALL   printStr   
315F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
316E   21 06 00               LD   hl,6   
3171   E5                     PUSH   hl   
3172   E5                     PUSH   hl   
3173   CD 60 0C               CALL   run   
3176   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
317E   CD C9 0A               CALL   flushBuffer   
3181   CD 41 0B               CALL   printStr   
3184   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3191   E1                     POP   hl   
3192   E5                     PUSH   hl   
3193   E5                     PUSH   hl   
3194   CD 60 0C               CALL   run   
3197   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A6   CD C9 0A               CALL   flushBuffer   
31A9   76                     HALT      
31AA                EXPECTM_0_2730S45:      
31AA   E1                     POP   HL   
31AB                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
31AB   31 00 4A               LD   SP,STACK   
31AE   CD 89 0B               CALL   coldInit   
31B1   CD 6D 48               CALL   execStr   
31B4   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
31C3   CD C9 0A               CALL   flushBuffer   
31C6                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
31C6   E1                     POP   HL   
31C7   E5                     PUSH   HL   
31C8   11 02 00               LD   DE,2   
31CB   B7                     OR   A   
31CC   ED 52                  SBC   HL,DE   
31CE   7D                     LD   A,L   
31CF   B4                     OR   H   
31D0   CA 39 32               JP   Z,expectM_0_2731S45   
31D3   CD 41 0B               CALL   printStr   
31D6   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
31EB   CD 41 0B               CALL   printStr   
31EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31FD   21 02 00               LD   hl,2   
3200   E5                     PUSH   hl   
3201   E5                     PUSH   hl   
3202   CD 60 0C               CALL   run   
3205   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
320D   CD C9 0A               CALL   flushBuffer   
3210   CD 41 0B               CALL   printStr   
3213   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3220   E1                     POP   hl   
3221   E5                     PUSH   hl   
3222   E5                     PUSH   hl   
3223   CD 60 0C               CALL   run   
3226   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3235   CD C9 0A               CALL   flushBuffer   
3238   76                     HALT      
3239                EXPECTM_0_2731S45:      
3239   E1                     POP   HL   
323A                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
323A   31 00 4A               LD   SP,STACK   
323D   CD 89 0B               CALL   coldInit   
3240   CD 6D 48               CALL   execStr   
3243   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
3255   CD C9 0A               CALL   flushBuffer   
3258                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
3258   E1                     POP   HL   
3259   E5                     PUSH   HL   
325A   11 01 00               LD   DE,1   
325D   B7                     OR   A   
325E   ED 52                  SBC   HL,DE   
3260   7D                     LD   A,L   
3261   B4                     OR   H   
3262   CA CE 32               JP   Z,expectM_0_2732S45   
3265   CD 41 0B               CALL   printStr   
3268   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
3280   CD 41 0B               CALL   printStr   
3283   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3292   21 01 00               LD   hl,1   
3295   E5                     PUSH   hl   
3296   E5                     PUSH   hl   
3297   CD 60 0C               CALL   run   
329A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32A2   CD C9 0A               CALL   flushBuffer   
32A5   CD 41 0B               CALL   printStr   
32A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32B5   E1                     POP   hl   
32B6   E5                     PUSH   hl   
32B7   E5                     PUSH   hl   
32B8   CD 60 0C               CALL   run   
32BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32CA   CD C9 0A               CALL   flushBuffer   
32CD   76                     HALT      
32CE                EXPECTM_0_2732S45:      
32CE   E1                     POP   HL   
32CF                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
32CF   31 00 4A               LD   SP,STACK   
32D2   CD 89 0B               CALL   coldInit   
32D5   CD 6D 48               CALL   execStr   
32D8   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
32EB   CD C9 0A               CALL   flushBuffer   
32EE                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
32EE   E1                     POP   HL   
32EF   E5                     PUSH   HL   
32F0   11 02 00               LD   DE,2   
32F3   B7                     OR   A   
32F4   ED 52                  SBC   HL,DE   
32F6   7D                     LD   A,L   
32F7   B4                     OR   H   
32F8   CA 65 33               JP   Z,expectM_0_2733S45   
32FB   CD 41 0B               CALL   printStr   
32FE   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3317   CD 41 0B               CALL   printStr   
331A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3329   21 02 00               LD   hl,2   
332C   E5                     PUSH   hl   
332D   E5                     PUSH   hl   
332E   CD 60 0C               CALL   run   
3331   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3339   CD C9 0A               CALL   flushBuffer   
333C   CD 41 0B               CALL   printStr   
333F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
334C   E1                     POP   hl   
334D   E5                     PUSH   hl   
334E   E5                     PUSH   hl   
334F   CD 60 0C               CALL   run   
3352   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3361   CD C9 0A               CALL   flushBuffer   
3364   76                     HALT      
3365                EXPECTM_0_2733S45:      
3365   E1                     POP   HL   
3366                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
3366   31 00 4A               LD   SP,STACK   
3369   CD 89 0B               CALL   coldInit   
336C   CD 6D 48               CALL   execStr   
336F   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
3383   CD C9 0A               CALL   flushBuffer   
3386                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
3386   E1                     POP   HL   
3387   E5                     PUSH   HL   
3388   11 02 00               LD   DE,2   
338B   B7                     OR   A   
338C   ED 52                  SBC   HL,DE   
338E   7D                     LD   A,L   
338F   B4                     OR   H   
3390   CA FE 33               JP   Z,expectM_0_2734S45   
3393   CD 41 0B               CALL   printStr   
3396   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
33B0   CD 41 0B               CALL   printStr   
33B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C2   21 02 00               LD   hl,2   
33C5   E5                     PUSH   hl   
33C6   E5                     PUSH   hl   
33C7   CD 60 0C               CALL   run   
33CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33D2   CD C9 0A               CALL   flushBuffer   
33D5   CD 41 0B               CALL   printStr   
33D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E5   E1                     POP   hl   
33E6   E5                     PUSH   hl   
33E7   E5                     PUSH   hl   
33E8   CD 60 0C               CALL   run   
33EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33FA   CD C9 0A               CALL   flushBuffer   
33FD   76                     HALT      
33FE                EXPECTM_0_2734S45:      
33FE   E1                     POP   HL   
33FF                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
33FF   31 00 4A               LD   SP,STACK   
3402   CD 89 0B               CALL   coldInit   
3405   CD 6D 48               CALL   execStr   
3408   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
341B   CD C9 0A               CALL   flushBuffer   
341E                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
341E   E1                     POP   HL   
341F   E5                     PUSH   HL   
3420   11 02 00               LD   DE,2   
3423   B7                     OR   A   
3424   ED 52                  SBC   HL,DE   
3426   7D                     LD   A,L   
3427   B4                     OR   H   
3428   CA 95 34               JP   Z,expectM_0_2735S45   
342B   CD 41 0B               CALL   printStr   
342E   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3447   CD 41 0B               CALL   printStr   
344A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3459   21 02 00               LD   hl,2   
345C   E5                     PUSH   hl   
345D   E5                     PUSH   hl   
345E   CD 60 0C               CALL   run   
3461   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3469   CD C9 0A               CALL   flushBuffer   
346C   CD 41 0B               CALL   printStr   
346F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347C   E1                     POP   hl   
347D   E5                     PUSH   hl   
347E   E5                     PUSH   hl   
347F   CD 60 0C               CALL   run   
3482   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3491   CD C9 0A               CALL   flushBuffer   
3494   76                     HALT      
3495                EXPECTM_0_2735S45:      
3495   E1                     POP   HL   
3496                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3496   31 00 4A               LD   SP,STACK   
3499   CD 89 0B               CALL   coldInit   
349C   CD 6D 48               CALL   execStr   
349F   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
34B9   CD C9 0A               CALL   flushBuffer   
34BC                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
34BC   E1                     POP   HL   
34BD   E5                     PUSH   HL   
34BE   11 05 00               LD   DE,5   
34C1   B7                     OR   A   
34C2   ED 52                  SBC   HL,DE   
34C4   7D                     LD   A,L   
34C5   B4                     OR   H   
34C6   CA 3A 35               JP   Z,expectM_0_2736S45   
34C9   CD 41 0B               CALL   printStr   
34CC   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
34EC   CD 41 0B               CALL   printStr   
34EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34FE   21 05 00               LD   hl,5   
3501   E5                     PUSH   hl   
3502   E5                     PUSH   hl   
3503   CD 60 0C               CALL   run   
3506   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
350E   CD C9 0A               CALL   flushBuffer   
3511   CD 41 0B               CALL   printStr   
3514   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3521   E1                     POP   hl   
3522   E5                     PUSH   hl   
3523   E5                     PUSH   hl   
3524   CD 60 0C               CALL   run   
3527   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3536   CD C9 0A               CALL   flushBuffer   
3539   76                     HALT      
353A                EXPECTM_0_2736S45:      
353A   E1                     POP   HL   
353B                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
353B   31 00 4A               LD   SP,STACK   
353E   CD 89 0B               CALL   coldInit   
3541   CD 6D 48               CALL   execStr   
3544   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
3555   CD C9 0A               CALL   flushBuffer   
3558                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3558   E1                     POP   HL   
3559   E5                     PUSH   HL   
355A   11 02 00               LD   DE,2   
355D   B7                     OR   A   
355E   ED 52                  SBC   HL,DE   
3560   7D                     LD   A,L   
3561   B4                     OR   H   
3562   CA CD 35               JP   Z,expectM_0_2737S45   
3565   CD 41 0B               CALL   printStr   
3568   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
357F   CD 41 0B               CALL   printStr   
3582   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3591   21 02 00               LD   hl,2   
3594   E5                     PUSH   hl   
3595   E5                     PUSH   hl   
3596   CD 60 0C               CALL   run   
3599   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A1   CD C9 0A               CALL   flushBuffer   
35A4   CD 41 0B               CALL   printStr   
35A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35B4   E1                     POP   hl   
35B5   E5                     PUSH   hl   
35B6   E5                     PUSH   hl   
35B7   CD 60 0C               CALL   run   
35BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35C9   CD C9 0A               CALL   flushBuffer   
35CC   76                     HALT      
35CD                EXPECTM_0_2737S45:      
35CD   E1                     POP   HL   
35CE                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
35CE   31 00 4A               LD   SP,STACK   
35D1   CD 89 0B               CALL   coldInit   
35D4   CD 6D 48               CALL   execStr   
35D7   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
35EE   CD C9 0A               CALL   flushBuffer   
35F1                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
35F1   E1                     POP   HL   
35F2   E5                     PUSH   HL   
35F3   11 64 00               LD   DE,100   
35F6   B7                     OR   A   
35F7   ED 52                  SBC   HL,DE   
35F9   7D                     LD   A,L   
35FA   B4                     OR   H   
35FB   CA 6C 36               JP   Z,expectM_0_2738S45   
35FE   CD 41 0B               CALL   printStr   
3601   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
361E   CD 41 0B               CALL   printStr   
3621   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3630   21 64 00               LD   hl,100   
3633   E5                     PUSH   hl   
3634   E5                     PUSH   hl   
3635   CD 60 0C               CALL   run   
3638   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3640   CD C9 0A               CALL   flushBuffer   
3643   CD 41 0B               CALL   printStr   
3646   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3653   E1                     POP   hl   
3654   E5                     PUSH   hl   
3655   E5                     PUSH   hl   
3656   CD 60 0C               CALL   run   
3659   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3668   CD C9 0A               CALL   flushBuffer   
366B   76                     HALT      
366C                EXPECTM_0_2738S45:      
366C   E1                     POP   HL   
366D                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
366D   31 00 4A               LD   SP,STACK   
3670   CD 89 0B               CALL   coldInit   
3673   CD 6D 48               CALL   execStr   
3676   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
368E   CD C9 0A               CALL   flushBuffer   
3691                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3691   E1                     POP   HL   
3692   E5                     PUSH   HL   
3693   11 01 00               LD   DE,1   
3696   B7                     OR   A   
3697   ED 52                  SBC   HL,DE   
3699   7D                     LD   A,L   
369A   B4                     OR   H   
369B   CA 0D 37               JP   Z,expectM_0_2739S45   
369E   CD 41 0B               CALL   printStr   
36A1   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
36BF   CD 41 0B               CALL   printStr   
36C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D1   21 01 00               LD   hl,1   
36D4   E5                     PUSH   hl   
36D5   E5                     PUSH   hl   
36D6   CD 60 0C               CALL   run   
36D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36E1   CD C9 0A               CALL   flushBuffer   
36E4   CD 41 0B               CALL   printStr   
36E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36F4   E1                     POP   hl   
36F5   E5                     PUSH   hl   
36F6   E5                     PUSH   hl   
36F7   CD 60 0C               CALL   run   
36FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3709   CD C9 0A               CALL   flushBuffer   
370C   76                     HALT      
370D                EXPECTM_0_2739S45:      
370D   E1                     POP   HL   
370E                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
370E   31 00 4A               LD   SP,STACK   
3711   CD 89 0B               CALL   coldInit   
3714   CD 6D 48               CALL   execStr   
3717   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3730   CD C9 0A               CALL   flushBuffer   
3733                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3733   E1                     POP   HL   
3734   E5                     PUSH   HL   
3735   11 02 00               LD   DE,2   
3738   B7                     OR   A   
3739   ED 52                  SBC   HL,DE   
373B   7D                     LD   A,L   
373C   B4                     OR   H   
373D   CA B0 37               JP   Z,expectM_0_2740S45   
3740   CD 41 0B               CALL   printStr   
3743   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3762   CD 41 0B               CALL   printStr   
3765   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3774   21 02 00               LD   hl,2   
3777   E5                     PUSH   hl   
3778   E5                     PUSH   hl   
3779   CD 60 0C               CALL   run   
377C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3784   CD C9 0A               CALL   flushBuffer   
3787   CD 41 0B               CALL   printStr   
378A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3797   E1                     POP   hl   
3798   E5                     PUSH   hl   
3799   E5                     PUSH   hl   
379A   CD 60 0C               CALL   run   
379D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37AC   CD C9 0A               CALL   flushBuffer   
37AF   76                     HALT      
37B0                EXPECTM_0_2740S45:      
37B0   E1                     POP   HL   
37B1                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
37B1   31 00 4A               LD   SP,STACK   
37B4   CD 89 0B               CALL   coldInit   
37B7   CD 6D 48               CALL   execStr   
37BA   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
37D9   CD C9 0A               CALL   flushBuffer   
37DC                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
37DC   E1                     POP   HL   
37DD   E5                     PUSH   HL   
37DE   11 0B 00               LD   DE,11   
37E1   B7                     OR   A   
37E2   ED 52                  SBC   HL,DE   
37E4   7D                     LD   A,L   
37E5   B4                     OR   H   
37E6   CA 5F 38               JP   Z,expectM_0_2741S45   
37E9   CD 41 0B               CALL   printStr   
37EC   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3811   CD 41 0B               CALL   printStr   
3814   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3823   21 0B 00               LD   hl,11   
3826   E5                     PUSH   hl   
3827   E5                     PUSH   hl   
3828   CD 60 0C               CALL   run   
382B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3833   CD C9 0A               CALL   flushBuffer   
3836   CD 41 0B               CALL   printStr   
3839   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3846   E1                     POP   hl   
3847   E5                     PUSH   hl   
3848   E5                     PUSH   hl   
3849   CD 60 0C               CALL   run   
384C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
385B   CD C9 0A               CALL   flushBuffer   
385E   76                     HALT      
385F                EXPECTM_0_2741S45:      
385F   E1                     POP   HL   
3860                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3860   31 00 4A               LD   SP,STACK   
3863   CD 89 0B               CALL   coldInit   
3866   CD 6D 48               CALL   execStr   
3869   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3888   CD C9 0A               CALL   flushBuffer   
388B                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
388B   E1                     POP   HL   
388C   E5                     PUSH   HL   
388D   11 15 00               LD   DE,21   
3890   B7                     OR   A   
3891   ED 52                  SBC   HL,DE   
3893   7D                     LD   A,L   
3894   B4                     OR   H   
3895   CA 0E 39               JP   Z,expectM_0_2742S45   
3898   CD 41 0B               CALL   printStr   
389B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
38C0   CD 41 0B               CALL   printStr   
38C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D2   21 15 00               LD   hl,21   
38D5   E5                     PUSH   hl   
38D6   E5                     PUSH   hl   
38D7   CD 60 0C               CALL   run   
38DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E2   CD C9 0A               CALL   flushBuffer   
38E5   CD 41 0B               CALL   printStr   
38E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F5   E1                     POP   hl   
38F6   E5                     PUSH   hl   
38F7   E5                     PUSH   hl   
38F8   CD 60 0C               CALL   run   
38FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
390A   CD C9 0A               CALL   flushBuffer   
390D   76                     HALT      
390E                EXPECTM_0_2742S45:      
390E   E1                     POP   HL   
390F                          ;*Macro unroll:  test "[10 20 30] 1%", 20
390F   31 00 4A               LD   SP,STACK   
3912   CD 89 0B               CALL   coldInit   
3915   CD 6D 48               CALL   execStr   
3918   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3926   CD C9 0A               CALL   flushBuffer   
3929                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3929   E1                     POP   HL   
392A   E5                     PUSH   HL   
392B   11 14 00               LD   DE,20   
392E   B7                     OR   A   
392F   ED 52                  SBC   HL,DE   
3931   7D                     LD   A,L   
3932   B4                     OR   H   
3933   CA 9B 39               JP   Z,expectM_0_2743S45   
3936   CD 41 0B               CALL   printStr   
3939   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
394D   CD 41 0B               CALL   printStr   
3950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
395F   21 14 00               LD   hl,20   
3962   E5                     PUSH   hl   
3963   E5                     PUSH   hl   
3964   CD 60 0C               CALL   run   
3967   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
396F   CD C9 0A               CALL   flushBuffer   
3972   CD 41 0B               CALL   printStr   
3975   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3982   E1                     POP   hl   
3983   E5                     PUSH   hl   
3984   E5                     PUSH   hl   
3985   CD 60 0C               CALL   run   
3988   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3997   CD C9 0A               CALL   flushBuffer   
399A   76                     HALT      
399B                EXPECTM_0_2743S45:      
399B   E1                     POP   HL   
399C                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
399C   31 00 4A               LD   SP,STACK   
399F   CD 89 0B               CALL   coldInit   
39A2   CD 6D 48               CALL   execStr   
39A5   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
39B6   CD C9 0A               CALL   flushBuffer   
39B9                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
39B9   E1                     POP   HL   
39BA   E5                     PUSH   HL   
39BB   11 04 00               LD   DE,4   
39BE   B7                     OR   A   
39BF   ED 52                  SBC   HL,DE   
39C1   7D                     LD   A,L   
39C2   B4                     OR   H   
39C3   CA 2E 3A               JP   Z,expectM_0_2744S45   
39C6   CD 41 0B               CALL   printStr   
39C9   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
39E0   CD 41 0B               CALL   printStr   
39E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F2   21 04 00               LD   hl,4   
39F5   E5                     PUSH   hl   
39F6   E5                     PUSH   hl   
39F7   CD 60 0C               CALL   run   
39FA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A02   CD C9 0A               CALL   flushBuffer   
3A05   CD 41 0B               CALL   printStr   
3A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A15   E1                     POP   hl   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD 60 0C               CALL   run   
3A1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A2A   CD C9 0A               CALL   flushBuffer   
3A2D   76                     HALT      
3A2E                EXPECTM_0_2744S45:      
3A2E   E1                     POP   HL   
3A2F                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3A2F   31 00 4A               LD   SP,STACK   
3A32   CD 89 0B               CALL   coldInit   
3A35   CD 6D 48               CALL   execStr   
3A38   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3A46   CD C9 0A               CALL   flushBuffer   
3A49                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3A49   E1                     POP   HL   
3A4A   E5                     PUSH   HL   
3A4B   11 02 00               LD   DE,2   
3A4E   B7                     OR   A   
3A4F   ED 52                  SBC   HL,DE   
3A51   7D                     LD   A,L   
3A52   B4                     OR   H   
3A53   CA BB 3A               JP   Z,expectM_0_2745S45   
3A56   CD 41 0B               CALL   printStr   
3A59   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3A6D   CD 41 0B               CALL   printStr   
3A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A7F   21 02 00               LD   hl,2   
3A82   E5                     PUSH   hl   
3A83   E5                     PUSH   hl   
3A84   CD 60 0C               CALL   run   
3A87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A8F   CD C9 0A               CALL   flushBuffer   
3A92   CD 41 0B               CALL   printStr   
3A95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA2   E1                     POP   hl   
3AA3   E5                     PUSH   hl   
3AA4   E5                     PUSH   hl   
3AA5   CD 60 0C               CALL   run   
3AA8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AB7   CD C9 0A               CALL   flushBuffer   
3ABA   76                     HALT      
3ABB                EXPECTM_0_2745S45:      
3ABB   E1                     POP   HL   
3ABC                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3ABC   31 00 4A               LD   SP,STACK   
3ABF   CD 89 0B               CALL   coldInit   
3AC2   CD 6D 48               CALL   execStr   
3AC5   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3AD9   CD C9 0A               CALL   flushBuffer   
3ADC                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3ADC   E1                     POP   HL   
3ADD   E5                     PUSH   HL   
3ADE   11 42 00               LD   DE,66   
3AE1   B7                     OR   A   
3AE2   ED 52                  SBC   HL,DE   
3AE4   7D                     LD   A,L   
3AE5   B4                     OR   H   
3AE6   CA 54 3B               JP   Z,expectM_0_2746S45   
3AE9   CD 41 0B               CALL   printStr   
3AEC   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3B06   CD 41 0B               CALL   printStr   
3B09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B18   21 42 00               LD   hl,66   
3B1B   E5                     PUSH   hl   
3B1C   E5                     PUSH   hl   
3B1D   CD 60 0C               CALL   run   
3B20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B28   CD C9 0A               CALL   flushBuffer   
3B2B   CD 41 0B               CALL   printStr   
3B2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B3B   E1                     POP   hl   
3B3C   E5                     PUSH   hl   
3B3D   E5                     PUSH   hl   
3B3E   CD 60 0C               CALL   run   
3B41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B50   CD C9 0A               CALL   flushBuffer   
3B53   76                     HALT      
3B54                EXPECTM_0_2746S45:      
3B54   E1                     POP   HL   
3B55                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3B55   31 00 4A               LD   SP,STACK   
3B58   CD 89 0B               CALL   coldInit   
3B5B   CD 6D 48               CALL   execStr   
3B5E   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3B72   CD C9 0A               CALL   flushBuffer   
3B75                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3B75   E1                     POP   HL   
3B76   E5                     PUSH   HL   
3B77   11 0A 00               LD   DE,10   
3B7A   B7                     OR   A   
3B7B   ED 52                  SBC   HL,DE   
3B7D   7D                     LD   A,L   
3B7E   B4                     OR   H   
3B7F   CA ED 3B               JP   Z,expectM_0_2747S45   
3B82   CD 41 0B               CALL   printStr   
3B85   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3B9F   CD 41 0B               CALL   printStr   
3BA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB1   21 0A 00               LD   hl,10   
3BB4   E5                     PUSH   hl   
3BB5   E5                     PUSH   hl   
3BB6   CD 60 0C               CALL   run   
3BB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BC1   CD C9 0A               CALL   flushBuffer   
3BC4   CD 41 0B               CALL   printStr   
3BC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD4   E1                     POP   hl   
3BD5   E5                     PUSH   hl   
3BD6   E5                     PUSH   hl   
3BD7   CD 60 0C               CALL   run   
3BDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE9   CD C9 0A               CALL   flushBuffer   
3BEC   76                     HALT      
3BED                EXPECTM_0_2747S45:      
3BED   E1                     POP   HL   
3BEE                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3BEE   31 00 4A               LD   SP,STACK   
3BF1   CD 89 0B               CALL   coldInit   
3BF4   CD 6D 48               CALL   execStr   
3BF7   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3C13   CD C9 0A               CALL   flushBuffer   
3C16                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3C16   E1                     POP   HL   
3C17   E5                     PUSH   HL   
3C18   11 0A 00               LD   DE,10   
3C1B   B7                     OR   A   
3C1C   ED 52                  SBC   HL,DE   
3C1E   7D                     LD   A,L   
3C1F   B4                     OR   H   
3C20   CA 96 3C               JP   Z,expectM_0_2748S45   
3C23   CD 41 0B               CALL   printStr   
3C26   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3C48   CD 41 0B               CALL   printStr   
3C4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C5A   21 0A 00               LD   hl,10   
3C5D   E5                     PUSH   hl   
3C5E   E5                     PUSH   hl   
3C5F   CD 60 0C               CALL   run   
3C62   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C6A   CD C9 0A               CALL   flushBuffer   
3C6D   CD 41 0B               CALL   printStr   
3C70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C7D   E1                     POP   hl   
3C7E   E5                     PUSH   hl   
3C7F   E5                     PUSH   hl   
3C80   CD 60 0C               CALL   run   
3C83   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C92   CD C9 0A               CALL   flushBuffer   
3C95   76                     HALT      
3C96                EXPECTM_0_2748S45:      
3C96   E1                     POP   HL   
3C97                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3C97   31 00 4A               LD   SP,STACK   
3C9A   CD 89 0B               CALL   coldInit   
3C9D   CD 6D 48               CALL   execStr   
3CA0   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CC0   CD C9 0A               CALL   flushBuffer   
3CC3                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3CC3   E1                     POP   HL   
3CC4   E5                     PUSH   HL   
3CC5   11 0A 00               LD   DE,10   
3CC8   B7                     OR   A   
3CC9   ED 52                  SBC   HL,DE   
3CCB   7D                     LD   A,L   
3CCC   B4                     OR   H   
3CCD   CA 47 3D               JP   Z,expectM_0_2749S45   
3CD0   CD 41 0B               CALL   printStr   
3CD3   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3CF9   CD 41 0B               CALL   printStr   
3CFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D0B   21 0A 00               LD   hl,10   
3D0E   E5                     PUSH   hl   
3D0F   E5                     PUSH   hl   
3D10   CD 60 0C               CALL   run   
3D13   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D1B   CD C9 0A               CALL   flushBuffer   
3D1E   CD 41 0B               CALL   printStr   
3D21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D2E   E1                     POP   hl   
3D2F   E5                     PUSH   hl   
3D30   E5                     PUSH   hl   
3D31   CD 60 0C               CALL   run   
3D34   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D43   CD C9 0A               CALL   flushBuffer   
3D46   76                     HALT      
3D47                EXPECTM_0_2749S45:      
3D47   E1                     POP   HL   
3D48                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3D48   31 00 4A               LD   SP,STACK   
3D4B   CD 89 0B               CALL   coldInit   
3D4E   CD 6D 48               CALL   execStr   
3D51   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3D71   CD C9 0A               CALL   flushBuffer   
3D74                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3D74   E1                     POP   HL   
3D75   E5                     PUSH   HL   
3D76   11 14 00               LD   DE,20   
3D79   B7                     OR   A   
3D7A   ED 52                  SBC   HL,DE   
3D7C   7D                     LD   A,L   
3D7D   B4                     OR   H   
3D7E   CA F8 3D               JP   Z,expectM_0_2750S45   
3D81   CD 41 0B               CALL   printStr   
3D84   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3DAA   CD 41 0B               CALL   printStr   
3DAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DBC   21 14 00               LD   hl,20   
3DBF   E5                     PUSH   hl   
3DC0   E5                     PUSH   hl   
3DC1   CD 60 0C               CALL   run   
3DC4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DCC   CD C9 0A               CALL   flushBuffer   
3DCF   CD 41 0B               CALL   printStr   
3DD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDF   E1                     POP   hl   
3DE0   E5                     PUSH   hl   
3DE1   E5                     PUSH   hl   
3DE2   CD 60 0C               CALL   run   
3DE5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF4   CD C9 0A               CALL   flushBuffer   
3DF7   76                     HALT      
3DF8                EXPECTM_0_2750S45:      
3DF8   E1                     POP   HL   
3DF9                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3DF9   31 00 4A               LD   SP,STACK   
3DFC   CD 89 0B               CALL   coldInit   
3DFF   CD 6D 48               CALL   execStr   
3E02   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3E16   CD C9 0A               CALL   flushBuffer   
3E19                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3E19   E1                     POP   HL   
3E1A   E5                     PUSH   HL   
3E1B   11 04 00               LD   DE,4   
3E1E   B7                     OR   A   
3E1F   ED 52                  SBC   HL,DE   
3E21   7D                     LD   A,L   
3E22   B4                     OR   H   
3E23   CA 91 3E               JP   Z,expectM_0_2751S45   
3E26   CD 41 0B               CALL   printStr   
3E29   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3E43   CD 41 0B               CALL   printStr   
3E46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E55   21 04 00               LD   hl,4   
3E58   E5                     PUSH   hl   
3E59   E5                     PUSH   hl   
3E5A   CD 60 0C               CALL   run   
3E5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E65   CD C9 0A               CALL   flushBuffer   
3E68   CD 41 0B               CALL   printStr   
3E6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E78   E1                     POP   hl   
3E79   E5                     PUSH   hl   
3E7A   E5                     PUSH   hl   
3E7B   CD 60 0C               CALL   run   
3E7E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E8D   CD C9 0A               CALL   flushBuffer   
3E90   76                     HALT      
3E91                EXPECTM_0_2751S45:      
3E91   E1                     POP   HL   
3E92                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3E92   31 00 4A               LD   SP,STACK   
3E95   CD 89 0B               CALL   coldInit   
3E98   CD 6D 48               CALL   execStr   
3E9B   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3EB5   CD C9 0A               CALL   flushBuffer   
3EB8                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3EB8   E1                     POP   HL   
3EB9   E5                     PUSH   HL   
3EBA   11 09 00               LD   DE,9   
3EBD   B7                     OR   A   
3EBE   ED 52                  SBC   HL,DE   
3EC0   7D                     LD   A,L   
3EC1   B4                     OR   H   
3EC2   CA 36 3F               JP   Z,expectM_0_2752S45   
3EC5   CD 41 0B               CALL   printStr   
3EC8   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3EE8   CD 41 0B               CALL   printStr   
3EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EFA   21 09 00               LD   hl,9   
3EFD   E5                     PUSH   hl   
3EFE   E5                     PUSH   hl   
3EFF   CD 60 0C               CALL   run   
3F02   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F0A   CD C9 0A               CALL   flushBuffer   
3F0D   CD 41 0B               CALL   printStr   
3F10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F1D   E1                     POP   hl   
3F1E   E5                     PUSH   hl   
3F1F   E5                     PUSH   hl   
3F20   CD 60 0C               CALL   run   
3F23   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F32   CD C9 0A               CALL   flushBuffer   
3F35   76                     HALT      
3F36                EXPECTM_0_2752S45:      
3F36   E1                     POP   HL   
3F37                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F37   31 00 4A               LD   SP,STACK   
3F3A   CD 89 0B               CALL   coldInit   
3F3D   CD 6D 48               CALL   execStr   
3F40   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3F58   CD C9 0A               CALL   flushBuffer   
3F5B                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3F5B   E1                     POP   HL   
3F5C   E5                     PUSH   HL   
3F5D   11 06 00               LD   DE,6   
3F60   B7                     OR   A   
3F61   ED 52                  SBC   HL,DE   
3F63   7D                     LD   A,L   
3F64   B4                     OR   H   
3F65   CA D7 3F               JP   Z,expectM_0_2753S45   
3F68   CD 41 0B               CALL   printStr   
3F6B   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3F89   CD 41 0B               CALL   printStr   
3F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F9B   21 06 00               LD   hl,6   
3F9E   E5                     PUSH   hl   
3F9F   E5                     PUSH   hl   
3FA0   CD 60 0C               CALL   run   
3FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FAB   CD C9 0A               CALL   flushBuffer   
3FAE   CD 41 0B               CALL   printStr   
3FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FBE   E1                     POP   hl   
3FBF   E5                     PUSH   hl   
3FC0   E5                     PUSH   hl   
3FC1   CD 60 0C               CALL   run   
3FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FD3   CD C9 0A               CALL   flushBuffer   
3FD6   76                     HALT      
3FD7                EXPECTM_0_2753S45:      
3FD7   E1                     POP   HL   
3FD8                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3FD8   31 00 4A               LD   SP,STACK   
3FDB   CD 89 0B               CALL   coldInit   
3FDE   CD 6D 48               CALL   execStr   
3FE1   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3FFC   CD C9 0A               CALL   flushBuffer   
3FFF                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3FFF   E1                     POP   HL   
4000   E5                     PUSH   HL   
4001   11 02 00               LD   DE,2   
4004   B7                     OR   A   
4005   ED 52                  SBC   HL,DE   
4007   7D                     LD   A,L   
4008   B4                     OR   H   
4009   CA 7E 40               JP   Z,expectM_0_2754S45   
400C   CD 41 0B               CALL   printStr   
400F   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
4030   CD 41 0B               CALL   printStr   
4033   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4042   21 02 00               LD   hl,2   
4045   E5                     PUSH   hl   
4046   E5                     PUSH   hl   
4047   CD 60 0C               CALL   run   
404A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4052   CD C9 0A               CALL   flushBuffer   
4055   CD 41 0B               CALL   printStr   
4058   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4065   E1                     POP   hl   
4066   E5                     PUSH   hl   
4067   E5                     PUSH   hl   
4068   CD 60 0C               CALL   run   
406B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
407A   CD C9 0A               CALL   flushBuffer   
407D   76                     HALT      
407E                EXPECTM_0_2754S45:      
407E   E1                     POP   HL   
407F                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
407F   31 00 4A               LD   SP,STACK   
4082   CD 89 0B               CALL   coldInit   
4085   CD 6D 48               CALL   execStr   
4088   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40AE   CD C9 0A               CALL   flushBuffer   
40B1                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
40B1   E1                     POP   HL   
40B2   E5                     PUSH   HL   
40B3   11 0A 00               LD   DE,10   
40B6   B7                     OR   A   
40B7   ED 52                  SBC   HL,DE   
40B9   7D                     LD   A,L   
40BA   B4                     OR   H   
40BB   CA 3B 41               JP   Z,expectM_0_2755S45   
40BE   CD 41 0B               CALL   printStr   
40C1   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40ED   CD 41 0B               CALL   printStr   
40F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FF   21 0A 00               LD   hl,10   
4102   E5                     PUSH   hl   
4103   E5                     PUSH   hl   
4104   CD 60 0C               CALL   run   
4107   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
410F   CD C9 0A               CALL   flushBuffer   
4112   CD 41 0B               CALL   printStr   
4115   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4122   E1                     POP   hl   
4123   E5                     PUSH   hl   
4124   E5                     PUSH   hl   
4125   CD 60 0C               CALL   run   
4128   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4137   CD C9 0A               CALL   flushBuffer   
413A   76                     HALT      
413B                EXPECTM_0_2755S45:      
413B   E1                     POP   HL   
413C                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
413C   31 00 4A               LD   SP,STACK   
413F   CD 89 0B               CALL   coldInit   
4142   CD 6D 48               CALL   execStr   
4145   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
416D   CD C9 0A               CALL   flushBuffer   
4170                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
4170   E1                     POP   HL   
4171   E5                     PUSH   HL   
4172   11 06 00               LD   DE,6   
4175   B7                     OR   A   
4176   ED 52                  SBC   HL,DE   
4178   7D                     LD   A,L   
4179   B4                     OR   H   
417A   CA FC 41               JP   Z,expectM_0_2756S45   
417D   CD 41 0B               CALL   printStr   
4180   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
41AE   CD 41 0B               CALL   printStr   
41B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C0   21 06 00               LD   hl,6   
41C3   E5                     PUSH   hl   
41C4   E5                     PUSH   hl   
41C5   CD 60 0C               CALL   run   
41C8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41D0   CD C9 0A               CALL   flushBuffer   
41D3   CD 41 0B               CALL   printStr   
41D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E3   E1                     POP   hl   
41E4   E5                     PUSH   hl   
41E5   E5                     PUSH   hl   
41E6   CD 60 0C               CALL   run   
41E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41F8   CD C9 0A               CALL   flushBuffer   
41FB   76                     HALT      
41FC                EXPECTM_0_2756S45:      
41FC   E1                     POP   HL   
41FD                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
41FD   31 00 4A               LD   SP,STACK   
4200   CD 89 0B               CALL   coldInit   
4203   CD 6D 48               CALL   execStr   
4206   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
4212   CD C9 0A               CALL   flushBuffer   
4215                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
4215   E1                     POP   HL   
4216   E5                     PUSH   HL   
4217   11 00 00               LD   DE,NUL   
421A   B7                     OR   A   
421B   ED 52                  SBC   HL,DE   
421D   7D                     LD   A,L   
421E   B4                     OR   H   
421F   CA 85 42               JP   Z,expectM_0_2757S45   
4222   CD 41 0B               CALL   printStr   
4225   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4237   CD 41 0B               CALL   printStr   
423A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4249   21 00 00               LD   hl,NUL   
424C   E5                     PUSH   hl   
424D   E5                     PUSH   hl   
424E   CD 60 0C               CALL   run   
4251   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4259   CD C9 0A               CALL   flushBuffer   
425C   CD 41 0B               CALL   printStr   
425F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426C   E1                     POP   hl   
426D   E5                     PUSH   hl   
426E   E5                     PUSH   hl   
426F   CD 60 0C               CALL   run   
4272   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4281   CD C9 0A               CALL   flushBuffer   
4284   76                     HALT      
4285                EXPECTM_0_2757S45:      
4285   E1                     POP   HL   
4286                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4286   31 00 4A               LD   SP,STACK   
4289   CD 89 0B               CALL   coldInit   
428C   CD 6D 48               CALL   execStr   
428F   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
429B   CD C9 0A               CALL   flushBuffer   
429E                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
429E   E1                     POP   HL   
429F   E5                     PUSH   HL   
42A0   11 00 00               LD   DE,NUL   
42A3   B7                     OR   A   
42A4   ED 52                  SBC   HL,DE   
42A6   7D                     LD   A,L   
42A7   B4                     OR   H   
42A8   CA 0E 43               JP   Z,expectM_0_2758S45   
42AB   CD 41 0B               CALL   printStr   
42AE   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
42C0   CD 41 0B               CALL   printStr   
42C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D2   21 00 00               LD   hl,NUL   
42D5   E5                     PUSH   hl   
42D6   E5                     PUSH   hl   
42D7   CD 60 0C               CALL   run   
42DA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E2   CD C9 0A               CALL   flushBuffer   
42E5   CD 41 0B               CALL   printStr   
42E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F5   E1                     POP   hl   
42F6   E5                     PUSH   hl   
42F7   E5                     PUSH   hl   
42F8   CD 60 0C               CALL   run   
42FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430A   CD C9 0A               CALL   flushBuffer   
430D   76                     HALT      
430E                EXPECTM_0_2758S45:      
430E   E1                     POP   HL   
430F                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
430F   31 00 4A               LD   SP,STACK   
4312   CD 89 0B               CALL   coldInit   
4315   CD 6D 48               CALL   execStr   
4318   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
4324   CD C9 0A               CALL   flushBuffer   
4327                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
4327   E1                     POP   HL   
4328   E5                     PUSH   HL   
4329   11 00 00               LD   DE,NUL   
432C   B7                     OR   A   
432D   ED 52                  SBC   HL,DE   
432F   7D                     LD   A,L   
4330   B4                     OR   H   
4331   CA 97 43               JP   Z,expectM_0_2759S45   
4334   CD 41 0B               CALL   printStr   
4337   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4349   CD 41 0B               CALL   printStr   
434C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435B   21 00 00               LD   hl,NUL   
435E   E5                     PUSH   hl   
435F   E5                     PUSH   hl   
4360   CD 60 0C               CALL   run   
4363   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
436B   CD C9 0A               CALL   flushBuffer   
436E   CD 41 0B               CALL   printStr   
4371   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437E   E1                     POP   hl   
437F   E5                     PUSH   hl   
4380   E5                     PUSH   hl   
4381   CD 60 0C               CALL   run   
4384   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4393   CD C9 0A               CALL   flushBuffer   
4396   76                     HALT      
4397                EXPECTM_0_2759S45:      
4397   E1                     POP   HL   
4398                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4398   31 00 4A               LD   SP,STACK   
439B   CD 89 0B               CALL   coldInit   
439E   CD 6D 48               CALL   execStr   
43A1   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
43AD   CD C9 0A               CALL   flushBuffer   
43B0                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
43B0   E1                     POP   HL   
43B1   E5                     PUSH   HL   
43B2   11 00 00               LD   DE,NUL   
43B5   B7                     OR   A   
43B6   ED 52                  SBC   HL,DE   
43B8   7D                     LD   A,L   
43B9   B4                     OR   H   
43BA   CA 20 44               JP   Z,expectM_0_2760S45   
43BD   CD 41 0B               CALL   printStr   
43C0   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
43D2   CD 41 0B               CALL   printStr   
43D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43E4   21 00 00               LD   hl,NUL   
43E7   E5                     PUSH   hl   
43E8   E5                     PUSH   hl   
43E9   CD 60 0C               CALL   run   
43EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43F4   CD C9 0A               CALL   flushBuffer   
43F7   CD 41 0B               CALL   printStr   
43FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4407   E1                     POP   hl   
4408   E5                     PUSH   hl   
4409   E5                     PUSH   hl   
440A   CD 60 0C               CALL   run   
440D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
441C   CD C9 0A               CALL   flushBuffer   
441F   76                     HALT      
4420                EXPECTM_0_2760S45:      
4420   E1                     POP   HL   
4421                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4421   31 00 4A               LD   SP,STACK   
4424   CD 89 0B               CALL   coldInit   
4427   CD 6D 48               CALL   execStr   
442A   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
4432   CD C9 0A               CALL   flushBuffer   
4435                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
4435   E1                     POP   HL   
4436   E5                     PUSH   HL   
4437   11 66 4C               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
443A   B7                     OR   A   
443B   ED 52                  SBC   HL,DE   
443D   7D                     LD   A,L   
443E   B4                     OR   H   
443F   CA A1 44               JP   Z,expectM_0_2761S45   
4442   CD 41 0B               CALL   printStr   
4445   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4453   CD 41 0B               CALL   printStr   
4456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4465   21 66 4C               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4468   E5                     PUSH   hl   
4469   E5                     PUSH   hl   
446A   CD 60 0C               CALL   run   
446D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4475   CD C9 0A               CALL   flushBuffer   
4478   CD 41 0B               CALL   printStr   
447B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4488   E1                     POP   hl   
4489   E5                     PUSH   hl   
448A   E5                     PUSH   hl   
448B   CD 60 0C               CALL   run   
448E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
449D   CD C9 0A               CALL   flushBuffer   
44A0   76                     HALT      
44A1                EXPECTM_0_2761S45:      
44A1   E1                     POP   HL   
44A2                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
44A2   31 00 4A               LD   SP,STACK   
44A5   CD 89 0B               CALL   coldInit   
44A8   CD 6D 48               CALL   execStr   
44AB   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
44B3   CD C9 0A               CALL   flushBuffer   
44B6                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
44B6   E1                     POP   HL   
44B7   E5                     PUSH   HL   
44B8   11 34 4C               LD   DE,VARS + ("Z"-"A"+1)*2   
44BB   B7                     OR   A   
44BC   ED 52                  SBC   HL,DE   
44BE   7D                     LD   A,L   
44BF   B4                     OR   H   
44C0   CA 22 45               JP   Z,expectM_0_2762S45   
44C3   CD 41 0B               CALL   printStr   
44C6   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
44D4   CD 41 0B               CALL   printStr   
44D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E6   21 34 4C               LD   hl,VARS + ("Z"-"A"+1)*2   
44E9   E5                     PUSH   hl   
44EA   E5                     PUSH   hl   
44EB   CD 60 0C               CALL   run   
44EE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F6   CD C9 0A               CALL   flushBuffer   
44F9   CD 41 0B               CALL   printStr   
44FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4509   E1                     POP   hl   
450A   E5                     PUSH   hl   
450B   E5                     PUSH   hl   
450C   CD 60 0C               CALL   run   
450F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
451E   CD C9 0A               CALL   flushBuffer   
4521   76                     HALT      
4522                EXPECTM_0_2762S45:      
4522   E1                     POP   HL   
4523                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4523   31 00 4A               LD   SP,STACK   
4526   CD 89 0B               CALL   coldInit   
4529   CD 6D 48               CALL   execStr   
452C   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4534   CD C9 0A               CALL   flushBuffer   
4537                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
4537   E1                     POP   HL   
4538   E5                     PUSH   HL   
4539   11 32 4C               LD   DE,VARS + ("Z"-"A")*2   
453C   B7                     OR   A   
453D   ED 52                  SBC   HL,DE   
453F   7D                     LD   A,L   
4540   B4                     OR   H   
4541   CA A3 45               JP   Z,expectM_0_2763S45   
4544   CD 41 0B               CALL   printStr   
4547   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4555   CD 41 0B               CALL   printStr   
4558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4567   21 32 4C               LD   hl,VARS + ("Z"-"A")*2   
456A   E5                     PUSH   hl   
456B   E5                     PUSH   hl   
456C   CD 60 0C               CALL   run   
456F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4577   CD C9 0A               CALL   flushBuffer   
457A   CD 41 0B               CALL   printStr   
457D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458A   E1                     POP   hl   
458B   E5                     PUSH   hl   
458C   E5                     PUSH   hl   
458D   CD 60 0C               CALL   run   
4590   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
459F   CD C9 0A               CALL   flushBuffer   
45A2   76                     HALT      
45A3                EXPECTM_0_2763S45:      
45A3   E1                     POP   HL   
45A4                          ;*Macro unroll:  test "'A' /ad", VARS
45A4   31 00 4A               LD   SP,STACK   
45A7   CD 89 0B               CALL   coldInit   
45AA   CD 6D 48               CALL   execStr   
45AD   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
45B5   CD C9 0A               CALL   flushBuffer   
45B8                          ;*Macro unroll:  expect "'A' /ad",VARS
45B8   E1                     POP   HL   
45B9   E5                     PUSH   HL   
45BA   11 00 4C               LD   DE,VARS   
45BD   B7                     OR   A   
45BE   ED 52                  SBC   HL,DE   
45C0   7D                     LD   A,L   
45C1   B4                     OR   H   
45C2   CA 24 46               JP   Z,expectM_0_2764S45   
45C5   CD 41 0B               CALL   printStr   
45C8   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
45D6   CD 41 0B               CALL   printStr   
45D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E8   21 00 4C               LD   hl,VARS   
45EB   E5                     PUSH   hl   
45EC   E5                     PUSH   hl   
45ED   CD 60 0C               CALL   run   
45F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F8   CD C9 0A               CALL   flushBuffer   
45FB   CD 41 0B               CALL   printStr   
45FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
460B   E1                     POP   hl   
460C   E5                     PUSH   hl   
460D   E5                     PUSH   hl   
460E   CD 60 0C               CALL   run   
4611   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4620   CD C9 0A               CALL   flushBuffer   
4623   76                     HALT      
4624                EXPECTM_0_2764S45:      
4624   E1                     POP   HL   
4625                          ;*Macro unroll:  test "-1. /c/vB 0%", $2D
4625   31 00 4A               LD   SP,STACK   
4628   CD 89 0B               CALL   coldInit   
462B   CD 6D 48               CALL   execStr   
462E   2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "-1. /c/vB 0%"   
463B   CD C9 0A               CALL   flushBuffer   
463E                          ;*Macro unroll:  expect "-1. /c/vB 0%",$2D
463E   E1                     POP   HL   
463F   E5                     PUSH   HL   
4640   11 2D 00               LD   DE,$2D   
4643   B7                     OR   A   
4644   ED 52                  SBC   HL,DE   
4646   7D                     LD   A,L   
4647   B4                     OR   H   
4648   CA AF 46               JP   Z,expectM_0_2765S45   
464B   CD 41 0B               CALL   printStr   
464E   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","-1. /c/vB 0%"   
4661   CD 41 0B               CALL   printStr   
4664   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4673   21 2D 00               LD   hl,$2D   
4676   E5                     PUSH   hl   
4677   E5                     PUSH   hl   
4678   CD 60 0C               CALL   run   
467B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4683   CD C9 0A               CALL   flushBuffer   
4686   CD 41 0B               CALL   printStr   
4689   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4696   E1                     POP   hl   
4697   E5                     PUSH   hl   
4698   E5                     PUSH   hl   
4699   CD 60 0C               CALL   run   
469C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46AB   CD C9 0A               CALL   flushBuffer   
46AE   76                     HALT      
46AF                EXPECTM_0_2765S45:      
46AF   E1                     POP   HL   
46B0                          ;*Macro unroll:  test "`A`.s /c/vB 0%", 65
46B0   31 00 4A               LD   SP,STACK   
46B3   CD 89 0B               CALL   coldInit   
46B6   CD 6D 48               CALL   execStr   
46B9   60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "`A`.s /c/vB 0%"   
46C8   CD C9 0A               CALL   flushBuffer   
46CB                          ;*Macro unroll:  expect "`A`.s /c/vB 0%",65
46CB   E1                     POP   HL   
46CC   E5                     PUSH   HL   
46CD   11 41 00               LD   DE,65   
46D0   B7                     OR   A   
46D1   ED 52                  SBC   HL,DE   
46D3   7D                     LD   A,L   
46D4   B4                     OR   H   
46D5   CA 3E 47               JP   Z,expectM_0_2766S45   
46D8   CD 41 0B               CALL   printStr   
46DB   43 6F 64 65 3A 20 60 41 60 2E 73 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","`A`.s /c/vB 0%"   
46F0   CD 41 0B               CALL   printStr   
46F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4702   21 41 00               LD   hl,65   
4705   E5                     PUSH   hl   
4706   E5                     PUSH   hl   
4707   CD 60 0C               CALL   run   
470A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4712   CD C9 0A               CALL   flushBuffer   
4715   CD 41 0B               CALL   printStr   
4718   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4725   E1                     POP   hl   
4726   E5                     PUSH   hl   
4727   E5                     PUSH   hl   
4728   CD 60 0C               CALL   run   
472B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
473A   CD C9 0A               CALL   flushBuffer   
473D   76                     HALT      
473E                EXPECTM_0_2766S45:      
473E   E1                     POP   HL   
473F                          ;*Macro unroll:  test "123. /c/vB 1%", $32
473F   31 00 4A               LD   SP,STACK   
4742   CD 89 0B               CALL   coldInit   
4745   CD 6D 48               CALL   execStr   
4748   31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "123. /c/vB 1%"   
4756   CD C9 0A               CALL   flushBuffer   
4759                          ;*Macro unroll:  expect "123. /c/vB 1%",$32
4759   E1                     POP   HL   
475A   E5                     PUSH   HL   
475B   11 32 00               LD   DE,$32   
475E   B7                     OR   A   
475F   ED 52                  SBC   HL,DE   
4761   7D                     LD   A,L   
4762   B4                     OR   H   
4763   CA CB 47               JP   Z,expectM_0_2767S45   
4766   CD 41 0B               CALL   printStr   
4769   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 25 00 .CSTR   "Code: ","123. /c/vB 1%"   
477D   CD 41 0B               CALL   printStr   
4780   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478F   21 32 00               LD   hl,$32   
4792   E5                     PUSH   hl   
4793   E5                     PUSH   hl   
4794   CD 60 0C               CALL   run   
4797   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
479F   CD C9 0A               CALL   flushBuffer   
47A2   CD 41 0B               CALL   printStr   
47A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47B2   E1                     POP   hl   
47B3   E5                     PUSH   hl   
47B4   E5                     PUSH   hl   
47B5   CD 60 0C               CALL   run   
47B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C7   CD C9 0A               CALL   flushBuffer   
47CA   76                     HALT      
47CB                EXPECTM_0_2767S45:      
47CB   E1                     POP   HL   
47CC                          ;*Macro unroll:  test "#4321 /h. /c/vB 0%", $23
47CC   31 00 4A               LD   SP,STACK   
47CF   CD 89 0B               CALL   coldInit   
47D2   CD 6D 48               CALL   execStr   
47D5   23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "#4321 /h. /c/vB 0%"   
47E8   CD C9 0A               CALL   flushBuffer   
47EB                          ;*Macro unroll:  expect "#4321 /h. /c/vB 0%",$23
47EB   E1                     POP   HL   
47EC   E5                     PUSH   HL   
47ED   11 23 00               LD   DE,$23   
47F0   B7                     OR   A   
47F1   ED 52                  SBC   HL,DE   
47F3   7D                     LD   A,L   
47F4   B4                     OR   H   
47F5   CA 62 48               JP   Z,expectM_0_2768S45   
47F8   CD 41 0B               CALL   printStr   
47FB   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 68 2E 20 2F 63 2F 76 42 20 30 25 00 .CSTR   "Code: ","#4321 /h. /c/vB 0%"   
4814   CD 41 0B               CALL   printStr   
4817   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4826   21 23 00               LD   hl,$23   
4829   E5                     PUSH   hl   
482A   E5                     PUSH   hl   
482B   CD 60 0C               CALL   run   
482E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4836   CD C9 0A               CALL   flushBuffer   
4839   CD 41 0B               CALL   printStr   
483C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4849   E1                     POP   hl   
484A   E5                     PUSH   hl   
484B   E5                     PUSH   hl   
484C   CD 60 0C               CALL   run   
484F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
485E   CD C9 0A               CALL   flushBuffer   
4861   76                     HALT      
4862                EXPECTM_0_2768S45:      
4862   E1                     POP   HL   
4863                             ; 
4863   CD 41 0B               CALL   printStr   
4866   44 6F 6E 65 21 00      .CSTR   "Done!"   
486C   76                     HALT      
486D                             ; executes a null teminated string (null executes exit_)
486D                             ; the string should be immedaitely following the call
486D                EXECSTR:      ; create a root stack frame
486D   C1                     POP   bc   ; bc = code*
486E   0B                     DEC   bc   ; dec to prepare for next routine
486F   11 00 00               LD   de,0   
4872   D5                     PUSH   de   ; push fake IP
4873   D5                     PUSH   de   ; push null arg_list*
4874   D5                     PUSH   de   ; push null first_arg*
4875   D5                     PUSH   de   ; push fake BP
4876   DD E9                  JP   (ix)   
4878                STKSIZE:   EQU   $100   ; Stack size
4878                TIBSIZE:   EQU   $100   ; 256 bytes
4878                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4878                          ALIGN   $100   
4900                          DS   STKSIZE   
4A00                STACK:       
4A00                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                VARS:        
4C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4CD0                RESTARTS:      
4CD0                RST08:    DS   2   
4CD2                RST10:    DS   2   
4CD4                RST18:    DS   2   
4CD6                RST20:    DS   2   
4CD8                RST28:    DS   2   
4CDA                RST30:    DS   2   ; 
4CDC                BAUD:     DS   2   ; 
4CDE                INTVEC:   DS   2   ; 
4CE0                NMIVEC:   DS   2   ; 
4CE2                GETCVEC:   DS   2   ; 
4CE4                PUTCVEC:   DS   2   ; 
4CE6                SYSVARS:      
4CE6                             ; initialised sys variables (preserved)
4CE6                VDATAWIDTH:   DS   2   ; 
4CE8                VNUMBASE:   DS   2   ; 
4CEA                VTIBPTR:   DS   2   ; 
4CEC                VBUFPTR:   DS   2   ; 
4CEE                VNEXT:    DS   2   ; 
4CF0                VHEAPPTR:   DS   2   ; 
4CF2                             ; uninitialised sys variables (preserved)
4CF2                VPOINTER:   DS   2   ; 
4CF4                VREMAIN:   DS   2   ; 
4CF6                VSAVEDIP:   DS   2   ; 
4CF8                VSAVEDSP:   DS   2   ; 
4CFA                VSAVEDNEXT:   DS   2   ; 
4CFC                VSAVEDBP:   DS   2   ; 
4CFE                VCHECKSUM:   DS   2   ; 
4D00                             ; uninitialised sys variables (unpreserved)
4D00                VTEMP1:   DS   2   ; 
4D02                VTEMP2:   DS   2   ; 
4D04                VLASTDEF:   DS   2   ; 
4D06                VHASHSTR:   DS   2   ; 
4D08                TBPTR:    DS   2   ; reserved for tests
4D0A                TITLEBUF:   DS   20   
4D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB4 DEFINED AT LINE 1699 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043E DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
ARRAYEND2:          044E DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
ARRAYEND3:          0453 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARRINDEX:           0474 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047C DEFINED AT LINE 469 IN MAIN.asm
ARRINDEX1:          047D DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ARRINDEX2:          0489 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
ASSIGN:             048C DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048E DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
ASSIGNX:            048F DEFINED AT LINE 490 IN MAIN.asm
ASSIGN1:            049B DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
COLON:              049D DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049D DEFINED AT LINE 506 IN MAIN.asm
ARGLIST1:           04A7 DEFINED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ARGLIST1A:          04AF DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
ARGLIST2:           04B7 DEFINED AT LINE 524 IN MAIN.asm
ARGLIST3:           04BF DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
ARGLIST4:           04C2 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
ARGLIST5:           04C8 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
LBRACE:             04D4 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D4 DEFINED AT LINE 553 IN MAIN.asm
BLOCKSTART1:        04D8 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
BLOCKSTART2:        0504 DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
BLOCKSTART3:        0507 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART4:        050F DEFINED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
BLOCKSTART5:        0512 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
BLOCKSTART6:        053A DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
RBRACE:             053D DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053D DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
BLOCKEND1:          056F DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKEND2:          057B DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
BLOCKEND3:          058D DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
TICK:               0599 DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0599 DEFINED AT LINE 671 IN MAIN.asm
CHAR1:              059C DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
CHAR2:              05A8 DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
CHAR3:              05AB DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
BACKSLASH:          05AE DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05B0 DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05B0 DEFINED AT LINE 695 IN MAIN.asm
DISCARD1:           05BD DEFINED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
SLASH:              05BF DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F5 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DOT:                0606 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0618 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DIVIDE1:            061D DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
DIVIDE2:            062A DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE3:            062B DEFINED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
EQUALS:             0631 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0639 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063E DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0643 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
TRUE1:              0646 DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
NULL1:              064C DEFINED AT LINE 819 IN MAIN.asm
FALSE1:             064C DEFINED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
CARET:              0652 DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0652 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
GO1:                0653 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
GO2:                0659 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOBLOCK:            0664 DEFINED AT LINE 844 IN MAIN.asm
GOBLOCK1:           0664 DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOBLOCK2:           0689 DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOLAMBDA:           0697 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
GOLAMBDA1:          06B4 DEFINED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
GOLAMBDA2:          06BA DEFINED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA3:          06C5 DEFINED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
GOLAMBDA4:          06DD DEFINED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
GOLAMBDA5:          06E1 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOLAMBDA6:          06E4 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOLAMBDA7:          06E7 DEFINED AT LINE 935 IN MAIN.asm
GOLAMBDA8:          06EC DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
HASH:               06F7 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F7 DEFINED AT LINE 951 IN MAIN.asm
HEXNUM1:            06FA DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
HEXNUM2:            0702 DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
UPCASE:             0714 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0719 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071E DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
QUESTION:           072B DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072B DEFINED AT LINE 993 IN MAIN.asm
IFTE:               0737 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
IFTE1:              0738 DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
STAR:               0744 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0744 DEFINED AT LINE 1016 IN MAIN.asm
MUL2:               0746 DEFINED AT LINE 1019 IN MAIN.asm
MUL3:               074E DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
NUM:                0760 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0769 DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
NUM1:               076A DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
NUM2:               0782 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
NUM3:               078D DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
UNDERSCORE:         0790 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             0790 DEFINED AT LINE 1076 IN MAIN.asm
RPAREN:             0796 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079E DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07BA DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C2 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
SHIFTLEFT2:         07C3 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
SHIFTRIGHT:         07CA DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D2 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
SHIFTRIGHT2:        07D6 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
DBLQUOTE:           07DD DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DD DEFINED AT LINE 1148 IN MAIN.asm
STRING1:            07E6 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
STRING2:            07E9 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
STRING3:            07F2 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
MINUS:              0805 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0811 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
SUB1:               081B DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
ERROR1:             0824 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
COMMENT:            082B DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
COMMAND_A:          0834 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
ABSOLUTE:           0840 DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ADDROF:             084D DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
ADDROF1:            0861 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
ADDROF2:            086C DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_B:          086E DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
BUFFERARRAY:        0889 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERNUMBER:       08BD DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC:          08C4 DEFINED AT LINE 1305 IN MAIN.asm
BUFFERDEC0:         08DE DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
BUFFERDEC1:         08EE DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERDEC2:         090E DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
BUFFERDEC3:         0910 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC4:         0920 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BUFFERDEC5:         0921 DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERHEX:          092A DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
BUFFERHEX1:         094B DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
BUFFERHEX2:         0954 DEFINED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
BREAK:              0962 DEFINED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BREAK1:             0969 DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERSTRING:       097C DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
BUFFERSTRING0:      0983 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERSTRING1:      0989 DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERCHAR:         0996 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
BUFFERXCHARS:       099B DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
BUFFERXCHARS0:      099C DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
BUFFERXCHARS1:      09A5 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
BUFFERXCHARS2:      09AD DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
COMMAND_I:          09B7 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
COMMAND_P:          09C3 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
PARTIAL:            09D5 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
PRINTBUFFER:        09F5 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PRINTCHARS:         0A18 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
PRINTCHARS1:        0A1F DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PRINTCHARS2:        0A25 DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
PRINTSTACK:         0A2A DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
SIZE:               0A2C DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
COMMAND_V:          0A36 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
CONSTBUFSTART:      0A4B DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
CONSTHEAPSTART:     0A50 DEFINED AT LINE 1613 IN MAIN.asm
CONSTTIBSTART:      0A55 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
VARBUFPTR:          0A5A DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARHEAPPTR:         0A63 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
VARTIBPTR:          0A6C DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
VARIABLE:           0A75 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
CONSTANT:           0A78 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
CHARS:              0A7B DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
CHARS1:             0A7E DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
DECIMAL:            0A83 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
DECIMAL1:           0A86 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
HEXADECIMAL:        0A8B DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
INPUT:              0A91 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
KEY:                0A9C DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
OUTPUT:             0AA5 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
NUMBERS:            0AAE DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
FILTER:             0AB4 DEFINED AT LINE 1697 IN MAIN.asm
MAP:                0AB4 DEFINED AT LINE 1698 IN MAIN.asm
ARGS0A1L_:          0AB6 DEFINED AT LINE 1705 IN MAIN.asm
ARGS0A1L:           0AB8 DEFINED AT LINE 1708 IN MAIN.asm
ARGS1A0L_:          0AB9 DEFINED AT LINE 1711 IN MAIN.asm
ARGS1A0L:           0ABB DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
ARGS1A1L_:          0ABC DEFINED AT LINE 1717 IN MAIN.asm
ARGS1A1L:           0ABE DEFINED AT LINE 1720 IN MAIN.asm
ARGS2A0L_:          0AC0 DEFINED AT LINE 1723 IN MAIN.asm
ARGS2A0L:           0AC2 DEFINED AT LINE 1726 IN MAIN.asm
ARGS1A2L_:          0AC4 DEFINED AT LINE 1729 IN MAIN.asm
ARGS1A2L:           0AC6 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
FLUSHBUFFER:        0AC9 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 44
                    > USED AT LINE 22
                    > USED AT LINE 31
JUMPTABLE:          0AE0 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
JUMPTABLE0:         0AE2 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
JUMPTABLE1:         0AEF DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
JUMPTABLE2:         0AF0 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
PRTSTR0:            0AF6 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
PRTSTR:             0AFA DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
NESTING:            0AFF DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
NESTING0:           0B09 DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
NESTING1A:          0B10 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
NESTING1:           0B13 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
NESTING2:           0B22 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NESTING3:           0B24 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
NESTING4:           0B2F DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
PROMPT:             0B31 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
CRLF:               0B3A DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PRINTSTR:           0B41 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 16
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 24
                    > USED AT LINE 135
TITLESTR:           0B48 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
INIT:               0B5C DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
INIT1:              0B64 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
WARMINIT:           0B6C DEFINED AT LINE 1873 IN MAIN.asm
COLDBOOT0:          0B7F DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
COLDINIT:           0B89 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
COLDBOOT1:          0B9A DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
COLDSTART:          0BA7 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
START:              0BB0 DEFINED AT LINE 1908 IN MAIN.asm
START1:             0BB6 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
INTERPRET:          0BBC DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
INTERPRET2:         0BCB DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
INTERPRET3:         0BD3 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
INTERPRET4:         0BDE DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
INTERPRET5:         0BE3 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
INTERPRET5A:        0C06 DEFINED AT LINE 1985 IN MAIN.asm
INTERPRET6:         0C08 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
INTERPRET7:         0C16 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
INTERPRET8:         0C29 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
NEXT:               0C44 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
NEXT1:              0C55 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
EXIT:               0C5C DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
RUN:                0C60 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
                    > USED AT LINE 20
                    > USED AT LINE 29
ERROR:              0C64 DEFINED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
BACKSPACE_:         0C77 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
EDIT_:              0C87 DEFINED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
REEDIT_:            0C9F DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PRINTSTACK_:        0CA2 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_0_2654S45:  0D7C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2659S45:  0DFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2660S45:  0E74 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2661S45:  0EE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2662S45:  0F5E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2663S45:  0FD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2664S45:  1048 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2665S45:  10BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2666S45:  1138 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2667S45:  11AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2668S45:  1226 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2669S45:  129F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2670S45:  131A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2671S45:  1393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S45:  140C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S45:  148B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S45:  150A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S45:  1587 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S45:  1608 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S45:  168D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S45:  1710 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S45:  178D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2680S45:  1812 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2681S45:  1893 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2682S45:  1910 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2683S45:  198D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2684S45:  1A12 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2685S45:  1A8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2686S45:  1B0C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2687S45:  1B8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2688S45:  1C1A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S45:  1C97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S45:  1D1C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S45:  1D99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S45:  1E1A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S45:  1E97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S45:  1F16 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S45:  1F95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S45:  2012 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S45:  208F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S45:  210C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S45:  2189 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S45:  2206 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S45:  2283 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S45:  2300 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S45:  237D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S45:  23FC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S45:  247B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S45:  24FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S45:  257B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S45:  25FC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S45:  2677 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S45:  26F2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S45:  2773 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S45:  27FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S45:  2881 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S45:  290C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S45:  29A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S45:  2A36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S45:  2AB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S45:  2B32 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S45:  2BB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S45:  2C36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S45:  2CB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S45:  2D36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S45:  2DB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S45:  2E3E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S45:  2EC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S45:  2F50 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S45:  2FE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S45:  3074 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S45:  310D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S45:  31AA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S45:  3239 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S45:  32CE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S45:  3365 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S45:  33FE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S45:  3495 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S45:  353A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2737S45:  35CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2738S45:  366C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2739S45:  370D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2740S45:  37B0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2741S45:  385F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2742S45:  390E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2743S45:  399B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2744S45:  3A2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2745S45:  3ABB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2746S45:  3B54 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2747S45:  3BED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2748S45:  3C96 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2749S45:  3D47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2750S45:  3DF8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2751S45:  3E91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2752S45:  3F36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2753S45:  3FD7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2754S45:  407E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2755S45:  413B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2756S45:  41FC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2757S45:  4285 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2758S45:  430E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2759S45:  4397 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2760S45:  4420 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2761S45:  44A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2762S45:  4522 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2763S45:  45A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2764S45:  4624 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2765S45:  46AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2766S45:  473E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2767S45:  47CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2768S45:  4862 DEFINED AT LINE 34
                    > USED AT LINE 10
EXECSTR:            486D DEFINED AT LINE 141
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4A00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TIB:                4A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
VARS:               4C00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4CD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4CD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4CD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4CD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4CD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4CD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4CDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4CDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4CDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4CE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4CE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4CE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4CE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1888 IN MAIN.asm
VDATAWIDTH:         4CE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
VNUMBASE:           4CE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VTIBPTR:            4CEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
VBUFPTR:            4CEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
VNEXT:              4CEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1900 IN MAIN.asm
VHEAPPTR:           4CF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
VPOINTER:           4CF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
VREMAIN:            4CF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
VSAVEDIP:           4CF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
VSAVEDSP:           4CF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
VSAVEDNEXT:         4CFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
VSAVEDBP:           4CFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
VCHECKSUM:          4CFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4D00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
VTEMP2:             4D02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VLASTDEF:           4D04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4D06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4D08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4D0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
HEAP:               4D1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
