0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5F               LD   (RST08),HL   
0094   22 D2 5F               LD   (RST10),HL   
0097   22 D4 5F               LD   (RST18),HL   
009A   22 D6 5F               LD   (RST20),HL   
009D   22 D8 5F               LD   (RST28),HL   
00A0   22 DA 5F               LD   (RST30),HL   
00A3   22 DE 5F               LD   (INTVEC),HL   
00A6   22 E0 5F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5D                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5E                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 60                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 60 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 E3 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 0D 0C               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 27 0C               JP   percent   
0215                QUESTION_:      
0215   C3 00 0C               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 5C 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 9E 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 86 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 97 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA FE 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA E2 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA A5 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 AA 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5F               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 97 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 5C 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 88 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 88 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA BE 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 88 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 88 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5F                  LD   h,msb(VARS)   
0309   22 F8 5F               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 50 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 4D 11               JP   error   
0343                LAMBDA2:      
0343   CD 86 0E               CALL   parseBlock   
0346   CD F5 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5F               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5F               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA F9 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 2C 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA F9 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 36 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 86 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 8C 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 D9 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5F            LD   de,(vPointer)   
03ED   21 F8 5F               LD   hl,vPointer   
03F0   C3 97 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD C4 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   16 0B                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*'
041F   C3 36 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 36 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 5F               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA A8 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 5F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 5F               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 5F 04               CALL   printDec2   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 5F            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 36 0E               JP   dotNext   
045F                             ; hl = value
045F                             ; de' = buffer*
045F                             ; a, bc, de, hl destroyed
045F                PRINTDEC2:      
045F   CB 7C                  BIT   7,h   
0461   28 0C                  JR   z,printDec3   
0463   D9                     EXX      
0464   3E 2D                  LD   a,"-"   
0466   12                     LD   (de),a   
0467   13                     INC   de   
0468   D9                     EXX      
0469   AF                     XOR   a   
046A   95                     SUB   l   
046B   6F                     LD   l,a   
046C   9F                     SBC   a,a   
046D   94                     SUB   h   
046E   67                     LD   h,a   
046F                PRINTDEC3:      
046F   0E 00                  LD   c,0   ; leading zeros flag = false
0471   11 F0 D8               LD   de,-10000   
0474   CD 8F 04               CALL   printDec4   
0477   11 18 FC               LD   de,-1000   
047A   CD 8F 04               CALL   printDec4   
047D   11 9C FF               LD   de,-100   
0480   CD 8F 04               CALL   printDec4   
0483   1E F6                  LD   e,-10   
0485   CD 8F 04               CALL   printDec4   
0488   0C                     INC   c   ; flag = true for at least digit
0489   1E FF                  LD   e,-1   
048B   CD 8F 04               CALL   printDec4   
048E   C9                     RET      
048F                PRINTDEC4:      
048F   06 2F                  LD   b,"0"-1   
0491                PRINTDEC5:      
0491   04                     INC   b   
0492   19                     ADD   hl,de   
0493   38 FC                  JR   c,printDec5   
0495   ED 52                  SBC   hl,de   
0497   3E 30                  LD   a,"0"   
0499   B8                     CP   b   
049A   20 05                  JR   nz,printDec6   
049C   AF                     XOR   a   
049D   B1                     OR   c   
049E   C8                     RET   z   
049F   18 01                  JR   printDec7   
04A1                PRINTDEC6:      
04A1   0C                     INC   c   
04A2                PRINTDEC7:      
04A2   78                     LD   a,b   
04A3   D9                     EXX      
04A4   12                     LD   (de),a   
04A5   13                     INC   de   
04A6   D9                     EXX      
04A7   C9                     RET      
04A8                             ; buffer hex                    37
04A8                             ; value --
04A8                PRINTHEX:      
04A8   ED 5B E8 5F            LD   de,(vBufPtr)   
04AC   3A F0 5F               LD   a,(vHexPrefix)   ; "$"
04AF   B7                     OR   a   ; skip if null
04B0   28 02                  JR   z,printHex1   
04B2   12                     LD   (de),a   
04B3   13                     INC   de   ; string*++,
04B4                PRINTHEX1:      
04B4   E1                     POP   hl   ; hl = value
04B5   3A EE 5F               LD   a,(vDataWidth)   
04B8   3D                     DEC   a   
04B9   28 04                  JR   z,printHex2   
04BB   7C                     LD   a,h   
04BC   CD CE 04               CALL   printHex3   
04BF                PRINTHEX2:      
04BF   7D                     LD   a,l   
04C0   CD CE 04               CALL   printHex3   
04C3   3E 20                  LD   a," "   ; append space to buffer
04C5   12                     LD   (de),a   
04C6   13                     INC   de   ; string*++,
04C7   ED 53 E8 5F            LD   (vBufPtr),de   
04CB   C3 36 0E               JP   dotNext   
04CE                PRINTHEX3:      
04CE   F5                     PUSH   af   
04CF   1F                     RRA      
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   CD D7 04               CALL   printHex4   
04D6   F1                     POP   af   
04D7                PRINTHEX4:      
04D7   E6 0F                  AND   0x0F   
04D9   C6 90                  ADD   a,0x90   
04DB   27                     DAA      
04DC   CE 40                  ADC   a,0x40   
04DE   27                     DAA      
04DF   12                     LD   (de),a   
04E0   13                     INC   de   ; string*++,
04E1   C9                     RET      
04E2                             ;********************** PAGE 4 END *********************************************
04E2                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA CB 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD A9 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   45                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   54                     DB   lsb(command_d_)   
050F   5F                     DB   lsb(command_e_)   
0510   6E                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   9D                     DB   lsb(command_h_)   
0513   A8                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   B3                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   C6                     DB   lsb(comand_o_)   
051A   D1                     DB   lsb(command_p_)   
051B   00                     DB   0   
051C   D8                     DB   lsb(command_r_)   
051D   DA                     DB   lsb(command_s_)   
051E   DC                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   DE                     DB   lsb(command_v_)   
0521   E0                     DB   lsb(command_w_)   
0522   E2                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   E4                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD C4 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   77 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   85 06                  DW   addrOf   
0531   69 74                  DB   "it"   ; /ait array iterator
0533   83 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   F7 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /aln array length
053B   8D 06                  DW   arrayLength   
053D   73 00                  DB   "s",0   ; /as array size
053F   96 06                  DW   arraySize   
0541   00 00                  DW   0   
0543   E6 06                  DW   error1   
0545                COMMAND_B_:      
0545   CD C4 0F               CALL   cmdTable   
0548   79 65                  DB   "ye"   ; /bye cold reboot
054A   9E 10                  DW   coldStart   
054C   79 74                  DB   "yt"   ; /byt byte mode
054E   C4 06                  DW   byteMode   
0550   00 00                  DW   0   
0552   E6 06                  DW   error1   
0554                COMMAND_D_:      
0554   CD C4 0F               CALL   cmdTable   
0557   65 63                  DB   "ec"   ; /dec decimal
0559   D4 06                  DW   decBase   
055B   00 00                  DW   0   
055D   E6 06                  DW   error1   
055F                COMMAND_E_:      
055F   CD C4 0F               CALL   cmdTable   
0562   63 68                  DB   "ch"   
0564   DB 06                  DW   echo   
0566   6E 64                  DB   "nd"   
0568   6A 07                  DW   stringEnd   
056A   00 00                  DW   0   
056C   E6 06                  DW   error1   
056E                COMMAND_F_:      
056E   CD C4 0F               CALL   cmdTable   
0571   61 6C                  DB   "al"   ; /fal false
0573   B8 0D                  DW   false1   
0575   6F 72                  DB   "or"   ; /for forEach
0577   8F 0A                  DW   forEach   
0579   72 65                  DB   "re"   ; /fre free memory
057B   F9 06                  DW   memFree   
057D   72 61                  DB   "ra"   ; /fra free memory array
057F   FF 06                  DW   memFreeArray   
0581   73 00                  DB   "s",0   ; /fs funcSrc
0583   DB 0A                  DW   funcSrc   
0585   74 72                  DB   "tr"   ; /ftr filter
0587   DD 09                  DW   filter   
0589   31 00                  DB   "1",0   
058B   8F 11                  DW   f1   
058D   32 00                  DB   "2",0   
058F   9B 11                  DW   f2   
0591   33 00                  DB   "3",0   
0593   A7 11                  DW   f3   
0595   34 00                  DB   "4",0   
0597   B3 11                  DW   f4   
0599   00 00                  DW   0   
059B   E6 06                  DW   error1   
059D                COMMAND_H_:      
059D   CD C4 0F               CALL   cmdTable   
05A0   65 78                  DB   "ex"   ; /hex hex
05A2   E1 06                  DW   hexBase   
05A4   00 00                  DW   0   
05A6   E6 06                  DW   error1   
05A8                COMMAND_I_:      
05A8   CD C4 0F               CALL   cmdTable   
05AB   6E 00                  DB   "n",0   ; /in input
05AD   EC 06                  DW   input   
05AF   00 00                  DW   0   
05B1   E6 06                  DW   error1   
05B3                COMMAND_M_:      
05B3   CD C4 0F               CALL   cmdTable   
05B6   61 70                  DB   "ap"   ; /map map
05B8   9B 09                  DW   map   
05BA   61 78                  DB   "ax"   ; /max maximum
05BC   04 07                  DW   maximum   
05BE   69 6E                  DB   "in"   ; /min minimum
05C0   10 07                  DW   minimum   
05C2   00 00                  DW   0   
05C4   E6 06                  DW   error1   
05C6                COMAND_O_:      
05C6   CD C4 0F               CALL   cmdTable   
05C9   75 74                  DB   "ut"   ; /out out
05CB   1C 07                  DW   output   
05CD   00 00                  DW   0   
05CF   E6 06                  DW   error1   
05D1                COMMAND_P_:      
05D1   CD C4 0F               CALL   cmdTable   
05D4   00 00                  DW   0   
05D6   E6 06                  DW   error1   
05D8                COMMAND_R_:      
05D8   18 0D                  JR   command_r   
05DA                COMMAND_S_:      
05DA   18 22                  JR   command_s   
05DC                COMMAND_T_:      
05DC   18 43                  JR   command_t   
05DE                COMMAND_V_:      
05DE   18 4C                  JR   command_v   
05E0                COMMAND_W_:      
05E0   18 59                  JR   command_w   
05E2                COMMAND_X_:      
05E2   18 66                  JR   command_x   
05E4                             ; 3
05E4                COMMAND_DEFAULT_:      
05E4   C3 55 06               JP   command_default   
05E7                             ;********************** PAGE 5 END *********************************************
05E7                             ; .align $100
05E7                COMMAND_R:      
05E7   CD C4 0F               CALL   cmdTable   
05EA   63 00                  DB   "c",0   ; /rc tail call optimisation
05EC   2F 07                  DW   recur   
05EE   65 6D                  DB   "em"   ; /rem remainder
05F0   35 07                  DW   remain   
05F2   65 74                  DB   "et"   ; /ret return
05F4   25 07                  DW   return   
05F6   6E 67                  DB   "ng"   ; /rng range src
05F8   EA 07                  DW   rangeSrc   
05FA   00 00                  DW   0   
05FC   E6 06                  DW   error1   
05FE                COMMAND_S:      
05FE   CD C4 0F               CALL   cmdTable   
0601   63 6E                  DB   "cn"   ; /scn scan stream
0603   3E 0A                  DW   scan1   
0605   63 70                  DB   "cp"   ; /scp string compare
0607   B4 07                  DW   stringCompare   
0609   65 6C                  DB   "el"   ; /sel select
060B   3B 07                  DW   select   
060D   69 74                  DB   "it"   ; /sit string iterator
060F   0B 09                  DW   stringIter   
0611   6C 00                  DB   "l",0   ; /sl string length
0613   99 07                  DW   stringLength   
0615   73 00                  DB   "s",0   ; /ss string size
0617   A8 07                  DW   stringSize   
0619   74 72                  DB   "tr"   ; /str start building string
061B   62 07                  DW   stringBegin   
061D   00 00                  DW   0   
061F   E6 06                  DW   error1   
0621                COMMAND_T:      
0621   CD C4 0F               CALL   cmdTable   
0624   72 75                  DB   "ru"   ; /tru true
0626   B2 0D                  DW   true1   
0628   00 00                  DW   0   
062A   E6 06                  DW   error1   
062C                COMMAND_V:      
062C   CD C4 0F               CALL   cmdTable   
062F   61 72                  DB   "ar"   ; /var constant vars
0631   00 5F                  DW   vars   
0633   6F 69                  DB   "oi"   ; /voi void function return
0635   D2 07                  DW   void   
0637   00 00                  DW   0   
0639   E6 06                  DW   error1   
063B                COMMAND_W:      
063B   CD C4 0F               CALL   cmdTable   
063E   68 69                  DB   "hi"   ; /whi while true else break from loop
0640   AA 06                  DW   while   
0642   72 64                  DB   "rd"   ; /wrd word mode
0644   DA 07                  DW   wordMode   
0646   00 00                  DW   0   
0648   E6 06                  DW   error1   
064A                COMMAND_X:      
064A   CD C4 0F               CALL   cmdTable   
064D   6F 72                  DB   "or"   ; /xor exclsuive or
064F   DF 07                  DW   xor   
0651   00 00                  DW   0   
0653   E6 06                  DW   error1   
0655                COMMAND_DEFAULT:      
0655   CD C4 0F               CALL   cmdTable   
0658   00 00                  DW   0   
065A   5C 06                  DW   div   
065C                             ;                               32
065C                DIV:         
065C   E1                     POP   hl   ; hl = arg_b
065D   D1                     POP   de   ; de = arg_a
065E   03                     INC   bc   
065F   0A                     LD   a,(bc)   
0660   FE 3D                  CP   "="   
0662   28 02                  JR   z,div2   
0664   0B                     DEC   bc   ; /
0665   EB                     EX   de,hl   
0666                DIV2:        
0666   F5                     PUSH   af   ; preserve af, bc
0667   C5                     PUSH   bc   
0668   44 4D                  LD   bc,hl   
066A   CD 1D 0E               CALL   divide   
066D   EB                     EX   de,hl   
066E   ED 53 FA 5F            LD   (vRemain),de   
0672   C1                     POP   bc   ; restore
0673   F1                     POP   af   
0674   C3 9D 02               JP   sub3   
0677                             ; /abs absolute
0677                             ; num -- num
0677                ABSOLUTE:      
0677   E1                     POP   hl   
0678   CB 7C                  BIT   7,h   
067A   28 06                  JR   z,absolute1   
067C   AF                     XOR   a   
067D   95                     SUB   l   
067E   6F                     LD   l,a   
067F   9F                     SBC   a,a   
0680   94                     SUB   h   
0681   67                     LD   h,a   
0682                ABSOLUTE1:      
0682   E5                     PUSH   hl   
0683   DD E9                  JP   (ix)   
0685                             ; /adr addrOf
0685                             ; char -- addr
0685                ADDROF:      
0685   E1                     POP   hl   ; a = char
0686   7D                     LD   a,l   
0687   CD E6 0F               CALL   getVarAddr   
068A   E5                     PUSH   hl   
068B                ADDROF2:      
068B   DD E9                  JP   (ix)   
068D                             ; /aln length of an array, num elements
068D                             ; array* -- num
068D                ARRAYLENGTH:      
068D   E1                     POP   hl   
068E   2B                     DEC   hl   ; msb size
068F   56                     LD   d,(hl)   
0690   2B                     DEC   hl   ; lsb size
0691   5E                     LD   e,(hl)   
0692   EB                     EX   de,hl   
0693                ARRAYLENGTH1:      
0693   E5                     PUSH   hl   
0694   DD E9                  JP   (ix)   
0696                             ; /as size in bytes of an array, based on current data width
0696                             ; array* -- num
0696                ARRAYSIZE:      
0696                          ;*Macro unroll:  PERFORM arrayLength
0696   DD 21 9D 06            LD   ix,performM_1548S1072   
069A   C3 8D 06               JP   arrayLength   
069D                PERFORMM_1548S1072:      
069D   E1                     POP   hl   
069E   3A EE 5F               LD   a,(vDataWidth)   
06A1   3D                     DEC   a   
06A2   28 EF                  JR   z,arrayLength1   
06A4   CB 3C                  SRL   h   
06A6   CB 1D                  RR   l   
06A8   18 E9                  JR   arrayLength1   
06AA                             ; 13
06AA                             ; /whi while true else break from loop
06AA                             ; --
06AA                WHILE:       
06AA   E1                     POP   hl   ; hl = condition, break if false
06AB   7D                     LD   a,l   
06AC   B4                     OR   h   
06AD   28 02                  JR   z,while1   
06AF   DD E9                  JP   (ix)   
06B1                WHILE1:      
06B1   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06B3   FD 54                  LD   d,iyh   
06B5   21 08 00               LD   hl,8   
06B8   19                     ADD   hl,de   
06B9   23                     INC   hl   
06BA   23                     INC   hl   
06BB   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06BE   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06C1   C3 8C 0C               JP   blockEnd   
06C4                             ; /byt
06C4                BYTEMODE:      
06C4   3E 01                  LD   a,1   
06C6                BYTEMODE1:      
06C6   32 EE 5F               LD   (vDataWidth),a   
06C9   DD E9                  JP   (ix)   
06CB                             ; //
06CB                COMMENT:      
06CB   03                     INC   bc   ; point to next char
06CC   0A                     LD   a,(bc)   
06CD   FE 20                  CP   " "   ; terminate on any char less than SP
06CF   30 FA                  JR   nc,comment   
06D1   0B                     DEC   bc   
06D2   DD E9                  JP   (ix)   
06D4                DECBASE:      
06D4   3E 0A                  LD   a,10   
06D6                DECBASE1:      
06D6   32 EF 5F               LD   (vNumBase),a   
06D9   DD E9                  JP   (ix)   
06DB                             ; /ech
06DB                             ; bool --
06DB                ECHO:        
06DB   E1                     POP   hl   
06DC   22 F1 5F               LD   (vEcho),hl   
06DF   DD E9                  JP   (ix)   
06E1                HEXBASE:      
06E1   3E 10                  LD   a,16   
06E3   C3 D6 06               JP   decBase1   
06E6                ERROR1:      
06E6   21 01 00               LD   hl,1   ; error 1: unknown command
06E9   C3 4D 11               JP   error   
06EC                             ; Z80 port input
06EC                             ; port -- value
06EC                INPUT:       
06EC   E1                     POP   hl   
06ED   59                     LD   e,c   ; save IP
06EE   4D                     LD   c,l   
06EF   ED 68                  IN   l,(c)   
06F1   26 00                  LD   h,0   
06F3   4B                     LD   c,e   ; restore IP
06F4   E5                     PUSH   hl   
06F5   DD E9                  JP   (ix)   
06F7                             ; /alc
06F7                             ; size -- adr
06F7                MEMALLOCATE:      
06F7   DD E9                  JP   (ix)   
06F9                             ; /fre
06F9                             ; adr --
06F9                MEMFREE:      
06F9   E1                     POP   hl   
06FA                MEMFREE1:      
06FA   22 EA 5F               LD   (vHeapPtr),hl   
06FD   DD E9                  JP   (ix)   
06FF                             ; /fra
06FF                             ; adr --
06FF                MEMFREEARRAY:      
06FF   E1                     POP   hl   
0700   2B                     DEC   hl   
0701   2B                     DEC   hl   
0702   18 F6                  JR   memFree1   
0704                             ; /max maximum
0704                             ; a b -- c
0704                MAXIMUM:      
0704   E1                     POP   hl   
0705   D1                     POP   de   
0706   E5                     PUSH   hl   
0707   B3                     OR   e   
0708   ED 52                  SBC   hl,de   
070A   30 02                  JR   nc,maximum1   
070C   E1                     POP   hl   
070D   D5                     PUSH   de   
070E                MAXIMUM1:      
070E   DD E9                  JP   (ix)   
0710                             ; /min minimum
0710                             ; a b -- c
0710                MINIMUM:      
0710   E1                     POP   hl   
0711   D1                     POP   de   
0712   E5                     PUSH   hl   
0713   B3                     OR   e   
0714   ED 52                  SBC   hl,de   
0716   38 02                  JR   c,minimum1   
0718   E1                     POP   hl   
0719   D5                     PUSH   de   
071A                MINIMUM1:      
071A   DD E9                  JP   (ix)   
071C                             ; /o Z80 port output
071C                             ; value port --
071C                OUTPUT:      
071C   E1                     POP   hl   
071D   59                     LD   e,c   ; save IP
071E   4D                     LD   c,l   
071F   E1                     POP   hl   
0720   ED 69                  OUT   (c),l   
0722   4B                     LD   c,e   ; restore IP
0723   DD E9                  JP   (ix)   
0725                             ; /ret
0725                             ; --
0725                RETURN:      
0725   E1                     POP   hl   ; hl = condition, exit if true
0726   7D                     LD   a,l   
0727   B4                     OR   h   
0728   20 02                  JR   nz,return1   
072A   DD E9                  JP   (ix)   
072C                RETURN1:      
072C   C3 8C 0C               JP   blockEnd   
072F                RECUR:       
072F   E1                     POP   hl   
0730   22 EC 5F               LD   (vRecurPtr),hl   
0733   DD E9                  JP   (ix)   
0735                REMAIN:      
0735   2A FA 5F               LD   hl,(vRemain)   
0738   E5                     PUSH   hl   
0739   DD E9                  JP   (ix)   
073B                             ; select case from an associative array of cases
073B                             ; bool cases* --
073B                SELECT:      
073B   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
073C   D1                     POP   de   ; de = select key
073D   C5                     PUSH   bc   ; save IP
073E   2B                     DEC   hl   ; bc = array length
073F   46                     LD   b,(hl)   
0740   2B                     DEC   hl   
0741   4E                     LD   c,(hl)   
0742   23                     INC   hl   
0743   23                     INC   hl   
0744   18 15                  JR   select2   
0746                SELECT1:      
0746   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
0747   BB                     CP   e   
0748   23                     INC   hl   ; hl++, flags are unaltered
0749   20 0C                  JR   nz,select1a   
074B   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
074C   BA                     CP   d   
074D   23                     INC   hl   ; hl++, flags are unaltered
074E   20 08                  JR   nz,select1b   
0750   5E                     LD   e,(hl)   
0751   23                     INC   hl   
0752   56                     LD   d,(hl)   
0753   C1                     POP   bc   
0754   C3 A0 03               JP   go1   
0757                SELECT1A:      
0757   23                     INC   hl   
0758                SELECT1B:      
0758   23                     INC   hl   
0759   23                     INC   hl   
075A   0B                     DEC   bc   
075B                SELECT2:      
075B   79                     LD   a,c   
075C   B0                     OR   b   
075D   20 E7                  JR   nz,select1   
075F   C1                     POP   bc   
0760   DD E9                  JP   (ix)   
0762                             ; /str
0762                STRINGBEGIN:      
0762   21 FF FF               LD   hl,TRUE   ; string mode = true
0765   22 F2 5F               LD   (vStrMode),hl   
0768   18 27                  JR   stringEnd1   ; save hl in vBufPtr
076A                             ; /end
076A                STRINGEND:      
076A   21 00 00               LD   hl,FALSE   ; string mode = false
076D   22 F2 5F               LD   (vStrMode),hl   
0770   2A E8 5F               LD   hl,(vBufPtr)   ; append NUL to string
0773   AF                     XOR   a   
0774   77                     LD   (hl),a   
0775   23                     INC   hl   ; hl = string_end*
0776   ED 43 04 60            LD   (vTemp1),bc   ; save IP
077A   11 00 5E               LD   de,BUFFER   ; de = string*
077D   B7                     OR   a   ; bc = size
077E   ED 52                  SBC   hl,de   
0780   44 4D                  LD   bc,hl   
0782   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = hstring*
0785   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0786   D5                     PUSH   de   ; return hstring*
0787   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0789   ED 53 EA 5F            LD   (vHeapPtr),de   ; bump heap to hstring* += size
078D   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0791                STRINGEND1:      
0791   21 00 5E               LD   hl,BUFFER   ; reset vBufPtr
0794   22 E8 5F               LD   (vBufPtr),hl   
0797   DD E9                  JP   (ix)   
0799                STRINGLENGTH:      
0799   D1                     POP   de   
079A   21 00 00               LD   hl,0   
079D   18 02                  JR   stringLength2   
079F                STRINGLENGTH1:      
079F   13                     INC   de   
07A0   23                     INC   hl   
07A1                STRINGLENGTH2:      
07A1   1A                     LD   a,(de)   
07A2   B7                     OR   a   
07A3   20 FA                  JR   nz,stringLength1   
07A5                STRINGLENGTH3:      
07A5   E5                     PUSH   hl   
07A6   DD E9                  JP   (ix)   
07A8                STRINGSIZE:      
07A8                          ;*Macro unroll:  PERFORM stringLength
07A8   DD 21 AF 07            LD   ix,performM_1771S1317   
07AC   C3 99 07               JP   stringLength   
07AF                PERFORMM_1771S1317:      
07AF   E1                     POP   hl   
07B0   23                     INC   hl   
07B1   C3 A5 07               JP   stringLength3   
07B4                             ; /sc string compare
07B4                             ; string1* string2* -- bool
07B4                             ; Compares two null terminated strings.
07B4                STRINGCOMPARE:      
07B4   D1                     POP   de   
07B5   E1                     POP   hl   
07B6                STRINGCOMPARE1:      
07B6   1A                     LD   a,(de)   
07B7   BE                     CP   (hl)   
07B8   20 07                  JR   nz,stringCompare2   
07BA   B7                     OR   a   
07BB   28 09                  JR   z,stringCompare3   
07BD   13                     INC   de   
07BE   23                     INC   hl   
07BF   18 F5                  JR   stringCompare1   
07C1                STRINGCOMPARE2:      
07C1   21 00 00               LD   hl,FALSE   
07C4   18 03                  JR   stringCompare4   
07C6                STRINGCOMPARE3:      
07C6   21 FF FF               LD   hl,TRUE   
07C9                STRINGCOMPARE4:      
07C9   E5                     PUSH   hl   
07CA   DD E9                  JP   (ix)   
07CC                             ; /var
07CC                             ; --
07CC                VARIABLES:      
07CC   21 00 5F               LD   hl,VARS   
07CF   C3 A6 0F               JP   constant   
07D2                             ; /voi clear out returned values
07D2                             ; ?? --
07D2                VOID:        
07D2   FD 5D                  LD   e,iyl   
07D4   FD 54                  LD   d,iyh   
07D6   EB                     EX   de,hl   
07D7   F9                     LD   sp,hl   
07D8   DD E9                  JP   (ix)   
07DA                             ; /wrd
07DA                WORDMODE:      
07DA   3E 02                  LD   a,2   
07DC   C3 C6 06               JP   byteMode1   
07DF                             ; /xor
07DF                XOR:         
07DF   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07E0                XOR1:        
07E0   E1                     POP   hl   
07E1   7B                     LD   a,e   
07E2   AD                     XOR   l   
07E3   6F                     LD   l,a   
07E4   7A                     LD   a,d   
07E5   AC                     XOR   h   
07E6   67                     LD   h,a   
07E7   C3 D8 02               JP   add3   
07EA                             ;*******************************************************************
07EA                             ; Monty implementations
07EA                             ;*******************************************************************
07EA                             ; /rng rangeSrc
07EA                             ; begin end step -- src
07EA                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07EA                RANGESRC:      ; range source: begin, end, step, local: L
07EA   CD 9F 03               CALL   go   
07ED   00 00                  DW   NUL   
07EF   F9 07                  DW   rangeSrcM_1832S1385   
07F1   F3 07                  DW   $+2   
07F3   01                     DB   1   
07F4   04 62 65 73 4C         .PSTR   "besL"   
07F9                RANGESRCM_1832S1385:      
07F9   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07FA   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0820   5C 6B 74 7B            DB   "\\kt{"   
0824   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
082D   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0833   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
083C   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0844   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
084E   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0857   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
085C   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
0872   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0879   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0880   7D                     DB   "}"   
0881   7D                     DB   "}"   
0882   00                     DB   0   
0883                             ; /ai arrayIter
0883                             ; array* -- src
0883                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0883                ARRAYITER:      
0883   CD 9F 03               CALL   go   
0886   00 00                  DW   NUL   
0888   90 08                  DW   arrayIterM_1851S1405   
088A   8C 08                  DW   $+2   
088C   01                     DB   1   
088D   02 61 4C               .PSTR   "aL"   
0890                ARRAYITERM_1851S1405:      
0890   7B                     DB   "{"   
0891   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 6E 5D 20 25 4C 3D DB   "[0 /tru %a/aln] %L="   ; init mutable L [index active size]
08A4   5C 6B 74 7B            DB   "\\kt{"   
08A8   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
08B1   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08B7   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
08C0   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08C8   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08CF   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08D8   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08E1   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
08FA   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0901   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0908   7D                     DB   "}"   
0909   7D                     DB   "}"   
090A   00                     DB   0   
090B                             ; /sit stringIter
090B                             ; string* -- src
090B                          ;*Macro unroll: FUNC stringIter, 1, "sL"
090B                STRINGITER:      
090B   CD 9F 03               CALL   go   
090E   00 00                  DW   NUL   
0910   18 09                  DW   stringIterM_1870S1425   
0912   14 09                  DW   $+2   
0914   01                     DB   1   
0915   02 73 4C               .PSTR   "sL"   
0918                STRINGITERM_1870S1425:      
0918   7B                     DB   "{"   
0919   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
0925   5C 6B 74 7B            DB   "\\kt{"   
0929   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0932   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0939   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0942   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
094A   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0951   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
0964   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
096D   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0974   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
098A   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0991   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0998   7D                     DB   "}"   
0999   7D                     DB   "}"   
099A   00                     DB   0   
099B                             ; /map map
099B                             ; src func -- src1
099B                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
099B                MAP:         ; map: source, function
099B   CD 9F 03               CALL   go   
099E   00 00                  DW   NUL   
09A0   A8 09                  DW   mapM_1890S1447   
09A2   A4 09                  DW   $+2   
09A4   00                     DB   0   
09A5   02 73 66               .PSTR   "sf"   
09A8                MAPM_1890S1447:      
09A8   7B                     DB   "{"   
09A9   5C 6B 74 7B            DB   "\\kt{"   
09AD   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
09B6   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09BA   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09BF   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09CB   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09D3   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09DA   7D                     DB   "}"   
09DB   7D                     DB   "}"   
09DC   00                     DB   0   
09DD                             ; /ft filter
09DD                             ; src pred -- src1
09DD                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09DD                FILTER:      ; filter: source, predicate, local: T
09DD   CD 9F 03               CALL   go   
09E0   00 00                  DW   NUL   
09E2   EB 09                  DW   filterM_1904S1462   
09E4   E6 09                  DW   $+2   
09E6   01                     DB   1   
09E7   03 73 70 54            .PSTR   "spT"   
09EB                FILTERM_1904S1462:      
09EB   7B                     DB   "{"   
09EC   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F2   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09F6   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09FA   5B                     DB   "["   
09FB   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
0A0A   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A12   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
0A18   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0A1D   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A33   3F                     DB   "?"   
0A34   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A3B   7D                     DB   "}"   
0A3C   7D                     DB   "}"   
0A3D   00                     DB   0   
0A3E                             ; /scn scan1
0A3E                             ; src init reducer -- src1
0A3E                             ; where reducer is a function like: \\da00bbLi4u
0A3E                          ;*Macro unroll: FUNC scan1, 1, "sirA"                    ; src, init, reducer
0A3E                SCAN1:       ; src, init, reducer
0A3E   CD 9F 03               CALL   go   
0A41   00 00                  DW   NUL   
0A43   4D 0A                  DW   scan1M_1923S1482   
0A45   47 0A                  DW   $+2   
0A47   01                     DB   1   
0A48   04 73 69 72 41         .PSTR   "sirA"   
0A4D                SCAN1M_1923S1482:      
0A4D   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A4E   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A55   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A59   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A5D   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A62   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A7D   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A85   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A8C   7D                     DB   "}"   
0A8D   7D                     DB   "}"   
0A8E   00                     DB   0   
0A8F                             ; /for forEach
0A8F                             ; src proc --
0A8F                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A8F                FOREACH:      ; forEach: source, procedure, local: T
0A8F   CD 9F 03               CALL   go   
0A92   00 00                  DW   NUL   
0A94   9D 0A                  DW   forEachM_1937S1497   
0A96   98 0A                  DW   $+2   
0A98   01                     DB   1   
0A99   03 73 70 54            .PSTR   "spT"   
0A9D                FOREACHM_1937S1497:      
0A9D   7B                     DB   "{"   
0A9E   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AA4   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0AA8   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0AB1   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AB6   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AC8   3F                     DB   "?"   ; ifte:
0AC9   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AD2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AD9   7D                     DB   "}"   
0ADA   00                     DB   0   
0ADB                             ; ; /fs funcSrc
0ADB                             ; ; func -- src
0ADB                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0ADB                FUNCSRC:      ; :f func or block
0ADB   CD 9F 03               CALL   go   
0ADE   00 00                  DW   NUL   
0AE0   E7 0A                  DW   funcSrcM_1951S1512   
0AE2   E4 0A                  DW   $+2   
0AE4   00                     DB   0   
0AE5   01 66                  .PSTR   "f"   
0AE7                FUNCSRCM_1951S1512:      
0AE7   7B                     DB   "{"   
0AE8   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AEC   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0AF5   5C 64 74 7B            DB   "\\dt{"   
0AF9   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0B0C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B13   7D                     DB   "}"   
0B14   7D                     DB   "}"   
0B15   00                     DB   0   
0B16                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B16                PRINTARRAY:      
0B16   CD 9F 03               CALL   go   
0B19   00 00                  DW   NUL   
0B1B   24 0B                  DW   printArrayM_1961S1523   
0B1D   1F 0B                  DW   $+2   
0B1F   02                     DB   2   
0B20   03 61 62 63            .PSTR   "abc"   
0B24                PRINTARRAYM_1961S1523:      
0B24   7B                     DB   "{"   
0B25   27 5B 20 27 2E 73 20 25 61 2F 61 6C 6E 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/aln%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B5E   7D                     DB   "}"   
0B5F   00                     DB   0   
0B60                             ;*******************************************************************
0B60                             ; implementations continued
0B60                             ;*******************************************************************
0B60                COMMA:       
0B60   CD C4 0F               CALL   cmdTable   
0B63   63 00                  DB   "c",NUL   ; .c print char
0B65   6F 0B                  DW   readChar   
0B67   73 00                  DB   "s",NUL   ; .s print string
0B69   78 0B                  DW   readString   
0B6B   00 00                  DW   NUL   ; .  print number, fall through
0B6D   9A 0B                  DW   readNumber   
0B6F                READCHAR:      
0B6F   CD 81 00               CALL   getchar   
0B72   26 00                  LD   h,0   
0B74   6F                     LD   l,a   
0B75   E5                     PUSH   hl   
0B76   DD E9                  JP   (ix)   
0B78                READSTRING:      
0B78   ED 5B EA 5F            LD   de,(vHeapPtr)   
0B7C   D5                     PUSH   de   ; return start of string
0B7D                READSTRING1:      
0B7D   CD 81 00               CALL   getchar   
0B80   FE 0D                  CP   "\r"   
0B82   28 0D                  JR   z,readString2   
0B84   12                     LD   (de),a   
0B85   13                     INC   de   
0B86   3A F1 5F               LD   a,(vEcho)   
0B89   3C                     INC   a   
0B8A   20 F1                  JR   nz,readString1   
0B8C   CD 85 00               CALL   putchar   
0B8F   18 EC                  JR   readString1   
0B91                READSTRING2:      
0B91   AF                     XOR   a   
0B92   12                     LD   (de),a   
0B93   13                     INC   de   
0B94   ED 53 EA 5F            LD   (vHeapPtr),de   
0B98   DD E9                  JP   (ix)   
0B9A                READNUMBER:      
0B9A   DD E5                  PUSH   ix   
0B9C                          ;*Macro unroll:  PERFORM readString
0B9C   DD 21 A3 0B            LD   ix,performM_2005S1572   
0BA0   C3 78 0B               JP   readString   
0BA3                PERFORMM_2005S1572:      
0BA3   60 69                  LD   hl,bc   ; save bc, hl = string*
0BA5   E3                     EX   (sp),hl   
0BA6   22 EA 5F               LD   (vHeapPtr),hl   ; restore heap* to before string
0BA9   44 4D                  LD   bc,hl   
0BAB   0A                     LD   a,(bc)   
0BAC   FE 2D                  CP   "-"   
0BAE   28 11                  JR   z,readNumber1   
0BB0   FE 24                  CP   "$"   
0BB2   28 17                  JR   z,readNumber2   
0BB4   FE 30                  CP   "0"   
0BB6   30 09                  JR   nc,readNumber1   
0BB8   FE 3A                  CP   "9"+1   
0BBA   38 05                  JR   c,readNumber1   
0BBC   21 00 00               LD   hl,0   
0BBF   18 12                  JR   readNumber3   
0BC1                READNUMBER1:      
0BC1                          ;*Macro unroll:  PERFORM num
0BC1   DD 21 C8 0B            LD   ix,performM_2022S1589   
0BC5   C3 5C 0C               JP   num   
0BC8                PERFORMM_2022S1589:      
0BC8   E1                     POP   hl   
0BC9   18 08                  JR   readNumber3   
0BCB                READNUMBER2:      
0BCB                          ;*Macro unroll:  PERFORM hexNum
0BCB   DD 21 D2 0B            LD   ix,performM_2026S1593   
0BCF   C3 E3 0B               JP   hexNum   
0BD2                PERFORMM_2026S1593:      
0BD2   E1                     POP   hl   
0BD3                READNUMBER3:      
0BD3   C1                     POP   bc   
0BD4   DD E1                  POP   ix   
0BD6   E5                     PUSH   hl   
0BD7   DD E9                  JP   (ix)   
0BD9                             ; ~ bitwise invert
0BD9                TILDE:       
0BD9                INVERT:      
0BD9   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BDA   7D                     LD   a,l   
0BDB   2F                     CPL      
0BDC   6F                     LD   l,a   
0BDD   7C                     LD   a,h   
0BDE   2F                     CPL      
0BDF   67                     LD   h,a   
0BE0   C3 D8 02               JP   add3   
0BE3                             ; $ hex                         ; 22
0BE3                DOLLAR:      
0BE3                HEXNUM:      
0BE3   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BE6                HEXNUM1:      
0BE6   03                     INC   bc   
0BE7   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BE8   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BEA   28 02                  JR   z,hexnum2   ; no a decimal
0BEC   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BEE                HEXNUM2:      
0BEE   D6 30                  SUB   $30   ; form decimal digit
0BF0   DA 7E 0C               JP   c,num2   
0BF3   FE 10                  CP   $0F+1   
0BF5   D2 7E 0C               JP   nc,num2   
0BF8   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BF9   29                     ADD   hl,hl   ; 4X
0BFA   29                     ADD   hl,hl   ; 8X
0BFB   29                     ADD   hl,hl   ; 16X
0BFC   85                     ADD   a,l   ; add into bottom of hl
0BFD   6F                     LD   l,a   
0BFE   18 E6                  JR   hexnum1   
0C00                             ; ? if                            23
0C00                             ; condition then else -- value
0C00                QUESTION:      
0C00                IF:          
0C00   D1                     POP   de   ; de = else
0C01   E1                     POP   hl   ; hl = then
0C02   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0C03   7C                     LD   a,h   
0C04   B5                     OR   l   
0C05   E1                     POP   hl   ; hl = then
0C06   CA A0 03               JP   z,go1   ; if z de = else
0C09   EB                     EX   de,hl   ; condition = false, de = then
0C0A   C3 A0 03               JP   go1   
0C0D                             ; string                        ;38
0C0D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C0D                QUOTE:       
0C0D                STRING:      
0C0D   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0C10   E5                     PUSH   hl   ; save start of string
0C11   0A                     LD   a,(bc)   
0C12   5F                     LD   e,a   ; e = matching terminator
0C13   03                     INC   bc   ; point to next char
0C14   18 03                  JR   string2   
0C16                STRING1:      
0C16   77                     LD   (hl),a   
0C17   23                     INC   hl   ; increase count
0C18   03                     INC   bc   ; point to next char
0C19                STRING2:      
0C19   0A                     LD   a,(bc)   
0C1A   BB                     CP   e   ; is it the string terminator
0C1B   28 02                  JR   z,string3   
0C1D   18 F7                  JR   string1   
0C1F                STRING3:      
0C1F   AF                     XOR   a   ; write NUL to terminate string
0C20   77                     LD   (hl),a   ; hl = end of string
0C21   23                     INC   hl   
0C22   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C25   DD E9                  JP   (ix)   
0C27                             ; %a .. %z                      43
0C27                             ; -- value
0C27                             ; returns value of arg
0C27                PERCENT:      
0C27                ARG:         
0C27   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C2A   FD 56 05               LD   d,(iy+5)   
0C2D   EB                     EX   de,hl   
0C2E   7D                     LD   a,l   ; arg_list* == null, skip
0C2F   B4                     OR   h   
0C30   28 1A                  JR   z,arg0a   
0C32   23                     INC   hl   ; a = num_args, hl = arg_list*
0C33   7E                     LD   a,(hl)   
0C34   23                     INC   hl   
0C35   B7                     OR   a   
0C36   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C38   5F                     LD   e,a   ; e = a = num_args
0C39   03                     INC   bc   ; a = next char = dollar_name
0C3A   0A                     LD   a,(bc)   
0C3B   C5                     PUSH   bc   ; save IP
0C3C   43                     LD   b,e   ; b = e = num_args
0C3D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C40   FD 56 03               LD   d,(iy+3)   
0C43                ARG0:        
0C43   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C44   1B                     DEC   de   
0C45   BE                     CP   (hl)   
0C46   28 09                  JR   z,arg1   
0C48   23                     INC   hl   ; hl = next arg_list*
0C49   10 F8                  DJNZ   arg0   
0C4B   C1                     POP   bc   ; no match, restore IP
0C4C                ARG0A:       
0C4C   11 00 00               LD   de,0   ; return 0
0C4F   18 08                  JR   arg1a   
0C51                ARG1:        
0C51   C1                     POP   bc   ; restore IP
0C52   EB                     EX   de,hl   ; hl = arg*
0C53   22 F8 5F               LD   (vPointer),hl   ; store arg* in setter
0C56   5E                     LD   e,(hl)   
0C57   23                     INC   hl   
0C58   56                     LD   d,(hl)   ; de = arg
0C59                ARG1A:       
0C59   D5                     PUSH   de   ; push arg
0C5A   DD E9                  JP   (ix)   
0C5C                             ; 0..9 number                   37
0C5C                NUM:         
0C5C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C5F   0A                     LD   a,(bc)   ; Get numeral or -
0C60   FE 2D                  CP   "-"   
0C62   20 01                  JR   nz,num0   
0C64   03                     INC   bc   ; move to next char, no flags affected
0C65                NUM0:        
0C65   08                     EX   af,af'   ; save zero flag = 0 for later
0C66                NUM1:        
0C66   0A                     LD   a,(bc)   ; read digit
0C67   D6 30                  SUB   "0"   ; less than 0?
0C69   38 13                  JR   c,num2   ; not a digit, exit loop
0C6B   FE 0A                  CP   10   ; greater that 9?
0C6D   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C6F   03                     INC   bc   ; inc IP
0C70   54 5D                  LD   de,hl   ; multiply hl * 10
0C72   29                     ADD   hl,hl   
0C73   29                     ADD   hl,hl   
0C74   19                     ADD   hl,de   
0C75   29                     ADD   hl,hl   
0C76   85                     ADD   a,l   ; add digit in a to hl
0C77   6F                     LD   l,a   
0C78   3E 00                  LD   a,0   
0C7A   8C                     ADC   a,h   
0C7B   67                     LD   h,a   
0C7C   18 E8                  JR   num1   
0C7E                NUM2:        
0C7E   0B                     DEC   bc   
0C7F   08                     EX   af,af'   ; restore zero flag
0C80   20 07                  JR   nz,num3   
0C82   EB                     EX   de,hl   ; negate the value of hl
0C83   21 00 00               LD   hl,0   
0C86   B7                     OR   a   ; jump to sub2
0C87   ED 52                  SBC   hl,de   
0C89                NUM3:        
0C89   E5                     PUSH   hl   ; Put the number on the stack
0C8A   DD E9                  JP   (ix)   ; and process the next character
0C8C                             ; }                               58
0C8C                RBRACE:      
0C8C                BLOCKEND:      
0C8C   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C8F   FD 56 01               LD   d,(iy+1)   
0C92   ED 53 04 60            LD   (vTemp1),de   
0C96   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C99   FD 56 07               LD   d,(iy+7)   
0C9C   ED 53 06 60            LD   (vTemp2),de   
0CA0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0CA3   FD 56 03               LD   d,(iy+3)   
0CA6   EB                     EX   de,hl   
0CA7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0CAA   FD 56 01               LD   d,(iy+1)   
0CAD   13                     INC   de   ; for carry flag <=
0CAE   B7                     OR   a   
0CAF   ED 52                  SBC   hl,de   
0CB1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0CB3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0CB5   FD 5D                  LD   e,iyl   
0CB7   21 08 00               LD   hl,8   
0CBA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0CBB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0CBC   18 0C                  JR   blockEnd2   
0CBE                BLOCKEND1:      ; same scope
0CBE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0CC1   FD 56 03               LD   d,(iy+3)   
0CC4   EB                     EX   de,hl   
0CC5   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CC7   FD 5D                  LD   e,iyl   
0CC9   EB                     EX   de,hl   
0CCA                BLOCKEND2:      
0CCA   44 4D                  LD   bc,hl   ; bc = hl = BP
0CCC   B7                     OR   a   ; hl = BP - SP = count
0CCD   ED 72                  SBC   hl,sp   
0CCF   7D                     LD   a,l   
0CD0   B4                     OR   h   
0CD1   28 09                  JR   z,blockEnd3   
0CD3   C5                     PUSH   bc   ; bc = count, hl = BP
0CD4   44 4D                  LD   bc,hl   
0CD6   E1                     POP   hl   
0CD7   2B                     DEC   hl   ; hl = BP-1
0CD8   1B                     DEC   de   ; de = args*-1
0CD9   ED B8                  LDDR      
0CDB   13                     INC   de   
0CDC                BLOCKEND3:      
0CDC   EB                     EX   de,hl   ; sp = de = new tos*
0CDD   F9                     LD   sp,hl   
0CDE   ED 4B 06 60            LD   bc,(vTemp2)   
0CE2   FD 2A 04 60            LD   iy,(vTemp1)   
0CE6   ED 5B EC 5F            LD   de,(vRecurPtr)   ; de = recur vector
0CEA   7B                     LD   a,e   ; check for NUL
0CEB   B2                     OR   d   
0CEC   20 02                  JR   nz,blockEnd4   
0CEE   DD E9                  JP   (ix)   
0CF0                BLOCKEND4:      
0CF0   21 00 00               LD   hl,0   ; clear recur vector
0CF3   22 EC 5F               LD   (vRecurPtr),hl   
0CF6   C3 A0 03               JP   go1   ; execute de
0CF9                GOBLOCK:      
0CF9   ED 53 04 60            LD   (vTemp1),de   ; save de
0CFD   21 00 5D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0D00   FD 54                  LD   d,iyh   
0D02   FD 5D                  LD   e,iyl   
0D04   B7                     OR   a   ; if stack* == BP then this is the root_scope
0D05   ED 52                  SBC   hl,de   
0D07   ED 5B 04 60            LD   de,(vTemp1)   ; restore de
0D0B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0D0C   B4                     OR   h   
0D0D   3E 00                  LD   a,0   
0D0F   28 6A                  JR   z,goFunc8   
0D11   C5                     PUSH   bc   ; push IP
0D12   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0D15   FD 46 05               LD   b,(iy+5)   
0D18   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0D1B   FD 66 03               LD   h,(iy+3)   
0D1E                GOBLOCK2:      
0D1E   C5                     PUSH   bc   ; arg_list*
0D1F   E5                     PUSH   hl   ; first_arg*
0D20   FD E5                  PUSH   iy   ; push BP
0D22   FD 21 00 00            LD   iy,0   ; BP = SP
0D26   FD 39                  ADD   iy,sp   
0D28                GOBLOCK3:      
0D28   42 4B                  LD   bc,de   ; bc = de = block*-1
0D2A   DD E9                  JP   (ix)   
0D2C                GOFUNC:      ; execute func
0D2C   EB                     EX   de,hl   ; hl = func*
0D2D   5E                     LD   e,(hl)   ; de = partial_array*
0D2E   23                     INC   hl   
0D2F   56                     LD   d,(hl)   
0D30   23                     INC   hl   
0D31   7B                     LD   a,e   ; if partial_array* == null skip
0D32   B2                     OR   d   
0D33   28 21                  JR   z,goFunc3   
0D35   ED 43 04 60            LD   (vTemp1),bc   
0D39   22 06 60               LD   (vTemp2),hl   ; save bc,hl
0D3C   EB                     EX   de,hl   ; hl = partial_array*
0D3D   2B                     DEC   hl   ; bc = count
0D3E   46                     LD   b,(hl)   
0D3F   2B                     DEC   hl   
0D40   4E                     LD   c,(hl)   
0D41   23                     INC   hl   ; hl = array data*
0D42   23                     INC   hl   
0D43   18 06                  JR   goFunc2   ; push each item on stack
0D45                GOFUNC1:      
0D45   5E                     LD   e,(hl)   ; de = partial item
0D46   23                     INC   hl   
0D47   56                     LD   d,(hl)   
0D48   23                     INC   hl   
0D49   D5                     PUSH   de   ; push on stack
0D4A   0B                     DEC   bc   
0D4B                GOFUNC2:      
0D4B   79                     LD   a,c   ; if count != 0 then loop
0D4C   B0                     OR   b   
0D4D   20 F6                  JR   nz,goFunc1   
0D4F   ED 4B 04 60            LD   bc,(vTemp1)   ; restore bc
0D53   2A 06 60               LD   hl,(vTemp2)   ; restore hl
0D56                GOFUNC3:      
0D56   5E                     LD   e,(hl)   ; de = block*
0D57   23                     INC   hl   
0D58   56                     LD   d,(hl)   
0D59   23                     INC   hl   
0D5A   ED 53 04 60            LD   (vTemp1),de   ; save block*
0D5E   5E                     LD   e,(hl)   ; de = arg_list*
0D5F   23                     INC   hl   
0D60   56                     LD   d,(hl)   
0D61   23                     INC   hl   
0D62   EB                     EX   de,hl   ; hl = arg_list*
0D63   ED 5B 04 60            LD   de,(vTemp1)   ; restore de = block*
0D67   7D                     LD   a,l   ; if arg_list* == null a = 0
0D68   B4                     OR   h   
0D69   20 03                  JR   nz,goFunc4   
0D6B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D6C   18 0D                  JR   goFunc8   
0D6E                GOFUNC4:      ; allocate locals
0D6E   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D6F   18 03                  JR   goFunc6   
0D71                GOFUNC5:      ; loop
0D71   3B                     DEC   sp   
0D72   3B                     DEC   sp   
0D73   3D                     DEC   a   
0D74                GOFUNC6:      
0D74   B7                     OR   a   
0D75   20 FA                  JR   nz,goFunc5   ; end loop
0D77                GOFUNC7:      
0D77   23                     INC   hl   ; a = num_args* x 2
0D78   7E                     LD   a,(hl)   
0D79   2B                     DEC   hl   
0D7A   87                     ADD   a,a   ; a *= 2
0D7B                GOFUNC8:      
0D7B   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D7C   44 4D                  LD   bc,hl   
0D7E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D81   85                     ADD   a,l   
0D82   6F                     LD   l,a   
0D83   39                     ADD   hl,sp   
0D84   18 98                  JR   goBlock2   
0D86                             ; =                              21
0D86                             ; value _oldValue --            ; uses address in vPointer 15
0D86                ASSIGN:      
0D86   E1                     POP   hl   ; discard last accessed value
0D87   E1                     POP   hl   ; hl = new value
0D88                ASSIGN0:      
0D88   EB                     EX   de,hl   ; de = new value
0D89   2A F8 5F               LD   hl,(vPointer)   
0D8C                ASSIGN1:      ; entry point from defineEnd
0D8C   73                     LD   (hl),e   
0D8D   3A EE 5F               LD   a,(vDataWidth)   
0D90   3D                     DEC   a   ; is it byte?
0D91   28 02                  JR   z,assign2   
0D93   23                     INC   hl   
0D94   72                     LD   (hl),d   
0D95                ASSIGN2:      
0D95   DD E9                  JP   (ix)   
0D97                             ; hl = value1, de = value2
0D97                             ; hl = result
0D97                EQUALS:      
0D97   B7                     OR   a   ; reset the carry flag
0D98   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D9A   28 16                  JR   z,true1   
0D9C   18 1A                  JR   false1   
0D9E                NOTEQUALS:      
0D9E   B7                     OR   a   ; reset the carry flag
0D9F   ED 52                  SBC   hl,de   
0DA1   20 0F                  JR   nz,true1   
0DA3   18 13                  JR   false1   
0DA5                             ; hl = value1 de = value2
0DA5                             ; hl = result
0DA5                LESSTHANEQ:      
0DA5   B7                     OR   a   
0DA6   ED 52                  SBC   hl,de   
0DA8   18 05                  JR   lessthan1   
0DAA                             ; hl = value1 de = value2
0DAA                             ; hl = result
0DAA                LESSTHAN:      
0DAA   B7                     OR   a   
0DAB   ED 52                  SBC   hl,de   
0DAD   28 09                  JR   z,false1   
0DAF                LESSTHAN1:      
0DAF   FA B8 0D               JP   m,false1   
0DB2                TRUE1:       
0DB2   21 FF FF               LD   hl,TRUE   
0DB5   E5                     PUSH   hl   
0DB6   DD E9                  JP   (ix)   
0DB8                NULL1:       
0DB8                FALSE1:      
0DB8   21 00 00               LD   hl,FALSE   
0DBB   E5                     PUSH   hl   
0DBC   DD E9                  JP   (ix)   
0DBE                SPREAD:      
0DBE   E1                     POP   hl   ; hl = array*
0DBF   ED 43 04 60            LD   (vTemp1),bc   ; save bc
0DC3   2B                     DEC   hl   ; bc = length
0DC4   46                     LD   b,(hl)   
0DC5   2B                     DEC   hl   
0DC6   4E                     LD   c,(hl)   
0DC7   23                     INC   hl   ; move back to array 0
0DC8   23                     INC   hl   
0DC9   18 0D                  JR   spread3   
0DCB                SPREAD1:      
0DCB   5E                     LD   e,(hl)   ; e = lsb data at hl
0DCC   23                     INC   hl   
0DCD   3A EE 5F               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DD0   57                     LD   d,a   
0DD1   15                     DEC   d   
0DD2   28 02                  JR   z,spread2   
0DD4   56                     LD   d,(hl)   ; d = msb data at hl
0DD5   23                     INC   hl   
0DD6                SPREAD2:      
0DD6   D5                     PUSH   de   ; return de
0DD7   0B                     DEC   bc   ; count--
0DD8                SPREAD3:      
0DD8   79                     LD   a,c   ; exit loop if bc == 0
0DD9   B0                     OR   b   
0DDA   20 EF                  JR   nz,spread1   
0DDC   ED 4B 04 60            LD   bc,(vTemp1)   ; restore bc
0DE0   DD E9                  JP   (ix)   
0DE2                             ; shiftLeft
0DE2                             ; value count <<
0DE2                             ; count variable <<=
0DE2                SHIFTLEFT:      
0DE2   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DE3   D1                     POP   de   
0DE4   03                     INC   bc   
0DE5   0A                     LD   a,(bc)   
0DE6   FE 3D                  CP   "="   
0DE8   28 02                  JR   z,shiftLeft2   
0DEA   0B                     DEC   bc   
0DEB   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DEC                SHIFTLEFT2:      
0DEC   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0DF0   43                     LD   b,e   ; b = loop counter
0DF1   04                     INC   b   ; test for counter=0 case
0DF2   18 01                  JR   shiftLeft4   
0DF4                SHIFTLEFT3:      
0DF4   29                     ADD   hl,hl   ; left shift hl
0DF5                SHIFTLEFT4:      
0DF5   10 FD                  DJNZ   shiftLeft3   
0DF7   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0DFB   C3 9D 02               JP   sub3   
0DFE                             ; shiftRight
0DFE                             ; value count >>
0DFE                             ; count variable >>=
0DFE                SHIFTRIGHT:      
0DFE   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DFF   D1                     POP   de   
0E00   03                     INC   bc   
0E01   0A                     LD   a,(bc)   
0E02   FE 3D                  CP   "="   
0E04   28 02                  JR   z,shiftRight2   
0E06   0B                     DEC   bc   
0E07   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0E08                SHIFTRIGHT2:      
0E08   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0E0C   43                     LD   b,e   ; b = loop counter
0E0D   04                     INC   b   ; test for counter=0 case
0E0E   18 04                  JR   shiftRight4   
0E10                SHIFTRIGHT3:      
0E10   CB 3C                  SRL   h   ; right shift hl
0E12   CB 1D                  RR   l   
0E14                SHIFTRIGHT4:      
0E14   10 FA                  DJNZ   shiftRight3   
0E16   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0E1A   C3 9D 02               JP   sub3   
0E1D                             ; division subroutine.
0E1D                             ; bc: divisor, de: dividend, hl: remainder
0E1D                DIVIDE:      
0E1D   21 00 00               LD   hl,0   ; zero the remainder
0E20   3E 10                  LD   a,16   ; loop counter
0E22                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0E22   CB 21                  SLA   c   
0E24   CB 10                  RL   b   
0E26   ED 6A                  ADC   hl,hl   
0E28   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E2A   38 03                  JR   c,divide2   
0E2C   0C                     INC   c   
0E2D   18 01                  JR   divide3   
0E2F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E2F   19                     ADD   hl,de   
0E30                DIVIDE3:      
0E30   3D                     DEC   a   
0E31   20 EF                  JR   nz,divide1   
0E33   50 59                  LD   de,bc   ; result from bc to de
0E35   C9                     RET      
0E36                DOTNEXT:      
0E36   3A F2 5F               LD   a,(vStrMode)   ; if string mode then exit
0E39   3C                     INC   a   
0E3A   20 02                  JR   nz,dotNext1   
0E3C   DD E9                  JP   (ix)   
0E3E                DOTNEXT1:      
0E3E   11 00 5E               LD   de,BUFFER   
0E41   2A E8 5F               LD   hl,(vBufPtr)   
0E44   36 00                  LD   (hl),0   ; store NUL at end of string
0E46   ED 53 E8 5F            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E4A   EB                     EX   de,hl   ; hl = BUFFER
0E4B   CD 01 10               CALL   putstr   
0E4E   DD E9                  JP   (ix)   
0E50                             ; arg_list - parses arg_list e.g. ab:c
0E50                             ; -- arg_list*
0E50                PARSEARGS:      
0E50   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E53   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0E56   E5                     PUSH   hl   ; save start of arg_list
0E57   23                     INC   hl   ; skip length fields to start of string
0E58   23                     INC   hl   
0E59   03                     INC   bc   ; point to next char
0E5A                PARSEARGS1:      
0E5A   0A                     LD   a,(bc)   
0E5B   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E5D   20 03                  JR   nz,parseArgs1a   
0E5F   14                     INC   d   ; non zero value local count acts as flag
0E60   18 10                  JR   parseArgs3   
0E62                PARSEARGS1A:      
0E62   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E64   38 0F                  JR   c,parseArgs4   
0E66   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E68   30 0B                  JR   nc,parseArgs4   
0E6A                PARSEARGS2:      
0E6A   77                     LD   (hl),a   
0E6B   23                     INC   hl   
0E6C   1C                     INC   e   ; increase arg count
0E6D   AF                     XOR   a   
0E6E   B2                     OR   d   
0E6F   28 01                  JR   z,parseArgs3   
0E71   14                     INC   d   ; if d > 0 increase local count
0E72                PARSEARGS3:      
0E72   03                     INC   bc   ; point to next char
0E73   18 E5                  JR   parseArgs1   
0E75                PARSEARGS4:      
0E75   0B                     DEC   bc   
0E76   AF                     XOR   a   
0E77   B2                     OR   d   
0E78   28 01                  JR   z,parseArgs5   
0E7A   15                     DEC   d   ; remove initial inc
0E7B                PARSEARGS5:      
0E7B   23                     INC   hl   
0E7C   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E7F   E1                     POP   hl   ; hl = start of arg_list
0E80   72                     LD   (hl),d   ; write number of locals at start - 1
0E81   23                     INC   hl   
0E82   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E83   2B                     DEC   hl   
0E84   E3                     EX   (sp),hl   
0E85   E9                     JP   (hl)   
0E86                             ; create block: parses block e.g. 00bbIC4uLi4g
0E86                             ; -- block*
0E86                PARSEBLOCK:      
0E86   C5                     PUSH   bc   ; return pointer to first { of block
0E87   03                     INC   bc   
0E88   16 01                  LD   d,1   ; nesting: count first parenthesis
0E8A                PARSEBLOCK1:      ; Skip to end of definition
0E8A   0A                     LD   a,(bc)   ; Get the next character
0E8B   03                     INC   bc   ; Point to next character
0E8C   FE 21                  CP   " " + 1   ; ignore whitespace
0E8E   38 FA                  JR   c,parseBlock1   
0E90   FE 27                  CP   "'"   ; quote char
0E92   28 0F                  JR   z,parseBlock2   
0E94   FE 22                  CP   DQ   ; double quote char
0E96   28 0B                  JR   z,parseBlock2   
0E98   FE 60                  CP   "`"   ; grave char
0E9A   28 07                  JR   z,parseBlock2   
0E9C   CB 7A                  BIT   7,d   
0E9E   20 EA                  JR   nz,parseBlock1   
0EA0   C3 A9 0E               JP   parseBlock3   
0EA3                PARSEBLOCK2:      
0EA3   3E 80                  LD   a,$80   
0EA5   AA                     XOR   d   
0EA6   57                     LD   d,a   
0EA7   18 E1                  JR   parseBlock1   
0EA9                PARSEBLOCK3:      
0EA9   FE 28                  CP   "("   
0EAB   28 16                  JR   z,parseBlock4   
0EAD   FE 7B                  CP   "{"   
0EAF   28 12                  JR   z,parseBlock4   
0EB1   FE 5B                  CP   "["   
0EB3   28 0E                  JR   z,parseBlock4   
0EB5   FE 29                  CP   ")"   
0EB7   28 0D                  JR   z,parseBlock5   
0EB9   FE 7D                  CP   "}"   
0EBB   28 09                  JR   z,parseBlock5   
0EBD   FE 5D                  CP   "]"   
0EBF   28 05                  JR   z,parseBlock5   
0EC1   18 C7                  JR   parseBlock1   
0EC3                PARSEBLOCK4:      
0EC3   14                     INC   d   
0EC4   18 C4                  JR   parseBlock1   
0EC6                PARSEBLOCK5:      
0EC6   15                     DEC   d   
0EC7   20 C1                  JR   nz,parseBlock1   ; get the next element
0EC9   60 69                  LD   hl,bc   ; hl = IP
0ECB   11 22 60               LD   de,HEAP   ; is IP pointing to object in heap
0ECE   B7                     OR   a   ; IP - HEAP
0ECF   ED 52                  SBC   hl,de   
0ED1   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0ED3   28 1C                  JR   z,parseBlock6   
0ED5   60 69                  LD   hl,bc   ; hl = IP
0ED7   D1                     POP   de   ; de = block*
0ED8   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0EDC   B7                     OR   a   ; bc = size
0EDD   ED 52                  SBC   hl,de   
0EDF   44 4D                  LD   bc,hl   
0EE1   EB                     EX   de,hl   ; hl = block* de = heap*
0EE2   ED 5B EA 5F            LD   de,(vHeapPtr)   
0EE6   D5                     PUSH   de   ; return hblock*
0EE7   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EE9   ED 53 EA 5F            LD   (vHeapPtr),de   ; heap* += size
0EED   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0EF1                PARSEBLOCK6:      
0EF1   0B                     DEC   bc   ; balanced, exit
0EF2   E1                     POP   hl   ; hl = block*
0EF3   E3                     EX   (sp),hl   ; return to caller
0EF4   E9                     JP   (hl)   
0EF5                             ; create function
0EF5                             ; arg_list* block* -- func*
0EF5                CREATEFUNC:      
0EF5   E1                     POP   hl   ; save retrn address
0EF6   22 08 60               LD   (vTemp3),hl   
0EF9   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0EFD   E1                     POP   hl   ; hl = block*
0EFE   22 06 60               LD   (vTemp2),hl   ; save block*
0F01   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0F04   FD 56 05               LD   d,(iy+5)   
0F07   7B                     LD   a,e   ; if arg_list == null then make a func
0F08   B2                     OR   d   
0F09   20 09                  JR   nz,createFunc0   
0F0B   21 00 00               LD   hl,0   ; partial_array = null
0F0E   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0F12   18 65                  JR   createFunc5   
0F14                CREATEFUNC0:      
0F14   E1                     POP   hl   ; hl = inner_arg_list*
0F15   E5                     PUSH   hl   ; save inner_arg_list
0F16   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0F1A   7E                     LD   a,(hl)   ; compile inner_num_locals
0F1B   4F                     LD   c,a   ; b = inner_num_locals
0F1C   12                     LD   (de),a   
0F1D   23                     INC   hl   
0F1E   13                     INC   de   
0F1F   7E                     LD   a,(hl)   ; compile inner_length
0F20   12                     LD   (de),a   
0F21   91                     SUB   c   ; a = inner_num args
0F22   23                     INC   hl   
0F23   13                     INC   de   
0F24   B7                     OR   a   ; compile args if inner_length > 0
0F25   28 05                  JR   z,createFunc1   
0F27   4F                     LD   c,a   ; bc = a
0F28   06 00                  LD   b,0   
0F2A   ED B0                  LDIR      
0F2C                CREATEFUNC1:      
0F2C   EB                     EX   de,hl   ; hl = outer_arg_list
0F2D   FD 5E 04               LD   e,(iy+4)   
0F30   FD 56 05               LD   d,(iy+5)   
0F33   EB                     EX   de,hl   
0F34   23                     INC   hl   ; a = outer_length
0F35   7E                     LD   a,(hl)   
0F36   23                     INC   hl   
0F37   B7                     OR   a   
0F38   28 05                  JR   z,createFunc2   
0F3A   4F                     LD   c,a   
0F3B   06 00                  LD   b,0   
0F3D   ED B0                  LDIR      ; append outer_args
0F3F                CREATEFUNC2:      ; a = outer_length
0F3F   47                     LD   b,a   ; b = a = outer_length
0F40   2A EA 5F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F43   23                     INC   hl   
0F44   7E                     LD   a,(hl)   ; add outer_length to new length
0F45   80                     ADD   a,b   
0F46   77                     LD   (hl),a   
0F47   2B                     DEC   hl   
0F48   78                     LD   a,b   ; save outer_length in a'
0F49   08                     EX   af,af'   
0F4A   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F4B   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F4C   B7                     OR   a   
0F4D   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F4F   4F                     LD   c,a   ; c = inner_num_locals
0F50   06 00                  LD   b,0   ; bc = inner_num_locals
0F52   23                     INC   hl   ; a = inner_length
0F53   7E                     LD   a,(hl)   
0F54   91                     SUB   c   ; a = inner_num_args
0F55   23                     INC   hl   ; hl = inner_arg_chars
0F56   85                     ADD   a,l   ; hl += a
0F57   6F                     LD   l,a   
0F58   3E 00                  LD   a,0   
0F5A   84                     ADD   a,h   
0F5B   67                     LD   h,a   
0F5C   ED B0                  LDIR      ; append inner_locals
0F5E                CREATEFUNC2A:      
0F5E   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F5F   12                     LD   (de),a   ; compile partial_array length field
0F60   13                     INC   de   
0F61   AF                     XOR   a   
0F62   12                     LD   (de),a   
0F63   13                     INC   de   
0F64   D5                     PUSH   de   ; push partial_array*
0F65   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F66   FD 5E 02               LD   e,(iy+2)   
0F69   FD 56 03               LD   d,(iy+3)   
0F6C   EB                     EX   de,hl   
0F6D                CREATEFUNC3:      
0F6D   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F6E   4E                     LD   c,(hl)   
0F6F   2B                     DEC   hl   
0F70   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F71   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F72   13                     INC   de   
0F73   79                     LD   a,c   
0F74   12                     LD   (de),a   
0F75   13                     INC   de   
0F76   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F78                CREATEFUNC4:      
0F78   E1                     POP   hl   ; hl = partial_array*
0F79                CREATEFUNC5:      
0F79   C1                     POP   bc   ; bc = new_arg_list*
0F7A   D5                     PUSH   de   ; return new func*
0F7B   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F7C   73                     LD   (hl),e   ; compile partial_array* to func
0F7D   23                     INC   hl   
0F7E   72                     LD   (hl),d   
0F7F   23                     INC   hl   
0F80   ED 5B 06 60            LD   de,(vTemp2)   ; de = block*
0F84   73                     LD   (hl),e   ; compile block* to func
0F85   23                     INC   hl   
0F86   72                     LD   (hl),d   
0F87   23                     INC   hl   
0F88   71                     LD   (hl),c   ; compile new_arg_list* to func
0F89   23                     INC   hl   
0F8A   70                     LD   (hl),b   
0F8B   23                     INC   hl   
0F8C   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap ptr
0F8F   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0F93   2A 08 60               LD   hl,(vTemp3)   ; jump to return address
0F96   E9                     JP   (hl)   
0F97                             ;*******************************************************************
0F97                             ; general routines
0F97                             ;*******************************************************************
0F97                             ; hl = address
0F97                VARIABLE:      
0F97   22 F8 5F               LD   (vPointer),hl   
0F9A   5E                     LD   e,(hl)   
0F9B   3A EE 5F               LD   a,(vDataWidth)   
0F9E   3D                     DEC   a   
0F9F   16 00                  LD   d,0   
0FA1   28 03                  JR   z,constant   
0FA3   23                     INC   hl   
0FA4   56                     LD   d,(hl)   
0FA5   2B                     DEC   hl   
0FA6                CONSTANT:      
0FA6   D5                     PUSH   de   
0FA7   DD E9                  JP   (ix)   
0FA9                             ; followed by a table
0FA9                             ; indexed on the 0-25 lowercase letter
0FA9                             ; db lsb(addr)
0FA9                             ; the final item index 26 matches any other char
0FA9                CHARTABLE:      
0FA9   03                     INC   bc   
0FAA   0A                     LD   a,(bc)   
0FAB   FE 7B                  CP   "z"+1   
0FAD   30 10                  JR   nc,charTable3   
0FAF   D6 61                  SUB   "a"   
0FB1   38 0C                  JR   c,charTable3   
0FB3                CHARTABLE1:      
0FB3   E1                     POP   hl   
0FB4   85                     ADD   a,l   
0FB5   6F                     LD   l,a   
0FB6   7E                     LD   a,(hl)   ; must have the same msb as the table
0FB7   B7                     OR   a   ; a = 0, nop
0FB8   20 03                  JR   nz,charTable2   
0FBA   C3 E6 06               JP   error1   
0FBD                CHARTABLE2:      
0FBD   6F                     LD   l,a   
0FBE   E9                     JP   (hl)   
0FBF                CHARTABLE3:      
0FBF   3E 1A                  LD   a,26   
0FC1   0B                     DEC   bc   
0FC2   18 EF                  JR   charTable1   
0FC4                             ; followed by a table
0FC4                             ; db char
0FC4                             ; db char - if null only match on first char
0FC4                             ; dw addr
0FC4                             ; the final item must have char == NUL
0FC4                CMDTABLE:      
0FC4   E1                     POP   hl   
0FC5                CMDTABLE1:      
0FC5                CMDTABLE2:      
0FC5   56                     LD   d,(hl)   
0FC6   23                     INC   hl   
0FC7   5E                     LD   e,(hl)   
0FC8   23                     INC   hl   
0FC9   AF                     XOR   a   ; if d == 0, matched
0FCA   BA                     CP   d   
0FCB   28 14                  JR   z,cmdTable5   
0FCD   03                     INC   bc   ; match?
0FCE   0A                     LD   a,(bc)   
0FCF   BA                     CP   d   
0FD0   20 0A                  JR   nz,cmdTable4   
0FD2                CMDTABLE3:      
0FD2   AF                     XOR   a   ; if e == 0, matched
0FD3   BB                     CP   e   
0FD4   28 0B                  JR   z,cmdTable5   
0FD6   03                     INC   bc   
0FD7   0A                     LD   a,(bc)   ; match?
0FD8   BB                     CP   e   
0FD9   28 06                  JR   z,cmdTable5   
0FDB   0B                     DEC   bc   
0FDC                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FDC   0B                     DEC   bc   
0FDD   23                     INC   hl   
0FDE   23                     INC   hl   
0FDF   18 E4                  JR   cmdTable2   
0FE1                CMDTABLE5:      ; matched, jump to addr
0FE1   5E                     LD   e,(hl)   
0FE2   23                     INC   hl   
0FE3   56                     LD   d,(hl)   
0FE4   EB                     EX   de,hl   
0FE5   E9                     JP   (hl)   
0FE6                GETVARADDR:      
0FE6   21 00 00               LD   hl,0   
0FE9   FE 7B                  CP   "z"+1   ; if a > z then exit
0FEB   D0                     RET   nc   
0FEC   D6 41                  SUB   "A"   ; a - 65
0FEE   D8                     RET   c   ; if < A then exit
0FEF   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FF1   38 05                  JR   c,getVarAddr1   
0FF3   D6 06                  SUB   "a"-("Z"+1)   
0FF5   FE 1A                  CP   "Z"-"A"+1   
0FF7   D8                     RET   c   ; if < a then exit
0FF8                GETVARADDR1:      
0FF8   87                     ADD   a,a   ; double a
0FF9   6F                     LD   l,a   
0FFA   26 5F                  LD   h,msb(VARS)   
0FFC   C9                     RET      
0FFD                PUTSTR0:      
0FFD   CD 85 00               CALL   putchar   
1000   23                     INC   hl   
1001                PUTSTR:      
1001   7E                     LD   a,(hl)   
1002   B7                     OR   a   
1003   20 F8                  JR   nz,putstr0   
1005   C9                     RET      
1006                             ; **************************************************************************
1006                             ; calculate nesting value
1006                             ; a is char to be tested,
1006                             ; e is the nesting value (initially 0)
1006                             ; e is increased by ( and [
1006                             ; e is decreased by ) and ]
1006                             ; e has its bit 7 toggled by `
1006                             ; limited to 127 levels
1006                             ; **************************************************************************
1006                NESTING:      
1006   FE 27                  CP   "'"   ; quote char
1008   28 0A                  JR   z,nesting0   
100A   FE 22                  CP   DQ   ; double quote char
100C   28 06                  JR   z,nesting0   
100E   FE 60                  CP   "`"   ; grave char
1010   28 02                  JR   z,nesting0   
1012   18 0A                  JR   nesting1   
1014                NESTING0:      
1014   CB 7B                  BIT   7,e   
1016   28 03                  JR   z,nesting1a   
1018   CB BB                  RES   7,e   
101A   C9                     RET      
101B                NESTING1A:      
101B   CB FB                  SET   7,e   
101D   C9                     RET      
101E                NESTING1:      
101E   CB 7B                  BIT   7,e   
1020   C0                     RET   nz   
1021   FE 7B                  CP   "{"   
1023   28 08                  JR   z,nesting2   
1025   FE 5B                  CP   "["   
1027   28 04                  JR   z,nesting2   
1029   FE 28                  CP   "("   
102B   20 02                  JR   nz,nesting3   
102D                NESTING2:      
102D   1C                     INC   e   
102E   C9                     RET      
102F                NESTING3:      
102F   FE 7D                  CP   "}"   
1031   28 07                  JR   z,nesting4   
1033   FE 5D                  CP   "]"   
1035   28 03                  JR   z,nesting4   
1037   FE 29                  CP   ")"   
1039   C0                     RET   nz   
103A                NESTING4:      
103A   1D                     DEC   e   
103B   C9                     RET      
103C                PROMPT:      
103C   CD 4C 10               CALL   printStr   
103F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
1044   C9                     RET      
1045                CRLF:        
1045   CD 4C 10               CALL   printStr   
1048   0D 0A 00               .CSTR   "\r\n"   
104B   C9                     RET      
104C                             ; prints a null teminated string
104C                             ; the string should be immediately following the call
104C                PRINTSTR:      
104C   E3                     EX   (sp),hl   ; swap			
104D   CD 01 10               CALL   putstr   
1050   23                     INC   hl   ; inc past NUL
1051   E3                     EX   (sp),hl   ; put it back	
1052   C9                     RET      
1053                INIT:        
1053   21 F0 01               LD   hl,titleStr   
1056   11 0E 60               LD   de,titleBuf   
1059   06 14                  LD   b,20   
105B                INIT1:       
105B   1A                     LD   a,(de)   
105C   BE                     CP   (hl)   
105D   20 17                  JR   nz,coldBoot0   
105F   13                     INC   de   
1060   23                     INC   hl   
1061   10 F8                  DJNZ   init1   
1063                WARMINIT:      
1063   ED 4B FC 5F            LD   bc,(vSavedIP)   ; restore IP
1067   ED 7B FE 5F            LD   sp,(vSavedSP)   ; restore SP
106B   DD 2A 00 60            LD   ix,(vSavedNext)   ; restore Next
106F   FD 2A 02 60            LD   iy,(vSavedBP)   ; restore BP
1073   C3 AD 10               JP   start1   
1076                COLDBOOT0:      
1076   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1079   11 0E 60               LD   de,titleBuf   
107C   06 14                  LD   b,20   
107E   ED B0                  LDIR      
1080                COLDINIT:      
1080   21 DE 01               LD   hl,isysVars   
1083   11 E6 5F               LD   de,sysVars   
1086   01 12 00               LD   bc,4 * 2 + 10   
1089   ED B0                  LDIR      
108B   21 00 5F               LD   hl,vars   ; 52 vars LO HI
108E   06 34                  LD   b,26*2   
1090   AF                     XOR   a   
1091                COLDBOOT1:      
1091   77                     LD   (hl),a   
1092   23                     INC   hl   
1093   10 FC                  DJNZ   coldBoot1   
1095   DD 21 29 11            LD   ix,NEXT   
1099   FD 21 00 5D            LD   iy,STACK   
109D   C9                     RET      
109E                COLDSTART:      
109E   31 00 5D               LD   sp,STACK   
10A1   CD 76 10               CALL   coldBoot0   
10A4   C3 AD 10               JP   start1   
10A7                START:       
10A7   31 00 5D               LD   sp,STACK   ; start Monty
10AA   CD 53 10               CALL   init   ; setups
10AD                START1:      
10AD   21 0E 60               LD   hl,titleBuf   
10B0   CD 01 10               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
10B3                INTERPRET:      
10B3   CD 3C 10               CALL   prompt   
10B6   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
10B9   21 00 5D               LD   hl,TIB   
10BC   22 E6 5F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
10BF                INTERPRET2:      ; calculate nesting
10BF   1E 00                  LD   e,0   ; initilize nesting value
10C1   C5                     PUSH   bc   ; save offset into TIB,
10C2                             ; bc is also the count of chars in TIB
10C2   21 00 5D               LD   hl,TIB   ; hl is start of TIB
10C5   18 06                  JR   interpret4   
10C7                INTERPRET3:      
10C7   7E                     LD   a,(hl)   ; a = char in TIB
10C8   23                     INC   hl   ; inc pointer into TIB
10C9   0B                     DEC   bc   ; dec count of chars in TIB
10CA   CD 06 10               CALL   nesting   ; update nesting value
10CD                INTERPRET4:      
10CD   79                     LD   a,c   ; is count zero?
10CE   B0                     OR   b   
10CF   20 F6                  JR   nz,interpret3   ; if not loop
10D1   C1                     POP   bc   ; restore offset into TIB
10D2                INTERPRET5:      
10D2   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10D5   FE 20                  CP   $20   ; compare to space
10D7   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10D9   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10DB   28 31                  JR   z,interpret8   
10DD   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10DF   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10E1   FE 08                  CP   CTRL_H   
10E3   CA 5F 11               JP   z,backSpace_   
10E6   FE 0A                  CP   CTRL_J   
10E8   CA 6F 11               JP   z,reEdit_   
10EB                INTERPRET5A:      
10EB   18 D2                  JR   interpret2   
10ED                INTERPRET6:      
10ED   21 00 5D               LD   hl,TIB   
10F0   09                     ADD   hl,bc   
10F1   77                     LD   (hl),a   ; store the character in textbuf
10F2   03                     INC   bc   
10F3   CD 85 00               CALL   putchar   ; echo character to screen
10F6   CD 06 10               CALL   nesting   
10F9   18 D7                  JR   interpret5   ; wait for next character
10FB                INTERPRET7:      
10FB   21 00 5D               LD   hl,TIB   
10FE   09                     ADD   hl,bc   
10FF   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
1101   23                     INC   hl   
1102   36 0A                  LD   (hl),"\n"   
1104   23                     INC   hl   
1105   03                     INC   bc   
1106   03                     INC   bc   
1107   CD 45 10               CALL   crlf   ; echo character to screen
110A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
110B   B7                     OR   a   
110C   20 C4                  JR   nz,interpret5   
110E                INTERPRET8:      
110E   21 00 5D               LD   hl,TIB   
1111   09                     ADD   hl,bc   
1112   22 E6 5F               LD   (vTIBPtr),hl   
1115   01 00 5D               LD   bc,TIB   
1118   ED 43 FC 5F            LD   (vSavedIP),bc   ; save IP
111C   ED 73 FE 5F            LD   (vSavedSP),sp   ; save SP
1120   DD 22 00 60            LD   (vSavedNext),ix   ; save Next
1124   FD 22 02 60            LD   (vSavedBP),iy   ; save BP
1128   0B                     DEC   bc   
1129                NEXT:        
1129   03                     INC   bc   ; Increment the IP
112A   0A                     LD   a,(bc)   ; Get the next character and dispatch
112B   FE 20                  CP   " "   ; whitespace?
112D   28 FA                  JR   z,next   ; space? ignore
112F   38 0D                  JR   c,next1   
1131   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1133   6F                     LD   l,a   ; index into table
1134   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1136   6E                     LD   l,(hl)   ; get low jump address
1137   24                     INC   h   ; page 2
1138   FE BA                  CP   "Z" - "!" + 1 + $80   
113A   38 01                  JR   c,next0   
113C   24                     INC   h   ; page 3
113D                NEXT0:       
113D   E9                     JP   (hl)   ; Jump to routine
113E                NEXT1:       
113E   FE 00                  CP   NUL   ; end of input string?
1140   28 03                  JR   z,exit   
1142   C3 B3 10               JP   interpret   ; no, other whitespace, macros?
1145                EXIT:        
1145   03                     INC   bc   
1146   60 69                  LD   hl,bc   
1148   E9                     JP   (hl)   
1149                RUN:         
1149   C1                     POP   bc   
114A   0B                     DEC   bc   
114B   DD E9                  JP   (ix)   
114D                ERROR:       
114D   E5                     PUSH   hl   
114E   CD 49 11               CALL   run   
1151   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
115C   C3 B3 10               JP   interpret   
115F                BACKSPACE_:      
115F   79                     LD   a,c   
1160   B0                     OR   b   
1161   CA BF 10               JP   z,interpret2   
1164   0B                     DEC   bc   
1165   CD 4C 10               CALL   printStr   
1168   08 20 08 00            .CSTR   "\b \b"   
116C   C3 BF 10               JP   interpret2   
116F                REEDIT_:      
116F   CD 4C 10               CALL   printStr   
1172   0D 3E 20 00            .CSTR   "\r> "   
1176   21 00 5D               LD   hl,TIB   
1179   18 04                  JR   reEdit1   
117B                REEDIT0:      
117B   CD 85 00               CALL   putchar   
117E   23                     INC   hl   
117F                REEDIT1:      
117F   7E                     LD   a,(hl)   
1180   FE 0D                  CP   "\r"   
1182   20 F7                  JR   nz,reEdit0   
1184   11 00 5D               LD   de,TIB   
1187   B7                     OR   a   
1188   ED 52                  SBC   hl,de   
118A   44 4D                  LD   bc,hl   
118C   C3 BF 10               JP   interpret2   
118F                          ;*Macro unroll: FUNC f1, 0, ""
118F                F1:          
118F   CD 9F 03               CALL   go   
1192   00 00                  DW   NUL   
1194   9A 11                  DW   f1M_3079S12   
1196   98 11                  DW   $+2   
1198   00                     DB   0   
1199   00                     .PSTR   ""   
119A                F1M_3079S12:      
119A   00                     DB   0   
119B                          ;*Macro unroll: FUNC f2, 0, ""
119B                F2:          
119B   CD 9F 03               CALL   go   
119E   00 00                  DW   NUL   
11A0   A6 11                  DW   f2M_3081S15   
11A2   A4 11                  DW   $+2   
11A4   00                     DB   0   
11A5   00                     .PSTR   ""   
11A6                F2M_3081S15:      
11A6   00                     DB   0   
11A7                          ;*Macro unroll: FUNC f3, 0, ""
11A7                F3:          
11A7   CD 9F 03               CALL   go   
11AA   00 00                  DW   NUL   
11AC   B2 11                  DW   f3M_3083S18   
11AE   B0 11                  DW   $+2   
11B0   00                     DB   0   
11B1   00                     .PSTR   ""   
11B2                F3M_3083S18:      
11B2   00                     DB   0   
11B3                          ;*Macro unroll: FUNC f4, 0, ""
11B3                F4:          
11B3   CD 9F 03               CALL   go   
11B6   00 00                  DW   NUL   
11B8   BE 11                  DW   f4M_3085S21   
11BA   BC 11                  DW   $+2   
11BC   00                     DB   0   
11BD   00                     .PSTR   ""   
11BE                F4M_3085S21:      
11BE   00                     DB   0   
11BF                          ALIGN   $100   
1200                TESTSSTART:      
1200                             ; test "0 10 1 /rng \\a{%a.} /for", 0
1200                             ; test "0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", 0
1200                             ; test "0 10 1 /rng \\a{%a 3<}/ftr \\a{%a.} /for", 0
1200                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1200                             ; test "/hex /byt $1234.",0
1200                             ; test "/byt 257.",0
1200                             ; test "$1000 'hello there!' /si \\a{%a.c} /for", $1000
1200                             ; test "10 0 -1 /rng \\a{%a.} /for", 0
1200                             ; test "_B [_A {1} _B {2}] /sel", 2
1200                             ; test "[_A {1} _B {2}] x= _B x /sel", 2
1200                             ; test "[10 20 30] /ait \\a{%a.} /for", 0
1200                             ; test "[1 2 3].a", 0
1200                             ; test "0 10 1 /rng  0 \\da{%d%a+}/scn \\a{%a 24<}/ftr \\a{%a.} /for", 0
1200                          ;*Macro unroll:  test "/str `hello:` 65.c 1. 2. 3. /end .s", FALSE
1200   31 00 5D               LD   SP,STACK   
1203   CD 80 10               CALL   coldInit   
1206   CD 94 5B               CALL   execStr   
1209   2F 73 74 72 20 60 68 65 6C 6C 6F 3A 60 20 36 35 2E 63 20 31 2E 20 32 2E 20 33 2E 20 2F 65 6E 64 20 2E 73 00 DB   "/str `hello:` 65.c 1. 2. 3. /end .s",0   
122D   E1                     POP   HL   
122E   E5                     PUSH   HL   
122F   11 00 00               LD   DE,FALSE   
1232   B7                     OR   A   
1233   ED 52                  SBC   HL,DE   
1235   7D                     LD   A,L   
1236   B4                     OR   H   
1237   CA B5 12               JP   Z,expectM_3102S41   
123A   CD 4C 10               CALL   printStr   
123D   43 6F 64 65 3A 20 2F 73 74 72 20 60 68 65 6C 6C 6F 3A 60 20 36 35 2E 63 20 31 2E 20 32 2E 20 33 2E 20 2F 65 6E 64 20 2E 73 00 .CSTR   "Code: ","/str `hello:` 65.c 1. 2. 3. /end .s"   
1267   CD 4C 10               CALL   printStr   
126A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1279   21 00 00               LD   hl,FALSE   
127C   E5                     PUSH   hl   
127D   E5                     PUSH   hl   
127E   CD 49 11               CALL   run   
1281   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
128D   CD 4C 10               CALL   printStr   
1290   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129D   E1                     POP   hl   
129E   E5                     PUSH   hl   
129F   E5                     PUSH   hl   
12A0   CD 49 11               CALL   run   
12A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
12B4   76                     HALT      
12B5                EXPECTM_3102S41:      
12B5   E1                     POP   HL   
12B6   CD 4C 10               CALL   printStr   
12B9   44 6F 6E 65 21 00      .CSTR   "Done!"   
12BF   76                     HALT      
12C0                          ;*Macro unroll:  test "/fal", false
12C0   31 00 5D               LD   SP,STACK   
12C3   CD 80 10               CALL   coldInit   
12C6   CD 94 5B               CALL   execStr   
12C9   2F 66 61 6C 00         DB   "/fal",0   
12CE   E1                     POP   HL   
12CF   E5                     PUSH   HL   
12D0   11 00 00               LD   DE,false   
12D3   B7                     OR   A   
12D4   ED 52                  SBC   HL,DE   
12D6   7D                     LD   A,L   
12D7   B4                     OR   H   
12D8   CA 37 13               JP   Z,expectM_3106S47   
12DB   CD 4C 10               CALL   printStr   
12DE   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
12E9   CD 4C 10               CALL   printStr   
12EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12FB   21 00 00               LD   hl,false   
12FE   E5                     PUSH   hl   
12FF   E5                     PUSH   hl   
1300   CD 49 11               CALL   run   
1303   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
130F   CD 4C 10               CALL   printStr   
1312   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131F   E1                     POP   hl   
1320   E5                     PUSH   hl   
1321   E5                     PUSH   hl   
1322   CD 49 11               CALL   run   
1325   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1336   76                     HALT      
1337                EXPECTM_3106S47:      
1337   E1                     POP   HL   
1338                          ;*Macro unroll:  test "/tru", true
1338   31 00 5D               LD   SP,STACK   
133B   CD 80 10               CALL   coldInit   
133E   CD 94 5B               CALL   execStr   
1341   2F 74 72 75 00         DB   "/tru",0   
1346   E1                     POP   HL   
1347   E5                     PUSH   HL   
1348   11 FF FF               LD   DE,true   
134B   B7                     OR   A   
134C   ED 52                  SBC   HL,DE   
134E   7D                     LD   A,L   
134F   B4                     OR   H   
1350   CA AF 13               JP   Z,expectM_3107S48   
1353   CD 4C 10               CALL   printStr   
1356   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
1361   CD 4C 10               CALL   printStr   
1364   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1373   21 FF FF               LD   hl,true   
1376   E5                     PUSH   hl   
1377   E5                     PUSH   hl   
1378   CD 49 11               CALL   run   
137B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1387   CD 4C 10               CALL   printStr   
138A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1397   E1                     POP   hl   
1398   E5                     PUSH   hl   
1399   E5                     PUSH   hl   
139A   CD 49 11               CALL   run   
139D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
13AE   76                     HALT      
13AF                EXPECTM_3107S48:      
13AF   E1                     POP   HL   
13B0                          ;*Macro unroll:  test "1", 1
13B0   31 00 5D               LD   SP,STACK   
13B3   CD 80 10               CALL   coldInit   
13B6   CD 94 5B               CALL   execStr   
13B9   31 00                  DB   "1",0   
13BB   E1                     POP   HL   
13BC   E5                     PUSH   HL   
13BD   11 01 00               LD   DE,1   
13C0   B7                     OR   A   
13C1   ED 52                  SBC   HL,DE   
13C3   7D                     LD   A,L   
13C4   B4                     OR   H   
13C5   CA 21 14               JP   Z,expectM_3108S49   
13C8   CD 4C 10               CALL   printStr   
13CB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13D3   CD 4C 10               CALL   printStr   
13D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E5   21 01 00               LD   hl,1   
13E8   E5                     PUSH   hl   
13E9   E5                     PUSH   hl   
13EA   CD 49 11               CALL   run   
13ED   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13F9   CD 4C 10               CALL   printStr   
13FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1409   E1                     POP   hl   
140A   E5                     PUSH   hl   
140B   E5                     PUSH   hl   
140C   CD 49 11               CALL   run   
140F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1420   76                     HALT      
1421                EXPECTM_3108S49:      
1421   E1                     POP   HL   
1422                          ;*Macro unroll:  test "2", 2
1422   31 00 5D               LD   SP,STACK   
1425   CD 80 10               CALL   coldInit   
1428   CD 94 5B               CALL   execStr   
142B   32 00                  DB   "2",0   
142D   E1                     POP   HL   
142E   E5                     PUSH   HL   
142F   11 02 00               LD   DE,2   
1432   B7                     OR   A   
1433   ED 52                  SBC   HL,DE   
1435   7D                     LD   A,L   
1436   B4                     OR   H   
1437   CA 93 14               JP   Z,expectM_3109S50   
143A   CD 4C 10               CALL   printStr   
143D   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1445   CD 4C 10               CALL   printStr   
1448   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1457   21 02 00               LD   hl,2   
145A   E5                     PUSH   hl   
145B   E5                     PUSH   hl   
145C   CD 49 11               CALL   run   
145F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
146B   CD 4C 10               CALL   printStr   
146E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147B   E1                     POP   hl   
147C   E5                     PUSH   hl   
147D   E5                     PUSH   hl   
147E   CD 49 11               CALL   run   
1481   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1492   76                     HALT      
1493                EXPECTM_3109S50:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "1", 1
1494   31 00 5D               LD   SP,STACK   
1497   CD 80 10               CALL   coldInit   
149A   CD 94 5B               CALL   execStr   
149D   31 00                  DB   "1",0   
149F   E1                     POP   HL   
14A0   E5                     PUSH   HL   
14A1   11 01 00               LD   DE,1   
14A4   B7                     OR   A   
14A5   ED 52                  SBC   HL,DE   
14A7   7D                     LD   A,L   
14A8   B4                     OR   H   
14A9   CA 05 15               JP   Z,expectM_3110S51   
14AC   CD 4C 10               CALL   printStr   
14AF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
14B7   CD 4C 10               CALL   printStr   
14BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C9   21 01 00               LD   hl,1   
14CC   E5                     PUSH   hl   
14CD   E5                     PUSH   hl   
14CE   CD 49 11               CALL   run   
14D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14DD   CD 4C 10               CALL   printStr   
14E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14ED   E1                     POP   hl   
14EE   E5                     PUSH   hl   
14EF   E5                     PUSH   hl   
14F0   CD 49 11               CALL   run   
14F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1504   76                     HALT      
1505                EXPECTM_3110S51:      
1505   E1                     POP   HL   
1506                          ;*Macro unroll:  test "0", 0
1506   31 00 5D               LD   SP,STACK   
1509   CD 80 10               CALL   coldInit   
150C   CD 94 5B               CALL   execStr   
150F   30 00                  DB   "0",0   
1511   E1                     POP   HL   
1512   E5                     PUSH   HL   
1513   11 00 00               LD   DE,0   
1516   B7                     OR   A   
1517   ED 52                  SBC   HL,DE   
1519   7D                     LD   A,L   
151A   B4                     OR   H   
151B   CA 77 15               JP   Z,expectM_3111S52   
151E   CD 4C 10               CALL   printStr   
1521   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1529   CD 4C 10               CALL   printStr   
152C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
153B   21 00 00               LD   hl,0   
153E   E5                     PUSH   hl   
153F   E5                     PUSH   hl   
1540   CD 49 11               CALL   run   
1543   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
154F   CD 4C 10               CALL   printStr   
1552   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
155F   E1                     POP   hl   
1560   E5                     PUSH   hl   
1561   E5                     PUSH   hl   
1562   CD 49 11               CALL   run   
1565   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1576   76                     HALT      
1577                EXPECTM_3111S52:      
1577   E1                     POP   HL   
1578                          ;*Macro unroll:  test "10", 10
1578   31 00 5D               LD   SP,STACK   
157B   CD 80 10               CALL   coldInit   
157E   CD 94 5B               CALL   execStr   
1581   31 30 00               DB   "10",0   
1584   E1                     POP   HL   
1585   E5                     PUSH   HL   
1586   11 0A 00               LD   DE,10   
1589   B7                     OR   A   
158A   ED 52                  SBC   HL,DE   
158C   7D                     LD   A,L   
158D   B4                     OR   H   
158E   CA EB 15               JP   Z,expectM_3112S53   
1591   CD 4C 10               CALL   printStr   
1594   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
159D   CD 4C 10               CALL   printStr   
15A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AF   21 0A 00               LD   hl,10   
15B2   E5                     PUSH   hl   
15B3   E5                     PUSH   hl   
15B4   CD 49 11               CALL   run   
15B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15C3   CD 4C 10               CALL   printStr   
15C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15D3   E1                     POP   hl   
15D4   E5                     PUSH   hl   
15D5   E5                     PUSH   hl   
15D6   CD 49 11               CALL   run   
15D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15EA   76                     HALT      
15EB                EXPECTM_3112S53:      
15EB   E1                     POP   HL   
15EC                          ;*Macro unroll:  test "123", 123
15EC   31 00 5D               LD   SP,STACK   
15EF   CD 80 10               CALL   coldInit   
15F2   CD 94 5B               CALL   execStr   
15F5   31 32 33 00            DB   "123",0   
15F9   E1                     POP   HL   
15FA   E5                     PUSH   HL   
15FB   11 7B 00               LD   DE,123   
15FE   B7                     OR   A   
15FF   ED 52                  SBC   HL,DE   
1601   7D                     LD   A,L   
1602   B4                     OR   H   
1603   CA 61 16               JP   Z,expectM_3113S54   
1606   CD 4C 10               CALL   printStr   
1609   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1613   CD 4C 10               CALL   printStr   
1616   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1625   21 7B 00               LD   hl,123   
1628   E5                     PUSH   hl   
1629   E5                     PUSH   hl   
162A   CD 49 11               CALL   run   
162D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1639   CD 4C 10               CALL   printStr   
163C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1649   E1                     POP   hl   
164A   E5                     PUSH   hl   
164B   E5                     PUSH   hl   
164C   CD 49 11               CALL   run   
164F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1660   76                     HALT      
1661                EXPECTM_3113S54:      
1661   E1                     POP   HL   
1662                          ;*Macro unroll:  test "-1",-1
1662   31 00 5D               LD   SP,STACK   
1665   CD 80 10               CALL   coldInit   
1668   CD 94 5B               CALL   execStr   
166B   2D 31 00               DB   "-1",0   
166E   E1                     POP   HL   
166F   E5                     PUSH   HL   
1670   11 FF FF               LD   DE,-1   
1673   B7                     OR   A   
1674   ED 52                  SBC   HL,DE   
1676   7D                     LD   A,L   
1677   B4                     OR   H   
1678   CA D5 16               JP   Z,expectM_3114S55   
167B   CD 4C 10               CALL   printStr   
167E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1687   CD 4C 10               CALL   printStr   
168A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1699   21 FF FF               LD   hl,-1   
169C   E5                     PUSH   hl   
169D   E5                     PUSH   hl   
169E   CD 49 11               CALL   run   
16A1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16AD   CD 4C 10               CALL   printStr   
16B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16BD   E1                     POP   hl   
16BE   E5                     PUSH   hl   
16BF   E5                     PUSH   hl   
16C0   CD 49 11               CALL   run   
16C3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16D4   76                     HALT      
16D5                EXPECTM_3114S55:      
16D5   E1                     POP   HL   
16D6                          ;*Macro unroll:  test "-1/abs",1
16D6   31 00 5D               LD   SP,STACK   
16D9   CD 80 10               CALL   coldInit   
16DC   CD 94 5B               CALL   execStr   
16DF   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
16E6   E1                     POP   HL   
16E7   E5                     PUSH   HL   
16E8   11 01 00               LD   DE,1   
16EB   B7                     OR   A   
16EC   ED 52                  SBC   HL,DE   
16EE   7D                     LD   A,L   
16EF   B4                     OR   H   
16F0   CA 51 17               JP   Z,expectM_3115S56   
16F3   CD 4C 10               CALL   printStr   
16F6   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
1703   CD 4C 10               CALL   printStr   
1706   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1715   21 01 00               LD   hl,1   
1718   E5                     PUSH   hl   
1719   E5                     PUSH   hl   
171A   CD 49 11               CALL   run   
171D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1729   CD 4C 10               CALL   printStr   
172C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1739   E1                     POP   hl   
173A   E5                     PUSH   hl   
173B   E5                     PUSH   hl   
173C   CD 49 11               CALL   run   
173F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1750   76                     HALT      
1751                EXPECTM_3115S56:      
1751   E1                     POP   HL   
1752                          ;*Macro unroll:  test "_a", $61
1752   31 00 5D               LD   SP,STACK   
1755   CD 80 10               CALL   coldInit   
1758   CD 94 5B               CALL   execStr   
175B   5F 61 00               DB   "_a",0   
175E   E1                     POP   HL   
175F   E5                     PUSH   HL   
1760   11 61 00               LD   DE,$61   
1763   B7                     OR   A   
1764   ED 52                  SBC   HL,DE   
1766   7D                     LD   A,L   
1767   B4                     OR   H   
1768   CA C5 17               JP   Z,expectM_3116S57   
176B   CD 4C 10               CALL   printStr   
176E   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1777   CD 4C 10               CALL   printStr   
177A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1789   21 61 00               LD   hl,$61   
178C   E5                     PUSH   hl   
178D   E5                     PUSH   hl   
178E   CD 49 11               CALL   run   
1791   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
179D   CD 4C 10               CALL   printStr   
17A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17AD   E1                     POP   hl   
17AE   E5                     PUSH   hl   
17AF   E5                     PUSH   hl   
17B0   CD 49 11               CALL   run   
17B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17C4   76                     HALT      
17C5                EXPECTM_3116S57:      
17C5   E1                     POP   HL   
17C6                          ;*Macro unroll:  test "__", $5F
17C6   31 00 5D               LD   SP,STACK   
17C9   CD 80 10               CALL   coldInit   
17CC   CD 94 5B               CALL   execStr   
17CF   5F 5F 00               DB   "__",0   
17D2   E1                     POP   HL   
17D3   E5                     PUSH   HL   
17D4   11 5F 00               LD   DE,$5F   
17D7   B7                     OR   A   
17D8   ED 52                  SBC   HL,DE   
17DA   7D                     LD   A,L   
17DB   B4                     OR   H   
17DC   CA 39 18               JP   Z,expectM_3117S58   
17DF   CD 4C 10               CALL   printStr   
17E2   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
17EB   CD 4C 10               CALL   printStr   
17EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17FD   21 5F 00               LD   hl,$5F   
1800   E5                     PUSH   hl   
1801   E5                     PUSH   hl   
1802   CD 49 11               CALL   run   
1805   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1811   CD 4C 10               CALL   printStr   
1814   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1821   E1                     POP   hl   
1822   E5                     PUSH   hl   
1823   E5                     PUSH   hl   
1824   CD 49 11               CALL   run   
1827   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1838   76                     HALT      
1839                EXPECTM_3117S58:      
1839   E1                     POP   HL   
183A                          ;*Macro unroll:  test "$10", $10
183A   31 00 5D               LD   SP,STACK   
183D   CD 80 10               CALL   coldInit   
1840   CD 94 5B               CALL   execStr   
1843   24 31 30 00            DB   "$10",0   
1847   E1                     POP   HL   
1848   E5                     PUSH   HL   
1849   11 10 00               LD   DE,$10   
184C   B7                     OR   A   
184D   ED 52                  SBC   HL,DE   
184F   7D                     LD   A,L   
1850   B4                     OR   H   
1851   CA AF 18               JP   Z,expectM_3118S59   
1854   CD 4C 10               CALL   printStr   
1857   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1861   CD 4C 10               CALL   printStr   
1864   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1873   21 10 00               LD   hl,$10   
1876   E5                     PUSH   hl   
1877   E5                     PUSH   hl   
1878   CD 49 11               CALL   run   
187B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1887   CD 4C 10               CALL   printStr   
188A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1897   E1                     POP   hl   
1898   E5                     PUSH   hl   
1899   E5                     PUSH   hl   
189A   CD 49 11               CALL   run   
189D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18AE   76                     HALT      
18AF                EXPECTM_3118S59:      
18AF   E1                     POP   HL   
18B0                          ;*Macro unroll:  test "$FF", $FF
18B0   31 00 5D               LD   SP,STACK   
18B3   CD 80 10               CALL   coldInit   
18B6   CD 94 5B               CALL   execStr   
18B9   24 46 46 00            DB   "$FF",0   
18BD   E1                     POP   HL   
18BE   E5                     PUSH   HL   
18BF   11 FF 00               LD   DE,$FF   
18C2   B7                     OR   A   
18C3   ED 52                  SBC   HL,DE   
18C5   7D                     LD   A,L   
18C6   B4                     OR   H   
18C7   CA 25 19               JP   Z,expectM_3119S60   
18CA   CD 4C 10               CALL   printStr   
18CD   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
18D7   CD 4C 10               CALL   printStr   
18DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E9   21 FF 00               LD   hl,$FF   
18EC   E5                     PUSH   hl   
18ED   E5                     PUSH   hl   
18EE   CD 49 11               CALL   run   
18F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18FD   CD 4C 10               CALL   printStr   
1900   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190D   E1                     POP   hl   
190E   E5                     PUSH   hl   
190F   E5                     PUSH   hl   
1910   CD 49 11               CALL   run   
1913   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1924   76                     HALT      
1925                EXPECTM_3119S60:      
1925   E1                     POP   HL   
1926                          ;*Macro unroll:  test "-1 2 +",1
1926   31 00 5D               LD   SP,STACK   
1929   CD 80 10               CALL   coldInit   
192C   CD 94 5B               CALL   execStr   
192F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1936   E1                     POP   HL   
1937   E5                     PUSH   HL   
1938   11 01 00               LD   DE,1   
193B   B7                     OR   A   
193C   ED 52                  SBC   HL,DE   
193E   7D                     LD   A,L   
193F   B4                     OR   H   
1940   CA A1 19               JP   Z,expectM_3120S61   
1943   CD 4C 10               CALL   printStr   
1946   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1953   CD 4C 10               CALL   printStr   
1956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1965   21 01 00               LD   hl,1   
1968   E5                     PUSH   hl   
1969   E5                     PUSH   hl   
196A   CD 49 11               CALL   run   
196D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1979   CD 4C 10               CALL   printStr   
197C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1989   E1                     POP   hl   
198A   E5                     PUSH   hl   
198B   E5                     PUSH   hl   
198C   CD 49 11               CALL   run   
198F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19A0   76                     HALT      
19A1                EXPECTM_3120S61:      
19A1   E1                     POP   HL   
19A2                          ;*Macro unroll:  test "-1 1 +",0
19A2   31 00 5D               LD   SP,STACK   
19A5   CD 80 10               CALL   coldInit   
19A8   CD 94 5B               CALL   execStr   
19AB   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
19B2   E1                     POP   HL   
19B3   E5                     PUSH   HL   
19B4   11 00 00               LD   DE,0   
19B7   B7                     OR   A   
19B8   ED 52                  SBC   HL,DE   
19BA   7D                     LD   A,L   
19BB   B4                     OR   H   
19BC   CA 1D 1A               JP   Z,expectM_3121S62   
19BF   CD 4C 10               CALL   printStr   
19C2   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
19CF   CD 4C 10               CALL   printStr   
19D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19E1   21 00 00               LD   hl,0   
19E4   E5                     PUSH   hl   
19E5   E5                     PUSH   hl   
19E6   CD 49 11               CALL   run   
19E9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19F5   CD 4C 10               CALL   printStr   
19F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A05   E1                     POP   hl   
1A06   E5                     PUSH   hl   
1A07   E5                     PUSH   hl   
1A08   CD 49 11               CALL   run   
1A0B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A1C   76                     HALT      
1A1D                EXPECTM_3121S62:      
1A1D   E1                     POP   HL   
1A1E                          ;*Macro unroll:  test "1 2 +", 3
1A1E   31 00 5D               LD   SP,STACK   
1A21   CD 80 10               CALL   coldInit   
1A24   CD 94 5B               CALL   execStr   
1A27   31 20 32 20 2B 00      DB   "1 2 +",0   
1A2D   E1                     POP   HL   
1A2E   E5                     PUSH   HL   
1A2F   11 03 00               LD   DE,3   
1A32   B7                     OR   A   
1A33   ED 52                  SBC   HL,DE   
1A35   7D                     LD   A,L   
1A36   B4                     OR   H   
1A37   CA 97 1A               JP   Z,expectM_3122S63   
1A3A   CD 4C 10               CALL   printStr   
1A3D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A49   CD 4C 10               CALL   printStr   
1A4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A5B   21 03 00               LD   hl,3   
1A5E   E5                     PUSH   hl   
1A5F   E5                     PUSH   hl   
1A60   CD 49 11               CALL   run   
1A63   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A6F   CD 4C 10               CALL   printStr   
1A72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A7F   E1                     POP   hl   
1A80   E5                     PUSH   hl   
1A81   E5                     PUSH   hl   
1A82   CD 49 11               CALL   run   
1A85   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A96   76                     HALT      
1A97                EXPECTM_3122S63:      
1A97   E1                     POP   HL   
1A98                          ;*Macro unroll:  test "4 1 2 +", 3
1A98   31 00 5D               LD   SP,STACK   
1A9B   CD 80 10               CALL   coldInit   
1A9E   CD 94 5B               CALL   execStr   
1AA1   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1AA9   E1                     POP   HL   
1AAA   E5                     PUSH   HL   
1AAB   11 03 00               LD   DE,3   
1AAE   B7                     OR   A   
1AAF   ED 52                  SBC   HL,DE   
1AB1   7D                     LD   A,L   
1AB2   B4                     OR   H   
1AB3   CA 15 1B               JP   Z,expectM_3123S64   
1AB6   CD 4C 10               CALL   printStr   
1AB9   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1AC7   CD 4C 10               CALL   printStr   
1ACA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD9   21 03 00               LD   hl,3   
1ADC   E5                     PUSH   hl   
1ADD   E5                     PUSH   hl   
1ADE   CD 49 11               CALL   run   
1AE1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1AED   CD 4C 10               CALL   printStr   
1AF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AFD   E1                     POP   hl   
1AFE   E5                     PUSH   hl   
1AFF   E5                     PUSH   hl   
1B00   CD 49 11               CALL   run   
1B03   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B14   76                     HALT      
1B15                EXPECTM_3123S64:      
1B15   E1                     POP   HL   
1B16                          ;*Macro unroll:  test "123 456 +", 123+456
1B16   31 00 5D               LD   SP,STACK   
1B19   CD 80 10               CALL   coldInit   
1B1C   CD 94 5B               CALL   execStr   
1B1F   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1B29   E1                     POP   HL   
1B2A   E5                     PUSH   HL   
1B2B   11 43 02               LD   DE,123+456   
1B2E   B7                     OR   A   
1B2F   ED 52                  SBC   HL,DE   
1B31   7D                     LD   A,L   
1B32   B4                     OR   H   
1B33   CA 97 1B               JP   Z,expectM_3124S65   
1B36   CD 4C 10               CALL   printStr   
1B39   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1B49   CD 4C 10               CALL   printStr   
1B4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5B   21 43 02               LD   hl,123+456   
1B5E   E5                     PUSH   hl   
1B5F   E5                     PUSH   hl   
1B60   CD 49 11               CALL   run   
1B63   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B6F   CD 4C 10               CALL   printStr   
1B72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7F   E1                     POP   hl   
1B80   E5                     PUSH   hl   
1B81   E5                     PUSH   hl   
1B82   CD 49 11               CALL   run   
1B85   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B96   76                     HALT      
1B97                EXPECTM_3124S65:      
1B97   E1                     POP   HL   
1B98                          ;*Macro unroll:  test "64 128 +", 64+128
1B98   31 00 5D               LD   SP,STACK   
1B9B   CD 80 10               CALL   coldInit   
1B9E   CD 94 5B               CALL   execStr   
1BA1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1BAA   E1                     POP   HL   
1BAB   E5                     PUSH   HL   
1BAC   11 C0 00               LD   DE,64+128   
1BAF   B7                     OR   A   
1BB0   ED 52                  SBC   HL,DE   
1BB2   7D                     LD   A,L   
1BB3   B4                     OR   H   
1BB4   CA 17 1C               JP   Z,expectM_3125S66   
1BB7   CD 4C 10               CALL   printStr   
1BBA   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1BC9   CD 4C 10               CALL   printStr   
1BCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BDB   21 C0 00               LD   hl,64+128   
1BDE   E5                     PUSH   hl   
1BDF   E5                     PUSH   hl   
1BE0   CD 49 11               CALL   run   
1BE3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BEF   CD 4C 10               CALL   printStr   
1BF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BFF   E1                     POP   hl   
1C00   E5                     PUSH   hl   
1C01   E5                     PUSH   hl   
1C02   CD 49 11               CALL   run   
1C05   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C16   76                     HALT      
1C17                EXPECTM_3125S66:      
1C17   E1                     POP   HL   
1C18                          ;*Macro unroll:  test "1 2 +", 3
1C18   31 00 5D               LD   SP,STACK   
1C1B   CD 80 10               CALL   coldInit   
1C1E   CD 94 5B               CALL   execStr   
1C21   31 20 32 20 2B 00      DB   "1 2 +",0   
1C27   E1                     POP   HL   
1C28   E5                     PUSH   HL   
1C29   11 03 00               LD   DE,3   
1C2C   B7                     OR   A   
1C2D   ED 52                  SBC   HL,DE   
1C2F   7D                     LD   A,L   
1C30   B4                     OR   H   
1C31   CA 91 1C               JP   Z,expectM_3126S67   
1C34   CD 4C 10               CALL   printStr   
1C37   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1C43   CD 4C 10               CALL   printStr   
1C46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C55   21 03 00               LD   hl,3   
1C58   E5                     PUSH   hl   
1C59   E5                     PUSH   hl   
1C5A   CD 49 11               CALL   run   
1C5D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C69   CD 4C 10               CALL   printStr   
1C6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C79   E1                     POP   hl   
1C7A   E5                     PUSH   hl   
1C7B   E5                     PUSH   hl   
1C7C   CD 49 11               CALL   run   
1C7F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C90   76                     HALT      
1C91                EXPECTM_3126S67:      
1C91   E1                     POP   HL   
1C92                          ;*Macro unroll:  test "1a= a++ a",2
1C92   31 00 5D               LD   SP,STACK   
1C95   CD 80 10               CALL   coldInit   
1C98   CD 94 5B               CALL   execStr   
1C9B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1CA5   E1                     POP   HL   
1CA6   E5                     PUSH   HL   
1CA7   11 02 00               LD   DE,2   
1CAA   B7                     OR   A   
1CAB   ED 52                  SBC   HL,DE   
1CAD   7D                     LD   A,L   
1CAE   B4                     OR   H   
1CAF   CA 13 1D               JP   Z,expectM_3127S68   
1CB2   CD 4C 10               CALL   printStr   
1CB5   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1CC5   CD 4C 10               CALL   printStr   
1CC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD7   21 02 00               LD   hl,2   
1CDA   E5                     PUSH   hl   
1CDB   E5                     PUSH   hl   
1CDC   CD 49 11               CALL   run   
1CDF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1CEB   CD 4C 10               CALL   printStr   
1CEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFB   E1                     POP   hl   
1CFC   E5                     PUSH   hl   
1CFD   E5                     PUSH   hl   
1CFE   CD 49 11               CALL   run   
1D01   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D12   76                     HALT      
1D13                EXPECTM_3127S68:      
1D13   E1                     POP   HL   
1D14                          ;*Macro unroll:  test "-1 -1 -",0
1D14   31 00 5D               LD   SP,STACK   
1D17   CD 80 10               CALL   coldInit   
1D1A   CD 94 5B               CALL   execStr   
1D1D   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1D25   E1                     POP   HL   
1D26   E5                     PUSH   HL   
1D27   11 00 00               LD   DE,0   
1D2A   B7                     OR   A   
1D2B   ED 52                  SBC   HL,DE   
1D2D   7D                     LD   A,L   
1D2E   B4                     OR   H   
1D2F   CA 91 1D               JP   Z,expectM_3128S69   
1D32   CD 4C 10               CALL   printStr   
1D35   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1D43   CD 4C 10               CALL   printStr   
1D46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D55   21 00 00               LD   hl,0   
1D58   E5                     PUSH   hl   
1D59   E5                     PUSH   hl   
1D5A   CD 49 11               CALL   run   
1D5D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D69   CD 4C 10               CALL   printStr   
1D6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D79   E1                     POP   hl   
1D7A   E5                     PUSH   hl   
1D7B   E5                     PUSH   hl   
1D7C   CD 49 11               CALL   run   
1D7F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D90   76                     HALT      
1D91                EXPECTM_3128S69:      
1D91   E1                     POP   HL   
1D92                          ;*Macro unroll:  test "5 3 -", 2
1D92   31 00 5D               LD   SP,STACK   
1D95   CD 80 10               CALL   coldInit   
1D98   CD 94 5B               CALL   execStr   
1D9B   35 20 33 20 2D 00      DB   "5 3 -",0   
1DA1   E1                     POP   HL   
1DA2   E5                     PUSH   HL   
1DA3   11 02 00               LD   DE,2   
1DA6   B7                     OR   A   
1DA7   ED 52                  SBC   HL,DE   
1DA9   7D                     LD   A,L   
1DAA   B4                     OR   H   
1DAB   CA 0B 1E               JP   Z,expectM_3129S70   
1DAE   CD 4C 10               CALL   printStr   
1DB1   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1DBD   CD 4C 10               CALL   printStr   
1DC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DCF   21 02 00               LD   hl,2   
1DD2   E5                     PUSH   hl   
1DD3   E5                     PUSH   hl   
1DD4   CD 49 11               CALL   run   
1DD7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1DE3   CD 4C 10               CALL   printStr   
1DE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF3   E1                     POP   hl   
1DF4   E5                     PUSH   hl   
1DF5   E5                     PUSH   hl   
1DF6   CD 49 11               CALL   run   
1DF9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E0A   76                     HALT      
1E0B                EXPECTM_3129S70:      
1E0B   E1                     POP   HL   
1E0C                          ;*Macro unroll:  test "2 1 -",1
1E0C   31 00 5D               LD   SP,STACK   
1E0F   CD 80 10               CALL   coldInit   
1E12   CD 94 5B               CALL   execStr   
1E15   32 20 31 20 2D 00      DB   "2 1 -",0   
1E1B   E1                     POP   HL   
1E1C   E5                     PUSH   HL   
1E1D   11 01 00               LD   DE,1   
1E20   B7                     OR   A   
1E21   ED 52                  SBC   HL,DE   
1E23   7D                     LD   A,L   
1E24   B4                     OR   H   
1E25   CA 85 1E               JP   Z,expectM_3130S71   
1E28   CD 4C 10               CALL   printStr   
1E2B   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1E37   CD 4C 10               CALL   printStr   
1E3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E49   21 01 00               LD   hl,1   
1E4C   E5                     PUSH   hl   
1E4D   E5                     PUSH   hl   
1E4E   CD 49 11               CALL   run   
1E51   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E5D   CD 4C 10               CALL   printStr   
1E60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6D   E1                     POP   hl   
1E6E   E5                     PUSH   hl   
1E6F   E5                     PUSH   hl   
1E70   CD 49 11               CALL   run   
1E73   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E84   76                     HALT      
1E85                EXPECTM_3130S71:      
1E85   E1                     POP   HL   
1E86                          ;*Macro unroll:  test "3a= a-- a",2
1E86   31 00 5D               LD   SP,STACK   
1E89   CD 80 10               CALL   coldInit   
1E8C   CD 94 5B               CALL   execStr   
1E8F   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1E99   E1                     POP   HL   
1E9A   E5                     PUSH   HL   
1E9B   11 02 00               LD   DE,2   
1E9E   B7                     OR   A   
1E9F   ED 52                  SBC   HL,DE   
1EA1   7D                     LD   A,L   
1EA2   B4                     OR   H   
1EA3   CA 07 1F               JP   Z,expectM_3131S72   
1EA6   CD 4C 10               CALL   printStr   
1EA9   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1EB9   CD 4C 10               CALL   printStr   
1EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ECB   21 02 00               LD   hl,2   
1ECE   E5                     PUSH   hl   
1ECF   E5                     PUSH   hl   
1ED0   CD 49 11               CALL   run   
1ED3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1EDF   CD 4C 10               CALL   printStr   
1EE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EEF   E1                     POP   hl   
1EF0   E5                     PUSH   hl   
1EF1   E5                     PUSH   hl   
1EF2   CD 49 11               CALL   run   
1EF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F06   76                     HALT      
1F07                EXPECTM_3131S72:      
1F07   E1                     POP   HL   
1F08                          ;*Macro unroll:  test "3 5 &", 1
1F08   31 00 5D               LD   SP,STACK   
1F0B   CD 80 10               CALL   coldInit   
1F0E   CD 94 5B               CALL   execStr   
1F11   33 20 35 20 26 00      DB   "3 5 &",0   
1F17   E1                     POP   HL   
1F18   E5                     PUSH   HL   
1F19   11 01 00               LD   DE,1   
1F1C   B7                     OR   A   
1F1D   ED 52                  SBC   HL,DE   
1F1F   7D                     LD   A,L   
1F20   B4                     OR   H   
1F21   CA 81 1F               JP   Z,expectM_3132S73   
1F24   CD 4C 10               CALL   printStr   
1F27   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1F33   CD 4C 10               CALL   printStr   
1F36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F45   21 01 00               LD   hl,1   
1F48   E5                     PUSH   hl   
1F49   E5                     PUSH   hl   
1F4A   CD 49 11               CALL   run   
1F4D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F59   CD 4C 10               CALL   printStr   
1F5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F69   E1                     POP   hl   
1F6A   E5                     PUSH   hl   
1F6B   E5                     PUSH   hl   
1F6C   CD 49 11               CALL   run   
1F6F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F80   76                     HALT      
1F81                EXPECTM_3132S73:      
1F81   E1                     POP   HL   
1F82                          ;*Macro unroll:  test "3 5 |", 7
1F82   31 00 5D               LD   SP,STACK   
1F85   CD 80 10               CALL   coldInit   
1F88   CD 94 5B               CALL   execStr   
1F8B   33 20 35 20 7C 00      DB   "3 5 |",0   
1F91   E1                     POP   HL   
1F92   E5                     PUSH   HL   
1F93   11 07 00               LD   DE,7   
1F96   B7                     OR   A   
1F97   ED 52                  SBC   HL,DE   
1F99   7D                     LD   A,L   
1F9A   B4                     OR   H   
1F9B   CA FB 1F               JP   Z,expectM_3133S74   
1F9E   CD 4C 10               CALL   printStr   
1FA1   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1FAD   CD 4C 10               CALL   printStr   
1FB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FBF   21 07 00               LD   hl,7   
1FC2   E5                     PUSH   hl   
1FC3   E5                     PUSH   hl   
1FC4   CD 49 11               CALL   run   
1FC7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1FD3   CD 4C 10               CALL   printStr   
1FD6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE3   E1                     POP   hl   
1FE4   E5                     PUSH   hl   
1FE5   E5                     PUSH   hl   
1FE6   CD 49 11               CALL   run   
1FE9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1FFA   76                     HALT      
1FFB                EXPECTM_3133S74:      
1FFB   E1                     POP   HL   
1FFC                          ;*Macro unroll:  test "3 5 /xor", 6
1FFC   31 00 5D               LD   SP,STACK   
1FFF   CD 80 10               CALL   coldInit   
2002   CD 94 5B               CALL   execStr   
2005   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
200E   E1                     POP   HL   
200F   E5                     PUSH   HL   
2010   11 06 00               LD   DE,6   
2013   B7                     OR   A   
2014   ED 52                  SBC   HL,DE   
2016   7D                     LD   A,L   
2017   B4                     OR   H   
2018   CA 7B 20               JP   Z,expectM_3134S75   
201B   CD 4C 10               CALL   printStr   
201E   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
202D   CD 4C 10               CALL   printStr   
2030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
203F   21 06 00               LD   hl,6   
2042   E5                     PUSH   hl   
2043   E5                     PUSH   hl   
2044   CD 49 11               CALL   run   
2047   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2053   CD 4C 10               CALL   printStr   
2056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2063   E1                     POP   hl   
2064   E5                     PUSH   hl   
2065   E5                     PUSH   hl   
2066   CD 49 11               CALL   run   
2069   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
207A   76                     HALT      
207B                EXPECTM_3134S75:      
207B   E1                     POP   HL   
207C                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
207C   31 00 5D               LD   SP,STACK   
207F   CD 80 10               CALL   coldInit   
2082   CD 94 5B               CALL   execStr   
2085   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
2096   E1                     POP   HL   
2097   E5                     PUSH   HL   
2098   11 06 00               LD   DE,6   
209B   B7                     OR   A   
209C   ED 52                  SBC   HL,DE   
209E   7D                     LD   A,L   
209F   B4                     OR   H   
20A0   CA 0B 21               JP   Z,expectM_3135S76   
20A3   CD 4C 10               CALL   printStr   
20A6   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
20BD   CD 4C 10               CALL   printStr   
20C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CF   21 06 00               LD   hl,6   
20D2   E5                     PUSH   hl   
20D3   E5                     PUSH   hl   
20D4   CD 49 11               CALL   run   
20D7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
20E3   CD 4C 10               CALL   printStr   
20E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20F3   E1                     POP   hl   
20F4   E5                     PUSH   hl   
20F5   E5                     PUSH   hl   
20F6   CD 49 11               CALL   run   
20F9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
210A   76                     HALT      
210B                EXPECTM_3135S76:      
210B   E1                     POP   HL   
210C                          ;*Macro unroll:  test "0 !", true
210C   31 00 5D               LD   SP,STACK   
210F   CD 80 10               CALL   coldInit   
2112   CD 94 5B               CALL   execStr   
2115   30 20 21 00            DB   "0 !",0   
2119   E1                     POP   HL   
211A   E5                     PUSH   HL   
211B   11 FF FF               LD   DE,true   
211E   B7                     OR   A   
211F   ED 52                  SBC   HL,DE   
2121   7D                     LD   A,L   
2122   B4                     OR   H   
2123   CA 81 21               JP   Z,expectM_3136S77   
2126   CD 4C 10               CALL   printStr   
2129   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
2133   CD 4C 10               CALL   printStr   
2136   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2145   21 FF FF               LD   hl,true   
2148   E5                     PUSH   hl   
2149   E5                     PUSH   hl   
214A   CD 49 11               CALL   run   
214D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2159   CD 4C 10               CALL   printStr   
215C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2169   E1                     POP   hl   
216A   E5                     PUSH   hl   
216B   E5                     PUSH   hl   
216C   CD 49 11               CALL   run   
216F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2180   76                     HALT      
2181                EXPECTM_3136S77:      
2181   E1                     POP   HL   
2182                          ;*Macro unroll:  test "2 !", false
2182   31 00 5D               LD   SP,STACK   
2185   CD 80 10               CALL   coldInit   
2188   CD 94 5B               CALL   execStr   
218B   32 20 21 00            DB   "2 !",0   
218F   E1                     POP   HL   
2190   E5                     PUSH   HL   
2191   11 00 00               LD   DE,false   
2194   B7                     OR   A   
2195   ED 52                  SBC   HL,DE   
2197   7D                     LD   A,L   
2198   B4                     OR   H   
2199   CA F7 21               JP   Z,expectM_3137S78   
219C   CD 4C 10               CALL   printStr   
219F   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
21A9   CD 4C 10               CALL   printStr   
21AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21BB   21 00 00               LD   hl,false   
21BE   E5                     PUSH   hl   
21BF   E5                     PUSH   hl   
21C0   CD 49 11               CALL   run   
21C3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
21CF   CD 4C 10               CALL   printStr   
21D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21DF   E1                     POP   hl   
21E0   E5                     PUSH   hl   
21E1   E5                     PUSH   hl   
21E2   CD 49 11               CALL   run   
21E5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
21F6   76                     HALT      
21F7                EXPECTM_3137S78:      
21F7   E1                     POP   HL   
21F8                          ;*Macro unroll:  test "0 !!", false
21F8   31 00 5D               LD   SP,STACK   
21FB   CD 80 10               CALL   coldInit   
21FE   CD 94 5B               CALL   execStr   
2201   30 20 21 21 00         DB   "0 !!",0   
2206   E1                     POP   HL   
2207   E5                     PUSH   HL   
2208   11 00 00               LD   DE,false   
220B   B7                     OR   A   
220C   ED 52                  SBC   HL,DE   
220E   7D                     LD   A,L   
220F   B4                     OR   H   
2210   CA 6F 22               JP   Z,expectM_3138S79   
2213   CD 4C 10               CALL   printStr   
2216   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
2221   CD 4C 10               CALL   printStr   
2224   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2233   21 00 00               LD   hl,false   
2236   E5                     PUSH   hl   
2237   E5                     PUSH   hl   
2238   CD 49 11               CALL   run   
223B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2247   CD 4C 10               CALL   printStr   
224A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2257   E1                     POP   hl   
2258   E5                     PUSH   hl   
2259   E5                     PUSH   hl   
225A   CD 49 11               CALL   run   
225D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
226E   76                     HALT      
226F                EXPECTM_3138S79:      
226F   E1                     POP   HL   
2270                          ;*Macro unroll:  test "2 !!", true
2270   31 00 5D               LD   SP,STACK   
2273   CD 80 10               CALL   coldInit   
2276   CD 94 5B               CALL   execStr   
2279   32 20 21 21 00         DB   "2 !!",0   
227E   E1                     POP   HL   
227F   E5                     PUSH   HL   
2280   11 FF FF               LD   DE,true   
2283   B7                     OR   A   
2284   ED 52                  SBC   HL,DE   
2286   7D                     LD   A,L   
2287   B4                     OR   H   
2288   CA E7 22               JP   Z,expectM_3139S80   
228B   CD 4C 10               CALL   printStr   
228E   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
2299   CD 4C 10               CALL   printStr   
229C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22AB   21 FF FF               LD   hl,true   
22AE   E5                     PUSH   hl   
22AF   E5                     PUSH   hl   
22B0   CD 49 11               CALL   run   
22B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
22BF   CD 4C 10               CALL   printStr   
22C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22CF   E1                     POP   hl   
22D0   E5                     PUSH   hl   
22D1   E5                     PUSH   hl   
22D2   CD 49 11               CALL   run   
22D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22E6   76                     HALT      
22E7                EXPECTM_3139S80:      
22E7   E1                     POP   HL   
22E8                          ;*Macro unroll:  test "2 3 *", 6
22E8   31 00 5D               LD   SP,STACK   
22EB   CD 80 10               CALL   coldInit   
22EE   CD 94 5B               CALL   execStr   
22F1   32 20 33 20 2A 00      DB   "2 3 *",0   
22F7   E1                     POP   HL   
22F8   E5                     PUSH   HL   
22F9   11 06 00               LD   DE,6   
22FC   B7                     OR   A   
22FD   ED 52                  SBC   HL,DE   
22FF   7D                     LD   A,L   
2300   B4                     OR   H   
2301   CA 61 23               JP   Z,expectM_3140S81   
2304   CD 4C 10               CALL   printStr   
2307   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2313   CD 4C 10               CALL   printStr   
2316   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2325   21 06 00               LD   hl,6   
2328   E5                     PUSH   hl   
2329   E5                     PUSH   hl   
232A   CD 49 11               CALL   run   
232D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2339   CD 4C 10               CALL   printStr   
233C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2349   E1                     POP   hl   
234A   E5                     PUSH   hl   
234B   E5                     PUSH   hl   
234C   CD 49 11               CALL   run   
234F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2360   76                     HALT      
2361                EXPECTM_3140S81:      
2361   E1                     POP   HL   
2362                          ;*Macro unroll:  test "1 2 3 + *", 5
2362   31 00 5D               LD   SP,STACK   
2365   CD 80 10               CALL   coldInit   
2368   CD 94 5B               CALL   execStr   
236B   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2375   E1                     POP   HL   
2376   E5                     PUSH   HL   
2377   11 05 00               LD   DE,5   
237A   B7                     OR   A   
237B   ED 52                  SBC   HL,DE   
237D   7D                     LD   A,L   
237E   B4                     OR   H   
237F   CA E3 23               JP   Z,expectM_3141S82   
2382   CD 4C 10               CALL   printStr   
2385   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2395   CD 4C 10               CALL   printStr   
2398   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A7   21 05 00               LD   hl,5   
23AA   E5                     PUSH   hl   
23AB   E5                     PUSH   hl   
23AC   CD 49 11               CALL   run   
23AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
23BB   CD 4C 10               CALL   printStr   
23BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CB   E1                     POP   hl   
23CC   E5                     PUSH   hl   
23CD   E5                     PUSH   hl   
23CE   CD 49 11               CALL   run   
23D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23E2   76                     HALT      
23E3                EXPECTM_3141S82:      
23E3   E1                     POP   HL   
23E4                          ;*Macro unroll:  test "7 3 /", 2
23E4   31 00 5D               LD   SP,STACK   
23E7   CD 80 10               CALL   coldInit   
23EA   CD 94 5B               CALL   execStr   
23ED   37 20 33 20 2F 00      DB   "7 3 /",0   
23F3   E1                     POP   HL   
23F4   E5                     PUSH   HL   
23F5   11 02 00               LD   DE,2   
23F8   B7                     OR   A   
23F9   ED 52                  SBC   HL,DE   
23FB   7D                     LD   A,L   
23FC   B4                     OR   H   
23FD   CA 5D 24               JP   Z,expectM_3142S83   
2400   CD 4C 10               CALL   printStr   
2403   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
240F   CD 4C 10               CALL   printStr   
2412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2421   21 02 00               LD   hl,2   
2424   E5                     PUSH   hl   
2425   E5                     PUSH   hl   
2426   CD 49 11               CALL   run   
2429   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2435   CD 4C 10               CALL   printStr   
2438   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2445   E1                     POP   hl   
2446   E5                     PUSH   hl   
2447   E5                     PUSH   hl   
2448   CD 49 11               CALL   run   
244B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
245C   76                     HALT      
245D                EXPECTM_3142S83:      
245D   E1                     POP   HL   
245E                          ;*Macro unroll:  test "100a= 1a+= a", 101
245E   31 00 5D               LD   SP,STACK   
2461   CD 80 10               CALL   coldInit   
2464   CD 94 5B               CALL   execStr   
2467   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2474   E1                     POP   HL   
2475   E5                     PUSH   HL   
2476   11 65 00               LD   DE,101   
2479   B7                     OR   A   
247A   ED 52                  SBC   HL,DE   
247C   7D                     LD   A,L   
247D   B4                     OR   H   
247E   CA E5 24               JP   Z,expectM_3143S84   
2481   CD 4C 10               CALL   printStr   
2484   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2497   CD 4C 10               CALL   printStr   
249A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A9   21 65 00               LD   hl,101   
24AC   E5                     PUSH   hl   
24AD   E5                     PUSH   hl   
24AE   CD 49 11               CALL   run   
24B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
24BD   CD 4C 10               CALL   printStr   
24C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24CD   E1                     POP   hl   
24CE   E5                     PUSH   hl   
24CF   E5                     PUSH   hl   
24D0   CD 49 11               CALL   run   
24D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24E4   76                     HALT      
24E5                EXPECTM_3143S84:      
24E5   E1                     POP   HL   
24E6                          ;*Macro unroll:  test "100a= 1a-= a", 99
24E6   31 00 5D               LD   SP,STACK   
24E9   CD 80 10               CALL   coldInit   
24EC   CD 94 5B               CALL   execStr   
24EF   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
24FC   E1                     POP   HL   
24FD   E5                     PUSH   HL   
24FE   11 63 00               LD   DE,99   
2501   B7                     OR   A   
2502   ED 52                  SBC   HL,DE   
2504   7D                     LD   A,L   
2505   B4                     OR   H   
2506   CA 6D 25               JP   Z,expectM_3144S85   
2509   CD 4C 10               CALL   printStr   
250C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
251F   CD 4C 10               CALL   printStr   
2522   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2531   21 63 00               LD   hl,99   
2534   E5                     PUSH   hl   
2535   E5                     PUSH   hl   
2536   CD 49 11               CALL   run   
2539   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2545   CD 4C 10               CALL   printStr   
2548   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2555   E1                     POP   hl   
2556   E5                     PUSH   hl   
2557   E5                     PUSH   hl   
2558   CD 49 11               CALL   run   
255B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
256C   76                     HALT      
256D                EXPECTM_3144S85:      
256D   E1                     POP   HL   
256E                          ;*Macro unroll:  test "100a= 2a*= a", 200
256E   31 00 5D               LD   SP,STACK   
2571   CD 80 10               CALL   coldInit   
2574   CD 94 5B               CALL   execStr   
2577   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2584   E1                     POP   HL   
2585   E5                     PUSH   HL   
2586   11 C8 00               LD   DE,200   
2589   B7                     OR   A   
258A   ED 52                  SBC   HL,DE   
258C   7D                     LD   A,L   
258D   B4                     OR   H   
258E   CA F5 25               JP   Z,expectM_3145S86   
2591   CD 4C 10               CALL   printStr   
2594   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
25A7   CD 4C 10               CALL   printStr   
25AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B9   21 C8 00               LD   hl,200   
25BC   E5                     PUSH   hl   
25BD   E5                     PUSH   hl   
25BE   CD 49 11               CALL   run   
25C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25CD   CD 4C 10               CALL   printStr   
25D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DD   E1                     POP   hl   
25DE   E5                     PUSH   hl   
25DF   E5                     PUSH   hl   
25E0   CD 49 11               CALL   run   
25E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
25F4   76                     HALT      
25F5                EXPECTM_3145S86:      
25F5   E1                     POP   HL   
25F6                          ;*Macro unroll:  test "100a= 2 a/= a", 50
25F6   31 00 5D               LD   SP,STACK   
25F9   CD 80 10               CALL   coldInit   
25FC   CD 94 5B               CALL   execStr   
25FF   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
260D   E1                     POP   HL   
260E   E5                     PUSH   HL   
260F   11 32 00               LD   DE,50   
2612   B7                     OR   A   
2613   ED 52                  SBC   HL,DE   
2615   7D                     LD   A,L   
2616   B4                     OR   H   
2617   CA 7F 26               JP   Z,expectM_3146S87   
261A   CD 4C 10               CALL   printStr   
261D   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2631   CD 4C 10               CALL   printStr   
2634   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2643   21 32 00               LD   hl,50   
2646   E5                     PUSH   hl   
2647   E5                     PUSH   hl   
2648   CD 49 11               CALL   run   
264B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2657   CD 4C 10               CALL   printStr   
265A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2667   E1                     POP   hl   
2668   E5                     PUSH   hl   
2669   E5                     PUSH   hl   
266A   CD 49 11               CALL   run   
266D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
267E   76                     HALT      
267F                EXPECTM_3146S87:      
267F   E1                     POP   HL   
2680                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2680   31 00 5D               LD   SP,STACK   
2683   CD 80 10               CALL   coldInit   
2686   CD 94 5B               CALL   execStr   
2689   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2699   E1                     POP   HL   
269A   E5                     PUSH   HL   
269B   11 05 00               LD   DE,5   
269E   B7                     OR   A   
269F   ED 52                  SBC   HL,DE   
26A1   7D                     LD   A,L   
26A2   B4                     OR   H   
26A3   CA 0D 27               JP   Z,expectM_3147S88   
26A6   CD 4C 10               CALL   printStr   
26A9   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
26BF   CD 4C 10               CALL   printStr   
26C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26D1   21 05 00               LD   hl,5   
26D4   E5                     PUSH   hl   
26D5   E5                     PUSH   hl   
26D6   CD 49 11               CALL   run   
26D9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26E5   CD 4C 10               CALL   printStr   
26E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26F5   E1                     POP   hl   
26F6   E5                     PUSH   hl   
26F7   E5                     PUSH   hl   
26F8   CD 49 11               CALL   run   
26FB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
270C   76                     HALT      
270D                EXPECTM_3147S88:      
270D   E1                     POP   HL   
270E                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
270E   31 00 5D               LD   SP,STACK   
2711   CD 80 10               CALL   coldInit   
2714   CD 94 5B               CALL   execStr   
2717   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2727   E1                     POP   HL   
2728   E5                     PUSH   HL   
2729   11 01 00               LD   DE,1   
272C   B7                     OR   A   
272D   ED 52                  SBC   HL,DE   
272F   7D                     LD   A,L   
2730   B4                     OR   H   
2731   CA 9B 27               JP   Z,expectM_3148S89   
2734   CD 4C 10               CALL   printStr   
2737   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
274D   CD 4C 10               CALL   printStr   
2750   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
275F   21 01 00               LD   hl,1   
2762   E5                     PUSH   hl   
2763   E5                     PUSH   hl   
2764   CD 49 11               CALL   run   
2767   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2773   CD 4C 10               CALL   printStr   
2776   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2783   E1                     POP   hl   
2784   E5                     PUSH   hl   
2785   E5                     PUSH   hl   
2786   CD 49 11               CALL   run   
2789   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
279A   76                     HALT      
279B                EXPECTM_3148S89:      
279B   E1                     POP   HL   
279C                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
279C   31 00 5D               LD   SP,STACK   
279F   CD 80 10               CALL   coldInit   
27A2   CD 94 5B               CALL   execStr   
27A5   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
27B5   E1                     POP   HL   
27B6   E5                     PUSH   HL   
27B7   11 06 00               LD   DE,6   
27BA   B7                     OR   A   
27BB   ED 52                  SBC   HL,DE   
27BD   7D                     LD   A,L   
27BE   B4                     OR   H   
27BF   CA 29 28               JP   Z,expectM_3149S90   
27C2   CD 4C 10               CALL   printStr   
27C5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
27DB   CD 4C 10               CALL   printStr   
27DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27ED   21 06 00               LD   hl,6   
27F0   E5                     PUSH   hl   
27F1   E5                     PUSH   hl   
27F2   CD 49 11               CALL   run   
27F5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2801   CD 4C 10               CALL   printStr   
2804   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2811   E1                     POP   hl   
2812   E5                     PUSH   hl   
2813   E5                     PUSH   hl   
2814   CD 49 11               CALL   run   
2817   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2828   76                     HALT      
2829                EXPECTM_3149S90:      
2829   E1                     POP   HL   
282A                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
282A   31 00 5D               LD   SP,STACK   
282D   CD 80 10               CALL   coldInit   
2830   CD 94 5B               CALL   execStr   
2833   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2843   E1                     POP   HL   
2844   E5                     PUSH   HL   
2845   11 03 00               LD   DE,3   
2848   B7                     OR   A   
2849   ED 52                  SBC   HL,DE   
284B   7D                     LD   A,L   
284C   B4                     OR   H   
284D   CA B7 28               JP   Z,expectM_3150S91   
2850   CD 4C 10               CALL   printStr   
2853   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2869   CD 4C 10               CALL   printStr   
286C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
287B   21 03 00               LD   hl,3   
287E   E5                     PUSH   hl   
287F   E5                     PUSH   hl   
2880   CD 49 11               CALL   run   
2883   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
288F   CD 4C 10               CALL   printStr   
2892   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
289F   E1                     POP   hl   
28A0   E5                     PUSH   hl   
28A1   E5                     PUSH   hl   
28A2   CD 49 11               CALL   run   
28A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
28B6   76                     HALT      
28B7                EXPECTM_3150S91:      
28B7   E1                     POP   HL   
28B8                          ;*Macro unroll:  test "$55a= $AAa&= a",0
28B8   31 00 5D               LD   SP,STACK   
28BB   CD 80 10               CALL   coldInit   
28BE   CD 94 5B               CALL   execStr   
28C1   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
28D0   E1                     POP   HL   
28D1   E5                     PUSH   HL   
28D2   11 00 00               LD   DE,0   
28D5   B7                     OR   A   
28D6   ED 52                  SBC   HL,DE   
28D8   7D                     LD   A,L   
28D9   B4                     OR   H   
28DA   CA 43 29               JP   Z,expectM_3151S92   
28DD   CD 4C 10               CALL   printStr   
28E0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
28F5   CD 4C 10               CALL   printStr   
28F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2907   21 00 00               LD   hl,0   
290A   E5                     PUSH   hl   
290B   E5                     PUSH   hl   
290C   CD 49 11               CALL   run   
290F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
291B   CD 4C 10               CALL   printStr   
291E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
292B   E1                     POP   hl   
292C   E5                     PUSH   hl   
292D   E5                     PUSH   hl   
292E   CD 49 11               CALL   run   
2931   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2942   76                     HALT      
2943                EXPECTM_3151S92:      
2943   E1                     POP   HL   
2944                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2944   31 00 5D               LD   SP,STACK   
2947   CD 80 10               CALL   coldInit   
294A   CD 94 5B               CALL   execStr   
294D   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
295C   E1                     POP   HL   
295D   E5                     PUSH   HL   
295E   11 FF 00               LD   DE,$FF   
2961   B7                     OR   A   
2962   ED 52                  SBC   HL,DE   
2964   7D                     LD   A,L   
2965   B4                     OR   H   
2966   CA CF 29               JP   Z,expectM_3152S93   
2969   CD 4C 10               CALL   printStr   
296C   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2981   CD 4C 10               CALL   printStr   
2984   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2993   21 FF 00               LD   hl,$FF   
2996   E5                     PUSH   hl   
2997   E5                     PUSH   hl   
2998   CD 49 11               CALL   run   
299B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
29A7   CD 4C 10               CALL   printStr   
29AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B7   E1                     POP   hl   
29B8   E5                     PUSH   hl   
29B9   E5                     PUSH   hl   
29BA   CD 49 11               CALL   run   
29BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29CE   76                     HALT      
29CF                EXPECTM_3152S93:      
29CF   E1                     POP   HL   
29D0                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
29D0   31 00 5D               LD   SP,STACK   
29D3   CD 80 10               CALL   coldInit   
29D6   CD 94 5B               CALL   execStr   
29D9   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
29EC   E1                     POP   HL   
29ED   E5                     PUSH   HL   
29EE   11 0F 00               LD   DE,$0F   
29F1   B7                     OR   A   
29F2   ED 52                  SBC   HL,DE   
29F4   7D                     LD   A,L   
29F5   B4                     OR   H   
29F6   CA 63 2A               JP   Z,expectM_3153S94   
29F9   CD 4C 10               CALL   printStr   
29FC   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2A15   CD 4C 10               CALL   printStr   
2A18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A27   21 0F 00               LD   hl,$0F   
2A2A   E5                     PUSH   hl   
2A2B   E5                     PUSH   hl   
2A2C   CD 49 11               CALL   run   
2A2F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A3B   CD 4C 10               CALL   printStr   
2A3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A4B   E1                     POP   hl   
2A4C   E5                     PUSH   hl   
2A4D   E5                     PUSH   hl   
2A4E   CD 49 11               CALL   run   
2A51   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A62   76                     HALT      
2A63                EXPECTM_3153S94:      
2A63   E1                     POP   HL   
2A64                          ;*Macro unroll:  test "$00AA~",$FF55
2A64   31 00 5D               LD   SP,STACK   
2A67   CD 80 10               CALL   coldInit   
2A6A   CD 94 5B               CALL   execStr   
2A6D   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2A74   E1                     POP   HL   
2A75   E5                     PUSH   HL   
2A76   11 55 FF               LD   DE,$FF55   
2A79   B7                     OR   A   
2A7A   ED 52                  SBC   HL,DE   
2A7C   7D                     LD   A,L   
2A7D   B4                     OR   H   
2A7E   CA DF 2A               JP   Z,expectM_3154S95   
2A81   CD 4C 10               CALL   printStr   
2A84   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2A91   CD 4C 10               CALL   printStr   
2A94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AA3   21 55 FF               LD   hl,$FF55   
2AA6   E5                     PUSH   hl   
2AA7   E5                     PUSH   hl   
2AA8   CD 49 11               CALL   run   
2AAB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2AB7   CD 4C 10               CALL   printStr   
2ABA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AC7   E1                     POP   hl   
2AC8   E5                     PUSH   hl   
2AC9   E5                     PUSH   hl   
2ACA   CD 49 11               CALL   run   
2ACD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ADE   76                     HALT      
2ADF                EXPECTM_3154S95:      
2ADF   E1                     POP   HL   
2AE0                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2AE0   31 00 5D               LD   SP,STACK   
2AE3   CD 80 10               CALL   coldInit   
2AE6   CD 94 5B               CALL   execStr   
2AE9   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2AF7   E1                     POP   HL   
2AF8   E5                     PUSH   HL   
2AF9   11 55 55               LD   DE,$5555   
2AFC   B7                     OR   A   
2AFD   ED 52                  SBC   HL,DE   
2AFF   7D                     LD   A,L   
2B00   B4                     OR   H   
2B01   CA 69 2B               JP   Z,expectM_3155S96   
2B04   CD 4C 10               CALL   printStr   
2B07   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2B1B   CD 4C 10               CALL   printStr   
2B1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B2D   21 55 55               LD   hl,$5555   
2B30   E5                     PUSH   hl   
2B31   E5                     PUSH   hl   
2B32   CD 49 11               CALL   run   
2B35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B41   CD 4C 10               CALL   printStr   
2B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B51   E1                     POP   hl   
2B52   E5                     PUSH   hl   
2B53   E5                     PUSH   hl   
2B54   CD 49 11               CALL   run   
2B57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B68   76                     HALT      
2B69                EXPECTM_3155S96:      
2B69   E1                     POP   HL   
2B6A                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2B6A   31 00 5D               LD   SP,STACK   
2B6D   CD 80 10               CALL   coldInit   
2B70   CD 94 5B               CALL   execStr   
2B73   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2B81   E1                     POP   HL   
2B82   E5                     PUSH   HL   
2B83   11 06 00               LD   DE,6   
2B86   B7                     OR   A   
2B87   ED 52                  SBC   HL,DE   
2B89   7D                     LD   A,L   
2B8A   B4                     OR   H   
2B8B   CA F3 2B               JP   Z,expectM_3156S97   
2B8E   CD 4C 10               CALL   printStr   
2B91   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2BA5   CD 4C 10               CALL   printStr   
2BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BB7   21 06 00               LD   hl,6   
2BBA   E5                     PUSH   hl   
2BBB   E5                     PUSH   hl   
2BBC   CD 49 11               CALL   run   
2BBF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2BCB   CD 4C 10               CALL   printStr   
2BCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDB   E1                     POP   hl   
2BDC   E5                     PUSH   hl   
2BDD   E5                     PUSH   hl   
2BDE   CD 49 11               CALL   run   
2BE1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BF2   76                     HALT      
2BF3                EXPECTM_3156S97:      
2BF3   E1                     POP   HL   
2BF4                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2BF4   31 00 5D               LD   SP,STACK   
2BF7   CD 80 10               CALL   coldInit   
2BFA   CD 94 5B               CALL   execStr   
2BFD   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2C0C   E1                     POP   HL   
2C0D   E5                     PUSH   HL   
2C0E   11 05 00               LD   DE,5   
2C11   B7                     OR   A   
2C12   ED 52                  SBC   HL,DE   
2C14   7D                     LD   A,L   
2C15   B4                     OR   H   
2C16   CA 7F 2C               JP   Z,expectM_3157S98   
2C19   CD 4C 10               CALL   printStr   
2C1C   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2C31   CD 4C 10               CALL   printStr   
2C34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C43   21 05 00               LD   hl,5   
2C46   E5                     PUSH   hl   
2C47   E5                     PUSH   hl   
2C48   CD 49 11               CALL   run   
2C4B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C57   CD 4C 10               CALL   printStr   
2C5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C67   E1                     POP   hl   
2C68   E5                     PUSH   hl   
2C69   E5                     PUSH   hl   
2C6A   CD 49 11               CALL   run   
2C6D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C7E   76                     HALT      
2C7F                EXPECTM_3157S98:      
2C7F   E1                     POP   HL   
2C80                          ;*Macro unroll:  test "7 3 / /rem", 1
2C80   31 00 5D               LD   SP,STACK   
2C83   CD 80 10               CALL   coldInit   
2C86   CD 94 5B               CALL   execStr   
2C89   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2C94   E1                     POP   HL   
2C95   E5                     PUSH   HL   
2C96   11 01 00               LD   DE,1   
2C99   B7                     OR   A   
2C9A   ED 52                  SBC   HL,DE   
2C9C   7D                     LD   A,L   
2C9D   B4                     OR   H   
2C9E   CA 03 2D               JP   Z,expectM_3158S99   
2CA1   CD 4C 10               CALL   printStr   
2CA4   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2CB5   CD 4C 10               CALL   printStr   
2CB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC7   21 01 00               LD   hl,1   
2CCA   E5                     PUSH   hl   
2CCB   E5                     PUSH   hl   
2CCC   CD 49 11               CALL   run   
2CCF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2CDB   CD 4C 10               CALL   printStr   
2CDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CEB   E1                     POP   hl   
2CEC   E5                     PUSH   hl   
2CED   E5                     PUSH   hl   
2CEE   CD 49 11               CALL   run   
2CF1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D02   76                     HALT      
2D03                EXPECTM_3158S99:      
2D03   E1                     POP   HL   
2D04                          ;*Macro unroll:  test "7 3 /", 2
2D04   31 00 5D               LD   SP,STACK   
2D07   CD 80 10               CALL   coldInit   
2D0A   CD 94 5B               CALL   execStr   
2D0D   37 20 33 20 2F 00      DB   "7 3 /",0   
2D13   E1                     POP   HL   
2D14   E5                     PUSH   HL   
2D15   11 02 00               LD   DE,2   
2D18   B7                     OR   A   
2D19   ED 52                  SBC   HL,DE   
2D1B   7D                     LD   A,L   
2D1C   B4                     OR   H   
2D1D   CA 7D 2D               JP   Z,expectM_3159S100   
2D20   CD 4C 10               CALL   printStr   
2D23   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2D2F   CD 4C 10               CALL   printStr   
2D32   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D41   21 02 00               LD   hl,2   
2D44   E5                     PUSH   hl   
2D45   E5                     PUSH   hl   
2D46   CD 49 11               CALL   run   
2D49   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D55   CD 4C 10               CALL   printStr   
2D58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D65   E1                     POP   hl   
2D66   E5                     PUSH   hl   
2D67   E5                     PUSH   hl   
2D68   CD 49 11               CALL   run   
2D6B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D7C   76                     HALT      
2D7D                EXPECTM_3159S100:      
2D7D   E1                     POP   HL   
2D7E                          ;*Macro unroll:  test "2 3 ==", FALSE
2D7E   31 00 5D               LD   SP,STACK   
2D81   CD 80 10               CALL   coldInit   
2D84   CD 94 5B               CALL   execStr   
2D87   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2D8E   E1                     POP   HL   
2D8F   E5                     PUSH   HL   
2D90   11 00 00               LD   DE,FALSE   
2D93   B7                     OR   A   
2D94   ED 52                  SBC   HL,DE   
2D96   7D                     LD   A,L   
2D97   B4                     OR   H   
2D98   CA F9 2D               JP   Z,expectM_3160S101   
2D9B   CD 4C 10               CALL   printStr   
2D9E   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2DAB   CD 4C 10               CALL   printStr   
2DAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DBD   21 00 00               LD   hl,FALSE   
2DC0   E5                     PUSH   hl   
2DC1   E5                     PUSH   hl   
2DC2   CD 49 11               CALL   run   
2DC5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DD1   CD 4C 10               CALL   printStr   
2DD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DE1   E1                     POP   hl   
2DE2   E5                     PUSH   hl   
2DE3   E5                     PUSH   hl   
2DE4   CD 49 11               CALL   run   
2DE7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2DF8   76                     HALT      
2DF9                EXPECTM_3160S101:      
2DF9   E1                     POP   HL   
2DFA                          ;*Macro unroll:  test "3 3 ==", TRUE
2DFA   31 00 5D               LD   SP,STACK   
2DFD   CD 80 10               CALL   coldInit   
2E00   CD 94 5B               CALL   execStr   
2E03   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2E0A   E1                     POP   HL   
2E0B   E5                     PUSH   HL   
2E0C   11 FF FF               LD   DE,TRUE   
2E0F   B7                     OR   A   
2E10   ED 52                  SBC   HL,DE   
2E12   7D                     LD   A,L   
2E13   B4                     OR   H   
2E14   CA 75 2E               JP   Z,expectM_3161S102   
2E17   CD 4C 10               CALL   printStr   
2E1A   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2E27   CD 4C 10               CALL   printStr   
2E2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E39   21 FF FF               LD   hl,TRUE   
2E3C   E5                     PUSH   hl   
2E3D   E5                     PUSH   hl   
2E3E   CD 49 11               CALL   run   
2E41   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E4D   CD 4C 10               CALL   printStr   
2E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E5D   E1                     POP   hl   
2E5E   E5                     PUSH   hl   
2E5F   E5                     PUSH   hl   
2E60   CD 49 11               CALL   run   
2E63   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E74   76                     HALT      
2E75                EXPECTM_3161S102:      
2E75   E1                     POP   HL   
2E76                          ;*Macro unroll:  test "1 2 <", TRUE
2E76   31 00 5D               LD   SP,STACK   
2E79   CD 80 10               CALL   coldInit   
2E7C   CD 94 5B               CALL   execStr   
2E7F   31 20 32 20 3C 00      DB   "1 2 <",0   
2E85   E1                     POP   HL   
2E86   E5                     PUSH   HL   
2E87   11 FF FF               LD   DE,TRUE   
2E8A   B7                     OR   A   
2E8B   ED 52                  SBC   HL,DE   
2E8D   7D                     LD   A,L   
2E8E   B4                     OR   H   
2E8F   CA EF 2E               JP   Z,expectM_3162S103   
2E92   CD 4C 10               CALL   printStr   
2E95   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2EA1   CD 4C 10               CALL   printStr   
2EA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB3   21 FF FF               LD   hl,TRUE   
2EB6   E5                     PUSH   hl   
2EB7   E5                     PUSH   hl   
2EB8   CD 49 11               CALL   run   
2EBB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EC7   CD 4C 10               CALL   printStr   
2ECA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED7   E1                     POP   hl   
2ED8   E5                     PUSH   hl   
2ED9   E5                     PUSH   hl   
2EDA   CD 49 11               CALL   run   
2EDD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2EEE   76                     HALT      
2EEF                EXPECTM_3162S103:      
2EEF   E1                     POP   HL   
2EF0                          ;*Macro unroll:  test "2 1 <", FALSE
2EF0   31 00 5D               LD   SP,STACK   
2EF3   CD 80 10               CALL   coldInit   
2EF6   CD 94 5B               CALL   execStr   
2EF9   32 20 31 20 3C 00      DB   "2 1 <",0   
2EFF   E1                     POP   HL   
2F00   E5                     PUSH   HL   
2F01   11 00 00               LD   DE,FALSE   
2F04   B7                     OR   A   
2F05   ED 52                  SBC   HL,DE   
2F07   7D                     LD   A,L   
2F08   B4                     OR   H   
2F09   CA 69 2F               JP   Z,expectM_3163S104   
2F0C   CD 4C 10               CALL   printStr   
2F0F   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2F1B   CD 4C 10               CALL   printStr   
2F1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F2D   21 00 00               LD   hl,FALSE   
2F30   E5                     PUSH   hl   
2F31   E5                     PUSH   hl   
2F32   CD 49 11               CALL   run   
2F35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F41   CD 4C 10               CALL   printStr   
2F44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F51   E1                     POP   hl   
2F52   E5                     PUSH   hl   
2F53   E5                     PUSH   hl   
2F54   CD 49 11               CALL   run   
2F57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F68   76                     HALT      
2F69                EXPECTM_3163S104:      
2F69   E1                     POP   HL   
2F6A                          ;*Macro unroll:  test "2 3 <", TRUE
2F6A   31 00 5D               LD   SP,STACK   
2F6D   CD 80 10               CALL   coldInit   
2F70   CD 94 5B               CALL   execStr   
2F73   32 20 33 20 3C 00      DB   "2 3 <",0   
2F79   E1                     POP   HL   
2F7A   E5                     PUSH   HL   
2F7B   11 FF FF               LD   DE,TRUE   
2F7E   B7                     OR   A   
2F7F   ED 52                  SBC   HL,DE   
2F81   7D                     LD   A,L   
2F82   B4                     OR   H   
2F83   CA E3 2F               JP   Z,expectM_3164S105   
2F86   CD 4C 10               CALL   printStr   
2F89   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2F95   CD 4C 10               CALL   printStr   
2F98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA7   21 FF FF               LD   hl,TRUE   
2FAA   E5                     PUSH   hl   
2FAB   E5                     PUSH   hl   
2FAC   CD 49 11               CALL   run   
2FAF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FBB   CD 4C 10               CALL   printStr   
2FBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FCB   E1                     POP   hl   
2FCC   E5                     PUSH   hl   
2FCD   E5                     PUSH   hl   
2FCE   CD 49 11               CALL   run   
2FD1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2FE2   76                     HALT      
2FE3                EXPECTM_3164S105:      
2FE3   E1                     POP   HL   
2FE4                          ;*Macro unroll:  test "3 3 <", FALSE
2FE4   31 00 5D               LD   SP,STACK   
2FE7   CD 80 10               CALL   coldInit   
2FEA   CD 94 5B               CALL   execStr   
2FED   33 20 33 20 3C 00      DB   "3 3 <",0   
2FF3   E1                     POP   HL   
2FF4   E5                     PUSH   HL   
2FF5   11 00 00               LD   DE,FALSE   
2FF8   B7                     OR   A   
2FF9   ED 52                  SBC   HL,DE   
2FFB   7D                     LD   A,L   
2FFC   B4                     OR   H   
2FFD   CA 5D 30               JP   Z,expectM_3165S106   
3000   CD 4C 10               CALL   printStr   
3003   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
300F   CD 4C 10               CALL   printStr   
3012   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3021   21 00 00               LD   hl,FALSE   
3024   E5                     PUSH   hl   
3025   E5                     PUSH   hl   
3026   CD 49 11               CALL   run   
3029   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3035   CD 4C 10               CALL   printStr   
3038   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3045   E1                     POP   hl   
3046   E5                     PUSH   hl   
3047   E5                     PUSH   hl   
3048   CD 49 11               CALL   run   
304B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
305C   76                     HALT      
305D                EXPECTM_3165S106:      
305D   E1                     POP   HL   
305E                          ;*Macro unroll:  test "1 2 >", FALSE
305E   31 00 5D               LD   SP,STACK   
3061   CD 80 10               CALL   coldInit   
3064   CD 94 5B               CALL   execStr   
3067   31 20 32 20 3E 00      DB   "1 2 >",0   
306D   E1                     POP   HL   
306E   E5                     PUSH   HL   
306F   11 00 00               LD   DE,FALSE   
3072   B7                     OR   A   
3073   ED 52                  SBC   HL,DE   
3075   7D                     LD   A,L   
3076   B4                     OR   H   
3077   CA D7 30               JP   Z,expectM_3166S107   
307A   CD 4C 10               CALL   printStr   
307D   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
3089   CD 4C 10               CALL   printStr   
308C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
309B   21 00 00               LD   hl,FALSE   
309E   E5                     PUSH   hl   
309F   E5                     PUSH   hl   
30A0   CD 49 11               CALL   run   
30A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
30AF   CD 4C 10               CALL   printStr   
30B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30BF   E1                     POP   hl   
30C0   E5                     PUSH   hl   
30C1   E5                     PUSH   hl   
30C2   CD 49 11               CALL   run   
30C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
30D6   76                     HALT      
30D7                EXPECTM_3166S107:      
30D7   E1                     POP   HL   
30D8                          ;*Macro unroll:  test "2 1 >", TRUE
30D8   31 00 5D               LD   SP,STACK   
30DB   CD 80 10               CALL   coldInit   
30DE   CD 94 5B               CALL   execStr   
30E1   32 20 31 20 3E 00      DB   "2 1 >",0   
30E7   E1                     POP   HL   
30E8   E5                     PUSH   HL   
30E9   11 FF FF               LD   DE,TRUE   
30EC   B7                     OR   A   
30ED   ED 52                  SBC   HL,DE   
30EF   7D                     LD   A,L   
30F0   B4                     OR   H   
30F1   CA 51 31               JP   Z,expectM_3167S108   
30F4   CD 4C 10               CALL   printStr   
30F7   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
3103   CD 4C 10               CALL   printStr   
3106   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3115   21 FF FF               LD   hl,TRUE   
3118   E5                     PUSH   hl   
3119   E5                     PUSH   hl   
311A   CD 49 11               CALL   run   
311D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3129   CD 4C 10               CALL   printStr   
312C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3139   E1                     POP   hl   
313A   E5                     PUSH   hl   
313B   E5                     PUSH   hl   
313C   CD 49 11               CALL   run   
313F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3150   76                     HALT      
3151                EXPECTM_3167S108:      
3151   E1                     POP   HL   
3152                          ;*Macro unroll:  test "3 3 >", FALSE
3152   31 00 5D               LD   SP,STACK   
3155   CD 80 10               CALL   coldInit   
3158   CD 94 5B               CALL   execStr   
315B   33 20 33 20 3E 00      DB   "3 3 >",0   
3161   E1                     POP   HL   
3162   E5                     PUSH   HL   
3163   11 00 00               LD   DE,FALSE   
3166   B7                     OR   A   
3167   ED 52                  SBC   HL,DE   
3169   7D                     LD   A,L   
316A   B4                     OR   H   
316B   CA CB 31               JP   Z,expectM_3168S109   
316E   CD 4C 10               CALL   printStr   
3171   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
317D   CD 4C 10               CALL   printStr   
3180   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
318F   21 00 00               LD   hl,FALSE   
3192   E5                     PUSH   hl   
3193   E5                     PUSH   hl   
3194   CD 49 11               CALL   run   
3197   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31A3   CD 4C 10               CALL   printStr   
31A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31B3   E1                     POP   hl   
31B4   E5                     PUSH   hl   
31B5   E5                     PUSH   hl   
31B6   CD 49 11               CALL   run   
31B9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
31CA   76                     HALT      
31CB                EXPECTM_3168S109:      
31CB   E1                     POP   HL   
31CC                          ;*Macro unroll:  test "4 3 >", TRUE
31CC   31 00 5D               LD   SP,STACK   
31CF   CD 80 10               CALL   coldInit   
31D2   CD 94 5B               CALL   execStr   
31D5   34 20 33 20 3E 00      DB   "4 3 >",0   
31DB   E1                     POP   HL   
31DC   E5                     PUSH   HL   
31DD   11 FF FF               LD   DE,TRUE   
31E0   B7                     OR   A   
31E1   ED 52                  SBC   HL,DE   
31E3   7D                     LD   A,L   
31E4   B4                     OR   H   
31E5   CA 45 32               JP   Z,expectM_3169S110   
31E8   CD 4C 10               CALL   printStr   
31EB   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
31F7   CD 4C 10               CALL   printStr   
31FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3209   21 FF FF               LD   hl,TRUE   
320C   E5                     PUSH   hl   
320D   E5                     PUSH   hl   
320E   CD 49 11               CALL   run   
3211   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
321D   CD 4C 10               CALL   printStr   
3220   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
322D   E1                     POP   hl   
322E   E5                     PUSH   hl   
322F   E5                     PUSH   hl   
3230   CD 49 11               CALL   run   
3233   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3244   76                     HALT      
3245                EXPECTM_3169S110:      
3245   E1                     POP   HL   
3246                          ;*Macro unroll:  test "2 2 <=", TRUE
3246   31 00 5D               LD   SP,STACK   
3249   CD 80 10               CALL   coldInit   
324C   CD 94 5B               CALL   execStr   
324F   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
3256   E1                     POP   HL   
3257   E5                     PUSH   HL   
3258   11 FF FF               LD   DE,TRUE   
325B   B7                     OR   A   
325C   ED 52                  SBC   HL,DE   
325E   7D                     LD   A,L   
325F   B4                     OR   H   
3260   CA C1 32               JP   Z,expectM_3170S111   
3263   CD 4C 10               CALL   printStr   
3266   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
3273   CD 4C 10               CALL   printStr   
3276   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3285   21 FF FF               LD   hl,TRUE   
3288   E5                     PUSH   hl   
3289   E5                     PUSH   hl   
328A   CD 49 11               CALL   run   
328D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3299   CD 4C 10               CALL   printStr   
329C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A9   E1                     POP   hl   
32AA   E5                     PUSH   hl   
32AB   E5                     PUSH   hl   
32AC   CD 49 11               CALL   run   
32AF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32C0   76                     HALT      
32C1                EXPECTM_3170S111:      
32C1   E1                     POP   HL   
32C2                          ;*Macro unroll:  test "2 2 >=", TRUE
32C2   31 00 5D               LD   SP,STACK   
32C5   CD 80 10               CALL   coldInit   
32C8   CD 94 5B               CALL   execStr   
32CB   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
32D2   E1                     POP   HL   
32D3   E5                     PUSH   HL   
32D4   11 FF FF               LD   DE,TRUE   
32D7   B7                     OR   A   
32D8   ED 52                  SBC   HL,DE   
32DA   7D                     LD   A,L   
32DB   B4                     OR   H   
32DC   CA 3D 33               JP   Z,expectM_3171S112   
32DF   CD 4C 10               CALL   printStr   
32E2   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
32EF   CD 4C 10               CALL   printStr   
32F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3301   21 FF FF               LD   hl,TRUE   
3304   E5                     PUSH   hl   
3305   E5                     PUSH   hl   
3306   CD 49 11               CALL   run   
3309   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3315   CD 4C 10               CALL   printStr   
3318   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3325   E1                     POP   hl   
3326   E5                     PUSH   hl   
3327   E5                     PUSH   hl   
3328   CD 49 11               CALL   run   
332B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
333C   76                     HALT      
333D                EXPECTM_3171S112:      
333D   E1                     POP   HL   
333E                          ;*Macro unroll:  test "3 1 <<", 6
333E   31 00 5D               LD   SP,STACK   
3341   CD 80 10               CALL   coldInit   
3344   CD 94 5B               CALL   execStr   
3347   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
334E   E1                     POP   HL   
334F   E5                     PUSH   HL   
3350   11 06 00               LD   DE,6   
3353   B7                     OR   A   
3354   ED 52                  SBC   HL,DE   
3356   7D                     LD   A,L   
3357   B4                     OR   H   
3358   CA B9 33               JP   Z,expectM_3172S113   
335B   CD 4C 10               CALL   printStr   
335E   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
336B   CD 4C 10               CALL   printStr   
336E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
337D   21 06 00               LD   hl,6   
3380   E5                     PUSH   hl   
3381   E5                     PUSH   hl   
3382   CD 49 11               CALL   run   
3385   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3391   CD 4C 10               CALL   printStr   
3394   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A1   E1                     POP   hl   
33A2   E5                     PUSH   hl   
33A3   E5                     PUSH   hl   
33A4   CD 49 11               CALL   run   
33A7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
33B8   76                     HALT      
33B9                EXPECTM_3172S113:      
33B9   E1                     POP   HL   
33BA                          ;*Macro unroll:  test "10 1 >>", 5
33BA   31 00 5D               LD   SP,STACK   
33BD   CD 80 10               CALL   coldInit   
33C0   CD 94 5B               CALL   execStr   
33C3   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
33CB   E1                     POP   HL   
33CC   E5                     PUSH   HL   
33CD   11 05 00               LD   DE,5   
33D0   B7                     OR   A   
33D1   ED 52                  SBC   HL,DE   
33D3   7D                     LD   A,L   
33D4   B4                     OR   H   
33D5   CA 37 34               JP   Z,expectM_3173S114   
33D8   CD 4C 10               CALL   printStr   
33DB   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
33E9   CD 4C 10               CALL   printStr   
33EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33FB   21 05 00               LD   hl,5   
33FE   E5                     PUSH   hl   
33FF   E5                     PUSH   hl   
3400   CD 49 11               CALL   run   
3403   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
340F   CD 4C 10               CALL   printStr   
3412   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
341F   E1                     POP   hl   
3420   E5                     PUSH   hl   
3421   E5                     PUSH   hl   
3422   CD 49 11               CALL   run   
3425   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3436   76                     HALT      
3437                EXPECTM_3173S114:      
3437   E1                     POP   HL   
3438                          ;*Macro unroll:  test "1 x = x", 1
3438   31 00 5D               LD   SP,STACK   
343B   CD 80 10               CALL   coldInit   
343E   CD 94 5B               CALL   execStr   
3441   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3449   E1                     POP   HL   
344A   E5                     PUSH   HL   
344B   11 01 00               LD   DE,1   
344E   B7                     OR   A   
344F   ED 52                  SBC   HL,DE   
3451   7D                     LD   A,L   
3452   B4                     OR   H   
3453   CA B5 34               JP   Z,expectM_3174S115   
3456   CD 4C 10               CALL   printStr   
3459   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3467   CD 4C 10               CALL   printStr   
346A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3479   21 01 00               LD   hl,1   
347C   E5                     PUSH   hl   
347D   E5                     PUSH   hl   
347E   CD 49 11               CALL   run   
3481   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
348D   CD 4C 10               CALL   printStr   
3490   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
349D   E1                     POP   hl   
349E   E5                     PUSH   hl   
349F   E5                     PUSH   hl   
34A0   CD 49 11               CALL   run   
34A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
34B4   76                     HALT      
34B5                EXPECTM_3174S115:      
34B5   E1                     POP   HL   
34B6                          ;*Macro unroll:  test "1{}^", 1
34B6   31 00 5D               LD   SP,STACK   
34B9   CD 80 10               CALL   coldInit   
34BC   CD 94 5B               CALL   execStr   
34BF   31 7B 7D 5E 00         DB   "1{}^",0   
34C4   E1                     POP   HL   
34C5   E5                     PUSH   HL   
34C6   11 01 00               LD   DE,1   
34C9   B7                     OR   A   
34CA   ED 52                  SBC   HL,DE   
34CC   7D                     LD   A,L   
34CD   B4                     OR   H   
34CE   CA 2D 35               JP   Z,expectM_3175S116   
34D1   CD 4C 10               CALL   printStr   
34D4   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
34DF   CD 4C 10               CALL   printStr   
34E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34F1   21 01 00               LD   hl,1   
34F4   E5                     PUSH   hl   
34F5   E5                     PUSH   hl   
34F6   CD 49 11               CALL   run   
34F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3505   CD 4C 10               CALL   printStr   
3508   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3515   E1                     POP   hl   
3516   E5                     PUSH   hl   
3517   E5                     PUSH   hl   
3518   CD 49 11               CALL   run   
351B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
352C   76                     HALT      
352D                EXPECTM_3175S116:      
352D   E1                     POP   HL   
352E                          ;*Macro unroll:  test "{1}^", 1
352E   31 00 5D               LD   SP,STACK   
3531   CD 80 10               CALL   coldInit   
3534   CD 94 5B               CALL   execStr   
3537   7B 31 7D 5E 00         DB   "{1}^",0   
353C   E1                     POP   HL   
353D   E5                     PUSH   HL   
353E   11 01 00               LD   DE,1   
3541   B7                     OR   A   
3542   ED 52                  SBC   HL,DE   
3544   7D                     LD   A,L   
3545   B4                     OR   H   
3546   CA A5 35               JP   Z,expectM_3176S117   
3549   CD 4C 10               CALL   printStr   
354C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3557   CD 4C 10               CALL   printStr   
355A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3569   21 01 00               LD   hl,1   
356C   E5                     PUSH   hl   
356D   E5                     PUSH   hl   
356E   CD 49 11               CALL   run   
3571   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
357D   CD 4C 10               CALL   printStr   
3580   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
358D   E1                     POP   hl   
358E   E5                     PUSH   hl   
358F   E5                     PUSH   hl   
3590   CD 49 11               CALL   run   
3593   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
35A4   76                     HALT      
35A5                EXPECTM_3176S117:      
35A5   E1                     POP   HL   
35A6                          ;*Macro unroll:  test "{{1}^}^", 1
35A6   31 00 5D               LD   SP,STACK   
35A9   CD 80 10               CALL   coldInit   
35AC   CD 94 5B               CALL   execStr   
35AF   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
35B7   E1                     POP   HL   
35B8   E5                     PUSH   HL   
35B9   11 01 00               LD   DE,1   
35BC   B7                     OR   A   
35BD   ED 52                  SBC   HL,DE   
35BF   7D                     LD   A,L   
35C0   B4                     OR   H   
35C1   CA 23 36               JP   Z,expectM_3177S118   
35C4   CD 4C 10               CALL   printStr   
35C7   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
35D5   CD 4C 10               CALL   printStr   
35D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E7   21 01 00               LD   hl,1   
35EA   E5                     PUSH   hl   
35EB   E5                     PUSH   hl   
35EC   CD 49 11               CALL   run   
35EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
35FB   CD 4C 10               CALL   printStr   
35FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
360B   E1                     POP   hl   
360C   E5                     PUSH   hl   
360D   E5                     PUSH   hl   
360E   CD 49 11               CALL   run   
3611   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3622   76                     HALT      
3623                EXPECTM_3177S118:      
3623   E1                     POP   HL   
3624                          ;*Macro unroll:  test "{{{1}^}^}^", 1
3624   31 00 5D               LD   SP,STACK   
3627   CD 80 10               CALL   coldInit   
362A   CD 94 5B               CALL   execStr   
362D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3638   E1                     POP   HL   
3639   E5                     PUSH   HL   
363A   11 01 00               LD   DE,1   
363D   B7                     OR   A   
363E   ED 52                  SBC   HL,DE   
3640   7D                     LD   A,L   
3641   B4                     OR   H   
3642   CA A7 36               JP   Z,expectM_3178S119   
3645   CD 4C 10               CALL   printStr   
3648   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3659   CD 4C 10               CALL   printStr   
365C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366B   21 01 00               LD   hl,1   
366E   E5                     PUSH   hl   
366F   E5                     PUSH   hl   
3670   CD 49 11               CALL   run   
3673   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
367F   CD 4C 10               CALL   printStr   
3682   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
368F   E1                     POP   hl   
3690   E5                     PUSH   hl   
3691   E5                     PUSH   hl   
3692   CD 49 11               CALL   run   
3695   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
36A6   76                     HALT      
36A7                EXPECTM_3178S119:      
36A7   E1                     POP   HL   
36A8                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
36A8   31 00 5D               LD   SP,STACK   
36AB   CD 80 10               CALL   coldInit   
36AE   CD 94 5B               CALL   execStr   
36B1   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
36C4   E1                     POP   HL   
36C5   E5                     PUSH   HL   
36C6   11 15 00               LD   DE,21   
36C9   B7                     OR   A   
36CA   ED 52                  SBC   HL,DE   
36CC   7D                     LD   A,L   
36CD   B4                     OR   H   
36CE   CA 3B 37               JP   Z,expectM_3179S120   
36D1   CD 4C 10               CALL   printStr   
36D4   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
36ED   CD 4C 10               CALL   printStr   
36F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36FF   21 15 00               LD   hl,21   
3702   E5                     PUSH   hl   
3703   E5                     PUSH   hl   
3704   CD 49 11               CALL   run   
3707   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3713   CD 4C 10               CALL   printStr   
3716   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3723   E1                     POP   hl   
3724   E5                     PUSH   hl   
3725   E5                     PUSH   hl   
3726   CD 49 11               CALL   run   
3729   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
373A   76                     HALT      
373B                EXPECTM_3179S120:      
373B   E1                     POP   HL   
373C                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
373C   31 00 5D               LD   SP,STACK   
373F   CD 80 10               CALL   coldInit   
3742   CD 94 5B               CALL   execStr   
3745   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
3758   E1                     POP   HL   
3759   E5                     PUSH   HL   
375A   11 0B 00               LD   DE,11   
375D   B7                     OR   A   
375E   ED 52                  SBC   HL,DE   
3760   7D                     LD   A,L   
3761   B4                     OR   H   
3762   CA CF 37               JP   Z,expectM_3180S121   
3765   CD 4C 10               CALL   printStr   
3768   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
3781   CD 4C 10               CALL   printStr   
3784   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3793   21 0B 00               LD   hl,11   
3796   E5                     PUSH   hl   
3797   E5                     PUSH   hl   
3798   CD 49 11               CALL   run   
379B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
37A7   CD 4C 10               CALL   printStr   
37AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37B7   E1                     POP   hl   
37B8   E5                     PUSH   hl   
37B9   E5                     PUSH   hl   
37BA   CD 49 11               CALL   run   
37BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
37CE   76                     HALT      
37CF                EXPECTM_3180S121:      
37CF   E1                     POP   HL   
37D0                          ;*Macro unroll:  test "\\{2}^", 2
37D0   31 00 5D               LD   SP,STACK   
37D3   CD 80 10               CALL   coldInit   
37D6   CD 94 5B               CALL   execStr   
37D9   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
37DF   E1                     POP   HL   
37E0   E5                     PUSH   HL   
37E1   11 02 00               LD   DE,2   
37E4   B7                     OR   A   
37E5   ED 52                  SBC   HL,DE   
37E7   7D                     LD   A,L   
37E8   B4                     OR   H   
37E9   CA 49 38               JP   Z,expectM_3181S122   
37EC   CD 4C 10               CALL   printStr   
37EF   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
37FB   CD 4C 10               CALL   printStr   
37FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
380D   21 02 00               LD   hl,2   
3810   E5                     PUSH   hl   
3811   E5                     PUSH   hl   
3812   CD 49 11               CALL   run   
3815   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3821   CD 4C 10               CALL   printStr   
3824   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3831   E1                     POP   hl   
3832   E5                     PUSH   hl   
3833   E5                     PUSH   hl   
3834   CD 49 11               CALL   run   
3837   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3848   76                     HALT      
3849                EXPECTM_3181S122:      
3849   E1                     POP   HL   
384A                          ;*Macro unroll:  test "\\a{2}^", 2
384A   31 00 5D               LD   SP,STACK   
384D   CD 80 10               CALL   coldInit   
3850   CD 94 5B               CALL   execStr   
3853   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
385A   E1                     POP   HL   
385B   E5                     PUSH   HL   
385C   11 02 00               LD   DE,2   
385F   B7                     OR   A   
3860   ED 52                  SBC   HL,DE   
3862   7D                     LD   A,L   
3863   B4                     OR   H   
3864   CA C5 38               JP   Z,expectM_3182S123   
3867   CD 4C 10               CALL   printStr   
386A   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3877   CD 4C 10               CALL   printStr   
387A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3889   21 02 00               LD   hl,2   
388C   E5                     PUSH   hl   
388D   E5                     PUSH   hl   
388E   CD 49 11               CALL   run   
3891   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
389D   CD 4C 10               CALL   printStr   
38A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AD   E1                     POP   hl   
38AE   E5                     PUSH   hl   
38AF   E5                     PUSH   hl   
38B0   CD 49 11               CALL   run   
38B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
38C4   76                     HALT      
38C5                EXPECTM_3182S123:      
38C5   E1                     POP   HL   
38C6                          ;*Macro unroll:  test "5 \\a{%a}^", 5
38C6   31 00 5D               LD   SP,STACK   
38C9   CD 80 10               CALL   coldInit   
38CC   CD 94 5B               CALL   execStr   
38CF   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
38D9   E1                     POP   HL   
38DA   E5                     PUSH   HL   
38DB   11 05 00               LD   DE,5   
38DE   B7                     OR   A   
38DF   ED 52                  SBC   HL,DE   
38E1   7D                     LD   A,L   
38E2   B4                     OR   H   
38E3   CA 47 39               JP   Z,expectM_3183S124   
38E6   CD 4C 10               CALL   printStr   
38E9   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
38F9   CD 4C 10               CALL   printStr   
38FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
390B   21 05 00               LD   hl,5   
390E   E5                     PUSH   hl   
390F   E5                     PUSH   hl   
3910   CD 49 11               CALL   run   
3913   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
391F   CD 4C 10               CALL   printStr   
3922   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
392F   E1                     POP   hl   
3930   E5                     PUSH   hl   
3931   E5                     PUSH   hl   
3932   CD 49 11               CALL   run   
3935   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3946   76                     HALT      
3947                EXPECTM_3183S124:      
3947   E1                     POP   HL   
3948                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3948   31 00 5D               LD   SP,STACK   
394B   CD 80 10               CALL   coldInit   
394E   CD 94 5B               CALL   execStr   
3951   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
395D   E1                     POP   HL   
395E   E5                     PUSH   HL   
395F   11 05 00               LD   DE,5   
3962   B7                     OR   A   
3963   ED 52                  SBC   HL,DE   
3965   7D                     LD   A,L   
3966   B4                     OR   H   
3967   CA CD 39               JP   Z,expectM_3184S125   
396A   CD 4C 10               CALL   printStr   
396D   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
397F   CD 4C 10               CALL   printStr   
3982   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3991   21 05 00               LD   hl,5   
3994   E5                     PUSH   hl   
3995   E5                     PUSH   hl   
3996   CD 49 11               CALL   run   
3999   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
39A5   CD 4C 10               CALL   printStr   
39A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39B5   E1                     POP   hl   
39B6   E5                     PUSH   hl   
39B7   E5                     PUSH   hl   
39B8   CD 49 11               CALL   run   
39BB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
39CC   76                     HALT      
39CD                EXPECTM_3184S125:      
39CD   E1                     POP   HL   
39CE                          ;*Macro unroll:  test "\\a{{2}^}^", 2
39CE   31 00 5D               LD   SP,STACK   
39D1   CD 80 10               CALL   coldInit   
39D4   CD 94 5B               CALL   execStr   
39D7   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
39E1   E1                     POP   HL   
39E2   E5                     PUSH   HL   
39E3   11 02 00               LD   DE,2   
39E6   B7                     OR   A   
39E7   ED 52                  SBC   HL,DE   
39E9   7D                     LD   A,L   
39EA   B4                     OR   H   
39EB   CA 4F 3A               JP   Z,expectM_3185S126   
39EE   CD 4C 10               CALL   printStr   
39F1   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3A01   CD 4C 10               CALL   printStr   
3A04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A13   21 02 00               LD   hl,2   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD 49 11               CALL   run   
3A1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A27   CD 4C 10               CALL   printStr   
3A2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A37   E1                     POP   hl   
3A38   E5                     PUSH   hl   
3A39   E5                     PUSH   hl   
3A3A   CD 49 11               CALL   run   
3A3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A4E   76                     HALT      
3A4F                EXPECTM_3185S126:      
3A4F   E1                     POP   HL   
3A50                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3A50   31 00 5D               LD   SP,STACK   
3A53   CD 80 10               CALL   coldInit   
3A56   CD 94 5B               CALL   execStr   
3A59   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3A68   E1                     POP   HL   
3A69   E5                     PUSH   HL   
3A6A   11 05 00               LD   DE,5   
3A6D   B7                     OR   A   
3A6E   ED 52                  SBC   HL,DE   
3A70   7D                     LD   A,L   
3A71   B4                     OR   H   
3A72   CA DB 3A               JP   Z,expectM_3186S127   
3A75   CD 4C 10               CALL   printStr   
3A78   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3A8D   CD 4C 10               CALL   printStr   
3A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A9F   21 05 00               LD   hl,5   
3AA2   E5                     PUSH   hl   
3AA3   E5                     PUSH   hl   
3AA4   CD 49 11               CALL   run   
3AA7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3AB3   CD 4C 10               CALL   printStr   
3AB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC3   E1                     POP   hl   
3AC4   E5                     PUSH   hl   
3AC5   E5                     PUSH   hl   
3AC6   CD 49 11               CALL   run   
3AC9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3ADA   76                     HALT      
3ADB                EXPECTM_3186S127:      
3ADB   E1                     POP   HL   
3ADC                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3ADC   31 00 5D               LD   SP,STACK   
3ADF   CD 80 10               CALL   coldInit   
3AE2   CD 94 5B               CALL   execStr   
3AE5   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3AF5   E1                     POP   HL   
3AF6   E5                     PUSH   HL   
3AF7   11 01 00               LD   DE,1   
3AFA   B7                     OR   A   
3AFB   ED 52                  SBC   HL,DE   
3AFD   7D                     LD   A,L   
3AFE   B4                     OR   H   
3AFF   CA 69 3B               JP   Z,expectM_3187S128   
3B02   CD 4C 10               CALL   printStr   
3B05   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3B1B   CD 4C 10               CALL   printStr   
3B1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2D   21 01 00               LD   hl,1   
3B30   E5                     PUSH   hl   
3B31   E5                     PUSH   hl   
3B32   CD 49 11               CALL   run   
3B35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B41   CD 4C 10               CALL   printStr   
3B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B51   E1                     POP   hl   
3B52   E5                     PUSH   hl   
3B53   E5                     PUSH   hl   
3B54   CD 49 11               CALL   run   
3B57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B68   76                     HALT      
3B69                EXPECTM_3187S128:      
3B69   E1                     POP   HL   
3B6A                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3B6A   31 00 5D               LD   SP,STACK   
3B6D   CD 80 10               CALL   coldInit   
3B70   CD 94 5B               CALL   execStr   
3B73   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3B86   E1                     POP   HL   
3B87   E5                     PUSH   HL   
3B88   11 07 00               LD   DE,7   
3B8B   B7                     OR   A   
3B8C   ED 52                  SBC   HL,DE   
3B8E   7D                     LD   A,L   
3B8F   B4                     OR   H   
3B90   CA FD 3B               JP   Z,expectM_3188S129   
3B93   CD 4C 10               CALL   printStr   
3B96   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3BAF   CD 4C 10               CALL   printStr   
3BB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BC1   21 07 00               LD   hl,7   
3BC4   E5                     PUSH   hl   
3BC5   E5                     PUSH   hl   
3BC6   CD 49 11               CALL   run   
3BC9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3BD5   CD 4C 10               CALL   printStr   
3BD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE5   E1                     POP   hl   
3BE6   E5                     PUSH   hl   
3BE7   E5                     PUSH   hl   
3BE8   CD 49 11               CALL   run   
3BEB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3BFC   76                     HALT      
3BFD                EXPECTM_3188S129:      
3BFD   E1                     POP   HL   
3BFE                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3BFE   31 00 5D               LD   SP,STACK   
3C01   CD 80 10               CALL   coldInit   
3C04   CD 94 5B               CALL   execStr   
3C07   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3C1C   E1                     POP   HL   
3C1D   E5                     PUSH   HL   
3C1E   11 06 00               LD   DE,6   
3C21   B7                     OR   A   
3C22   ED 52                  SBC   HL,DE   
3C24   7D                     LD   A,L   
3C25   B4                     OR   H   
3C26   CA 95 3C               JP   Z,expectM_3189S130   
3C29   CD 4C 10               CALL   printStr   
3C2C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3C47   CD 4C 10               CALL   printStr   
3C4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C59   21 06 00               LD   hl,6   
3C5C   E5                     PUSH   hl   
3C5D   E5                     PUSH   hl   
3C5E   CD 49 11               CALL   run   
3C61   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C6D   CD 4C 10               CALL   printStr   
3C70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C7D   E1                     POP   hl   
3C7E   E5                     PUSH   hl   
3C7F   E5                     PUSH   hl   
3C80   CD 49 11               CALL   run   
3C83   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C94   76                     HALT      
3C95                EXPECTM_3189S130:      
3C95   E1                     POP   HL   
3C96                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3C96   31 00 5D               LD   SP,STACK   
3C99   CD 80 10               CALL   coldInit   
3C9C   CD 94 5B               CALL   execStr   
3C9F   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3CAD   E1                     POP   HL   
3CAE   E5                     PUSH   HL   
3CAF   11 02 00               LD   DE,2   
3CB2   B7                     OR   A   
3CB3   ED 52                  SBC   HL,DE   
3CB5   7D                     LD   A,L   
3CB6   B4                     OR   H   
3CB7   CA 1F 3D               JP   Z,expectM_3190S131   
3CBA   CD 4C 10               CALL   printStr   
3CBD   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3CD1   CD 4C 10               CALL   printStr   
3CD4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CE3   21 02 00               LD   hl,2   
3CE6   E5                     PUSH   hl   
3CE7   E5                     PUSH   hl   
3CE8   CD 49 11               CALL   run   
3CEB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3CF7   CD 4C 10               CALL   printStr   
3CFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D07   E1                     POP   hl   
3D08   E5                     PUSH   hl   
3D09   E5                     PUSH   hl   
3D0A   CD 49 11               CALL   run   
3D0D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D1E   76                     HALT      
3D1F                EXPECTM_3190S131:      
3D1F   E1                     POP   HL   
3D20                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3D20   31 00 5D               LD   SP,STACK   
3D23   CD 80 10               CALL   coldInit   
3D26   CD 94 5B               CALL   execStr   
3D29   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3D3A   E1                     POP   HL   
3D3B   E5                     PUSH   HL   
3D3C   11 01 00               LD   DE,1   
3D3F   B7                     OR   A   
3D40   ED 52                  SBC   HL,DE   
3D42   7D                     LD   A,L   
3D43   B4                     OR   H   
3D44   CA AF 3D               JP   Z,expectM_3191S132   
3D47   CD 4C 10               CALL   printStr   
3D4A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3D61   CD 4C 10               CALL   printStr   
3D64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D73   21 01 00               LD   hl,1   
3D76   E5                     PUSH   hl   
3D77   E5                     PUSH   hl   
3D78   CD 49 11               CALL   run   
3D7B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D87   CD 4C 10               CALL   printStr   
3D8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D97   E1                     POP   hl   
3D98   E5                     PUSH   hl   
3D99   E5                     PUSH   hl   
3D9A   CD 49 11               CALL   run   
3D9D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3DAE   76                     HALT      
3DAF                EXPECTM_3191S132:      
3DAF   E1                     POP   HL   
3DB0                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3DB0   31 00 5D               LD   SP,STACK   
3DB3   CD 80 10               CALL   coldInit   
3DB6   CD 94 5B               CALL   execStr   
3DB9   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3DCB   E1                     POP   HL   
3DCC   E5                     PUSH   HL   
3DCD   11 02 00               LD   DE,2   
3DD0   B7                     OR   A   
3DD1   ED 52                  SBC   HL,DE   
3DD3   7D                     LD   A,L   
3DD4   B4                     OR   H   
3DD5   CA 41 3E               JP   Z,expectM_3192S133   
3DD8   CD 4C 10               CALL   printStr   
3DDB   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3DF3   CD 4C 10               CALL   printStr   
3DF6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E05   21 02 00               LD   hl,2   
3E08   E5                     PUSH   hl   
3E09   E5                     PUSH   hl   
3E0A   CD 49 11               CALL   run   
3E0D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E19   CD 4C 10               CALL   printStr   
3E1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E29   E1                     POP   hl   
3E2A   E5                     PUSH   hl   
3E2B   E5                     PUSH   hl   
3E2C   CD 49 11               CALL   run   
3E2F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E40   76                     HALT      
3E41                EXPECTM_3192S133:      
3E41   E1                     POP   HL   
3E42                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3E42   31 00 5D               LD   SP,STACK   
3E45   CD 80 10               CALL   coldInit   
3E48   CD 94 5B               CALL   execStr   
3E4B   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3E5E   E1                     POP   HL   
3E5F   E5                     PUSH   HL   
3E60   11 02 00               LD   DE,2   
3E63   B7                     OR   A   
3E64   ED 52                  SBC   HL,DE   
3E66   7D                     LD   A,L   
3E67   B4                     OR   H   
3E68   CA D5 3E               JP   Z,expectM_3193S134   
3E6B   CD 4C 10               CALL   printStr   
3E6E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3E87   CD 4C 10               CALL   printStr   
3E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E99   21 02 00               LD   hl,2   
3E9C   E5                     PUSH   hl   
3E9D   E5                     PUSH   hl   
3E9E   CD 49 11               CALL   run   
3EA1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3EAD   CD 4C 10               CALL   printStr   
3EB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EBD   E1                     POP   hl   
3EBE   E5                     PUSH   hl   
3EBF   E5                     PUSH   hl   
3EC0   CD 49 11               CALL   run   
3EC3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3ED4   76                     HALT      
3ED5                EXPECTM_3193S134:      
3ED5   E1                     POP   HL   
3ED6                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3ED6   31 00 5D               LD   SP,STACK   
3ED9   CD 80 10               CALL   coldInit   
3EDC   CD 94 5B               CALL   execStr   
3EDF   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3EF1   E1                     POP   HL   
3EF2   E5                     PUSH   HL   
3EF3   11 02 00               LD   DE,2   
3EF6   B7                     OR   A   
3EF7   ED 52                  SBC   HL,DE   
3EF9   7D                     LD   A,L   
3EFA   B4                     OR   H   
3EFB   CA 67 3F               JP   Z,expectM_3194S135   
3EFE   CD 4C 10               CALL   printStr   
3F01   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3F19   CD 4C 10               CALL   printStr   
3F1C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F2B   21 02 00               LD   hl,2   
3F2E   E5                     PUSH   hl   
3F2F   E5                     PUSH   hl   
3F30   CD 49 11               CALL   run   
3F33   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F3F   CD 4C 10               CALL   printStr   
3F42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F4F   E1                     POP   hl   
3F50   E5                     PUSH   hl   
3F51   E5                     PUSH   hl   
3F52   CD 49 11               CALL   run   
3F55   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F66   76                     HALT      
3F67                EXPECTM_3194S135:      
3F67   E1                     POP   HL   
3F68                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3F68   31 00 5D               LD   SP,STACK   
3F6B   CD 80 10               CALL   coldInit   
3F6E   CD 94 5B               CALL   execStr   
3F71   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3F8A   E1                     POP   HL   
3F8B   E5                     PUSH   HL   
3F8C   11 05 00               LD   DE,5   
3F8F   B7                     OR   A   
3F90   ED 52                  SBC   HL,DE   
3F92   7D                     LD   A,L   
3F93   B4                     OR   H   
3F94   CA 07 40               JP   Z,expectM_3195S136   
3F97   CD 4C 10               CALL   printStr   
3F9A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3FB9   CD 4C 10               CALL   printStr   
3FBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FCB   21 05 00               LD   hl,5   
3FCE   E5                     PUSH   hl   
3FCF   E5                     PUSH   hl   
3FD0   CD 49 11               CALL   run   
3FD3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3FDF   CD 4C 10               CALL   printStr   
3FE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FEF   E1                     POP   hl   
3FF0   E5                     PUSH   hl   
3FF1   E5                     PUSH   hl   
3FF2   CD 49 11               CALL   run   
3FF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4006   76                     HALT      
4007                EXPECTM_3195S136:      
4007   E1                     POP   HL   
4008                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
4008   31 00 5D               LD   SP,STACK   
400B   CD 80 10               CALL   coldInit   
400E   CD 94 5B               CALL   execStr   
4011   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
4021   E1                     POP   HL   
4022   E5                     PUSH   HL   
4023   11 02 00               LD   DE,2   
4026   B7                     OR   A   
4027   ED 52                  SBC   HL,DE   
4029   7D                     LD   A,L   
402A   B4                     OR   H   
402B   CA 95 40               JP   Z,expectM_3196S137   
402E   CD 4C 10               CALL   printStr   
4031   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
4047   CD 4C 10               CALL   printStr   
404A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4059   21 02 00               LD   hl,2   
405C   E5                     PUSH   hl   
405D   E5                     PUSH   hl   
405E   CD 49 11               CALL   run   
4061   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
406D   CD 4C 10               CALL   printStr   
4070   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407D   E1                     POP   hl   
407E   E5                     PUSH   hl   
407F   E5                     PUSH   hl   
4080   CD 49 11               CALL   run   
4083   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4094   76                     HALT      
4095                EXPECTM_3196S137:      
4095   E1                     POP   HL   
4096                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
4096   31 00 5D               LD   SP,STACK   
4099   CD 80 10               CALL   coldInit   
409C   CD 94 5B               CALL   execStr   
409F   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
40B6   E1                     POP   HL   
40B7   E5                     PUSH   HL   
40B8   11 64 00               LD   DE,100   
40BB   B7                     OR   A   
40BC   ED 52                  SBC   HL,DE   
40BE   7D                     LD   A,L   
40BF   B4                     OR   H   
40C0   CA 31 41               JP   Z,expectM_3197S138   
40C3   CD 4C 10               CALL   printStr   
40C6   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
40E3   CD 4C 10               CALL   printStr   
40E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40F5   21 64 00               LD   hl,100   
40F8   E5                     PUSH   hl   
40F9   E5                     PUSH   hl   
40FA   CD 49 11               CALL   run   
40FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4109   CD 4C 10               CALL   printStr   
410C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4119   E1                     POP   hl   
411A   E5                     PUSH   hl   
411B   E5                     PUSH   hl   
411C   CD 49 11               CALL   run   
411F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4130   76                     HALT      
4131                EXPECTM_3197S138:      
4131   E1                     POP   HL   
4132                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
4132   31 00 5D               LD   SP,STACK   
4135   CD 80 10               CALL   coldInit   
4138   CD 94 5B               CALL   execStr   
413B   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
4153   E1                     POP   HL   
4154   E5                     PUSH   HL   
4155   11 01 00               LD   DE,1   
4158   B7                     OR   A   
4159   ED 52                  SBC   HL,DE   
415B   7D                     LD   A,L   
415C   B4                     OR   H   
415D   CA CF 41               JP   Z,expectM_3198S139   
4160   CD 4C 10               CALL   printStr   
4163   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
4181   CD 4C 10               CALL   printStr   
4184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4193   21 01 00               LD   hl,1   
4196   E5                     PUSH   hl   
4197   E5                     PUSH   hl   
4198   CD 49 11               CALL   run   
419B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
41A7   CD 4C 10               CALL   printStr   
41AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41B7   E1                     POP   hl   
41B8   E5                     PUSH   hl   
41B9   E5                     PUSH   hl   
41BA   CD 49 11               CALL   run   
41BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
41CE   76                     HALT      
41CF                EXPECTM_3198S139:      
41CF   E1                     POP   HL   
41D0                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
41D0   31 00 5D               LD   SP,STACK   
41D3   CD 80 10               CALL   coldInit   
41D6   CD 94 5B               CALL   execStr   
41D9   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
41F2   E1                     POP   HL   
41F3   E5                     PUSH   HL   
41F4   11 02 00               LD   DE,2   
41F7   B7                     OR   A   
41F8   ED 52                  SBC   HL,DE   
41FA   7D                     LD   A,L   
41FB   B4                     OR   H   
41FC   CA 6F 42               JP   Z,expectM_3199S140   
41FF   CD 4C 10               CALL   printStr   
4202   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
4221   CD 4C 10               CALL   printStr   
4224   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4233   21 02 00               LD   hl,2   
4236   E5                     PUSH   hl   
4237   E5                     PUSH   hl   
4238   CD 49 11               CALL   run   
423B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4247   CD 4C 10               CALL   printStr   
424A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4257   E1                     POP   hl   
4258   E5                     PUSH   hl   
4259   E5                     PUSH   hl   
425A   CD 49 11               CALL   run   
425D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
426E   76                     HALT      
426F                EXPECTM_3199S140:      
426F   E1                     POP   HL   
4270                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
4270   31 00 5D               LD   SP,STACK   
4273   CD 80 10               CALL   coldInit   
4276   CD 94 5B               CALL   execStr   
4279   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
4298   E1                     POP   HL   
4299   E5                     PUSH   HL   
429A   11 0B 00               LD   DE,11   
429D   B7                     OR   A   
429E   ED 52                  SBC   HL,DE   
42A0   7D                     LD   A,L   
42A1   B4                     OR   H   
42A2   CA 1B 43               JP   Z,expectM_3200S141   
42A5   CD 4C 10               CALL   printStr   
42A8   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
42CD   CD 4C 10               CALL   printStr   
42D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42DF   21 0B 00               LD   hl,11   
42E2   E5                     PUSH   hl   
42E3   E5                     PUSH   hl   
42E4   CD 49 11               CALL   run   
42E7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
42F3   CD 4C 10               CALL   printStr   
42F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4303   E1                     POP   hl   
4304   E5                     PUSH   hl   
4305   E5                     PUSH   hl   
4306   CD 49 11               CALL   run   
4309   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
431A   76                     HALT      
431B                EXPECTM_3200S141:      
431B   E1                     POP   HL   
431C                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
431C   31 00 5D               LD   SP,STACK   
431F   CD 80 10               CALL   coldInit   
4322   CD 94 5B               CALL   execStr   
4325   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
4344   E1                     POP   HL   
4345   E5                     PUSH   HL   
4346   11 15 00               LD   DE,21   
4349   B7                     OR   A   
434A   ED 52                  SBC   HL,DE   
434C   7D                     LD   A,L   
434D   B4                     OR   H   
434E   CA C7 43               JP   Z,expectM_3201S142   
4351   CD 4C 10               CALL   printStr   
4354   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
4379   CD 4C 10               CALL   printStr   
437C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
438B   21 15 00               LD   hl,21   
438E   E5                     PUSH   hl   
438F   E5                     PUSH   hl   
4390   CD 49 11               CALL   run   
4393   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
439F   CD 4C 10               CALL   printStr   
43A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AF   E1                     POP   hl   
43B0   E5                     PUSH   hl   
43B1   E5                     PUSH   hl   
43B2   CD 49 11               CALL   run   
43B5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
43C6   76                     HALT      
43C7                EXPECTM_3201S142:      
43C7   E1                     POP   HL   
43C8                          ;*Macro unroll:  test "[10 20 30] 1;", 20
43C8   31 00 5D               LD   SP,STACK   
43CB   CD 80 10               CALL   coldInit   
43CE   CD 94 5B               CALL   execStr   
43D1   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
43DF   E1                     POP   HL   
43E0   E5                     PUSH   HL   
43E1   11 14 00               LD   DE,20   
43E4   B7                     OR   A   
43E5   ED 52                  SBC   HL,DE   
43E7   7D                     LD   A,L   
43E8   B4                     OR   H   
43E9   CA 51 44               JP   Z,expectM_3202S143   
43EC   CD 4C 10               CALL   printStr   
43EF   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
4403   CD 4C 10               CALL   printStr   
4406   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4415   21 14 00               LD   hl,20   
4418   E5                     PUSH   hl   
4419   E5                     PUSH   hl   
441A   CD 49 11               CALL   run   
441D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4429   CD 4C 10               CALL   printStr   
442C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4439   E1                     POP   hl   
443A   E5                     PUSH   hl   
443B   E5                     PUSH   hl   
443C   CD 49 11               CALL   run   
443F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4450   76                     HALT      
4451                EXPECTM_3202S143:      
4451   E1                     POP   HL   
4452                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
4452   31 00 5D               LD   SP,STACK   
4455   CD 80 10               CALL   coldInit   
4458   CD 94 5B               CALL   execStr   
445B   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
446E   E1                     POP   HL   
446F   E5                     PUSH   HL   
4470   11 04 00               LD   DE,4   
4473   B7                     OR   A   
4474   ED 52                  SBC   HL,DE   
4476   7D                     LD   A,L   
4477   B4                     OR   H   
4478   CA E5 44               JP   Z,expectM_3203S144   
447B   CD 4C 10               CALL   printStr   
447E   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
4497   CD 4C 10               CALL   printStr   
449A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A9   21 04 00               LD   hl,4   
44AC   E5                     PUSH   hl   
44AD   E5                     PUSH   hl   
44AE   CD 49 11               CALL   run   
44B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
44BD   CD 4C 10               CALL   printStr   
44C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44CD   E1                     POP   hl   
44CE   E5                     PUSH   hl   
44CF   E5                     PUSH   hl   
44D0   CD 49 11               CALL   run   
44D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
44E4   76                     HALT      
44E5                EXPECTM_3203S144:      
44E5   E1                     POP   HL   
44E6                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
44E6   31 00 5D               LD   SP,STACK   
44E9   CD 80 10               CALL   coldInit   
44EC   CD 94 5B               CALL   execStr   
44EF   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
44FF   E1                     POP   HL   
4500   E5                     PUSH   HL   
4501   11 02 00               LD   DE,2   
4504   B7                     OR   A   
4505   ED 52                  SBC   HL,DE   
4507   7D                     LD   A,L   
4508   B4                     OR   H   
4509   CA 73 45               JP   Z,expectM_3204S145   
450C   CD 4C 10               CALL   printStr   
450F   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
4525   CD 4C 10               CALL   printStr   
4528   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4537   21 02 00               LD   hl,2   
453A   E5                     PUSH   hl   
453B   E5                     PUSH   hl   
453C   CD 49 11               CALL   run   
453F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
454B   CD 4C 10               CALL   printStr   
454E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455B   E1                     POP   hl   
455C   E5                     PUSH   hl   
455D   E5                     PUSH   hl   
455E   CD 49 11               CALL   run   
4561   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4572   76                     HALT      
4573                EXPECTM_3204S145:      
4573   E1                     POP   HL   
4574                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
4574   31 00 5D               LD   SP,STACK   
4577   CD 80 10               CALL   coldInit   
457A   CD 94 5B               CALL   execStr   
457D   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
4590   E1                     POP   HL   
4591   E5                     PUSH   HL   
4592   11 42 00               LD   DE,66   
4595   B7                     OR   A   
4596   ED 52                  SBC   HL,DE   
4598   7D                     LD   A,L   
4599   B4                     OR   H   
459A   CA 07 46               JP   Z,expectM_3205S146   
459D   CD 4C 10               CALL   printStr   
45A0   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
45B9   CD 4C 10               CALL   printStr   
45BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45CB   21 42 00               LD   hl,66   
45CE   E5                     PUSH   hl   
45CF   E5                     PUSH   hl   
45D0   CD 49 11               CALL   run   
45D3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45DF   CD 4C 10               CALL   printStr   
45E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45EF   E1                     POP   hl   
45F0   E5                     PUSH   hl   
45F1   E5                     PUSH   hl   
45F2   CD 49 11               CALL   run   
45F5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4606   76                     HALT      
4607                EXPECTM_3205S146:      
4607   E1                     POP   HL   
4608                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
4608   31 00 5D               LD   SP,STACK   
460B   CD 80 10               CALL   coldInit   
460E   CD 94 5B               CALL   execStr   
4611   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4625   E1                     POP   HL   
4626   E5                     PUSH   HL   
4627   11 0A 00               LD   DE,10   
462A   B7                     OR   A   
462B   ED 52                  SBC   HL,DE   
462D   7D                     LD   A,L   
462E   B4                     OR   H   
462F   CA 9D 46               JP   Z,expectM_3206S147   
4632   CD 4C 10               CALL   printStr   
4635   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
464F   CD 4C 10               CALL   printStr   
4652   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4661   21 0A 00               LD   hl,10   
4664   E5                     PUSH   hl   
4665   E5                     PUSH   hl   
4666   CD 49 11               CALL   run   
4669   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4675   CD 4C 10               CALL   printStr   
4678   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4685   E1                     POP   hl   
4686   E5                     PUSH   hl   
4687   E5                     PUSH   hl   
4688   CD 49 11               CALL   run   
468B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
469C   76                     HALT      
469D                EXPECTM_3206S147:      
469D   E1                     POP   HL   
469E                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
469E   31 00 5D               LD   SP,STACK   
46A1   CD 80 10               CALL   coldInit   
46A4   CD 94 5B               CALL   execStr   
46A7   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
46C2   E1                     POP   HL   
46C3   E5                     PUSH   HL   
46C4   11 0A 00               LD   DE,10   
46C7   B7                     OR   A   
46C8   ED 52                  SBC   HL,DE   
46CA   7D                     LD   A,L   
46CB   B4                     OR   H   
46CC   CA 41 47               JP   Z,expectM_3207S148   
46CF   CD 4C 10               CALL   printStr   
46D2   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
46F3   CD 4C 10               CALL   printStr   
46F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4705   21 0A 00               LD   hl,10   
4708   E5                     PUSH   hl   
4709   E5                     PUSH   hl   
470A   CD 49 11               CALL   run   
470D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4719   CD 4C 10               CALL   printStr   
471C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4729   E1                     POP   hl   
472A   E5                     PUSH   hl   
472B   E5                     PUSH   hl   
472C   CD 49 11               CALL   run   
472F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4740   76                     HALT      
4741                EXPECTM_3207S148:      
4741   E1                     POP   HL   
4742                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4742   31 00 5D               LD   SP,STACK   
4745   CD 80 10               CALL   coldInit   
4748   CD 94 5B               CALL   execStr   
474B   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
476A   E1                     POP   HL   
476B   E5                     PUSH   HL   
476C   11 0A 00               LD   DE,10   
476F   B7                     OR   A   
4770   ED 52                  SBC   HL,DE   
4772   7D                     LD   A,L   
4773   B4                     OR   H   
4774   CA ED 47               JP   Z,expectM_3208S149   
4777   CD 4C 10               CALL   printStr   
477A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
479F   CD 4C 10               CALL   printStr   
47A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47B1   21 0A 00               LD   hl,10   
47B4   E5                     PUSH   hl   
47B5   E5                     PUSH   hl   
47B6   CD 49 11               CALL   run   
47B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
47C5   CD 4C 10               CALL   printStr   
47C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D5   E1                     POP   hl   
47D6   E5                     PUSH   hl   
47D7   E5                     PUSH   hl   
47D8   CD 49 11               CALL   run   
47DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
47EC   76                     HALT      
47ED                EXPECTM_3208S149:      
47ED   E1                     POP   HL   
47EE                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
47EE   31 00 5D               LD   SP,STACK   
47F1   CD 80 10               CALL   coldInit   
47F4   CD 94 5B               CALL   execStr   
47F7   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4816   E1                     POP   HL   
4817   E5                     PUSH   HL   
4818   11 14 00               LD   DE,20   
481B   B7                     OR   A   
481C   ED 52                  SBC   HL,DE   
481E   7D                     LD   A,L   
481F   B4                     OR   H   
4820   CA 99 48               JP   Z,expectM_3209S150   
4823   CD 4C 10               CALL   printStr   
4826   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
484B   CD 4C 10               CALL   printStr   
484E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
485D   21 14 00               LD   hl,20   
4860   E5                     PUSH   hl   
4861   E5                     PUSH   hl   
4862   CD 49 11               CALL   run   
4865   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4871   CD 4C 10               CALL   printStr   
4874   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4881   E1                     POP   hl   
4882   E5                     PUSH   hl   
4883   E5                     PUSH   hl   
4884   CD 49 11               CALL   run   
4887   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4898   76                     HALT      
4899                EXPECTM_3209S150:      
4899   E1                     POP   HL   
489A                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
489A   31 00 5D               LD   SP,STACK   
489D   CD 80 10               CALL   coldInit   
48A0   CD 94 5B               CALL   execStr   
48A3   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
48BC   E1                     POP   HL   
48BD   E5                     PUSH   HL   
48BE   11 06 00               LD   DE,6   
48C1   B7                     OR   A   
48C2   ED 52                  SBC   HL,DE   
48C4   7D                     LD   A,L   
48C5   B4                     OR   H   
48C6   CA 39 49               JP   Z,expectM_3210S151   
48C9   CD 4C 10               CALL   printStr   
48CC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
48EB   CD 4C 10               CALL   printStr   
48EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48FD   21 06 00               LD   hl,6   
4900   E5                     PUSH   hl   
4901   E5                     PUSH   hl   
4902   CD 49 11               CALL   run   
4905   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4911   CD 4C 10               CALL   printStr   
4914   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4921   E1                     POP   hl   
4922   E5                     PUSH   hl   
4923   E5                     PUSH   hl   
4924   CD 49 11               CALL   run   
4927   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4938   76                     HALT      
4939                EXPECTM_3210S151:      
4939   E1                     POP   HL   
493A                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
493A   31 00 5D               LD   SP,STACK   
493D   CD 80 10               CALL   coldInit   
4940   CD 94 5B               CALL   execStr   
4943   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
495F   E1                     POP   HL   
4960   E5                     PUSH   HL   
4961   11 02 00               LD   DE,2   
4964   B7                     OR   A   
4965   ED 52                  SBC   HL,DE   
4967   7D                     LD   A,L   
4968   B4                     OR   H   
4969   CA DF 49               JP   Z,expectM_3211S152   
496C   CD 4C 10               CALL   printStr   
496F   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
4991   CD 4C 10               CALL   printStr   
4994   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49A3   21 02 00               LD   hl,2   
49A6   E5                     PUSH   hl   
49A7   E5                     PUSH   hl   
49A8   CD 49 11               CALL   run   
49AB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
49B7   CD 4C 10               CALL   printStr   
49BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49C7   E1                     POP   hl   
49C8   E5                     PUSH   hl   
49C9   E5                     PUSH   hl   
49CA   CD 49 11               CALL   run   
49CD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
49DE   76                     HALT      
49DF                EXPECTM_3211S152:      
49DF   E1                     POP   HL   
49E0                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
49E0   31 00 5D               LD   SP,STACK   
49E3   CD 80 10               CALL   coldInit   
49E6   CD 94 5B               CALL   execStr   
49E9   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
4A10   E1                     POP   HL   
4A11   E5                     PUSH   HL   
4A12   11 0A 00               LD   DE,10   
4A15   B7                     OR   A   
4A16   ED 52                  SBC   HL,DE   
4A18   7D                     LD   A,L   
4A19   B4                     OR   H   
4A1A   CA 9B 4A               JP   Z,expectM_3212S153   
4A1D   CD 4C 10               CALL   printStr   
4A20   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
4A4D   CD 4C 10               CALL   printStr   
4A50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A5F   21 0A 00               LD   hl,10   
4A62   E5                     PUSH   hl   
4A63   E5                     PUSH   hl   
4A64   CD 49 11               CALL   run   
4A67   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A73   CD 4C 10               CALL   printStr   
4A76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A83   E1                     POP   hl   
4A84   E5                     PUSH   hl   
4A85   E5                     PUSH   hl   
4A86   CD 49 11               CALL   run   
4A89   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A9A   76                     HALT      
4A9B                EXPECTM_3212S153:      
4A9B   E1                     POP   HL   
4A9C                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
4A9C   31 00 5D               LD   SP,STACK   
4A9F   CD 80 10               CALL   coldInit   
4AA2   CD 94 5B               CALL   execStr   
4AA5   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4AC9   E1                     POP   HL   
4ACA   E5                     PUSH   HL   
4ACB   11 0A 00               LD   DE,10   
4ACE   B7                     OR   A   
4ACF   ED 52                  SBC   HL,DE   
4AD1   7D                     LD   A,L   
4AD2   B4                     OR   H   
4AD3   CA 51 4B               JP   Z,expectM_3213S154   
4AD6   CD 4C 10               CALL   printStr   
4AD9   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
4B03   CD 4C 10               CALL   printStr   
4B06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B15   21 0A 00               LD   hl,10   
4B18   E5                     PUSH   hl   
4B19   E5                     PUSH   hl   
4B1A   CD 49 11               CALL   run   
4B1D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B29   CD 4C 10               CALL   printStr   
4B2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B39   E1                     POP   hl   
4B3A   E5                     PUSH   hl   
4B3B   E5                     PUSH   hl   
4B3C   CD 49 11               CALL   run   
4B3F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4B50   76                     HALT      
4B51                EXPECTM_3213S154:      
4B51   E1                     POP   HL   
4B52                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
4B52   31 00 5D               LD   SP,STACK   
4B55   CD 80 10               CALL   coldInit   
4B58   CD 94 5B               CALL   execStr   
4B5B   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4B87   E1                     POP   HL   
4B88   E5                     PUSH   HL   
4B89   11 0C 00               LD   DE,12   
4B8C   B7                     OR   A   
4B8D   ED 52                  SBC   HL,DE   
4B8F   7D                     LD   A,L   
4B90   B4                     OR   H   
4B91   CA 17 4C               JP   Z,expectM_3214S155   
4B94   CD 4C 10               CALL   printStr   
4B97   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4BC9   CD 4C 10               CALL   printStr   
4BCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BDB   21 0C 00               LD   hl,12   
4BDE   E5                     PUSH   hl   
4BDF   E5                     PUSH   hl   
4BE0   CD 49 11               CALL   run   
4BE3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4BEF   CD 4C 10               CALL   printStr   
4BF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BFF   E1                     POP   hl   
4C00   E5                     PUSH   hl   
4C01   E5                     PUSH   hl   
4C02   CD 49 11               CALL   run   
4C05   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4C16   76                     HALT      
4C17                EXPECTM_3214S155:      
4C17   E1                     POP   HL   
4C18                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
4C18   31 00 5D               LD   SP,STACK   
4C1B   CD 80 10               CALL   coldInit   
4C1E   CD 94 5B               CALL   execStr   
4C21   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
4C4D   E1                     POP   HL   
4C4E   E5                     PUSH   HL   
4C4F   11 06 00               LD   DE,6   
4C52   B7                     OR   A   
4C53   ED 52                  SBC   HL,DE   
4C55   7D                     LD   A,L   
4C56   B4                     OR   H   
4C57   CA DD 4C               JP   Z,expectM_3215S156   
4C5A   CD 4C 10               CALL   printStr   
4C5D   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4C8F   CD 4C 10               CALL   printStr   
4C92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CA1   21 06 00               LD   hl,6   
4CA4   E5                     PUSH   hl   
4CA5   E5                     PUSH   hl   
4CA6   CD 49 11               CALL   run   
4CA9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4CB5   CD 4C 10               CALL   printStr   
4CB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CC5   E1                     POP   hl   
4CC6   E5                     PUSH   hl   
4CC7   E5                     PUSH   hl   
4CC8   CD 49 11               CALL   run   
4CCB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4CDC   76                     HALT      
4CDD                EXPECTM_3215S156:      
4CDD   E1                     POP   HL   
4CDE                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
4CDE   31 00 5D               LD   SP,STACK   
4CE1   CD 80 10               CALL   coldInit   
4CE4   CD 94 5B               CALL   execStr   
4CE7   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
4CFE   E1                     POP   HL   
4CFF   E5                     PUSH   HL   
4D00   11 03 00               LD   DE,3   
4D03   B7                     OR   A   
4D04   ED 52                  SBC   HL,DE   
4D06   7D                     LD   A,L   
4D07   B4                     OR   H   
4D08   CA 79 4D               JP   Z,expectM_3216S157   
4D0B   CD 4C 10               CALL   printStr   
4D0E   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
4D2B   CD 4C 10               CALL   printStr   
4D2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D3D   21 03 00               LD   hl,3   
4D40   E5                     PUSH   hl   
4D41   E5                     PUSH   hl   
4D42   CD 49 11               CALL   run   
4D45   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4D51   CD 4C 10               CALL   printStr   
4D54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D61   E1                     POP   hl   
4D62   E5                     PUSH   hl   
4D63   E5                     PUSH   hl   
4D64   CD 49 11               CALL   run   
4D67   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D78   76                     HALT      
4D79                EXPECTM_3216S157:      
4D79   E1                     POP   HL   
4D7A                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4D7A   31 00 5D               LD   SP,STACK   
4D7D   CD 80 10               CALL   coldInit   
4D80   CD 94 5B               CALL   execStr   
4D83   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4D9A   E1                     POP   HL   
4D9B   E5                     PUSH   HL   
4D9C   11 01 00               LD   DE,1   
4D9F   B7                     OR   A   
4DA0   ED 52                  SBC   HL,DE   
4DA2   7D                     LD   A,L   
4DA3   B4                     OR   H   
4DA4   CA 15 4E               JP   Z,expectM_3217S158   
4DA7   CD 4C 10               CALL   printStr   
4DAA   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4DC7   CD 4C 10               CALL   printStr   
4DCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DD9   21 01 00               LD   hl,1   
4DDC   E5                     PUSH   hl   
4DDD   E5                     PUSH   hl   
4DDE   CD 49 11               CALL   run   
4DE1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DED   CD 4C 10               CALL   printStr   
4DF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DFD   E1                     POP   hl   
4DFE   E5                     PUSH   hl   
4DFF   E5                     PUSH   hl   
4E00   CD 49 11               CALL   run   
4E03   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E14   76                     HALT      
4E15                EXPECTM_3217S158:      
4E15   E1                     POP   HL   
4E16                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4E16   31 00 5D               LD   SP,STACK   
4E19   CD 80 10               CALL   coldInit   
4E1C   CD 94 5B               CALL   execStr   
4E1F   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4E2B   E1                     POP   HL   
4E2C   E5                     PUSH   HL   
4E2D   11 00 00               LD   DE,NUL   
4E30   B7                     OR   A   
4E31   ED 52                  SBC   HL,DE   
4E33   7D                     LD   A,L   
4E34   B4                     OR   H   
4E35   CA 9B 4E               JP   Z,expectM_3218S159   
4E38   CD 4C 10               CALL   printStr   
4E3B   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4E4D   CD 4C 10               CALL   printStr   
4E50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E5F   21 00 00               LD   hl,NUL   
4E62   E5                     PUSH   hl   
4E63   E5                     PUSH   hl   
4E64   CD 49 11               CALL   run   
4E67   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E73   CD 4C 10               CALL   printStr   
4E76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E83   E1                     POP   hl   
4E84   E5                     PUSH   hl   
4E85   E5                     PUSH   hl   
4E86   CD 49 11               CALL   run   
4E89   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E9A   76                     HALT      
4E9B                EXPECTM_3218S159:      
4E9B   E1                     POP   HL   
4E9C                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4E9C   31 00 5D               LD   SP,STACK   
4E9F   CD 80 10               CALL   coldInit   
4EA2   CD 94 5B               CALL   execStr   
4EA5   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4EB1   E1                     POP   HL   
4EB2   E5                     PUSH   HL   
4EB3   11 00 00               LD   DE,NUL   
4EB6   B7                     OR   A   
4EB7   ED 52                  SBC   HL,DE   
4EB9   7D                     LD   A,L   
4EBA   B4                     OR   H   
4EBB   CA 21 4F               JP   Z,expectM_3219S160   
4EBE   CD 4C 10               CALL   printStr   
4EC1   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4ED3   CD 4C 10               CALL   printStr   
4ED6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EE5   21 00 00               LD   hl,NUL   
4EE8   E5                     PUSH   hl   
4EE9   E5                     PUSH   hl   
4EEA   CD 49 11               CALL   run   
4EED   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4EF9   CD 4C 10               CALL   printStr   
4EFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F09   E1                     POP   hl   
4F0A   E5                     PUSH   hl   
4F0B   E5                     PUSH   hl   
4F0C   CD 49 11               CALL   run   
4F0F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F20   76                     HALT      
4F21                EXPECTM_3219S160:      
4F21   E1                     POP   HL   
4F22                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4F22   31 00 5D               LD   SP,STACK   
4F25   CD 80 10               CALL   coldInit   
4F28   CD 94 5B               CALL   execStr   
4F2B   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4F37   E1                     POP   HL   
4F38   E5                     PUSH   HL   
4F39   11 00 00               LD   DE,NUL   
4F3C   B7                     OR   A   
4F3D   ED 52                  SBC   HL,DE   
4F3F   7D                     LD   A,L   
4F40   B4                     OR   H   
4F41   CA A7 4F               JP   Z,expectM_3220S161   
4F44   CD 4C 10               CALL   printStr   
4F47   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4F59   CD 4C 10               CALL   printStr   
4F5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F6B   21 00 00               LD   hl,NUL   
4F6E   E5                     PUSH   hl   
4F6F   E5                     PUSH   hl   
4F70   CD 49 11               CALL   run   
4F73   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F7F   CD 4C 10               CALL   printStr   
4F82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F8F   E1                     POP   hl   
4F90   E5                     PUSH   hl   
4F91   E5                     PUSH   hl   
4F92   CD 49 11               CALL   run   
4F95   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4FA6   76                     HALT      
4FA7                EXPECTM_3220S161:      
4FA7   E1                     POP   HL   
4FA8                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4FA8   31 00 5D               LD   SP,STACK   
4FAB   CD 80 10               CALL   coldInit   
4FAE   CD 94 5B               CALL   execStr   
4FB1   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4FBD   E1                     POP   HL   
4FBE   E5                     PUSH   HL   
4FBF   11 00 00               LD   DE,NUL   
4FC2   B7                     OR   A   
4FC3   ED 52                  SBC   HL,DE   
4FC5   7D                     LD   A,L   
4FC6   B4                     OR   H   
4FC7   CA 2D 50               JP   Z,expectM_3221S162   
4FCA   CD 4C 10               CALL   printStr   
4FCD   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4FDF   CD 4C 10               CALL   printStr   
4FE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FF1   21 00 00               LD   hl,NUL   
4FF4   E5                     PUSH   hl   
4FF5   E5                     PUSH   hl   
4FF6   CD 49 11               CALL   run   
4FF9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5005   CD 4C 10               CALL   printStr   
5008   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5015   E1                     POP   hl   
5016   E5                     PUSH   hl   
5017   E5                     PUSH   hl   
5018   CD 49 11               CALL   run   
501B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
502C   76                     HALT      
502D                EXPECTM_3221S162:      
502D   E1                     POP   HL   
502E                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
502E   31 00 5D               LD   SP,STACK   
5031   CD 80 10               CALL   coldInit   
5034   CD 94 5B               CALL   execStr   
5037   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
503F   E1                     POP   HL   
5040   E5                     PUSH   HL   
5041   11 66 5F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5044   B7                     OR   A   
5045   ED 52                  SBC   HL,DE   
5047   7D                     LD   A,L   
5048   B4                     OR   H   
5049   CA AB 50               JP   Z,expectM_3222S163   
504C   CD 4C 10               CALL   printStr   
504F   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
505D   CD 4C 10               CALL   printStr   
5060   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
506F   21 66 5F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5072   E5                     PUSH   hl   
5073   E5                     PUSH   hl   
5074   CD 49 11               CALL   run   
5077   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5083   CD 4C 10               CALL   printStr   
5086   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5093   E1                     POP   hl   
5094   E5                     PUSH   hl   
5095   E5                     PUSH   hl   
5096   CD 49 11               CALL   run   
5099   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
50AA   76                     HALT      
50AB                EXPECTM_3222S163:      
50AB   E1                     POP   HL   
50AC                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
50AC   31 00 5D               LD   SP,STACK   
50AF   CD 80 10               CALL   coldInit   
50B2   CD 94 5B               CALL   execStr   
50B5   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
50BD   E1                     POP   HL   
50BE   E5                     PUSH   HL   
50BF   11 34 5F               LD   DE,VARS + ("Z"-"A"+1)*2   
50C2   B7                     OR   A   
50C3   ED 52                  SBC   HL,DE   
50C5   7D                     LD   A,L   
50C6   B4                     OR   H   
50C7   CA 29 51               JP   Z,expectM_3223S164   
50CA   CD 4C 10               CALL   printStr   
50CD   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
50DB   CD 4C 10               CALL   printStr   
50DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50ED   21 34 5F               LD   hl,VARS + ("Z"-"A"+1)*2   
50F0   E5                     PUSH   hl   
50F1   E5                     PUSH   hl   
50F2   CD 49 11               CALL   run   
50F5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5101   CD 4C 10               CALL   printStr   
5104   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5111   E1                     POP   hl   
5112   E5                     PUSH   hl   
5113   E5                     PUSH   hl   
5114   CD 49 11               CALL   run   
5117   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5128   76                     HALT      
5129                EXPECTM_3223S164:      
5129   E1                     POP   HL   
512A                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
512A   31 00 5D               LD   SP,STACK   
512D   CD 80 10               CALL   coldInit   
5130   CD 94 5B               CALL   execStr   
5133   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
513B   E1                     POP   HL   
513C   E5                     PUSH   HL   
513D   11 32 5F               LD   DE,VARS + ("Z"-"A")*2   
5140   B7                     OR   A   
5141   ED 52                  SBC   HL,DE   
5143   7D                     LD   A,L   
5144   B4                     OR   H   
5145   CA A7 51               JP   Z,expectM_3224S165   
5148   CD 4C 10               CALL   printStr   
514B   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
5159   CD 4C 10               CALL   printStr   
515C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
516B   21 32 5F               LD   hl,VARS + ("Z"-"A")*2   
516E   E5                     PUSH   hl   
516F   E5                     PUSH   hl   
5170   CD 49 11               CALL   run   
5173   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
517F   CD 4C 10               CALL   printStr   
5182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
518F   E1                     POP   hl   
5190   E5                     PUSH   hl   
5191   E5                     PUSH   hl   
5192   CD 49 11               CALL   run   
5195   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
51A6   76                     HALT      
51A7                EXPECTM_3224S165:      
51A7   E1                     POP   HL   
51A8                          ;*Macro unroll:  test "_A /adr", VARS
51A8   31 00 5D               LD   SP,STACK   
51AB   CD 80 10               CALL   coldInit   
51AE   CD 94 5B               CALL   execStr   
51B1   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
51B9   E1                     POP   HL   
51BA   E5                     PUSH   HL   
51BB   11 00 5F               LD   DE,VARS   
51BE   B7                     OR   A   
51BF   ED 52                  SBC   HL,DE   
51C1   7D                     LD   A,L   
51C2   B4                     OR   H   
51C3   CA 25 52               JP   Z,expectM_3225S166   
51C6   CD 4C 10               CALL   printStr   
51C9   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
51D7   CD 4C 10               CALL   printStr   
51DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51E9   21 00 5F               LD   hl,VARS   
51EC   E5                     PUSH   hl   
51ED   E5                     PUSH   hl   
51EE   CD 49 11               CALL   run   
51F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
51FD   CD 4C 10               CALL   printStr   
5200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
520D   E1                     POP   hl   
520E   E5                     PUSH   hl   
520F   E5                     PUSH   hl   
5210   CD 49 11               CALL   run   
5213   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5224   76                     HALT      
5225                EXPECTM_3225S166:      
5225   E1                     POP   HL   
5226                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
5226   31 00 5D               LD   SP,STACK   
5229   CD 80 10               CALL   coldInit   
522C   CD 94 5B               CALL   execStr   
522F   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
523C   E1                     POP   HL   
523D   E5                     PUSH   HL   
523E   11 01 00               LD   DE,1   
5241   B7                     OR   A   
5242   ED 52                  SBC   HL,DE   
5244   7D                     LD   A,L   
5245   B4                     OR   H   
5246   CA AD 52               JP   Z,expectM_3226S167   
5249   CD 4C 10               CALL   printStr   
524C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
525F   CD 4C 10               CALL   printStr   
5262   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5271   21 01 00               LD   hl,1   
5274   E5                     PUSH   hl   
5275   E5                     PUSH   hl   
5276   CD 49 11               CALL   run   
5279   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5285   CD 4C 10               CALL   printStr   
5288   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5295   E1                     POP   hl   
5296   E5                     PUSH   hl   
5297   E5                     PUSH   hl   
5298   CD 49 11               CALL   run   
529B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
52AC   76                     HALT      
52AD                EXPECTM_3226S167:      
52AD   E1                     POP   HL   
52AE                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
52AE   31 00 5D               LD   SP,STACK   
52B1   CD 80 10               CALL   coldInit   
52B4   CD 94 5B               CALL   execStr   
52B7   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
52CB   E1                     POP   HL   
52CC   E5                     PUSH   HL   
52CD   11 03 00               LD   DE,3   
52D0   B7                     OR   A   
52D1   ED 52                  SBC   HL,DE   
52D3   7D                     LD   A,L   
52D4   B4                     OR   H   
52D5   CA 43 53               JP   Z,expectM_3227S168   
52D8   CD 4C 10               CALL   printStr   
52DB   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
52F5   CD 4C 10               CALL   printStr   
52F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5307   21 03 00               LD   hl,3   
530A   E5                     PUSH   hl   
530B   E5                     PUSH   hl   
530C   CD 49 11               CALL   run   
530F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
531B   CD 4C 10               CALL   printStr   
531E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
532B   E1                     POP   hl   
532C   E5                     PUSH   hl   
532D   E5                     PUSH   hl   
532E   CD 49 11               CALL   run   
5331   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5342   76                     HALT      
5343                EXPECTM_3227S168:      
5343   E1                     POP   HL   
5344                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5344   31 00 5D               LD   SP,STACK   
5347   CD 80 10               CALL   coldInit   
534A   CD 94 5B               CALL   execStr   
534D   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5364   E1                     POP   HL   
5365   E5                     PUSH   HL   
5366   11 02 00               LD   DE,2   
5369   B7                     OR   A   
536A   ED 52                  SBC   HL,DE   
536C   7D                     LD   A,L   
536D   B4                     OR   H   
536E   CA DF 53               JP   Z,expectM_3228S169   
5371   CD 4C 10               CALL   printStr   
5374   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
5391   CD 4C 10               CALL   printStr   
5394   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53A3   21 02 00               LD   hl,2   
53A6   E5                     PUSH   hl   
53A7   E5                     PUSH   hl   
53A8   CD 49 11               CALL   run   
53AB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
53B7   CD 4C 10               CALL   printStr   
53BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53C7   E1                     POP   hl   
53C8   E5                     PUSH   hl   
53C9   E5                     PUSH   hl   
53CA   CD 49 11               CALL   run   
53CD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53DE   76                     HALT      
53DF                EXPECTM_3228S169:      
53DF   E1                     POP   HL   
53E0                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
53E0   31 00 5D               LD   SP,STACK   
53E3   CD 80 10               CALL   coldInit   
53E6   CD 94 5B               CALL   execStr   
53E9   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
540C   E1                     POP   HL   
540D   E5                     PUSH   HL   
540E   11 01 00               LD   DE,1   
5411   B7                     OR   A   
5412   ED 52                  SBC   HL,DE   
5414   7D                     LD   A,L   
5415   B4                     OR   H   
5416   CA 93 54               JP   Z,expectM_3229S170   
5419   CD 4C 10               CALL   printStr   
541C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5445   CD 4C 10               CALL   printStr   
5448   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5457   21 01 00               LD   hl,1   
545A   E5                     PUSH   hl   
545B   E5                     PUSH   hl   
545C   CD 49 11               CALL   run   
545F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
546B   CD 4C 10               CALL   printStr   
546E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
547B   E1                     POP   hl   
547C   E5                     PUSH   hl   
547D   E5                     PUSH   hl   
547E   CD 49 11               CALL   run   
5481   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5492   76                     HALT      
5493                EXPECTM_3229S170:      
5493   E1                     POP   HL   
5494                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
5494   31 00 5D               LD   SP,STACK   
5497   CD 80 10               CALL   coldInit   
549A   CD 94 5B               CALL   execStr   
549D   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
54C0   E1                     POP   HL   
54C1   E5                     PUSH   HL   
54C2   11 01 00               LD   DE,1   
54C5   B7                     OR   A   
54C6   ED 52                  SBC   HL,DE   
54C8   7D                     LD   A,L   
54C9   B4                     OR   H   
54CA   CA 47 55               JP   Z,expectM_3230S171   
54CD   CD 4C 10               CALL   printStr   
54D0   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
54F9   CD 4C 10               CALL   printStr   
54FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
550B   21 01 00               LD   hl,1   
550E   E5                     PUSH   hl   
550F   E5                     PUSH   hl   
5510   CD 49 11               CALL   run   
5513   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
551F   CD 4C 10               CALL   printStr   
5522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
552F   E1                     POP   hl   
5530   E5                     PUSH   hl   
5531   E5                     PUSH   hl   
5532   CD 49 11               CALL   run   
5535   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5546   76                     HALT      
5547                EXPECTM_3230S171:      
5547   E1                     POP   HL   
5548                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5548   31 00 5D               LD   SP,STACK   
554B   CD 80 10               CALL   coldInit   
554E   CD 94 5B               CALL   execStr   
5551   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
5581   E1                     POP   HL   
5582   E5                     PUSH   HL   
5583   11 02 00               LD   DE,2   
5586   B7                     OR   A   
5587   ED 52                  SBC   HL,DE   
5589   7D                     LD   A,L   
558A   B4                     OR   H   
558B   CA 15 56               JP   Z,expectM_3231S172   
558E   CD 4C 10               CALL   printStr   
5591   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
55C7   CD 4C 10               CALL   printStr   
55CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55D9   21 02 00               LD   hl,2   
55DC   E5                     PUSH   hl   
55DD   E5                     PUSH   hl   
55DE   CD 49 11               CALL   run   
55E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
55ED   CD 4C 10               CALL   printStr   
55F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55FD   E1                     POP   hl   
55FE   E5                     PUSH   hl   
55FF   E5                     PUSH   hl   
5600   CD 49 11               CALL   run   
5603   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5614   76                     HALT      
5615                EXPECTM_3231S172:      
5615   E1                     POP   HL   
5616                          ;*Macro unroll:  test "'hello'/sl",5
5616   31 00 5D               LD   SP,STACK   
5619   CD 80 10               CALL   coldInit   
561C   CD 94 5B               CALL   execStr   
561F   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
562A   E1                     POP   HL   
562B   E5                     PUSH   HL   
562C   11 05 00               LD   DE,5   
562F   B7                     OR   A   
5630   ED 52                  SBC   HL,DE   
5632   7D                     LD   A,L   
5633   B4                     OR   H   
5634   CA 99 56               JP   Z,expectM_3232S173   
5637   CD 4C 10               CALL   printStr   
563A   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
564B   CD 4C 10               CALL   printStr   
564E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
565D   21 05 00               LD   hl,5   
5660   E5                     PUSH   hl   
5661   E5                     PUSH   hl   
5662   CD 49 11               CALL   run   
5665   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5671   CD 4C 10               CALL   printStr   
5674   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5681   E1                     POP   hl   
5682   E5                     PUSH   hl   
5683   E5                     PUSH   hl   
5684   CD 49 11               CALL   run   
5687   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5698   76                     HALT      
5699                EXPECTM_3232S173:      
5699   E1                     POP   HL   
569A                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
569A   31 00 5D               LD   SP,STACK   
569D   CD 80 10               CALL   coldInit   
56A0   CD 94 5B               CALL   execStr   
56A3   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
56B6   E1                     POP   HL   
56B7   E5                     PUSH   HL   
56B8   11 00 00               LD   DE,false   
56BB   B7                     OR   A   
56BC   ED 52                  SBC   HL,DE   
56BE   7D                     LD   A,L   
56BF   B4                     OR   H   
56C0   CA 2D 57               JP   Z,expectM_3233S174   
56C3   CD 4C 10               CALL   printStr   
56C6   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
56DF   CD 4C 10               CALL   printStr   
56E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56F1   21 00 00               LD   hl,false   
56F4   E5                     PUSH   hl   
56F5   E5                     PUSH   hl   
56F6   CD 49 11               CALL   run   
56F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5705   CD 4C 10               CALL   printStr   
5708   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5715   E1                     POP   hl   
5716   E5                     PUSH   hl   
5717   E5                     PUSH   hl   
5718   CD 49 11               CALL   run   
571B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
572C   76                     HALT      
572D                EXPECTM_3233S174:      
572D   E1                     POP   HL   
572E                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
572E   31 00 5D               LD   SP,STACK   
5731   CD 80 10               CALL   coldInit   
5734   CD 94 5B               CALL   execStr   
5737   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
574B   E1                     POP   HL   
574C   E5                     PUSH   HL   
574D   11 FF FF               LD   DE,true   
5750   B7                     OR   A   
5751   ED 52                  SBC   HL,DE   
5753   7D                     LD   A,L   
5754   B4                     OR   H   
5755   CA C3 57               JP   Z,expectM_3234S175   
5758   CD 4C 10               CALL   printStr   
575B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5775   CD 4C 10               CALL   printStr   
5778   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5787   21 FF FF               LD   hl,true   
578A   E5                     PUSH   hl   
578B   E5                     PUSH   hl   
578C   CD 49 11               CALL   run   
578F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
579B   CD 4C 10               CALL   printStr   
579E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57AB   E1                     POP   hl   
57AC   E5                     PUSH   hl   
57AD   E5                     PUSH   hl   
57AE   CD 49 11               CALL   run   
57B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
57C2   76                     HALT      
57C3                EXPECTM_3234S175:      
57C3   E1                     POP   HL   
57C4                          ;*Macro unroll:  test "[1 2 3]** + +", 6
57C4   31 00 5D               LD   SP,STACK   
57C7   CD 80 10               CALL   coldInit   
57CA   CD 94 5B               CALL   execStr   
57CD   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
57DB   E1                     POP   HL   
57DC   E5                     PUSH   HL   
57DD   11 06 00               LD   DE,6   
57E0   B7                     OR   A   
57E1   ED 52                  SBC   HL,DE   
57E3   7D                     LD   A,L   
57E4   B4                     OR   H   
57E5   CA 4D 58               JP   Z,expectM_3235S176   
57E8   CD 4C 10               CALL   printStr   
57EB   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
57FF   CD 4C 10               CALL   printStr   
5802   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5811   21 06 00               LD   hl,6   
5814   E5                     PUSH   hl   
5815   E5                     PUSH   hl   
5816   CD 49 11               CALL   run   
5819   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5825   CD 4C 10               CALL   printStr   
5828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5835   E1                     POP   hl   
5836   E5                     PUSH   hl   
5837   E5                     PUSH   hl   
5838   CD 49 11               CALL   run   
583B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
584C   76                     HALT      
584D                EXPECTM_3235S176:      
584D   E1                     POP   HL   
584E                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
584E   31 00 5D               LD   SP,STACK   
5851   CD 80 10               CALL   coldInit   
5854   CD 94 5B               CALL   execStr   
5857   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
586F   E1                     POP   HL   
5870   E5                     PUSH   HL   
5871   11 63 00               LD   DE,$63   
5874   B7                     OR   A   
5875   ED 52                  SBC   HL,DE   
5877   7D                     LD   A,L   
5878   B4                     OR   H   
5879   CA EB 58               JP   Z,expectM_3236S177   
587C   CD 4C 10               CALL   printStr   
587F   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
589D   CD 4C 10               CALL   printStr   
58A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58AF   21 63 00               LD   hl,$63   
58B2   E5                     PUSH   hl   
58B3   E5                     PUSH   hl   
58B4   CD 49 11               CALL   run   
58B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58C3   CD 4C 10               CALL   printStr   
58C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58D3   E1                     POP   hl   
58D4   E5                     PUSH   hl   
58D5   E5                     PUSH   hl   
58D6   CD 49 11               CALL   run   
58D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
58EA   76                     HALT      
58EB                EXPECTM_3236S177:      
58EB   E1                     POP   HL   
58EC                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
58EC   31 00 5D               LD   SP,STACK   
58EF   CD 80 10               CALL   coldInit   
58F2   CD 94 5B               CALL   execStr   
58F5   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
590D   E1                     POP   HL   
590E   E5                     PUSH   HL   
590F   11 02 00               LD   DE,2   
5912   B7                     OR   A   
5913   ED 52                  SBC   HL,DE   
5915   7D                     LD   A,L   
5916   B4                     OR   H   
5917   CA 89 59               JP   Z,expectM_3237S178   
591A   CD 4C 10               CALL   printStr   
591D   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
593B   CD 4C 10               CALL   printStr   
593E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
594D   21 02 00               LD   hl,2   
5950   E5                     PUSH   hl   
5951   E5                     PUSH   hl   
5952   CD 49 11               CALL   run   
5955   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5961   CD 4C 10               CALL   printStr   
5964   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5971   E1                     POP   hl   
5972   E5                     PUSH   hl   
5973   E5                     PUSH   hl   
5974   CD 49 11               CALL   run   
5977   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5988   76                     HALT      
5989                EXPECTM_3237S178:      
5989   E1                     POP   HL   
598A                          ;*Macro unroll:  test "1 2 /max", 2
598A   31 00 5D               LD   SP,STACK   
598D   CD 80 10               CALL   coldInit   
5990   CD 94 5B               CALL   execStr   
5993   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
599C   E1                     POP   HL   
599D   E5                     PUSH   HL   
599E   11 02 00               LD   DE,2   
59A1   B7                     OR   A   
59A2   ED 52                  SBC   HL,DE   
59A4   7D                     LD   A,L   
59A5   B4                     OR   H   
59A6   CA 09 5A               JP   Z,expectM_3238S179   
59A9   CD 4C 10               CALL   printStr   
59AC   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
59BB   CD 4C 10               CALL   printStr   
59BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59CD   21 02 00               LD   hl,2   
59D0   E5                     PUSH   hl   
59D1   E5                     PUSH   hl   
59D2   CD 49 11               CALL   run   
59D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
59E1   CD 4C 10               CALL   printStr   
59E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59F1   E1                     POP   hl   
59F2   E5                     PUSH   hl   
59F3   E5                     PUSH   hl   
59F4   CD 49 11               CALL   run   
59F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5A08   76                     HALT      
5A09                EXPECTM_3238S179:      
5A09   E1                     POP   HL   
5A0A                          ;*Macro unroll:  test "2 1 /max", 2
5A0A   31 00 5D               LD   SP,STACK   
5A0D   CD 80 10               CALL   coldInit   
5A10   CD 94 5B               CALL   execStr   
5A13   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
5A1C   E1                     POP   HL   
5A1D   E5                     PUSH   HL   
5A1E   11 02 00               LD   DE,2   
5A21   B7                     OR   A   
5A22   ED 52                  SBC   HL,DE   
5A24   7D                     LD   A,L   
5A25   B4                     OR   H   
5A26   CA 89 5A               JP   Z,expectM_3239S180   
5A29   CD 4C 10               CALL   printStr   
5A2C   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
5A3B   CD 4C 10               CALL   printStr   
5A3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A4D   21 02 00               LD   hl,2   
5A50   E5                     PUSH   hl   
5A51   E5                     PUSH   hl   
5A52   CD 49 11               CALL   run   
5A55   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5A61   CD 4C 10               CALL   printStr   
5A64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A71   E1                     POP   hl   
5A72   E5                     PUSH   hl   
5A73   E5                     PUSH   hl   
5A74   CD 49 11               CALL   run   
5A77   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5A88   76                     HALT      
5A89                EXPECTM_3239S180:      
5A89   E1                     POP   HL   
5A8A                          ;*Macro unroll:  test "1 2 /min", 1
5A8A   31 00 5D               LD   SP,STACK   
5A8D   CD 80 10               CALL   coldInit   
5A90   CD 94 5B               CALL   execStr   
5A93   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
5A9C   E1                     POP   HL   
5A9D   E5                     PUSH   HL   
5A9E   11 01 00               LD   DE,1   
5AA1   B7                     OR   A   
5AA2   ED 52                  SBC   HL,DE   
5AA4   7D                     LD   A,L   
5AA5   B4                     OR   H   
5AA6   CA 09 5B               JP   Z,expectM_3240S181   
5AA9   CD 4C 10               CALL   printStr   
5AAC   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5ABB   CD 4C 10               CALL   printStr   
5ABE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5ACD   21 01 00               LD   hl,1   
5AD0   E5                     PUSH   hl   
5AD1   E5                     PUSH   hl   
5AD2   CD 49 11               CALL   run   
5AD5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5AE1   CD 4C 10               CALL   printStr   
5AE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AF1   E1                     POP   hl   
5AF2   E5                     PUSH   hl   
5AF3   E5                     PUSH   hl   
5AF4   CD 49 11               CALL   run   
5AF7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5B08   76                     HALT      
5B09                EXPECTM_3240S181:      
5B09   E1                     POP   HL   
5B0A                          ;*Macro unroll:  test "2 1 /min", 1
5B0A   31 00 5D               LD   SP,STACK   
5B0D   CD 80 10               CALL   coldInit   
5B10   CD 94 5B               CALL   execStr   
5B13   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
5B1C   E1                     POP   HL   
5B1D   E5                     PUSH   HL   
5B1E   11 01 00               LD   DE,1   
5B21   B7                     OR   A   
5B22   ED 52                  SBC   HL,DE   
5B24   7D                     LD   A,L   
5B25   B4                     OR   H   
5B26   CA 89 5B               JP   Z,expectM_3241S182   
5B29   CD 4C 10               CALL   printStr   
5B2C   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
5B3B   CD 4C 10               CALL   printStr   
5B3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B4D   21 01 00               LD   hl,1   
5B50   E5                     PUSH   hl   
5B51   E5                     PUSH   hl   
5B52   CD 49 11               CALL   run   
5B55   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5B61   CD 4C 10               CALL   printStr   
5B64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B71   E1                     POP   hl   
5B72   E5                     PUSH   hl   
5B73   E5                     PUSH   hl   
5B74   CD 49 11               CALL   run   
5B77   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5B88   76                     HALT      
5B89                EXPECTM_3241S182:      
5B89   E1                     POP   HL   
5B8A                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
5B8A                             ; 
5B8A   CD 4C 10               CALL   printStr   
5B8D   44 6F 6E 65 21 00      .CSTR   "Done!"   
5B93   76                     HALT      
5B94                             ; executes a null teminated string (null executes exit_)
5B94                             ; the string should be immedaitely following the call
5B94                EXECSTR:      ; create a root stack frame
5B94   C1                     POP   bc   ; bc = code*
5B95   0B                     DEC   bc   ; dec to prepare for next routine
5B96   11 00 00               LD   de,0   
5B99   D5                     PUSH   de   ; push fake IP
5B9A   D5                     PUSH   de   ; push null arg_list*
5B9B   D5                     PUSH   de   ; push null first_arg*
5B9C   D5                     PUSH   de   ; push fake BP
5B9D   DD E9                  JP   (ix)   
5B9F                STKSIZE:   EQU   $100   ; Stack size
5B9F                TIBSIZE:   EQU   $100   ; 256 bytes
5B9F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5B9F                          ALIGN   $100   
5C00                          DS   STKSIZE   
5D00                STACK:       
5D00                          ALIGN   $100   
5D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5E00                          ALIGN   $100   
5E00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5F00                          ALIGN   $100   
5F00                VARS:        
5F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5FD0                RESTARTS:      
5FD0                RST08:    DS   2   
5FD2                RST10:    DS   2   
5FD4                RST18:    DS   2   
5FD6                RST20:    DS   2   
5FD8                RST28:    DS   2   
5FDA                RST30:    DS   2   ; 
5FDC                BAUD:     DS   2   ; 
5FDE                INTVEC:   DS   2   ; 
5FE0                NMIVEC:   DS   2   ; 
5FE2                GETCVEC:   DS   2   ; 
5FE4                PUTCVEC:   DS   2   ; 
5FE6                SYSVARS:      
5FE6                             ; initialised sys variables (preserved)
5FE6                VTIBPTR:   DS   2   
5FE8                VBUFPTR:   DS   2   
5FEA                VHEAPPTR:   DS   2   
5FEC                VRECURPTR:   DS   2   
5FEE                VDATAWIDTH:   DS   1   
5FEF                VNUMBASE:   DS   1   
5FF0                VHEXPREFIX:   DS   1   
5FF1                VECHO:    DS   1   
5FF2                VSTRMODE:   DS   1   
5FF3                          DS   1   
5FF4                          DS   1   
5FF5                          DS   1   
5FF6                          DS   1   
5FF7                          DS   1   
5FF8                             ; uninitialised sys variables (preserved)
5FF8                VPOINTER:   DS   2   ; 
5FFA                VREMAIN:   DS   2   ; 
5FFC                VSAVEDIP:   DS   2   ; 
5FFE                VSAVEDSP:   DS   2   ; 
6000                VSAVEDNEXT:   DS   2   ; 
6002                VSAVEDBP:   DS   2   ; 
6004                             ; uninitialised sys variables (unpreserved)
6004                VTEMP1:   DS   2   ; 
6006                VTEMP2:   DS   2   ; 
6008                VTEMP3:   DS   2   ; 
600A                          DS   2   ; 
600C                TBPTR:    DS   2   ; reserved for tests
600E                TITLEBUF:   DS   20   
6022                HEAP:        
6022                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
6022                             ; db "{"
6022                             ; db    "[%b /tru] %L="                 ; init mutable L [index active]
6022                             ; db    "\\kt{"
6022                             ; db      "0%t!=/ret"                  ; break if type != 0
6022                             ; db      "\\dt:a{"                   ; return talkback to receive data
6022                             ; db        "%L1;!/ret"                ; if not active don't send
6022                             ; db        "%L0; %a="                ; store current index in A
6022                             ; db        "%s %L0; +="              ; inc value of index by step
6022                             ; db        "1%t!=/ret"                ; break if type != 0
6022                             ; db        "%a %e <"                 ; ifte: in range?
6022                             ; db          "{%a 1}{/fal %L1;= 0 2}"  ; ifte: /tru index, /fal active = false, quit
6022                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
6022                             ; db      "} 0 %k^"                   ; init sink
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC map, 0, "sf"                   ; map
6022                             ; db "{"
6022                             ; db    "\\kt{"
6022                             ; db      "0%t!=/ret"                  ; break if type != 0
6022                             ; db      "\\dt{"                     ; call source with tb
6022                             ; db        "1%t=="                   ; ifte: type == 1 ?
6022                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
6022                             ; db        "? %t %k^"               ; ifte: send to sink
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; ; /ftr filter
6022                             ; ; src pred -- src1
6022                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
6022                             ; db "{"
6022                             ; db    "[0]%T="
6022                             ; db    "\\kt{"                       ; return talkback to receive data
6022                             ; db      "\\dt{"                     ; call source with tb
6022                             ; db        "["
6022                             ; db          "{%d %T0;= /tru}"         ; case 0: store talkback in T[0], return true
6022                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
6022                             ; db          "{/tru}"                  ; case 2: return true
6022                             ; db        "]%t;^"                   ; select on %t
6022                             ; db        "{%d %t %k^}{0 1 %T0;^}"  ; ifte: true send d to sink, false send 1 to talkback
6022                             ; db        "?"
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC forEach, 1, "spT"
6022                             ; db "{"
6022                             ; db    "[0]%T="
6022                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
6022                             ; db      "2%t==/ret"                    ; if type == 2 skip
6022                             ; db      "0%t=="                   ; ifte: type = 0 ?
6022                             ; db      "{%d %T0;=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
6022                             ; db      "?"                      ; ifte:
6022                             ; db      "0 1 %T0;^"               ; 0 or 1: get next src data item
6022                             ; db    "} 0 %s^"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
6022                             ; db "{"                                  ; reducer: \\da00bbLi4u
6022                             ; db    "[%i]%A="
6022                             ; db    "\\kt{"                         ; return talkback to receive data
6022                             ; db      "\\dt{"                         ; call source with tb
6022                             ; db        "1%t=="                       ; ifte: type == 1 ?
6022                             ; db        "{ %d %A0; %r^ %A0;= %A0;}{%d}"      ; ifte: reduce -> acc, acc or data
6022                             ; db        "? %t %k^"                    ; ifte: send to sink
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2620 IN MAIN.asm
                    > USED AT LINE 2704 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 2601 IN MAIN.asm
                    > USED AT LINE 2669 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2606 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2608 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046F DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048F DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0491 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A1 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A2 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A8 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B4 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BF DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CE DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D7 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0545 DEFINED AT LINE 827 IN MAIN.asm
COMMAND_D_:         0554 DEFINED AT LINE 836 IN MAIN.asm
COMMAND_E_:         055F DEFINED AT LINE 843 IN MAIN.asm
COMMAND_F_:         056E DEFINED AT LINE 852 IN MAIN.asm
COMMAND_H_:         059D DEFINED AT LINE 878 IN MAIN.asm
COMMAND_I_:         05A8 DEFINED AT LINE 885 IN MAIN.asm
COMMAND_M_:         05B3 DEFINED AT LINE 892 IN MAIN.asm
COMAND_O_:          05C6 DEFINED AT LINE 903 IN MAIN.asm
COMMAND_P_:         05D1 DEFINED AT LINE 910 IN MAIN.asm
COMMAND_R_:         05D8 DEFINED AT LINE 915 IN MAIN.asm
COMMAND_S_:         05DA DEFINED AT LINE 918 IN MAIN.asm
COMMAND_T_:         05DC DEFINED AT LINE 921 IN MAIN.asm
COMMAND_V_:         05DE DEFINED AT LINE 924 IN MAIN.asm
COMMAND_W_:         05E0 DEFINED AT LINE 927 IN MAIN.asm
COMMAND_X_:         05E2 DEFINED AT LINE 930 IN MAIN.asm
COMMAND_DEFAULT_:   05E4 DEFINED AT LINE 933 IN MAIN.asm
COMMAND_R:          05E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
COMMAND_S:          05FE DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
COMMAND_T:          0621 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
COMMAND_V:          062C DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
COMMAND_W:          063B DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
COMMAND_X:          064A DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
COMMAND_DEFAULT:    0655 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
DIV:                065C DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
DIV2:               0666 DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
ABSOLUTE:           0677 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          0682 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
ADDROF:             0685 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            068B DEFINED AT LINE 1053 IN MAIN.asm
ARRAYLENGTH:        068D DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0693 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
ARRAYSIZE:          0696 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
PERFORMM_1548S1072: 069D DEFINED AT LINE 45
                    > USED AT LINE 43
WHILE:              06AA DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
WHILE1:             06B1 DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BYTEMODE:           06C4 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
BYTEMODE1:          06C6 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
COMMENT:            06CB DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
DECBASE:            06D4 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DECBASE1:           06D6 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
ECHO:               06DB DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
HEXBASE:            06E1 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
ERROR1:             06E6 DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
INPUT:              06EC DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
MEMALLOCATE:        06F7 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
MEMFREE:            06F9 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
MEMFREE1:           06FA DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
MEMFREEARRAY:       06FF DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
MAXIMUM:            0704 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
MAXIMUM1:           070E DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
MINIMUM:            0710 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
MINIMUM1:           071A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
OUTPUT:             071C DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
RETURN:             0725 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
RETURN1:            072C DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
RECUR:              072F DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
REMAIN:             0735 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
SELECT:             073B DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
SELECT1:            0746 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
SELECT1A:           0757 DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
SELECT1B:           0758 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
SELECT2:            075B DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
STRINGBEGIN:        0762 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
STRINGEND:          076A DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
STRINGEND1:         0791 DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
STRINGLENGTH:       0799 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      079F DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
STRINGLENGTH2:      07A1 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
STRINGLENGTH3:      07A5 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
STRINGSIZE:         07A8 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
PERFORMM_1771S1317: 07AF DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      07B4 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
STRINGCOMPARE1:     07B6 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
STRINGCOMPARE2:     07C1 DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
STRINGCOMPARE3:     07C6 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
STRINGCOMPARE4:     07C9 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
VARIABLES:          07CC DEFINED AT LINE 1348 IN MAIN.asm
VOID:               07D2 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
WORDMODE:           07DA DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
XOR:                07DF DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
XOR1:               07E0 DEFINED AT LINE 1369 IN MAIN.asm
RANGESRC:           07EA DEFINED AT LINE 32
                    > USED AT LINE 949 IN MAIN.asm
RANGESRCM_1832S1385: 07F9 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0883 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1851S1405: 0890 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         090B DEFINED AT LINE 32
                    > USED AT LINE 962 IN MAIN.asm
STRINGITERM_1870S1425: 0918 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                099B DEFINED AT LINE 32
                    > USED AT LINE 895 IN MAIN.asm
MAPM_1890S1447:     09A8 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09DD DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FILTERM_1904S1462:  09EB DEFINED AT LINE 39
                    > USED AT LINE 35
SCAN1:              0A3E DEFINED AT LINE 32
                    > USED AT LINE 956 IN MAIN.asm
SCAN1M_1923S1482:   0A4D DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A8F DEFINED AT LINE 32
                    > USED AT LINE 857 IN MAIN.asm
FOREACHM_1937S1497: 0A9D DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0ADB DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FUNCSRCM_1951S1512: 0AE7 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B16 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1961S1523: 0B24 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B60 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B6F DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
READSTRING:         0B78 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B7D DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
READSTRING2:        0B91 DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
READNUMBER:         0B9A DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
PERFORMM_2005S1572: 0BA3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0BC1 DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
PERFORMM_2022S1589: 0BC8 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BCB DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
PERFORMM_2026S1593: 0BD2 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BD3 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
TILDE:              0BD9 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BD9 DEFINED AT LINE 1603 IN MAIN.asm
DOLLAR:             0BE3 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BE3 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BE6 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
HEXNUM2:            0BEE DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
QUESTION:           0C00 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0C00 DEFINED AT LINE 1639 IN MAIN.asm
QUOTE:              0C0D DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0C0D DEFINED AT LINE 1653 IN MAIN.asm
STRING1:            0C16 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
STRING2:            0C19 DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
STRING3:            0C1F DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
PERCENT:            0C27 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0C27 DEFINED AT LINE 1680 IN MAIN.asm
ARG0:               0C43 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
ARG0A:              0C4C DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
ARG1:               0C51 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
ARG1A:              0C59 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
NUM:                0C5C DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C65 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
NUM1:               0C66 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
NUM2:               0C7E DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
NUM3:               0C89 DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
RBRACE:             0C8C DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C8C DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BLOCKEND1:          0CBE DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
BLOCKEND2:          0CCA DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
BLOCKEND3:          0CDC DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
BLOCKEND4:          0CF0 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
GOBLOCK:            0CF9 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0D1E DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
GOBLOCK3:           0D28 DEFINED AT LINE 1843 IN MAIN.asm
GOFUNC:             0D2C DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D45 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
GOFUNC2:            0D4B DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
GOFUNC3:            0D56 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
GOFUNC4:            0D6E DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
GOFUNC5:            0D71 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
GOFUNC6:            0D74 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
GOFUNC7:            0D77 DEFINED AT LINE 1906 IN MAIN.asm
GOFUNC8:            0D7B DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
ASSIGN:             0D86 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D88 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D8C DEFINED AT LINE 1928 IN MAIN.asm
ASSIGN2:            0D95 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
EQUALS:             0D97 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D9E DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0DA5 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0DAA DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0DAF DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
TRUE1:              0DB2 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
NULL1:              0DB8 DEFINED AT LINE 1973 IN MAIN.asm
FALSE1:             0DB8 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
SPREAD:             0DBE DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DCB DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
SPREAD2:            0DD6 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
SPREAD3:            0DD8 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
SHIFTLEFT:          0DE2 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DEC DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
SHIFTLEFT3:         0DF4 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
SHIFTLEFT4:         0DF5 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
SHIFTRIGHT:         0DFE DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0E08 DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
SHIFTRIGHT3:        0E10 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
SHIFTRIGHT4:        0E14 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
DIVIDE:             0E1D DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
DIVIDE1:            0E22 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
DIVIDE2:            0E2F DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
DIVIDE3:            0E30 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
DOTNEXT:            0E36 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E3E DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
PARSEARGS:          0E50 DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E5A DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
PARSEARGS1A:        0E62 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
PARSEARGS2:         0E6A DEFINED AT LINE 2114 IN MAIN.asm
PARSEARGS3:         0E72 DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
PARSEARGS4:         0E75 DEFINED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
PARSEARGS5:         0E7B DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
PARSEBLOCK:         0E86 DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E8A DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PARSEBLOCK2:        0EA3 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
PARSEBLOCK3:        0EA9 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
PARSEBLOCK4:        0EC3 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
PARSEBLOCK5:        0EC6 DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
PARSEBLOCK6:        0EF1 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
CREATEFUNC:         0EF5 DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0F14 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
CREATEFUNC1:        0F2C DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
CREATEFUNC2:        0F3F DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
CREATEFUNC2A:       0F5E DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2272 IN MAIN.asm
CREATEFUNC3:        0F6D DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
CREATEFUNC4:        0F78 DEFINED AT LINE 2308 IN MAIN.asm
CREATEFUNC5:        0F79 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
VARIABLE:           0F97 DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0FA6 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
CHARTABLE:          0FA9 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0FB3 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
CHARTABLE2:         0FBD DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
CHARTABLE3:         0FBF DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CMDTABLE:           0FC4 DEFINED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
CMDTABLE1:          0FC5 DEFINED AT LINE 2385 IN MAIN.asm
CMDTABLE2:          0FC5 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
CMDTABLE3:          0FD2 DEFINED AT LINE 2398 IN MAIN.asm
CMDTABLE4:          0FDC DEFINED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
CMDTABLE5:          0FE1 DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
GETVARADDR:         0FE6 DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
GETVARADDR1:        0FF8 DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
PUTSTR0:            0FFD DEFINED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
PUTSTR:             1001 DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
NESTING:            1006 DEFINED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
NESTING0:           1014 DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
NESTING1A:          101B DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
NESTING1:           101E DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
NESTING2:           102D DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
NESTING3:           102F DEFINED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
NESTING4:           103A DEFINED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
PROMPT:             103C DEFINED AT LINE 2494 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
CRLF:               1045 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
PRINTSTR:           104C DEFINED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2694 IN MAIN.asm
                    > USED AT LINE 2699 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 43
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 188
INIT:               1053 DEFINED AT LINE 2513 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
INIT1:              105B DEFINED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
WARMINIT:           1063 DEFINED AT LINE 2525 IN MAIN.asm
COLDBOOT0:          1076 DEFINED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
COLDINIT:           1080 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1091 DEFINED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
COLDSTART:          109E DEFINED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
START:              10A7 DEFINED AT LINE 2560 IN MAIN.asm
START1:             10AD DEFINED AT LINE 2563 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET:          10B3 DEFINED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2671 IN MAIN.asm
                    > USED AT LINE 2687 IN MAIN.asm
INTERPRET2:         10BF DEFINED AT LINE 2575 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
                    > USED AT LINE 2692 IN MAIN.asm
                    > USED AT LINE 2696 IN MAIN.asm
                    > USED AT LINE 2714 IN MAIN.asm
INTERPRET3:         10C7 DEFINED AT LINE 2583 IN MAIN.asm
                    > USED AT LINE 2593 IN MAIN.asm
INTERPRET4:         10CD DEFINED AT LINE 2589 IN MAIN.asm
                    > USED AT LINE 2581 IN MAIN.asm
INTERPRET5:         10D2 DEFINED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2637 IN MAIN.asm
INTERPRET5A:        10EB DEFINED AT LINE 2611 IN MAIN.asm
INTERPRET6:         10ED DEFINED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
INTERPRET7:         10FB DEFINED AT LINE 2624 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
INTERPRET8:         110E DEFINED AT LINE 2639 IN MAIN.asm
                    > USED AT LINE 2602 IN MAIN.asm
NEXT:               1129 DEFINED AT LINE 2652 IN MAIN.asm
                    > USED AT LINE 2552 IN MAIN.asm
                    > USED AT LINE 2656 IN MAIN.asm
NEXT0:              113D DEFINED AT LINE 2666 IN MAIN.asm
                    > USED AT LINE 2664 IN MAIN.asm
NEXT1:              113E DEFINED AT LINE 2668 IN MAIN.asm
                    > USED AT LINE 2657 IN MAIN.asm
EXIT:               1145 DEFINED AT LINE 2673 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
RUN:                1149 DEFINED AT LINE 2678 IN MAIN.asm
                    > USED AT LINE 2685 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              114D DEFINED AT LINE 2683 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
BACKSPACE_:         115F DEFINED AT LINE 2689 IN MAIN.asm
                    > USED AT LINE 2607 IN MAIN.asm
REEDIT_:            116F DEFINED AT LINE 2698 IN MAIN.asm
                    > USED AT LINE 2609 IN MAIN.asm
REEDIT0:            117B DEFINED AT LINE 2703 IN MAIN.asm
                    > USED AT LINE 2709 IN MAIN.asm
REEDIT1:            117F DEFINED AT LINE 2706 IN MAIN.asm
                    > USED AT LINE 2702 IN MAIN.asm
F1:                 118F DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F1M_3079S12:        119A DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 119B DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F2M_3081S15:        11A6 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 11A7 DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
F3M_3083S18:        11B2 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 11B3 DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F4M_3085S21:        11BE DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3102S41:    12B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S47:    1337 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S48:    13AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S49:    1421 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S50:    1493 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S51:    1505 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S52:    1577 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S53:    15EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S54:    1661 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S55:    16D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S56:    1751 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S57:    17C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S58:    1839 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S59:    18AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S60:    1925 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S61:    19A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S62:    1A1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S63:    1A97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S64:    1B15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S65:    1B97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S66:    1C17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S67:    1C91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S68:    1D13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S69:    1D91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S70:    1E0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S71:    1E85 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S72:    1F07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S73:    1F81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S74:    1FFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S75:    207B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S76:    210B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S77:    2181 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S78:    21F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S79:    226F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S80:    22E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S81:    2361 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S82:    23E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S83:    245D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S84:    24E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S85:    256D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S86:    25F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S87:    267F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S88:    270D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S89:    279B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S90:    2829 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S91:    28B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S92:    2943 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S93:    29CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S94:    2A63 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S95:    2ADF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S96:    2B69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S97:    2BF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S98:    2C7F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S99:    2D03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S100:   2D7D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S101:   2DF9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S102:   2E75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S103:   2EEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S104:   2F69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S105:   2FE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S106:   305D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S107:   30D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S108:   3151 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S109:   31CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S110:   3245 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S111:   32C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S112:   333D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S113:   33B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S114:   3437 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S115:   34B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S116:   352D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S117:   35A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S118:   3623 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S119:   36A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S120:   373B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S121:   37CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S122:   3849 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S123:   38C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S124:   3947 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S125:   39CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S126:   3A4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S127:   3ADB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S128:   3B69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S129:   3BFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S130:   3C95 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S131:   3D1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S132:   3DAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S133:   3E41 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S134:   3ED5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S135:   3F67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S136:   4007 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S137:   4095 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S138:   4131 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S139:   41CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S140:   426F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S141:   431B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S142:   43C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S143:   4451 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S144:   44E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S145:   4573 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S146:   4607 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S147:   469D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S148:   4741 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S149:   47ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S150:   4899 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S151:   4939 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S152:   49DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S153:   4A9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S154:   4B51 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3214S155:   4C17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3215S156:   4CDD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3216S157:   4D79 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3217S158:   4E15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3218S159:   4E9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3219S160:   4F21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3220S161:   4FA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3221S162:   502D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3222S163:   50AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3223S164:   5129 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3224S165:   51A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3225S166:   5225 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3226S167:   52AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3227S168:   5343 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3228S169:   53DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3229S170:   5493 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3230S171:   5547 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3231S172:   5615 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3232S173:   5699 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3233S174:   572D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3234S175:   57C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3235S176:   584D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3236S177:   58EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3237S178:   5989 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3238S179:   5A09 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3239S180:   5A89 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3240S181:   5B09 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3241S182:   5B89 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5B94 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5D00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5D00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
                    > USED AT LINE 2616 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2641 IN MAIN.asm
                    > USED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2701 IN MAIN.asm
                    > USED AT LINE 2710 IN MAIN.asm
BUFFER:             5E00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
VARS:               5F00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5FD0 DEFINED AT LINE 18 IN ram.asm
RST08:              5FD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5FD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5FD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5FD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5FD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5FDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5FDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5FDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5FE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5FE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5FE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5FE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2540 IN MAIN.asm
VTIBPTR:            5FE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2573 IN MAIN.asm
                    > USED AT LINE 2643 IN MAIN.asm
VBUFPTR:            5FE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
VHEAPPTR:           5FEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
VRECURPTR:          5FEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
VDATAWIDTH:         5FEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
VNUMBASE:           5FEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
VHEXPREFIX:         5FF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
VECHO:              5FF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
VSTRMODE:           5FF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
VPOINTER:           5FF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
VREMAIN:            5FFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
VSAVEDIP:           5FFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2646 IN MAIN.asm
VSAVEDSP:           5FFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
VSAVEDNEXT:         6000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2648 IN MAIN.asm
VSAVEDBP:           6002 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
VTEMP1:             6004 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
VTEMP2:             6006 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
VTEMP3:             6008 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
TBPTR:              600C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           600E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2564 IN MAIN.asm
HEAP:               6022 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
