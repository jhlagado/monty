0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 60               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 60               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 60               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 60               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 60               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 60               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 60               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 60               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 60               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 60               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5E               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 60               LD   (RST08),HL   
0094   22 D2 60               LD   (RST10),HL   
0097   22 D4 60               LD   (RST18),HL   
009A   22 D6 60               LD   (RST20),HL   
009D   22 D8 60               LD   (RST28),HL   
00A0   22 DA 60               LD   (RST30),HL   
00A3   22 DE 60               LD   (INTVEC),HL   
00A6   22 E0 60               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 60               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 60               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 13               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5E                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5F                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 61                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 82 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 05 0C               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 2F 0C               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 49 0C               JP   percent   
0215                QUESTION_:      
0215   C3 22 0C               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 7E 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 C0 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 A8 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 B9 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 20 0E               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 04 0E               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA C7 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 CC 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 60               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 B9 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 7E 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 AA 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA AA 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA E0 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 AA 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 AA 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 60                  LD   h,msb(VARS)   
0309   22 F8 60               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 72 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 D4 11               JP   error   
0343                LAMBDA2:      
0343   CD A8 0E               CALL   parseBlock   
0346   CD 17 0F               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 60               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 60               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 60            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 60               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 1B 0D               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 4E 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 1B 0D               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 60            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 60            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 58 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD A8 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 AE 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 FB 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 60            LD   de,(vPointer)   
03ED   21 F8 60               LD   hl,vPointer   
03F0   C3 B9 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD E6 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   38 0B                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 60            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 60            LD   (vBufPtr),de   ; save buffer*'
041F   C3 58 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 60            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 60            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 58 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 60               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA 5F 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 60            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 60               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 2B 10               CALL   formatDec   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 60            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 58 0E               JP   dotNext   
045F                             ; buffer hex                    37
045F                             ; value --
045F                PRINTHEX:      
045F   ED 5B E8 60            LD   de,(vBufPtr)   
0463   3A F0 60               LD   a,(vHexPrefix)   ; "$"
0466   B7                     OR   a   ; skip if null
0467   28 02                  JR   z,printHex1   
0469   12                     LD   (de),a   
046A   13                     INC   de   ; string*++,
046B                PRINTHEX1:      
046B   E1                     POP   hl   ; hl = value
046C   3A EE 60               LD   a,(vDataWidth)   
046F   3D                     DEC   a   
0470   28 04                  JR   z,printHex2   
0472   7C                     LD   a,h   
0473   CD 85 04               CALL   printHex3   
0476                PRINTHEX2:      
0476   7D                     LD   a,l   
0477   CD 85 04               CALL   printHex3   
047A   3E 20                  LD   a," "   ; append space to buffer
047C   12                     LD   (de),a   
047D   13                     INC   de   ; string*++,
047E   ED 53 E8 60            LD   (vBufPtr),de   
0482   C3 58 0E               JP   dotNext   
0485                PRINTHEX3:      
0485   F5                     PUSH   af   
0486   1F                     RRA      
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   CD 8E 04               CALL   printHex4   
048D   F1                     POP   af   
048E                PRINTHEX4:      
048E   E6 0F                  AND   0x0F   
0490   C6 90                  ADD   a,0x90   
0492   27                     DAA      
0493   CE 40                  ADC   a,0x40   
0495   27                     DAA      
0496   12                     LD   (de),a   
0497   13                     INC   de   ; string*++,
0498   C9                     RET      
0499                             ;********************** PAGE 4 END *********************************************
0499                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA C3 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD CB 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   50                     DB   lsb(command_c_)   
050E   6B                     DB   lsb(command_d_)   
050F   76                     DB   lsb(command_e_)   
0510   81                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   AC                     DB   lsb(command_h_)   
0513   B7                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   C2                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   D5                     DB   lsb(comand_o_)   
051A   00                     DB   0   
051B   00                     DB   0   
051C   E0                     DB   lsb(command_r_)   
051D   E2                     DB   lsb(command_s_)   
051E   E4                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   E6                     DB   lsb(command_v_)   
0521   E8                     DB   lsb(command_w_)   
0522   EA                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   EC                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD E6 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   83 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   91 06                  DW   addrOf   
0531   69 74                  DB   "it"   ; /ait array iterator
0533   A3 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   EF 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /aln array length
053B   99 06                  DW   arrayLength   
053D   00 00                  DW   0   
053F   DE 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD E6 0F               CALL   cmdTable   
0544   79 65                  DB   "ye"   ; /bye cold reboot
0546   25 11                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   BC 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   DE 06                  DW   error1   
0550                COMMAND_C_:      
0550   CD E6 0F               CALL   cmdTable   
0553   6C 6C                  DB   "ll"   ; /cll clear screen
0555   D6 07                  DW   clearLine   
0557   6C 73                  DB   "ls"   ; /cls clear screen
0559   DF 07                  DW   clearScreen   
055B   6D 76                  DB   "mv"   ; /cmv cursor move
055D   E4 07                  DW   cursorMove   
055F   75 72                  DB   "ur"   ; /cur cursor show
0561   F2 07                  DW   cursorShow   
0563   67 6F                  DB   "go"   ; /cur cursor go
0565   01 08                  DW   cursorGo   
0567   00 00                  DW   0   
0569   DE 06                  DW   error1   
056B                COMMAND_D_:      
056B   CD E6 0F               CALL   cmdTable   
056E   65 63                  DB   "ec"   ; /dec decimal
0570   CC 06                  DW   decBase   
0572   00 00                  DW   0   
0574   DE 06                  DW   error1   
0576                COMMAND_E_:      
0576   CD E6 0F               CALL   cmdTable   
0579   63 68                  DB   "ch"   
057B   D3 06                  DW   echo   
057D   00 00                  DW   0   
057F   DE 06                  DW   error1   
0581                COMMAND_F_:      
0581   CD E6 0F               CALL   cmdTable   
0584   61 6C                  DB   "al"   ; /fal false
0586   DA 0D                  DW   false1   
0588   6F 72                  DB   "or"   ; /for forEach
058A   B1 0A                  DW   forEach   
058C   72 65                  DB   "re"   ; /fre free memory
058E   F1 06                  DW   memFree   
0590   72 61                  DB   "ra"   ; /fra free memory array
0592   F7 06                  DW   memFreeArray   
0594   74 72                  DB   "tr"   ; /ftr filter
0596   FF 09                  DW   filter   
0598   31 00                  DB   "1",0   
059A   80 12                  DW   f1   
059C   32 00                  DB   "2",0   
059E   8C 12                  DW   f2   
05A0   33 00                  DB   "3",0   
05A2   98 12                  DW   f3   
05A4   34 00                  DB   "4",0   
05A6   A4 12                  DW   f4   
05A8   00 00                  DW   0   
05AA   DE 06                  DW   error1   
05AC                COMMAND_H_:      
05AC   CD E6 0F               CALL   cmdTable   
05AF   65 78                  DB   "ex"   ; /hex hex
05B1   D9 06                  DW   hexBase   
05B3   00 00                  DW   0   
05B5   DE 06                  DW   error1   
05B7                COMMAND_I_:      
05B7   CD E6 0F               CALL   cmdTable   
05BA   6E 00                  DB   "n",0   ; /in input
05BC   E4 06                  DW   input   
05BE   00 00                  DW   0   
05C0   DE 06                  DW   error1   
05C2                COMMAND_M_:      
05C2   CD E6 0F               CALL   cmdTable   
05C5   61 70                  DB   "ap"   ; /map map
05C7   BD 09                  DW   map   
05C9   61 78                  DB   "ax"   ; /max maximum
05CB   FC 06                  DW   maximum   
05CD   69 6E                  DB   "in"   ; /min minimum
05CF   08 07                  DW   minimum   
05D1   00 00                  DW   0   
05D3   DE 06                  DW   error1   
05D5                COMAND_O_:      
05D5   CD E6 0F               CALL   cmdTable   
05D8   75 74                  DB   "ut"   ; /out out
05DA   14 07                  DW   output   
05DC   00 00                  DW   0   
05DE   DE 06                  DW   error1   
05E0                COMMAND_R_:      
05E0   18 0D                  JR   command_r   
05E2                COMMAND_S_:      
05E2   18 22                  JR   command_s   
05E4                COMMAND_T_:      
05E4   18 47                  JR   command_t   
05E6                COMMAND_V_:      
05E6   18 50                  JR   command_v   
05E8                COMMAND_W_:      
05E8   18 5D                  JR   command_w   
05EA                COMMAND_X_:      
05EA   18 6A                  JR   command_x   
05EC                             ; 3
05EC                COMMAND_DEFAULT_:      
05EC   C3 61 06               JP   command_default   
05EF                             ;********************** PAGE 5 END *********************************************
05EF                             ; .align $100
05EF                COMMAND_R:      
05EF   CD E6 0F               CALL   cmdTable   
05F2   65 63                  DB   "ec"   ; /rec tail call optimisation
05F4   27 07                  DW   recur   
05F6   65 6D                  DB   "em"   ; /rem remainder
05F8   2D 07                  DW   remain   
05FA   65 74                  DB   "et"   ; /ret return
05FC   1D 07                  DW   return   
05FE   6E 67                  DB   "ng"   ; /rng range src
0600   09 08                  DW   rangeSrc   
0602   00 00                  DW   0   
0604   DE 06                  DW   error1   
0606                COMMAND_S:      
0606   CD E6 0F               CALL   cmdTable   
0609   62 62                  DB   "bb"   ; /sbb string builder begin
060B   5A 07                  DW   stringBegin   ; /sbe string builder end
060D   62 65                  DB   "be"   
060F   62 07                  DW   stringEnd   
0611   63 6E                  DB   "cn"   ; /scn scan stream
0613   60 0A                  DW   scan1   
0615   63 70                  DB   "cp"   ; /scp string compare
0617   A0 07                  DW   stringCompare   
0619   65 6C                  DB   "el"   ; /sel select
061B   33 07                  DW   select   
061D   69 74                  DB   "it"   ; /sit string iterator
061F   2C 09                  DW   stringIter   
0621   6C 6E                  DB   "ln"   ; /sln string length
0623   91 07                  DW   stringLength   
0625   72 63                  DB   "rc"   ; /src source block* --
0627   FD 0A                  DW   source   
0629   00 00                  DW   0   
062B   DE 06                  DW   error1   
062D                COMMAND_T:      
062D   CD E6 0F               CALL   cmdTable   
0630   72 75                  DB   "ru"   ; /tru true
0632   D4 0D                  DW   true1   
0634   00 00                  DW   0   
0636   DE 06                  DW   error1   
0638                COMMAND_V:      
0638   CD E6 0F               CALL   cmdTable   
063B   61 72                  DB   "ar"   ; /var constant vars
063D   00 60                  DW   vars   
063F   6F 69                  DB   "oi"   ; /voi void function return
0641   BE 07                  DW   void   
0643   00 00                  DW   0   
0645   DE 06                  DW   error1   
0647                COMMAND_W:      
0647   CD E6 0F               CALL   cmdTable   
064A   68 69                  DB   "hi"   ; /whi while true else break from loop
064C   A2 06                  DW   while   
064E   72 64                  DB   "rd"   ; /wrd word mode
0650   C6 07                  DW   wordMode   
0652   00 00                  DW   0   
0654   DE 06                  DW   error1   
0656                COMMAND_X:      
0656   CD E6 0F               CALL   cmdTable   
0659   6F 72                  DB   "or"   ; /xor exclsuive or
065B   CB 07                  DW   xor   
065D   00 00                  DW   0   
065F   DE 06                  DW   error1   
0661                COMMAND_DEFAULT:      
0661   CD E6 0F               CALL   cmdTable   
0664   00 00                  DW   0   
0666   68 06                  DW   div   
0668                             ;                               32
0668                DIV:         
0668   E1                     POP   hl   ; hl = arg_b
0669   D1                     POP   de   ; de = arg_a
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 3D                  CP   "="   
066E   28 02                  JR   z,div2   
0670   0B                     DEC   bc   ; /
0671   EB                     EX   de,hl   
0672                DIV2:        
0672   F5                     PUSH   af   ; preserve af, bc
0673   C5                     PUSH   bc   
0674   44 4D                  LD   bc,hl   
0676   CD 3F 0E               CALL   divide   
0679   EB                     EX   de,hl   
067A   ED 53 FA 60            LD   (vRemain),de   
067E   C1                     POP   bc   ; restore
067F   F1                     POP   af   
0680   C3 9D 02               JP   sub3   
0683                             ; /abs absolute
0683                             ; num -- num
0683                ABSOLUTE:      
0683   E1                     POP   hl   
0684   CB 7C                  BIT   7,h   
0686   28 06                  JR   z,absolute1   
0688   AF                     XOR   a   
0689   95                     SUB   l   
068A   6F                     LD   l,a   
068B   9F                     SBC   a,a   
068C   94                     SUB   h   
068D   67                     LD   h,a   
068E                ABSOLUTE1:      
068E   E5                     PUSH   hl   
068F   DD E9                  JP   (ix)   
0691                             ; /adr addrOf
0691                             ; char -- addr
0691                ADDROF:      
0691   E1                     POP   hl   ; a = char
0692   7D                     LD   a,l   
0693   CD 08 10               CALL   getVarAddr   
0696   E5                     PUSH   hl   
0697                ADDROF2:      
0697   DD E9                  JP   (ix)   
0699                             ; /aln length of an array, num elements
0699                             ; array* -- num
0699                ARRAYLENGTH:      
0699   E1                     POP   hl   
069A   2B                     DEC   hl   ; msb size
069B   56                     LD   d,(hl)   
069C   2B                     DEC   hl   ; lsb size
069D   5E                     LD   e,(hl)   
069E   EB                     EX   de,hl   
069F                ARRAYLENGTH1:      
069F   E5                     PUSH   hl   
06A0   DD E9                  JP   (ix)   
06A2                             ; 13
06A2                             ; /whi while true else break from loop
06A2                             ; --
06A2                WHILE:       
06A2   E1                     POP   hl   ; hl = condition, break if false
06A3   7D                     LD   a,l   
06A4   B4                     OR   h   
06A5   28 02                  JR   z,while1   
06A7   DD E9                  JP   (ix)   
06A9                WHILE1:      
06A9   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06AB   FD 54                  LD   d,iyh   
06AD   21 08 00               LD   hl,8   
06B0   19                     ADD   hl,de   
06B1   23                     INC   hl   
06B2   23                     INC   hl   
06B3   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06B6   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06B9   C3 AE 0C               JP   blockEnd   
06BC                             ; /byt
06BC                BYTEMODE:      
06BC   3E 01                  LD   a,1   
06BE                BYTEMODE1:      
06BE   32 EE 60               LD   (vDataWidth),a   
06C1   DD E9                  JP   (ix)   
06C3                             ; //
06C3                COMMENT:      
06C3   03                     INC   bc   ; point to next char
06C4   0A                     LD   a,(bc)   
06C5   FE 20                  CP   " "   ; terminate on any char less than SP
06C7   30 FA                  JR   nc,comment   
06C9   0B                     DEC   bc   
06CA   DD E9                  JP   (ix)   
06CC                DECBASE:      
06CC   3E 0A                  LD   a,10   
06CE                DECBASE1:      
06CE   32 EF 60               LD   (vNumBase),a   
06D1   DD E9                  JP   (ix)   
06D3                             ; /ech
06D3                             ; bool --
06D3                ECHO:        
06D3   E1                     POP   hl   
06D4   22 F1 60               LD   (vEcho),hl   
06D7   DD E9                  JP   (ix)   
06D9                HEXBASE:      
06D9   3E 10                  LD   a,16   
06DB   C3 CE 06               JP   decBase1   
06DE                ERROR1:      
06DE   21 01 00               LD   hl,1   ; error 1: unknown command
06E1   C3 D4 11               JP   error   
06E4                             ; Z80 port input
06E4                             ; port -- value
06E4                INPUT:       
06E4   E1                     POP   hl   
06E5   59                     LD   e,c   ; save IP
06E6   4D                     LD   c,l   
06E7   ED 68                  IN   l,(c)   
06E9   26 00                  LD   h,0   
06EB   4B                     LD   c,e   ; restore IP
06EC   E5                     PUSH   hl   
06ED   DD E9                  JP   (ix)   
06EF                             ; /alc
06EF                             ; size -- adr
06EF                MEMALLOCATE:      
06EF   DD E9                  JP   (ix)   
06F1                             ; /fre
06F1                             ; adr --
06F1                MEMFREE:      
06F1   E1                     POP   hl   
06F2                MEMFREE1:      
06F2   22 EA 60               LD   (vHeapPtr),hl   
06F5   DD E9                  JP   (ix)   
06F7                             ; /fra
06F7                             ; adr --
06F7                MEMFREEARRAY:      
06F7   E1                     POP   hl   
06F8   2B                     DEC   hl   
06F9   2B                     DEC   hl   
06FA   18 F6                  JR   memFree1   
06FC                             ; /max maximum
06FC                             ; a b -- c
06FC                MAXIMUM:      
06FC   E1                     POP   hl   
06FD   D1                     POP   de   
06FE   E5                     PUSH   hl   
06FF   B3                     OR   e   
0700   ED 52                  SBC   hl,de   
0702   30 02                  JR   nc,maximum1   
0704   E1                     POP   hl   
0705   D5                     PUSH   de   
0706                MAXIMUM1:      
0706   DD E9                  JP   (ix)   
0708                             ; /min minimum
0708                             ; a b -- c
0708                MINIMUM:      
0708   E1                     POP   hl   
0709   D1                     POP   de   
070A   E5                     PUSH   hl   
070B   B3                     OR   e   
070C   ED 52                  SBC   hl,de   
070E   38 02                  JR   c,minimum1   
0710   E1                     POP   hl   
0711   D5                     PUSH   de   
0712                MINIMUM1:      
0712   DD E9                  JP   (ix)   
0714                             ; /o Z80 port output
0714                             ; value port --
0714                OUTPUT:      
0714   E1                     POP   hl   
0715   59                     LD   e,c   ; save IP
0716   4D                     LD   c,l   
0717   E1                     POP   hl   
0718   ED 69                  OUT   (c),l   
071A   4B                     LD   c,e   ; restore IP
071B   DD E9                  JP   (ix)   
071D                             ; /ret
071D                             ; --
071D                RETURN:      
071D   E1                     POP   hl   ; hl = condition, exit if true
071E   7D                     LD   a,l   
071F   B4                     OR   h   
0720   20 02                  JR   nz,return1   
0722   DD E9                  JP   (ix)   
0724                RETURN1:      
0724   C3 AE 0C               JP   blockEnd   
0727                RECUR:       
0727   E1                     POP   hl   
0728   22 EC 60               LD   (vRecurPtr),hl   
072B   DD E9                  JP   (ix)   
072D                REMAIN:      
072D   2A FA 60               LD   hl,(vRemain)   
0730   E5                     PUSH   hl   
0731   DD E9                  JP   (ix)   
0733                             ; select case from an associative array of cases
0733                             ; bool cases* --
0733                SELECT:      
0733   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0734   D1                     POP   de   ; de = select key
0735   C5                     PUSH   bc   ; save IP
0736   2B                     DEC   hl   ; bc = array length
0737   46                     LD   b,(hl)   
0738   2B                     DEC   hl   
0739   4E                     LD   c,(hl)   
073A   23                     INC   hl   
073B   23                     INC   hl   
073C   18 15                  JR   select2   
073E                SELECT1:      
073E   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
073F   BB                     CP   e   
0740   23                     INC   hl   ; hl++, flags are unaltered
0741   20 0C                  JR   nz,select1a   
0743   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0744   BA                     CP   d   
0745   23                     INC   hl   ; hl++, flags are unaltered
0746   20 08                  JR   nz,select1b   
0748   5E                     LD   e,(hl)   
0749   23                     INC   hl   
074A   56                     LD   d,(hl)   
074B   C1                     POP   bc   
074C   C3 A0 03               JP   go1   
074F                SELECT1A:      
074F   23                     INC   hl   
0750                SELECT1B:      
0750   23                     INC   hl   
0751   23                     INC   hl   
0752   0B                     DEC   bc   
0753                SELECT2:      
0753   79                     LD   a,c   
0754   B0                     OR   b   
0755   20 E7                  JR   nz,select1   
0757   C1                     POP   bc   
0758   DD E9                  JP   (ix)   
075A                             ; /sbb
075A                             ; --
075A                STRINGBEGIN:      
075A   21 FF FF               LD   hl,TRUE   ; string mode = true
075D   22 F2 60               LD   (vStrMode),hl   
0760   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0762                             ; /sbe
0762                             ; -- str*
0762                STRINGEND:      
0762   21 00 00               LD   hl,FALSE   ; string mode = false
0765   22 F2 60               LD   (vStrMode),hl   
0768   2A E8 60               LD   hl,(vBufPtr)   ; append NUL to string
076B   AF                     XOR   a   
076C   77                     LD   (hl),a   
076D   23                     INC   hl   ; hl = string_end*
076E   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0772   11 00 5F               LD   de,BUFFER   ; de = string*
0775   B7                     OR   a   ; bc = size
0776   ED 52                  SBC   hl,de   
0778   44 4D                  LD   bc,hl   
077A   2A EA 60               LD   hl,(vHeapPtr)   ; hl = hstring*
077D   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
077E   D5                     PUSH   de   ; return hstring*
077F   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0781   ED 53 EA 60            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0785   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
0789                STRINGEND1:      
0789   21 00 5F               LD   hl,BUFFER   ; reset vBufPtr
078C   22 E8 60               LD   (vBufPtr),hl   
078F   DD E9                  JP   (ix)   
0791                STRINGLENGTH:      
0791   D1                     POP   de   
0792   21 00 00               LD   hl,0   
0795   18 02                  JR   stringLength2   
0797                STRINGLENGTH1:      
0797   13                     INC   de   
0798   23                     INC   hl   
0799                STRINGLENGTH2:      
0799   1A                     LD   a,(de)   
079A   B7                     OR   a   
079B   20 FA                  JR   nz,stringLength1   
079D                STRINGLENGTH3:      
079D   E5                     PUSH   hl   
079E   DD E9                  JP   (ix)   
07A0                             ; /sc string compare
07A0                             ; string1* string2* -- bool
07A0                             ; Compares two null terminated strings.
07A0                STRINGCOMPARE:      
07A0   D1                     POP   de   
07A1   E1                     POP   hl   
07A2                STRINGCOMPARE1:      
07A2   1A                     LD   a,(de)   
07A3   BE                     CP   (hl)   
07A4   20 07                  JR   nz,stringCompare2   
07A6   B7                     OR   a   
07A7   28 09                  JR   z,stringCompare3   
07A9   13                     INC   de   
07AA   23                     INC   hl   
07AB   18 F5                  JR   stringCompare1   
07AD                STRINGCOMPARE2:      
07AD   21 00 00               LD   hl,FALSE   
07B0   18 03                  JR   stringCompare4   
07B2                STRINGCOMPARE3:      
07B2   21 FF FF               LD   hl,TRUE   
07B5                STRINGCOMPARE4:      
07B5   E5                     PUSH   hl   
07B6   DD E9                  JP   (ix)   
07B8                             ; /var
07B8                             ; --
07B8                VARIABLES:      
07B8   21 00 60               LD   hl,VARS   
07BB   C3 C8 0F               JP   constant   
07BE                             ; /voi clear out returned values
07BE                             ; ?? --
07BE                VOID:        
07BE   FD 5D                  LD   e,iyl   
07C0   FD 54                  LD   d,iyh   
07C2   EB                     EX   de,hl   
07C3   F9                     LD   sp,hl   
07C4   DD E9                  JP   (ix)   
07C6                             ; /wrd
07C6                WORDMODE:      
07C6   3E 02                  LD   a,2   
07C8   C3 BE 06               JP   byteMode1   
07CB                             ; /xor
07CB                XOR:         
07CB   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07CC                XOR1:        
07CC   E1                     POP   hl   
07CD   7B                     LD   a,e   
07CE   AD                     XOR   l   
07CF   6F                     LD   l,a   
07D0   7A                     LD   a,d   
07D1   AC                     XOR   h   
07D2   67                     LD   h,a   
07D3   C3 D8 02               JP   add3   
07D6                             ; /cll clear line
07D6                             ; num --
07D6                CLEARLINE:      
07D6   E1                     POP   hl   
07D7   7D                     LD   a,l   
07D8   E6 03                  AND   $03   
07DA   CD 26 12               CALL   ansiClearLine   
07DD   DD E9                  JP   (ix)   
07DF                             ; /cls clear screen
07DF                             ; --
07DF                CLEARSCREEN:      
07DF   CD 1D 12               CALL   ansiClearScreen   
07E2   DD E9                  JP   (ix)   
07E4                             ; /cmu cursor move
07E4                             ; x dir --
07E4                CURSORMOVE:      
07E4   E1                     POP   hl   
07E5   7D                     LD   a,l   
07E6   E6 03                  AND   $03   
07E8   C6 41                  ADD   a,"A"   
07EA   67                     LD   h,a   
07EB   D1                     POP   de   
07EC   6B                     LD   l,e   
07ED   CD 52 12               CALL   ansiMove   
07F0                CURSORMOVE1:      
07F0   DD E9                  JP   (ix)   
07F2                             ; /cur cursor hide / show
07F2                             ; bool --
07F2                CURSORSHOW:      
07F2   E1                     POP   hl   
07F3   23                     INC   hl   
07F4   7D                     LD   a,l   
07F5   B4                     OR   h   
07F6   3E 68                  LD   a,"h"   
07F8   28 02                  JR   z,cursorShow1   
07FA   3E 6C                  LD   a,"l"   
07FC                CURSORSHOW1:      
07FC   CD 71 12               CALL   ansiCursorShow   
07FF   DD E9                  JP   (ix)   
0801                             ; /cur cursorGo
0801                             ; row column --
0801                CURSORGO:      
0801   D1                     POP   de   
0802   E1                     POP   hl   
0803   62                     LD   h,d   
0804   CD 35 12               CALL   ansiGoto   
0807   DD E9                  JP   (ix)   
0809                             ;*******************************************************************
0809                             ; Monty implementations
0809                             ;*******************************************************************
0809                             ; /rng rangeSrc
0809                             ; begin end step -- src
0809                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0809                RANGESRC:      ; range source: begin, end, step, local: L
0809   CD 9F 03               CALL   go   
080C   00 00                  DW   NUL   
080E   18 08                  DW   rangeSrcM_1817S1372   
0810   12 08                  DW   $+2   
0812   01                     DB   1   
0813   04 62 65 73 4C         .PSTR   "besL"   
0818                RANGESRCM_1817S1372:      
0818   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0819   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
083F   5C 6B 74 7B            DB   "\\kt{"   
0843   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
084C   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0852   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
085B   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0863   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
086D   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0876   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
087B   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
0891   3F 20 25 6B 2F 72 65 63 DB   "? %k/rec"   ; ifte: send to sink note: /rec recur
0899   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08A0   7D                     DB   "}"   
08A1   7D                     DB   "}"   
08A2   00                     DB   0   
08A3                             ; /ai arrayIter
08A3                             ; array* -- src
08A3                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
08A3                ARRAYITER:      
08A3   CD 9F 03               CALL   go   
08A6   00 00                  DW   NUL   
08A8   B0 08                  DW   arrayIterM_1836S1392   
08AA   AC 08                  DW   $+2   
08AC   01                     DB   1   
08AD   02 61 4C               .PSTR   "aL"   
08B0                ARRAYITERM_1836S1392:      
08B0   7B                     DB   "{"   
08B1   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 6E 5D 20 25 4C 3D DB   "[0 /tru %a/aln] %L="   ; init mutable L [index active size]
08C4   5C 6B 74 7B            DB   "\\kt{"   
08C8   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
08D1   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08D7   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
08E0   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08E8   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08EF   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08F8   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
0901   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
091A   3F 20 25 6B 2F 72 65 63 DB   "? %k/rec"   ; ifte: send to sink note: /rec recur
0922   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0929   7D                     DB   "}"   
092A   7D                     DB   "}"   
092B   00                     DB   0   
092C                             ; /sit stringIter
092C                             ; string* -- src
092C                          ;*Macro unroll: FUNC stringIter, 1, "sL"
092C                STRINGITER:      
092C   CD 9F 03               CALL   go   
092F   00 00                  DW   NUL   
0931   39 09                  DW   stringIterM_1855S1412   
0933   35 09                  DW   $+2   
0935   01                     DB   1   
0936   02 73 4C               .PSTR   "sL"   
0939                STRINGITERM_1855S1412:      
0939   7B                     DB   "{"   
093A   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
0946   5C 6B 74 7B            DB   "\\kt{"   
094A   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0953   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
095A   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0963   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
096B   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0972   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
0985   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
098E   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0995   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
09AB   3F 20 25 6B 2F 72 65 63 DB   "? %k/rec"   ; ifte: call sink note: /rec recur
09B3   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
09BA   7D                     DB   "}"   
09BB   7D                     DB   "}"   
09BC   00                     DB   0   
09BD                             ; /map map
09BD                             ; src func -- src1
09BD                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
09BD                MAP:         ; map: source, function
09BD   CD 9F 03               CALL   go   
09C0   00 00                  DW   NUL   
09C2   CA 09                  DW   mapM_1875S1434   
09C4   C6 09                  DW   $+2   
09C6   00                     DB   0   
09C7   02 73 66               .PSTR   "sf"   
09CA                MAPM_1875S1434:      
09CA   7B                     DB   "{"   
09CB   5C 6B 74 7B            DB   "\\kt{"   
09CF   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
09D8   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09DC   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09E1   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09ED   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09F5   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09FC   7D                     DB   "}"   
09FD   7D                     DB   "}"   
09FE   00                     DB   0   
09FF                             ; /ft filter
09FF                             ; src pred -- src1
09FF                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09FF                FILTER:      ; filter: source, predicate, local: T
09FF   CD 9F 03               CALL   go   
0A02   00 00                  DW   NUL   
0A04   0D 0A                  DW   filterM_1889S1449   
0A06   08 0A                  DW   $+2   
0A08   01                     DB   1   
0A09   03 73 70 54            .PSTR   "spT"   
0A0D                FILTERM_1889S1449:      
0A0D   7B                     DB   "{"   
0A0E   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A14   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A18   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A1C   5B                     DB   "["   
0A1D   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
0A2C   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A34   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
0A3A   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0A3F   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A55   3F                     DB   "?"   
0A56   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A5D   7D                     DB   "}"   
0A5E   7D                     DB   "}"   
0A5F   00                     DB   0   
0A60                             ; /scn scan1
0A60                             ; src init reducer -- src1
0A60                             ; where reducer is a function like: \\da00bbLi4u
0A60                          ;*Macro unroll: FUNC scan1, 1, "sirA"                    ; src, init, reducer
0A60                SCAN1:       ; src, init, reducer
0A60   CD 9F 03               CALL   go   
0A63   00 00                  DW   NUL   
0A65   6F 0A                  DW   scan1M_1908S1469   
0A67   69 0A                  DW   $+2   
0A69   01                     DB   1   
0A6A   04 73 69 72 41         .PSTR   "sirA"   
0A6F                SCAN1M_1908S1469:      
0A6F   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A70   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A77   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A7B   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A7F   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A84   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A9F   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0AA7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AAE   7D                     DB   "}"   
0AAF   7D                     DB   "}"   
0AB0   00                     DB   0   
0AB1                             ; /for forEach
0AB1                             ; src proc --
0AB1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0AB1                FOREACH:      ; forEach: source, procedure, local: T
0AB1   CD 9F 03               CALL   go   
0AB4   00 00                  DW   NUL   
0AB6   BF 0A                  DW   forEachM_1922S1484   
0AB8   BA 0A                  DW   $+2   
0ABA   01                     DB   1   
0ABB   03 73 70 54            .PSTR   "spT"   
0ABF                FOREACHM_1922S1484:      
0ABF   7B                     DB   "{"   
0AC0   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AC6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0ACA   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0AD3   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AD8   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AEA   3F                     DB   "?"   ; ifte:
0AEB   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AF4   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AFB   7D                     DB   "}"   
0AFC   00                     DB   0   
0AFD                             ; /src source
0AFD                             ; block* -- src
0AFD                          ;*Macro unroll: FUNC source, 0, "f"                      ; :f block
0AFD                SOURCE:      ; :f block
0AFD   CD 9F 03               CALL   go   
0B00   00 00                  DW   NUL   
0B02   09 0B                  DW   sourceM_1936S1499   
0B04   06 0B                  DW   $+2   
0B06   00                     DB   0   
0B07   01 66                  .PSTR   "f"   
0B09                SOURCEM_1936S1499:      
0B09   7B                     DB   "{"   
0B0A   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0B0E   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0B17   5C 64 74 7B            DB   "\\dt{"   
0B1B   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0B2E   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B35   7D                     DB   "}"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B38                PRINTARRAY:      
0B38   CD 9F 03               CALL   go   
0B3B   00 00                  DW   NUL   
0B3D   46 0B                  DW   printArrayM_1946S1510   
0B3F   41 0B                  DW   $+2   
0B41   02                     DB   2   
0B42   03 61 62 63            .PSTR   "abc"   
0B46                PRINTARRAYM_1946S1510:      
0B46   7B                     DB   "{"   
0B47   27 5B 20 27 2E 73 20 25 61 2F 61 6C 6E 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/aln%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B80   7D                     DB   "}"   
0B81   00                     DB   0   
0B82                             ;*******************************************************************
0B82                             ; implementations continued
0B82                             ;*******************************************************************
0B82                COMMA:       
0B82   CD E6 0F               CALL   cmdTable   
0B85   63 00                  DB   "c",NUL   ; .c print char
0B87   91 0B                  DW   readChar   
0B89   73 00                  DB   "s",NUL   ; .s print string
0B8B   9A 0B                  DW   readString   
0B8D   00 00                  DW   NUL   ; .  print number, fall through
0B8F   BC 0B                  DW   readNumber   
0B91                READCHAR:      
0B91   CD 81 00               CALL   getchar   
0B94   26 00                  LD   h,0   
0B96   6F                     LD   l,a   
0B97   E5                     PUSH   hl   
0B98   DD E9                  JP   (ix)   
0B9A                READSTRING:      
0B9A   ED 5B EA 60            LD   de,(vHeapPtr)   
0B9E   D5                     PUSH   de   ; return start of string
0B9F                READSTRING1:      
0B9F   CD 81 00               CALL   getchar   
0BA2   FE 0D                  CP   "\r"   
0BA4   28 0D                  JR   z,readString2   
0BA6   12                     LD   (de),a   
0BA7   13                     INC   de   
0BA8   3A F1 60               LD   a,(vEcho)   
0BAB   3C                     INC   a   
0BAC   20 F1                  JR   nz,readString1   
0BAE   CD 85 00               CALL   putchar   
0BB1   18 EC                  JR   readString1   
0BB3                READSTRING2:      
0BB3   AF                     XOR   a   
0BB4   12                     LD   (de),a   
0BB5   13                     INC   de   
0BB6   ED 53 EA 60            LD   (vHeapPtr),de   
0BBA   DD E9                  JP   (ix)   
0BBC                READNUMBER:      
0BBC   DD E5                  PUSH   ix   
0BBE                          ;*Macro unroll:  PERFORM readString
0BBE   DD 21 C5 0B            LD   ix,performM_1990S1559   
0BC2   C3 9A 0B               JP   readString   
0BC5                PERFORMM_1990S1559:      
0BC5   60 69                  LD   hl,bc   ; save bc, hl = string*
0BC7   E3                     EX   (sp),hl   
0BC8   22 EA 60               LD   (vHeapPtr),hl   ; restore heap* to before string
0BCB   44 4D                  LD   bc,hl   
0BCD   0A                     LD   a,(bc)   
0BCE   FE 2D                  CP   "-"   
0BD0   28 11                  JR   z,readNumber1   
0BD2   FE 24                  CP   "$"   
0BD4   28 17                  JR   z,readNumber2   
0BD6   FE 30                  CP   "0"   
0BD8   30 09                  JR   nc,readNumber1   
0BDA   FE 3A                  CP   "9"+1   
0BDC   38 05                  JR   c,readNumber1   
0BDE   21 00 00               LD   hl,0   
0BE1   18 12                  JR   readNumber3   
0BE3                READNUMBER1:      
0BE3                          ;*Macro unroll:  PERFORM num
0BE3   DD 21 EA 0B            LD   ix,performM_2007S1576   
0BE7   C3 7E 0C               JP   num   
0BEA                PERFORMM_2007S1576:      
0BEA   E1                     POP   hl   
0BEB   18 08                  JR   readNumber3   
0BED                READNUMBER2:      
0BED                          ;*Macro unroll:  PERFORM hexNum
0BED   DD 21 F4 0B            LD   ix,performM_2011S1580   
0BF1   C3 05 0C               JP   hexNum   
0BF4                PERFORMM_2011S1580:      
0BF4   E1                     POP   hl   
0BF5                READNUMBER3:      
0BF5   C1                     POP   bc   
0BF6   DD E1                  POP   ix   
0BF8   E5                     PUSH   hl   
0BF9   DD E9                  JP   (ix)   
0BFB                             ; ~ bitwise invert
0BFB                TILDE:       
0BFB                INVERT:      
0BFB   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BFC   7D                     LD   a,l   
0BFD   2F                     CPL      
0BFE   6F                     LD   l,a   
0BFF   7C                     LD   a,h   
0C00   2F                     CPL      
0C01   67                     LD   h,a   
0C02   C3 D8 02               JP   add3   
0C05                             ; $ hex                         ; 22
0C05                DOLLAR:      
0C05                HEXNUM:      
0C05   21 00 00               LD   hl,0   ; Clear hl to accept the number
0C08                HEXNUM1:      
0C08   03                     INC   bc   
0C09   0A                     LD   a,(bc)   ; Get the character which is a numeral
0C0A   CB 77                  BIT   6,a   ; is it uppercase alpha?
0C0C   28 02                  JR   z,hexnum2   ; no a decimal
0C0E   D6 07                  SUB   7   ; sub 7  to make $a - $F
0C10                HEXNUM2:      
0C10   D6 30                  SUB   $30   ; form decimal digit
0C12   DA A0 0C               JP   c,num2   
0C15   FE 10                  CP   $0F+1   
0C17   D2 A0 0C               JP   nc,num2   
0C1A   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0C1B   29                     ADD   hl,hl   ; 4X
0C1C   29                     ADD   hl,hl   ; 8X
0C1D   29                     ADD   hl,hl   ; 16X
0C1E   85                     ADD   a,l   ; add into bottom of hl
0C1F   6F                     LD   l,a   
0C20   18 E6                  JR   hexnum1   
0C22                             ; ? if                            23
0C22                             ; condition then else -- value
0C22                QUESTION:      
0C22                IF:          
0C22   D1                     POP   de   ; de = else
0C23   E1                     POP   hl   ; hl = then
0C24   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0C25   7C                     LD   a,h   
0C26   B5                     OR   l   
0C27   E1                     POP   hl   ; hl = then
0C28   CA A0 03               JP   z,go1   ; if z de = else
0C2B   EB                     EX   de,hl   ; condition = false, de = then
0C2C   C3 A0 03               JP   go1   
0C2F                             ; string                        ;38
0C2F                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C2F                QUOTE:       
0C2F                STRING:      
0C2F   2A EA 60               LD   hl,(vHeapPtr)   ; hl = heap*
0C32   E5                     PUSH   hl   ; save start of string
0C33   0A                     LD   a,(bc)   
0C34   5F                     LD   e,a   ; e = matching terminator
0C35   03                     INC   bc   ; point to next char
0C36   18 03                  JR   string2   
0C38                STRING1:      
0C38   77                     LD   (hl),a   
0C39   23                     INC   hl   ; increase count
0C3A   03                     INC   bc   ; point to next char
0C3B                STRING2:      
0C3B   0A                     LD   a,(bc)   
0C3C   BB                     CP   e   ; is it the string terminator
0C3D   28 02                  JR   z,string3   
0C3F   18 F7                  JR   string1   
0C41                STRING3:      
0C41   AF                     XOR   a   ; write NUL to terminate string
0C42   77                     LD   (hl),a   ; hl = end of string
0C43   23                     INC   hl   
0C44   22 EA 60               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C47   DD E9                  JP   (ix)   
0C49                             ; %a .. %z                      43
0C49                             ; -- value
0C49                             ; returns value of arg
0C49                PERCENT:      
0C49                ARG:         
0C49   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C4C   FD 56 05               LD   d,(iy+5)   
0C4F   EB                     EX   de,hl   
0C50   7D                     LD   a,l   ; arg_list* == null, skip
0C51   B4                     OR   h   
0C52   28 1A                  JR   z,arg0a   
0C54   23                     INC   hl   ; a = num_args, hl = arg_list*
0C55   7E                     LD   a,(hl)   
0C56   23                     INC   hl   
0C57   B7                     OR   a   
0C58   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C5A   5F                     LD   e,a   ; e = a = num_args
0C5B   03                     INC   bc   ; a = next char = dollar_name
0C5C   0A                     LD   a,(bc)   
0C5D   C5                     PUSH   bc   ; save IP
0C5E   43                     LD   b,e   ; b = e = num_args
0C5F   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C62   FD 56 03               LD   d,(iy+3)   
0C65                ARG0:        
0C65   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C66   1B                     DEC   de   
0C67   BE                     CP   (hl)   
0C68   28 09                  JR   z,arg1   
0C6A   23                     INC   hl   ; hl = next arg_list*
0C6B   10 F8                  DJNZ   arg0   
0C6D   C1                     POP   bc   ; no match, restore IP
0C6E                ARG0A:       
0C6E   11 00 00               LD   de,0   ; return 0
0C71   18 08                  JR   arg1a   
0C73                ARG1:        
0C73   C1                     POP   bc   ; restore IP
0C74   EB                     EX   de,hl   ; hl = arg*
0C75   22 F8 60               LD   (vPointer),hl   ; store arg* in setter
0C78   5E                     LD   e,(hl)   
0C79   23                     INC   hl   
0C7A   56                     LD   d,(hl)   ; de = arg
0C7B                ARG1A:       
0C7B   D5                     PUSH   de   ; push arg
0C7C   DD E9                  JP   (ix)   
0C7E                             ; 0..9 number                   37
0C7E                NUM:         
0C7E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C81   0A                     LD   a,(bc)   ; Get numeral or -
0C82   FE 2D                  CP   "-"   
0C84   20 01                  JR   nz,num0   
0C86   03                     INC   bc   ; move to next char, no flags affected
0C87                NUM0:        
0C87   08                     EX   af,af'   ; save zero flag = 0 for later
0C88                NUM1:        
0C88   0A                     LD   a,(bc)   ; read digit
0C89   D6 30                  SUB   "0"   ; less than 0?
0C8B   38 13                  JR   c,num2   ; not a digit, exit loop
0C8D   FE 0A                  CP   10   ; greater that 9?
0C8F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C91   03                     INC   bc   ; inc IP
0C92   54 5D                  LD   de,hl   ; multiply hl * 10
0C94   29                     ADD   hl,hl   
0C95   29                     ADD   hl,hl   
0C96   19                     ADD   hl,de   
0C97   29                     ADD   hl,hl   
0C98   85                     ADD   a,l   ; add digit in a to hl
0C99   6F                     LD   l,a   
0C9A   3E 00                  LD   a,0   
0C9C   8C                     ADC   a,h   
0C9D   67                     LD   h,a   
0C9E   18 E8                  JR   num1   
0CA0                NUM2:        
0CA0   0B                     DEC   bc   
0CA1   08                     EX   af,af'   ; restore zero flag
0CA2   20 07                  JR   nz,num3   
0CA4   EB                     EX   de,hl   ; negate the value of hl
0CA5   21 00 00               LD   hl,0   
0CA8   B7                     OR   a   ; jump to sub2
0CA9   ED 52                  SBC   hl,de   
0CAB                NUM3:        
0CAB   E5                     PUSH   hl   ; Put the number on the stack
0CAC   DD E9                  JP   (ix)   ; and process the next character
0CAE                             ; }                               58
0CAE                RBRACE:      
0CAE                BLOCKEND:      
0CAE   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0CB1   FD 56 01               LD   d,(iy+1)   
0CB4   ED 53 04 61            LD   (vTemp1),de   
0CB8   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0CBB   FD 56 07               LD   d,(iy+7)   
0CBE   ED 53 06 61            LD   (vTemp2),de   
0CC2   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0CC5   FD 56 03               LD   d,(iy+3)   
0CC8   EB                     EX   de,hl   
0CC9   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0CCC   FD 56 01               LD   d,(iy+1)   
0CCF   13                     INC   de   ; for carry flag <=
0CD0   B7                     OR   a   
0CD1   ED 52                  SBC   hl,de   
0CD3   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0CD5   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0CD7   FD 5D                  LD   e,iyl   
0CD9   21 08 00               LD   hl,8   
0CDC   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0CDD   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0CDE   18 0C                  JR   blockEnd2   
0CE0                BLOCKEND1:      ; same scope
0CE0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0CE3   FD 56 03               LD   d,(iy+3)   
0CE6   EB                     EX   de,hl   
0CE7   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CE9   FD 5D                  LD   e,iyl   
0CEB   EB                     EX   de,hl   
0CEC                BLOCKEND2:      
0CEC   44 4D                  LD   bc,hl   ; bc = hl = BP
0CEE   B7                     OR   a   ; hl = BP - SP = count
0CEF   ED 72                  SBC   hl,sp   
0CF1   7D                     LD   a,l   
0CF2   B4                     OR   h   
0CF3   28 09                  JR   z,blockEnd3   
0CF5   C5                     PUSH   bc   ; bc = count, hl = BP
0CF6   44 4D                  LD   bc,hl   
0CF8   E1                     POP   hl   
0CF9   2B                     DEC   hl   ; hl = BP-1
0CFA   1B                     DEC   de   ; de = args*-1
0CFB   ED B8                  LDDR      
0CFD   13                     INC   de   
0CFE                BLOCKEND3:      
0CFE   EB                     EX   de,hl   ; sp = de = new tos*
0CFF   F9                     LD   sp,hl   
0D00   ED 4B 06 61            LD   bc,(vTemp2)   
0D04   FD 2A 04 61            LD   iy,(vTemp1)   
0D08   ED 5B EC 60            LD   de,(vRecurPtr)   ; de = recur vector
0D0C   7B                     LD   a,e   ; check for NUL
0D0D   B2                     OR   d   
0D0E   20 02                  JR   nz,blockEnd4   
0D10   DD E9                  JP   (ix)   
0D12                BLOCKEND4:      
0D12   21 00 00               LD   hl,0   ; clear recur vector
0D15   22 EC 60               LD   (vRecurPtr),hl   
0D18   C3 A0 03               JP   go1   ; execute de
0D1B                GOBLOCK:      
0D1B   ED 53 04 61            LD   (vTemp1),de   ; save de
0D1F   21 00 5E               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0D22   FD 54                  LD   d,iyh   
0D24   FD 5D                  LD   e,iyl   
0D26   B7                     OR   a   ; if stack* == BP then this is the root_scope
0D27   ED 52                  SBC   hl,de   
0D29   ED 5B 04 61            LD   de,(vTemp1)   ; restore de
0D2D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0D2E   B4                     OR   h   
0D2F   3E 00                  LD   a,0   
0D31   28 6A                  JR   z,goFunc8   
0D33   C5                     PUSH   bc   ; push IP
0D34   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0D37   FD 46 05               LD   b,(iy+5)   
0D3A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0D3D   FD 66 03               LD   h,(iy+3)   
0D40                GOBLOCK2:      
0D40   C5                     PUSH   bc   ; arg_list*
0D41   E5                     PUSH   hl   ; first_arg*
0D42   FD E5                  PUSH   iy   ; push BP
0D44   FD 21 00 00            LD   iy,0   ; BP = SP
0D48   FD 39                  ADD   iy,sp   
0D4A                GOBLOCK3:      
0D4A   42 4B                  LD   bc,de   ; bc = de = block*-1
0D4C   DD E9                  JP   (ix)   
0D4E                GOFUNC:      ; execute func
0D4E   EB                     EX   de,hl   ; hl = func*
0D4F   5E                     LD   e,(hl)   ; de = partial_array*
0D50   23                     INC   hl   
0D51   56                     LD   d,(hl)   
0D52   23                     INC   hl   
0D53   7B                     LD   a,e   ; if partial_array* == null skip
0D54   B2                     OR   d   
0D55   28 21                  JR   z,goFunc3   
0D57   ED 43 04 61            LD   (vTemp1),bc   
0D5B   22 06 61               LD   (vTemp2),hl   ; save bc,hl
0D5E   EB                     EX   de,hl   ; hl = partial_array*
0D5F   2B                     DEC   hl   ; bc = count
0D60   46                     LD   b,(hl)   
0D61   2B                     DEC   hl   
0D62   4E                     LD   c,(hl)   
0D63   23                     INC   hl   ; hl = array data*
0D64   23                     INC   hl   
0D65   18 06                  JR   goFunc2   ; push each item on stack
0D67                GOFUNC1:      
0D67   5E                     LD   e,(hl)   ; de = partial item
0D68   23                     INC   hl   
0D69   56                     LD   d,(hl)   
0D6A   23                     INC   hl   
0D6B   D5                     PUSH   de   ; push on stack
0D6C   0B                     DEC   bc   
0D6D                GOFUNC2:      
0D6D   79                     LD   a,c   ; if count != 0 then loop
0D6E   B0                     OR   b   
0D6F   20 F6                  JR   nz,goFunc1   
0D71   ED 4B 04 61            LD   bc,(vTemp1)   ; restore bc
0D75   2A 06 61               LD   hl,(vTemp2)   ; restore hl
0D78                GOFUNC3:      
0D78   5E                     LD   e,(hl)   ; de = block*
0D79   23                     INC   hl   
0D7A   56                     LD   d,(hl)   
0D7B   23                     INC   hl   
0D7C   ED 53 04 61            LD   (vTemp1),de   ; save block*
0D80   5E                     LD   e,(hl)   ; de = arg_list*
0D81   23                     INC   hl   
0D82   56                     LD   d,(hl)   
0D83   23                     INC   hl   
0D84   EB                     EX   de,hl   ; hl = arg_list*
0D85   ED 5B 04 61            LD   de,(vTemp1)   ; restore de = block*
0D89   7D                     LD   a,l   ; if arg_list* == null a = 0
0D8A   B4                     OR   h   
0D8B   20 03                  JR   nz,goFunc4   
0D8D   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D8E   18 0D                  JR   goFunc8   
0D90                GOFUNC4:      ; allocate locals
0D90   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D91   18 03                  JR   goFunc6   
0D93                GOFUNC5:      ; loop
0D93   3B                     DEC   sp   
0D94   3B                     DEC   sp   
0D95   3D                     DEC   a   
0D96                GOFUNC6:      
0D96   B7                     OR   a   
0D97   20 FA                  JR   nz,goFunc5   ; end loop
0D99                GOFUNC7:      
0D99   23                     INC   hl   ; a = num_args* x 2
0D9A   7E                     LD   a,(hl)   
0D9B   2B                     DEC   hl   
0D9C   87                     ADD   a,a   ; a *= 2
0D9D                GOFUNC8:      
0D9D   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D9E   44 4D                  LD   bc,hl   
0DA0   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0DA3   85                     ADD   a,l   
0DA4   6F                     LD   l,a   
0DA5   39                     ADD   hl,sp   
0DA6   18 98                  JR   goBlock2   
0DA8                             ; =                              21
0DA8                             ; value _oldValue --            ; uses address in vPointer 15
0DA8                ASSIGN:      
0DA8   E1                     POP   hl   ; discard last accessed value
0DA9   E1                     POP   hl   ; hl = new value
0DAA                ASSIGN0:      
0DAA   EB                     EX   de,hl   ; de = new value
0DAB   2A F8 60               LD   hl,(vPointer)   
0DAE                ASSIGN1:      ; entry point from defineEnd
0DAE   73                     LD   (hl),e   
0DAF   3A EE 60               LD   a,(vDataWidth)   
0DB2   3D                     DEC   a   ; is it byte?
0DB3   28 02                  JR   z,assign2   
0DB5   23                     INC   hl   
0DB6   72                     LD   (hl),d   
0DB7                ASSIGN2:      
0DB7   DD E9                  JP   (ix)   
0DB9                             ; hl = value1, de = value2
0DB9                             ; hl = result
0DB9                EQUALS:      
0DB9   B7                     OR   a   ; reset the carry flag
0DBA   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0DBC   28 16                  JR   z,true1   
0DBE   18 1A                  JR   false1   
0DC0                NOTEQUALS:      
0DC0   B7                     OR   a   ; reset the carry flag
0DC1   ED 52                  SBC   hl,de   
0DC3   20 0F                  JR   nz,true1   
0DC5   18 13                  JR   false1   
0DC7                             ; hl = value1 de = value2
0DC7                             ; hl = result
0DC7                LESSTHANEQ:      
0DC7   B7                     OR   a   
0DC8   ED 52                  SBC   hl,de   
0DCA   18 05                  JR   lessthan1   
0DCC                             ; hl = value1 de = value2
0DCC                             ; hl = result
0DCC                LESSTHAN:      
0DCC   B7                     OR   a   
0DCD   ED 52                  SBC   hl,de   
0DCF   28 09                  JR   z,false1   
0DD1                LESSTHAN1:      
0DD1   FA DA 0D               JP   m,false1   
0DD4                TRUE1:       
0DD4   21 FF FF               LD   hl,TRUE   
0DD7   E5                     PUSH   hl   
0DD8   DD E9                  JP   (ix)   
0DDA                NULL1:       
0DDA                FALSE1:      
0DDA   21 00 00               LD   hl,FALSE   
0DDD   E5                     PUSH   hl   
0DDE   DD E9                  JP   (ix)   
0DE0                SPREAD:      
0DE0   E1                     POP   hl   ; hl = array*
0DE1   ED 43 04 61            LD   (vTemp1),bc   ; save bc
0DE5   2B                     DEC   hl   ; bc = length
0DE6   46                     LD   b,(hl)   
0DE7   2B                     DEC   hl   
0DE8   4E                     LD   c,(hl)   
0DE9   23                     INC   hl   ; move back to array 0
0DEA   23                     INC   hl   
0DEB   18 0D                  JR   spread3   
0DED                SPREAD1:      
0DED   5E                     LD   e,(hl)   ; e = lsb data at hl
0DEE   23                     INC   hl   
0DEF   3A EE 60               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DF2   57                     LD   d,a   
0DF3   15                     DEC   d   
0DF4   28 02                  JR   z,spread2   
0DF6   56                     LD   d,(hl)   ; d = msb data at hl
0DF7   23                     INC   hl   
0DF8                SPREAD2:      
0DF8   D5                     PUSH   de   ; return de
0DF9   0B                     DEC   bc   ; count--
0DFA                SPREAD3:      
0DFA   79                     LD   a,c   ; exit loop if bc == 0
0DFB   B0                     OR   b   
0DFC   20 EF                  JR   nz,spread1   
0DFE   ED 4B 04 61            LD   bc,(vTemp1)   ; restore bc
0E02   DD E9                  JP   (ix)   
0E04                             ; shiftLeft
0E04                             ; value count <<
0E04                             ; count variable <<=
0E04                SHIFTLEFT:      
0E04   E1                     POP   hl   ; de = arg_a, hl = arg_b
0E05   D1                     POP   de   
0E06   03                     INC   bc   
0E07   0A                     LD   a,(bc)   
0E08   FE 3D                  CP   "="   
0E0A   28 02                  JR   z,shiftLeft2   
0E0C   0B                     DEC   bc   
0E0D   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0E0E                SHIFTLEFT2:      
0E0E   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0E12   43                     LD   b,e   ; b = loop counter
0E13   04                     INC   b   ; test for counter=0 case
0E14   18 01                  JR   shiftLeft4   
0E16                SHIFTLEFT3:      
0E16   29                     ADD   hl,hl   ; left shift hl
0E17                SHIFTLEFT4:      
0E17   10 FD                  DJNZ   shiftLeft3   
0E19   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
0E1D   C3 9D 02               JP   sub3   
0E20                             ; shiftRight
0E20                             ; value count >>
0E20                             ; count variable >>=
0E20                SHIFTRIGHT:      
0E20   E1                     POP   hl   ; de = arg_a, hl = arg_b
0E21   D1                     POP   de   
0E22   03                     INC   bc   
0E23   0A                     LD   a,(bc)   
0E24   FE 3D                  CP   "="   
0E26   28 02                  JR   z,shiftRight2   
0E28   0B                     DEC   bc   
0E29   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0E2A                SHIFTRIGHT2:      
0E2A   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0E2E   43                     LD   b,e   ; b = loop counter
0E2F   04                     INC   b   ; test for counter=0 case
0E30   18 04                  JR   shiftRight4   
0E32                SHIFTRIGHT3:      
0E32   CB 3C                  SRL   h   ; right shift hl
0E34   CB 1D                  RR   l   
0E36                SHIFTRIGHT4:      
0E36   10 FA                  DJNZ   shiftRight3   
0E38   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
0E3C   C3 9D 02               JP   sub3   
0E3F                             ; division subroutine.
0E3F                             ; bc: divisor, de: dividend, hl: remainder
0E3F                DIVIDE:      
0E3F   21 00 00               LD   hl,0   ; zero the remainder
0E42   3E 10                  LD   a,16   ; loop counter
0E44                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0E44   CB 21                  SLA   c   
0E46   CB 10                  RL   b   
0E48   ED 6A                  ADC   hl,hl   
0E4A   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E4C   38 03                  JR   c,divide2   
0E4E   0C                     INC   c   
0E4F   18 01                  JR   divide3   
0E51                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E51   19                     ADD   hl,de   
0E52                DIVIDE3:      
0E52   3D                     DEC   a   
0E53   20 EF                  JR   nz,divide1   
0E55   50 59                  LD   de,bc   ; result from bc to de
0E57   C9                     RET      
0E58                DOTNEXT:      
0E58   3A F2 60               LD   a,(vStrMode)   ; if string mode then exit
0E5B   3C                     INC   a   
0E5C   20 02                  JR   nz,dotNext1   
0E5E   DD E9                  JP   (ix)   
0E60                DOTNEXT1:      
0E60   11 00 5F               LD   de,BUFFER   
0E63   2A E8 60               LD   hl,(vBufPtr)   
0E66   36 00                  LD   (hl),0   ; store NUL at end of string
0E68   ED 53 E8 60            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E6C   EB                     EX   de,hl   ; hl = BUFFER
0E6D   CD 23 10               CALL   putstr   
0E70   DD E9                  JP   (ix)   
0E72                             ; arg_list - parses arg_list e.g. ab:c
0E72                             ; -- arg_list*
0E72                PARSEARGS:      
0E72   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E75   2A EA 60               LD   hl,(vHeapPtr)   ; hl = heap*
0E78   E5                     PUSH   hl   ; save start of arg_list
0E79   23                     INC   hl   ; skip length fields to start of string
0E7A   23                     INC   hl   
0E7B   03                     INC   bc   ; point to next char
0E7C                PARSEARGS1:      
0E7C   0A                     LD   a,(bc)   
0E7D   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E7F   20 03                  JR   nz,parseArgs1a   
0E81   14                     INC   d   ; non zero value local count acts as flag
0E82   18 10                  JR   parseArgs3   
0E84                PARSEARGS1A:      
0E84   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E86   38 0F                  JR   c,parseArgs4   
0E88   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E8A   30 0B                  JR   nc,parseArgs4   
0E8C                PARSEARGS2:      
0E8C   77                     LD   (hl),a   
0E8D   23                     INC   hl   
0E8E   1C                     INC   e   ; increase arg count
0E8F   AF                     XOR   a   
0E90   B2                     OR   d   
0E91   28 01                  JR   z,parseArgs3   
0E93   14                     INC   d   ; if d > 0 increase local count
0E94                PARSEARGS3:      
0E94   03                     INC   bc   ; point to next char
0E95   18 E5                  JR   parseArgs1   
0E97                PARSEARGS4:      
0E97   0B                     DEC   bc   
0E98   AF                     XOR   a   
0E99   B2                     OR   d   
0E9A   28 01                  JR   z,parseArgs5   
0E9C   15                     DEC   d   ; remove initial inc
0E9D                PARSEARGS5:      
0E9D   23                     INC   hl   
0E9E   22 EA 60               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0EA1   E1                     POP   hl   ; hl = start of arg_list
0EA2   72                     LD   (hl),d   ; write number of locals at start - 1
0EA3   23                     INC   hl   
0EA4   73                     LD   (hl),e   ; write number of args + locals at start - 2
0EA5   2B                     DEC   hl   
0EA6   E3                     EX   (sp),hl   
0EA7   E9                     JP   (hl)   
0EA8                             ; create block: parses block e.g. 00bbIC4uLi4g
0EA8                             ; -- block*
0EA8                PARSEBLOCK:      
0EA8   C5                     PUSH   bc   ; return pointer to first { of block
0EA9   03                     INC   bc   
0EAA   16 01                  LD   d,1   ; nesting: count first parenthesis
0EAC                PARSEBLOCK1:      ; Skip to end of definition
0EAC   0A                     LD   a,(bc)   ; Get the next character
0EAD   03                     INC   bc   ; Point to next character
0EAE   FE 21                  CP   " " + 1   ; ignore whitespace
0EB0   38 FA                  JR   c,parseBlock1   
0EB2   FE 27                  CP   "'"   ; quote char
0EB4   28 0F                  JR   z,parseBlock2   
0EB6   FE 22                  CP   DQ   ; double quote char
0EB8   28 0B                  JR   z,parseBlock2   
0EBA   FE 60                  CP   "`"   ; grave char
0EBC   28 07                  JR   z,parseBlock2   
0EBE   CB 7A                  BIT   7,d   
0EC0   20 EA                  JR   nz,parseBlock1   
0EC2   C3 CB 0E               JP   parseBlock3   
0EC5                PARSEBLOCK2:      
0EC5   3E 80                  LD   a,$80   
0EC7   AA                     XOR   d   
0EC8   57                     LD   d,a   
0EC9   18 E1                  JR   parseBlock1   
0ECB                PARSEBLOCK3:      
0ECB   FE 28                  CP   "("   
0ECD   28 16                  JR   z,parseBlock4   
0ECF   FE 7B                  CP   "{"   
0ED1   28 12                  JR   z,parseBlock4   
0ED3   FE 5B                  CP   "["   
0ED5   28 0E                  JR   z,parseBlock4   
0ED7   FE 29                  CP   ")"   
0ED9   28 0D                  JR   z,parseBlock5   
0EDB   FE 7D                  CP   "}"   
0EDD   28 09                  JR   z,parseBlock5   
0EDF   FE 5D                  CP   "]"   
0EE1   28 05                  JR   z,parseBlock5   
0EE3   18 C7                  JR   parseBlock1   
0EE5                PARSEBLOCK4:      
0EE5   14                     INC   d   
0EE6   18 C4                  JR   parseBlock1   
0EE8                PARSEBLOCK5:      
0EE8   15                     DEC   d   
0EE9   20 C1                  JR   nz,parseBlock1   ; get the next element
0EEB   60 69                  LD   hl,bc   ; hl = IP
0EED   11 22 61               LD   de,HEAP   ; is IP pointing to object in heap
0EF0   B7                     OR   a   ; IP - HEAP
0EF1   ED 52                  SBC   hl,de   
0EF3   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EF5   28 1C                  JR   z,parseBlock6   
0EF7   60 69                  LD   hl,bc   ; hl = IP
0EF9   D1                     POP   de   ; de = block*
0EFA   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0EFE   B7                     OR   a   ; bc = size
0EFF   ED 52                  SBC   hl,de   
0F01   44 4D                  LD   bc,hl   
0F03   EB                     EX   de,hl   ; hl = block* de = heap*
0F04   ED 5B EA 60            LD   de,(vHeapPtr)   
0F08   D5                     PUSH   de   ; return hblock*
0F09   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0F0B   ED 53 EA 60            LD   (vHeapPtr),de   ; heap* += size
0F0F   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
0F13                PARSEBLOCK6:      
0F13   0B                     DEC   bc   ; balanced, exit
0F14   E1                     POP   hl   ; hl = block*
0F15   E3                     EX   (sp),hl   ; return to caller
0F16   E9                     JP   (hl)   
0F17                             ; create function
0F17                             ; arg_list* block* -- func*
0F17                CREATEFUNC:      
0F17   E1                     POP   hl   ; save retrn address
0F18   22 08 61               LD   (vTemp3),hl   
0F1B   ED 43 04 61            LD   (vTemp1),bc   ; save IP
0F1F   E1                     POP   hl   ; hl = block*
0F20   22 06 61               LD   (vTemp2),hl   ; save block*
0F23   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0F26   FD 56 05               LD   d,(iy+5)   
0F29   7B                     LD   a,e   ; if arg_list == null then make a func
0F2A   B2                     OR   d   
0F2B   20 09                  JR   nz,createFunc0   
0F2D   21 00 00               LD   hl,0   ; partial_array = null
0F30   ED 5B EA 60            LD   de,(vHeapPtr)   ; de = compile*
0F34   18 65                  JR   createFunc5   
0F36                CREATEFUNC0:      
0F36   E1                     POP   hl   ; hl = inner_arg_list*
0F37   E5                     PUSH   hl   ; save inner_arg_list
0F38   ED 5B EA 60            LD   de,(vHeapPtr)   ; de = compile*
0F3C   7E                     LD   a,(hl)   ; compile inner_num_locals
0F3D   4F                     LD   c,a   ; b = inner_num_locals
0F3E   12                     LD   (de),a   
0F3F   23                     INC   hl   
0F40   13                     INC   de   
0F41   7E                     LD   a,(hl)   ; compile inner_length
0F42   12                     LD   (de),a   
0F43   91                     SUB   c   ; a = inner_num args
0F44   23                     INC   hl   
0F45   13                     INC   de   
0F46   B7                     OR   a   ; compile args if inner_length > 0
0F47   28 05                  JR   z,createFunc1   
0F49   4F                     LD   c,a   ; bc = a
0F4A   06 00                  LD   b,0   
0F4C   ED B0                  LDIR      
0F4E                CREATEFUNC1:      
0F4E   EB                     EX   de,hl   ; hl = outer_arg_list
0F4F   FD 5E 04               LD   e,(iy+4)   
0F52   FD 56 05               LD   d,(iy+5)   
0F55   EB                     EX   de,hl   
0F56   23                     INC   hl   ; a = outer_length
0F57   7E                     LD   a,(hl)   
0F58   23                     INC   hl   
0F59   B7                     OR   a   
0F5A   28 05                  JR   z,createFunc2   
0F5C   4F                     LD   c,a   
0F5D   06 00                  LD   b,0   
0F5F   ED B0                  LDIR      ; append outer_args
0F61                CREATEFUNC2:      ; a = outer_length
0F61   47                     LD   b,a   ; b = a = outer_length
0F62   2A EA 60               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F65   23                     INC   hl   
0F66   7E                     LD   a,(hl)   ; add outer_length to new length
0F67   80                     ADD   a,b   
0F68   77                     LD   (hl),a   
0F69   2B                     DEC   hl   
0F6A   78                     LD   a,b   ; save outer_length in a'
0F6B   08                     EX   af,af'   
0F6C   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F6D   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F6E   B7                     OR   a   
0F6F   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F71   4F                     LD   c,a   ; c = inner_num_locals
0F72   06 00                  LD   b,0   ; bc = inner_num_locals
0F74   23                     INC   hl   ; a = inner_length
0F75   7E                     LD   a,(hl)   
0F76   91                     SUB   c   ; a = inner_num_args
0F77   23                     INC   hl   ; hl = inner_arg_chars
0F78   85                     ADD   a,l   ; hl += a
0F79   6F                     LD   l,a   
0F7A   3E 00                  LD   a,0   
0F7C   84                     ADD   a,h   
0F7D   67                     LD   h,a   
0F7E   ED B0                  LDIR      ; append inner_locals
0F80                CREATEFUNC2A:      
0F80   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F81   12                     LD   (de),a   ; compile partial_array length field
0F82   13                     INC   de   
0F83   AF                     XOR   a   
0F84   12                     LD   (de),a   
0F85   13                     INC   de   
0F86   D5                     PUSH   de   ; push partial_array*
0F87   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F88   FD 5E 02               LD   e,(iy+2)   
0F8B   FD 56 03               LD   d,(iy+3)   
0F8E   EB                     EX   de,hl   
0F8F                CREATEFUNC3:      
0F8F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F90   4E                     LD   c,(hl)   
0F91   2B                     DEC   hl   
0F92   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F93   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F94   13                     INC   de   
0F95   79                     LD   a,c   
0F96   12                     LD   (de),a   
0F97   13                     INC   de   
0F98   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F9A                CREATEFUNC4:      
0F9A   E1                     POP   hl   ; hl = partial_array*
0F9B                CREATEFUNC5:      
0F9B   C1                     POP   bc   ; bc = new_arg_list*
0F9C   D5                     PUSH   de   ; return new func*
0F9D   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F9E   73                     LD   (hl),e   ; compile partial_array* to func
0F9F   23                     INC   hl   
0FA0   72                     LD   (hl),d   
0FA1   23                     INC   hl   
0FA2   ED 5B 06 61            LD   de,(vTemp2)   ; de = block*
0FA6   73                     LD   (hl),e   ; compile block* to func
0FA7   23                     INC   hl   
0FA8   72                     LD   (hl),d   
0FA9   23                     INC   hl   
0FAA   71                     LD   (hl),c   ; compile new_arg_list* to func
0FAB   23                     INC   hl   
0FAC   70                     LD   (hl),b   
0FAD   23                     INC   hl   
0FAE   22 EA 60               LD   (vHeapPtr),hl   ; bump heap ptr
0FB1   ED 4B 04 61            LD   bc,(vTemp1)   ; restore IP
0FB5   2A 08 61               LD   hl,(vTemp3)   ; jump to return address
0FB8   E9                     JP   (hl)   
0FB9                             ;*******************************************************************
0FB9                             ; general routines
0FB9                             ;*******************************************************************
0FB9                             ; hl = address
0FB9                VARIABLE:      
0FB9   22 F8 60               LD   (vPointer),hl   
0FBC   5E                     LD   e,(hl)   
0FBD   3A EE 60               LD   a,(vDataWidth)   
0FC0   3D                     DEC   a   
0FC1   16 00                  LD   d,0   
0FC3   28 03                  JR   z,constant   
0FC5   23                     INC   hl   
0FC6   56                     LD   d,(hl)   
0FC7   2B                     DEC   hl   
0FC8                CONSTANT:      
0FC8   D5                     PUSH   de   
0FC9   DD E9                  JP   (ix)   
0FCB                             ; followed by a table
0FCB                             ; indexed on the 0-25 lowercase letter
0FCB                             ; db lsb(addr)
0FCB                             ; the final item index 26 matches any other char
0FCB                CHARTABLE:      
0FCB   03                     INC   bc   
0FCC   0A                     LD   a,(bc)   
0FCD   FE 7B                  CP   "z"+1   
0FCF   30 10                  JR   nc,charTable3   
0FD1   D6 61                  SUB   "a"   
0FD3   38 0C                  JR   c,charTable3   
0FD5                CHARTABLE1:      
0FD5   E1                     POP   hl   
0FD6   85                     ADD   a,l   
0FD7   6F                     LD   l,a   
0FD8   7E                     LD   a,(hl)   ; must have the same msb as the table
0FD9   B7                     OR   a   ; a = 0, nop
0FDA   20 03                  JR   nz,charTable2   
0FDC   C3 DE 06               JP   error1   
0FDF                CHARTABLE2:      
0FDF   6F                     LD   l,a   
0FE0   E9                     JP   (hl)   
0FE1                CHARTABLE3:      
0FE1   3E 1A                  LD   a,26   
0FE3   0B                     DEC   bc   
0FE4   18 EF                  JR   charTable1   
0FE6                             ; followed by a table
0FE6                             ; db char
0FE6                             ; db char - if null only match on first char
0FE6                             ; dw addr
0FE6                             ; the final item must have char == NUL
0FE6                CMDTABLE:      
0FE6   E1                     POP   hl   
0FE7                CMDTABLE1:      
0FE7                CMDTABLE2:      
0FE7   56                     LD   d,(hl)   
0FE8   23                     INC   hl   
0FE9   5E                     LD   e,(hl)   
0FEA   23                     INC   hl   
0FEB   AF                     XOR   a   ; if d == 0, matched
0FEC   BA                     CP   d   
0FED   28 14                  JR   z,cmdTable5   
0FEF   03                     INC   bc   ; match?
0FF0   0A                     LD   a,(bc)   
0FF1   BA                     CP   d   
0FF2   20 0A                  JR   nz,cmdTable4   
0FF4                CMDTABLE3:      
0FF4   AF                     XOR   a   ; if e == 0, matched
0FF5   BB                     CP   e   
0FF6   28 0B                  JR   z,cmdTable5   
0FF8   03                     INC   bc   
0FF9   0A                     LD   a,(bc)   ; match?
0FFA   BB                     CP   e   
0FFB   28 06                  JR   z,cmdTable5   
0FFD   0B                     DEC   bc   
0FFE                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FFE   0B                     DEC   bc   
0FFF   23                     INC   hl   
1000   23                     INC   hl   
1001   18 E4                  JR   cmdTable2   
1003                CMDTABLE5:      ; matched, jump to addr
1003   5E                     LD   e,(hl)   
1004   23                     INC   hl   
1005   56                     LD   d,(hl)   
1006   EB                     EX   de,hl   
1007   E9                     JP   (hl)   
1008                GETVARADDR:      
1008   21 00 00               LD   hl,0   
100B   FE 7B                  CP   "z"+1   ; if a > z then exit
100D   D0                     RET   nc   
100E   D6 41                  SUB   "A"   ; a - 65
1010   D8                     RET   c   ; if < A then exit
1011   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
1013   38 05                  JR   c,getVarAddr1   
1015   D6 06                  SUB   "a"-("Z"+1)   
1017   FE 1A                  CP   "Z"-"A"+1   
1019   D8                     RET   c   ; if < a then exit
101A                GETVARADDR1:      
101A   87                     ADD   a,a   ; double a
101B   6F                     LD   l,a   
101C   26 60                  LD   h,msb(VARS)   
101E   C9                     RET      
101F                PUTSTR0:      
101F   CD 85 00               CALL   putchar   
1022   23                     INC   hl   
1023                PUTSTR:      
1023   7E                     LD   a,(hl)   
1024   B7                     OR   a   
1025   20 F8                  JR   nz,putstr0   
1027   C9                     RET      
1028                             ; hl = value
1028                             ; de = buffer*
1028                             ; a, bc, de, hl destroyed
1028                FORMATDEC0:      
1028   E5                     PUSH   hl   
1029   D9                     EXX      
102A   E1                     POP   hl   
102B                             ; hl = value
102B                             ; de' = buffer*
102B                             ; a, bc, de, hl destroyed
102B                FORMATDEC:      
102B   CB 7C                  BIT   7,h   
102D   28 0C                  JR   z,formatDec2   
102F   D9                     EXX      
1030   3E 2D                  LD   a,"-"   
1032   12                     LD   (de),a   
1033   13                     INC   de   
1034   D9                     EXX      
1035   AF                     XOR   a   
1036   95                     SUB   l   
1037   6F                     LD   l,a   
1038   9F                     SBC   a,a   
1039   94                     SUB   h   
103A   67                     LD   h,a   
103B                FORMATDEC2:      
103B   0E 00                  LD   c,0   ; leading zeros flag = false
103D   11 F0 D8               LD   de,-10000   
1040   CD 5B 10               CALL   formatDec4   
1043   11 18 FC               LD   de,-1000   
1046   CD 5B 10               CALL   formatDec4   
1049   11 9C FF               LD   de,-100   
104C   CD 5B 10               CALL   formatDec4   
104F   1E F6                  LD   e,-10   
1051   CD 5B 10               CALL   formatDec4   
1054   0C                     INC   c   ; flag = true for at least digit
1055   1E FF                  LD   e,-1   
1057   CD 5B 10               CALL   formatDec4   
105A   C9                     RET      
105B                FORMATDEC4:      
105B   06 2F                  LD   b,"0"-1   
105D                FORMATDEC5:      
105D   04                     INC   b   
105E   19                     ADD   hl,de   
105F   38 FC                  JR   c,formatDec5   
1061   ED 52                  SBC   hl,de   
1063   3E 30                  LD   a,"0"   
1065   B8                     CP   b   
1066   20 05                  JR   nz,formatDec6   
1068   AF                     XOR   a   
1069   B1                     OR   c   
106A   C8                     RET   z   
106B   18 01                  JR   formatDec7   
106D                FORMATDEC6:      
106D   0C                     INC   c   
106E                FORMATDEC7:      
106E   78                     LD   a,b   
106F   D9                     EXX      
1070   12                     LD   (de),a   
1071   13                     INC   de   
1072   D9                     EXX      
1073   C9                     RET      
1074                             ; **************************************************************************
1074                             ; calculate nesting value
1074                             ; a is char to be tested,
1074                             ; e is the nesting value (initially 0)
1074                             ; e is increased by ( and [
1074                             ; e is decreased by ) and ]
1074                             ; e has its bit 7 toggled by `
1074                             ; limited to 127 levels
1074                             ; **************************************************************************
1074                NESTING:      
1074   FE 27                  CP   "'"   ; quote char
1076   28 0A                  JR   z,nesting0   
1078   FE 22                  CP   DQ   ; double quote char
107A   28 06                  JR   z,nesting0   
107C   FE 60                  CP   "`"   ; grave char
107E   28 02                  JR   z,nesting0   
1080   18 0A                  JR   nesting1   
1082                NESTING0:      
1082   CB 7B                  BIT   7,e   
1084   28 03                  JR   z,nesting1a   
1086   CB BB                  RES   7,e   
1088   C9                     RET      
1089                NESTING1A:      
1089   CB FB                  SET   7,e   
108B   C9                     RET      
108C                NESTING1:      
108C   CB 7B                  BIT   7,e   
108E   C0                     RET   nz   
108F   FE 7B                  CP   "{"   
1091   28 08                  JR   z,nesting2   
1093   FE 5B                  CP   "["   
1095   28 04                  JR   z,nesting2   
1097   FE 28                  CP   "("   
1099   20 02                  JR   nz,nesting3   
109B                NESTING2:      
109B   1C                     INC   e   
109C   C9                     RET      
109D                NESTING3:      
109D   FE 7D                  CP   "}"   
109F   28 07                  JR   z,nesting4   
10A1   FE 5D                  CP   "]"   
10A3   28 03                  JR   z,nesting4   
10A5   FE 29                  CP   ")"   
10A7   C0                     RET   nz   
10A8                NESTING4:      
10A8   1D                     DEC   e   
10A9   C9                     RET      
10AA                PROMPT:      
10AA   CD BA 10               CALL   printStr   
10AD   0D 0A 3E 20 00         .CSTR   "\r\n> "   
10B2   C9                     RET      
10B3                CRLF:        
10B3   CD BA 10               CALL   printStr   
10B6   0D 0A 00               .CSTR   "\r\n"   
10B9   C9                     RET      
10BA                             ; prints a null teminated string
10BA                             ; the string should be immediately following the call
10BA                PRINTSTR:      
10BA   E3                     EX   (sp),hl   ; swap			
10BB   CD 23 10               CALL   putstr   
10BE   23                     INC   hl   ; inc past NUL
10BF   E3                     EX   (sp),hl   ; put it back	
10C0   C9                     RET      
10C1                             ; hl = number to print in decimal
10C1                PRINTNUM:      
10C1   ED 5B E8 60            LD   de,(vBufPtr)   ; de' = buffer*
10C5   CD 28 10               CALL   formatDec0   
10C8   D9                     EXX      ; restore de = buffer*
10C9   3E 00                  LD   a,0   ; append NUL to buffer
10CB   12                     LD   (de),a   
10CC   13                     INC   de   ; string*++,
10CD   ED 53 E8 60            LD   (vBufPtr),de   ; update buffer* with buffer*'
10D1   21 00 5F               LD   hl,BUFFER   
10D4   22 E8 60               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
10D7   C3 23 10               JP   putstr   
10DA                INIT:        
10DA   21 F0 01               LD   hl,titleStr   
10DD   11 0E 61               LD   de,titleBuf   
10E0   06 14                  LD   b,20   
10E2                INIT1:       
10E2   1A                     LD   a,(de)   
10E3   BE                     CP   (hl)   
10E4   20 17                  JR   nz,coldBoot0   
10E6   13                     INC   de   
10E7   23                     INC   hl   
10E8   10 F8                  DJNZ   init1   
10EA                WARMINIT:      
10EA   ED 4B FC 60            LD   bc,(vSavedIP)   ; restore IP
10EE   ED 7B FE 60            LD   sp,(vSavedSP)   ; restore SP
10F2   DD 2A 00 61            LD   ix,(vSavedNext)   ; restore Next
10F6   FD 2A 02 61            LD   iy,(vSavedBP)   ; restore BP
10FA   C3 34 11               JP   start1   
10FD                COLDBOOT0:      
10FD   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1100   11 0E 61               LD   de,titleBuf   
1103   06 14                  LD   b,20   
1105   ED B0                  LDIR      
1107                COLDINIT:      
1107   21 DE 01               LD   hl,isysVars   
110A   11 E6 60               LD   de,sysVars   
110D   01 12 00               LD   bc,4 * 2 + 10   
1110   ED B0                  LDIR      
1112   21 00 60               LD   hl,vars   ; 52 vars LO HI
1115   06 34                  LD   b,26*2   
1117   AF                     XOR   a   
1118                COLDBOOT1:      
1118   77                     LD   (hl),a   
1119   23                     INC   hl   
111A   10 FC                  DJNZ   coldBoot1   
111C   DD 21 B0 11            LD   ix,NEXT   
1120   FD 21 00 5E            LD   iy,STACK   
1124   C9                     RET      
1125                COLDSTART:      
1125   31 00 5E               LD   sp,STACK   
1128   CD FD 10               CALL   coldBoot0   
112B   C3 34 11               JP   start1   
112E                START:       
112E   31 00 5E               LD   sp,STACK   ; start Monty
1131   CD DA 10               CALL   init   ; setups
1134                START1:      
1134   21 0E 61               LD   hl,titleBuf   
1137   CD 23 10               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
113A                INTERPRET:      
113A   CD AA 10               CALL   prompt   
113D   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1140   21 00 5E               LD   hl,TIB   
1143   22 E6 60               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1146                INTERPRET2:      ; calculate nesting
1146   1E 00                  LD   e,0   ; initilize nesting value
1148   C5                     PUSH   bc   ; save offset into TIB,
1149                             ; bc is also the count of chars in TIB
1149   21 00 5E               LD   hl,TIB   ; hl is start of TIB
114C   18 06                  JR   interpret4   
114E                INTERPRET3:      
114E   7E                     LD   a,(hl)   ; a = char in TIB
114F   23                     INC   hl   ; inc pointer into TIB
1150   0B                     DEC   bc   ; dec count of chars in TIB
1151   CD 74 10               CALL   nesting   ; update nesting value
1154                INTERPRET4:      
1154   79                     LD   a,c   ; is count zero?
1155   B0                     OR   b   
1156   20 F6                  JR   nz,interpret3   ; if not loop
1158   C1                     POP   bc   ; restore offset into TIB
1159                INTERPRET5:      
1159   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
115C   FE 20                  CP   $20   ; compare to space
115E   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1160   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1162   28 31                  JR   z,interpret8   
1164   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1166   28 1A                  JR   z,interpret7   ; if anything else its macro/control
1168   FE 08                  CP   CTRL_H   
116A   CA E6 11               JP   z,backSpace_   
116D   FE 0A                  CP   CTRL_J   
116F   CA F6 11               JP   z,reEdit_   
1172                INTERPRET5A:      
1172   18 D2                  JR   interpret2   
1174                INTERPRET6:      
1174   21 00 5E               LD   hl,TIB   
1177   09                     ADD   hl,bc   
1178   77                     LD   (hl),a   ; store the character in textbuf
1179   03                     INC   bc   
117A   CD 85 00               CALL   putchar   ; echo character to screen
117D   CD 74 10               CALL   nesting   
1180   18 D7                  JR   interpret5   ; wait for next character
1182                INTERPRET7:      
1182   21 00 5E               LD   hl,TIB   
1185   09                     ADD   hl,bc   
1186   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
1188   23                     INC   hl   
1189   36 0A                  LD   (hl),"\n"   
118B   23                     INC   hl   
118C   03                     INC   bc   
118D   03                     INC   bc   
118E   CD B3 10               CALL   crlf   ; echo character to screen
1191   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1192   B7                     OR   a   
1193   20 C4                  JR   nz,interpret5   
1195                INTERPRET8:      
1195   21 00 5E               LD   hl,TIB   
1198   09                     ADD   hl,bc   
1199   22 E6 60               LD   (vTIBPtr),hl   
119C   01 00 5E               LD   bc,TIB   
119F   ED 43 FC 60            LD   (vSavedIP),bc   ; save IP
11A3   ED 73 FE 60            LD   (vSavedSP),sp   ; save SP
11A7   DD 22 00 61            LD   (vSavedNext),ix   ; save Next
11AB   FD 22 02 61            LD   (vSavedBP),iy   ; save BP
11AF   0B                     DEC   bc   
11B0                NEXT:        
11B0   03                     INC   bc   ; Increment the IP
11B1   0A                     LD   a,(bc)   ; Get the next character and dispatch
11B2   FE 20                  CP   " "   ; whitespace?
11B4   28 FA                  JR   z,next   ; space? ignore
11B6   38 0D                  JR   c,next1   
11B8   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
11BA   6F                     LD   l,a   ; index into table
11BB   26 01                  LD   h,msb(opcodes)   ; start address of jump table
11BD   6E                     LD   l,(hl)   ; get low jump address
11BE   24                     INC   h   ; page 2
11BF   FE BA                  CP   "Z" - "!" + 1 + $80   
11C1   38 01                  JR   c,next0   
11C3   24                     INC   h   ; page 3
11C4                NEXT0:       
11C4   E9                     JP   (hl)   ; Jump to routine
11C5                NEXT1:       
11C5   FE 00                  CP   NUL   ; end of input string?
11C7   28 03                  JR   z,exit   
11C9   C3 3A 11               JP   interpret   ; no, other whitespace, macros?
11CC                EXIT:        
11CC   03                     INC   bc   
11CD   60 69                  LD   hl,bc   
11CF   E9                     JP   (hl)   
11D0                RUN:         
11D0   C1                     POP   bc   
11D1   0B                     DEC   bc   
11D2   DD E9                  JP   (ix)   
11D4                ERROR:       
11D4   E5                     PUSH   hl   
11D5   CD D0 11               CALL   run   
11D8   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
11E3   C3 3A 11               JP   interpret   
11E6                BACKSPACE_:      
11E6   79                     LD   a,c   
11E7   B0                     OR   b   
11E8   CA 46 11               JP   z,interpret2   
11EB   0B                     DEC   bc   
11EC   CD BA 10               CALL   printStr   
11EF   08 20 08 00            .CSTR   "\b \b"   
11F3   C3 46 11               JP   interpret2   
11F6                REEDIT_:      
11F6   CD BA 10               CALL   printStr   
11F9   0D 3E 20 00            .CSTR   "\r> "   
11FD   21 00 5E               LD   hl,TIB   
1200   18 04                  JR   reEdit1   
1202                REEDIT0:      
1202   CD 85 00               CALL   putchar   
1205   23                     INC   hl   
1206                REEDIT1:      
1206   7E                     LD   a,(hl)   
1207   FE 0D                  CP   "\r"   
1209   20 F7                  JR   nz,reEdit0   
120B   11 00 5E               LD   de,TIB   
120E   B7                     OR   a   
120F   ED 52                  SBC   hl,de   
1211   44 4D                  LD   bc,hl   
1213   C3 46 11               JP   interpret2   
1216                ANSIPRINTSEQ:      
1216   CD BA 10               CALL   printStr   
1219   1B 5B 00               DB   ESC,"[",0   
121C   C9                     RET      
121D                             ; clears screen and sets cursor to 0,0
121D                ANSICLEARSCREEN:      
121D   CD BA 10               CALL   printStr   
1220   1B 5B                  DB   ESC,"["   
1222   32 4A 00               DB   "2J",0   ; falls through
1225                             ; call ansiPrintStr
1225                             ; .cstr "H"
1225   C9                     RET      
1226                             ; a = 0:toEnd 1:toStart 2:entireLine
1226                ANSICLEARLINE:      
1226   C6 30                  ADD   a,"0"   ; ascii
1228   08                     EX   af,af'   ; save a
1229   CD 16 12               CALL   ansiPrintSeq   
122C   08                     EX   af,af'   ; restore
122D   CD 85 00               CALL   putChar   
1230   3E 4B                  LD   a,"K"   
1232   C3 85 00               JP   putChar   
1235                             ; h = column, l = row
1235                ANSIGOTO:      
1235   D9                     EXX      ; save hl
1236   CD 16 12               CALL   ansiPrintSeq   
1239   D9                     EXX      ; restore hl
123A   7C                     LD   a,h   ; save column
123B   08                     EX   af,af'   
123C   26 00                  LD   h,0   ; print row
123E   CD C1 10               CALL   printNum   
1241   3E 3B                  LD   a,";"   
1243   CD 85 00               CALL   putChar   
1246   08                     EX   af,af'   ; restore column
1247   6C                     LD   l,h   ; print column
1248   26 00                  LD   h,0   
124A   CD C1 10               CALL   printNum   
124D   3E 48                  LD   a,"H"   
124F   C3 85 00               JP   putChar   
1252                             ; h = "A":Up "B":Down "C":Forward "D":Back
1252                             ; l = amount
1252                ANSIMOVE:      
1252   D9                     EXX      ; save hl
1253   CD 16 12               CALL   ansiPrintSeq   
1256   D9                     EXX      ; restore hl
1257   7C                     LD   a,h   
1258   08                     EX   af,af'   ; save a
1259   26 00                  LD   h,0   ; print amount
125B   CD C1 10               CALL   printNum   
125E   08                     EX   af,af'   ; restore a
125F   C3 85 00               JP   putChar   ; print direction code
1262                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
1262                ANSITEXTSTYLE:      
1262   C6 30                  ADD   a,"0"   ; ascii
1264   08                     EX   af,af'   ; save a
1265   CD 16 12               CALL   ansiPrintSeq   
1268   08                     EX   af,af'   ; restore
1269   CD 85 00               CALL   putChar   
126C   3E 6D                  LD   a,"m"   
126E   C3 85 00               JP   putChar   
1271                             ; a = "h":show "l":hide
1271                ANSICURSORSHOW:      
1271   08                     EX   af,af'   ; save a
1272   CD BA 10               CALL   printStr   
1275   1B 5B                  DB   ESC,"["   
1277   3F 32 35 6C 00         DB   "?25l",0   
127C   08                     EX   af,af'   ; restore
127D   C3 85 00               JP   putChar   
1280                          ;*Macro unroll: FUNC f1, 0, ""
1280                F1:          
1280   CD 9F 03               CALL   go   
1283   00 00                  DW   NUL   
1285   8B 12                  DW   f1M_3204S13   
1287   89 12                  DW   $+2   
1289   00                     DB   0   
128A   00                     .PSTR   ""   
128B                F1M_3204S13:      
128B   00                     DB   0   
128C                          ;*Macro unroll: FUNC f2, 0, ""
128C                F2:          
128C   CD 9F 03               CALL   go   
128F   00 00                  DW   NUL   
1291   97 12                  DW   f2M_3206S16   
1293   95 12                  DW   $+2   
1295   00                     DB   0   
1296   00                     .PSTR   ""   
1297                F2M_3206S16:      
1297   00                     DB   0   
1298                          ;*Macro unroll: FUNC f3, 0, ""
1298                F3:          
1298   CD 9F 03               CALL   go   
129B   00 00                  DW   NUL   
129D   A3 12                  DW   f3M_3208S19   
129F   A1 12                  DW   $+2   
12A1   00                     DB   0   
12A2   00                     .PSTR   ""   
12A3                F3M_3208S19:      
12A3   00                     DB   0   
12A4                          ;*Macro unroll: FUNC f4, 0, ""
12A4                F4:          
12A4   CD 9F 03               CALL   go   
12A7   00 00                  DW   NUL   
12A9   AF 12                  DW   f4M_3210S22   
12AB   AD 12                  DW   $+2   
12AD   00                     DB   0   
12AE   00                     .PSTR   ""   
12AF                F4M_3210S22:      
12AF   00                     DB   0   
12B0                          ALIGN   $100   
1300                TESTSSTART:      
1300                             ; test "0 10 1 /rng \\a{%a.} /for", 0
1300                             ; test "0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", 0
1300                             ; test "0 10 1 /rng \\a{%a 3<}/ftr \\a{%a.} /for", 0
1300                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1300                             ; test "/hex /byt $1234.",0
1300                             ; test "/byt 257.",0
1300                             ; test "$1000 'hello there!' /si \\a{%a.c} /for", $1000
1300                             ; test "10 0 -1 /rng \\a{%a.} /for", 0
1300                             ; test "_B [_A {1} _B {2}] /sel", 2
1300                             ; test "[_A {1} _B {2}] x= _B x /sel", 2
1300                             ; test "[10 20 30] /ait \\a{%a.} /for", 0
1300                             ; test "[1 2 3].a", 0
1300                             ; test "0 10 1 /rng  0 \\da{%d%a+}/scn \\a{%a 24<}/ftr \\a{%a.} /for", 0
1300                             ; test "1 0 /cmv", false
1300                             ; test "/sbb `hello:` 65.c 1. 2. 3. /sbe .s", FALSE
1300                          ;*Macro unroll:  test "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp", TRUE
1300   31 00 5E               LD   SP,STACK   
1303   CD 07 11               CALL   coldInit   
1306   CD A8 5C               CALL   execStr   
1309   2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 DB   "/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp",0   
1334   E1                     POP   HL   
1335   E5                     PUSH   HL   
1336   11 FF FF               LD   DE,TRUE   
1339   B7                     OR   A   
133A   ED 52                  SBC   HL,DE   
133C   7D                     LD   A,L   
133D   B4                     OR   H   
133E   CA C3 13               JP   Z,expectM_3229S43   
1341   CD BA 10               CALL   printStr   
1344   43 6F 64 65 3A 20 2F 73 62 62 20 60 3D 60 20 31 2E 20 32 2E 20 33 2E 20 60 3D 60 20 2F 73 62 65 20 27 3D 31 20 32 20 33 20 3D 27 20 2F 73 63 70 00 .CSTR   "Code: ","/sbb `=` 1. 2. 3. `=` /sbe '=1 2 3 =' /scp"   
1375   CD BA 10               CALL   printStr   
1378   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1387   21 FF FF               LD   hl,TRUE   
138A   E5                     PUSH   hl   
138B   E5                     PUSH   hl   
138C   CD D0 11               CALL   run   
138F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
139B   CD BA 10               CALL   printStr   
139E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AB   E1                     POP   hl   
13AC   E5                     PUSH   hl   
13AD   E5                     PUSH   hl   
13AE   CD D0 11               CALL   run   
13B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
13C2   76                     HALT      
13C3                EXPECTM_3229S43:      
13C3   E1                     POP   HL   
13C4   CD BA 10               CALL   printStr   
13C7   44 6F 6E 65 21 00      .CSTR   "Done!"   
13CD   76                     HALT      
13CE                          ;*Macro unroll:  test "/fal", false
13CE   31 00 5E               LD   SP,STACK   
13D1   CD 07 11               CALL   coldInit   
13D4   CD A8 5C               CALL   execStr   
13D7   2F 66 61 6C 00         DB   "/fal",0   
13DC   E1                     POP   HL   
13DD   E5                     PUSH   HL   
13DE   11 00 00               LD   DE,false   
13E1   B7                     OR   A   
13E2   ED 52                  SBC   HL,DE   
13E4   7D                     LD   A,L   
13E5   B4                     OR   H   
13E6   CA 45 14               JP   Z,expectM_3233S49   
13E9   CD BA 10               CALL   printStr   
13EC   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
13F7   CD BA 10               CALL   printStr   
13FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1409   21 00 00               LD   hl,false   
140C   E5                     PUSH   hl   
140D   E5                     PUSH   hl   
140E   CD D0 11               CALL   run   
1411   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
141D   CD BA 10               CALL   printStr   
1420   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
142D   E1                     POP   hl   
142E   E5                     PUSH   hl   
142F   E5                     PUSH   hl   
1430   CD D0 11               CALL   run   
1433   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1444   76                     HALT      
1445                EXPECTM_3233S49:      
1445   E1                     POP   HL   
1446                          ;*Macro unroll:  test "/tru", true
1446   31 00 5E               LD   SP,STACK   
1449   CD 07 11               CALL   coldInit   
144C   CD A8 5C               CALL   execStr   
144F   2F 74 72 75 00         DB   "/tru",0   
1454   E1                     POP   HL   
1455   E5                     PUSH   HL   
1456   11 FF FF               LD   DE,true   
1459   B7                     OR   A   
145A   ED 52                  SBC   HL,DE   
145C   7D                     LD   A,L   
145D   B4                     OR   H   
145E   CA BD 14               JP   Z,expectM_3234S50   
1461   CD BA 10               CALL   printStr   
1464   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
146F   CD BA 10               CALL   printStr   
1472   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1481   21 FF FF               LD   hl,true   
1484   E5                     PUSH   hl   
1485   E5                     PUSH   hl   
1486   CD D0 11               CALL   run   
1489   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1495   CD BA 10               CALL   printStr   
1498   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A5   E1                     POP   hl   
14A6   E5                     PUSH   hl   
14A7   E5                     PUSH   hl   
14A8   CD D0 11               CALL   run   
14AB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14BC   76                     HALT      
14BD                EXPECTM_3234S50:      
14BD   E1                     POP   HL   
14BE                          ;*Macro unroll:  test "1", 1
14BE   31 00 5E               LD   SP,STACK   
14C1   CD 07 11               CALL   coldInit   
14C4   CD A8 5C               CALL   execStr   
14C7   31 00                  DB   "1",0   
14C9   E1                     POP   HL   
14CA   E5                     PUSH   HL   
14CB   11 01 00               LD   DE,1   
14CE   B7                     OR   A   
14CF   ED 52                  SBC   HL,DE   
14D1   7D                     LD   A,L   
14D2   B4                     OR   H   
14D3   CA 2F 15               JP   Z,expectM_3235S51   
14D6   CD BA 10               CALL   printStr   
14D9   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
14E1   CD BA 10               CALL   printStr   
14E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14F3   21 01 00               LD   hl,1   
14F6   E5                     PUSH   hl   
14F7   E5                     PUSH   hl   
14F8   CD D0 11               CALL   run   
14FB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1507   CD BA 10               CALL   printStr   
150A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1517   E1                     POP   hl   
1518   E5                     PUSH   hl   
1519   E5                     PUSH   hl   
151A   CD D0 11               CALL   run   
151D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
152E   76                     HALT      
152F                EXPECTM_3235S51:      
152F   E1                     POP   HL   
1530                          ;*Macro unroll:  test "2", 2
1530   31 00 5E               LD   SP,STACK   
1533   CD 07 11               CALL   coldInit   
1536   CD A8 5C               CALL   execStr   
1539   32 00                  DB   "2",0   
153B   E1                     POP   HL   
153C   E5                     PUSH   HL   
153D   11 02 00               LD   DE,2   
1540   B7                     OR   A   
1541   ED 52                  SBC   HL,DE   
1543   7D                     LD   A,L   
1544   B4                     OR   H   
1545   CA A1 15               JP   Z,expectM_3236S52   
1548   CD BA 10               CALL   printStr   
154B   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1553   CD BA 10               CALL   printStr   
1556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1565   21 02 00               LD   hl,2   
1568   E5                     PUSH   hl   
1569   E5                     PUSH   hl   
156A   CD D0 11               CALL   run   
156D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1579   CD BA 10               CALL   printStr   
157C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1589   E1                     POP   hl   
158A   E5                     PUSH   hl   
158B   E5                     PUSH   hl   
158C   CD D0 11               CALL   run   
158F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15A0   76                     HALT      
15A1                EXPECTM_3236S52:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "1", 1
15A2   31 00 5E               LD   SP,STACK   
15A5   CD 07 11               CALL   coldInit   
15A8   CD A8 5C               CALL   execStr   
15AB   31 00                  DB   "1",0   
15AD   E1                     POP   HL   
15AE   E5                     PUSH   HL   
15AF   11 01 00               LD   DE,1   
15B2   B7                     OR   A   
15B3   ED 52                  SBC   HL,DE   
15B5   7D                     LD   A,L   
15B6   B4                     OR   H   
15B7   CA 13 16               JP   Z,expectM_3237S53   
15BA   CD BA 10               CALL   printStr   
15BD   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
15C5   CD BA 10               CALL   printStr   
15C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15D7   21 01 00               LD   hl,1   
15DA   E5                     PUSH   hl   
15DB   E5                     PUSH   hl   
15DC   CD D0 11               CALL   run   
15DF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15EB   CD BA 10               CALL   printStr   
15EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15FB   E1                     POP   hl   
15FC   E5                     PUSH   hl   
15FD   E5                     PUSH   hl   
15FE   CD D0 11               CALL   run   
1601   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1612   76                     HALT      
1613                EXPECTM_3237S53:      
1613   E1                     POP   HL   
1614                          ;*Macro unroll:  test "0", 0
1614   31 00 5E               LD   SP,STACK   
1617   CD 07 11               CALL   coldInit   
161A   CD A8 5C               CALL   execStr   
161D   30 00                  DB   "0",0   
161F   E1                     POP   HL   
1620   E5                     PUSH   HL   
1621   11 00 00               LD   DE,0   
1624   B7                     OR   A   
1625   ED 52                  SBC   HL,DE   
1627   7D                     LD   A,L   
1628   B4                     OR   H   
1629   CA 85 16               JP   Z,expectM_3238S54   
162C   CD BA 10               CALL   printStr   
162F   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1637   CD BA 10               CALL   printStr   
163A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1649   21 00 00               LD   hl,0   
164C   E5                     PUSH   hl   
164D   E5                     PUSH   hl   
164E   CD D0 11               CALL   run   
1651   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
165D   CD BA 10               CALL   printStr   
1660   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166D   E1                     POP   hl   
166E   E5                     PUSH   hl   
166F   E5                     PUSH   hl   
1670   CD D0 11               CALL   run   
1673   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1684   76                     HALT      
1685                EXPECTM_3238S54:      
1685   E1                     POP   HL   
1686                          ;*Macro unroll:  test "10", 10
1686   31 00 5E               LD   SP,STACK   
1689   CD 07 11               CALL   coldInit   
168C   CD A8 5C               CALL   execStr   
168F   31 30 00               DB   "10",0   
1692   E1                     POP   HL   
1693   E5                     PUSH   HL   
1694   11 0A 00               LD   DE,10   
1697   B7                     OR   A   
1698   ED 52                  SBC   HL,DE   
169A   7D                     LD   A,L   
169B   B4                     OR   H   
169C   CA F9 16               JP   Z,expectM_3239S55   
169F   CD BA 10               CALL   printStr   
16A2   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
16AB   CD BA 10               CALL   printStr   
16AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16BD   21 0A 00               LD   hl,10   
16C0   E5                     PUSH   hl   
16C1   E5                     PUSH   hl   
16C2   CD D0 11               CALL   run   
16C5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
16D1   CD BA 10               CALL   printStr   
16D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16E1   E1                     POP   hl   
16E2   E5                     PUSH   hl   
16E3   E5                     PUSH   hl   
16E4   CD D0 11               CALL   run   
16E7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16F8   76                     HALT      
16F9                EXPECTM_3239S55:      
16F9   E1                     POP   HL   
16FA                          ;*Macro unroll:  test "123", 123
16FA   31 00 5E               LD   SP,STACK   
16FD   CD 07 11               CALL   coldInit   
1700   CD A8 5C               CALL   execStr   
1703   31 32 33 00            DB   "123",0   
1707   E1                     POP   HL   
1708   E5                     PUSH   HL   
1709   11 7B 00               LD   DE,123   
170C   B7                     OR   A   
170D   ED 52                  SBC   HL,DE   
170F   7D                     LD   A,L   
1710   B4                     OR   H   
1711   CA 6F 17               JP   Z,expectM_3240S56   
1714   CD BA 10               CALL   printStr   
1717   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1721   CD BA 10               CALL   printStr   
1724   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1733   21 7B 00               LD   hl,123   
1736   E5                     PUSH   hl   
1737   E5                     PUSH   hl   
1738   CD D0 11               CALL   run   
173B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1747   CD BA 10               CALL   printStr   
174A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1757   E1                     POP   hl   
1758   E5                     PUSH   hl   
1759   E5                     PUSH   hl   
175A   CD D0 11               CALL   run   
175D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
176E   76                     HALT      
176F                EXPECTM_3240S56:      
176F   E1                     POP   HL   
1770                          ;*Macro unroll:  test "-1",-1
1770   31 00 5E               LD   SP,STACK   
1773   CD 07 11               CALL   coldInit   
1776   CD A8 5C               CALL   execStr   
1779   2D 31 00               DB   "-1",0   
177C   E1                     POP   HL   
177D   E5                     PUSH   HL   
177E   11 FF FF               LD   DE,-1   
1781   B7                     OR   A   
1782   ED 52                  SBC   HL,DE   
1784   7D                     LD   A,L   
1785   B4                     OR   H   
1786   CA E3 17               JP   Z,expectM_3241S57   
1789   CD BA 10               CALL   printStr   
178C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1795   CD BA 10               CALL   printStr   
1798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17A7   21 FF FF               LD   hl,-1   
17AA   E5                     PUSH   hl   
17AB   E5                     PUSH   hl   
17AC   CD D0 11               CALL   run   
17AF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17BB   CD BA 10               CALL   printStr   
17BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CB   E1                     POP   hl   
17CC   E5                     PUSH   hl   
17CD   E5                     PUSH   hl   
17CE   CD D0 11               CALL   run   
17D1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17E2   76                     HALT      
17E3                EXPECTM_3241S57:      
17E3   E1                     POP   HL   
17E4                          ;*Macro unroll:  test "-1/abs",1
17E4   31 00 5E               LD   SP,STACK   
17E7   CD 07 11               CALL   coldInit   
17EA   CD A8 5C               CALL   execStr   
17ED   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
17F4   E1                     POP   HL   
17F5   E5                     PUSH   HL   
17F6   11 01 00               LD   DE,1   
17F9   B7                     OR   A   
17FA   ED 52                  SBC   HL,DE   
17FC   7D                     LD   A,L   
17FD   B4                     OR   H   
17FE   CA 5F 18               JP   Z,expectM_3242S58   
1801   CD BA 10               CALL   printStr   
1804   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
1811   CD BA 10               CALL   printStr   
1814   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1823   21 01 00               LD   hl,1   
1826   E5                     PUSH   hl   
1827   E5                     PUSH   hl   
1828   CD D0 11               CALL   run   
182B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1837   CD BA 10               CALL   printStr   
183A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1847   E1                     POP   hl   
1848   E5                     PUSH   hl   
1849   E5                     PUSH   hl   
184A   CD D0 11               CALL   run   
184D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
185E   76                     HALT      
185F                EXPECTM_3242S58:      
185F   E1                     POP   HL   
1860                          ;*Macro unroll:  test "_a", $61
1860   31 00 5E               LD   SP,STACK   
1863   CD 07 11               CALL   coldInit   
1866   CD A8 5C               CALL   execStr   
1869   5F 61 00               DB   "_a",0   
186C   E1                     POP   HL   
186D   E5                     PUSH   HL   
186E   11 61 00               LD   DE,$61   
1871   B7                     OR   A   
1872   ED 52                  SBC   HL,DE   
1874   7D                     LD   A,L   
1875   B4                     OR   H   
1876   CA D3 18               JP   Z,expectM_3243S59   
1879   CD BA 10               CALL   printStr   
187C   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1885   CD BA 10               CALL   printStr   
1888   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1897   21 61 00               LD   hl,$61   
189A   E5                     PUSH   hl   
189B   E5                     PUSH   hl   
189C   CD D0 11               CALL   run   
189F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18AB   CD BA 10               CALL   printStr   
18AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18BB   E1                     POP   hl   
18BC   E5                     PUSH   hl   
18BD   E5                     PUSH   hl   
18BE   CD D0 11               CALL   run   
18C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
18D2   76                     HALT      
18D3                EXPECTM_3243S59:      
18D3   E1                     POP   HL   
18D4                          ;*Macro unroll:  test "__", $5F
18D4   31 00 5E               LD   SP,STACK   
18D7   CD 07 11               CALL   coldInit   
18DA   CD A8 5C               CALL   execStr   
18DD   5F 5F 00               DB   "__",0   
18E0   E1                     POP   HL   
18E1   E5                     PUSH   HL   
18E2   11 5F 00               LD   DE,$5F   
18E5   B7                     OR   A   
18E6   ED 52                  SBC   HL,DE   
18E8   7D                     LD   A,L   
18E9   B4                     OR   H   
18EA   CA 47 19               JP   Z,expectM_3244S60   
18ED   CD BA 10               CALL   printStr   
18F0   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
18F9   CD BA 10               CALL   printStr   
18FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
190B   21 5F 00               LD   hl,$5F   
190E   E5                     PUSH   hl   
190F   E5                     PUSH   hl   
1910   CD D0 11               CALL   run   
1913   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
191F   CD BA 10               CALL   printStr   
1922   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
192F   E1                     POP   hl   
1930   E5                     PUSH   hl   
1931   E5                     PUSH   hl   
1932   CD D0 11               CALL   run   
1935   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1946   76                     HALT      
1947                EXPECTM_3244S60:      
1947   E1                     POP   HL   
1948                          ;*Macro unroll:  test "$10", $10
1948   31 00 5E               LD   SP,STACK   
194B   CD 07 11               CALL   coldInit   
194E   CD A8 5C               CALL   execStr   
1951   24 31 30 00            DB   "$10",0   
1955   E1                     POP   HL   
1956   E5                     PUSH   HL   
1957   11 10 00               LD   DE,$10   
195A   B7                     OR   A   
195B   ED 52                  SBC   HL,DE   
195D   7D                     LD   A,L   
195E   B4                     OR   H   
195F   CA BD 19               JP   Z,expectM_3245S61   
1962   CD BA 10               CALL   printStr   
1965   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
196F   CD BA 10               CALL   printStr   
1972   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1981   21 10 00               LD   hl,$10   
1984   E5                     PUSH   hl   
1985   E5                     PUSH   hl   
1986   CD D0 11               CALL   run   
1989   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1995   CD BA 10               CALL   printStr   
1998   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19A5   E1                     POP   hl   
19A6   E5                     PUSH   hl   
19A7   E5                     PUSH   hl   
19A8   CD D0 11               CALL   run   
19AB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19BC   76                     HALT      
19BD                EXPECTM_3245S61:      
19BD   E1                     POP   HL   
19BE                          ;*Macro unroll:  test "$FF", $FF
19BE   31 00 5E               LD   SP,STACK   
19C1   CD 07 11               CALL   coldInit   
19C4   CD A8 5C               CALL   execStr   
19C7   24 46 46 00            DB   "$FF",0   
19CB   E1                     POP   HL   
19CC   E5                     PUSH   HL   
19CD   11 FF 00               LD   DE,$FF   
19D0   B7                     OR   A   
19D1   ED 52                  SBC   HL,DE   
19D3   7D                     LD   A,L   
19D4   B4                     OR   H   
19D5   CA 33 1A               JP   Z,expectM_3246S62   
19D8   CD BA 10               CALL   printStr   
19DB   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
19E5   CD BA 10               CALL   printStr   
19E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F7   21 FF 00               LD   hl,$FF   
19FA   E5                     PUSH   hl   
19FB   E5                     PUSH   hl   
19FC   CD D0 11               CALL   run   
19FF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A0B   CD BA 10               CALL   printStr   
1A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A1B   E1                     POP   hl   
1A1C   E5                     PUSH   hl   
1A1D   E5                     PUSH   hl   
1A1E   CD D0 11               CALL   run   
1A21   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A32   76                     HALT      
1A33                EXPECTM_3246S62:      
1A33   E1                     POP   HL   
1A34                          ;*Macro unroll:  test "-1 2 +",1
1A34   31 00 5E               LD   SP,STACK   
1A37   CD 07 11               CALL   coldInit   
1A3A   CD A8 5C               CALL   execStr   
1A3D   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1A44   E1                     POP   HL   
1A45   E5                     PUSH   HL   
1A46   11 01 00               LD   DE,1   
1A49   B7                     OR   A   
1A4A   ED 52                  SBC   HL,DE   
1A4C   7D                     LD   A,L   
1A4D   B4                     OR   H   
1A4E   CA AF 1A               JP   Z,expectM_3247S63   
1A51   CD BA 10               CALL   printStr   
1A54   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1A61   CD BA 10               CALL   printStr   
1A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A73   21 01 00               LD   hl,1   
1A76   E5                     PUSH   hl   
1A77   E5                     PUSH   hl   
1A78   CD D0 11               CALL   run   
1A7B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A87   CD BA 10               CALL   printStr   
1A8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A97   E1                     POP   hl   
1A98   E5                     PUSH   hl   
1A99   E5                     PUSH   hl   
1A9A   CD D0 11               CALL   run   
1A9D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1AAE   76                     HALT      
1AAF                EXPECTM_3247S63:      
1AAF   E1                     POP   HL   
1AB0                          ;*Macro unroll:  test "-1 1 +",0
1AB0   31 00 5E               LD   SP,STACK   
1AB3   CD 07 11               CALL   coldInit   
1AB6   CD A8 5C               CALL   execStr   
1AB9   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1AC0   E1                     POP   HL   
1AC1   E5                     PUSH   HL   
1AC2   11 00 00               LD   DE,0   
1AC5   B7                     OR   A   
1AC6   ED 52                  SBC   HL,DE   
1AC8   7D                     LD   A,L   
1AC9   B4                     OR   H   
1ACA   CA 2B 1B               JP   Z,expectM_3248S64   
1ACD   CD BA 10               CALL   printStr   
1AD0   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1ADD   CD BA 10               CALL   printStr   
1AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AEF   21 00 00               LD   hl,0   
1AF2   E5                     PUSH   hl   
1AF3   E5                     PUSH   hl   
1AF4   CD D0 11               CALL   run   
1AF7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B03   CD BA 10               CALL   printStr   
1B06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B13   E1                     POP   hl   
1B14   E5                     PUSH   hl   
1B15   E5                     PUSH   hl   
1B16   CD D0 11               CALL   run   
1B19   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B2A   76                     HALT      
1B2B                EXPECTM_3248S64:      
1B2B   E1                     POP   HL   
1B2C                          ;*Macro unroll:  test "1 2 +", 3
1B2C   31 00 5E               LD   SP,STACK   
1B2F   CD 07 11               CALL   coldInit   
1B32   CD A8 5C               CALL   execStr   
1B35   31 20 32 20 2B 00      DB   "1 2 +",0   
1B3B   E1                     POP   HL   
1B3C   E5                     PUSH   HL   
1B3D   11 03 00               LD   DE,3   
1B40   B7                     OR   A   
1B41   ED 52                  SBC   HL,DE   
1B43   7D                     LD   A,L   
1B44   B4                     OR   H   
1B45   CA A5 1B               JP   Z,expectM_3249S65   
1B48   CD BA 10               CALL   printStr   
1B4B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1B57   CD BA 10               CALL   printStr   
1B5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B69   21 03 00               LD   hl,3   
1B6C   E5                     PUSH   hl   
1B6D   E5                     PUSH   hl   
1B6E   CD D0 11               CALL   run   
1B71   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B7D   CD BA 10               CALL   printStr   
1B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B8D   E1                     POP   hl   
1B8E   E5                     PUSH   hl   
1B8F   E5                     PUSH   hl   
1B90   CD D0 11               CALL   run   
1B93   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BA4   76                     HALT      
1BA5                EXPECTM_3249S65:      
1BA5   E1                     POP   HL   
1BA6                          ;*Macro unroll:  test "4 1 2 +", 3
1BA6   31 00 5E               LD   SP,STACK   
1BA9   CD 07 11               CALL   coldInit   
1BAC   CD A8 5C               CALL   execStr   
1BAF   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1BB7   E1                     POP   HL   
1BB8   E5                     PUSH   HL   
1BB9   11 03 00               LD   DE,3   
1BBC   B7                     OR   A   
1BBD   ED 52                  SBC   HL,DE   
1BBF   7D                     LD   A,L   
1BC0   B4                     OR   H   
1BC1   CA 23 1C               JP   Z,expectM_3250S66   
1BC4   CD BA 10               CALL   printStr   
1BC7   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1BD5   CD BA 10               CALL   printStr   
1BD8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BE7   21 03 00               LD   hl,3   
1BEA   E5                     PUSH   hl   
1BEB   E5                     PUSH   hl   
1BEC   CD D0 11               CALL   run   
1BEF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BFB   CD BA 10               CALL   printStr   
1BFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C0B   E1                     POP   hl   
1C0C   E5                     PUSH   hl   
1C0D   E5                     PUSH   hl   
1C0E   CD D0 11               CALL   run   
1C11   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C22   76                     HALT      
1C23                EXPECTM_3250S66:      
1C23   E1                     POP   HL   
1C24                          ;*Macro unroll:  test "123 456 +", 123+456
1C24   31 00 5E               LD   SP,STACK   
1C27   CD 07 11               CALL   coldInit   
1C2A   CD A8 5C               CALL   execStr   
1C2D   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1C37   E1                     POP   HL   
1C38   E5                     PUSH   HL   
1C39   11 43 02               LD   DE,123+456   
1C3C   B7                     OR   A   
1C3D   ED 52                  SBC   HL,DE   
1C3F   7D                     LD   A,L   
1C40   B4                     OR   H   
1C41   CA A5 1C               JP   Z,expectM_3251S67   
1C44   CD BA 10               CALL   printStr   
1C47   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1C57   CD BA 10               CALL   printStr   
1C5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C69   21 43 02               LD   hl,123+456   
1C6C   E5                     PUSH   hl   
1C6D   E5                     PUSH   hl   
1C6E   CD D0 11               CALL   run   
1C71   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C7D   CD BA 10               CALL   printStr   
1C80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C8D   E1                     POP   hl   
1C8E   E5                     PUSH   hl   
1C8F   E5                     PUSH   hl   
1C90   CD D0 11               CALL   run   
1C93   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CA4   76                     HALT      
1CA5                EXPECTM_3251S67:      
1CA5   E1                     POP   HL   
1CA6                          ;*Macro unroll:  test "64 128 +", 64+128
1CA6   31 00 5E               LD   SP,STACK   
1CA9   CD 07 11               CALL   coldInit   
1CAC   CD A8 5C               CALL   execStr   
1CAF   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1CB8   E1                     POP   HL   
1CB9   E5                     PUSH   HL   
1CBA   11 C0 00               LD   DE,64+128   
1CBD   B7                     OR   A   
1CBE   ED 52                  SBC   HL,DE   
1CC0   7D                     LD   A,L   
1CC1   B4                     OR   H   
1CC2   CA 25 1D               JP   Z,expectM_3252S68   
1CC5   CD BA 10               CALL   printStr   
1CC8   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1CD7   CD BA 10               CALL   printStr   
1CDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CE9   21 C0 00               LD   hl,64+128   
1CEC   E5                     PUSH   hl   
1CED   E5                     PUSH   hl   
1CEE   CD D0 11               CALL   run   
1CF1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1CFD   CD BA 10               CALL   printStr   
1D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0D   E1                     POP   hl   
1D0E   E5                     PUSH   hl   
1D0F   E5                     PUSH   hl   
1D10   CD D0 11               CALL   run   
1D13   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D24   76                     HALT      
1D25                EXPECTM_3252S68:      
1D25   E1                     POP   HL   
1D26                          ;*Macro unroll:  test "1 2 +", 3
1D26   31 00 5E               LD   SP,STACK   
1D29   CD 07 11               CALL   coldInit   
1D2C   CD A8 5C               CALL   execStr   
1D2F   31 20 32 20 2B 00      DB   "1 2 +",0   
1D35   E1                     POP   HL   
1D36   E5                     PUSH   HL   
1D37   11 03 00               LD   DE,3   
1D3A   B7                     OR   A   
1D3B   ED 52                  SBC   HL,DE   
1D3D   7D                     LD   A,L   
1D3E   B4                     OR   H   
1D3F   CA 9F 1D               JP   Z,expectM_3253S69   
1D42   CD BA 10               CALL   printStr   
1D45   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1D51   CD BA 10               CALL   printStr   
1D54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D63   21 03 00               LD   hl,3   
1D66   E5                     PUSH   hl   
1D67   E5                     PUSH   hl   
1D68   CD D0 11               CALL   run   
1D6B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D77   CD BA 10               CALL   printStr   
1D7A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D87   E1                     POP   hl   
1D88   E5                     PUSH   hl   
1D89   E5                     PUSH   hl   
1D8A   CD D0 11               CALL   run   
1D8D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D9E   76                     HALT      
1D9F                EXPECTM_3253S69:      
1D9F   E1                     POP   HL   
1DA0                          ;*Macro unroll:  test "1a= a++ a",2
1DA0   31 00 5E               LD   SP,STACK   
1DA3   CD 07 11               CALL   coldInit   
1DA6   CD A8 5C               CALL   execStr   
1DA9   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1DB3   E1                     POP   HL   
1DB4   E5                     PUSH   HL   
1DB5   11 02 00               LD   DE,2   
1DB8   B7                     OR   A   
1DB9   ED 52                  SBC   HL,DE   
1DBB   7D                     LD   A,L   
1DBC   B4                     OR   H   
1DBD   CA 21 1E               JP   Z,expectM_3254S70   
1DC0   CD BA 10               CALL   printStr   
1DC3   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1DD3   CD BA 10               CALL   printStr   
1DD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DE5   21 02 00               LD   hl,2   
1DE8   E5                     PUSH   hl   
1DE9   E5                     PUSH   hl   
1DEA   CD D0 11               CALL   run   
1DED   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1DF9   CD BA 10               CALL   printStr   
1DFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E09   E1                     POP   hl   
1E0A   E5                     PUSH   hl   
1E0B   E5                     PUSH   hl   
1E0C   CD D0 11               CALL   run   
1E0F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E20   76                     HALT      
1E21                EXPECTM_3254S70:      
1E21   E1                     POP   HL   
1E22                          ;*Macro unroll:  test "-1 -1 -",0
1E22   31 00 5E               LD   SP,STACK   
1E25   CD 07 11               CALL   coldInit   
1E28   CD A8 5C               CALL   execStr   
1E2B   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1E33   E1                     POP   HL   
1E34   E5                     PUSH   HL   
1E35   11 00 00               LD   DE,0   
1E38   B7                     OR   A   
1E39   ED 52                  SBC   HL,DE   
1E3B   7D                     LD   A,L   
1E3C   B4                     OR   H   
1E3D   CA 9F 1E               JP   Z,expectM_3255S71   
1E40   CD BA 10               CALL   printStr   
1E43   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1E51   CD BA 10               CALL   printStr   
1E54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E63   21 00 00               LD   hl,0   
1E66   E5                     PUSH   hl   
1E67   E5                     PUSH   hl   
1E68   CD D0 11               CALL   run   
1E6B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E77   CD BA 10               CALL   printStr   
1E7A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E87   E1                     POP   hl   
1E88   E5                     PUSH   hl   
1E89   E5                     PUSH   hl   
1E8A   CD D0 11               CALL   run   
1E8D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E9E   76                     HALT      
1E9F                EXPECTM_3255S71:      
1E9F   E1                     POP   HL   
1EA0                          ;*Macro unroll:  test "5 3 -", 2
1EA0   31 00 5E               LD   SP,STACK   
1EA3   CD 07 11               CALL   coldInit   
1EA6   CD A8 5C               CALL   execStr   
1EA9   35 20 33 20 2D 00      DB   "5 3 -",0   
1EAF   E1                     POP   HL   
1EB0   E5                     PUSH   HL   
1EB1   11 02 00               LD   DE,2   
1EB4   B7                     OR   A   
1EB5   ED 52                  SBC   HL,DE   
1EB7   7D                     LD   A,L   
1EB8   B4                     OR   H   
1EB9   CA 19 1F               JP   Z,expectM_3256S72   
1EBC   CD BA 10               CALL   printStr   
1EBF   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1ECB   CD BA 10               CALL   printStr   
1ECE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EDD   21 02 00               LD   hl,2   
1EE0   E5                     PUSH   hl   
1EE1   E5                     PUSH   hl   
1EE2   CD D0 11               CALL   run   
1EE5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1EF1   CD BA 10               CALL   printStr   
1EF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F01   E1                     POP   hl   
1F02   E5                     PUSH   hl   
1F03   E5                     PUSH   hl   
1F04   CD D0 11               CALL   run   
1F07   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F18   76                     HALT      
1F19                EXPECTM_3256S72:      
1F19   E1                     POP   HL   
1F1A                          ;*Macro unroll:  test "2 1 -",1
1F1A   31 00 5E               LD   SP,STACK   
1F1D   CD 07 11               CALL   coldInit   
1F20   CD A8 5C               CALL   execStr   
1F23   32 20 31 20 2D 00      DB   "2 1 -",0   
1F29   E1                     POP   HL   
1F2A   E5                     PUSH   HL   
1F2B   11 01 00               LD   DE,1   
1F2E   B7                     OR   A   
1F2F   ED 52                  SBC   HL,DE   
1F31   7D                     LD   A,L   
1F32   B4                     OR   H   
1F33   CA 93 1F               JP   Z,expectM_3257S73   
1F36   CD BA 10               CALL   printStr   
1F39   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1F45   CD BA 10               CALL   printStr   
1F48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F57   21 01 00               LD   hl,1   
1F5A   E5                     PUSH   hl   
1F5B   E5                     PUSH   hl   
1F5C   CD D0 11               CALL   run   
1F5F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F6B   CD BA 10               CALL   printStr   
1F6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F7B   E1                     POP   hl   
1F7C   E5                     PUSH   hl   
1F7D   E5                     PUSH   hl   
1F7E   CD D0 11               CALL   run   
1F81   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F92   76                     HALT      
1F93                EXPECTM_3257S73:      
1F93   E1                     POP   HL   
1F94                          ;*Macro unroll:  test "3a= a-- a",2
1F94   31 00 5E               LD   SP,STACK   
1F97   CD 07 11               CALL   coldInit   
1F9A   CD A8 5C               CALL   execStr   
1F9D   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1FA7   E1                     POP   HL   
1FA8   E5                     PUSH   HL   
1FA9   11 02 00               LD   DE,2   
1FAC   B7                     OR   A   
1FAD   ED 52                  SBC   HL,DE   
1FAF   7D                     LD   A,L   
1FB0   B4                     OR   H   
1FB1   CA 15 20               JP   Z,expectM_3258S74   
1FB4   CD BA 10               CALL   printStr   
1FB7   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1FC7   CD BA 10               CALL   printStr   
1FCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD9   21 02 00               LD   hl,2   
1FDC   E5                     PUSH   hl   
1FDD   E5                     PUSH   hl   
1FDE   CD D0 11               CALL   run   
1FE1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1FED   CD BA 10               CALL   printStr   
1FF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FFD   E1                     POP   hl   
1FFE   E5                     PUSH   hl   
1FFF   E5                     PUSH   hl   
2000   CD D0 11               CALL   run   
2003   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2014   76                     HALT      
2015                EXPECTM_3258S74:      
2015   E1                     POP   HL   
2016                          ;*Macro unroll:  test "3 5 &", 1
2016   31 00 5E               LD   SP,STACK   
2019   CD 07 11               CALL   coldInit   
201C   CD A8 5C               CALL   execStr   
201F   33 20 35 20 26 00      DB   "3 5 &",0   
2025   E1                     POP   HL   
2026   E5                     PUSH   HL   
2027   11 01 00               LD   DE,1   
202A   B7                     OR   A   
202B   ED 52                  SBC   HL,DE   
202D   7D                     LD   A,L   
202E   B4                     OR   H   
202F   CA 8F 20               JP   Z,expectM_3259S75   
2032   CD BA 10               CALL   printStr   
2035   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
2041   CD BA 10               CALL   printStr   
2044   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2053   21 01 00               LD   hl,1   
2056   E5                     PUSH   hl   
2057   E5                     PUSH   hl   
2058   CD D0 11               CALL   run   
205B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2067   CD BA 10               CALL   printStr   
206A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2077   E1                     POP   hl   
2078   E5                     PUSH   hl   
2079   E5                     PUSH   hl   
207A   CD D0 11               CALL   run   
207D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
208E   76                     HALT      
208F                EXPECTM_3259S75:      
208F   E1                     POP   HL   
2090                          ;*Macro unroll:  test "3 5 |", 7
2090   31 00 5E               LD   SP,STACK   
2093   CD 07 11               CALL   coldInit   
2096   CD A8 5C               CALL   execStr   
2099   33 20 35 20 7C 00      DB   "3 5 |",0   
209F   E1                     POP   HL   
20A0   E5                     PUSH   HL   
20A1   11 07 00               LD   DE,7   
20A4   B7                     OR   A   
20A5   ED 52                  SBC   HL,DE   
20A7   7D                     LD   A,L   
20A8   B4                     OR   H   
20A9   CA 09 21               JP   Z,expectM_3260S76   
20AC   CD BA 10               CALL   printStr   
20AF   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
20BB   CD BA 10               CALL   printStr   
20BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CD   21 07 00               LD   hl,7   
20D0   E5                     PUSH   hl   
20D1   E5                     PUSH   hl   
20D2   CD D0 11               CALL   run   
20D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
20E1   CD BA 10               CALL   printStr   
20E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20F1   E1                     POP   hl   
20F2   E5                     PUSH   hl   
20F3   E5                     PUSH   hl   
20F4   CD D0 11               CALL   run   
20F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2108   76                     HALT      
2109                EXPECTM_3260S76:      
2109   E1                     POP   HL   
210A                          ;*Macro unroll:  test "3 5 /xor", 6
210A   31 00 5E               LD   SP,STACK   
210D   CD 07 11               CALL   coldInit   
2110   CD A8 5C               CALL   execStr   
2113   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
211C   E1                     POP   HL   
211D   E5                     PUSH   HL   
211E   11 06 00               LD   DE,6   
2121   B7                     OR   A   
2122   ED 52                  SBC   HL,DE   
2124   7D                     LD   A,L   
2125   B4                     OR   H   
2126   CA 89 21               JP   Z,expectM_3261S77   
2129   CD BA 10               CALL   printStr   
212C   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
213B   CD BA 10               CALL   printStr   
213E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214D   21 06 00               LD   hl,6   
2150   E5                     PUSH   hl   
2151   E5                     PUSH   hl   
2152   CD D0 11               CALL   run   
2155   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2161   CD BA 10               CALL   printStr   
2164   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2171   E1                     POP   hl   
2172   E5                     PUSH   hl   
2173   E5                     PUSH   hl   
2174   CD D0 11               CALL   run   
2177   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2188   76                     HALT      
2189                EXPECTM_3261S77:      
2189   E1                     POP   HL   
218A                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
218A   31 00 5E               LD   SP,STACK   
218D   CD 07 11               CALL   coldInit   
2190   CD A8 5C               CALL   execStr   
2193   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
21A4   E1                     POP   HL   
21A5   E5                     PUSH   HL   
21A6   11 06 00               LD   DE,6   
21A9   B7                     OR   A   
21AA   ED 52                  SBC   HL,DE   
21AC   7D                     LD   A,L   
21AD   B4                     OR   H   
21AE   CA 19 22               JP   Z,expectM_3262S78   
21B1   CD BA 10               CALL   printStr   
21B4   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
21CB   CD BA 10               CALL   printStr   
21CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21DD   21 06 00               LD   hl,6   
21E0   E5                     PUSH   hl   
21E1   E5                     PUSH   hl   
21E2   CD D0 11               CALL   run   
21E5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
21F1   CD BA 10               CALL   printStr   
21F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2201   E1                     POP   hl   
2202   E5                     PUSH   hl   
2203   E5                     PUSH   hl   
2204   CD D0 11               CALL   run   
2207   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2218   76                     HALT      
2219                EXPECTM_3262S78:      
2219   E1                     POP   HL   
221A                          ;*Macro unroll:  test "0 !", true
221A   31 00 5E               LD   SP,STACK   
221D   CD 07 11               CALL   coldInit   
2220   CD A8 5C               CALL   execStr   
2223   30 20 21 00            DB   "0 !",0   
2227   E1                     POP   HL   
2228   E5                     PUSH   HL   
2229   11 FF FF               LD   DE,true   
222C   B7                     OR   A   
222D   ED 52                  SBC   HL,DE   
222F   7D                     LD   A,L   
2230   B4                     OR   H   
2231   CA 8F 22               JP   Z,expectM_3263S79   
2234   CD BA 10               CALL   printStr   
2237   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
2241   CD BA 10               CALL   printStr   
2244   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2253   21 FF FF               LD   hl,true   
2256   E5                     PUSH   hl   
2257   E5                     PUSH   hl   
2258   CD D0 11               CALL   run   
225B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2267   CD BA 10               CALL   printStr   
226A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2277   E1                     POP   hl   
2278   E5                     PUSH   hl   
2279   E5                     PUSH   hl   
227A   CD D0 11               CALL   run   
227D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
228E   76                     HALT      
228F                EXPECTM_3263S79:      
228F   E1                     POP   HL   
2290                          ;*Macro unroll:  test "2 !", false
2290   31 00 5E               LD   SP,STACK   
2293   CD 07 11               CALL   coldInit   
2296   CD A8 5C               CALL   execStr   
2299   32 20 21 00            DB   "2 !",0   
229D   E1                     POP   HL   
229E   E5                     PUSH   HL   
229F   11 00 00               LD   DE,false   
22A2   B7                     OR   A   
22A3   ED 52                  SBC   HL,DE   
22A5   7D                     LD   A,L   
22A6   B4                     OR   H   
22A7   CA 05 23               JP   Z,expectM_3264S80   
22AA   CD BA 10               CALL   printStr   
22AD   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
22B7   CD BA 10               CALL   printStr   
22BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C9   21 00 00               LD   hl,false   
22CC   E5                     PUSH   hl   
22CD   E5                     PUSH   hl   
22CE   CD D0 11               CALL   run   
22D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
22DD   CD BA 10               CALL   printStr   
22E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22ED   E1                     POP   hl   
22EE   E5                     PUSH   hl   
22EF   E5                     PUSH   hl   
22F0   CD D0 11               CALL   run   
22F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2304   76                     HALT      
2305                EXPECTM_3264S80:      
2305   E1                     POP   HL   
2306                          ;*Macro unroll:  test "0 !!", false
2306   31 00 5E               LD   SP,STACK   
2309   CD 07 11               CALL   coldInit   
230C   CD A8 5C               CALL   execStr   
230F   30 20 21 21 00         DB   "0 !!",0   
2314   E1                     POP   HL   
2315   E5                     PUSH   HL   
2316   11 00 00               LD   DE,false   
2319   B7                     OR   A   
231A   ED 52                  SBC   HL,DE   
231C   7D                     LD   A,L   
231D   B4                     OR   H   
231E   CA 7D 23               JP   Z,expectM_3265S81   
2321   CD BA 10               CALL   printStr   
2324   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
232F   CD BA 10               CALL   printStr   
2332   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2341   21 00 00               LD   hl,false   
2344   E5                     PUSH   hl   
2345   E5                     PUSH   hl   
2346   CD D0 11               CALL   run   
2349   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2355   CD BA 10               CALL   printStr   
2358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2365   E1                     POP   hl   
2366   E5                     PUSH   hl   
2367   E5                     PUSH   hl   
2368   CD D0 11               CALL   run   
236B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
237C   76                     HALT      
237D                EXPECTM_3265S81:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "2 !!", true
237E   31 00 5E               LD   SP,STACK   
2381   CD 07 11               CALL   coldInit   
2384   CD A8 5C               CALL   execStr   
2387   32 20 21 21 00         DB   "2 !!",0   
238C   E1                     POP   HL   
238D   E5                     PUSH   HL   
238E   11 FF FF               LD   DE,true   
2391   B7                     OR   A   
2392   ED 52                  SBC   HL,DE   
2394   7D                     LD   A,L   
2395   B4                     OR   H   
2396   CA F5 23               JP   Z,expectM_3266S82   
2399   CD BA 10               CALL   printStr   
239C   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
23A7   CD BA 10               CALL   printStr   
23AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B9   21 FF FF               LD   hl,true   
23BC   E5                     PUSH   hl   
23BD   E5                     PUSH   hl   
23BE   CD D0 11               CALL   run   
23C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
23CD   CD BA 10               CALL   printStr   
23D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DD   E1                     POP   hl   
23DE   E5                     PUSH   hl   
23DF   E5                     PUSH   hl   
23E0   CD D0 11               CALL   run   
23E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23F4   76                     HALT      
23F5                EXPECTM_3266S82:      
23F5   E1                     POP   HL   
23F6                          ;*Macro unroll:  test "2 3 *", 6
23F6   31 00 5E               LD   SP,STACK   
23F9   CD 07 11               CALL   coldInit   
23FC   CD A8 5C               CALL   execStr   
23FF   32 20 33 20 2A 00      DB   "2 3 *",0   
2405   E1                     POP   HL   
2406   E5                     PUSH   HL   
2407   11 06 00               LD   DE,6   
240A   B7                     OR   A   
240B   ED 52                  SBC   HL,DE   
240D   7D                     LD   A,L   
240E   B4                     OR   H   
240F   CA 6F 24               JP   Z,expectM_3267S83   
2412   CD BA 10               CALL   printStr   
2415   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2421   CD BA 10               CALL   printStr   
2424   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2433   21 06 00               LD   hl,6   
2436   E5                     PUSH   hl   
2437   E5                     PUSH   hl   
2438   CD D0 11               CALL   run   
243B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2447   CD BA 10               CALL   printStr   
244A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2457   E1                     POP   hl   
2458   E5                     PUSH   hl   
2459   E5                     PUSH   hl   
245A   CD D0 11               CALL   run   
245D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
246E   76                     HALT      
246F                EXPECTM_3267S83:      
246F   E1                     POP   HL   
2470                          ;*Macro unroll:  test "1 2 3 + *", 5
2470   31 00 5E               LD   SP,STACK   
2473   CD 07 11               CALL   coldInit   
2476   CD A8 5C               CALL   execStr   
2479   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2483   E1                     POP   HL   
2484   E5                     PUSH   HL   
2485   11 05 00               LD   DE,5   
2488   B7                     OR   A   
2489   ED 52                  SBC   HL,DE   
248B   7D                     LD   A,L   
248C   B4                     OR   H   
248D   CA F1 24               JP   Z,expectM_3268S84   
2490   CD BA 10               CALL   printStr   
2493   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
24A3   CD BA 10               CALL   printStr   
24A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24B5   21 05 00               LD   hl,5   
24B8   E5                     PUSH   hl   
24B9   E5                     PUSH   hl   
24BA   CD D0 11               CALL   run   
24BD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
24C9   CD BA 10               CALL   printStr   
24CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D9   E1                     POP   hl   
24DA   E5                     PUSH   hl   
24DB   E5                     PUSH   hl   
24DC   CD D0 11               CALL   run   
24DF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24F0   76                     HALT      
24F1                EXPECTM_3268S84:      
24F1   E1                     POP   HL   
24F2                          ;*Macro unroll:  test "7 3 /", 2
24F2   31 00 5E               LD   SP,STACK   
24F5   CD 07 11               CALL   coldInit   
24F8   CD A8 5C               CALL   execStr   
24FB   37 20 33 20 2F 00      DB   "7 3 /",0   
2501   E1                     POP   HL   
2502   E5                     PUSH   HL   
2503   11 02 00               LD   DE,2   
2506   B7                     OR   A   
2507   ED 52                  SBC   HL,DE   
2509   7D                     LD   A,L   
250A   B4                     OR   H   
250B   CA 6B 25               JP   Z,expectM_3269S85   
250E   CD BA 10               CALL   printStr   
2511   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
251D   CD BA 10               CALL   printStr   
2520   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
252F   21 02 00               LD   hl,2   
2532   E5                     PUSH   hl   
2533   E5                     PUSH   hl   
2534   CD D0 11               CALL   run   
2537   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2543   CD BA 10               CALL   printStr   
2546   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2553   E1                     POP   hl   
2554   E5                     PUSH   hl   
2555   E5                     PUSH   hl   
2556   CD D0 11               CALL   run   
2559   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
256A   76                     HALT      
256B                EXPECTM_3269S85:      
256B   E1                     POP   HL   
256C                          ;*Macro unroll:  test "100a= 1a+= a", 101
256C   31 00 5E               LD   SP,STACK   
256F   CD 07 11               CALL   coldInit   
2572   CD A8 5C               CALL   execStr   
2575   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2582   E1                     POP   HL   
2583   E5                     PUSH   HL   
2584   11 65 00               LD   DE,101   
2587   B7                     OR   A   
2588   ED 52                  SBC   HL,DE   
258A   7D                     LD   A,L   
258B   B4                     OR   H   
258C   CA F3 25               JP   Z,expectM_3270S86   
258F   CD BA 10               CALL   printStr   
2592   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
25A5   CD BA 10               CALL   printStr   
25A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B7   21 65 00               LD   hl,101   
25BA   E5                     PUSH   hl   
25BB   E5                     PUSH   hl   
25BC   CD D0 11               CALL   run   
25BF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25CB   CD BA 10               CALL   printStr   
25CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DB   E1                     POP   hl   
25DC   E5                     PUSH   hl   
25DD   E5                     PUSH   hl   
25DE   CD D0 11               CALL   run   
25E1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
25F2   76                     HALT      
25F3                EXPECTM_3270S86:      
25F3   E1                     POP   HL   
25F4                          ;*Macro unroll:  test "100a= 1a-= a", 99
25F4   31 00 5E               LD   SP,STACK   
25F7   CD 07 11               CALL   coldInit   
25FA   CD A8 5C               CALL   execStr   
25FD   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
260A   E1                     POP   HL   
260B   E5                     PUSH   HL   
260C   11 63 00               LD   DE,99   
260F   B7                     OR   A   
2610   ED 52                  SBC   HL,DE   
2612   7D                     LD   A,L   
2613   B4                     OR   H   
2614   CA 7B 26               JP   Z,expectM_3271S87   
2617   CD BA 10               CALL   printStr   
261A   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
262D   CD BA 10               CALL   printStr   
2630   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
263F   21 63 00               LD   hl,99   
2642   E5                     PUSH   hl   
2643   E5                     PUSH   hl   
2644   CD D0 11               CALL   run   
2647   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2653   CD BA 10               CALL   printStr   
2656   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2663   E1                     POP   hl   
2664   E5                     PUSH   hl   
2665   E5                     PUSH   hl   
2666   CD D0 11               CALL   run   
2669   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
267A   76                     HALT      
267B                EXPECTM_3271S87:      
267B   E1                     POP   HL   
267C                          ;*Macro unroll:  test "100a= 2a*= a", 200
267C   31 00 5E               LD   SP,STACK   
267F   CD 07 11               CALL   coldInit   
2682   CD A8 5C               CALL   execStr   
2685   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2692   E1                     POP   HL   
2693   E5                     PUSH   HL   
2694   11 C8 00               LD   DE,200   
2697   B7                     OR   A   
2698   ED 52                  SBC   HL,DE   
269A   7D                     LD   A,L   
269B   B4                     OR   H   
269C   CA 03 27               JP   Z,expectM_3272S88   
269F   CD BA 10               CALL   printStr   
26A2   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
26B5   CD BA 10               CALL   printStr   
26B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C7   21 C8 00               LD   hl,200   
26CA   E5                     PUSH   hl   
26CB   E5                     PUSH   hl   
26CC   CD D0 11               CALL   run   
26CF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26DB   CD BA 10               CALL   printStr   
26DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26EB   E1                     POP   hl   
26EC   E5                     PUSH   hl   
26ED   E5                     PUSH   hl   
26EE   CD D0 11               CALL   run   
26F1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2702   76                     HALT      
2703                EXPECTM_3272S88:      
2703   E1                     POP   HL   
2704                          ;*Macro unroll:  test "100a= 2 a/= a", 50
2704   31 00 5E               LD   SP,STACK   
2707   CD 07 11               CALL   coldInit   
270A   CD A8 5C               CALL   execStr   
270D   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
271B   E1                     POP   HL   
271C   E5                     PUSH   HL   
271D   11 32 00               LD   DE,50   
2720   B7                     OR   A   
2721   ED 52                  SBC   HL,DE   
2723   7D                     LD   A,L   
2724   B4                     OR   H   
2725   CA 8D 27               JP   Z,expectM_3273S89   
2728   CD BA 10               CALL   printStr   
272B   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
273F   CD BA 10               CALL   printStr   
2742   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2751   21 32 00               LD   hl,50   
2754   E5                     PUSH   hl   
2755   E5                     PUSH   hl   
2756   CD D0 11               CALL   run   
2759   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2765   CD BA 10               CALL   printStr   
2768   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2775   E1                     POP   hl   
2776   E5                     PUSH   hl   
2777   E5                     PUSH   hl   
2778   CD D0 11               CALL   run   
277B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
278C   76                     HALT      
278D                EXPECTM_3273S89:      
278D   E1                     POP   HL   
278E                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
278E   31 00 5E               LD   SP,STACK   
2791   CD 07 11               CALL   coldInit   
2794   CD A8 5C               CALL   execStr   
2797   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
27A7   E1                     POP   HL   
27A8   E5                     PUSH   HL   
27A9   11 05 00               LD   DE,5   
27AC   B7                     OR   A   
27AD   ED 52                  SBC   HL,DE   
27AF   7D                     LD   A,L   
27B0   B4                     OR   H   
27B1   CA 1B 28               JP   Z,expectM_3274S90   
27B4   CD BA 10               CALL   printStr   
27B7   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
27CD   CD BA 10               CALL   printStr   
27D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27DF   21 05 00               LD   hl,5   
27E2   E5                     PUSH   hl   
27E3   E5                     PUSH   hl   
27E4   CD D0 11               CALL   run   
27E7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
27F3   CD BA 10               CALL   printStr   
27F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2803   E1                     POP   hl   
2804   E5                     PUSH   hl   
2805   E5                     PUSH   hl   
2806   CD D0 11               CALL   run   
2809   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
281A   76                     HALT      
281B                EXPECTM_3274S90:      
281B   E1                     POP   HL   
281C                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
281C   31 00 5E               LD   SP,STACK   
281F   CD 07 11               CALL   coldInit   
2822   CD A8 5C               CALL   execStr   
2825   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2835   E1                     POP   HL   
2836   E5                     PUSH   HL   
2837   11 01 00               LD   DE,1   
283A   B7                     OR   A   
283B   ED 52                  SBC   HL,DE   
283D   7D                     LD   A,L   
283E   B4                     OR   H   
283F   CA A9 28               JP   Z,expectM_3275S91   
2842   CD BA 10               CALL   printStr   
2845   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
285B   CD BA 10               CALL   printStr   
285E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
286D   21 01 00               LD   hl,1   
2870   E5                     PUSH   hl   
2871   E5                     PUSH   hl   
2872   CD D0 11               CALL   run   
2875   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2881   CD BA 10               CALL   printStr   
2884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2891   E1                     POP   hl   
2892   E5                     PUSH   hl   
2893   E5                     PUSH   hl   
2894   CD D0 11               CALL   run   
2897   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
28A8   76                     HALT      
28A9                EXPECTM_3275S91:      
28A9   E1                     POP   HL   
28AA                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
28AA   31 00 5E               LD   SP,STACK   
28AD   CD 07 11               CALL   coldInit   
28B0   CD A8 5C               CALL   execStr   
28B3   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
28C3   E1                     POP   HL   
28C4   E5                     PUSH   HL   
28C5   11 06 00               LD   DE,6   
28C8   B7                     OR   A   
28C9   ED 52                  SBC   HL,DE   
28CB   7D                     LD   A,L   
28CC   B4                     OR   H   
28CD   CA 37 29               JP   Z,expectM_3276S92   
28D0   CD BA 10               CALL   printStr   
28D3   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
28E9   CD BA 10               CALL   printStr   
28EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28FB   21 06 00               LD   hl,6   
28FE   E5                     PUSH   hl   
28FF   E5                     PUSH   hl   
2900   CD D0 11               CALL   run   
2903   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
290F   CD BA 10               CALL   printStr   
2912   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
291F   E1                     POP   hl   
2920   E5                     PUSH   hl   
2921   E5                     PUSH   hl   
2922   CD D0 11               CALL   run   
2925   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2936   76                     HALT      
2937                EXPECTM_3276S92:      
2937   E1                     POP   HL   
2938                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2938   31 00 5E               LD   SP,STACK   
293B   CD 07 11               CALL   coldInit   
293E   CD A8 5C               CALL   execStr   
2941   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2951   E1                     POP   HL   
2952   E5                     PUSH   HL   
2953   11 03 00               LD   DE,3   
2956   B7                     OR   A   
2957   ED 52                  SBC   HL,DE   
2959   7D                     LD   A,L   
295A   B4                     OR   H   
295B   CA C5 29               JP   Z,expectM_3277S93   
295E   CD BA 10               CALL   printStr   
2961   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2977   CD BA 10               CALL   printStr   
297A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2989   21 03 00               LD   hl,3   
298C   E5                     PUSH   hl   
298D   E5                     PUSH   hl   
298E   CD D0 11               CALL   run   
2991   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
299D   CD BA 10               CALL   printStr   
29A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29AD   E1                     POP   hl   
29AE   E5                     PUSH   hl   
29AF   E5                     PUSH   hl   
29B0   CD D0 11               CALL   run   
29B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29C4   76                     HALT      
29C5                EXPECTM_3277S93:      
29C5   E1                     POP   HL   
29C6                          ;*Macro unroll:  test "$55a= $AAa&= a",0
29C6   31 00 5E               LD   SP,STACK   
29C9   CD 07 11               CALL   coldInit   
29CC   CD A8 5C               CALL   execStr   
29CF   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
29DE   E1                     POP   HL   
29DF   E5                     PUSH   HL   
29E0   11 00 00               LD   DE,0   
29E3   B7                     OR   A   
29E4   ED 52                  SBC   HL,DE   
29E6   7D                     LD   A,L   
29E7   B4                     OR   H   
29E8   CA 51 2A               JP   Z,expectM_3278S94   
29EB   CD BA 10               CALL   printStr   
29EE   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2A03   CD BA 10               CALL   printStr   
2A06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A15   21 00 00               LD   hl,0   
2A18   E5                     PUSH   hl   
2A19   E5                     PUSH   hl   
2A1A   CD D0 11               CALL   run   
2A1D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A29   CD BA 10               CALL   printStr   
2A2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A39   E1                     POP   hl   
2A3A   E5                     PUSH   hl   
2A3B   E5                     PUSH   hl   
2A3C   CD D0 11               CALL   run   
2A3F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A50   76                     HALT      
2A51                EXPECTM_3278S94:      
2A51   E1                     POP   HL   
2A52                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2A52   31 00 5E               LD   SP,STACK   
2A55   CD 07 11               CALL   coldInit   
2A58   CD A8 5C               CALL   execStr   
2A5B   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2A6A   E1                     POP   HL   
2A6B   E5                     PUSH   HL   
2A6C   11 FF 00               LD   DE,$FF   
2A6F   B7                     OR   A   
2A70   ED 52                  SBC   HL,DE   
2A72   7D                     LD   A,L   
2A73   B4                     OR   H   
2A74   CA DD 2A               JP   Z,expectM_3279S95   
2A77   CD BA 10               CALL   printStr   
2A7A   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2A8F   CD BA 10               CALL   printStr   
2A92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AA1   21 FF 00               LD   hl,$FF   
2AA4   E5                     PUSH   hl   
2AA5   E5                     PUSH   hl   
2AA6   CD D0 11               CALL   run   
2AA9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2AB5   CD BA 10               CALL   printStr   
2AB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AC5   E1                     POP   hl   
2AC6   E5                     PUSH   hl   
2AC7   E5                     PUSH   hl   
2AC8   CD D0 11               CALL   run   
2ACB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ADC   76                     HALT      
2ADD                EXPECTM_3279S95:      
2ADD   E1                     POP   HL   
2ADE                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
2ADE   31 00 5E               LD   SP,STACK   
2AE1   CD 07 11               CALL   coldInit   
2AE4   CD A8 5C               CALL   execStr   
2AE7   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
2AFA   E1                     POP   HL   
2AFB   E5                     PUSH   HL   
2AFC   11 0F 00               LD   DE,$0F   
2AFF   B7                     OR   A   
2B00   ED 52                  SBC   HL,DE   
2B02   7D                     LD   A,L   
2B03   B4                     OR   H   
2B04   CA 71 2B               JP   Z,expectM_3280S96   
2B07   CD BA 10               CALL   printStr   
2B0A   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2B23   CD BA 10               CALL   printStr   
2B26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B35   21 0F 00               LD   hl,$0F   
2B38   E5                     PUSH   hl   
2B39   E5                     PUSH   hl   
2B3A   CD D0 11               CALL   run   
2B3D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B49   CD BA 10               CALL   printStr   
2B4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B59   E1                     POP   hl   
2B5A   E5                     PUSH   hl   
2B5B   E5                     PUSH   hl   
2B5C   CD D0 11               CALL   run   
2B5F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B70   76                     HALT      
2B71                EXPECTM_3280S96:      
2B71   E1                     POP   HL   
2B72                          ;*Macro unroll:  test "$00AA~",$FF55
2B72   31 00 5E               LD   SP,STACK   
2B75   CD 07 11               CALL   coldInit   
2B78   CD A8 5C               CALL   execStr   
2B7B   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2B82   E1                     POP   HL   
2B83   E5                     PUSH   HL   
2B84   11 55 FF               LD   DE,$FF55   
2B87   B7                     OR   A   
2B88   ED 52                  SBC   HL,DE   
2B8A   7D                     LD   A,L   
2B8B   B4                     OR   H   
2B8C   CA ED 2B               JP   Z,expectM_3281S97   
2B8F   CD BA 10               CALL   printStr   
2B92   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2B9F   CD BA 10               CALL   printStr   
2BA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BB1   21 55 FF               LD   hl,$FF55   
2BB4   E5                     PUSH   hl   
2BB5   E5                     PUSH   hl   
2BB6   CD D0 11               CALL   run   
2BB9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2BC5   CD BA 10               CALL   printStr   
2BC8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD5   E1                     POP   hl   
2BD6   E5                     PUSH   hl   
2BD7   E5                     PUSH   hl   
2BD8   CD D0 11               CALL   run   
2BDB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BEC   76                     HALT      
2BED                EXPECTM_3281S97:      
2BED   E1                     POP   HL   
2BEE                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2BEE   31 00 5E               LD   SP,STACK   
2BF1   CD 07 11               CALL   coldInit   
2BF4   CD A8 5C               CALL   execStr   
2BF7   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2C05   E1                     POP   HL   
2C06   E5                     PUSH   HL   
2C07   11 55 55               LD   DE,$5555   
2C0A   B7                     OR   A   
2C0B   ED 52                  SBC   HL,DE   
2C0D   7D                     LD   A,L   
2C0E   B4                     OR   H   
2C0F   CA 77 2C               JP   Z,expectM_3282S98   
2C12   CD BA 10               CALL   printStr   
2C15   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2C29   CD BA 10               CALL   printStr   
2C2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C3B   21 55 55               LD   hl,$5555   
2C3E   E5                     PUSH   hl   
2C3F   E5                     PUSH   hl   
2C40   CD D0 11               CALL   run   
2C43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C4F   CD BA 10               CALL   printStr   
2C52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C5F   E1                     POP   hl   
2C60   E5                     PUSH   hl   
2C61   E5                     PUSH   hl   
2C62   CD D0 11               CALL   run   
2C65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C76   76                     HALT      
2C77                EXPECTM_3282S98:      
2C77   E1                     POP   HL   
2C78                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2C78   31 00 5E               LD   SP,STACK   
2C7B   CD 07 11               CALL   coldInit   
2C7E   CD A8 5C               CALL   execStr   
2C81   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2C8F   E1                     POP   HL   
2C90   E5                     PUSH   HL   
2C91   11 06 00               LD   DE,6   
2C94   B7                     OR   A   
2C95   ED 52                  SBC   HL,DE   
2C97   7D                     LD   A,L   
2C98   B4                     OR   H   
2C99   CA 01 2D               JP   Z,expectM_3283S99   
2C9C   CD BA 10               CALL   printStr   
2C9F   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2CB3   CD BA 10               CALL   printStr   
2CB6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC5   21 06 00               LD   hl,6   
2CC8   E5                     PUSH   hl   
2CC9   E5                     PUSH   hl   
2CCA   CD D0 11               CALL   run   
2CCD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2CD9   CD BA 10               CALL   printStr   
2CDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE9   E1                     POP   hl   
2CEA   E5                     PUSH   hl   
2CEB   E5                     PUSH   hl   
2CEC   CD D0 11               CALL   run   
2CEF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D00   76                     HALT      
2D01                EXPECTM_3283S99:      
2D01   E1                     POP   HL   
2D02                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2D02   31 00 5E               LD   SP,STACK   
2D05   CD 07 11               CALL   coldInit   
2D08   CD A8 5C               CALL   execStr   
2D0B   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2D1A   E1                     POP   HL   
2D1B   E5                     PUSH   HL   
2D1C   11 05 00               LD   DE,5   
2D1F   B7                     OR   A   
2D20   ED 52                  SBC   HL,DE   
2D22   7D                     LD   A,L   
2D23   B4                     OR   H   
2D24   CA 8D 2D               JP   Z,expectM_3284S100   
2D27   CD BA 10               CALL   printStr   
2D2A   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2D3F   CD BA 10               CALL   printStr   
2D42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D51   21 05 00               LD   hl,5   
2D54   E5                     PUSH   hl   
2D55   E5                     PUSH   hl   
2D56   CD D0 11               CALL   run   
2D59   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D65   CD BA 10               CALL   printStr   
2D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D75   E1                     POP   hl   
2D76   E5                     PUSH   hl   
2D77   E5                     PUSH   hl   
2D78   CD D0 11               CALL   run   
2D7B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D8C   76                     HALT      
2D8D                EXPECTM_3284S100:      
2D8D   E1                     POP   HL   
2D8E                          ;*Macro unroll:  test "7 3 / /rem", 1
2D8E   31 00 5E               LD   SP,STACK   
2D91   CD 07 11               CALL   coldInit   
2D94   CD A8 5C               CALL   execStr   
2D97   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2DA2   E1                     POP   HL   
2DA3   E5                     PUSH   HL   
2DA4   11 01 00               LD   DE,1   
2DA7   B7                     OR   A   
2DA8   ED 52                  SBC   HL,DE   
2DAA   7D                     LD   A,L   
2DAB   B4                     OR   H   
2DAC   CA 11 2E               JP   Z,expectM_3285S101   
2DAF   CD BA 10               CALL   printStr   
2DB2   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2DC3   CD BA 10               CALL   printStr   
2DC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DD5   21 01 00               LD   hl,1   
2DD8   E5                     PUSH   hl   
2DD9   E5                     PUSH   hl   
2DDA   CD D0 11               CALL   run   
2DDD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DE9   CD BA 10               CALL   printStr   
2DEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DF9   E1                     POP   hl   
2DFA   E5                     PUSH   hl   
2DFB   E5                     PUSH   hl   
2DFC   CD D0 11               CALL   run   
2DFF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E10   76                     HALT      
2E11                EXPECTM_3285S101:      
2E11   E1                     POP   HL   
2E12                          ;*Macro unroll:  test "7 3 /", 2
2E12   31 00 5E               LD   SP,STACK   
2E15   CD 07 11               CALL   coldInit   
2E18   CD A8 5C               CALL   execStr   
2E1B   37 20 33 20 2F 00      DB   "7 3 /",0   
2E21   E1                     POP   HL   
2E22   E5                     PUSH   HL   
2E23   11 02 00               LD   DE,2   
2E26   B7                     OR   A   
2E27   ED 52                  SBC   HL,DE   
2E29   7D                     LD   A,L   
2E2A   B4                     OR   H   
2E2B   CA 8B 2E               JP   Z,expectM_3286S102   
2E2E   CD BA 10               CALL   printStr   
2E31   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2E3D   CD BA 10               CALL   printStr   
2E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E4F   21 02 00               LD   hl,2   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD D0 11               CALL   run   
2E57   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E63   CD BA 10               CALL   printStr   
2E66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E73   E1                     POP   hl   
2E74   E5                     PUSH   hl   
2E75   E5                     PUSH   hl   
2E76   CD D0 11               CALL   run   
2E79   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E8A   76                     HALT      
2E8B                EXPECTM_3286S102:      
2E8B   E1                     POP   HL   
2E8C                          ;*Macro unroll:  test "2 3 ==", FALSE
2E8C   31 00 5E               LD   SP,STACK   
2E8F   CD 07 11               CALL   coldInit   
2E92   CD A8 5C               CALL   execStr   
2E95   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2E9C   E1                     POP   HL   
2E9D   E5                     PUSH   HL   
2E9E   11 00 00               LD   DE,FALSE   
2EA1   B7                     OR   A   
2EA2   ED 52                  SBC   HL,DE   
2EA4   7D                     LD   A,L   
2EA5   B4                     OR   H   
2EA6   CA 07 2F               JP   Z,expectM_3287S103   
2EA9   CD BA 10               CALL   printStr   
2EAC   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2EB9   CD BA 10               CALL   printStr   
2EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ECB   21 00 00               LD   hl,FALSE   
2ECE   E5                     PUSH   hl   
2ECF   E5                     PUSH   hl   
2ED0   CD D0 11               CALL   run   
2ED3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EDF   CD BA 10               CALL   printStr   
2EE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EEF   E1                     POP   hl   
2EF0   E5                     PUSH   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD D0 11               CALL   run   
2EF5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F06   76                     HALT      
2F07                EXPECTM_3287S103:      
2F07   E1                     POP   HL   
2F08                          ;*Macro unroll:  test "3 3 ==", TRUE
2F08   31 00 5E               LD   SP,STACK   
2F0B   CD 07 11               CALL   coldInit   
2F0E   CD A8 5C               CALL   execStr   
2F11   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2F18   E1                     POP   HL   
2F19   E5                     PUSH   HL   
2F1A   11 FF FF               LD   DE,TRUE   
2F1D   B7                     OR   A   
2F1E   ED 52                  SBC   HL,DE   
2F20   7D                     LD   A,L   
2F21   B4                     OR   H   
2F22   CA 83 2F               JP   Z,expectM_3288S104   
2F25   CD BA 10               CALL   printStr   
2F28   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2F35   CD BA 10               CALL   printStr   
2F38   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F47   21 FF FF               LD   hl,TRUE   
2F4A   E5                     PUSH   hl   
2F4B   E5                     PUSH   hl   
2F4C   CD D0 11               CALL   run   
2F4F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F5B   CD BA 10               CALL   printStr   
2F5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F6B   E1                     POP   hl   
2F6C   E5                     PUSH   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD D0 11               CALL   run   
2F71   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F82   76                     HALT      
2F83                EXPECTM_3288S104:      
2F83   E1                     POP   HL   
2F84                          ;*Macro unroll:  test "1 2 <", TRUE
2F84   31 00 5E               LD   SP,STACK   
2F87   CD 07 11               CALL   coldInit   
2F8A   CD A8 5C               CALL   execStr   
2F8D   31 20 32 20 3C 00      DB   "1 2 <",0   
2F93   E1                     POP   HL   
2F94   E5                     PUSH   HL   
2F95   11 FF FF               LD   DE,TRUE   
2F98   B7                     OR   A   
2F99   ED 52                  SBC   HL,DE   
2F9B   7D                     LD   A,L   
2F9C   B4                     OR   H   
2F9D   CA FD 2F               JP   Z,expectM_3289S105   
2FA0   CD BA 10               CALL   printStr   
2FA3   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2FAF   CD BA 10               CALL   printStr   
2FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC1   21 FF FF               LD   hl,TRUE   
2FC4   E5                     PUSH   hl   
2FC5   E5                     PUSH   hl   
2FC6   CD D0 11               CALL   run   
2FC9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2FD5   CD BA 10               CALL   printStr   
2FD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE5   E1                     POP   hl   
2FE6   E5                     PUSH   hl   
2FE7   E5                     PUSH   hl   
2FE8   CD D0 11               CALL   run   
2FEB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2FFC   76                     HALT      
2FFD                EXPECTM_3289S105:      
2FFD   E1                     POP   HL   
2FFE                          ;*Macro unroll:  test "2 1 <", FALSE
2FFE   31 00 5E               LD   SP,STACK   
3001   CD 07 11               CALL   coldInit   
3004   CD A8 5C               CALL   execStr   
3007   32 20 31 20 3C 00      DB   "2 1 <",0   
300D   E1                     POP   HL   
300E   E5                     PUSH   HL   
300F   11 00 00               LD   DE,FALSE   
3012   B7                     OR   A   
3013   ED 52                  SBC   HL,DE   
3015   7D                     LD   A,L   
3016   B4                     OR   H   
3017   CA 77 30               JP   Z,expectM_3290S106   
301A   CD BA 10               CALL   printStr   
301D   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
3029   CD BA 10               CALL   printStr   
302C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
303B   21 00 00               LD   hl,FALSE   
303E   E5                     PUSH   hl   
303F   E5                     PUSH   hl   
3040   CD D0 11               CALL   run   
3043   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
304F   CD BA 10               CALL   printStr   
3052   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
305F   E1                     POP   hl   
3060   E5                     PUSH   hl   
3061   E5                     PUSH   hl   
3062   CD D0 11               CALL   run   
3065   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3076   76                     HALT      
3077                EXPECTM_3290S106:      
3077   E1                     POP   HL   
3078                          ;*Macro unroll:  test "2 3 <", TRUE
3078   31 00 5E               LD   SP,STACK   
307B   CD 07 11               CALL   coldInit   
307E   CD A8 5C               CALL   execStr   
3081   32 20 33 20 3C 00      DB   "2 3 <",0   
3087   E1                     POP   HL   
3088   E5                     PUSH   HL   
3089   11 FF FF               LD   DE,TRUE   
308C   B7                     OR   A   
308D   ED 52                  SBC   HL,DE   
308F   7D                     LD   A,L   
3090   B4                     OR   H   
3091   CA F1 30               JP   Z,expectM_3291S107   
3094   CD BA 10               CALL   printStr   
3097   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
30A3   CD BA 10               CALL   printStr   
30A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B5   21 FF FF               LD   hl,TRUE   
30B8   E5                     PUSH   hl   
30B9   E5                     PUSH   hl   
30BA   CD D0 11               CALL   run   
30BD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
30C9   CD BA 10               CALL   printStr   
30CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D9   E1                     POP   hl   
30DA   E5                     PUSH   hl   
30DB   E5                     PUSH   hl   
30DC   CD D0 11               CALL   run   
30DF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
30F0   76                     HALT      
30F1                EXPECTM_3291S107:      
30F1   E1                     POP   HL   
30F2                          ;*Macro unroll:  test "3 3 <", FALSE
30F2   31 00 5E               LD   SP,STACK   
30F5   CD 07 11               CALL   coldInit   
30F8   CD A8 5C               CALL   execStr   
30FB   33 20 33 20 3C 00      DB   "3 3 <",0   
3101   E1                     POP   HL   
3102   E5                     PUSH   HL   
3103   11 00 00               LD   DE,FALSE   
3106   B7                     OR   A   
3107   ED 52                  SBC   HL,DE   
3109   7D                     LD   A,L   
310A   B4                     OR   H   
310B   CA 6B 31               JP   Z,expectM_3292S108   
310E   CD BA 10               CALL   printStr   
3111   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
311D   CD BA 10               CALL   printStr   
3120   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312F   21 00 00               LD   hl,FALSE   
3132   E5                     PUSH   hl   
3133   E5                     PUSH   hl   
3134   CD D0 11               CALL   run   
3137   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3143   CD BA 10               CALL   printStr   
3146   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3153   E1                     POP   hl   
3154   E5                     PUSH   hl   
3155   E5                     PUSH   hl   
3156   CD D0 11               CALL   run   
3159   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
316A   76                     HALT      
316B                EXPECTM_3292S108:      
316B   E1                     POP   HL   
316C                          ;*Macro unroll:  test "1 2 >", FALSE
316C   31 00 5E               LD   SP,STACK   
316F   CD 07 11               CALL   coldInit   
3172   CD A8 5C               CALL   execStr   
3175   31 20 32 20 3E 00      DB   "1 2 >",0   
317B   E1                     POP   HL   
317C   E5                     PUSH   HL   
317D   11 00 00               LD   DE,FALSE   
3180   B7                     OR   A   
3181   ED 52                  SBC   HL,DE   
3183   7D                     LD   A,L   
3184   B4                     OR   H   
3185   CA E5 31               JP   Z,expectM_3293S109   
3188   CD BA 10               CALL   printStr   
318B   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
3197   CD BA 10               CALL   printStr   
319A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31A9   21 00 00               LD   hl,FALSE   
31AC   E5                     PUSH   hl   
31AD   E5                     PUSH   hl   
31AE   CD D0 11               CALL   run   
31B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31BD   CD BA 10               CALL   printStr   
31C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CD   E1                     POP   hl   
31CE   E5                     PUSH   hl   
31CF   E5                     PUSH   hl   
31D0   CD D0 11               CALL   run   
31D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
31E4   76                     HALT      
31E5                EXPECTM_3293S109:      
31E5   E1                     POP   HL   
31E6                          ;*Macro unroll:  test "2 1 >", TRUE
31E6   31 00 5E               LD   SP,STACK   
31E9   CD 07 11               CALL   coldInit   
31EC   CD A8 5C               CALL   execStr   
31EF   32 20 31 20 3E 00      DB   "2 1 >",0   
31F5   E1                     POP   HL   
31F6   E5                     PUSH   HL   
31F7   11 FF FF               LD   DE,TRUE   
31FA   B7                     OR   A   
31FB   ED 52                  SBC   HL,DE   
31FD   7D                     LD   A,L   
31FE   B4                     OR   H   
31FF   CA 5F 32               JP   Z,expectM_3294S110   
3202   CD BA 10               CALL   printStr   
3205   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
3211   CD BA 10               CALL   printStr   
3214   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3223   21 FF FF               LD   hl,TRUE   
3226   E5                     PUSH   hl   
3227   E5                     PUSH   hl   
3228   CD D0 11               CALL   run   
322B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3237   CD BA 10               CALL   printStr   
323A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3247   E1                     POP   hl   
3248   E5                     PUSH   hl   
3249   E5                     PUSH   hl   
324A   CD D0 11               CALL   run   
324D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
325E   76                     HALT      
325F                EXPECTM_3294S110:      
325F   E1                     POP   HL   
3260                          ;*Macro unroll:  test "3 3 >", FALSE
3260   31 00 5E               LD   SP,STACK   
3263   CD 07 11               CALL   coldInit   
3266   CD A8 5C               CALL   execStr   
3269   33 20 33 20 3E 00      DB   "3 3 >",0   
326F   E1                     POP   HL   
3270   E5                     PUSH   HL   
3271   11 00 00               LD   DE,FALSE   
3274   B7                     OR   A   
3275   ED 52                  SBC   HL,DE   
3277   7D                     LD   A,L   
3278   B4                     OR   H   
3279   CA D9 32               JP   Z,expectM_3295S111   
327C   CD BA 10               CALL   printStr   
327F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
328B   CD BA 10               CALL   printStr   
328E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329D   21 00 00               LD   hl,FALSE   
32A0   E5                     PUSH   hl   
32A1   E5                     PUSH   hl   
32A2   CD D0 11               CALL   run   
32A5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
32B1   CD BA 10               CALL   printStr   
32B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C1   E1                     POP   hl   
32C2   E5                     PUSH   hl   
32C3   E5                     PUSH   hl   
32C4   CD D0 11               CALL   run   
32C7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32D8   76                     HALT      
32D9                EXPECTM_3295S111:      
32D9   E1                     POP   HL   
32DA                          ;*Macro unroll:  test "4 3 >", TRUE
32DA   31 00 5E               LD   SP,STACK   
32DD   CD 07 11               CALL   coldInit   
32E0   CD A8 5C               CALL   execStr   
32E3   34 20 33 20 3E 00      DB   "4 3 >",0   
32E9   E1                     POP   HL   
32EA   E5                     PUSH   HL   
32EB   11 FF FF               LD   DE,TRUE   
32EE   B7                     OR   A   
32EF   ED 52                  SBC   HL,DE   
32F1   7D                     LD   A,L   
32F2   B4                     OR   H   
32F3   CA 53 33               JP   Z,expectM_3296S112   
32F6   CD BA 10               CALL   printStr   
32F9   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
3305   CD BA 10               CALL   printStr   
3308   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3317   21 FF FF               LD   hl,TRUE   
331A   E5                     PUSH   hl   
331B   E5                     PUSH   hl   
331C   CD D0 11               CALL   run   
331F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
332B   CD BA 10               CALL   printStr   
332E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
333B   E1                     POP   hl   
333C   E5                     PUSH   hl   
333D   E5                     PUSH   hl   
333E   CD D0 11               CALL   run   
3341   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3352   76                     HALT      
3353                EXPECTM_3296S112:      
3353   E1                     POP   HL   
3354                          ;*Macro unroll:  test "2 2 <=", TRUE
3354   31 00 5E               LD   SP,STACK   
3357   CD 07 11               CALL   coldInit   
335A   CD A8 5C               CALL   execStr   
335D   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
3364   E1                     POP   HL   
3365   E5                     PUSH   HL   
3366   11 FF FF               LD   DE,TRUE   
3369   B7                     OR   A   
336A   ED 52                  SBC   HL,DE   
336C   7D                     LD   A,L   
336D   B4                     OR   H   
336E   CA CF 33               JP   Z,expectM_3297S113   
3371   CD BA 10               CALL   printStr   
3374   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
3381   CD BA 10               CALL   printStr   
3384   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3393   21 FF FF               LD   hl,TRUE   
3396   E5                     PUSH   hl   
3397   E5                     PUSH   hl   
3398   CD D0 11               CALL   run   
339B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
33A7   CD BA 10               CALL   printStr   
33AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33B7   E1                     POP   hl   
33B8   E5                     PUSH   hl   
33B9   E5                     PUSH   hl   
33BA   CD D0 11               CALL   run   
33BD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
33CE   76                     HALT      
33CF                EXPECTM_3297S113:      
33CF   E1                     POP   HL   
33D0                          ;*Macro unroll:  test "2 2 >=", TRUE
33D0   31 00 5E               LD   SP,STACK   
33D3   CD 07 11               CALL   coldInit   
33D6   CD A8 5C               CALL   execStr   
33D9   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
33E0   E1                     POP   HL   
33E1   E5                     PUSH   HL   
33E2   11 FF FF               LD   DE,TRUE   
33E5   B7                     OR   A   
33E6   ED 52                  SBC   HL,DE   
33E8   7D                     LD   A,L   
33E9   B4                     OR   H   
33EA   CA 4B 34               JP   Z,expectM_3298S114   
33ED   CD BA 10               CALL   printStr   
33F0   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
33FD   CD BA 10               CALL   printStr   
3400   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
340F   21 FF FF               LD   hl,TRUE   
3412   E5                     PUSH   hl   
3413   E5                     PUSH   hl   
3414   CD D0 11               CALL   run   
3417   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3423   CD BA 10               CALL   printStr   
3426   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3433   E1                     POP   hl   
3434   E5                     PUSH   hl   
3435   E5                     PUSH   hl   
3436   CD D0 11               CALL   run   
3439   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
344A   76                     HALT      
344B                EXPECTM_3298S114:      
344B   E1                     POP   HL   
344C                          ;*Macro unroll:  test "3 1 <<", 6
344C   31 00 5E               LD   SP,STACK   
344F   CD 07 11               CALL   coldInit   
3452   CD A8 5C               CALL   execStr   
3455   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
345C   E1                     POP   HL   
345D   E5                     PUSH   HL   
345E   11 06 00               LD   DE,6   
3461   B7                     OR   A   
3462   ED 52                  SBC   HL,DE   
3464   7D                     LD   A,L   
3465   B4                     OR   H   
3466   CA C7 34               JP   Z,expectM_3299S115   
3469   CD BA 10               CALL   printStr   
346C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
3479   CD BA 10               CALL   printStr   
347C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
348B   21 06 00               LD   hl,6   
348E   E5                     PUSH   hl   
348F   E5                     PUSH   hl   
3490   CD D0 11               CALL   run   
3493   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
349F   CD BA 10               CALL   printStr   
34A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34AF   E1                     POP   hl   
34B0   E5                     PUSH   hl   
34B1   E5                     PUSH   hl   
34B2   CD D0 11               CALL   run   
34B5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
34C6   76                     HALT      
34C7                EXPECTM_3299S115:      
34C7   E1                     POP   HL   
34C8                          ;*Macro unroll:  test "10 1 >>", 5
34C8   31 00 5E               LD   SP,STACK   
34CB   CD 07 11               CALL   coldInit   
34CE   CD A8 5C               CALL   execStr   
34D1   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
34D9   E1                     POP   HL   
34DA   E5                     PUSH   HL   
34DB   11 05 00               LD   DE,5   
34DE   B7                     OR   A   
34DF   ED 52                  SBC   HL,DE   
34E1   7D                     LD   A,L   
34E2   B4                     OR   H   
34E3   CA 45 35               JP   Z,expectM_3300S116   
34E6   CD BA 10               CALL   printStr   
34E9   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
34F7   CD BA 10               CALL   printStr   
34FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3509   21 05 00               LD   hl,5   
350C   E5                     PUSH   hl   
350D   E5                     PUSH   hl   
350E   CD D0 11               CALL   run   
3511   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
351D   CD BA 10               CALL   printStr   
3520   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352D   E1                     POP   hl   
352E   E5                     PUSH   hl   
352F   E5                     PUSH   hl   
3530   CD D0 11               CALL   run   
3533   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3544   76                     HALT      
3545                EXPECTM_3300S116:      
3545   E1                     POP   HL   
3546                          ;*Macro unroll:  test "1 x = x", 1
3546   31 00 5E               LD   SP,STACK   
3549   CD 07 11               CALL   coldInit   
354C   CD A8 5C               CALL   execStr   
354F   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3557   E1                     POP   HL   
3558   E5                     PUSH   HL   
3559   11 01 00               LD   DE,1   
355C   B7                     OR   A   
355D   ED 52                  SBC   HL,DE   
355F   7D                     LD   A,L   
3560   B4                     OR   H   
3561   CA C3 35               JP   Z,expectM_3301S117   
3564   CD BA 10               CALL   printStr   
3567   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3575   CD BA 10               CALL   printStr   
3578   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3587   21 01 00               LD   hl,1   
358A   E5                     PUSH   hl   
358B   E5                     PUSH   hl   
358C   CD D0 11               CALL   run   
358F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
359B   CD BA 10               CALL   printStr   
359E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35AB   E1                     POP   hl   
35AC   E5                     PUSH   hl   
35AD   E5                     PUSH   hl   
35AE   CD D0 11               CALL   run   
35B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
35C2   76                     HALT      
35C3                EXPECTM_3301S117:      
35C3   E1                     POP   HL   
35C4                          ;*Macro unroll:  test "1{}^", 1
35C4   31 00 5E               LD   SP,STACK   
35C7   CD 07 11               CALL   coldInit   
35CA   CD A8 5C               CALL   execStr   
35CD   31 7B 7D 5E 00         DB   "1{}^",0   
35D2   E1                     POP   HL   
35D3   E5                     PUSH   HL   
35D4   11 01 00               LD   DE,1   
35D7   B7                     OR   A   
35D8   ED 52                  SBC   HL,DE   
35DA   7D                     LD   A,L   
35DB   B4                     OR   H   
35DC   CA 3B 36               JP   Z,expectM_3302S118   
35DF   CD BA 10               CALL   printStr   
35E2   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
35ED   CD BA 10               CALL   printStr   
35F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35FF   21 01 00               LD   hl,1   
3602   E5                     PUSH   hl   
3603   E5                     PUSH   hl   
3604   CD D0 11               CALL   run   
3607   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3613   CD BA 10               CALL   printStr   
3616   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3623   E1                     POP   hl   
3624   E5                     PUSH   hl   
3625   E5                     PUSH   hl   
3626   CD D0 11               CALL   run   
3629   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
363A   76                     HALT      
363B                EXPECTM_3302S118:      
363B   E1                     POP   HL   
363C                          ;*Macro unroll:  test "{1}^", 1
363C   31 00 5E               LD   SP,STACK   
363F   CD 07 11               CALL   coldInit   
3642   CD A8 5C               CALL   execStr   
3645   7B 31 7D 5E 00         DB   "{1}^",0   
364A   E1                     POP   HL   
364B   E5                     PUSH   HL   
364C   11 01 00               LD   DE,1   
364F   B7                     OR   A   
3650   ED 52                  SBC   HL,DE   
3652   7D                     LD   A,L   
3653   B4                     OR   H   
3654   CA B3 36               JP   Z,expectM_3303S119   
3657   CD BA 10               CALL   printStr   
365A   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3665   CD BA 10               CALL   printStr   
3668   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3677   21 01 00               LD   hl,1   
367A   E5                     PUSH   hl   
367B   E5                     PUSH   hl   
367C   CD D0 11               CALL   run   
367F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
368B   CD BA 10               CALL   printStr   
368E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
369B   E1                     POP   hl   
369C   E5                     PUSH   hl   
369D   E5                     PUSH   hl   
369E   CD D0 11               CALL   run   
36A1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
36B2   76                     HALT      
36B3                EXPECTM_3303S119:      
36B3   E1                     POP   HL   
36B4                          ;*Macro unroll:  test "{{1}^}^", 1
36B4   31 00 5E               LD   SP,STACK   
36B7   CD 07 11               CALL   coldInit   
36BA   CD A8 5C               CALL   execStr   
36BD   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
36C5   E1                     POP   HL   
36C6   E5                     PUSH   HL   
36C7   11 01 00               LD   DE,1   
36CA   B7                     OR   A   
36CB   ED 52                  SBC   HL,DE   
36CD   7D                     LD   A,L   
36CE   B4                     OR   H   
36CF   CA 31 37               JP   Z,expectM_3304S120   
36D2   CD BA 10               CALL   printStr   
36D5   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
36E3   CD BA 10               CALL   printStr   
36E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36F5   21 01 00               LD   hl,1   
36F8   E5                     PUSH   hl   
36F9   E5                     PUSH   hl   
36FA   CD D0 11               CALL   run   
36FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3709   CD BA 10               CALL   printStr   
370C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3719   E1                     POP   hl   
371A   E5                     PUSH   hl   
371B   E5                     PUSH   hl   
371C   CD D0 11               CALL   run   
371F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3730   76                     HALT      
3731                EXPECTM_3304S120:      
3731   E1                     POP   HL   
3732                          ;*Macro unroll:  test "{{{1}^}^}^", 1
3732   31 00 5E               LD   SP,STACK   
3735   CD 07 11               CALL   coldInit   
3738   CD A8 5C               CALL   execStr   
373B   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3746   E1                     POP   HL   
3747   E5                     PUSH   HL   
3748   11 01 00               LD   DE,1   
374B   B7                     OR   A   
374C   ED 52                  SBC   HL,DE   
374E   7D                     LD   A,L   
374F   B4                     OR   H   
3750   CA B5 37               JP   Z,expectM_3305S121   
3753   CD BA 10               CALL   printStr   
3756   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3767   CD BA 10               CALL   printStr   
376A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3779   21 01 00               LD   hl,1   
377C   E5                     PUSH   hl   
377D   E5                     PUSH   hl   
377E   CD D0 11               CALL   run   
3781   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
378D   CD BA 10               CALL   printStr   
3790   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
379D   E1                     POP   hl   
379E   E5                     PUSH   hl   
379F   E5                     PUSH   hl   
37A0   CD D0 11               CALL   run   
37A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
37B4   76                     HALT      
37B5                EXPECTM_3305S121:      
37B5   E1                     POP   HL   
37B6                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
37B6   31 00 5E               LD   SP,STACK   
37B9   CD 07 11               CALL   coldInit   
37BC   CD A8 5C               CALL   execStr   
37BF   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
37D2   E1                     POP   HL   
37D3   E5                     PUSH   HL   
37D4   11 15 00               LD   DE,21   
37D7   B7                     OR   A   
37D8   ED 52                  SBC   HL,DE   
37DA   7D                     LD   A,L   
37DB   B4                     OR   H   
37DC   CA 49 38               JP   Z,expectM_3306S122   
37DF   CD BA 10               CALL   printStr   
37E2   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
37FB   CD BA 10               CALL   printStr   
37FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
380D   21 15 00               LD   hl,21   
3810   E5                     PUSH   hl   
3811   E5                     PUSH   hl   
3812   CD D0 11               CALL   run   
3815   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3821   CD BA 10               CALL   printStr   
3824   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3831   E1                     POP   hl   
3832   E5                     PUSH   hl   
3833   E5                     PUSH   hl   
3834   CD D0 11               CALL   run   
3837   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3848   76                     HALT      
3849                EXPECTM_3306S122:      
3849   E1                     POP   HL   
384A                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
384A   31 00 5E               LD   SP,STACK   
384D   CD 07 11               CALL   coldInit   
3850   CD A8 5C               CALL   execStr   
3853   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
3866   E1                     POP   HL   
3867   E5                     PUSH   HL   
3868   11 0B 00               LD   DE,11   
386B   B7                     OR   A   
386C   ED 52                  SBC   HL,DE   
386E   7D                     LD   A,L   
386F   B4                     OR   H   
3870   CA DD 38               JP   Z,expectM_3307S123   
3873   CD BA 10               CALL   printStr   
3876   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
388F   CD BA 10               CALL   printStr   
3892   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38A1   21 0B 00               LD   hl,11   
38A4   E5                     PUSH   hl   
38A5   E5                     PUSH   hl   
38A6   CD D0 11               CALL   run   
38A9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
38B5   CD BA 10               CALL   printStr   
38B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38C5   E1                     POP   hl   
38C6   E5                     PUSH   hl   
38C7   E5                     PUSH   hl   
38C8   CD D0 11               CALL   run   
38CB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
38DC   76                     HALT      
38DD                EXPECTM_3307S123:      
38DD   E1                     POP   HL   
38DE                          ;*Macro unroll:  test "\\{2}^", 2
38DE   31 00 5E               LD   SP,STACK   
38E1   CD 07 11               CALL   coldInit   
38E4   CD A8 5C               CALL   execStr   
38E7   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
38ED   E1                     POP   HL   
38EE   E5                     PUSH   HL   
38EF   11 02 00               LD   DE,2   
38F2   B7                     OR   A   
38F3   ED 52                  SBC   HL,DE   
38F5   7D                     LD   A,L   
38F6   B4                     OR   H   
38F7   CA 57 39               JP   Z,expectM_3308S124   
38FA   CD BA 10               CALL   printStr   
38FD   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
3909   CD BA 10               CALL   printStr   
390C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391B   21 02 00               LD   hl,2   
391E   E5                     PUSH   hl   
391F   E5                     PUSH   hl   
3920   CD D0 11               CALL   run   
3923   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
392F   CD BA 10               CALL   printStr   
3932   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393F   E1                     POP   hl   
3940   E5                     PUSH   hl   
3941   E5                     PUSH   hl   
3942   CD D0 11               CALL   run   
3945   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3956   76                     HALT      
3957                EXPECTM_3308S124:      
3957   E1                     POP   HL   
3958                          ;*Macro unroll:  test "\\a{2}^", 2
3958   31 00 5E               LD   SP,STACK   
395B   CD 07 11               CALL   coldInit   
395E   CD A8 5C               CALL   execStr   
3961   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3968   E1                     POP   HL   
3969   E5                     PUSH   HL   
396A   11 02 00               LD   DE,2   
396D   B7                     OR   A   
396E   ED 52                  SBC   HL,DE   
3970   7D                     LD   A,L   
3971   B4                     OR   H   
3972   CA D3 39               JP   Z,expectM_3309S125   
3975   CD BA 10               CALL   printStr   
3978   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3985   CD BA 10               CALL   printStr   
3988   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3997   21 02 00               LD   hl,2   
399A   E5                     PUSH   hl   
399B   E5                     PUSH   hl   
399C   CD D0 11               CALL   run   
399F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
39AB   CD BA 10               CALL   printStr   
39AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39BB   E1                     POP   hl   
39BC   E5                     PUSH   hl   
39BD   E5                     PUSH   hl   
39BE   CD D0 11               CALL   run   
39C1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
39D2   76                     HALT      
39D3                EXPECTM_3309S125:      
39D3   E1                     POP   HL   
39D4                          ;*Macro unroll:  test "5 \\a{%a}^", 5
39D4   31 00 5E               LD   SP,STACK   
39D7   CD 07 11               CALL   coldInit   
39DA   CD A8 5C               CALL   execStr   
39DD   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
39E7   E1                     POP   HL   
39E8   E5                     PUSH   HL   
39E9   11 05 00               LD   DE,5   
39EC   B7                     OR   A   
39ED   ED 52                  SBC   HL,DE   
39EF   7D                     LD   A,L   
39F0   B4                     OR   H   
39F1   CA 55 3A               JP   Z,expectM_3310S126   
39F4   CD BA 10               CALL   printStr   
39F7   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3A07   CD BA 10               CALL   printStr   
3A0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A19   21 05 00               LD   hl,5   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD D0 11               CALL   run   
3A21   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A2D   CD BA 10               CALL   printStr   
3A30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A3D   E1                     POP   hl   
3A3E   E5                     PUSH   hl   
3A3F   E5                     PUSH   hl   
3A40   CD D0 11               CALL   run   
3A43   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A54   76                     HALT      
3A55                EXPECTM_3310S126:      
3A55   E1                     POP   HL   
3A56                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3A56   31 00 5E               LD   SP,STACK   
3A59   CD 07 11               CALL   coldInit   
3A5C   CD A8 5C               CALL   execStr   
3A5F   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
3A6B   E1                     POP   HL   
3A6C   E5                     PUSH   HL   
3A6D   11 05 00               LD   DE,5   
3A70   B7                     OR   A   
3A71   ED 52                  SBC   HL,DE   
3A73   7D                     LD   A,L   
3A74   B4                     OR   H   
3A75   CA DB 3A               JP   Z,expectM_3311S127   
3A78   CD BA 10               CALL   printStr   
3A7B   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3A8D   CD BA 10               CALL   printStr   
3A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A9F   21 05 00               LD   hl,5   
3AA2   E5                     PUSH   hl   
3AA3   E5                     PUSH   hl   
3AA4   CD D0 11               CALL   run   
3AA7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3AB3   CD BA 10               CALL   printStr   
3AB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC3   E1                     POP   hl   
3AC4   E5                     PUSH   hl   
3AC5   E5                     PUSH   hl   
3AC6   CD D0 11               CALL   run   
3AC9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3ADA   76                     HALT      
3ADB                EXPECTM_3311S127:      
3ADB   E1                     POP   HL   
3ADC                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3ADC   31 00 5E               LD   SP,STACK   
3ADF   CD 07 11               CALL   coldInit   
3AE2   CD A8 5C               CALL   execStr   
3AE5   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3AEF   E1                     POP   HL   
3AF0   E5                     PUSH   HL   
3AF1   11 02 00               LD   DE,2   
3AF4   B7                     OR   A   
3AF5   ED 52                  SBC   HL,DE   
3AF7   7D                     LD   A,L   
3AF8   B4                     OR   H   
3AF9   CA 5D 3B               JP   Z,expectM_3312S128   
3AFC   CD BA 10               CALL   printStr   
3AFF   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3B0F   CD BA 10               CALL   printStr   
3B12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B21   21 02 00               LD   hl,2   
3B24   E5                     PUSH   hl   
3B25   E5                     PUSH   hl   
3B26   CD D0 11               CALL   run   
3B29   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B35   CD BA 10               CALL   printStr   
3B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B45   E1                     POP   hl   
3B46   E5                     PUSH   hl   
3B47   E5                     PUSH   hl   
3B48   CD D0 11               CALL   run   
3B4B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B5C   76                     HALT      
3B5D                EXPECTM_3312S128:      
3B5D   E1                     POP   HL   
3B5E                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3B5E   31 00 5E               LD   SP,STACK   
3B61   CD 07 11               CALL   coldInit   
3B64   CD A8 5C               CALL   execStr   
3B67   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3B76   E1                     POP   HL   
3B77   E5                     PUSH   HL   
3B78   11 05 00               LD   DE,5   
3B7B   B7                     OR   A   
3B7C   ED 52                  SBC   HL,DE   
3B7E   7D                     LD   A,L   
3B7F   B4                     OR   H   
3B80   CA E9 3B               JP   Z,expectM_3313S129   
3B83   CD BA 10               CALL   printStr   
3B86   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3B9B   CD BA 10               CALL   printStr   
3B9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAD   21 05 00               LD   hl,5   
3BB0   E5                     PUSH   hl   
3BB1   E5                     PUSH   hl   
3BB2   CD D0 11               CALL   run   
3BB5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3BC1   CD BA 10               CALL   printStr   
3BC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD1   E1                     POP   hl   
3BD2   E5                     PUSH   hl   
3BD3   E5                     PUSH   hl   
3BD4   CD D0 11               CALL   run   
3BD7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3BE8   76                     HALT      
3BE9                EXPECTM_3313S129:      
3BE9   E1                     POP   HL   
3BEA                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3BEA   31 00 5E               LD   SP,STACK   
3BED   CD 07 11               CALL   coldInit   
3BF0   CD A8 5C               CALL   execStr   
3BF3   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3C03   E1                     POP   HL   
3C04   E5                     PUSH   HL   
3C05   11 01 00               LD   DE,1   
3C08   B7                     OR   A   
3C09   ED 52                  SBC   HL,DE   
3C0B   7D                     LD   A,L   
3C0C   B4                     OR   H   
3C0D   CA 77 3C               JP   Z,expectM_3314S130   
3C10   CD BA 10               CALL   printStr   
3C13   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3C29   CD BA 10               CALL   printStr   
3C2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C3B   21 01 00               LD   hl,1   
3C3E   E5                     PUSH   hl   
3C3F   E5                     PUSH   hl   
3C40   CD D0 11               CALL   run   
3C43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C4F   CD BA 10               CALL   printStr   
3C52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5F   E1                     POP   hl   
3C60   E5                     PUSH   hl   
3C61   E5                     PUSH   hl   
3C62   CD D0 11               CALL   run   
3C65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C76   76                     HALT      
3C77                EXPECTM_3314S130:      
3C77   E1                     POP   HL   
3C78                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3C78   31 00 5E               LD   SP,STACK   
3C7B   CD 07 11               CALL   coldInit   
3C7E   CD A8 5C               CALL   execStr   
3C81   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3C94   E1                     POP   HL   
3C95   E5                     PUSH   HL   
3C96   11 07 00               LD   DE,7   
3C99   B7                     OR   A   
3C9A   ED 52                  SBC   HL,DE   
3C9C   7D                     LD   A,L   
3C9D   B4                     OR   H   
3C9E   CA 0B 3D               JP   Z,expectM_3315S131   
3CA1   CD BA 10               CALL   printStr   
3CA4   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3CBD   CD BA 10               CALL   printStr   
3CC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CCF   21 07 00               LD   hl,7   
3CD2   E5                     PUSH   hl   
3CD3   E5                     PUSH   hl   
3CD4   CD D0 11               CALL   run   
3CD7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3CE3   CD BA 10               CALL   printStr   
3CE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF3   E1                     POP   hl   
3CF4   E5                     PUSH   hl   
3CF5   E5                     PUSH   hl   
3CF6   CD D0 11               CALL   run   
3CF9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D0A   76                     HALT      
3D0B                EXPECTM_3315S131:      
3D0B   E1                     POP   HL   
3D0C                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3D0C   31 00 5E               LD   SP,STACK   
3D0F   CD 07 11               CALL   coldInit   
3D12   CD A8 5C               CALL   execStr   
3D15   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3D2A   E1                     POP   HL   
3D2B   E5                     PUSH   HL   
3D2C   11 06 00               LD   DE,6   
3D2F   B7                     OR   A   
3D30   ED 52                  SBC   HL,DE   
3D32   7D                     LD   A,L   
3D33   B4                     OR   H   
3D34   CA A3 3D               JP   Z,expectM_3316S132   
3D37   CD BA 10               CALL   printStr   
3D3A   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3D55   CD BA 10               CALL   printStr   
3D58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D67   21 06 00               LD   hl,6   
3D6A   E5                     PUSH   hl   
3D6B   E5                     PUSH   hl   
3D6C   CD D0 11               CALL   run   
3D6F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D7B   CD BA 10               CALL   printStr   
3D7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D8B   E1                     POP   hl   
3D8C   E5                     PUSH   hl   
3D8D   E5                     PUSH   hl   
3D8E   CD D0 11               CALL   run   
3D91   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3DA2   76                     HALT      
3DA3                EXPECTM_3316S132:      
3DA3   E1                     POP   HL   
3DA4                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3DA4   31 00 5E               LD   SP,STACK   
3DA7   CD 07 11               CALL   coldInit   
3DAA   CD A8 5C               CALL   execStr   
3DAD   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3DBB   E1                     POP   HL   
3DBC   E5                     PUSH   HL   
3DBD   11 02 00               LD   DE,2   
3DC0   B7                     OR   A   
3DC1   ED 52                  SBC   HL,DE   
3DC3   7D                     LD   A,L   
3DC4   B4                     OR   H   
3DC5   CA 2D 3E               JP   Z,expectM_3317S133   
3DC8   CD BA 10               CALL   printStr   
3DCB   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3DDF   CD BA 10               CALL   printStr   
3DE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DF1   21 02 00               LD   hl,2   
3DF4   E5                     PUSH   hl   
3DF5   E5                     PUSH   hl   
3DF6   CD D0 11               CALL   run   
3DF9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E05   CD BA 10               CALL   printStr   
3E08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E15   E1                     POP   hl   
3E16   E5                     PUSH   hl   
3E17   E5                     PUSH   hl   
3E18   CD D0 11               CALL   run   
3E1B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E2C   76                     HALT      
3E2D                EXPECTM_3317S133:      
3E2D   E1                     POP   HL   
3E2E                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3E2E   31 00 5E               LD   SP,STACK   
3E31   CD 07 11               CALL   coldInit   
3E34   CD A8 5C               CALL   execStr   
3E37   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3E48   E1                     POP   HL   
3E49   E5                     PUSH   HL   
3E4A   11 01 00               LD   DE,1   
3E4D   B7                     OR   A   
3E4E   ED 52                  SBC   HL,DE   
3E50   7D                     LD   A,L   
3E51   B4                     OR   H   
3E52   CA BD 3E               JP   Z,expectM_3318S134   
3E55   CD BA 10               CALL   printStr   
3E58   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3E6F   CD BA 10               CALL   printStr   
3E72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E81   21 01 00               LD   hl,1   
3E84   E5                     PUSH   hl   
3E85   E5                     PUSH   hl   
3E86   CD D0 11               CALL   run   
3E89   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E95   CD BA 10               CALL   printStr   
3E98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EA5   E1                     POP   hl   
3EA6   E5                     PUSH   hl   
3EA7   E5                     PUSH   hl   
3EA8   CD D0 11               CALL   run   
3EAB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3EBC   76                     HALT      
3EBD                EXPECTM_3318S134:      
3EBD   E1                     POP   HL   
3EBE                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3EBE   31 00 5E               LD   SP,STACK   
3EC1   CD 07 11               CALL   coldInit   
3EC4   CD A8 5C               CALL   execStr   
3EC7   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3ED9   E1                     POP   HL   
3EDA   E5                     PUSH   HL   
3EDB   11 02 00               LD   DE,2   
3EDE   B7                     OR   A   
3EDF   ED 52                  SBC   HL,DE   
3EE1   7D                     LD   A,L   
3EE2   B4                     OR   H   
3EE3   CA 4F 3F               JP   Z,expectM_3319S135   
3EE6   CD BA 10               CALL   printStr   
3EE9   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3F01   CD BA 10               CALL   printStr   
3F04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F13   21 02 00               LD   hl,2   
3F16   E5                     PUSH   hl   
3F17   E5                     PUSH   hl   
3F18   CD D0 11               CALL   run   
3F1B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F27   CD BA 10               CALL   printStr   
3F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F37   E1                     POP   hl   
3F38   E5                     PUSH   hl   
3F39   E5                     PUSH   hl   
3F3A   CD D0 11               CALL   run   
3F3D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F4E   76                     HALT      
3F4F                EXPECTM_3319S135:      
3F4F   E1                     POP   HL   
3F50                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3F50   31 00 5E               LD   SP,STACK   
3F53   CD 07 11               CALL   coldInit   
3F56   CD A8 5C               CALL   execStr   
3F59   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3F6C   E1                     POP   HL   
3F6D   E5                     PUSH   HL   
3F6E   11 02 00               LD   DE,2   
3F71   B7                     OR   A   
3F72   ED 52                  SBC   HL,DE   
3F74   7D                     LD   A,L   
3F75   B4                     OR   H   
3F76   CA E3 3F               JP   Z,expectM_3320S136   
3F79   CD BA 10               CALL   printStr   
3F7C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3F95   CD BA 10               CALL   printStr   
3F98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA7   21 02 00               LD   hl,2   
3FAA   E5                     PUSH   hl   
3FAB   E5                     PUSH   hl   
3FAC   CD D0 11               CALL   run   
3FAF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3FBB   CD BA 10               CALL   printStr   
3FBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FCB   E1                     POP   hl   
3FCC   E5                     PUSH   hl   
3FCD   E5                     PUSH   hl   
3FCE   CD D0 11               CALL   run   
3FD1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3FE2   76                     HALT      
3FE3                EXPECTM_3320S136:      
3FE3   E1                     POP   HL   
3FE4                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3FE4   31 00 5E               LD   SP,STACK   
3FE7   CD 07 11               CALL   coldInit   
3FEA   CD A8 5C               CALL   execStr   
3FED   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3FFF   E1                     POP   HL   
4000   E5                     PUSH   HL   
4001   11 02 00               LD   DE,2   
4004   B7                     OR   A   
4005   ED 52                  SBC   HL,DE   
4007   7D                     LD   A,L   
4008   B4                     OR   H   
4009   CA 75 40               JP   Z,expectM_3321S137   
400C   CD BA 10               CALL   printStr   
400F   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
4027   CD BA 10               CALL   printStr   
402A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4039   21 02 00               LD   hl,2   
403C   E5                     PUSH   hl   
403D   E5                     PUSH   hl   
403E   CD D0 11               CALL   run   
4041   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
404D   CD BA 10               CALL   printStr   
4050   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
405D   E1                     POP   hl   
405E   E5                     PUSH   hl   
405F   E5                     PUSH   hl   
4060   CD D0 11               CALL   run   
4063   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4074   76                     HALT      
4075                EXPECTM_3321S137:      
4075   E1                     POP   HL   
4076                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
4076   31 00 5E               LD   SP,STACK   
4079   CD 07 11               CALL   coldInit   
407C   CD A8 5C               CALL   execStr   
407F   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
4098   E1                     POP   HL   
4099   E5                     PUSH   HL   
409A   11 05 00               LD   DE,5   
409D   B7                     OR   A   
409E   ED 52                  SBC   HL,DE   
40A0   7D                     LD   A,L   
40A1   B4                     OR   H   
40A2   CA 15 41               JP   Z,expectM_3322S138   
40A5   CD BA 10               CALL   printStr   
40A8   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
40C7   CD BA 10               CALL   printStr   
40CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D9   21 05 00               LD   hl,5   
40DC   E5                     PUSH   hl   
40DD   E5                     PUSH   hl   
40DE   CD D0 11               CALL   run   
40E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
40ED   CD BA 10               CALL   printStr   
40F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40FD   E1                     POP   hl   
40FE   E5                     PUSH   hl   
40FF   E5                     PUSH   hl   
4100   CD D0 11               CALL   run   
4103   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4114   76                     HALT      
4115                EXPECTM_3322S138:      
4115   E1                     POP   HL   
4116                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
4116   31 00 5E               LD   SP,STACK   
4119   CD 07 11               CALL   coldInit   
411C   CD A8 5C               CALL   execStr   
411F   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
412F   E1                     POP   HL   
4130   E5                     PUSH   HL   
4131   11 02 00               LD   DE,2   
4134   B7                     OR   A   
4135   ED 52                  SBC   HL,DE   
4137   7D                     LD   A,L   
4138   B4                     OR   H   
4139   CA A3 41               JP   Z,expectM_3323S139   
413C   CD BA 10               CALL   printStr   
413F   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
4155   CD BA 10               CALL   printStr   
4158   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4167   21 02 00               LD   hl,2   
416A   E5                     PUSH   hl   
416B   E5                     PUSH   hl   
416C   CD D0 11               CALL   run   
416F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
417B   CD BA 10               CALL   printStr   
417E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
418B   E1                     POP   hl   
418C   E5                     PUSH   hl   
418D   E5                     PUSH   hl   
418E   CD D0 11               CALL   run   
4191   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
41A2   76                     HALT      
41A3                EXPECTM_3323S139:      
41A3   E1                     POP   HL   
41A4                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
41A4   31 00 5E               LD   SP,STACK   
41A7   CD 07 11               CALL   coldInit   
41AA   CD A8 5C               CALL   execStr   
41AD   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
41C4   E1                     POP   HL   
41C5   E5                     PUSH   HL   
41C6   11 64 00               LD   DE,100   
41C9   B7                     OR   A   
41CA   ED 52                  SBC   HL,DE   
41CC   7D                     LD   A,L   
41CD   B4                     OR   H   
41CE   CA 3F 42               JP   Z,expectM_3324S140   
41D1   CD BA 10               CALL   printStr   
41D4   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
41F1   CD BA 10               CALL   printStr   
41F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4203   21 64 00               LD   hl,100   
4206   E5                     PUSH   hl   
4207   E5                     PUSH   hl   
4208   CD D0 11               CALL   run   
420B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4217   CD BA 10               CALL   printStr   
421A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4227   E1                     POP   hl   
4228   E5                     PUSH   hl   
4229   E5                     PUSH   hl   
422A   CD D0 11               CALL   run   
422D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
423E   76                     HALT      
423F                EXPECTM_3324S140:      
423F   E1                     POP   HL   
4240                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
4240   31 00 5E               LD   SP,STACK   
4243   CD 07 11               CALL   coldInit   
4246   CD A8 5C               CALL   execStr   
4249   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
4261   E1                     POP   HL   
4262   E5                     PUSH   HL   
4263   11 01 00               LD   DE,1   
4266   B7                     OR   A   
4267   ED 52                  SBC   HL,DE   
4269   7D                     LD   A,L   
426A   B4                     OR   H   
426B   CA DD 42               JP   Z,expectM_3325S141   
426E   CD BA 10               CALL   printStr   
4271   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
428F   CD BA 10               CALL   printStr   
4292   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42A1   21 01 00               LD   hl,1   
42A4   E5                     PUSH   hl   
42A5   E5                     PUSH   hl   
42A6   CD D0 11               CALL   run   
42A9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
42B5   CD BA 10               CALL   printStr   
42B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42C5   E1                     POP   hl   
42C6   E5                     PUSH   hl   
42C7   E5                     PUSH   hl   
42C8   CD D0 11               CALL   run   
42CB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
42DC   76                     HALT      
42DD                EXPECTM_3325S141:      
42DD   E1                     POP   HL   
42DE                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
42DE   31 00 5E               LD   SP,STACK   
42E1   CD 07 11               CALL   coldInit   
42E4   CD A8 5C               CALL   execStr   
42E7   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
4300   E1                     POP   HL   
4301   E5                     PUSH   HL   
4302   11 02 00               LD   DE,2   
4305   B7                     OR   A   
4306   ED 52                  SBC   HL,DE   
4308   7D                     LD   A,L   
4309   B4                     OR   H   
430A   CA 7D 43               JP   Z,expectM_3326S142   
430D   CD BA 10               CALL   printStr   
4310   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
432F   CD BA 10               CALL   printStr   
4332   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4341   21 02 00               LD   hl,2   
4344   E5                     PUSH   hl   
4345   E5                     PUSH   hl   
4346   CD D0 11               CALL   run   
4349   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4355   CD BA 10               CALL   printStr   
4358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4365   E1                     POP   hl   
4366   E5                     PUSH   hl   
4367   E5                     PUSH   hl   
4368   CD D0 11               CALL   run   
436B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
437C   76                     HALT      
437D                EXPECTM_3326S142:      
437D   E1                     POP   HL   
437E                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
437E   31 00 5E               LD   SP,STACK   
4381   CD 07 11               CALL   coldInit   
4384   CD A8 5C               CALL   execStr   
4387   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
43A6   E1                     POP   HL   
43A7   E5                     PUSH   HL   
43A8   11 0B 00               LD   DE,11   
43AB   B7                     OR   A   
43AC   ED 52                  SBC   HL,DE   
43AE   7D                     LD   A,L   
43AF   B4                     OR   H   
43B0   CA 29 44               JP   Z,expectM_3327S143   
43B3   CD BA 10               CALL   printStr   
43B6   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
43DB   CD BA 10               CALL   printStr   
43DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43ED   21 0B 00               LD   hl,11   
43F0   E5                     PUSH   hl   
43F1   E5                     PUSH   hl   
43F2   CD D0 11               CALL   run   
43F5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4401   CD BA 10               CALL   printStr   
4404   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4411   E1                     POP   hl   
4412   E5                     PUSH   hl   
4413   E5                     PUSH   hl   
4414   CD D0 11               CALL   run   
4417   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4428   76                     HALT      
4429                EXPECTM_3327S143:      
4429   E1                     POP   HL   
442A                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
442A   31 00 5E               LD   SP,STACK   
442D   CD 07 11               CALL   coldInit   
4430   CD A8 5C               CALL   execStr   
4433   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
4452   E1                     POP   HL   
4453   E5                     PUSH   HL   
4454   11 15 00               LD   DE,21   
4457   B7                     OR   A   
4458   ED 52                  SBC   HL,DE   
445A   7D                     LD   A,L   
445B   B4                     OR   H   
445C   CA D5 44               JP   Z,expectM_3328S144   
445F   CD BA 10               CALL   printStr   
4462   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
4487   CD BA 10               CALL   printStr   
448A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4499   21 15 00               LD   hl,21   
449C   E5                     PUSH   hl   
449D   E5                     PUSH   hl   
449E   CD D0 11               CALL   run   
44A1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
44AD   CD BA 10               CALL   printStr   
44B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44BD   E1                     POP   hl   
44BE   E5                     PUSH   hl   
44BF   E5                     PUSH   hl   
44C0   CD D0 11               CALL   run   
44C3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
44D4   76                     HALT      
44D5                EXPECTM_3328S144:      
44D5   E1                     POP   HL   
44D6                          ;*Macro unroll:  test "[10 20 30] 1;", 20
44D6   31 00 5E               LD   SP,STACK   
44D9   CD 07 11               CALL   coldInit   
44DC   CD A8 5C               CALL   execStr   
44DF   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
44ED   E1                     POP   HL   
44EE   E5                     PUSH   HL   
44EF   11 14 00               LD   DE,20   
44F2   B7                     OR   A   
44F3   ED 52                  SBC   HL,DE   
44F5   7D                     LD   A,L   
44F6   B4                     OR   H   
44F7   CA 5F 45               JP   Z,expectM_3329S145   
44FA   CD BA 10               CALL   printStr   
44FD   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
4511   CD BA 10               CALL   printStr   
4514   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4523   21 14 00               LD   hl,20   
4526   E5                     PUSH   hl   
4527   E5                     PUSH   hl   
4528   CD D0 11               CALL   run   
452B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4537   CD BA 10               CALL   printStr   
453A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4547   E1                     POP   hl   
4548   E5                     PUSH   hl   
4549   E5                     PUSH   hl   
454A   CD D0 11               CALL   run   
454D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
455E   76                     HALT      
455F                EXPECTM_3329S145:      
455F   E1                     POP   HL   
4560                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
4560   31 00 5E               LD   SP,STACK   
4563   CD 07 11               CALL   coldInit   
4566   CD A8 5C               CALL   execStr   
4569   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
457C   E1                     POP   HL   
457D   E5                     PUSH   HL   
457E   11 04 00               LD   DE,4   
4581   B7                     OR   A   
4582   ED 52                  SBC   HL,DE   
4584   7D                     LD   A,L   
4585   B4                     OR   H   
4586   CA F3 45               JP   Z,expectM_3330S146   
4589   CD BA 10               CALL   printStr   
458C   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
45A5   CD BA 10               CALL   printStr   
45A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45B7   21 04 00               LD   hl,4   
45BA   E5                     PUSH   hl   
45BB   E5                     PUSH   hl   
45BC   CD D0 11               CALL   run   
45BF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45CB   CD BA 10               CALL   printStr   
45CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45DB   E1                     POP   hl   
45DC   E5                     PUSH   hl   
45DD   E5                     PUSH   hl   
45DE   CD D0 11               CALL   run   
45E1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
45F2   76                     HALT      
45F3                EXPECTM_3330S146:      
45F3   E1                     POP   HL   
45F4                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
45F4   31 00 5E               LD   SP,STACK   
45F7   CD 07 11               CALL   coldInit   
45FA   CD A8 5C               CALL   execStr   
45FD   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
460D   E1                     POP   HL   
460E   E5                     PUSH   HL   
460F   11 02 00               LD   DE,2   
4612   B7                     OR   A   
4613   ED 52                  SBC   HL,DE   
4615   7D                     LD   A,L   
4616   B4                     OR   H   
4617   CA 81 46               JP   Z,expectM_3331S147   
461A   CD BA 10               CALL   printStr   
461D   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
4633   CD BA 10               CALL   printStr   
4636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4645   21 02 00               LD   hl,2   
4648   E5                     PUSH   hl   
4649   E5                     PUSH   hl   
464A   CD D0 11               CALL   run   
464D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4659   CD BA 10               CALL   printStr   
465C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4669   E1                     POP   hl   
466A   E5                     PUSH   hl   
466B   E5                     PUSH   hl   
466C   CD D0 11               CALL   run   
466F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4680   76                     HALT      
4681                EXPECTM_3331S147:      
4681   E1                     POP   HL   
4682                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
4682   31 00 5E               LD   SP,STACK   
4685   CD 07 11               CALL   coldInit   
4688   CD A8 5C               CALL   execStr   
468B   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
469E   E1                     POP   HL   
469F   E5                     PUSH   HL   
46A0   11 42 00               LD   DE,66   
46A3   B7                     OR   A   
46A4   ED 52                  SBC   HL,DE   
46A6   7D                     LD   A,L   
46A7   B4                     OR   H   
46A8   CA 15 47               JP   Z,expectM_3332S148   
46AB   CD BA 10               CALL   printStr   
46AE   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
46C7   CD BA 10               CALL   printStr   
46CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46D9   21 42 00               LD   hl,66   
46DC   E5                     PUSH   hl   
46DD   E5                     PUSH   hl   
46DE   CD D0 11               CALL   run   
46E1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
46ED   CD BA 10               CALL   printStr   
46F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46FD   E1                     POP   hl   
46FE   E5                     PUSH   hl   
46FF   E5                     PUSH   hl   
4700   CD D0 11               CALL   run   
4703   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4714   76                     HALT      
4715                EXPECTM_3332S148:      
4715   E1                     POP   HL   
4716                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
4716   31 00 5E               LD   SP,STACK   
4719   CD 07 11               CALL   coldInit   
471C   CD A8 5C               CALL   execStr   
471F   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4733   E1                     POP   HL   
4734   E5                     PUSH   HL   
4735   11 0A 00               LD   DE,10   
4738   B7                     OR   A   
4739   ED 52                  SBC   HL,DE   
473B   7D                     LD   A,L   
473C   B4                     OR   H   
473D   CA AB 47               JP   Z,expectM_3333S149   
4740   CD BA 10               CALL   printStr   
4743   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
475D   CD BA 10               CALL   printStr   
4760   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
476F   21 0A 00               LD   hl,10   
4772   E5                     PUSH   hl   
4773   E5                     PUSH   hl   
4774   CD D0 11               CALL   run   
4777   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4783   CD BA 10               CALL   printStr   
4786   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4793   E1                     POP   hl   
4794   E5                     PUSH   hl   
4795   E5                     PUSH   hl   
4796   CD D0 11               CALL   run   
4799   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
47AA   76                     HALT      
47AB                EXPECTM_3333S149:      
47AB   E1                     POP   HL   
47AC                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
47AC   31 00 5E               LD   SP,STACK   
47AF   CD 07 11               CALL   coldInit   
47B2   CD A8 5C               CALL   execStr   
47B5   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
47D0   E1                     POP   HL   
47D1   E5                     PUSH   HL   
47D2   11 0A 00               LD   DE,10   
47D5   B7                     OR   A   
47D6   ED 52                  SBC   HL,DE   
47D8   7D                     LD   A,L   
47D9   B4                     OR   H   
47DA   CA 4F 48               JP   Z,expectM_3334S150   
47DD   CD BA 10               CALL   printStr   
47E0   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
4801   CD BA 10               CALL   printStr   
4804   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4813   21 0A 00               LD   hl,10   
4816   E5                     PUSH   hl   
4817   E5                     PUSH   hl   
4818   CD D0 11               CALL   run   
481B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4827   CD BA 10               CALL   printStr   
482A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4837   E1                     POP   hl   
4838   E5                     PUSH   hl   
4839   E5                     PUSH   hl   
483A   CD D0 11               CALL   run   
483D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
484E   76                     HALT      
484F                EXPECTM_3334S150:      
484F   E1                     POP   HL   
4850                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4850   31 00 5E               LD   SP,STACK   
4853   CD 07 11               CALL   coldInit   
4856   CD A8 5C               CALL   execStr   
4859   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4878   E1                     POP   HL   
4879   E5                     PUSH   HL   
487A   11 0A 00               LD   DE,10   
487D   B7                     OR   A   
487E   ED 52                  SBC   HL,DE   
4880   7D                     LD   A,L   
4881   B4                     OR   H   
4882   CA FB 48               JP   Z,expectM_3335S151   
4885   CD BA 10               CALL   printStr   
4888   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
48AD   CD BA 10               CALL   printStr   
48B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48BF   21 0A 00               LD   hl,10   
48C2   E5                     PUSH   hl   
48C3   E5                     PUSH   hl   
48C4   CD D0 11               CALL   run   
48C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
48D3   CD BA 10               CALL   printStr   
48D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48E3   E1                     POP   hl   
48E4   E5                     PUSH   hl   
48E5   E5                     PUSH   hl   
48E6   CD D0 11               CALL   run   
48E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
48FA   76                     HALT      
48FB                EXPECTM_3335S151:      
48FB   E1                     POP   HL   
48FC                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
48FC   31 00 5E               LD   SP,STACK   
48FF   CD 07 11               CALL   coldInit   
4902   CD A8 5C               CALL   execStr   
4905   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4924   E1                     POP   HL   
4925   E5                     PUSH   HL   
4926   11 14 00               LD   DE,20   
4929   B7                     OR   A   
492A   ED 52                  SBC   HL,DE   
492C   7D                     LD   A,L   
492D   B4                     OR   H   
492E   CA A7 49               JP   Z,expectM_3336S152   
4931   CD BA 10               CALL   printStr   
4934   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
4959   CD BA 10               CALL   printStr   
495C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
496B   21 14 00               LD   hl,20   
496E   E5                     PUSH   hl   
496F   E5                     PUSH   hl   
4970   CD D0 11               CALL   run   
4973   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
497F   CD BA 10               CALL   printStr   
4982   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
498F   E1                     POP   hl   
4990   E5                     PUSH   hl   
4991   E5                     PUSH   hl   
4992   CD D0 11               CALL   run   
4995   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
49A6   76                     HALT      
49A7                EXPECTM_3336S152:      
49A7   E1                     POP   HL   
49A8                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
49A8   31 00 5E               LD   SP,STACK   
49AB   CD 07 11               CALL   coldInit   
49AE   CD A8 5C               CALL   execStr   
49B1   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
49CA   E1                     POP   HL   
49CB   E5                     PUSH   HL   
49CC   11 06 00               LD   DE,6   
49CF   B7                     OR   A   
49D0   ED 52                  SBC   HL,DE   
49D2   7D                     LD   A,L   
49D3   B4                     OR   H   
49D4   CA 47 4A               JP   Z,expectM_3337S153   
49D7   CD BA 10               CALL   printStr   
49DA   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
49F9   CD BA 10               CALL   printStr   
49FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A0B   21 06 00               LD   hl,6   
4A0E   E5                     PUSH   hl   
4A0F   E5                     PUSH   hl   
4A10   CD D0 11               CALL   run   
4A13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A1F   CD BA 10               CALL   printStr   
4A22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A2F   E1                     POP   hl   
4A30   E5                     PUSH   hl   
4A31   E5                     PUSH   hl   
4A32   CD D0 11               CALL   run   
4A35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A46   76                     HALT      
4A47                EXPECTM_3337S153:      
4A47   E1                     POP   HL   
4A48                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
4A48   31 00 5E               LD   SP,STACK   
4A4B   CD 07 11               CALL   coldInit   
4A4E   CD A8 5C               CALL   execStr   
4A51   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
4A6D   E1                     POP   HL   
4A6E   E5                     PUSH   HL   
4A6F   11 02 00               LD   DE,2   
4A72   B7                     OR   A   
4A73   ED 52                  SBC   HL,DE   
4A75   7D                     LD   A,L   
4A76   B4                     OR   H   
4A77   CA ED 4A               JP   Z,expectM_3338S154   
4A7A   CD BA 10               CALL   printStr   
4A7D   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
4A9F   CD BA 10               CALL   printStr   
4AA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AB1   21 02 00               LD   hl,2   
4AB4   E5                     PUSH   hl   
4AB5   E5                     PUSH   hl   
4AB6   CD D0 11               CALL   run   
4AB9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4AC5   CD BA 10               CALL   printStr   
4AC8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AD5   E1                     POP   hl   
4AD6   E5                     PUSH   hl   
4AD7   E5                     PUSH   hl   
4AD8   CD D0 11               CALL   run   
4ADB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4AEC   76                     HALT      
4AED                EXPECTM_3338S154:      
4AED   E1                     POP   HL   
4AEE                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
4AEE   31 00 5E               LD   SP,STACK   
4AF1   CD 07 11               CALL   coldInit   
4AF4   CD A8 5C               CALL   execStr   
4AF7   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
4B1E   E1                     POP   HL   
4B1F   E5                     PUSH   HL   
4B20   11 0A 00               LD   DE,10   
4B23   B7                     OR   A   
4B24   ED 52                  SBC   HL,DE   
4B26   7D                     LD   A,L   
4B27   B4                     OR   H   
4B28   CA A9 4B               JP   Z,expectM_3339S155   
4B2B   CD BA 10               CALL   printStr   
4B2E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
4B5B   CD BA 10               CALL   printStr   
4B5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B6D   21 0A 00               LD   hl,10   
4B70   E5                     PUSH   hl   
4B71   E5                     PUSH   hl   
4B72   CD D0 11               CALL   run   
4B75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B81   CD BA 10               CALL   printStr   
4B84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B91   E1                     POP   hl   
4B92   E5                     PUSH   hl   
4B93   E5                     PUSH   hl   
4B94   CD D0 11               CALL   run   
4B97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4BA8   76                     HALT      
4BA9                EXPECTM_3339S155:      
4BA9   E1                     POP   HL   
4BAA                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
4BAA   31 00 5E               LD   SP,STACK   
4BAD   CD 07 11               CALL   coldInit   
4BB0   CD A8 5C               CALL   execStr   
4BB3   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4BD7   E1                     POP   HL   
4BD8   E5                     PUSH   HL   
4BD9   11 0A 00               LD   DE,10   
4BDC   B7                     OR   A   
4BDD   ED 52                  SBC   HL,DE   
4BDF   7D                     LD   A,L   
4BE0   B4                     OR   H   
4BE1   CA 5F 4C               JP   Z,expectM_3340S156   
4BE4   CD BA 10               CALL   printStr   
4BE7   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
4C11   CD BA 10               CALL   printStr   
4C14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C23   21 0A 00               LD   hl,10   
4C26   E5                     PUSH   hl   
4C27   E5                     PUSH   hl   
4C28   CD D0 11               CALL   run   
4C2B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4C37   CD BA 10               CALL   printStr   
4C3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C47   E1                     POP   hl   
4C48   E5                     PUSH   hl   
4C49   E5                     PUSH   hl   
4C4A   CD D0 11               CALL   run   
4C4D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4C5E   76                     HALT      
4C5F                EXPECTM_3340S156:      
4C5F   E1                     POP   HL   
4C60                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
4C60   31 00 5E               LD   SP,STACK   
4C63   CD 07 11               CALL   coldInit   
4C66   CD A8 5C               CALL   execStr   
4C69   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4C95   E1                     POP   HL   
4C96   E5                     PUSH   HL   
4C97   11 0C 00               LD   DE,12   
4C9A   B7                     OR   A   
4C9B   ED 52                  SBC   HL,DE   
4C9D   7D                     LD   A,L   
4C9E   B4                     OR   H   
4C9F   CA 25 4D               JP   Z,expectM_3341S157   
4CA2   CD BA 10               CALL   printStr   
4CA5   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4CD7   CD BA 10               CALL   printStr   
4CDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CE9   21 0C 00               LD   hl,12   
4CEC   E5                     PUSH   hl   
4CED   E5                     PUSH   hl   
4CEE   CD D0 11               CALL   run   
4CF1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4CFD   CD BA 10               CALL   printStr   
4D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D0D   E1                     POP   hl   
4D0E   E5                     PUSH   hl   
4D0F   E5                     PUSH   hl   
4D10   CD D0 11               CALL   run   
4D13   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D24   76                     HALT      
4D25                EXPECTM_3341S157:      
4D25   E1                     POP   HL   
4D26                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
4D26   31 00 5E               LD   SP,STACK   
4D29   CD 07 11               CALL   coldInit   
4D2C   CD A8 5C               CALL   execStr   
4D2F   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
4D5B   E1                     POP   HL   
4D5C   E5                     PUSH   HL   
4D5D   11 06 00               LD   DE,6   
4D60   B7                     OR   A   
4D61   ED 52                  SBC   HL,DE   
4D63   7D                     LD   A,L   
4D64   B4                     OR   H   
4D65   CA EB 4D               JP   Z,expectM_3342S158   
4D68   CD BA 10               CALL   printStr   
4D6B   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4D9D   CD BA 10               CALL   printStr   
4DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DAF   21 06 00               LD   hl,6   
4DB2   E5                     PUSH   hl   
4DB3   E5                     PUSH   hl   
4DB4   CD D0 11               CALL   run   
4DB7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DC3   CD BA 10               CALL   printStr   
4DC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DD3   E1                     POP   hl   
4DD4   E5                     PUSH   hl   
4DD5   E5                     PUSH   hl   
4DD6   CD D0 11               CALL   run   
4DD9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4DEA   76                     HALT      
4DEB                EXPECTM_3342S158:      
4DEB   E1                     POP   HL   
4DEC                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
4DEC   31 00 5E               LD   SP,STACK   
4DEF   CD 07 11               CALL   coldInit   
4DF2   CD A8 5C               CALL   execStr   
4DF5   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
4E0C   E1                     POP   HL   
4E0D   E5                     PUSH   HL   
4E0E   11 03 00               LD   DE,3   
4E11   B7                     OR   A   
4E12   ED 52                  SBC   HL,DE   
4E14   7D                     LD   A,L   
4E15   B4                     OR   H   
4E16   CA 87 4E               JP   Z,expectM_3343S159   
4E19   CD BA 10               CALL   printStr   
4E1C   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
4E39   CD BA 10               CALL   printStr   
4E3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E4B   21 03 00               LD   hl,3   
4E4E   E5                     PUSH   hl   
4E4F   E5                     PUSH   hl   
4E50   CD D0 11               CALL   run   
4E53   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E5F   CD BA 10               CALL   printStr   
4E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E6F   E1                     POP   hl   
4E70   E5                     PUSH   hl   
4E71   E5                     PUSH   hl   
4E72   CD D0 11               CALL   run   
4E75   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E86   76                     HALT      
4E87                EXPECTM_3343S159:      
4E87   E1                     POP   HL   
4E88                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4E88   31 00 5E               LD   SP,STACK   
4E8B   CD 07 11               CALL   coldInit   
4E8E   CD A8 5C               CALL   execStr   
4E91   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4EA8   E1                     POP   HL   
4EA9   E5                     PUSH   HL   
4EAA   11 01 00               LD   DE,1   
4EAD   B7                     OR   A   
4EAE   ED 52                  SBC   HL,DE   
4EB0   7D                     LD   A,L   
4EB1   B4                     OR   H   
4EB2   CA 23 4F               JP   Z,expectM_3344S160   
4EB5   CD BA 10               CALL   printStr   
4EB8   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4ED5   CD BA 10               CALL   printStr   
4ED8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EE7   21 01 00               LD   hl,1   
4EEA   E5                     PUSH   hl   
4EEB   E5                     PUSH   hl   
4EEC   CD D0 11               CALL   run   
4EEF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4EFB   CD BA 10               CALL   printStr   
4EFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F0B   E1                     POP   hl   
4F0C   E5                     PUSH   hl   
4F0D   E5                     PUSH   hl   
4F0E   CD D0 11               CALL   run   
4F11   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F22   76                     HALT      
4F23                EXPECTM_3344S160:      
4F23   E1                     POP   HL   
4F24                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4F24   31 00 5E               LD   SP,STACK   
4F27   CD 07 11               CALL   coldInit   
4F2A   CD A8 5C               CALL   execStr   
4F2D   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4F39   E1                     POP   HL   
4F3A   E5                     PUSH   HL   
4F3B   11 00 00               LD   DE,NUL   
4F3E   B7                     OR   A   
4F3F   ED 52                  SBC   HL,DE   
4F41   7D                     LD   A,L   
4F42   B4                     OR   H   
4F43   CA A9 4F               JP   Z,expectM_3345S161   
4F46   CD BA 10               CALL   printStr   
4F49   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4F5B   CD BA 10               CALL   printStr   
4F5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F6D   21 00 00               LD   hl,NUL   
4F70   E5                     PUSH   hl   
4F71   E5                     PUSH   hl   
4F72   CD D0 11               CALL   run   
4F75   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F81   CD BA 10               CALL   printStr   
4F84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F91   E1                     POP   hl   
4F92   E5                     PUSH   hl   
4F93   E5                     PUSH   hl   
4F94   CD D0 11               CALL   run   
4F97   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4FA8   76                     HALT      
4FA9                EXPECTM_3345S161:      
4FA9   E1                     POP   HL   
4FAA                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4FAA   31 00 5E               LD   SP,STACK   
4FAD   CD 07 11               CALL   coldInit   
4FB0   CD A8 5C               CALL   execStr   
4FB3   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4FBF   E1                     POP   HL   
4FC0   E5                     PUSH   HL   
4FC1   11 00 00               LD   DE,NUL   
4FC4   B7                     OR   A   
4FC5   ED 52                  SBC   HL,DE   
4FC7   7D                     LD   A,L   
4FC8   B4                     OR   H   
4FC9   CA 2F 50               JP   Z,expectM_3346S162   
4FCC   CD BA 10               CALL   printStr   
4FCF   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4FE1   CD BA 10               CALL   printStr   
4FE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FF3   21 00 00               LD   hl,NUL   
4FF6   E5                     PUSH   hl   
4FF7   E5                     PUSH   hl   
4FF8   CD D0 11               CALL   run   
4FFB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5007   CD BA 10               CALL   printStr   
500A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5017   E1                     POP   hl   
5018   E5                     PUSH   hl   
5019   E5                     PUSH   hl   
501A   CD D0 11               CALL   run   
501D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
502E   76                     HALT      
502F                EXPECTM_3346S162:      
502F   E1                     POP   HL   
5030                          ;*Macro unroll:  test "_a 1 - /adr", NUL
5030   31 00 5E               LD   SP,STACK   
5033   CD 07 11               CALL   coldInit   
5036   CD A8 5C               CALL   execStr   
5039   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
5045   E1                     POP   HL   
5046   E5                     PUSH   HL   
5047   11 00 00               LD   DE,NUL   
504A   B7                     OR   A   
504B   ED 52                  SBC   HL,DE   
504D   7D                     LD   A,L   
504E   B4                     OR   H   
504F   CA B5 50               JP   Z,expectM_3347S163   
5052   CD BA 10               CALL   printStr   
5055   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
5067   CD BA 10               CALL   printStr   
506A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5079   21 00 00               LD   hl,NUL   
507C   E5                     PUSH   hl   
507D   E5                     PUSH   hl   
507E   CD D0 11               CALL   run   
5081   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
508D   CD BA 10               CALL   printStr   
5090   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
509D   E1                     POP   hl   
509E   E5                     PUSH   hl   
509F   E5                     PUSH   hl   
50A0   CD D0 11               CALL   run   
50A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
50B4   76                     HALT      
50B5                EXPECTM_3347S163:      
50B5   E1                     POP   HL   
50B6                          ;*Macro unroll:  test "_z 1 + /adr", NUL
50B6   31 00 5E               LD   SP,STACK   
50B9   CD 07 11               CALL   coldInit   
50BC   CD A8 5C               CALL   execStr   
50BF   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
50CB   E1                     POP   HL   
50CC   E5                     PUSH   HL   
50CD   11 00 00               LD   DE,NUL   
50D0   B7                     OR   A   
50D1   ED 52                  SBC   HL,DE   
50D3   7D                     LD   A,L   
50D4   B4                     OR   H   
50D5   CA 3B 51               JP   Z,expectM_3348S164   
50D8   CD BA 10               CALL   printStr   
50DB   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
50ED   CD BA 10               CALL   printStr   
50F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50FF   21 00 00               LD   hl,NUL   
5102   E5                     PUSH   hl   
5103   E5                     PUSH   hl   
5104   CD D0 11               CALL   run   
5107   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5113   CD BA 10               CALL   printStr   
5116   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5123   E1                     POP   hl   
5124   E5                     PUSH   hl   
5125   E5                     PUSH   hl   
5126   CD D0 11               CALL   run   
5129   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
513A   76                     HALT      
513B                EXPECTM_3348S164:      
513B   E1                     POP   HL   
513C                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
513C   31 00 5E               LD   SP,STACK   
513F   CD 07 11               CALL   coldInit   
5142   CD A8 5C               CALL   execStr   
5145   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
514D   E1                     POP   HL   
514E   E5                     PUSH   HL   
514F   11 66 60               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5152   B7                     OR   A   
5153   ED 52                  SBC   HL,DE   
5155   7D                     LD   A,L   
5156   B4                     OR   H   
5157   CA B9 51               JP   Z,expectM_3349S165   
515A   CD BA 10               CALL   printStr   
515D   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
516B   CD BA 10               CALL   printStr   
516E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
517D   21 66 60               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5180   E5                     PUSH   hl   
5181   E5                     PUSH   hl   
5182   CD D0 11               CALL   run   
5185   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5191   CD BA 10               CALL   printStr   
5194   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51A1   E1                     POP   hl   
51A2   E5                     PUSH   hl   
51A3   E5                     PUSH   hl   
51A4   CD D0 11               CALL   run   
51A7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
51B8   76                     HALT      
51B9                EXPECTM_3349S165:      
51B9   E1                     POP   HL   
51BA                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
51BA   31 00 5E               LD   SP,STACK   
51BD   CD 07 11               CALL   coldInit   
51C0   CD A8 5C               CALL   execStr   
51C3   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
51CB   E1                     POP   HL   
51CC   E5                     PUSH   HL   
51CD   11 34 60               LD   DE,VARS + ("Z"-"A"+1)*2   
51D0   B7                     OR   A   
51D1   ED 52                  SBC   HL,DE   
51D3   7D                     LD   A,L   
51D4   B4                     OR   H   
51D5   CA 37 52               JP   Z,expectM_3350S166   
51D8   CD BA 10               CALL   printStr   
51DB   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
51E9   CD BA 10               CALL   printStr   
51EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51FB   21 34 60               LD   hl,VARS + ("Z"-"A"+1)*2   
51FE   E5                     PUSH   hl   
51FF   E5                     PUSH   hl   
5200   CD D0 11               CALL   run   
5203   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
520F   CD BA 10               CALL   printStr   
5212   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
521F   E1                     POP   hl   
5220   E5                     PUSH   hl   
5221   E5                     PUSH   hl   
5222   CD D0 11               CALL   run   
5225   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5236   76                     HALT      
5237                EXPECTM_3350S166:      
5237   E1                     POP   HL   
5238                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
5238   31 00 5E               LD   SP,STACK   
523B   CD 07 11               CALL   coldInit   
523E   CD A8 5C               CALL   execStr   
5241   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
5249   E1                     POP   HL   
524A   E5                     PUSH   HL   
524B   11 32 60               LD   DE,VARS + ("Z"-"A")*2   
524E   B7                     OR   A   
524F   ED 52                  SBC   HL,DE   
5251   7D                     LD   A,L   
5252   B4                     OR   H   
5253   CA B5 52               JP   Z,expectM_3351S167   
5256   CD BA 10               CALL   printStr   
5259   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
5267   CD BA 10               CALL   printStr   
526A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5279   21 32 60               LD   hl,VARS + ("Z"-"A")*2   
527C   E5                     PUSH   hl   
527D   E5                     PUSH   hl   
527E   CD D0 11               CALL   run   
5281   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
528D   CD BA 10               CALL   printStr   
5290   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
529D   E1                     POP   hl   
529E   E5                     PUSH   hl   
529F   E5                     PUSH   hl   
52A0   CD D0 11               CALL   run   
52A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
52B4   76                     HALT      
52B5                EXPECTM_3351S167:      
52B5   E1                     POP   HL   
52B6                          ;*Macro unroll:  test "_A /adr", VARS
52B6   31 00 5E               LD   SP,STACK   
52B9   CD 07 11               CALL   coldInit   
52BC   CD A8 5C               CALL   execStr   
52BF   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
52C7   E1                     POP   HL   
52C8   E5                     PUSH   HL   
52C9   11 00 60               LD   DE,VARS   
52CC   B7                     OR   A   
52CD   ED 52                  SBC   HL,DE   
52CF   7D                     LD   A,L   
52D0   B4                     OR   H   
52D1   CA 33 53               JP   Z,expectM_3352S168   
52D4   CD BA 10               CALL   printStr   
52D7   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
52E5   CD BA 10               CALL   printStr   
52E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52F7   21 00 60               LD   hl,VARS   
52FA   E5                     PUSH   hl   
52FB   E5                     PUSH   hl   
52FC   CD D0 11               CALL   run   
52FF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
530B   CD BA 10               CALL   printStr   
530E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
531B   E1                     POP   hl   
531C   E5                     PUSH   hl   
531D   E5                     PUSH   hl   
531E   CD D0 11               CALL   run   
5321   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5332   76                     HALT      
5333                EXPECTM_3352S168:      
5333   E1                     POP   HL   
5334                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
5334   31 00 5E               LD   SP,STACK   
5337   CD 07 11               CALL   coldInit   
533A   CD A8 5C               CALL   execStr   
533D   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
534A   E1                     POP   HL   
534B   E5                     PUSH   HL   
534C   11 01 00               LD   DE,1   
534F   B7                     OR   A   
5350   ED 52                  SBC   HL,DE   
5352   7D                     LD   A,L   
5353   B4                     OR   H   
5354   CA BB 53               JP   Z,expectM_3353S169   
5357   CD BA 10               CALL   printStr   
535A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
536D   CD BA 10               CALL   printStr   
5370   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
537F   21 01 00               LD   hl,1   
5382   E5                     PUSH   hl   
5383   E5                     PUSH   hl   
5384   CD D0 11               CALL   run   
5387   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5393   CD BA 10               CALL   printStr   
5396   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53A3   E1                     POP   hl   
53A4   E5                     PUSH   hl   
53A5   E5                     PUSH   hl   
53A6   CD D0 11               CALL   run   
53A9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53BA   76                     HALT      
53BB                EXPECTM_3353S169:      
53BB   E1                     POP   HL   
53BC                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
53BC   31 00 5E               LD   SP,STACK   
53BF   CD 07 11               CALL   coldInit   
53C2   CD A8 5C               CALL   execStr   
53C5   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
53D9   E1                     POP   HL   
53DA   E5                     PUSH   HL   
53DB   11 03 00               LD   DE,3   
53DE   B7                     OR   A   
53DF   ED 52                  SBC   HL,DE   
53E1   7D                     LD   A,L   
53E2   B4                     OR   H   
53E3   CA 51 54               JP   Z,expectM_3354S170   
53E6   CD BA 10               CALL   printStr   
53E9   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
5403   CD BA 10               CALL   printStr   
5406   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5415   21 03 00               LD   hl,3   
5418   E5                     PUSH   hl   
5419   E5                     PUSH   hl   
541A   CD D0 11               CALL   run   
541D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5429   CD BA 10               CALL   printStr   
542C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5439   E1                     POP   hl   
543A   E5                     PUSH   hl   
543B   E5                     PUSH   hl   
543C   CD D0 11               CALL   run   
543F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5450   76                     HALT      
5451                EXPECTM_3354S170:      
5451   E1                     POP   HL   
5452                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5452   31 00 5E               LD   SP,STACK   
5455   CD 07 11               CALL   coldInit   
5458   CD A8 5C               CALL   execStr   
545B   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5472   E1                     POP   HL   
5473   E5                     PUSH   HL   
5474   11 02 00               LD   DE,2   
5477   B7                     OR   A   
5478   ED 52                  SBC   HL,DE   
547A   7D                     LD   A,L   
547B   B4                     OR   H   
547C   CA ED 54               JP   Z,expectM_3355S171   
547F   CD BA 10               CALL   printStr   
5482   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
549F   CD BA 10               CALL   printStr   
54A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54B1   21 02 00               LD   hl,2   
54B4   E5                     PUSH   hl   
54B5   E5                     PUSH   hl   
54B6   CD D0 11               CALL   run   
54B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
54C5   CD BA 10               CALL   printStr   
54C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54D5   E1                     POP   hl   
54D6   E5                     PUSH   hl   
54D7   E5                     PUSH   hl   
54D8   CD D0 11               CALL   run   
54DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
54EC   76                     HALT      
54ED                EXPECTM_3355S171:      
54ED   E1                     POP   HL   
54EE                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
54EE   31 00 5E               LD   SP,STACK   
54F1   CD 07 11               CALL   coldInit   
54F4   CD A8 5C               CALL   execStr   
54F7   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
551A   E1                     POP   HL   
551B   E5                     PUSH   HL   
551C   11 01 00               LD   DE,1   
551F   B7                     OR   A   
5520   ED 52                  SBC   HL,DE   
5522   7D                     LD   A,L   
5523   B4                     OR   H   
5524   CA A1 55               JP   Z,expectM_3356S172   
5527   CD BA 10               CALL   printStr   
552A   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5553   CD BA 10               CALL   printStr   
5556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5565   21 01 00               LD   hl,1   
5568   E5                     PUSH   hl   
5569   E5                     PUSH   hl   
556A   CD D0 11               CALL   run   
556D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5579   CD BA 10               CALL   printStr   
557C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5589   E1                     POP   hl   
558A   E5                     PUSH   hl   
558B   E5                     PUSH   hl   
558C   CD D0 11               CALL   run   
558F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
55A0   76                     HALT      
55A1                EXPECTM_3356S172:      
55A1   E1                     POP   HL   
55A2                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
55A2   31 00 5E               LD   SP,STACK   
55A5   CD 07 11               CALL   coldInit   
55A8   CD A8 5C               CALL   execStr   
55AB   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
55CE   E1                     POP   HL   
55CF   E5                     PUSH   HL   
55D0   11 01 00               LD   DE,1   
55D3   B7                     OR   A   
55D4   ED 52                  SBC   HL,DE   
55D6   7D                     LD   A,L   
55D7   B4                     OR   H   
55D8   CA 55 56               JP   Z,expectM_3357S173   
55DB   CD BA 10               CALL   printStr   
55DE   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
5607   CD BA 10               CALL   printStr   
560A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5619   21 01 00               LD   hl,1   
561C   E5                     PUSH   hl   
561D   E5                     PUSH   hl   
561E   CD D0 11               CALL   run   
5621   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
562D   CD BA 10               CALL   printStr   
5630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
563D   E1                     POP   hl   
563E   E5                     PUSH   hl   
563F   E5                     PUSH   hl   
5640   CD D0 11               CALL   run   
5643   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5654   76                     HALT      
5655                EXPECTM_3357S173:      
5655   E1                     POP   HL   
5656                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5656   31 00 5E               LD   SP,STACK   
5659   CD 07 11               CALL   coldInit   
565C   CD A8 5C               CALL   execStr   
565F   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
568F   E1                     POP   HL   
5690   E5                     PUSH   HL   
5691   11 02 00               LD   DE,2   
5694   B7                     OR   A   
5695   ED 52                  SBC   HL,DE   
5697   7D                     LD   A,L   
5698   B4                     OR   H   
5699   CA 23 57               JP   Z,expectM_3358S174   
569C   CD BA 10               CALL   printStr   
569F   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
56D5   CD BA 10               CALL   printStr   
56D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56E7   21 02 00               LD   hl,2   
56EA   E5                     PUSH   hl   
56EB   E5                     PUSH   hl   
56EC   CD D0 11               CALL   run   
56EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
56FB   CD BA 10               CALL   printStr   
56FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
570B   E1                     POP   hl   
570C   E5                     PUSH   hl   
570D   E5                     PUSH   hl   
570E   CD D0 11               CALL   run   
5711   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5722   76                     HALT      
5723                EXPECTM_3358S174:      
5723   E1                     POP   HL   
5724                          ;*Macro unroll:  test "'hello'/sln",5
5724   31 00 5E               LD   SP,STACK   
5727   CD 07 11               CALL   coldInit   
572A   CD A8 5C               CALL   execStr   
572D   27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 DB   "'hello'/sln",0   
5739   E1                     POP   HL   
573A   E5                     PUSH   HL   
573B   11 05 00               LD   DE,5   
573E   B7                     OR   A   
573F   ED 52                  SBC   HL,DE   
5741   7D                     LD   A,L   
5742   B4                     OR   H   
5743   CA A9 57               JP   Z,expectM_3359S175   
5746   CD BA 10               CALL   printStr   
5749   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 6E 00 .CSTR   "Code: ","'hello'/sln"   
575B   CD BA 10               CALL   printStr   
575E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
576D   21 05 00               LD   hl,5   
5770   E5                     PUSH   hl   
5771   E5                     PUSH   hl   
5772   CD D0 11               CALL   run   
5775   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5781   CD BA 10               CALL   printStr   
5784   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5791   E1                     POP   hl   
5792   E5                     PUSH   hl   
5793   E5                     PUSH   hl   
5794   CD D0 11               CALL   run   
5797   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
57A8   76                     HALT      
57A9                EXPECTM_3359S175:      
57A9   E1                     POP   HL   
57AA                          ;*Macro unroll:  test "'hello' 'hell' /scp", false
57AA   31 00 5E               LD   SP,STACK   
57AD   CD 07 11               CALL   coldInit   
57B0   CD A8 5C               CALL   execStr   
57B3   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 DB   "'hello' 'hell' /scp",0   
57C7   E1                     POP   HL   
57C8   E5                     PUSH   HL   
57C9   11 00 00               LD   DE,false   
57CC   B7                     OR   A   
57CD   ED 52                  SBC   HL,DE   
57CF   7D                     LD   A,L   
57D0   B4                     OR   H   
57D1   CA 3F 58               JP   Z,expectM_3360S176   
57D4   CD BA 10               CALL   printStr   
57D7   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hell' /scp"   
57F1   CD BA 10               CALL   printStr   
57F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5803   21 00 00               LD   hl,false   
5806   E5                     PUSH   hl   
5807   E5                     PUSH   hl   
5808   CD D0 11               CALL   run   
580B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5817   CD BA 10               CALL   printStr   
581A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5827   E1                     POP   hl   
5828   E5                     PUSH   hl   
5829   E5                     PUSH   hl   
582A   CD D0 11               CALL   run   
582D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
583E   76                     HALT      
583F                EXPECTM_3360S176:      
583F   E1                     POP   HL   
5840                          ;*Macro unroll:  test "'hello' 'hello' /scp", true
5840   31 00 5E               LD   SP,STACK   
5843   CD 07 11               CALL   coldInit   
5846   CD A8 5C               CALL   execStr   
5849   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 DB   "'hello' 'hello' /scp",0   
585E   E1                     POP   HL   
585F   E5                     PUSH   HL   
5860   11 FF FF               LD   DE,true   
5863   B7                     OR   A   
5864   ED 52                  SBC   HL,DE   
5866   7D                     LD   A,L   
5867   B4                     OR   H   
5868   CA D7 58               JP   Z,expectM_3361S177   
586B   CD BA 10               CALL   printStr   
586E   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 70 00 .CSTR   "Code: ","'hello' 'hello' /scp"   
5889   CD BA 10               CALL   printStr   
588C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
589B   21 FF FF               LD   hl,true   
589E   E5                     PUSH   hl   
589F   E5                     PUSH   hl   
58A0   CD D0 11               CALL   run   
58A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58AF   CD BA 10               CALL   printStr   
58B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58BF   E1                     POP   hl   
58C0   E5                     PUSH   hl   
58C1   E5                     PUSH   hl   
58C2   CD D0 11               CALL   run   
58C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
58D6   76                     HALT      
58D7                EXPECTM_3361S177:      
58D7   E1                     POP   HL   
58D8                          ;*Macro unroll:  test "[1 2 3]** + +", 6
58D8   31 00 5E               LD   SP,STACK   
58DB   CD 07 11               CALL   coldInit   
58DE   CD A8 5C               CALL   execStr   
58E1   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
58EF   E1                     POP   HL   
58F0   E5                     PUSH   HL   
58F1   11 06 00               LD   DE,6   
58F4   B7                     OR   A   
58F5   ED 52                  SBC   HL,DE   
58F7   7D                     LD   A,L   
58F8   B4                     OR   H   
58F9   CA 61 59               JP   Z,expectM_3362S178   
58FC   CD BA 10               CALL   printStr   
58FF   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
5913   CD BA 10               CALL   printStr   
5916   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5925   21 06 00               LD   hl,6   
5928   E5                     PUSH   hl   
5929   E5                     PUSH   hl   
592A   CD D0 11               CALL   run   
592D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5939   CD BA 10               CALL   printStr   
593C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5949   E1                     POP   hl   
594A   E5                     PUSH   hl   
594B   E5                     PUSH   hl   
594C   CD D0 11               CALL   run   
594F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5960   76                     HALT      
5961                EXPECTM_3362S178:      
5961   E1                     POP   HL   
5962                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
5962   31 00 5E               LD   SP,STACK   
5965   CD 07 11               CALL   coldInit   
5968   CD A8 5C               CALL   execStr   
596B   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
5983   E1                     POP   HL   
5984   E5                     PUSH   HL   
5985   11 63 00               LD   DE,$63   
5988   B7                     OR   A   
5989   ED 52                  SBC   HL,DE   
598B   7D                     LD   A,L   
598C   B4                     OR   H   
598D   CA FF 59               JP   Z,expectM_3363S179   
5990   CD BA 10               CALL   printStr   
5993   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
59B1   CD BA 10               CALL   printStr   
59B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59C3   21 63 00               LD   hl,$63   
59C6   E5                     PUSH   hl   
59C7   E5                     PUSH   hl   
59C8   CD D0 11               CALL   run   
59CB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
59D7   CD BA 10               CALL   printStr   
59DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59E7   E1                     POP   hl   
59E8   E5                     PUSH   hl   
59E9   E5                     PUSH   hl   
59EA   CD D0 11               CALL   run   
59ED   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
59FE   76                     HALT      
59FF                EXPECTM_3363S179:      
59FF   E1                     POP   HL   
5A00                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
5A00   31 00 5E               LD   SP,STACK   
5A03   CD 07 11               CALL   coldInit   
5A06   CD A8 5C               CALL   execStr   
5A09   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
5A21   E1                     POP   HL   
5A22   E5                     PUSH   HL   
5A23   11 02 00               LD   DE,2   
5A26   B7                     OR   A   
5A27   ED 52                  SBC   HL,DE   
5A29   7D                     LD   A,L   
5A2A   B4                     OR   H   
5A2B   CA 9D 5A               JP   Z,expectM_3364S180   
5A2E   CD BA 10               CALL   printStr   
5A31   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
5A4F   CD BA 10               CALL   printStr   
5A52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A61   21 02 00               LD   hl,2   
5A64   E5                     PUSH   hl   
5A65   E5                     PUSH   hl   
5A66   CD D0 11               CALL   run   
5A69   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5A75   CD BA 10               CALL   printStr   
5A78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A85   E1                     POP   hl   
5A86   E5                     PUSH   hl   
5A87   E5                     PUSH   hl   
5A88   CD D0 11               CALL   run   
5A8B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5A9C   76                     HALT      
5A9D                EXPECTM_3364S180:      
5A9D   E1                     POP   HL   
5A9E                          ;*Macro unroll:  test "1 2 /max", 2
5A9E   31 00 5E               LD   SP,STACK   
5AA1   CD 07 11               CALL   coldInit   
5AA4   CD A8 5C               CALL   execStr   
5AA7   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
5AB0   E1                     POP   HL   
5AB1   E5                     PUSH   HL   
5AB2   11 02 00               LD   DE,2   
5AB5   B7                     OR   A   
5AB6   ED 52                  SBC   HL,DE   
5AB8   7D                     LD   A,L   
5AB9   B4                     OR   H   
5ABA   CA 1D 5B               JP   Z,expectM_3365S181   
5ABD   CD BA 10               CALL   printStr   
5AC0   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
5ACF   CD BA 10               CALL   printStr   
5AD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AE1   21 02 00               LD   hl,2   
5AE4   E5                     PUSH   hl   
5AE5   E5                     PUSH   hl   
5AE6   CD D0 11               CALL   run   
5AE9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5AF5   CD BA 10               CALL   printStr   
5AF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B05   E1                     POP   hl   
5B06   E5                     PUSH   hl   
5B07   E5                     PUSH   hl   
5B08   CD D0 11               CALL   run   
5B0B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5B1C   76                     HALT      
5B1D                EXPECTM_3365S181:      
5B1D   E1                     POP   HL   
5B1E                          ;*Macro unroll:  test "2 1 /max", 2
5B1E   31 00 5E               LD   SP,STACK   
5B21   CD 07 11               CALL   coldInit   
5B24   CD A8 5C               CALL   execStr   
5B27   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
5B30   E1                     POP   HL   
5B31   E5                     PUSH   HL   
5B32   11 02 00               LD   DE,2   
5B35   B7                     OR   A   
5B36   ED 52                  SBC   HL,DE   
5B38   7D                     LD   A,L   
5B39   B4                     OR   H   
5B3A   CA 9D 5B               JP   Z,expectM_3366S182   
5B3D   CD BA 10               CALL   printStr   
5B40   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
5B4F   CD BA 10               CALL   printStr   
5B52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B61   21 02 00               LD   hl,2   
5B64   E5                     PUSH   hl   
5B65   E5                     PUSH   hl   
5B66   CD D0 11               CALL   run   
5B69   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5B75   CD BA 10               CALL   printStr   
5B78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B85   E1                     POP   hl   
5B86   E5                     PUSH   hl   
5B87   E5                     PUSH   hl   
5B88   CD D0 11               CALL   run   
5B8B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5B9C   76                     HALT      
5B9D                EXPECTM_3366S182:      
5B9D   E1                     POP   HL   
5B9E                          ;*Macro unroll:  test "1 2 /min", 1
5B9E   31 00 5E               LD   SP,STACK   
5BA1   CD 07 11               CALL   coldInit   
5BA4   CD A8 5C               CALL   execStr   
5BA7   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
5BB0   E1                     POP   HL   
5BB1   E5                     PUSH   HL   
5BB2   11 01 00               LD   DE,1   
5BB5   B7                     OR   A   
5BB6   ED 52                  SBC   HL,DE   
5BB8   7D                     LD   A,L   
5BB9   B4                     OR   H   
5BBA   CA 1D 5C               JP   Z,expectM_3367S183   
5BBD   CD BA 10               CALL   printStr   
5BC0   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5BCF   CD BA 10               CALL   printStr   
5BD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BE1   21 01 00               LD   hl,1   
5BE4   E5                     PUSH   hl   
5BE5   E5                     PUSH   hl   
5BE6   CD D0 11               CALL   run   
5BE9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5BF5   CD BA 10               CALL   printStr   
5BF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C05   E1                     POP   hl   
5C06   E5                     PUSH   hl   
5C07   E5                     PUSH   hl   
5C08   CD D0 11               CALL   run   
5C0B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5C1C   76                     HALT      
5C1D                EXPECTM_3367S183:      
5C1D   E1                     POP   HL   
5C1E                          ;*Macro unroll:  test "2 1 /min", 1
5C1E   31 00 5E               LD   SP,STACK   
5C21   CD 07 11               CALL   coldInit   
5C24   CD A8 5C               CALL   execStr   
5C27   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
5C30   E1                     POP   HL   
5C31   E5                     PUSH   HL   
5C32   11 01 00               LD   DE,1   
5C35   B7                     OR   A   
5C36   ED 52                  SBC   HL,DE   
5C38   7D                     LD   A,L   
5C39   B4                     OR   H   
5C3A   CA 9D 5C               JP   Z,expectM_3368S184   
5C3D   CD BA 10               CALL   printStr   
5C40   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
5C4F   CD BA 10               CALL   printStr   
5C52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C61   21 01 00               LD   hl,1   
5C64   E5                     PUSH   hl   
5C65   E5                     PUSH   hl   
5C66   CD D0 11               CALL   run   
5C69   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5C75   CD BA 10               CALL   printStr   
5C78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C85   E1                     POP   hl   
5C86   E5                     PUSH   hl   
5C87   E5                     PUSH   hl   
5C88   CD D0 11               CALL   run   
5C8B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5C9C   76                     HALT      
5C9D                EXPECTM_3368S184:      
5C9D   E1                     POP   HL   
5C9E                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
5C9E                             ; 
5C9E   CD BA 10               CALL   printStr   
5CA1   44 6F 6E 65 21 00      .CSTR   "Done!"   
5CA7   76                     HALT      
5CA8                             ; executes a null teminated string (null executes exit_)
5CA8                             ; the string should be immedaitely following the call
5CA8                EXECSTR:      ; create a root stack frame
5CA8   C1                     POP   bc   ; bc = code*
5CA9   0B                     DEC   bc   ; dec to prepare for next routine
5CAA   11 00 00               LD   de,0   
5CAD   D5                     PUSH   de   ; push fake IP
5CAE   D5                     PUSH   de   ; push null arg_list*
5CAF   D5                     PUSH   de   ; push null first_arg*
5CB0   D5                     PUSH   de   ; push fake BP
5CB1   DD E9                  JP   (ix)   
5CB3                STKSIZE:   EQU   $100   ; Stack size
5CB3                TIBSIZE:   EQU   $100   ; 256 bytes
5CB3                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5CB3                          ALIGN   $100   
5D00                          DS   STKSIZE   
5E00                STACK:       
5E00                          ALIGN   $100   
5E00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5F00                          ALIGN   $100   
5F00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
6000                          ALIGN   $100   
6000                VARS:        
6000                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
60D0                RESTARTS:      
60D0                RST08:    DS   2   
60D2                RST10:    DS   2   
60D4                RST18:    DS   2   
60D6                RST20:    DS   2   
60D8                RST28:    DS   2   
60DA                RST30:    DS   2   ; 
60DC                BAUD:     DS   2   ; 
60DE                INTVEC:   DS   2   ; 
60E0                NMIVEC:   DS   2   ; 
60E2                GETCVEC:   DS   2   ; 
60E4                PUTCVEC:   DS   2   ; 
60E6                SYSVARS:      
60E6                             ; initialised sys variables (preserved)
60E6                VTIBPTR:   DS   2   
60E8                VBUFPTR:   DS   2   
60EA                VHEAPPTR:   DS   2   
60EC                VRECURPTR:   DS   2   
60EE                VDATAWIDTH:   DS   1   
60EF                VNUMBASE:   DS   1   
60F0                VHEXPREFIX:   DS   1   
60F1                VECHO:    DS   1   
60F2                VSTRMODE:   DS   1   
60F3                          DS   1   
60F4                          DS   1   
60F5                          DS   1   
60F6                          DS   1   
60F7                          DS   1   
60F8                             ; uninitialised sys variables (preserved)
60F8                VPOINTER:   DS   2   ; 
60FA                VREMAIN:   DS   2   ; 
60FC                VSAVEDIP:   DS   2   ; 
60FE                VSAVEDSP:   DS   2   ; 
6100                VSAVEDNEXT:   DS   2   ; 
6102                VSAVEDBP:   DS   2   ; 
6104                             ; uninitialised sys variables (unpreserved)
6104                VTEMP1:   DS   2   ; 
6106                VTEMP2:   DS   2   ; 
6108                VTEMP3:   DS   2   ; 
610A                          DS   2   ; 
610C                TBPTR:    DS   2   ; reserved for tests
610E                TITLEBUF:   DS   20   
6122                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 2660 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2682 IN MAIN.asm
                    > USED AT LINE 2766 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 2663 IN MAIN.asm
                    > USED AT LINE 2731 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2668 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2601 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
                    > USED AT LINE 2595 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTHEX:           045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          046B DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
PRINTHEX2:          0476 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
PRINTHEX3:          0485 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
PRINTHEX4:          048E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 719 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 755 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 770 IN MAIN.asm
COMMAND_C_:         0550 DEFINED AT LINE 779 IN MAIN.asm
COMMAND_D_:         056B DEFINED AT LINE 794 IN MAIN.asm
COMMAND_E_:         0576 DEFINED AT LINE 801 IN MAIN.asm
COMMAND_F_:         0581 DEFINED AT LINE 808 IN MAIN.asm
COMMAND_H_:         05AC DEFINED AT LINE 832 IN MAIN.asm
COMMAND_I_:         05B7 DEFINED AT LINE 839 IN MAIN.asm
COMMAND_M_:         05C2 DEFINED AT LINE 846 IN MAIN.asm
COMAND_O_:          05D5 DEFINED AT LINE 857 IN MAIN.asm
COMMAND_R_:         05E0 DEFINED AT LINE 864 IN MAIN.asm
COMMAND_S_:         05E2 DEFINED AT LINE 867 IN MAIN.asm
COMMAND_T_:         05E4 DEFINED AT LINE 870 IN MAIN.asm
COMMAND_V_:         05E6 DEFINED AT LINE 873 IN MAIN.asm
COMMAND_W_:         05E8 DEFINED AT LINE 876 IN MAIN.asm
COMMAND_X_:         05EA DEFINED AT LINE 879 IN MAIN.asm
COMMAND_DEFAULT_:   05EC DEFINED AT LINE 882 IN MAIN.asm
COMMAND_R:          05EF DEFINED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
COMMAND_S:          0606 DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
COMMAND_T:          062D DEFINED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
COMMAND_V:          0638 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
COMMAND_W:          0647 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
COMMAND_X:          0656 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
COMMAND_DEFAULT:    0661 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
DIV:                0668 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
DIV2:               0672 DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
ABSOLUTE:           0683 DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
ABSOLUTE1:          068E DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
ADDROF:             0691 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
ADDROF2:            0697 DEFINED AT LINE 1004 IN MAIN.asm
ARRAYLENGTH:        0699 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ARRAYLENGTH1:       069F DEFINED AT LINE 1016 IN MAIN.asm
WHILE:              06A2 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
WHILE1:             06A9 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
BYTEMODE:           06BC DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
BYTEMODE1:          06BE DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
COMMENT:            06C3 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
DECBASE:            06CC DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
DECBASE1:           06CE DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
ECHO:               06D3 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
HEXBASE:            06D9 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
ERROR1:             06DE DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
INPUT:              06E4 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
MEMALLOCATE:        06EF DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
MEMFREE:            06F1 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
MEMFREE1:           06F2 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
MEMFREEARRAY:       06F7 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
MAXIMUM:            06FC DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
MAXIMUM1:           0706 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
MINIMUM:            0708 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
MINIMUM1:           0712 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
OUTPUT:             0714 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
RETURN:             071D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
RETURN1:            0724 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
RECUR:              0727 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
REMAIN:             072D DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
SELECT:             0733 DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
SELECT1:            073E DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
SELECT1A:           074F DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
SELECT1B:           0750 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
SELECT2:            0753 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
STRINGBEGIN:        075A DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
STRINGEND:          0762 DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
STRINGEND1:         0789 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
STRINGLENGTH:       0791 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
STRINGLENGTH1:      0797 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
STRINGLENGTH2:      0799 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
STRINGLENGTH3:      079D DEFINED AT LINE 1253 IN MAIN.asm
STRINGCOMPARE:      07A0 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
STRINGCOMPARE1:     07A2 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
STRINGCOMPARE2:     07AD DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
STRINGCOMPARE3:     07B2 DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
STRINGCOMPARE4:     07B5 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
VARIABLES:          07B8 DEFINED AT LINE 1283 IN MAIN.asm
VOID:               07BE DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
WORDMODE:           07C6 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
XOR:                07CB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
XOR1:               07CC DEFINED AT LINE 1304 IN MAIN.asm
CLEARLINE:          07D6 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
CLEARSCREEN:        07DF DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CURSORMOVE:         07E4 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
CURSORMOVE1:        07F0 DEFINED AT LINE 1340 IN MAIN.asm
CURSORSHOW:         07F2 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
CURSORSHOW1:        07FC DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
CURSORGO:           0801 DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
RANGESRC:           0809 DEFINED AT LINE 32
                    > USED AT LINE 898 IN MAIN.asm
RANGESRCM_1817S1372: 0818 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          08A3 DEFINED AT LINE 32
                    > USED AT LINE 762 IN MAIN.asm
ARRAYITERM_1836S1392: 08B0 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         092C DEFINED AT LINE 32
                    > USED AT LINE 915 IN MAIN.asm
STRINGITERM_1855S1412: 0939 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                09BD DEFINED AT LINE 32
                    > USED AT LINE 849 IN MAIN.asm
MAPM_1875S1434:     09CA DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09FF DEFINED AT LINE 32
                    > USED AT LINE 820 IN MAIN.asm
FILTERM_1889S1449:  0A0D DEFINED AT LINE 39
                    > USED AT LINE 35
SCAN1:              0A60 DEFINED AT LINE 32
                    > USED AT LINE 909 IN MAIN.asm
SCAN1M_1908S1469:   0A6F DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0AB1 DEFINED AT LINE 32
                    > USED AT LINE 813 IN MAIN.asm
FOREACHM_1922S1484: 0ABF DEFINED AT LINE 39
                    > USED AT LINE 35
SOURCE:             0AFD DEFINED AT LINE 32
                    > USED AT LINE 919 IN MAIN.asm
SOURCEM_1936S1499:  0B09 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B38 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1946S1510: 0B46 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B82 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B91 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
READSTRING:         0B9A DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B9F DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
READSTRING2:        0BB3 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
READNUMBER:         0BBC DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
PERFORMM_1990S1559: 0BC5 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0BE3 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
PERFORMM_2007S1576: 0BEA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BED DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
PERFORMM_2011S1580: 0BF4 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BF5 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
TILDE:              0BFB DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BFB DEFINED AT LINE 1590 IN MAIN.asm
DOLLAR:             0C05 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0C05 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0C08 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
HEXNUM2:            0C10 DEFINED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
QUESTION:           0C22 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0C22 DEFINED AT LINE 1626 IN MAIN.asm
QUOTE:              0C2F DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0C2F DEFINED AT LINE 1640 IN MAIN.asm
STRING1:            0C38 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
STRING2:            0C3B DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
STRING3:            0C41 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
PERCENT:            0C49 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0C49 DEFINED AT LINE 1667 IN MAIN.asm
ARG0:               0C65 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
ARG0A:              0C6E DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
ARG1:               0C73 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
ARG1A:              0C7B DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
NUM:                0C7E DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C87 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
NUM1:               0C88 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
NUM2:               0CA0 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
NUM3:               0CAB DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
RBRACE:             0CAE DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0CAE DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
BLOCKEND1:          0CE0 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
BLOCKEND2:          0CEC DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
BLOCKEND3:          0CFE DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
BLOCKEND4:          0D12 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
GOBLOCK:            0D1B DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0D40 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
GOBLOCK3:           0D4A DEFINED AT LINE 1830 IN MAIN.asm
GOFUNC:             0D4E DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D67 DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
GOFUNC2:            0D6D DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
GOFUNC3:            0D78 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
GOFUNC4:            0D90 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
GOFUNC5:            0D93 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
GOFUNC6:            0D96 DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
GOFUNC7:            0D99 DEFINED AT LINE 1893 IN MAIN.asm
GOFUNC8:            0D9D DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
ASSIGN:             0DA8 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0DAA DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0DAE DEFINED AT LINE 1915 IN MAIN.asm
ASSIGN2:            0DB7 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
EQUALS:             0DB9 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0DC0 DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0DC7 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0DCC DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0DD1 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
TRUE1:              0DD4 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
NULL1:              0DDA DEFINED AT LINE 1960 IN MAIN.asm
FALSE1:             0DDA DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
SPREAD:             0DE0 DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DED DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
SPREAD2:            0DF8 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
SPREAD3:            0DFA DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
SHIFTLEFT:          0E04 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0E0E DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
SHIFTLEFT3:         0E16 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
SHIFTLEFT4:         0E17 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
SHIFTRIGHT:         0E20 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0E2A DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
SHIFTRIGHT3:        0E32 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
SHIFTRIGHT4:        0E36 DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
DIVIDE:             0E3F DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
DIVIDE1:            0E44 DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
DIVIDE2:            0E51 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
DIVIDE3:            0E52 DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
DOTNEXT:            0E58 DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
DOTNEXT1:           0E60 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
PARSEARGS:          0E72 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E7C DEFINED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
PARSEARGS1A:        0E84 DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
PARSEARGS2:         0E8C DEFINED AT LINE 2101 IN MAIN.asm
PARSEARGS3:         0E94 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
PARSEARGS4:         0E97 DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
PARSEARGS5:         0E9D DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
PARSEBLOCK:         0EA8 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0EAC DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
PARSEBLOCK2:        0EC5 DEFINED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
PARSEBLOCK3:        0ECB DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
PARSEBLOCK4:        0EE5 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
PARSEBLOCK5:        0EE8 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
PARSEBLOCK6:        0F13 DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CREATEFUNC:         0F17 DEFINED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0F36 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
CREATEFUNC1:        0F4E DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
CREATEFUNC2:        0F61 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
CREATEFUNC2A:       0F80 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
CREATEFUNC3:        0F8F DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
CREATEFUNC4:        0F9A DEFINED AT LINE 2295 IN MAIN.asm
CREATEFUNC5:        0F9B DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
VARIABLE:           0FB9 DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0FC8 DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
CHARTABLE:          0FCB DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
CHARTABLE1:         0FD5 DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
CHARTABLE2:         0FDF DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
CHARTABLE3:         0FE1 DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
CMDTABLE:           0FE6 DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
CMDTABLE1:          0FE7 DEFINED AT LINE 2372 IN MAIN.asm
CMDTABLE2:          0FE7 DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
CMDTABLE3:          0FF4 DEFINED AT LINE 2385 IN MAIN.asm
CMDTABLE4:          0FFE DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
CMDTABLE5:          1003 DEFINED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
GETVARADDR:         1008 DEFINED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
GETVARADDR1:        101A DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
PUTSTR0:            101F DEFINED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
PUTSTR:             1023 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2573 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
FORMATDEC0:         1028 DEFINED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
FORMATDEC:          102B DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
FORMATDEC2:         103B DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
FORMATDEC4:         105B DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
FORMATDEC5:         105D DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
FORMATDEC6:         106D DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
FORMATDEC7:         106E DEFINED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
NESTING:            1074 DEFINED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2683 IN MAIN.asm
NESTING0:           1082 DEFINED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2510 IN MAIN.asm
NESTING1A:          1089 DEFINED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
NESTING1:           108C DEFINED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
NESTING2:           109B DEFINED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
NESTING3:           109D DEFINED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
NESTING4:           10A8 DEFINED AT LINE 2539 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
PROMPT:             10AA DEFINED AT LINE 2543 IN MAIN.asm
                    > USED AT LINE 2631 IN MAIN.asm
CRLF:               10B3 DEFINED AT LINE 2548 IN MAIN.asm
                    > USED AT LINE 2696 IN MAIN.asm
PRINTSTR:           10BA DEFINED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2756 IN MAIN.asm
                    > USED AT LINE 2761 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 45
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 190
PRINTNUM:           10C1 DEFINED AT LINE 2563 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
INIT:               10DA DEFINED AT LINE 2575 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
INIT1:              10E2 DEFINED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
WARMINIT:           10EA DEFINED AT LINE 2587 IN MAIN.asm
COLDBOOT0:          10FD DEFINED AT LINE 2594 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
                    > USED AT LINE 2620 IN MAIN.asm
COLDINIT:           1107 DEFINED AT LINE 2600 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1118 DEFINED AT LINE 2609 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
COLDSTART:          1125 DEFINED AT LINE 2618 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
START:              112E DEFINED AT LINE 2622 IN MAIN.asm
START1:             1134 DEFINED AT LINE 2625 IN MAIN.asm
                    > USED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
INTERPRET:          113A DEFINED AT LINE 2629 IN MAIN.asm
                    > USED AT LINE 2733 IN MAIN.asm
                    > USED AT LINE 2749 IN MAIN.asm
INTERPRET2:         1146 DEFINED AT LINE 2637 IN MAIN.asm
                    > USED AT LINE 2674 IN MAIN.asm
                    > USED AT LINE 2754 IN MAIN.asm
                    > USED AT LINE 2758 IN MAIN.asm
                    > USED AT LINE 2776 IN MAIN.asm
INTERPRET3:         114E DEFINED AT LINE 2645 IN MAIN.asm
                    > USED AT LINE 2655 IN MAIN.asm
INTERPRET4:         1154 DEFINED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2643 IN MAIN.asm
INTERPRET5:         1159 DEFINED AT LINE 2658 IN MAIN.asm
                    > USED AT LINE 2684 IN MAIN.asm
                    > USED AT LINE 2699 IN MAIN.asm
INTERPRET5A:        1172 DEFINED AT LINE 2673 IN MAIN.asm
INTERPRET6:         1174 DEFINED AT LINE 2676 IN MAIN.asm
                    > USED AT LINE 2662 IN MAIN.asm
INTERPRET7:         1182 DEFINED AT LINE 2686 IN MAIN.asm
                    > USED AT LINE 2666 IN MAIN.asm
INTERPRET8:         1195 DEFINED AT LINE 2701 IN MAIN.asm
                    > USED AT LINE 2664 IN MAIN.asm
NEXT:               11B0 DEFINED AT LINE 2714 IN MAIN.asm
                    > USED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2718 IN MAIN.asm
NEXT0:              11C4 DEFINED AT LINE 2728 IN MAIN.asm
                    > USED AT LINE 2726 IN MAIN.asm
NEXT1:              11C5 DEFINED AT LINE 2730 IN MAIN.asm
                    > USED AT LINE 2719 IN MAIN.asm
EXIT:               11CC DEFINED AT LINE 2735 IN MAIN.asm
                    > USED AT LINE 2732 IN MAIN.asm
RUN:                11D0 DEFINED AT LINE 2740 IN MAIN.asm
                    > USED AT LINE 2747 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              11D4 DEFINED AT LINE 2745 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
BACKSPACE_:         11E6 DEFINED AT LINE 2751 IN MAIN.asm
                    > USED AT LINE 2669 IN MAIN.asm
REEDIT_:            11F6 DEFINED AT LINE 2760 IN MAIN.asm
                    > USED AT LINE 2671 IN MAIN.asm
REEDIT0:            1202 DEFINED AT LINE 2765 IN MAIN.asm
                    > USED AT LINE 2771 IN MAIN.asm
REEDIT1:            1206 DEFINED AT LINE 2768 IN MAIN.asm
                    > USED AT LINE 2764 IN MAIN.asm
ANSIPRINTSEQ:       1216 DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    121D DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 1326 IN MAIN.asm
ANSICLEARLINE:      1226 DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 1320 IN MAIN.asm
ANSIGOTO:           1235 DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 1363 IN MAIN.asm
ANSIMOVE:           1252 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 1339 IN MAIN.asm
ANSITEXTSTYLE:      1262 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     1271 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 1354 IN MAIN.asm
F1:                 1280 DEFINED AT LINE 32
                    > USED AT LINE 822 IN MAIN.asm
F1M_3204S13:        128B DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 128C DEFINED AT LINE 32
                    > USED AT LINE 824 IN MAIN.asm
F2M_3206S16:        1297 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1298 DEFINED AT LINE 32
                    > USED AT LINE 826 IN MAIN.asm
F3M_3208S19:        12A3 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 12A4 DEFINED AT LINE 32
                    > USED AT LINE 828 IN MAIN.asm
F4M_3210S22:        12AF DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1300 DEFINED AT LINE 26
                    > USED AT LINE 8
EXPECTM_3229S43:    13C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3233S49:    1445 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3234S50:    14BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3235S51:    152F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3236S52:    15A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3237S53:    1613 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3238S54:    1685 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3239S55:    16F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3240S56:    176F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3241S57:    17E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3242S58:    185F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3243S59:    18D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3244S60:    1947 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3245S61:    19BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3246S62:    1A33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3247S63:    1AAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3248S64:    1B2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3249S65:    1BA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3250S66:    1C23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3251S67:    1CA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3252S68:    1D25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3253S69:    1D9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3254S70:    1E21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3255S71:    1E9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3256S72:    1F19 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3257S73:    1F93 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3258S74:    2015 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3259S75:    208F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3260S76:    2109 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3261S77:    2189 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3262S78:    2219 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3263S79:    228F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3264S80:    2305 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3265S81:    237D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3266S82:    23F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3267S83:    246F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3268S84:    24F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3269S85:    256B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3270S86:    25F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3271S87:    267B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3272S88:    2703 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3273S89:    278D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3274S90:    281B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3275S91:    28A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3276S92:    2937 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3277S93:    29C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3278S94:    2A51 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3279S95:    2ADD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3280S96:    2B71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3281S97:    2BED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3282S98:    2C77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3283S99:    2D01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3284S100:   2D8D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3285S101:   2E11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3286S102:   2E8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3287S103:   2F07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3288S104:   2F83 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3289S105:   2FFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3290S106:   3077 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3291S107:   30F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3292S108:   316B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3293S109:   31E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3294S110:   325F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3295S111:   32D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3296S112:   3353 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3297S113:   33CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3298S114:   344B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3299S115:   34C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3300S116:   3545 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3301S117:   35C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3302S118:   363B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3303S119:   36B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3304S120:   3731 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3305S121:   37B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3306S122:   3849 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3307S123:   38DD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3308S124:   3957 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3309S125:   39D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3310S126:   3A55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3311S127:   3ADB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3312S128:   3B5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3313S129:   3BE9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3314S130:   3C77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3315S131:   3D0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3316S132:   3DA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3317S133:   3E2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3318S134:   3EBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3319S135:   3F4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3320S136:   3FE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3321S137:   4075 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3322S138:   4115 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3323S139:   41A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3324S140:   423F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3325S141:   42DD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3326S142:   437D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3327S143:   4429 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3328S144:   44D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3329S145:   455F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3330S146:   45F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3331S147:   4681 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3332S148:   4715 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3333S149:   47AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3334S150:   484F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3335S151:   48FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3336S152:   49A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3337S153:   4A47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3338S154:   4AED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3339S155:   4BA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3340S156:   4C5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3341S157:   4D25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3342S158:   4DEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3343S159:   4E87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3344S160:   4F23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3345S161:   4FA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3346S162:   502F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3347S163:   50B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3348S164:   513B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3349S165:   51B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3350S166:   5237 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3351S167:   52B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3352S168:   5333 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3353S169:   53BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3354S170:   5451 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3355S171:   54ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3356S172:   55A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3357S173:   5655 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3358S174:   5723 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3359S175:   57A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3360S176:   583F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3361S177:   58D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3362S178:   5961 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3363S179:   59FF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3364S180:   5A9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3365S181:   5B1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3366S182:   5B9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3367S183:   5C1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3368S184:   5C9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5CA8 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5E00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2623 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5E00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
                    > USED AT LINE 2678 IN MAIN.asm
                    > USED AT LINE 2688 IN MAIN.asm
                    > USED AT LINE 2703 IN MAIN.asm
                    > USED AT LINE 2706 IN MAIN.asm
                    > USED AT LINE 2763 IN MAIN.asm
                    > USED AT LINE 2772 IN MAIN.asm
BUFFER:             5F00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
VARS:               6000 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 2606 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           60D0 DEFINED AT LINE 18 IN ram.asm
RST08:              60D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              60D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              60D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              60D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              60D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              60DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               60DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             60DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             60E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            60E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            60E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            60E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2602 IN MAIN.asm
VTIBPTR:            60E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2635 IN MAIN.asm
                    > USED AT LINE 2705 IN MAIN.asm
VBUFPTR:            60E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2564 IN MAIN.asm
                    > USED AT LINE 2570 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
VHEAPPTR:           60EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
VRECURPTR:          60EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
VDATAWIDTH:         60EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
VNUMBASE:           60EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
VHEXPREFIX:         60F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 674 IN MAIN.asm
VECHO:              60F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
VSTRMODE:           60F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
VPOINTER:           60F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
VREMAIN:            60FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
VSAVEDIP:           60FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2588 IN MAIN.asm
                    > USED AT LINE 2708 IN MAIN.asm
VSAVEDSP:           60FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2589 IN MAIN.asm
                    > USED AT LINE 2709 IN MAIN.asm
VSAVEDNEXT:         6100 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2590 IN MAIN.asm
                    > USED AT LINE 2710 IN MAIN.asm
VSAVEDBP:           6102 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2591 IN MAIN.asm
                    > USED AT LINE 2711 IN MAIN.asm
VTEMP1:             6104 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
VTEMP2:             6106 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
VTEMP3:             6108 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
TBPTR:              610C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           610E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2577 IN MAIN.asm
                    > USED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
HEAP:               6122 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
