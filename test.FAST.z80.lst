0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 55               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 55               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 55               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 55               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 55               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 55               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 55               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 55               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 55               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 55               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 53               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 55               LD   (RST08),HL   
0094   22 D2 55               LD   (RST10),HL   
0097   22 D4 55               LD   (RST18),HL   
009A   22 D6 55               LD   (RST20),HL   
009D   22 D8 55               LD   (RST28),HL   
00A0   22 DA 55               LD   (RST30),HL   
00A3   22 DE 55               LD   (INTVEC),HL   
00A6   22 E0 55               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 55               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 55               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   25                     DB   lsb(bang_)   ; !     1
0181   0D                     DB   lsb(dquote_)   ; "     2
0182   62                     DB   lsb(hash_)   ; #     1
0183   0A                     DB   lsb(dollar_)   ; $     1
0184   13                     DB   lsb(percent_)   ; %     1
0185   82                     DB   lsb(amper_)   ; &     1
0186   0D                     DB   lsb(quote_)   ; '     2
0187   19                     DB   lsb(lparen_)   ; (     1
0188   7A                     DB   lsb(rparen_)   ; )     1
0189   B4                     DB   lsb(star_)   ; *     1
018A   D8                     DB   lsb(plus_)   ; +     1
018B   07                     DB   lsb(comma_)   ; ,     2
018C   8C                     DB   lsb(minus_)   ; -     1
018D   10                     DB   lsb(dot_)   ; .     2
018E   1C                     DB   lsb(slash_)   ; /	    1
018F   1F                     DB   lsb(num_)   ; 0     1
0190   1F                     DB   lsb(num_)   ; 1
0191   1F                     DB   lsb(num_)   ; 2
0192   1F                     DB   lsb(num_)   ; 3
0193   1F                     DB   lsb(num_)   ; 4
0194   1F                     DB   lsb(num_)   ; 5
0195   1F                     DB   lsb(num_)   ; 6
0196   1F                     DB   lsb(num_)   ; 7
0197   1F                     DB   lsb(num_)   ; 8
0198   1F                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   22                     DB   lsb(semicolon_)   ; ;     2
019B   50                     DB   lsb(lt_)   ; <     1
019C   36                     DB   lsb(eq_)   ; =     1
019D   45                     DB   lsb(gt_)   ; >     1
019E   16                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 53                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 54                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   57 10                  DW   next   ; nNext
01E4   22 56                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E6   00 00                  DW   NUL   ; vRecurPtr
01E8   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E9   0A                     DB   10   ; vNumBase = 10
01EA   00                     DB   0   ; vStrMode
01EB   24                     DB   "$"   ; vHexPrefix
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   ; 
01EF   00                     DB   0   ; 
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   C3 00 0B               JP   colon   
0207                COMMA_:      
0207   C3 8D 0A               JP   comma   
020A                DOLLAR_:      
020A   C3 1A 0B               JP   dollar   
020D                DQUOTE_:      
020D                QUOTE_:      
020D   C3 44 0B               JP   quote   
0210                DOT_:        
0210   C3 00 04               JP   dot   
0213                PERCENT_:      
0213   C3 5E 0B               JP   percent   
0216                QUESTION_:      
0216   C3 37 0B               JP   question   
0219                LPAREN_:      
0219   C3 CB 03               JP   lbrace   
021C                SLASH_:      
021C   C3 00 05               JP   slash   
021F                NUM_:        
021F   C3 93 0B               JP   num   
0222                SEMICOLON_:      
0222   C3 0E 0B               JP   semicolon   
0225                BANG_:       
0225                BANG:        ; logical invert, any non zero value
0225   03                     INC   bc   
0226   0A                     LD   a,(bc)   
0227   FE 3D                  CP   "="   
0229   20 05                  JR   nz,not   
022B   E1                     POP   hl   
022C   D1                     POP   de   
022D   C3 D5 0C               JP   notequals   
0230                NOT:         
0230   0B                     DEC   bc   
0231   21 00 00               LD   hl,0   ; is considered true
0234   18 0B                  JR   eq1   
0236                EQ_:         
0236                EQ:          
0236   03                     INC   bc   
0237   0A                     LD   a,(bc)   
0238   FE 3D                  CP   "="   
023A   28 04                  JR   z,eq0   
023C   0B                     DEC   bc   
023D   C3 BD 0C               JP   assign   
0240                EQ0:         
0240   E1                     POP   hl   
0241                EQ1:         
0241   D1                     POP   de   
0242   C3 CE 0C               JP   equals   
0245                GT_:         
0245                GT:          
0245   03                     INC   bc   
0246   0A                     LD   a,(bc)   
0247   FE 3E                  CP   ">"   
0249   CA 35 0D               JP   z,shiftRight   
024C   D1                     POP   de   
024D   E1                     POP   hl   
024E   18 09                  JR   lt1   
0250                LT_:         
0250                LT:          
0250   03                     INC   bc   
0251   0A                     LD   a,(bc)   
0252   FE 3C                  CP   "<"   
0254   CA 19 0D               JP   z,shiftLeft   
0257   E1                     POP   hl   
0258   D1                     POP   de   
0259                LT1:         
0259   FE 3D                  CP   "="   
025B   CA DC 0C               JP   z,lessthaneq   
025E   0B                     DEC   bc   
025F   C3 E1 0C               JP   lessthan   
0262                             ; index of an array, based on vDataWidth 22
0262                             ; array* num -- value    ; also sets vPointer to address
0262                HASH_:       
0262                HASH:        
0262                ARRAYINDEX:      
0262   E1                     POP   hl   ; hl = index
0263   D1                     POP   de   ; de = array
0264   3A F0 55               LD   a,(vDataWidth)   ; a = data width
0267   3D                     DEC   a   
0268   28 01                  JR   z,arrayIndex1   
026A                ARRAYINDEX0:      
026A   29                     ADD   hl,hl   ; if data width = 2 then double
026B                ARRAYINDEX1:      
026B   19                     ADD   hl,de   ; add addr
026C   22 F8 55               LD   (vPointer),hl   ; store address in setter
026F   16 00                  LD   d,0   
0271   5E                     LD   e,(hl)   
0272   B7                     OR   a   ; check data width again
0273   28 02                  JR   z,arrayIndex2   
0275   23                     INC   hl   
0276   56                     LD   d,(hl)   
0277                ARRAYINDEX2:      
0277   D5                     PUSH   de   
0278   DD E9                  JP   (ix)   
027A                             ;                               4
027A                RPAREN_:      
027A                             ; jp rparen
027A                RPAREN:      
027A   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
027D   FD 46 09               LD   b,(iy+9)   
0280   DD E9                  JP   (ix)   
0282                             ; & and                          14
0282                             ; a b -- c
0282                AMPER_:      
0282                AMPER:       
0282                AND:         
0282   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0283   E1                     POP   hl   
0284   7B                     LD   a,e   
0285   A5                     AND   l   
0286   6F                     LD   l,a   
0287   7A                     LD   a,d   
0288   A4                     AND   h   
0289   67                     LD   h,a   
028A   18 5B                  JR   add3   
028C                             ; - sub
028C                             ; a b -- c
028C                             ; -- sub
028C                             ; b1 -- b2
028C                             ; -= sub
028C                             ; a b1 -- b2
028C                MINUS_:      
028C                MINUS:       
028C   03                     INC   bc   ; check if sign of a number
028D   0A                     LD   a,(bc)   
028E   0B                     DEC   bc   
028F   FE 30                  CP   "0"   
0291   38 05                  JR   c,sub   
0293   FE 3A                  CP   "9"+1   
0295   DA 93 0B               JP   c,num   
0298                SUB:         ; Subtract the value 2nd on stack from top of stack
0298   E1                     POP   hl   ; hl = arg_b
0299   03                     INC   bc   
029A   FE 2D                  CP   "-"   
029C   20 04                  JR   nz,sub1   
029E   2B                     DEC   hl   ; --
029F   C3 BF 0C               JP   assign0   
02A2                SUB1:        
02A2   D1                     POP   de   ; de = arg_a
02A3   FE 3D                  CP   "="   
02A5   28 02                  JR   z,sub2   
02A7   0B                     DEC   bc   ; -
02A8   EB                     EX   de,hl   
02A9                SUB2:        
02A9   B7                     OR   a   ; -=
02AA   ED 52                  SBC   hl,de   
02AC                SUB3:        
02AC   FE 3D                  CP   "="   
02AE   CA BF 0C               JP   z,assign0   
02B1   E5                     PUSH   hl   
02B2   DD E9                  JP   (ix)   
02B4                STAR_:       ; 21
02B4                STAR:        
02B4   03                     INC   bc   ; check for ** spread
02B5   0A                     LD   a,(bc)   
02B6   FE 2A                  CP   "*"   
02B8   CA F5 0C               JP   z,spread   
02BB   0B                     DEC   bc   
02BC                MUL:         
02BC   D1                     POP   de   ; get first value
02BD   E1                     POP   hl   
02BE                MUL2:        
02BE   C5                     PUSH   bc   ; Preserve the IP
02BF   44 4D                  LD   bc,hl   ; bc = 2nd value
02C1   21 00 00               LD   hl,0   
02C4   3E 10                  LD   a,16   
02C6                MUL3:        
02C6   29                     ADD   hl,hl   
02C7   CB 13                  RL   e   
02C9   CB 12                  RL   d   
02CB   30 04                  JR   nc,$+6   
02CD   09                     ADD   hl,bc   
02CE   30 01                  JR   nc,$+3   
02D0   13                     INC   de   
02D1   3D                     DEC   a   
02D2   20 F2                  JR   nz,mul3   
02D4   C1                     POP   bc   ; Restore the IP
02D5   C3 E7 02               JP   add3   
02D8                             ; + add                         25
02D8                             ; a b -- c
02D8                PLUS_:       
02D8                PLUS:        
02D8                ADD:         
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 2B                  CP   "+"   ; ++ increment variable
02DC   20 05                  JR   nz,add1   
02DE   E1                     POP   hl   
02DF   23                     INC   hl   
02E0   C3 BF 0C               JP   assign0   
02E3                ADD1:        
02E3   0B                     DEC   bc   
02E4   D1                     POP   de   ; second term
02E5   E1                     POP   hl   ; first term
02E6   19                     ADD   hl,de   
02E7                ADD3:        
02E7   03                     INC   bc   
02E8   0A                     LD   a,(bc)   
02E9   FE 3D                  CP   "="   
02EB   28 04                  JR   z,add4   
02ED   0B                     DEC   bc   
02EE   E5                     PUSH   hl   
02EF   DD E9                  JP   (ix)   
02F1                ADD4:        
02F1   C3 BF 0C               JP   assign0   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 0C                  JR   ident1   
02F9                             ;********************** PAGE 2 END *********************************************
02F9                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 55                  LD   h,msb(VARS)   
0309   22 F8 55               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 87 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 7B 10               JP   error   
0343                LAMBDA2:      
0343   CD BD 0D               CALL   parseBlock   
0346   CD 27 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EC 55               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F0 55               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EC 55            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EC 55               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 30 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 63 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 30 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 55            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 55            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 6D 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD BD 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E7 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 C3 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 10 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 55            LD   de,(vPointer)   
03ED   21 F8 55               LD   hl,vPointer   
03F0   C3 23 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD DF 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   45 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 55            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 55            LD   (vBufPtr),de   ; save buffer*'
041B   C3 6D 0D               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 55            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 55            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 6D 0D               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A F1 55               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 55            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A F0 55               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 55            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 6D 0D               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 55            LD   de,(vBufPtr)   
04A8   3A F3 55               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A F0 55               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 55            LD   (vBufPtr),de   
04C7   C3 6D 0D               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 3F 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD C9 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6E                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   C8                     DB   lsb(command_nop_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ai array iterator
052D   CB 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   01 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   0A 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6E 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   CC 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   38 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   1E 06                  DW   break   
0541   00                     DB   NUL   
0542   6E 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   5A 06                  DW   decBase   
0547   00                     DB   NUL   
0548   6E 06                  DW   error1   
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   70 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0C 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   13 09                  DW   filter   
0556   31                     DB   "1"   
0557   BD 10                  DW   f1   
0559   32                     DB   "2"   
055A   C9 10                  DW   f2   
055C   33                     DB   "3"   
055D   D5 10                  DW   f3   
055F   34                     DB   "4"   
0560   E1 10                  DW   f4   
0562   00                     DB   NUL   
0563   EF 0C                  DW   false1   
0565                COMMAND_H_:      
0565   70                     DB   "p"   ; /hp hex prefix
0566   66 06                  DW   hexPrefix   
0568   78                     DB   "x"   ; /hx hex
0569   61 06                  DW   hexBase   
056B   00                     DB   NUL   
056C   6E 06                  DW   error1   
056E                             ; 6
056E                COMMAND_I_:      
056E   6E                     DB   "n"   ; /in input
056F   74 06                  DW   input   
0571   00                     DB   NUL   
0572   6E 06                  DW   error1   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   D2 08                  DW   map   
0577   00                     DB   NUL   
0578   6E 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   7F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6E 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   88 06                  DW   quit   
0583   00                     DB   NUL   
0584   6E 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   92 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   98 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   39 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6E 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   9E 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   F0 06                  DW   stringCompare   
0598   65                     DB   "e"   
0599   A6 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   4B 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   D5 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   E4 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   6E 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   E9 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   08 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   11 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   1A 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   54 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   48 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   4E 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   6E 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   29 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   6E 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   2E 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 54 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 55            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 AC 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   CD 18 0F               CALL   getVarAddr   
05FE   E5                     PUSH   hl   
05FF                ADDROF2:      
05FF   DD E9                  JP   (ix)   
0601                             ; /al length of an array, num elements
0601                             ; array* -- num
0601                ARRAYLENGTH:      
0601   E1                     POP   hl   
0602   2B                     DEC   hl   ; msb size
0603   56                     LD   d,(hl)   
0604   2B                     DEC   hl   ; lsb size
0605   5E                     LD   e,(hl)   
0606   EB                     EX   de,hl   
0607                ARRAYLENGTH1:      
0607   E5                     PUSH   hl   
0608   DD E9                  JP   (ix)   
060A                             ; /as size in bytes of an array, based on current data width
060A                             ; array* -- num
060A                ARRAYSIZE:      
060A                          ;*Macro unroll:  PERFORM arrayLength
060A   DD 21 11 06            LD   ix,performM_1522S1040   
060E   C3 01 06               JP   arrayLength   
0611                PERFORMM_1522S1040:      
0611   E1                     POP   hl   
0612   3A F0 55               LD   a,(vDataWidth)   
0615   3D                     DEC   a   
0616   28 EF                  JR   z,arrayLength1   
0618   CB 3C                  SRL   h   
061A   CB 1D                  RR   l   
061C   18 E9                  JR   arrayLength1   
061E                             ; 13
061E                             ; /br break from loop
061E                             ; --
061E                BREAK:       
061E   E1                     POP   hl   ; hl = condition, break if false
061F   7D                     LD   a,l   
0620   B4                     OR   h   
0621   28 02                  JR   z,break1   
0623   DD E9                  JP   (ix)   
0625                BREAK1:      
0625   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0627   FD 54                  LD   d,iyh   
0629   21 08 00               LD   hl,8   
062C   19                     ADD   hl,de   
062D   23                     INC   hl   
062E   23                     INC   hl   
062F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0632   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0635   C3 C3 0B               JP   blockEnd   
0638                             ; /b
0638                BYTEMODE:      
0638   3E 01                  LD   a,1   
063A                BYTEMODE1:      
063A   32 F0 55               LD   (vDataWidth),a   
063D   DD E9                  JP   (ix)   
063F                             ; //
063F                COMMENT:      
063F   03                     INC   bc   ; point to next char
0640   0A                     LD   a,(bc)   
0641   FE 20                  CP   " "   ; terminate on any char less than SP
0643   30 FA                  JR   nc,comment   
0645   0B                     DEC   bc   
0646   DD E9                  JP   (ix)   
0648                CONSTHEAPSTART:      
0648   11 22 56               LD   de,HEAP   
064B   C3 26 07               JP   constant   
064E                CONSTTIBSTART:      
064E   11 00 53               LD   de,TIB   
0651   C3 26 07               JP   constant   
0654                CONSTBUFSTART:      
0654   11 00 54               LD   de,BUFFER   
0657   C3 26 07               JP   constant   
065A                DECBASE:      
065A   3E 0A                  LD   a,10   
065C                DECBASE1:      
065C   32 F1 55               LD   (vNumBase),a   
065F   DD E9                  JP   (ix)   
0661                HEXBASE:      
0661   3E 10                  LD   a,16   
0663   C3 5C 06               JP   decBase1   
0666                HEXPREFIX:      
0666   E1                     POP   hl   
0667   7D                     LD   a,l   
0668   32 F3 55               LD   (vHexPrefix),a   
066B   C3 5C 06               JP   decBase1   
066E                ERROR1:      
066E   21 01 00               LD   hl,1   ; error 1: unknown command
0671   C3 7B 10               JP   error   
0674                             ; Z80 port input
0674                             ; port -- value
0674                INPUT:       
0674   E1                     POP   hl   
0675   59                     LD   e,c   ; save IP
0676   4D                     LD   c,l   
0677   ED 68                  IN   l,(c)   
0679   26 00                  LD   h,0   
067B   4B                     LD   c,e   ; restore IP
067C   E5                     PUSH   hl   
067D   DD E9                  JP   (ix)   
067F                             ; /o Z80 port output
067F                             ; value port --
067F                OUTPUT:      
067F   E1                     POP   hl   
0680   59                     LD   e,c   ; save IP
0681   4D                     LD   c,l   
0682   E1                     POP   hl   
0683   ED 69                  OUT   (c),l   
0685   4B                     LD   c,e   ; restore IP
0686   DD E9                  JP   (ix)   
0688                             ; /qt
0688                             ; bool --
0688                QUIT:        
0688   E1                     POP   hl   ; hl = condition, exit if true
0689   7D                     LD   a,l   
068A   B4                     OR   h   
068B   20 02                  JR   nz,quit1   
068D   DD E9                  JP   (ix)   
068F                QUIT1:       
068F   C3 C3 0B               JP   blockEnd   
0692                RECUR:       
0692   E1                     POP   hl   
0693   22 EE 55               LD   (vRecurPtr),hl   
0696   DD E9                  JP   (ix)   
0698                REMAIN:      
0698   2A FA 55               LD   hl,(vRemain)   
069B   E5                     PUSH   hl   
069C   DD E9                  JP   (ix)   
069E                STRINGBEGIN:      
069E   21 FF FF               LD   hl,TRUE   ; string mode = true
06A1   22 F2 55               LD   (vStrMode),hl   
06A4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06A6                STRINGEND:      
06A6   21 00 00               LD   hl,FALSE   ; string mode = false
06A9   22 F2 55               LD   (vStrMode),hl   
06AC   2A E8 55               LD   hl,(vBufPtr)   ; append NUL to string
06AF   AF                     XOR   a   
06B0   77                     LD   (hl),a   
06B1   23                     INC   hl   ; hl = string_end*
06B2   ED 43 04 56            LD   (vTemp1),bc   ; save IP
06B6   11 00 54               LD   de,BUFFER   ; de = string*
06B9   B7                     OR   a   ; bc = size
06BA   ED 52                  SBC   hl,de   
06BC   44 4D                  LD   bc,hl   
06BE   2A EC 55               LD   hl,(vHeapPtr)   ; hl = hstring*
06C1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06C2   D5                     PUSH   de   ; return hstring*
06C3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06C5   ED 53 EC 55            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06C9   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
06CD                STRINGEND1:      
06CD   21 00 54               LD   hl,BUFFER   ; reset vBufPtr
06D0   22 E8 55               LD   (vBufPtr),hl   
06D3   DD E9                  JP   (ix)   
06D5                STRINGLENGTH:      
06D5   D1                     POP   de   
06D6   21 00 00               LD   hl,0   
06D9   18 02                  JR   stringLength2   
06DB                STRINGLENGTH1:      
06DB   13                     INC   de   
06DC   23                     INC   hl   
06DD                STRINGLENGTH2:      
06DD   1A                     LD   a,(de)   
06DE   B7                     OR   a   
06DF   20 FA                  JR   nz,stringLength1   
06E1                STRINGLENGTH3:      
06E1   E5                     PUSH   hl   
06E2   DD E9                  JP   (ix)   
06E4                STRINGSIZE:      
06E4                          ;*Macro unroll:  PERFORM stringLength
06E4   DD 21 EB 06            LD   ix,performM_1668S1205   
06E8   C3 D5 06               JP   stringLength   
06EB                PERFORMM_1668S1205:      
06EB   E1                     POP   hl   
06EC   23                     INC   hl   
06ED   C3 E1 06               JP   stringLength3   
06F0                             ; /sc string compare
06F0                             ; string1* string2* -- bool
06F0                             ; Compares two null terminated strings.
06F0                STRINGCOMPARE:      
06F0   D1                     POP   de   
06F1   E1                     POP   hl   
06F2                STRINGCOMPARE1:      
06F2   1A                     LD   a,(de)   
06F3   BE                     CP   (hl)   
06F4   20 07                  JR   nz,stringCompare2   
06F6   B7                     OR   a   
06F7   28 09                  JR   z,stringCompare3   
06F9   13                     INC   de   
06FA   23                     INC   hl   
06FB   18 F5                  JR   stringCompare1   
06FD                STRINGCOMPARE2:      
06FD   21 00 00               LD   hl,FALSE   
0700   18 03                  JR   stringCompare4   
0702                STRINGCOMPARE3:      
0702   21 FF FF               LD   hl,TRUE   
0705                STRINGCOMPARE4:      
0705   E5                     PUSH   hl   
0706   DD E9                  JP   (ix)   
0708                VARBUFPTR:      
0708   ED 5B E8 55            LD   de,(vBufPtr)   
070C   21 E8 55               LD   hl,vBufPtr   
070F   18 12                  JR   variable   
0711                VARHEAPPTR:      
0711   ED 5B EC 55            LD   de,(vHeapPtr)   
0715   21 EC 55               LD   hl,vHeapPtr   
0718   18 09                  JR   variable   
071A                VARTIBPTR:      
071A   ED 5B E6 55            LD   de,(vTIBPtr)   
071E   21 E6 55               LD   hl,vTIBPtr   
0721   18 00                  JR   variable   
0723                VARIABLE:      
0723   22 F8 55               LD   (vPointer),hl   
0726                CONSTANT:      
0726   D5                     PUSH   de   
0727   DD E9                  JP   (ix)   
0729                             ; /wm
0729                WORDMODE:      
0729   3E 02                  LD   a,2   
072B   C3 3A 06               JP   byteMode1   
072E                             ; /x
072E                XOR:         
072E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
072F                XOR1:        
072F   E1                     POP   hl   
0730   7B                     LD   a,e   
0731   AD                     XOR   l   
0732   6F                     LD   l,a   
0733   7A                     LD   a,d   
0734   AC                     XOR   h   
0735   67                     LD   h,a   
0736   C3 E7 02               JP   add3   
0739                             ;*******************************************************************
0739                             ; Monty implementations
0739                             ;*******************************************************************
0739                             ; /rg rangeSrc
0739                             ; begin end step -- src
0739                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0739                RANGESRC:      ; range source: begin, end, step, local: L
0739   CD 9F 03               CALL   go   
073C   00 00                  DW   NUL   
073E   48 07                  DW   rangeSrcM_1733S1279   
0740   42 07                  DW   $+2   
0742   01                     DB   1   
0743   04 62 65 73 4C         .PSTR   "besL"   
0748                RANGESRCM_1733S1279:      
0748   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0749   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
076D   5C 6B 74 7B            DB   "\\kt{"   
0771   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0779   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
077F   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0787   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
078F   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0799   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07A1   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A6   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07BA   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07C1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C8   7D                     DB   "}"   
07C9   7D                     DB   "}"   
07CA   00                     DB   0   
07CB                             ; /ai arrayIter
07CB                             ; array* -- src
07CB                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07CB                ARRAYITER:      
07CB   CD 9F 03               CALL   go   
07CE   00 00                  DW   NUL   
07D0   D8 07                  DW   arrayIterM_1752S1299   
07D2   D4 07                  DW   $+2   
07D4   01                     DB   1   
07D5   02 61 4C               .PSTR   "aL"   
07D8                ARRAYITERM_1752S1299:      
07D8   7B                     DB   "{"   
07D9   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E9   5C 6B 74 7B            DB   "\\kt{"   
07ED   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F5   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07FB   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0803   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
080B   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0812   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
081A   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0823   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
083A   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0841   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0848   7D                     DB   "}"   
0849   7D                     DB   "}"   
084A   00                     DB   0   
084B                             ; /si stringIter
084B                             ; string* -- src
084B                          ;*Macro unroll: FUNC stringIter, 1, "sL"
084B                STRINGITER:      
084B   CD 9F 03               CALL   go   
084E   00 00                  DW   NUL   
0850   58 08                  DW   stringIterM_1771S1319   
0852   54 08                  DW   $+2   
0854   01                     DB   1   
0855   02 73 4C               .PSTR   "sL"   
0858                STRINGITERM_1771S1319:      
0858   7B                     DB   "{"   
0859   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0863   5C 6B 74 7B            DB   "\\kt{"   
0867   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086F   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0876   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087E   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0886   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
088D   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A6   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08AD   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08C1   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08C8   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CF   7D                     DB   "}"   
08D0   7D                     DB   "}"   
08D1   00                     DB   0   
08D2                             ; /mp map
08D2                             ; src func -- src1
08D2                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08D2                MAP:         ; map: source, function
08D2   CD 9F 03               CALL   go   
08D5   00 00                  DW   NUL   
08D7   DF 08                  DW   mapM_1791S1341   
08D9   DB 08                  DW   $+2   
08DB   00                     DB   0   
08DC   02 73 66               .PSTR   "sf"   
08DF                MAPM_1791S1341:      
08DF   7B                     DB   "{"   
08E0   5C 6B 74 7B            DB   "\\kt{"   
08E4   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08EC   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08F0   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F5   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0901   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0909   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0910   7D                     DB   "}"   
0911   7D                     DB   "}"   
0912   00                     DB   0   
0913                             ; /ft filter
0913                             ; src pred -- src1
0913                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0913                FILTER:      ; filter: source, predicate, local: T
0913   CD 9F 03               CALL   go   
0916   00 00                  DW   NUL   
0918   21 09                  DW   filterM_1805S1356   
091A   1C 09                  DW   $+2   
091C   01                     DB   1   
091D   03 73 70 54            .PSTR   "spT"   
0921                FILTERM_1805S1356:      
0921   7B                     DB   "{"   
0922   5B 30 5D 25 54 3D      DB   "[0]%T="   
0928   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092C   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0930   5B                     DB   "["   
0931   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093E   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0946   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
094A   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094F   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0965   3F                     DB   "?"   
0966   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096D   7D                     DB   "}"   
096E   7D                     DB   "}"   
096F   00                     DB   0   
0970                             ; /fd fold
0970                             ; reducer is a function like: \\da00bbLi4u
0970                             ; src init reducer -- src1
0970                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0970                FOLD:        ; src, init, reducer
0970   CD 9F 03               CALL   go   
0973   00 00                  DW   NUL   
0975   7F 09                  DW   foldM_1824S1376   
0977   79 09                  DW   $+2   
0979   01                     DB   1   
097A   04 73 69 72 41         .PSTR   "sirA"   
097F                FOLDM_1824S1376:      
097F   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0980   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0987   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098B   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098F   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0994   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AF   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD 9F 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1838S1391   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1838S1391:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F                     DB   "?"   ; ifte:
09FA   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A03   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0A   7D                     DB   "}"   
0A0B   00                     DB   0   
0A0C                             ; ; /fs funcSrc
0A0C                             ; ; func -- src
0A0C                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0C                FUNCSRC:      ; :f func or block
0A0C   CD 9F 03               CALL   go   
0A0F   00 00                  DW   NUL   
0A11   18 0A                  DW   funcSrcM_1852S1406   
0A13   15 0A                  DW   $+2   
0A15   00                     DB   0   
0A16   01 66                  .PSTR   "f"   
0A18                FUNCSRCM_1852S1406:      
0A18   7B                     DB   "{"   
0A19   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A25   5C 64 74 7B            DB   "\\dt{"   
0A29   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A42   7D                     DB   "}"   
0A43   7D                     DB   "}"   
0A44   00                     DB   0   
0A45                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A45                PRINTARRAY:      
0A45   CD 9F 03               CALL   go   
0A48   00 00                  DW   NUL   
0A4A   53 0A                  DW   printArrayM_1862S1417   
0A4C   4E 0A                  DW   $+2   
0A4E   02                     DB   2   
0A4F   03 61 62 63            .PSTR   "abc"   
0A53                PRINTARRAYM_1862S1417:      
0A53   7B                     DB   "{"   
0A54   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8B   7D                     DB   "}"   
0A8C   00                     DB   0   
0A8D                             ;*******************************************************************
0A8D                             ; implementations continued
0A8D                             ;*******************************************************************
0A8D                COMMA:       
0A8D   CD F7 0E               CALL   cmdTable   
0A90   63 00                  DB   "c",NUL   ; .c print char
0A92   9C 0A                  DW   readChar   
0A94   73 00                  DB   "s",NUL   ; .s print string
0A96   A5 0A                  DW   readString   
0A98   00 00                  DW   NUL   ; .  print number, fall through
0A9A   C1 0A                  DW   readNumber   
0A9C                READCHAR:      
0A9C   CD 81 00               CALL   getchar   
0A9F   26 00                  LD   h,0   
0AA1   6F                     LD   l,a   
0AA2   E5                     PUSH   hl   
0AA3   DD E9                  JP   (ix)   
0AA5                READSTRING:      
0AA5   ED 5B EC 55            LD   de,(vHeapPtr)   
0AA9   D5                     PUSH   de   ; return start of string
0AAA                READSTRING1:      
0AAA   CD 81 00               CALL   getchar   
0AAD   FE 0D                  CP   "\r"   
0AAF   28 07                  JR   z,readString2   
0AB1   12                     LD   (de),a   
0AB2   13                     INC   de   
0AB3   CD 85 00               CALL   putchar   
0AB6   18 F2                  JR   readString1   
0AB8                READSTRING2:      
0AB8   AF                     XOR   a   
0AB9   12                     LD   (de),a   
0ABA   13                     INC   de   
0ABB   ED 53 EC 55            LD   (vHeapPtr),de   
0ABF   DD E9                  JP   (ix)   
0AC1                READNUMBER:      
0AC1   DD E5                  PUSH   ix   
0AC3                          ;*Macro unroll:  PERFORM readString
0AC3   DD 21 CA 0A            LD   ix,performM_1903S1463   
0AC7   C3 A5 0A               JP   readString   
0ACA                PERFORMM_1903S1463:      
0ACA   60 69                  LD   hl,bc   ; save bc, hl = string*
0ACC   E3                     EX   (sp),hl   
0ACD   22 EC 55               LD   (vHeapPtr),hl   ; restore heap* to before string
0AD0   44 4D                  LD   bc,hl   
0AD2   0A                     LD   a,(bc)   
0AD3   FE 2D                  CP   "-"   
0AD5   28 11                  JR   z,readNumber1   
0AD7   FE 24                  CP   "$"   
0AD9   28 17                  JR   z,readNumber2   
0ADB   FE 30                  CP   "0"   
0ADD   30 09                  JR   nc,readNumber1   
0ADF   FE 3A                  CP   "9"+1   
0AE1   38 05                  JR   c,readNumber1   
0AE3   21 00 00               LD   hl,0   
0AE6   18 12                  JR   readNumber3   
0AE8                READNUMBER1:      
0AE8                          ;*Macro unroll:  PERFORM num
0AE8   DD 21 EF 0A            LD   ix,performM_1920S1480   
0AEC   C3 93 0B               JP   num   
0AEF                PERFORMM_1920S1480:      
0AEF   E1                     POP   hl   
0AF0   18 08                  JR   readNumber3   
0AF2                READNUMBER2:      
0AF2                          ;*Macro unroll:  PERFORM hexNum
0AF2   DD 21 F9 0A            LD   ix,performM_1924S1484   
0AF6   C3 1A 0B               JP   hexNum   
0AF9                PERFORMM_1924S1484:      
0AF9   E1                     POP   hl   
0AFA                READNUMBER3:      
0AFA   C1                     POP   bc   
0AFB   DD E1                  POP   ix   
0AFD   E5                     PUSH   hl   
0AFE   DD E9                  JP   (ix)   
0B00                COLON:       
0B00                VARREF:      
0B00   03                     INC   bc   
0B01   0A                     LD   a,(bc)   
0B02   CD 18 0F               CALL   getVarAddr   
0B05   22 F8 55               LD   (vPointer),hl   ; store address in setter
0B08   5E                     LD   e,(hl)   
0B09   23                     INC   hl   
0B0A   56                     LD   d,(hl)   
0B0B   D5                     PUSH   de   
0B0C   DD E9                  JP   (ix)   
0B0E                SEMICOLON:      
0B0E   DD E9                  JP   (ix)   
0B10                             ; ~ bitwise invert
0B10                TILDE:       
0B10                INVERT:      
0B10   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0B11   7D                     LD   a,l   
0B12   2F                     CPL      
0B13   6F                     LD   l,a   
0B14   7C                     LD   a,h   
0B15   2F                     CPL      
0B16   67                     LD   h,a   
0B17   C3 E7 02               JP   add3   
0B1A                             ; $ hex                         ; 22
0B1A                DOLLAR:      
0B1A                HEXNUM:      
0B1A   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B1D                HEXNUM1:      
0B1D   03                     INC   bc   
0B1E   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B1F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B21   28 02                  JR   z,hexnum2   ; no a decimal
0B23   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B25                HEXNUM2:      
0B25   D6 30                  SUB   $30   ; form decimal digit
0B27   DA B5 0B               JP   c,num2   
0B2A   FE 10                  CP   $0F+1   
0B2C   D2 B5 0B               JP   nc,num2   
0B2F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B30   29                     ADD   hl,hl   ; 4X
0B31   29                     ADD   hl,hl   ; 8X
0B32   29                     ADD   hl,hl   ; 16X
0B33   85                     ADD   a,l   ; add into bottom of hl
0B34   6F                     LD   l,a   
0B35   18 E6                  JR   hexnum1   
0B37                             ; ? if                            23
0B37                             ; condition then else -- value
0B37                QUESTION:      
0B37                IF:          
0B37   D1                     POP   de   ; de = else
0B38   E1                     POP   hl   ; hl = then
0B39   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B3A   7C                     LD   a,h   
0B3B   B5                     OR   l   
0B3C   E1                     POP   hl   ; hl = then
0B3D   CA A0 03               JP   z,go1   ; if z de = else
0B40   EB                     EX   de,hl   ; condition = false, de = then
0B41   C3 A0 03               JP   go1   
0B44                             ; string                        ;38
0B44                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B44                QUOTE:       
0B44                STRING:      
0B44   2A EC 55               LD   hl,(vHeapPtr)   ; hl = heap*
0B47   E5                     PUSH   hl   ; save start of string
0B48   0A                     LD   a,(bc)   
0B49   5F                     LD   e,a   ; e = matching terminator
0B4A   03                     INC   bc   ; point to next char
0B4B   18 03                  JR   string2   
0B4D                STRING1:      
0B4D   77                     LD   (hl),a   
0B4E   23                     INC   hl   ; increase count
0B4F   03                     INC   bc   ; point to next char
0B50                STRING2:      
0B50   0A                     LD   a,(bc)   
0B51   BB                     CP   e   ; is it the string terminator
0B52   28 02                  JR   z,string3   
0B54   18 F7                  JR   string1   
0B56                STRING3:      
0B56   AF                     XOR   a   ; write NUL to terminate string
0B57   77                     LD   (hl),a   ; hl = end of string
0B58   23                     INC   hl   
0B59   22 EC 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B5C   DD E9                  JP   (ix)   
0B5E                             ; %a .. %z                      43
0B5E                             ; -- value
0B5E                             ; returns value of arg
0B5E                PERCENT:      
0B5E                ARG:         
0B5E   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B61   FD 56 05               LD   d,(iy+5)   
0B64   EB                     EX   de,hl   
0B65   7D                     LD   a,l   ; arg_list* == null, skip
0B66   B4                     OR   h   
0B67   28 1A                  JR   z,arg0a   
0B69   23                     INC   hl   ; a = num_args, hl = arg_list*
0B6A   7E                     LD   a,(hl)   
0B6B   23                     INC   hl   
0B6C   B7                     OR   a   
0B6D   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B6F   5F                     LD   e,a   ; e = a = num_args
0B70   03                     INC   bc   ; a = next char = dollar_name
0B71   0A                     LD   a,(bc)   
0B72   C5                     PUSH   bc   ; save IP
0B73   43                     LD   b,e   ; b = e = num_args
0B74   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B77   FD 56 03               LD   d,(iy+3)   
0B7A                ARG0:        
0B7A   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B7B   1B                     DEC   de   
0B7C   BE                     CP   (hl)   
0B7D   28 09                  JR   z,arg1   
0B7F   23                     INC   hl   ; hl = next arg_list*
0B80   10 F8                  DJNZ   arg0   
0B82   C1                     POP   bc   ; no match, restore IP
0B83                ARG0A:       
0B83   11 00 00               LD   de,0   ; return 0
0B86   18 08                  JR   arg1a   
0B88                ARG1:        
0B88   C1                     POP   bc   ; restore IP
0B89   EB                     EX   de,hl   ; hl = arg*
0B8A   22 F8 55               LD   (vPointer),hl   ; store arg* in setter
0B8D   5E                     LD   e,(hl)   
0B8E   23                     INC   hl   
0B8F   56                     LD   d,(hl)   ; de = arg
0B90                ARG1A:       
0B90   D5                     PUSH   de   ; push arg
0B91   DD E9                  JP   (ix)   
0B93                             ; 0..9 number                   37
0B93                NUM:         
0B93   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B96   0A                     LD   a,(bc)   ; Get numeral or -
0B97   FE 2D                  CP   "-"   
0B99   20 01                  JR   nz,num0   
0B9B   03                     INC   bc   ; move to next char, no flags affected
0B9C                NUM0:        
0B9C   08                     EX   af,af'   ; save zero flag = 0 for later
0B9D                NUM1:        
0B9D   0A                     LD   a,(bc)   ; read digit
0B9E   D6 30                  SUB   "0"   ; less than 0?
0BA0   38 13                  JR   c,num2   ; not a digit, exit loop
0BA2   FE 0A                  CP   10   ; greater that 9?
0BA4   30 0F                  JR   nc,num2   ; not a digit, exit loop
0BA6   03                     INC   bc   ; inc IP
0BA7   54 5D                  LD   de,hl   ; multiply hl * 10
0BA9   29                     ADD   hl,hl   
0BAA   29                     ADD   hl,hl   
0BAB   19                     ADD   hl,de   
0BAC   29                     ADD   hl,hl   
0BAD   85                     ADD   a,l   ; add digit in a to hl
0BAE   6F                     LD   l,a   
0BAF   3E 00                  LD   a,0   
0BB1   8C                     ADC   a,h   
0BB2   67                     LD   h,a   
0BB3   18 E8                  JR   num1   
0BB5                NUM2:        
0BB5   0B                     DEC   bc   
0BB6   08                     EX   af,af'   ; restore zero flag
0BB7   20 07                  JR   nz,num3   
0BB9   EB                     EX   de,hl   ; negate the value of hl
0BBA   21 00 00               LD   hl,0   
0BBD   B7                     OR   a   ; jump to sub2
0BBE   ED 52                  SBC   hl,de   
0BC0                NUM3:        
0BC0   E5                     PUSH   hl   ; Put the number on the stack
0BC1   DD E9                  JP   (ix)   ; and process the next character
0BC3                             ; }                               58
0BC3                RBRACE:      
0BC3                BLOCKEND:      
0BC3   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BC6   FD 56 01               LD   d,(iy+1)   
0BC9   ED 53 04 56            LD   (vTemp1),de   
0BCD   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BD0   FD 56 07               LD   d,(iy+7)   
0BD3   ED 53 06 56            LD   (vTemp2),de   
0BD7   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BDA   FD 56 03               LD   d,(iy+3)   
0BDD   EB                     EX   de,hl   
0BDE   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BE1   FD 56 01               LD   d,(iy+1)   
0BE4   13                     INC   de   ; for carry flag <=
0BE5   B7                     OR   a   
0BE6   ED 52                  SBC   hl,de   
0BE8   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BEA   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BEC   FD 5D                  LD   e,iyl   
0BEE   21 08 00               LD   hl,8   
0BF1   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BF2   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BF3   18 0C                  JR   blockEnd2   
0BF5                BLOCKEND1:      ; same scope
0BF5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BF8   FD 56 03               LD   d,(iy+3)   
0BFB   EB                     EX   de,hl   
0BFC   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BFE   FD 5D                  LD   e,iyl   
0C00   EB                     EX   de,hl   
0C01                BLOCKEND2:      
0C01   44 4D                  LD   bc,hl   ; bc = hl = BP
0C03   B7                     OR   a   ; hl = BP - SP = count
0C04   ED 72                  SBC   hl,sp   
0C06   7D                     LD   a,l   
0C07   B4                     OR   h   
0C08   28 09                  JR   z,blockEnd3   
0C0A   C5                     PUSH   bc   ; bc = count, hl = BP
0C0B   44 4D                  LD   bc,hl   
0C0D   E1                     POP   hl   
0C0E   2B                     DEC   hl   ; hl = BP-1
0C0F   1B                     DEC   de   ; de = args*-1
0C10   ED B8                  LDDR      
0C12   13                     INC   de   
0C13                BLOCKEND3:      
0C13   EB                     EX   de,hl   ; sp = de = new tos*
0C14   F9                     LD   sp,hl   
0C15   ED 4B 06 56            LD   bc,(vTemp2)   
0C19   FD 2A 04 56            LD   iy,(vTemp1)   
0C1D   ED 5B EE 55            LD   de,(vRecurPtr)   ; de = recur vector
0C21   7B                     LD   a,e   ; check for NUL
0C22   B2                     OR   d   
0C23   20 02                  JR   nz,blockEnd4   
0C25   DD E9                  JP   (ix)   
0C27                BLOCKEND4:      
0C27   21 00 00               LD   hl,0   ; clear recur vector
0C2A   22 EE 55               LD   (vRecurPtr),hl   
0C2D   C3 A0 03               JP   go1   ; execute de
0C30                GOBLOCK:      
0C30   ED 53 04 56            LD   (vTemp1),de   ; save de
0C34   21 00 53               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C37   FD 54                  LD   d,iyh   
0C39   FD 5D                  LD   e,iyl   
0C3B   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C3C   ED 52                  SBC   hl,de   
0C3E   ED 5B 04 56            LD   de,(vTemp1)   ; restore de
0C42   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C43   B4                     OR   h   
0C44   3E 00                  LD   a,0   
0C46   28 6A                  JR   z,goFunc8   
0C48   C5                     PUSH   bc   ; push IP
0C49   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C4C   FD 46 05               LD   b,(iy+5)   
0C4F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C52   FD 66 03               LD   h,(iy+3)   
0C55                GOBLOCK2:      
0C55   C5                     PUSH   bc   ; arg_list*
0C56   E5                     PUSH   hl   ; first_arg*
0C57   FD E5                  PUSH   iy   ; push BP
0C59   FD 21 00 00            LD   iy,0   ; BP = SP
0C5D   FD 39                  ADD   iy,sp   
0C5F                GOBLOCK3:      
0C5F   42 4B                  LD   bc,de   ; bc = de = block*-1
0C61   DD E9                  JP   (ix)   
0C63                GOFUNC:      ; execute func
0C63   EB                     EX   de,hl   ; hl = func*
0C64   5E                     LD   e,(hl)   ; de = partial_array*
0C65   23                     INC   hl   
0C66   56                     LD   d,(hl)   
0C67   23                     INC   hl   
0C68   7B                     LD   a,e   ; if partial_array* == null skip
0C69   B2                     OR   d   
0C6A   28 21                  JR   z,goFunc3   
0C6C   ED 43 04 56            LD   (vTemp1),bc   
0C70   22 06 56               LD   (vTemp2),hl   ; save bc,hl
0C73   EB                     EX   de,hl   ; hl = partial_array*
0C74   2B                     DEC   hl   ; bc = count
0C75   46                     LD   b,(hl)   
0C76   2B                     DEC   hl   
0C77   4E                     LD   c,(hl)   
0C78   23                     INC   hl   ; hl = array data*
0C79   23                     INC   hl   
0C7A   18 06                  JR   goFunc2   ; push each item on stack
0C7C                GOFUNC1:      
0C7C   5E                     LD   e,(hl)   ; de = partial item
0C7D   23                     INC   hl   
0C7E   56                     LD   d,(hl)   
0C7F   23                     INC   hl   
0C80   D5                     PUSH   de   ; push on stack
0C81   0B                     DEC   bc   
0C82                GOFUNC2:      
0C82   79                     LD   a,c   ; if count != 0 then loop
0C83   B0                     OR   b   
0C84   20 F6                  JR   nz,goFunc1   
0C86   ED 4B 04 56            LD   bc,(vTemp1)   ; restore bc
0C8A   2A 06 56               LD   hl,(vTemp2)   ; restore hl
0C8D                GOFUNC3:      
0C8D   5E                     LD   e,(hl)   ; de = block*
0C8E   23                     INC   hl   
0C8F   56                     LD   d,(hl)   
0C90   23                     INC   hl   
0C91   ED 53 04 56            LD   (vTemp1),de   ; save block*
0C95   5E                     LD   e,(hl)   ; de = arg_list*
0C96   23                     INC   hl   
0C97   56                     LD   d,(hl)   
0C98   23                     INC   hl   
0C99   EB                     EX   de,hl   ; hl = arg_list*
0C9A   ED 5B 04 56            LD   de,(vTemp1)   ; restore de = block*
0C9E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C9F   B4                     OR   h   
0CA0   20 03                  JR   nz,goFunc4   
0CA2   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CA3   18 0D                  JR   goFunc8   
0CA5                GOFUNC4:      ; allocate locals
0CA5   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0CA6   18 03                  JR   goFunc6   
0CA8                GOFUNC5:      ; loop
0CA8   3B                     DEC   sp   
0CA9   3B                     DEC   sp   
0CAA   3D                     DEC   a   
0CAB                GOFUNC6:      
0CAB   B7                     OR   a   
0CAC   20 FA                  JR   nz,goFunc5   ; end loop
0CAE                GOFUNC7:      
0CAE   23                     INC   hl   ; a = num_args* x 2
0CAF   7E                     LD   a,(hl)   
0CB0   2B                     DEC   hl   
0CB1   87                     ADD   a,a   ; a *= 2
0CB2                GOFUNC8:      
0CB2   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0CB3   44 4D                  LD   bc,hl   
0CB5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CB8   85                     ADD   a,l   
0CB9   6F                     LD   l,a   
0CBA   39                     ADD   hl,sp   
0CBB   18 98                  JR   goBlock2   
0CBD                             ; =                              21
0CBD                             ; value _oldValue --            ; uses address in vPointer 15
0CBD                ASSIGN:      
0CBD   E1                     POP   hl   ; discard last accessed value
0CBE   E1                     POP   hl   ; hl = new value
0CBF                ASSIGN0:      
0CBF   EB                     EX   de,hl   ; de = new value
0CC0   2A F8 55               LD   hl,(vPointer)   
0CC3                ASSIGN1:      ; entry point from defineEnd
0CC3   73                     LD   (hl),e   
0CC4   3A F0 55               LD   a,(vDataWidth)   
0CC7   3D                     DEC   a   ; is it byte?
0CC8   28 02                  JR   z,assign2   
0CCA   23                     INC   hl   
0CCB   72                     LD   (hl),d   
0CCC                ASSIGN2:      
0CCC   DD E9                  JP   (ix)   
0CCE                             ; hl = value1, de = value2
0CCE                             ; hl = result
0CCE                EQUALS:      
0CCE   B7                     OR   a   ; reset the carry flag
0CCF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CD1   28 16                  JR   z,true1   
0CD3   18 1A                  JR   false1   
0CD5                NOTEQUALS:      
0CD5   B7                     OR   a   ; reset the carry flag
0CD6   ED 52                  SBC   hl,de   
0CD8   20 0F                  JR   nz,true1   
0CDA   18 13                  JR   false1   
0CDC                             ; hl = value1 de = value2
0CDC                             ; hl = result
0CDC                LESSTHANEQ:      
0CDC   B7                     OR   a   
0CDD   ED 52                  SBC   hl,de   
0CDF   18 05                  JR   lessthan1   
0CE1                             ; hl = value1 de = value2
0CE1                             ; hl = result
0CE1                LESSTHAN:      
0CE1   B7                     OR   a   
0CE2   ED 52                  SBC   hl,de   
0CE4   28 09                  JR   z,false1   
0CE6                LESSTHAN1:      
0CE6   FA EF 0C               JP   m,false1   
0CE9                TRUE1:       
0CE9   21 FF FF               LD   hl,TRUE   
0CEC   E5                     PUSH   hl   
0CED   DD E9                  JP   (ix)   
0CEF                NULL1:       
0CEF                FALSE1:      
0CEF   21 00 00               LD   hl,FALSE   
0CF2   E5                     PUSH   hl   
0CF3   DD E9                  JP   (ix)   
0CF5                SPREAD:      
0CF5   E1                     POP   hl   ; hl = array*
0CF6   ED 43 04 56            LD   (vTemp1),bc   ; save bc
0CFA   2B                     DEC   hl   ; bc = length
0CFB   46                     LD   b,(hl)   
0CFC   2B                     DEC   hl   
0CFD   4E                     LD   c,(hl)   
0CFE   23                     INC   hl   ; move back to array 0
0CFF   23                     INC   hl   
0D00   18 0D                  JR   spread3   
0D02                SPREAD1:      
0D02   5E                     LD   e,(hl)   ; e = lsb data at hl
0D03   23                     INC   hl   
0D04   3A F0 55               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D07   57                     LD   d,a   
0D08   15                     DEC   d   
0D09   28 02                  JR   z,spread2   
0D0B   56                     LD   d,(hl)   ; d = msb data at hl
0D0C   23                     INC   hl   
0D0D                SPREAD2:      
0D0D   D5                     PUSH   de   ; return de
0D0E   0B                     DEC   bc   ; count--
0D0F                SPREAD3:      
0D0F   79                     LD   a,c   ; exit loop if bc == 0
0D10   B0                     OR   b   
0D11   20 EF                  JR   nz,spread1   
0D13   ED 4B 04 56            LD   bc,(vTemp1)   ; restore bc
0D17   DD E9                  JP   (ix)   
0D19                             ; shiftLeft
0D19                             ; value count <<
0D19                             ; count variable <<=
0D19                SHIFTLEFT:      
0D19   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D1A   D1                     POP   de   
0D1B   03                     INC   bc   
0D1C   0A                     LD   a,(bc)   
0D1D   FE 3D                  CP   "="   
0D1F   28 02                  JR   z,shiftLeft2   
0D21   0B                     DEC   bc   
0D22   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D23                SHIFTLEFT2:      
0D23   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0D27   43                     LD   b,e   ; b = loop counter
0D28   04                     INC   b   ; test for counter=0 case
0D29   18 01                  JR   shiftLeft4   
0D2B                SHIFTLEFT3:      
0D2B   29                     ADD   hl,hl   ; left shift hl
0D2C                SHIFTLEFT4:      
0D2C   10 FD                  DJNZ   shiftLeft3   
0D2E   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0D32   C3 AC 02               JP   sub3   
0D35                             ; shiftRight
0D35                             ; value count >>
0D35                             ; count variable >>=
0D35                SHIFTRIGHT:      
0D35   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D36   D1                     POP   de   
0D37   03                     INC   bc   
0D38   0A                     LD   a,(bc)   
0D39   FE 3D                  CP   "="   
0D3B   28 02                  JR   z,shiftRight2   
0D3D   0B                     DEC   bc   
0D3E   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D3F                SHIFTRIGHT2:      
0D3F   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0D43   43                     LD   b,e   ; b = loop counter
0D44   04                     INC   b   ; test for counter=0 case
0D45   18 04                  JR   shiftRight4   
0D47                SHIFTRIGHT3:      
0D47   CB 3C                  SRL   h   ; right shift hl
0D49   CB 1D                  RR   l   
0D4B                SHIFTRIGHT4:      
0D4B   10 FA                  DJNZ   shiftRight3   
0D4D   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0D51   C3 AC 02               JP   sub3   
0D54                             ; division subroutine.
0D54                             ; bc: divisor, de: dividend, hl: remainder
0D54                DIVIDE:      
0D54   21 00 00               LD   hl,0   ; zero the remainder
0D57   3E 10                  LD   a,16   ; loop counter
0D59                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D59   CB 21                  SLA   c   
0D5B   CB 10                  RL   b   
0D5D   ED 6A                  ADC   hl,hl   
0D5F   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D61   38 03                  JR   c,divide2   
0D63   0C                     INC   c   
0D64   18 01                  JR   divide3   
0D66                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D66   19                     ADD   hl,de   
0D67                DIVIDE3:      
0D67   3D                     DEC   a   
0D68   20 EF                  JR   nz,divide1   
0D6A   50 59                  LD   de,bc   ; result from bc to de
0D6C   C9                     RET      
0D6D                DOTNEXT:      
0D6D   3A F2 55               LD   a,(vStrMode)   ; if string mode then exit
0D70   3C                     INC   a   
0D71   20 02                  JR   nz,dotNext1   
0D73   DD E9                  JP   (ix)   
0D75                DOTNEXT1:      
0D75   11 00 54               LD   de,BUFFER   
0D78   2A E8 55               LD   hl,(vBufPtr)   
0D7B   36 00                  LD   (hl),0   ; store NUL at end of string
0D7D   ED 53 E8 55            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D81   EB                     EX   de,hl   ; hl = BUFFER
0D82   CD 33 0F               CALL   putstr   
0D85   DD E9                  JP   (ix)   
0D87                             ; arg_list - parses arg_list e.g. ab:c
0D87                             ; -- arg_list*
0D87                PARSEARGS:      
0D87   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D8A   2A EC 55               LD   hl,(vHeapPtr)   ; hl = heap*
0D8D   E5                     PUSH   hl   ; save start of arg_list
0D8E   23                     INC   hl   ; skip length fields to start of string
0D8F   23                     INC   hl   
0D90   03                     INC   bc   ; point to next char
0D91                PARSEARGS1:      
0D91   0A                     LD   a,(bc)   
0D92   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D94   20 03                  JR   nz,parseArgs1a   
0D96   14                     INC   d   ; non zero value local count acts as flag
0D97   18 10                  JR   parseArgs3   
0D99                PARSEARGS1A:      
0D99   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D9B   38 0F                  JR   c,parseArgs4   
0D9D   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D9F   30 0B                  JR   nc,parseArgs4   
0DA1                PARSEARGS2:      
0DA1   77                     LD   (hl),a   
0DA2   23                     INC   hl   
0DA3   1C                     INC   e   ; increase arg count
0DA4   AF                     XOR   a   
0DA5   B2                     OR   d   
0DA6   28 01                  JR   z,parseArgs3   
0DA8   14                     INC   d   ; if d > 0 increase local count
0DA9                PARSEARGS3:      
0DA9   03                     INC   bc   ; point to next char
0DAA   18 E5                  JR   parseArgs1   
0DAC                PARSEARGS4:      
0DAC   0B                     DEC   bc   
0DAD   AF                     XOR   a   
0DAE   B2                     OR   d   
0DAF   28 01                  JR   z,parseArgs5   
0DB1   15                     DEC   d   ; remove initial inc
0DB2                PARSEARGS5:      
0DB2   23                     INC   hl   
0DB3   22 EC 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0DB6   E1                     POP   hl   ; hl = start of arg_list
0DB7   72                     LD   (hl),d   ; write number of locals at start - 1
0DB8   23                     INC   hl   
0DB9   73                     LD   (hl),e   ; write number of args + locals at start - 2
0DBA   2B                     DEC   hl   
0DBB   E3                     EX   (sp),hl   
0DBC   E9                     JP   (hl)   
0DBD                             ; create block: parses block e.g. 00bbIC4uLi4g
0DBD                             ; -- block*
0DBD                PARSEBLOCK:      
0DBD   C5                     PUSH   bc   ; return pointer to first { of block
0DBE   03                     INC   bc   
0DBF   16 01                  LD   d,1   ; nesting: count first parenthesis
0DC1                PARSEBLOCK1:      ; Skip to end of definition
0DC1   0A                     LD   a,(bc)   ; Get the next character
0DC2   03                     INC   bc   ; Point to next character
0DC3   FE 21                  CP   " " + 1   ; ignore whitespace
0DC5   38 FA                  JR   c,parseBlock1   
0DC7   FE 29                  CP   ")"   
0DC9   28 2D                  JR   z,parseBlock4   
0DCB   FE 7D                  CP   "}"   
0DCD   28 29                  JR   z,parseBlock4   
0DCF   FE 5D                  CP   "]"   
0DD1   28 25                  JR   z,parseBlock4   
0DD3   FE 28                  CP   "("   
0DD5   28 16                  JR   z,parseBlock2   
0DD7   FE 7B                  CP   "{"   
0DD9   28 12                  JR   z,parseBlock2   
0DDB   FE 5B                  CP   "["   
0DDD   28 0E                  JR   z,parseBlock2   
0DDF   FE 27                  CP   "'"   
0DE1   28 0D                  JR   z,parseBlock3   
0DE3   FE 60                  CP   "`"   
0DE5   28 09                  JR   z,parseBlock3   
0DE7   FE 22                  CP   DQ   
0DE9   28 05                  JR   z,parseBlock3   
0DEB   18 D4                  JR   parseBlock1   
0DED                PARSEBLOCK2:      
0DED   14                     INC   d   
0DEE   18 D1                  JR   parseBlock1   
0DF0                PARSEBLOCK3:      
0DF0   3E 80                  LD   a,$80   
0DF2   AA                     XOR   d   
0DF3   57                     LD   d,a   
0DF4   20 CB                  JR   nz,parseBlock1   
0DF6   18 03                  JR   parseBlock5   
0DF8                PARSEBLOCK4:      
0DF8   15                     DEC   d   
0DF9   20 C6                  JR   nz,parseBlock1   ; get the next element
0DFB                PARSEBLOCK5:      
0DFB   60 69                  LD   hl,bc   ; hl = IP
0DFD   11 22 56               LD   de,HEAP   ; is IP pointing to object in heap
0E00   B7                     OR   a   ; IP - HEAP
0E01   ED 52                  SBC   hl,de   
0E03   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E05   28 1C                  JR   z,parseBlock6   
0E07   60 69                  LD   hl,bc   ; hl = IP
0E09   D1                     POP   de   ; de = block*
0E0A   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0E0E   B7                     OR   a   ; bc = size
0E0F   ED 52                  SBC   hl,de   
0E11   44 4D                  LD   bc,hl   
0E13   EB                     EX   de,hl   ; hl = block* de = heap*
0E14   ED 5B EC 55            LD   de,(vHeapPtr)   
0E18   D5                     PUSH   de   ; return hblock*
0E19   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E1B   ED 53 EC 55            LD   (vHeapPtr),de   ; heap* += size
0E1F   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0E23                PARSEBLOCK6:      
0E23   0B                     DEC   bc   ; balanced, exit
0E24   E1                     POP   hl   ; hl = block*
0E25   E3                     EX   (sp),hl   ; return to caller
0E26   E9                     JP   (hl)   
0E27                             ; create function
0E27                             ; arg_list* block* -- func*
0E27                CREATEFUNC:      
0E27   E1                     POP   hl   ; save retrn address
0E28   22 08 56               LD   (vTemp3),hl   
0E2B   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0E2F   E1                     POP   hl   ; hl = block*
0E30   22 06 56               LD   (vTemp2),hl   ; save block*
0E33   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E36   FD 56 05               LD   d,(iy+5)   
0E39   7B                     LD   a,e   ; if arg_list == null then make a func
0E3A   B2                     OR   d   
0E3B   20 09                  JR   nz,createFunc0   
0E3D   21 00 00               LD   hl,0   ; partial_array = null
0E40   ED 5B EC 55            LD   de,(vHeapPtr)   ; de = compile*
0E44   18 65                  JR   createFunc5   
0E46                CREATEFUNC0:      
0E46   E1                     POP   hl   ; hl = inner_arg_list*
0E47   E5                     PUSH   hl   ; save inner_arg_list
0E48   ED 5B EC 55            LD   de,(vHeapPtr)   ; de = compile*
0E4C   7E                     LD   a,(hl)   ; compile inner_num_locals
0E4D   4F                     LD   c,a   ; b = inner_num_locals
0E4E   12                     LD   (de),a   
0E4F   23                     INC   hl   
0E50   13                     INC   de   
0E51   7E                     LD   a,(hl)   ; compile inner_length
0E52   12                     LD   (de),a   
0E53   91                     SUB   c   ; a = inner_num args
0E54   23                     INC   hl   
0E55   13                     INC   de   
0E56   B7                     OR   a   ; compile args if inner_length > 0
0E57   28 05                  JR   z,createFunc1   
0E59   4F                     LD   c,a   ; bc = a
0E5A   06 00                  LD   b,0   
0E5C   ED B0                  LDIR      
0E5E                CREATEFUNC1:      
0E5E   EB                     EX   de,hl   ; hl = outer_arg_list
0E5F   FD 5E 04               LD   e,(iy+4)   
0E62   FD 56 05               LD   d,(iy+5)   
0E65   EB                     EX   de,hl   
0E66   23                     INC   hl   ; a = outer_length
0E67   7E                     LD   a,(hl)   
0E68   23                     INC   hl   
0E69   B7                     OR   a   
0E6A   28 05                  JR   z,createFunc2   
0E6C   4F                     LD   c,a   
0E6D   06 00                  LD   b,0   
0E6F   ED B0                  LDIR      ; append outer_args
0E71                CREATEFUNC2:      ; a = outer_length
0E71   47                     LD   b,a   ; b = a = outer_length
0E72   2A EC 55               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E75   23                     INC   hl   
0E76   7E                     LD   a,(hl)   ; add outer_length to new length
0E77   80                     ADD   a,b   
0E78   77                     LD   (hl),a   
0E79   2B                     DEC   hl   
0E7A   78                     LD   a,b   ; save outer_length in a'
0E7B   08                     EX   af,af'   
0E7C   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E7D   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E7E   B7                     OR   a   
0E7F   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E81   4F                     LD   c,a   ; c = inner_num_locals
0E82   06 00                  LD   b,0   ; bc = inner_num_locals
0E84   23                     INC   hl   ; a = inner_length
0E85   7E                     LD   a,(hl)   
0E86   91                     SUB   c   ; a = inner_num_args
0E87   23                     INC   hl   ; hl = inner_arg_chars
0E88   85                     ADD   a,l   ; hl += a
0E89   6F                     LD   l,a   
0E8A   3E 00                  LD   a,0   
0E8C   84                     ADD   a,h   
0E8D   67                     LD   h,a   
0E8E   ED B0                  LDIR      ; append inner_locals
0E90                CREATEFUNC2A:      
0E90   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E91   12                     LD   (de),a   ; compile partial_array length field
0E92   13                     INC   de   
0E93   AF                     XOR   a   
0E94   12                     LD   (de),a   
0E95   13                     INC   de   
0E96   D5                     PUSH   de   ; push partial_array*
0E97   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E98   FD 5E 02               LD   e,(iy+2)   
0E9B   FD 56 03               LD   d,(iy+3)   
0E9E   EB                     EX   de,hl   
0E9F                CREATEFUNC3:      
0E9F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0EA0   4E                     LD   c,(hl)   
0EA1   2B                     DEC   hl   
0EA2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0EA3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0EA4   13                     INC   de   
0EA5   79                     LD   a,c   
0EA6   12                     LD   (de),a   
0EA7   13                     INC   de   
0EA8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0EAA                CREATEFUNC4:      
0EAA   E1                     POP   hl   ; hl = partial_array*
0EAB                CREATEFUNC5:      
0EAB   C1                     POP   bc   ; bc = new_arg_list*
0EAC   D5                     PUSH   de   ; return new func*
0EAD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0EAE   73                     LD   (hl),e   ; compile partial_array* to func
0EAF   23                     INC   hl   
0EB0   72                     LD   (hl),d   
0EB1   23                     INC   hl   
0EB2   ED 5B 06 56            LD   de,(vTemp2)   ; de = block*
0EB6   73                     LD   (hl),e   ; compile block* to func
0EB7   23                     INC   hl   
0EB8   72                     LD   (hl),d   
0EB9   23                     INC   hl   
0EBA   71                     LD   (hl),c   ; compile new_arg_list* to func
0EBB   23                     INC   hl   
0EBC   70                     LD   (hl),b   
0EBD   23                     INC   hl   
0EBE   22 EC 55               LD   (vHeapPtr),hl   ; bump heap ptr
0EC1   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0EC5   2A 08 56               LD   hl,(vTemp3)   ; jump to return address
0EC8   E9                     JP   (hl)   
0EC9                             ;*******************************************************************
0EC9                             ; general routines
0EC9                             ;*******************************************************************
0EC9                             ; followed by a table
0EC9                             ; indexed on the 0-25 lowercase letter
0EC9                             ; db lsb(addr)
0EC9                             ; the final item index 26 matches any other char
0EC9                LOWERCASETABLE:      
0EC9   03                     INC   bc   
0ECA   0A                     LD   a,(bc)   
0ECB   FE 7B                  CP   "z"+1   
0ECD   30 0B                  JR   nc,lowerCaseTable2   
0ECF   D6 61                  SUB   "a"   
0ED1   38 07                  JR   c,lowerCaseTable2   
0ED3                LOWERCASETABLE1:      
0ED3   E1                     POP   hl   
0ED4   85                     ADD   a,l   
0ED5   6F                     LD   l,a   
0ED6   6E                     LD   l,(hl)   ; must have the same msb as the table
0ED7   C3 E0 0E               JP   commandTable1   
0EDA                LOWERCASETABLE2:      
0EDA   3E 1A                  LD   a,26   
0EDC   0B                     DEC   bc   
0EDD   18 F4                  JR   lowerCaseTable1   
0EDF                             ; followed by a table
0EDF                             ; db char
0EDF                             ; dw addr
0EDF                             ; the final item must have char == NUL
0EDF                COMMANDTABLE:      
0EDF   E1                     POP   hl   
0EE0                COMMANDTABLE1:      
0EE0   03                     INC   bc   
0EE1                COMMANDTABLE2:      
0EE1   AF                     XOR   a   
0EE2   BE                     CP   (hl)   
0EE3   20 03                  JR   nz,commandTable3   
0EE5   0B                     DEC   bc   
0EE6   18 09                  JR   commandTable4   
0EE8                COMMANDTABLE3:      
0EE8   0A                     LD   a,(bc)   
0EE9   BE                     CP   (hl)   
0EEA   28 05                  JR   z,commandTable4   
0EEC   23                     INC   hl   
0EED   23                     INC   hl   
0EEE   23                     INC   hl   
0EEF   18 F0                  JR   commandTable2   
0EF1                COMMANDTABLE4:      
0EF1   23                     INC   hl   
0EF2   5E                     LD   e,(hl)   
0EF3   23                     INC   hl   
0EF4   56                     LD   d,(hl)   
0EF5   EB                     EX   de,hl   
0EF6   E9                     JP   (hl)   
0EF7                             ; followed by a table
0EF7                             ; db char
0EF7                             ; db char - if null only match on first char
0EF7                             ; dw addr
0EF7                             ; the final item must have char == NUL
0EF7                CMDTABLE:      
0EF7   E1                     POP   hl   
0EF8                CMDTABLE1:      
0EF8                CMDTABLE2:      
0EF8   56                     LD   d,(hl)   
0EF9   23                     INC   hl   
0EFA   5E                     LD   e,(hl)   
0EFB   23                     INC   hl   
0EFC   AF                     XOR   a   ; if d == 0, matched
0EFD   BA                     CP   d   
0EFE   28 13                  JR   z,cmdTable5   
0F00   03                     INC   bc   ; match?
0F01   0A                     LD   a,(bc)   
0F02   BA                     CP   d   
0F03   20 09                  JR   nz,cmdTable4   
0F05                CMDTABLE3:      
0F05   AF                     XOR   a   ; if e == 0, matched
0F06   BB                     CP   e   
0F07   28 0A                  JR   z,cmdTable5   
0F09   03                     INC   bc   
0F0A   0A                     LD   a,(bc)   ; match?
0F0B   BB                     CP   e   
0F0C   28 05                  JR   z,cmdTable5   
0F0E                CMDTABLE4:      ; no match, restore bc, go to next table entry
0F0E   0B                     DEC   bc   
0F0F   23                     INC   hl   
0F10   23                     INC   hl   
0F11   18 E5                  JR   cmdTable2   
0F13                CMDTABLE5:      ; matched, jump to addr
0F13   5E                     LD   e,(hl)   
0F14   23                     INC   hl   
0F15   56                     LD   d,(hl)   
0F16   EB                     EX   de,hl   
0F17   E9                     JP   (hl)   
0F18                GETVARADDR:      
0F18   21 00 00               LD   hl,0   
0F1B   FE 7B                  CP   "z"+1   ; if a > z then exit
0F1D   D0                     RET   nc   
0F1E   D6 41                  SUB   "A"   ; a - 65
0F20   D8                     RET   c   ; if < A then exit
0F21   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0F23   38 05                  JR   c,getVarAddr1   
0F25   D6 06                  SUB   "a"-("Z"+1)   
0F27   FE 1A                  CP   "Z"-"A"+1   
0F29   D8                     RET   c   ; if < a then exit
0F2A                GETVARADDR1:      
0F2A   87                     ADD   a,a   ; double a
0F2B   6F                     LD   l,a   
0F2C   26 55                  LD   h,msb(VARS)   
0F2E   C9                     RET      
0F2F                PUTSTR0:      
0F2F   CD 85 00               CALL   putchar   
0F32   23                     INC   hl   
0F33                PUTSTR:      
0F33   7E                     LD   a,(hl)   
0F34   B7                     OR   a   
0F35   20 F8                  JR   nz,putstr0   
0F37   C9                     RET      
0F38                             ; **************************************************************************
0F38                             ; calculate nesting value
0F38                             ; a is char to be tested,
0F38                             ; e is the nesting value (initially 0)
0F38                             ; e is increased by ( and [
0F38                             ; e is decreased by ) and ]
0F38                             ; e has its bit 7 toggled by `
0F38                             ; limited to 127 levels
0F38                             ; **************************************************************************
0F38                NESTING:      
0F38   FE 22                  CP   DQ   ; quote char
0F3A   28 06                  JR   z,nesting0   
0F3C   FE 60                  CP   "`"   ; quote char
0F3E   28 02                  JR   z,nesting0   
0F40   18 0A                  JR   nesting1   
0F42                NESTING0:      
0F42   CB 7B                  BIT   7,e   
0F44   28 03                  JR   z,nesting1a   
0F46   CB BB                  RES   7,e   
0F48   C9                     RET      
0F49                NESTING1A:      
0F49   CB FB                  SET   7,e   
0F4B   C9                     RET      
0F4C                NESTING1:      
0F4C   CB 7B                  BIT   7,e   
0F4E   C0                     RET   nz   
0F4F   FE 7B                  CP   "{"   
0F51   28 08                  JR   z,nesting2   
0F53   FE 5B                  CP   "["   
0F55   28 04                  JR   z,nesting2   
0F57   FE 28                  CP   "("   
0F59   20 02                  JR   nz,nesting3   
0F5B                NESTING2:      
0F5B   1C                     INC   e   
0F5C   C9                     RET      
0F5D                NESTING3:      
0F5D   FE 7D                  CP   "}"   
0F5F   28 07                  JR   z,nesting4   
0F61   FE 5D                  CP   "]"   
0F63   28 03                  JR   z,nesting4   
0F65   FE 29                  CP   ")"   
0F67   C0                     RET   nz   
0F68                NESTING4:      
0F68   1D                     DEC   e   
0F69   C9                     RET      
0F6A                PROMPT:      
0F6A   CD 7A 0F               CALL   printStr   
0F6D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0F72   C9                     RET      
0F73                CRLF:        
0F73   CD 7A 0F               CALL   printStr   
0F76   0D 0A 00               .CSTR   "\r\n"   
0F79   C9                     RET      
0F7A                             ; prints a null teminated string
0F7A                             ; the string should be immediately following the call
0F7A                PRINTSTR:      
0F7A   E3                     EX   (sp),hl   ; swap			
0F7B   CD 33 0F               CALL   putstr   
0F7E   23                     INC   hl   ; inc past NUL
0F7F   E3                     EX   (sp),hl   ; put it back	
0F80   C9                     RET      
0F81                INIT:        
0F81   21 F0 01               LD   hl,titleStr   
0F84   11 0E 56               LD   de,titleBuf   
0F87   06 14                  LD   b,20   
0F89                INIT1:       
0F89   1A                     LD   a,(de)   
0F8A   BE                     CP   (hl)   
0F8B   20 17                  JR   nz,coldBoot0   
0F8D   13                     INC   de   
0F8E   23                     INC   hl   
0F8F   10 F8                  DJNZ   init1   
0F91                WARMINIT:      
0F91   ED 4B FC 55            LD   bc,(vSavedIP)   ; restore IP
0F95   ED 7B FE 55            LD   sp,(vSavedSP)   ; restore SP
0F99   DD 2A 00 56            LD   ix,(vSavedNext)   ; restore Next
0F9D   FD 2A 02 56            LD   iy,(vSavedBP)   ; restore BP
0FA1   C3 DB 0F               JP   start1   
0FA4                COLDBOOT0:      
0FA4   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0FA7   11 0E 56               LD   de,titleBuf   
0FAA   06 14                  LD   b,20   
0FAC   ED B0                  LDIR      
0FAE                COLDINIT:      
0FAE   21 DE 01               LD   hl,isysVars   
0FB1   11 E6 55               LD   de,sysVars   
0FB4   01 12 00               LD   bc,5 * 2 + 8   
0FB7   ED B0                  LDIR      
0FB9   21 00 55               LD   hl,vars   ; 52 vars LO HI
0FBC   06 34                  LD   b,26*2   
0FBE   AF                     XOR   a   
0FBF                COLDBOOT1:      
0FBF   77                     LD   (hl),a   
0FC0   23                     INC   hl   
0FC1   10 FC                  DJNZ   coldBoot1   
0FC3   DD 2A EA 55            LD   ix,(vNext)   
0FC7   FD 21 00 53            LD   iy,STACK   
0FCB   C9                     RET      
0FCC                COLDSTART:      
0FCC   31 00 53               LD   sp,STACK   
0FCF   CD A4 0F               CALL   coldBoot0   
0FD2   C3 DB 0F               JP   start1   
0FD5                START:       
0FD5   31 00 53               LD   sp,STACK   ; start Monty
0FD8   CD 81 0F               CALL   init   ; setups
0FDB                START1:      
0FDB   21 0E 56               LD   hl,titleBuf   
0FDE   CD 33 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0FE1                INTERPRET:      
0FE1   CD 6A 0F               CALL   prompt   
0FE4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0FE7   21 00 53               LD   hl,TIB   
0FEA   22 E6 55               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0FED                INTERPRET2:      ; calculate nesting
0FED   1E 00                  LD   e,0   ; initilize nesting value
0FEF   C5                     PUSH   bc   ; save offset into TIB,
0FF0                             ; bc is also the count of chars in TIB
0FF0   21 00 53               LD   hl,TIB   ; hl is start of TIB
0FF3   18 06                  JR   interpret4   
0FF5                INTERPRET3:      
0FF5   7E                     LD   a,(hl)   ; a = char in TIB
0FF6   23                     INC   hl   ; inc pointer into TIB
0FF7   0B                     DEC   bc   ; dec count of chars in TIB
0FF8   CD 38 0F               CALL   nesting   ; update nesting value
0FFB                INTERPRET4:      
0FFB   79                     LD   a,c   ; is count zero?
0FFC   B0                     OR   b   
0FFD   20 F6                  JR   nz,interpret3   ; if not loop
0FFF   C1                     POP   bc   ; restore offset into TIB
1000                INTERPRET5:      
1000   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1003   FE 20                  CP   $20   ; compare to space
1005   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1007   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1009   28 31                  JR   z,interpret8   
100B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
100D   28 1A                  JR   z,interpret7   ; if anything else its macro/control
100F   FE 08                  CP   CTRL_H   
1011   CA 8D 10               JP   z,backSpace_   
1014   FE 0A                  CP   CTRL_J   
1016   CA 9D 10               JP   z,reEdit_   
1019                INTERPRET5A:      
1019   18 D2                  JR   interpret2   
101B                INTERPRET6:      
101B   21 00 53               LD   hl,TIB   
101E   09                     ADD   hl,bc   
101F   77                     LD   (hl),a   ; store the character in textbuf
1020   03                     INC   bc   
1021   CD 85 00               CALL   putchar   ; echo character to screen
1024   CD 38 0F               CALL   nesting   
1027   18 D7                  JR   interpret5   ; wait for next character
1029                INTERPRET7:      
1029   21 00 53               LD   hl,TIB   
102C   09                     ADD   hl,bc   
102D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
102F   23                     INC   hl   
1030   36 0A                  LD   (hl),"\n"   
1032   23                     INC   hl   
1033   03                     INC   bc   
1034   03                     INC   bc   
1035   CD 73 0F               CALL   crlf   ; echo character to screen
1038   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1039   B7                     OR   a   
103A   20 C4                  JR   nz,interpret5   
103C                INTERPRET8:      
103C   21 00 53               LD   hl,TIB   
103F   09                     ADD   hl,bc   
1040   22 E6 55               LD   (vTIBPtr),hl   
1043   01 00 53               LD   bc,TIB   
1046   ED 43 FC 55            LD   (vSavedIP),bc   ; save IP
104A   ED 73 FE 55            LD   (vSavedSP),sp   ; save SP
104E   DD 22 00 56            LD   (vSavedNext),ix   ; save Next
1052   FD 22 02 56            LD   (vSavedBP),iy   ; save BP
1056   0B                     DEC   bc   
1057                NEXT:        
1057   03                     INC   bc   ; Increment the IP
1058   0A                     LD   a,(bc)   ; Get the next character and dispatch
1059   FE 20                  CP   " "   ; whitespace?
105B   28 FA                  JR   z,next   ; space? ignore
105D   38 0D                  JR   c,next1   
105F   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1061   6F                     LD   l,a   ; index into table
1062   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1064   6E                     LD   l,(hl)   ; get low jump address
1065   24                     INC   h   ; page 2
1066   FE BA                  CP   "Z" - "!" + 1 + $80   
1068   38 01                  JR   c,next0   
106A   24                     INC   h   ; page 3
106B                NEXT0:       
106B   E9                     JP   (hl)   ; Jump to routine
106C                NEXT1:       
106C   FE 00                  CP   NUL   ; end of input string?
106E   28 03                  JR   z,exit   
1070   C3 E1 0F               JP   interpret   ; no, other whitespace, macros?
1073                EXIT:        
1073   03                     INC   bc   
1074   60 69                  LD   hl,bc   
1076   E9                     JP   (hl)   
1077                RUN:         
1077   C1                     POP   bc   
1078   0B                     DEC   bc   
1079   DD E9                  JP   (ix)   
107B                ERROR:       
107B   E5                     PUSH   hl   
107C   CD 77 10               CALL   run   
107F   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
108A   C3 E1 0F               JP   interpret   
108D                BACKSPACE_:      
108D   79                     LD   a,c   
108E   B0                     OR   b   
108F   CA ED 0F               JP   z,interpret2   
1092   0B                     DEC   bc   
1093   CD 7A 0F               CALL   printStr   
1096   08 20 08 00            .CSTR   "\b \b"   
109A   C3 ED 0F               JP   interpret2   
109D                REEDIT_:      
109D   CD 7A 0F               CALL   printStr   
10A0   0D 3E 20 00            .CSTR   "\r> "   
10A4   21 00 53               LD   hl,TIB   
10A7   18 04                  JR   reEdit1   
10A9                REEDIT0:      
10A9   CD 85 00               CALL   putchar   
10AC   23                     INC   hl   
10AD                REEDIT1:      
10AD   7E                     LD   a,(hl)   
10AE   FE 0D                  CP   "\r"   
10B0   20 F7                  JR   nz,reEdit0   
10B2   11 00 53               LD   de,TIB   
10B5   B7                     OR   a   
10B6   ED 52                  SBC   hl,de   
10B8   44 4D                  LD   bc,hl   
10BA   C3 ED 0F               JP   interpret2   
10BD                          ;*Macro unroll: FUNC f1, 0, ""
10BD                F1:          
10BD   CD 9F 03               CALL   go   
10C0   00 00                  DW   NUL   
10C2   C8 10                  DW   f1M_2995S12   
10C4   C6 10                  DW   $+2   
10C6   00                     DB   0   
10C7   00                     .PSTR   ""   
10C8                F1M_2995S12:      
10C8   00                     DB   0   
10C9                          ;*Macro unroll: FUNC f2, 0, ""
10C9                F2:          
10C9   CD 9F 03               CALL   go   
10CC   00 00                  DW   NUL   
10CE   D4 10                  DW   f2M_2997S15   
10D0   D2 10                  DW   $+2   
10D2   00                     DB   0   
10D3   00                     .PSTR   ""   
10D4                F2M_2997S15:      
10D4   00                     DB   0   
10D5                          ;*Macro unroll: FUNC f3, 0, ""
10D5                F3:          
10D5   CD 9F 03               CALL   go   
10D8   00 00                  DW   NUL   
10DA   E0 10                  DW   f3M_2999S18   
10DC   DE 10                  DW   $+2   
10DE   00                     DB   0   
10DF   00                     .PSTR   ""   
10E0                F3M_2999S18:      
10E0   00                     DB   0   
10E1                          ;*Macro unroll: FUNC f4, 0, ""
10E1                F4:          
10E1   CD 9F 03               CALL   go   
10E4   00 00                  DW   NUL   
10E6   EC 10                  DW   f4M_3001S21   
10E8   EA 10                  DW   $+2   
10EA   00                     DB   0   
10EB   00                     .PSTR   ""   
10EC                F4M_3001S21:      
10EC   00                     DB   0   
10ED                          ALIGN   $100   
1100                TESTSSTART:      
1100                          ;*Macro unroll:  test "0 10 1 /rg \\a{%a.} /fe", 0
1100   31 00 53               LD   SP,STACK   
1103   CD AE 0F               CALL   coldInit   
1106   CD CC 51               CALL   execStr   
1109   30 20 31 30 20 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 DB   "0 10 1 /rg \\a{%a.} /fe",0   
1120   E1                     POP   HL   
1121   E5                     PUSH   HL   
1122   11 00 00               LD   DE,0   
1125   B7                     OR   A   
1126   ED 52                  SBC   HL,DE   
1128   7D                     LD   A,L   
1129   B4                     OR   H   
112A   CA 90 11               JP   Z,expectM_3005S27   
112D   CD 7A 0F               CALL   printStr   
1130   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 72 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 65 00 .CSTR   "Code: ","0 10 1 /rg \\a{%a.} /fe"   
114D   CD 7A 0F               CALL   printStr   
1150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
115F   21 00 00               LD   hl,0   
1162   E5                     PUSH   hl   
1163   E5                     PUSH   hl   
1164   CD 77 10               CALL   run   
1167   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
116E   CD 7A 0F               CALL   printStr   
1171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
117E   E1                     POP   hl   
117F   E5                     PUSH   hl   
1180   E5                     PUSH   hl   
1181   CD 77 10               CALL   run   
1184   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
118F   76                     HALT      
1190                EXPECTM_3005S27:      
1190   E1                     POP   HL   
1191                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1191                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1191                             ; test "[1 2 3].a", 0
1191                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1191                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1191                             ; test "/hx/bm$1234.",0
1191                             ; test "/bm257.",0
1191                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1191                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1191                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1191                             ; test "0 x = 2 x + = x .", false
1191                             ; test "3 1 <<", 6
1191                             ; test "10 1 >>", 5
1191                             ; test "3x= 1 x <<= x", 6
1191                             ; test "10x= 1 x >>= x", 5
1191                             ; call printStr
1191                             ; .cstr "Done!"
1191                             ; HALT
1191                          ;*Macro unroll:  test "/f", false
1191   31 00 53               LD   SP,STACK   
1194   CD AE 0F               CALL   coldInit   
1197   CD CC 51               CALL   execStr   
119A   2F 66 00               DB   "/f",0   
119D   E1                     POP   HL   
119E   E5                     PUSH   HL   
119F   11 00 00               LD   DE,false   
11A2   B7                     OR   A   
11A3   ED 52                  SBC   HL,DE   
11A5   7D                     LD   A,L   
11A6   B4                     OR   H   
11A7   CA F9 11               JP   Z,expectM_3026S53   
11AA   CD 7A 0F               CALL   printStr   
11AD   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11B6   CD 7A 0F               CALL   printStr   
11B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C8   21 00 00               LD   hl,false   
11CB   E5                     PUSH   hl   
11CC   E5                     PUSH   hl   
11CD   CD 77 10               CALL   run   
11D0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11D7   CD 7A 0F               CALL   printStr   
11DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E7   E1                     POP   hl   
11E8   E5                     PUSH   hl   
11E9   E5                     PUSH   hl   
11EA   CD 77 10               CALL   run   
11ED   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
11F8   76                     HALT      
11F9                EXPECTM_3026S53:      
11F9   E1                     POP   HL   
11FA                          ;*Macro unroll:  test "/t", true
11FA   31 00 53               LD   SP,STACK   
11FD   CD AE 0F               CALL   coldInit   
1200   CD CC 51               CALL   execStr   
1203   2F 74 00               DB   "/t",0   
1206   E1                     POP   HL   
1207   E5                     PUSH   HL   
1208   11 FF FF               LD   DE,true   
120B   B7                     OR   A   
120C   ED 52                  SBC   HL,DE   
120E   7D                     LD   A,L   
120F   B4                     OR   H   
1210   CA 62 12               JP   Z,expectM_3027S54   
1213   CD 7A 0F               CALL   printStr   
1216   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
121F   CD 7A 0F               CALL   printStr   
1222   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1231   21 FF FF               LD   hl,true   
1234   E5                     PUSH   hl   
1235   E5                     PUSH   hl   
1236   CD 77 10               CALL   run   
1239   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1240   CD 7A 0F               CALL   printStr   
1243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1250   E1                     POP   hl   
1251   E5                     PUSH   hl   
1252   E5                     PUSH   hl   
1253   CD 77 10               CALL   run   
1256   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1261   76                     HALT      
1262                EXPECTM_3027S54:      
1262   E1                     POP   HL   
1263                          ;*Macro unroll:  test "1", 1
1263   31 00 53               LD   SP,STACK   
1266   CD AE 0F               CALL   coldInit   
1269   CD CC 51               CALL   execStr   
126C   31 00                  DB   "1",0   
126E   E1                     POP   HL   
126F   E5                     PUSH   HL   
1270   11 01 00               LD   DE,1   
1273   B7                     OR   A   
1274   ED 52                  SBC   HL,DE   
1276   7D                     LD   A,L   
1277   B4                     OR   H   
1278   CA C9 12               JP   Z,expectM_3028S55   
127B   CD 7A 0F               CALL   printStr   
127E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1286   CD 7A 0F               CALL   printStr   
1289   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1298   21 01 00               LD   hl,1   
129B   E5                     PUSH   hl   
129C   E5                     PUSH   hl   
129D   CD 77 10               CALL   run   
12A0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12A7   CD 7A 0F               CALL   printStr   
12AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12B7   E1                     POP   hl   
12B8   E5                     PUSH   hl   
12B9   E5                     PUSH   hl   
12BA   CD 77 10               CALL   run   
12BD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12C8   76                     HALT      
12C9                EXPECTM_3028S55:      
12C9   E1                     POP   HL   
12CA                          ;*Macro unroll:  test "2", 2
12CA   31 00 53               LD   SP,STACK   
12CD   CD AE 0F               CALL   coldInit   
12D0   CD CC 51               CALL   execStr   
12D3   32 00                  DB   "2",0   
12D5   E1                     POP   HL   
12D6   E5                     PUSH   HL   
12D7   11 02 00               LD   DE,2   
12DA   B7                     OR   A   
12DB   ED 52                  SBC   HL,DE   
12DD   7D                     LD   A,L   
12DE   B4                     OR   H   
12DF   CA 30 13               JP   Z,expectM_3029S56   
12E2   CD 7A 0F               CALL   printStr   
12E5   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
12ED   CD 7A 0F               CALL   printStr   
12F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12FF   21 02 00               LD   hl,2   
1302   E5                     PUSH   hl   
1303   E5                     PUSH   hl   
1304   CD 77 10               CALL   run   
1307   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
130E   CD 7A 0F               CALL   printStr   
1311   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131E   E1                     POP   hl   
131F   E5                     PUSH   hl   
1320   E5                     PUSH   hl   
1321   CD 77 10               CALL   run   
1324   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
132F   76                     HALT      
1330                EXPECTM_3029S56:      
1330   E1                     POP   HL   
1331                          ;*Macro unroll:  test "1", 1
1331   31 00 53               LD   SP,STACK   
1334   CD AE 0F               CALL   coldInit   
1337   CD CC 51               CALL   execStr   
133A   31 00                  DB   "1",0   
133C   E1                     POP   HL   
133D   E5                     PUSH   HL   
133E   11 01 00               LD   DE,1   
1341   B7                     OR   A   
1342   ED 52                  SBC   HL,DE   
1344   7D                     LD   A,L   
1345   B4                     OR   H   
1346   CA 97 13               JP   Z,expectM_3030S57   
1349   CD 7A 0F               CALL   printStr   
134C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1354   CD 7A 0F               CALL   printStr   
1357   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1366   21 01 00               LD   hl,1   
1369   E5                     PUSH   hl   
136A   E5                     PUSH   hl   
136B   CD 77 10               CALL   run   
136E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1375   CD 7A 0F               CALL   printStr   
1378   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1385   E1                     POP   hl   
1386   E5                     PUSH   hl   
1387   E5                     PUSH   hl   
1388   CD 77 10               CALL   run   
138B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1396   76                     HALT      
1397                EXPECTM_3030S57:      
1397   E1                     POP   HL   
1398                          ;*Macro unroll:  test "0", 0
1398   31 00 53               LD   SP,STACK   
139B   CD AE 0F               CALL   coldInit   
139E   CD CC 51               CALL   execStr   
13A1   30 00                  DB   "0",0   
13A3   E1                     POP   HL   
13A4   E5                     PUSH   HL   
13A5   11 00 00               LD   DE,0   
13A8   B7                     OR   A   
13A9   ED 52                  SBC   HL,DE   
13AB   7D                     LD   A,L   
13AC   B4                     OR   H   
13AD   CA FE 13               JP   Z,expectM_3031S58   
13B0   CD 7A 0F               CALL   printStr   
13B3   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13BB   CD 7A 0F               CALL   printStr   
13BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13CD   21 00 00               LD   hl,0   
13D0   E5                     PUSH   hl   
13D1   E5                     PUSH   hl   
13D2   CD 77 10               CALL   run   
13D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13DC   CD 7A 0F               CALL   printStr   
13DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EC   E1                     POP   hl   
13ED   E5                     PUSH   hl   
13EE   E5                     PUSH   hl   
13EF   CD 77 10               CALL   run   
13F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13FD   76                     HALT      
13FE                EXPECTM_3031S58:      
13FE   E1                     POP   HL   
13FF                          ;*Macro unroll:  test "10", 10
13FF   31 00 53               LD   SP,STACK   
1402   CD AE 0F               CALL   coldInit   
1405   CD CC 51               CALL   execStr   
1408   31 30 00               DB   "10",0   
140B   E1                     POP   HL   
140C   E5                     PUSH   HL   
140D   11 0A 00               LD   DE,10   
1410   B7                     OR   A   
1411   ED 52                  SBC   HL,DE   
1413   7D                     LD   A,L   
1414   B4                     OR   H   
1415   CA 67 14               JP   Z,expectM_3032S59   
1418   CD 7A 0F               CALL   printStr   
141B   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1424   CD 7A 0F               CALL   printStr   
1427   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1436   21 0A 00               LD   hl,10   
1439   E5                     PUSH   hl   
143A   E5                     PUSH   hl   
143B   CD 77 10               CALL   run   
143E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1445   CD 7A 0F               CALL   printStr   
1448   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1455   E1                     POP   hl   
1456   E5                     PUSH   hl   
1457   E5                     PUSH   hl   
1458   CD 77 10               CALL   run   
145B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1466   76                     HALT      
1467                EXPECTM_3032S59:      
1467   E1                     POP   HL   
1468                          ;*Macro unroll:  test "123", 123
1468   31 00 53               LD   SP,STACK   
146B   CD AE 0F               CALL   coldInit   
146E   CD CC 51               CALL   execStr   
1471   31 32 33 00            DB   "123",0   
1475   E1                     POP   HL   
1476   E5                     PUSH   HL   
1477   11 7B 00               LD   DE,123   
147A   B7                     OR   A   
147B   ED 52                  SBC   HL,DE   
147D   7D                     LD   A,L   
147E   B4                     OR   H   
147F   CA D2 14               JP   Z,expectM_3033S60   
1482   CD 7A 0F               CALL   printStr   
1485   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
148F   CD 7A 0F               CALL   printStr   
1492   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A1   21 7B 00               LD   hl,123   
14A4   E5                     PUSH   hl   
14A5   E5                     PUSH   hl   
14A6   CD 77 10               CALL   run   
14A9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14B0   CD 7A 0F               CALL   printStr   
14B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C0   E1                     POP   hl   
14C1   E5                     PUSH   hl   
14C2   E5                     PUSH   hl   
14C3   CD 77 10               CALL   run   
14C6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14D1   76                     HALT      
14D2                EXPECTM_3033S60:      
14D2   E1                     POP   HL   
14D3                          ;*Macro unroll:  test "-1",-1
14D3   31 00 53               LD   SP,STACK   
14D6   CD AE 0F               CALL   coldInit   
14D9   CD CC 51               CALL   execStr   
14DC   2D 31 00               DB   "-1",0   
14DF   E1                     POP   HL   
14E0   E5                     PUSH   HL   
14E1   11 FF FF               LD   DE,-1   
14E4   B7                     OR   A   
14E5   ED 52                  SBC   HL,DE   
14E7   7D                     LD   A,L   
14E8   B4                     OR   H   
14E9   CA 3B 15               JP   Z,expectM_3034S61   
14EC   CD 7A 0F               CALL   printStr   
14EF   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14F8   CD 7A 0F               CALL   printStr   
14FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150A   21 FF FF               LD   hl,-1   
150D   E5                     PUSH   hl   
150E   E5                     PUSH   hl   
150F   CD 77 10               CALL   run   
1512   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1519   CD 7A 0F               CALL   printStr   
151C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1529   E1                     POP   hl   
152A   E5                     PUSH   hl   
152B   E5                     PUSH   hl   
152C   CD 77 10               CALL   run   
152F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
153A   76                     HALT      
153B                EXPECTM_3034S61:      
153B   E1                     POP   HL   
153C                          ;*Macro unroll:  test "-1/ab",1
153C   31 00 53               LD   SP,STACK   
153F   CD AE 0F               CALL   coldInit   
1542   CD CC 51               CALL   execStr   
1545   2D 31 2F 61 62 00      DB   "-1/ab",0   
154B   E1                     POP   HL   
154C   E5                     PUSH   HL   
154D   11 01 00               LD   DE,1   
1550   B7                     OR   A   
1551   ED 52                  SBC   HL,DE   
1553   7D                     LD   A,L   
1554   B4                     OR   H   
1555   CA AA 15               JP   Z,expectM_3035S62   
1558   CD 7A 0F               CALL   printStr   
155B   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
1567   CD 7A 0F               CALL   printStr   
156A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1579   21 01 00               LD   hl,1   
157C   E5                     PUSH   hl   
157D   E5                     PUSH   hl   
157E   CD 77 10               CALL   run   
1581   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1588   CD 7A 0F               CALL   printStr   
158B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1598   E1                     POP   hl   
1599   E5                     PUSH   hl   
159A   E5                     PUSH   hl   
159B   CD 77 10               CALL   run   
159E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15A9   76                     HALT      
15AA                EXPECTM_3035S62:      
15AA   E1                     POP   HL   
15AB                          ;*Macro unroll:  test "_a", $61
15AB   31 00 53               LD   SP,STACK   
15AE   CD AE 0F               CALL   coldInit   
15B1   CD CC 51               CALL   execStr   
15B4   5F 61 00               DB   "_a",0   
15B7   E1                     POP   HL   
15B8   E5                     PUSH   HL   
15B9   11 61 00               LD   DE,$61   
15BC   B7                     OR   A   
15BD   ED 52                  SBC   HL,DE   
15BF   7D                     LD   A,L   
15C0   B4                     OR   H   
15C1   CA 13 16               JP   Z,expectM_3036S63   
15C4   CD 7A 0F               CALL   printStr   
15C7   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
15D0   CD 7A 0F               CALL   printStr   
15D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15E2   21 61 00               LD   hl,$61   
15E5   E5                     PUSH   hl   
15E6   E5                     PUSH   hl   
15E7   CD 77 10               CALL   run   
15EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15F1   CD 7A 0F               CALL   printStr   
15F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1601   E1                     POP   hl   
1602   E5                     PUSH   hl   
1603   E5                     PUSH   hl   
1604   CD 77 10               CALL   run   
1607   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1612   76                     HALT      
1613                EXPECTM_3036S63:      
1613   E1                     POP   HL   
1614                          ;*Macro unroll:  test "__", $5F
1614   31 00 53               LD   SP,STACK   
1617   CD AE 0F               CALL   coldInit   
161A   CD CC 51               CALL   execStr   
161D   5F 5F 00               DB   "__",0   
1620   E1                     POP   HL   
1621   E5                     PUSH   HL   
1622   11 5F 00               LD   DE,$5F   
1625   B7                     OR   A   
1626   ED 52                  SBC   HL,DE   
1628   7D                     LD   A,L   
1629   B4                     OR   H   
162A   CA 7C 16               JP   Z,expectM_3037S64   
162D   CD 7A 0F               CALL   printStr   
1630   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1639   CD 7A 0F               CALL   printStr   
163C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164B   21 5F 00               LD   hl,$5F   
164E   E5                     PUSH   hl   
164F   E5                     PUSH   hl   
1650   CD 77 10               CALL   run   
1653   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
165A   CD 7A 0F               CALL   printStr   
165D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166A   E1                     POP   hl   
166B   E5                     PUSH   hl   
166C   E5                     PUSH   hl   
166D   CD 77 10               CALL   run   
1670   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
167B   76                     HALT      
167C                EXPECTM_3037S64:      
167C   E1                     POP   HL   
167D                          ;*Macro unroll:  test "$10", $10
167D   31 00 53               LD   SP,STACK   
1680   CD AE 0F               CALL   coldInit   
1683   CD CC 51               CALL   execStr   
1686   24 31 30 00            DB   "$10",0   
168A   E1                     POP   HL   
168B   E5                     PUSH   HL   
168C   11 10 00               LD   DE,$10   
168F   B7                     OR   A   
1690   ED 52                  SBC   HL,DE   
1692   7D                     LD   A,L   
1693   B4                     OR   H   
1694   CA E7 16               JP   Z,expectM_3038S65   
1697   CD 7A 0F               CALL   printStr   
169A   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16A4   CD 7A 0F               CALL   printStr   
16A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16B6   21 10 00               LD   hl,$10   
16B9   E5                     PUSH   hl   
16BA   E5                     PUSH   hl   
16BB   CD 77 10               CALL   run   
16BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16C5   CD 7A 0F               CALL   printStr   
16C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D5   E1                     POP   hl   
16D6   E5                     PUSH   hl   
16D7   E5                     PUSH   hl   
16D8   CD 77 10               CALL   run   
16DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16E6   76                     HALT      
16E7                EXPECTM_3038S65:      
16E7   E1                     POP   HL   
16E8                          ;*Macro unroll:  test "$FF", $FF
16E8   31 00 53               LD   SP,STACK   
16EB   CD AE 0F               CALL   coldInit   
16EE   CD CC 51               CALL   execStr   
16F1   24 46 46 00            DB   "$FF",0   
16F5   E1                     POP   HL   
16F6   E5                     PUSH   HL   
16F7   11 FF 00               LD   DE,$FF   
16FA   B7                     OR   A   
16FB   ED 52                  SBC   HL,DE   
16FD   7D                     LD   A,L   
16FE   B4                     OR   H   
16FF   CA 52 17               JP   Z,expectM_3039S66   
1702   CD 7A 0F               CALL   printStr   
1705   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
170F   CD 7A 0F               CALL   printStr   
1712   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1721   21 FF 00               LD   hl,$FF   
1724   E5                     PUSH   hl   
1725   E5                     PUSH   hl   
1726   CD 77 10               CALL   run   
1729   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1730   CD 7A 0F               CALL   printStr   
1733   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1740   E1                     POP   hl   
1741   E5                     PUSH   hl   
1742   E5                     PUSH   hl   
1743   CD 77 10               CALL   run   
1746   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1751   76                     HALT      
1752                EXPECTM_3039S66:      
1752   E1                     POP   HL   
1753                          ;*Macro unroll:  test "-1 2 +",1
1753   31 00 53               LD   SP,STACK   
1756   CD AE 0F               CALL   coldInit   
1759   CD CC 51               CALL   execStr   
175C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1763   E1                     POP   HL   
1764   E5                     PUSH   HL   
1765   11 01 00               LD   DE,1   
1768   B7                     OR   A   
1769   ED 52                  SBC   HL,DE   
176B   7D                     LD   A,L   
176C   B4                     OR   H   
176D   CA C3 17               JP   Z,expectM_3040S67   
1770   CD 7A 0F               CALL   printStr   
1773   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1780   CD 7A 0F               CALL   printStr   
1783   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1792   21 01 00               LD   hl,1   
1795   E5                     PUSH   hl   
1796   E5                     PUSH   hl   
1797   CD 77 10               CALL   run   
179A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17A1   CD 7A 0F               CALL   printStr   
17A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B1   E1                     POP   hl   
17B2   E5                     PUSH   hl   
17B3   E5                     PUSH   hl   
17B4   CD 77 10               CALL   run   
17B7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17C2   76                     HALT      
17C3                EXPECTM_3040S67:      
17C3   E1                     POP   HL   
17C4                          ;*Macro unroll:  test "-1 1 +",0
17C4   31 00 53               LD   SP,STACK   
17C7   CD AE 0F               CALL   coldInit   
17CA   CD CC 51               CALL   execStr   
17CD   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17D4   E1                     POP   HL   
17D5   E5                     PUSH   HL   
17D6   11 00 00               LD   DE,0   
17D9   B7                     OR   A   
17DA   ED 52                  SBC   HL,DE   
17DC   7D                     LD   A,L   
17DD   B4                     OR   H   
17DE   CA 34 18               JP   Z,expectM_3041S68   
17E1   CD 7A 0F               CALL   printStr   
17E4   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17F1   CD 7A 0F               CALL   printStr   
17F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1803   21 00 00               LD   hl,0   
1806   E5                     PUSH   hl   
1807   E5                     PUSH   hl   
1808   CD 77 10               CALL   run   
180B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1812   CD 7A 0F               CALL   printStr   
1815   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1822   E1                     POP   hl   
1823   E5                     PUSH   hl   
1824   E5                     PUSH   hl   
1825   CD 77 10               CALL   run   
1828   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1833   76                     HALT      
1834                EXPECTM_3041S68:      
1834   E1                     POP   HL   
1835                          ;*Macro unroll:  test "1 2 +", 3
1835   31 00 53               LD   SP,STACK   
1838   CD AE 0F               CALL   coldInit   
183B   CD CC 51               CALL   execStr   
183E   31 20 32 20 2B 00      DB   "1 2 +",0   
1844   E1                     POP   HL   
1845   E5                     PUSH   HL   
1846   11 03 00               LD   DE,3   
1849   B7                     OR   A   
184A   ED 52                  SBC   HL,DE   
184C   7D                     LD   A,L   
184D   B4                     OR   H   
184E   CA A3 18               JP   Z,expectM_3042S69   
1851   CD 7A 0F               CALL   printStr   
1854   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1860   CD 7A 0F               CALL   printStr   
1863   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1872   21 03 00               LD   hl,3   
1875   E5                     PUSH   hl   
1876   E5                     PUSH   hl   
1877   CD 77 10               CALL   run   
187A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1881   CD 7A 0F               CALL   printStr   
1884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1891   E1                     POP   hl   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 77 10               CALL   run   
1897   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18A2   76                     HALT      
18A3                EXPECTM_3042S69:      
18A3   E1                     POP   HL   
18A4                          ;*Macro unroll:  test "4 1 2 +", 3
18A4   31 00 53               LD   SP,STACK   
18A7   CD AE 0F               CALL   coldInit   
18AA   CD CC 51               CALL   execStr   
18AD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18B5   E1                     POP   HL   
18B6   E5                     PUSH   HL   
18B7   11 03 00               LD   DE,3   
18BA   B7                     OR   A   
18BB   ED 52                  SBC   HL,DE   
18BD   7D                     LD   A,L   
18BE   B4                     OR   H   
18BF   CA 16 19               JP   Z,expectM_3043S70   
18C2   CD 7A 0F               CALL   printStr   
18C5   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18D3   CD 7A 0F               CALL   printStr   
18D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E5   21 03 00               LD   hl,3   
18E8   E5                     PUSH   hl   
18E9   E5                     PUSH   hl   
18EA   CD 77 10               CALL   run   
18ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18F4   CD 7A 0F               CALL   printStr   
18F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1904   E1                     POP   hl   
1905   E5                     PUSH   hl   
1906   E5                     PUSH   hl   
1907   CD 77 10               CALL   run   
190A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1915   76                     HALT      
1916                EXPECTM_3043S70:      
1916   E1                     POP   HL   
1917                          ;*Macro unroll:  test "123 456 +", 123+456
1917   31 00 53               LD   SP,STACK   
191A   CD AE 0F               CALL   coldInit   
191D   CD CC 51               CALL   execStr   
1920   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
192A   E1                     POP   HL   
192B   E5                     PUSH   HL   
192C   11 43 02               LD   DE,123+456   
192F   B7                     OR   A   
1930   ED 52                  SBC   HL,DE   
1932   7D                     LD   A,L   
1933   B4                     OR   H   
1934   CA 8D 19               JP   Z,expectM_3044S71   
1937   CD 7A 0F               CALL   printStr   
193A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
194A   CD 7A 0F               CALL   printStr   
194D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195C   21 43 02               LD   hl,123+456   
195F   E5                     PUSH   hl   
1960   E5                     PUSH   hl   
1961   CD 77 10               CALL   run   
1964   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
196B   CD 7A 0F               CALL   printStr   
196E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197B   E1                     POP   hl   
197C   E5                     PUSH   hl   
197D   E5                     PUSH   hl   
197E   CD 77 10               CALL   run   
1981   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
198C   76                     HALT      
198D                EXPECTM_3044S71:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "64 128 +", 64+128
198E   31 00 53               LD   SP,STACK   
1991   CD AE 0F               CALL   coldInit   
1994   CD CC 51               CALL   execStr   
1997   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19A0   E1                     POP   HL   
19A1   E5                     PUSH   HL   
19A2   11 C0 00               LD   DE,64+128   
19A5   B7                     OR   A   
19A6   ED 52                  SBC   HL,DE   
19A8   7D                     LD   A,L   
19A9   B4                     OR   H   
19AA   CA 02 1A               JP   Z,expectM_3045S72   
19AD   CD 7A 0F               CALL   printStr   
19B0   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19BF   CD 7A 0F               CALL   printStr   
19C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D1   21 C0 00               LD   hl,64+128   
19D4   E5                     PUSH   hl   
19D5   E5                     PUSH   hl   
19D6   CD 77 10               CALL   run   
19D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19E0   CD 7A 0F               CALL   printStr   
19E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F0   E1                     POP   hl   
19F1   E5                     PUSH   hl   
19F2   E5                     PUSH   hl   
19F3   CD 77 10               CALL   run   
19F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A01   76                     HALT      
1A02                EXPECTM_3045S72:      
1A02   E1                     POP   HL   
1A03                          ;*Macro unroll:  test "1 2 +", 3
1A03   31 00 53               LD   SP,STACK   
1A06   CD AE 0F               CALL   coldInit   
1A09   CD CC 51               CALL   execStr   
1A0C   31 20 32 20 2B 00      DB   "1 2 +",0   
1A12   E1                     POP   HL   
1A13   E5                     PUSH   HL   
1A14   11 03 00               LD   DE,3   
1A17   B7                     OR   A   
1A18   ED 52                  SBC   HL,DE   
1A1A   7D                     LD   A,L   
1A1B   B4                     OR   H   
1A1C   CA 71 1A               JP   Z,expectM_3046S73   
1A1F   CD 7A 0F               CALL   printStr   
1A22   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A2E   CD 7A 0F               CALL   printStr   
1A31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A40   21 03 00               LD   hl,3   
1A43   E5                     PUSH   hl   
1A44   E5                     PUSH   hl   
1A45   CD 77 10               CALL   run   
1A48   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A4F   CD 7A 0F               CALL   printStr   
1A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5F   E1                     POP   hl   
1A60   E5                     PUSH   hl   
1A61   E5                     PUSH   hl   
1A62   CD 77 10               CALL   run   
1A65   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A70   76                     HALT      
1A71                EXPECTM_3046S73:      
1A71   E1                     POP   HL   
1A72                          ;*Macro unroll:  test "1a= a++ a",2
1A72   31 00 53               LD   SP,STACK   
1A75   CD AE 0F               CALL   coldInit   
1A78   CD CC 51               CALL   execStr   
1A7B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A85   E1                     POP   HL   
1A86   E5                     PUSH   HL   
1A87   11 02 00               LD   DE,2   
1A8A   B7                     OR   A   
1A8B   ED 52                  SBC   HL,DE   
1A8D   7D                     LD   A,L   
1A8E   B4                     OR   H   
1A8F   CA E8 1A               JP   Z,expectM_3047S74   
1A92   CD 7A 0F               CALL   printStr   
1A95   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AA5   CD 7A 0F               CALL   printStr   
1AA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB7   21 02 00               LD   hl,2   
1ABA   E5                     PUSH   hl   
1ABB   E5                     PUSH   hl   
1ABC   CD 77 10               CALL   run   
1ABF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AC6   CD 7A 0F               CALL   printStr   
1AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD6   E1                     POP   hl   
1AD7   E5                     PUSH   hl   
1AD8   E5                     PUSH   hl   
1AD9   CD 77 10               CALL   run   
1ADC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AE7   76                     HALT      
1AE8                EXPECTM_3047S74:      
1AE8   E1                     POP   HL   
1AE9                          ;*Macro unroll:  test "-1 -1 -",0
1AE9   31 00 53               LD   SP,STACK   
1AEC   CD AE 0F               CALL   coldInit   
1AEF   CD CC 51               CALL   execStr   
1AF2   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1AFA   E1                     POP   HL   
1AFB   E5                     PUSH   HL   
1AFC   11 00 00               LD   DE,0   
1AFF   B7                     OR   A   
1B00   ED 52                  SBC   HL,DE   
1B02   7D                     LD   A,L   
1B03   B4                     OR   H   
1B04   CA 5B 1B               JP   Z,expectM_3048S75   
1B07   CD 7A 0F               CALL   printStr   
1B0A   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B18   CD 7A 0F               CALL   printStr   
1B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B2A   21 00 00               LD   hl,0   
1B2D   E5                     PUSH   hl   
1B2E   E5                     PUSH   hl   
1B2F   CD 77 10               CALL   run   
1B32   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B39   CD 7A 0F               CALL   printStr   
1B3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B49   E1                     POP   hl   
1B4A   E5                     PUSH   hl   
1B4B   E5                     PUSH   hl   
1B4C   CD 77 10               CALL   run   
1B4F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B5A   76                     HALT      
1B5B                EXPECTM_3048S75:      
1B5B   E1                     POP   HL   
1B5C                          ;*Macro unroll:  test "5 3 -", 2
1B5C   31 00 53               LD   SP,STACK   
1B5F   CD AE 0F               CALL   coldInit   
1B62   CD CC 51               CALL   execStr   
1B65   35 20 33 20 2D 00      DB   "5 3 -",0   
1B6B   E1                     POP   HL   
1B6C   E5                     PUSH   HL   
1B6D   11 02 00               LD   DE,2   
1B70   B7                     OR   A   
1B71   ED 52                  SBC   HL,DE   
1B73   7D                     LD   A,L   
1B74   B4                     OR   H   
1B75   CA CA 1B               JP   Z,expectM_3049S76   
1B78   CD 7A 0F               CALL   printStr   
1B7B   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B87   CD 7A 0F               CALL   printStr   
1B8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B99   21 02 00               LD   hl,2   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD 77 10               CALL   run   
1BA1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BA8   CD 7A 0F               CALL   printStr   
1BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB8   E1                     POP   hl   
1BB9   E5                     PUSH   hl   
1BBA   E5                     PUSH   hl   
1BBB   CD 77 10               CALL   run   
1BBE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BC9   76                     HALT      
1BCA                EXPECTM_3049S76:      
1BCA   E1                     POP   HL   
1BCB                          ;*Macro unroll:  test "2 1 -",1
1BCB   31 00 53               LD   SP,STACK   
1BCE   CD AE 0F               CALL   coldInit   
1BD1   CD CC 51               CALL   execStr   
1BD4   32 20 31 20 2D 00      DB   "2 1 -",0   
1BDA   E1                     POP   HL   
1BDB   E5                     PUSH   HL   
1BDC   11 01 00               LD   DE,1   
1BDF   B7                     OR   A   
1BE0   ED 52                  SBC   HL,DE   
1BE2   7D                     LD   A,L   
1BE3   B4                     OR   H   
1BE4   CA 39 1C               JP   Z,expectM_3050S77   
1BE7   CD 7A 0F               CALL   printStr   
1BEA   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1BF6   CD 7A 0F               CALL   printStr   
1BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C08   21 01 00               LD   hl,1   
1C0B   E5                     PUSH   hl   
1C0C   E5                     PUSH   hl   
1C0D   CD 77 10               CALL   run   
1C10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C17   CD 7A 0F               CALL   printStr   
1C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C27   E1                     POP   hl   
1C28   E5                     PUSH   hl   
1C29   E5                     PUSH   hl   
1C2A   CD 77 10               CALL   run   
1C2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C38   76                     HALT      
1C39                EXPECTM_3050S77:      
1C39   E1                     POP   HL   
1C3A                          ;*Macro unroll:  test "3a= a-- a",2
1C3A   31 00 53               LD   SP,STACK   
1C3D   CD AE 0F               CALL   coldInit   
1C40   CD CC 51               CALL   execStr   
1C43   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C4D   E1                     POP   HL   
1C4E   E5                     PUSH   HL   
1C4F   11 02 00               LD   DE,2   
1C52   B7                     OR   A   
1C53   ED 52                  SBC   HL,DE   
1C55   7D                     LD   A,L   
1C56   B4                     OR   H   
1C57   CA B0 1C               JP   Z,expectM_3051S78   
1C5A   CD 7A 0F               CALL   printStr   
1C5D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C6D   CD 7A 0F               CALL   printStr   
1C70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7F   21 02 00               LD   hl,2   
1C82   E5                     PUSH   hl   
1C83   E5                     PUSH   hl   
1C84   CD 77 10               CALL   run   
1C87   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C8E   CD 7A 0F               CALL   printStr   
1C91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C9E   E1                     POP   hl   
1C9F   E5                     PUSH   hl   
1CA0   E5                     PUSH   hl   
1CA1   CD 77 10               CALL   run   
1CA4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CAF   76                     HALT      
1CB0                EXPECTM_3051S78:      
1CB0   E1                     POP   HL   
1CB1                          ;*Macro unroll:  test "3 5 &", 1
1CB1   31 00 53               LD   SP,STACK   
1CB4   CD AE 0F               CALL   coldInit   
1CB7   CD CC 51               CALL   execStr   
1CBA   33 20 35 20 26 00      DB   "3 5 &",0   
1CC0   E1                     POP   HL   
1CC1   E5                     PUSH   HL   
1CC2   11 01 00               LD   DE,1   
1CC5   B7                     OR   A   
1CC6   ED 52                  SBC   HL,DE   
1CC8   7D                     LD   A,L   
1CC9   B4                     OR   H   
1CCA   CA 1F 1D               JP   Z,expectM_3052S79   
1CCD   CD 7A 0F               CALL   printStr   
1CD0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CDC   CD 7A 0F               CALL   printStr   
1CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEE   21 01 00               LD   hl,1   
1CF1   E5                     PUSH   hl   
1CF2   E5                     PUSH   hl   
1CF3   CD 77 10               CALL   run   
1CF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CFD   CD 7A 0F               CALL   printStr   
1D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0D   E1                     POP   hl   
1D0E   E5                     PUSH   hl   
1D0F   E5                     PUSH   hl   
1D10   CD 77 10               CALL   run   
1D13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D1E   76                     HALT      
1D1F                EXPECTM_3052S79:      
1D1F   E1                     POP   HL   
1D20                          ;*Macro unroll:  test "3 5 |", 7
1D20   31 00 53               LD   SP,STACK   
1D23   CD AE 0F               CALL   coldInit   
1D26   CD CC 51               CALL   execStr   
1D29   33 20 35 20 7C 00      DB   "3 5 |",0   
1D2F   E1                     POP   HL   
1D30   E5                     PUSH   HL   
1D31   11 07 00               LD   DE,7   
1D34   B7                     OR   A   
1D35   ED 52                  SBC   HL,DE   
1D37   7D                     LD   A,L   
1D38   B4                     OR   H   
1D39   CA 8E 1D               JP   Z,expectM_3053S80   
1D3C   CD 7A 0F               CALL   printStr   
1D3F   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D4B   CD 7A 0F               CALL   printStr   
1D4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5D   21 07 00               LD   hl,7   
1D60   E5                     PUSH   hl   
1D61   E5                     PUSH   hl   
1D62   CD 77 10               CALL   run   
1D65   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D6C   CD 7A 0F               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 77 10               CALL   run   
1D82   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D8D   76                     HALT      
1D8E                EXPECTM_3053S80:      
1D8E   E1                     POP   HL   
1D8F                          ;*Macro unroll:  test "3 5 /x", 6
1D8F   31 00 53               LD   SP,STACK   
1D92   CD AE 0F               CALL   coldInit   
1D95   CD CC 51               CALL   execStr   
1D98   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D9F   E1                     POP   HL   
1DA0   E5                     PUSH   HL   
1DA1   11 06 00               LD   DE,6   
1DA4   B7                     OR   A   
1DA5   ED 52                  SBC   HL,DE   
1DA7   7D                     LD   A,L   
1DA8   B4                     OR   H   
1DA9   CA FF 1D               JP   Z,expectM_3054S81   
1DAC   CD 7A 0F               CALL   printStr   
1DAF   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DBC   CD 7A 0F               CALL   printStr   
1DBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DCE   21 06 00               LD   hl,6   
1DD1   E5                     PUSH   hl   
1DD2   E5                     PUSH   hl   
1DD3   CD 77 10               CALL   run   
1DD6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DDD   CD 7A 0F               CALL   printStr   
1DE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DED   E1                     POP   hl   
1DEE   E5                     PUSH   hl   
1DEF   E5                     PUSH   hl   
1DF0   CD 77 10               CALL   run   
1DF3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DFE   76                     HALT      
1DFF                EXPECTM_3054S81:      
1DFF   E1                     POP   HL   
1E00                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E00   31 00 53               LD   SP,STACK   
1E03   CD AE 0F               CALL   coldInit   
1E06   CD CC 51               CALL   execStr   
1E09   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E18   E1                     POP   HL   
1E19   E5                     PUSH   HL   
1E1A   11 06 00               LD   DE,6   
1E1D   B7                     OR   A   
1E1E   ED 52                  SBC   HL,DE   
1E20   7D                     LD   A,L   
1E21   B4                     OR   H   
1E22   CA 80 1E               JP   Z,expectM_3055S82   
1E25   CD 7A 0F               CALL   printStr   
1E28   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E3D   CD 7A 0F               CALL   printStr   
1E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4F   21 06 00               LD   hl,6   
1E52   E5                     PUSH   hl   
1E53   E5                     PUSH   hl   
1E54   CD 77 10               CALL   run   
1E57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E5E   CD 7A 0F               CALL   printStr   
1E61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6E   E1                     POP   hl   
1E6F   E5                     PUSH   hl   
1E70   E5                     PUSH   hl   
1E71   CD 77 10               CALL   run   
1E74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E7F   76                     HALT      
1E80                EXPECTM_3055S82:      
1E80   E1                     POP   HL   
1E81                          ;*Macro unroll:  test "0 !", true
1E81   31 00 53               LD   SP,STACK   
1E84   CD AE 0F               CALL   coldInit   
1E87   CD CC 51               CALL   execStr   
1E8A   30 20 21 00            DB   "0 !",0   
1E8E   E1                     POP   HL   
1E8F   E5                     PUSH   HL   
1E90   11 FF FF               LD   DE,true   
1E93   B7                     OR   A   
1E94   ED 52                  SBC   HL,DE   
1E96   7D                     LD   A,L   
1E97   B4                     OR   H   
1E98   CA EB 1E               JP   Z,expectM_3056S83   
1E9B   CD 7A 0F               CALL   printStr   
1E9E   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1EA8   CD 7A 0F               CALL   printStr   
1EAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EBA   21 FF FF               LD   hl,true   
1EBD   E5                     PUSH   hl   
1EBE   E5                     PUSH   hl   
1EBF   CD 77 10               CALL   run   
1EC2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EC9   CD 7A 0F               CALL   printStr   
1ECC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED9   E1                     POP   hl   
1EDA   E5                     PUSH   hl   
1EDB   E5                     PUSH   hl   
1EDC   CD 77 10               CALL   run   
1EDF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EEA   76                     HALT      
1EEB                EXPECTM_3056S83:      
1EEB   E1                     POP   HL   
1EEC                          ;*Macro unroll:  test "2 !", false
1EEC   31 00 53               LD   SP,STACK   
1EEF   CD AE 0F               CALL   coldInit   
1EF2   CD CC 51               CALL   execStr   
1EF5   32 20 21 00            DB   "2 !",0   
1EF9   E1                     POP   HL   
1EFA   E5                     PUSH   HL   
1EFB   11 00 00               LD   DE,false   
1EFE   B7                     OR   A   
1EFF   ED 52                  SBC   HL,DE   
1F01   7D                     LD   A,L   
1F02   B4                     OR   H   
1F03   CA 56 1F               JP   Z,expectM_3057S84   
1F06   CD 7A 0F               CALL   printStr   
1F09   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1F13   CD 7A 0F               CALL   printStr   
1F16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F25   21 00 00               LD   hl,false   
1F28   E5                     PUSH   hl   
1F29   E5                     PUSH   hl   
1F2A   CD 77 10               CALL   run   
1F2D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F34   CD 7A 0F               CALL   printStr   
1F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F44   E1                     POP   hl   
1F45   E5                     PUSH   hl   
1F46   E5                     PUSH   hl   
1F47   CD 77 10               CALL   run   
1F4A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F55   76                     HALT      
1F56                EXPECTM_3057S84:      
1F56   E1                     POP   HL   
1F57                          ;*Macro unroll:  test "0 !!", false
1F57   31 00 53               LD   SP,STACK   
1F5A   CD AE 0F               CALL   coldInit   
1F5D   CD CC 51               CALL   execStr   
1F60   30 20 21 21 00         DB   "0 !!",0   
1F65   E1                     POP   HL   
1F66   E5                     PUSH   HL   
1F67   11 00 00               LD   DE,false   
1F6A   B7                     OR   A   
1F6B   ED 52                  SBC   HL,DE   
1F6D   7D                     LD   A,L   
1F6E   B4                     OR   H   
1F6F   CA C3 1F               JP   Z,expectM_3058S85   
1F72   CD 7A 0F               CALL   printStr   
1F75   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1F80   CD 7A 0F               CALL   printStr   
1F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F92   21 00 00               LD   hl,false   
1F95   E5                     PUSH   hl   
1F96   E5                     PUSH   hl   
1F97   CD 77 10               CALL   run   
1F9A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FA1   CD 7A 0F               CALL   printStr   
1FA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB1   E1                     POP   hl   
1FB2   E5                     PUSH   hl   
1FB3   E5                     PUSH   hl   
1FB4   CD 77 10               CALL   run   
1FB7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FC2   76                     HALT      
1FC3                EXPECTM_3058S85:      
1FC3   E1                     POP   HL   
1FC4                          ;*Macro unroll:  test "2 !!", true
1FC4   31 00 53               LD   SP,STACK   
1FC7   CD AE 0F               CALL   coldInit   
1FCA   CD CC 51               CALL   execStr   
1FCD   32 20 21 21 00         DB   "2 !!",0   
1FD2   E1                     POP   HL   
1FD3   E5                     PUSH   HL   
1FD4   11 FF FF               LD   DE,true   
1FD7   B7                     OR   A   
1FD8   ED 52                  SBC   HL,DE   
1FDA   7D                     LD   A,L   
1FDB   B4                     OR   H   
1FDC   CA 30 20               JP   Z,expectM_3059S86   
1FDF   CD 7A 0F               CALL   printStr   
1FE2   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1FED   CD 7A 0F               CALL   printStr   
1FF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FFF   21 FF FF               LD   hl,true   
2002   E5                     PUSH   hl   
2003   E5                     PUSH   hl   
2004   CD 77 10               CALL   run   
2007   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
200E   CD 7A 0F               CALL   printStr   
2011   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
201E   E1                     POP   hl   
201F   E5                     PUSH   hl   
2020   E5                     PUSH   hl   
2021   CD 77 10               CALL   run   
2024   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
202F   76                     HALT      
2030                EXPECTM_3059S86:      
2030   E1                     POP   HL   
2031                          ;*Macro unroll:  test "2 3 *", 6
2031   31 00 53               LD   SP,STACK   
2034   CD AE 0F               CALL   coldInit   
2037   CD CC 51               CALL   execStr   
203A   32 20 33 20 2A 00      DB   "2 3 *",0   
2040   E1                     POP   HL   
2041   E5                     PUSH   HL   
2042   11 06 00               LD   DE,6   
2045   B7                     OR   A   
2046   ED 52                  SBC   HL,DE   
2048   7D                     LD   A,L   
2049   B4                     OR   H   
204A   CA 9F 20               JP   Z,expectM_3060S87   
204D   CD 7A 0F               CALL   printStr   
2050   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
205C   CD 7A 0F               CALL   printStr   
205F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
206E   21 06 00               LD   hl,6   
2071   E5                     PUSH   hl   
2072   E5                     PUSH   hl   
2073   CD 77 10               CALL   run   
2076   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
207D   CD 7A 0F               CALL   printStr   
2080   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
208D   E1                     POP   hl   
208E   E5                     PUSH   hl   
208F   E5                     PUSH   hl   
2090   CD 77 10               CALL   run   
2093   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
209E   76                     HALT      
209F                EXPECTM_3060S87:      
209F   E1                     POP   HL   
20A0                          ;*Macro unroll:  test "1 2 3 + *", 5
20A0   31 00 53               LD   SP,STACK   
20A3   CD AE 0F               CALL   coldInit   
20A6   CD CC 51               CALL   execStr   
20A9   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
20B3   E1                     POP   HL   
20B4   E5                     PUSH   HL   
20B5   11 05 00               LD   DE,5   
20B8   B7                     OR   A   
20B9   ED 52                  SBC   HL,DE   
20BB   7D                     LD   A,L   
20BC   B4                     OR   H   
20BD   CA 16 21               JP   Z,expectM_3061S88   
20C0   CD 7A 0F               CALL   printStr   
20C3   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
20D3   CD 7A 0F               CALL   printStr   
20D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E5   21 05 00               LD   hl,5   
20E8   E5                     PUSH   hl   
20E9   E5                     PUSH   hl   
20EA   CD 77 10               CALL   run   
20ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20F4   CD 7A 0F               CALL   printStr   
20F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2104   E1                     POP   hl   
2105   E5                     PUSH   hl   
2106   E5                     PUSH   hl   
2107   CD 77 10               CALL   run   
210A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2115   76                     HALT      
2116                EXPECTM_3061S88:      
2116   E1                     POP   HL   
2117                          ;*Macro unroll:  test "7 3 /", 2
2117   31 00 53               LD   SP,STACK   
211A   CD AE 0F               CALL   coldInit   
211D   CD CC 51               CALL   execStr   
2120   37 20 33 20 2F 00      DB   "7 3 /",0   
2126   E1                     POP   HL   
2127   E5                     PUSH   HL   
2128   11 02 00               LD   DE,2   
212B   B7                     OR   A   
212C   ED 52                  SBC   HL,DE   
212E   7D                     LD   A,L   
212F   B4                     OR   H   
2130   CA 85 21               JP   Z,expectM_3062S89   
2133   CD 7A 0F               CALL   printStr   
2136   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2142   CD 7A 0F               CALL   printStr   
2145   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2154   21 02 00               LD   hl,2   
2157   E5                     PUSH   hl   
2158   E5                     PUSH   hl   
2159   CD 77 10               CALL   run   
215C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2163   CD 7A 0F               CALL   printStr   
2166   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2173   E1                     POP   hl   
2174   E5                     PUSH   hl   
2175   E5                     PUSH   hl   
2176   CD 77 10               CALL   run   
2179   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2184   76                     HALT      
2185                EXPECTM_3062S89:      
2185   E1                     POP   HL   
2186                          ;*Macro unroll:  test "100a= 1a+= a", 101
2186   31 00 53               LD   SP,STACK   
2189   CD AE 0F               CALL   coldInit   
218C   CD CC 51               CALL   execStr   
218F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
219C   E1                     POP   HL   
219D   E5                     PUSH   HL   
219E   11 65 00               LD   DE,101   
21A1   B7                     OR   A   
21A2   ED 52                  SBC   HL,DE   
21A4   7D                     LD   A,L   
21A5   B4                     OR   H   
21A6   CA 02 22               JP   Z,expectM_3063S90   
21A9   CD 7A 0F               CALL   printStr   
21AC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
21BF   CD 7A 0F               CALL   printStr   
21C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D1   21 65 00               LD   hl,101   
21D4   E5                     PUSH   hl   
21D5   E5                     PUSH   hl   
21D6   CD 77 10               CALL   run   
21D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21E0   CD 7A 0F               CALL   printStr   
21E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21F0   E1                     POP   hl   
21F1   E5                     PUSH   hl   
21F2   E5                     PUSH   hl   
21F3   CD 77 10               CALL   run   
21F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2201   76                     HALT      
2202                EXPECTM_3063S90:      
2202   E1                     POP   HL   
2203                          ;*Macro unroll:  test "100a= 1a-= a", 99
2203   31 00 53               LD   SP,STACK   
2206   CD AE 0F               CALL   coldInit   
2209   CD CC 51               CALL   execStr   
220C   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2219   E1                     POP   HL   
221A   E5                     PUSH   HL   
221B   11 63 00               LD   DE,99   
221E   B7                     OR   A   
221F   ED 52                  SBC   HL,DE   
2221   7D                     LD   A,L   
2222   B4                     OR   H   
2223   CA 7F 22               JP   Z,expectM_3064S91   
2226   CD 7A 0F               CALL   printStr   
2229   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
223C   CD 7A 0F               CALL   printStr   
223F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
224E   21 63 00               LD   hl,99   
2251   E5                     PUSH   hl   
2252   E5                     PUSH   hl   
2253   CD 77 10               CALL   run   
2256   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
225D   CD 7A 0F               CALL   printStr   
2260   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226D   E1                     POP   hl   
226E   E5                     PUSH   hl   
226F   E5                     PUSH   hl   
2270   CD 77 10               CALL   run   
2273   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
227E   76                     HALT      
227F                EXPECTM_3064S91:      
227F   E1                     POP   HL   
2280                          ;*Macro unroll:  test "100a= 2a*= a", 200
2280   31 00 53               LD   SP,STACK   
2283   CD AE 0F               CALL   coldInit   
2286   CD CC 51               CALL   execStr   
2289   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2296   E1                     POP   HL   
2297   E5                     PUSH   HL   
2298   11 C8 00               LD   DE,200   
229B   B7                     OR   A   
229C   ED 52                  SBC   HL,DE   
229E   7D                     LD   A,L   
229F   B4                     OR   H   
22A0   CA FC 22               JP   Z,expectM_3065S92   
22A3   CD 7A 0F               CALL   printStr   
22A6   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
22B9   CD 7A 0F               CALL   printStr   
22BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22CB   21 C8 00               LD   hl,200   
22CE   E5                     PUSH   hl   
22CF   E5                     PUSH   hl   
22D0   CD 77 10               CALL   run   
22D3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22DA   CD 7A 0F               CALL   printStr   
22DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EA   E1                     POP   hl   
22EB   E5                     PUSH   hl   
22EC   E5                     PUSH   hl   
22ED   CD 77 10               CALL   run   
22F0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22FB   76                     HALT      
22FC                EXPECTM_3065S92:      
22FC   E1                     POP   HL   
22FD                          ;*Macro unroll:  test "100a= 2 a/= a", 50
22FD   31 00 53               LD   SP,STACK   
2300   CD AE 0F               CALL   coldInit   
2303   CD CC 51               CALL   execStr   
2306   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
2314   E1                     POP   HL   
2315   E5                     PUSH   HL   
2316   11 32 00               LD   DE,50   
2319   B7                     OR   A   
231A   ED 52                  SBC   HL,DE   
231C   7D                     LD   A,L   
231D   B4                     OR   H   
231E   CA 7B 23               JP   Z,expectM_3066S93   
2321   CD 7A 0F               CALL   printStr   
2324   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2338   CD 7A 0F               CALL   printStr   
233B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234A   21 32 00               LD   hl,50   
234D   E5                     PUSH   hl   
234E   E5                     PUSH   hl   
234F   CD 77 10               CALL   run   
2352   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2359   CD 7A 0F               CALL   printStr   
235C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2369   E1                     POP   hl   
236A   E5                     PUSH   hl   
236B   E5                     PUSH   hl   
236C   CD 77 10               CALL   run   
236F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
237A   76                     HALT      
237B                EXPECTM_3066S93:      
237B   E1                     POP   HL   
237C                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
237C   31 00 53               LD   SP,STACK   
237F   CD AE 0F               CALL   coldInit   
2382   CD CC 51               CALL   execStr   
2385   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2395   E1                     POP   HL   
2396   E5                     PUSH   HL   
2397   11 05 00               LD   DE,5   
239A   B7                     OR   A   
239B   ED 52                  SBC   HL,DE   
239D   7D                     LD   A,L   
239E   B4                     OR   H   
239F   CA FE 23               JP   Z,expectM_3067S94   
23A2   CD 7A 0F               CALL   printStr   
23A5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
23BB   CD 7A 0F               CALL   printStr   
23BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23CD   21 05 00               LD   hl,5   
23D0   E5                     PUSH   hl   
23D1   E5                     PUSH   hl   
23D2   CD 77 10               CALL   run   
23D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23DC   CD 7A 0F               CALL   printStr   
23DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23EC   E1                     POP   hl   
23ED   E5                     PUSH   hl   
23EE   E5                     PUSH   hl   
23EF   CD 77 10               CALL   run   
23F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23FD   76                     HALT      
23FE                EXPECTM_3067S94:      
23FE   E1                     POP   HL   
23FF                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
23FF   31 00 53               LD   SP,STACK   
2402   CD AE 0F               CALL   coldInit   
2405   CD CC 51               CALL   execStr   
2408   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2418   E1                     POP   HL   
2419   E5                     PUSH   HL   
241A   11 01 00               LD   DE,1   
241D   B7                     OR   A   
241E   ED 52                  SBC   HL,DE   
2420   7D                     LD   A,L   
2421   B4                     OR   H   
2422   CA 81 24               JP   Z,expectM_3068S95   
2425   CD 7A 0F               CALL   printStr   
2428   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
243E   CD 7A 0F               CALL   printStr   
2441   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2450   21 01 00               LD   hl,1   
2453   E5                     PUSH   hl   
2454   E5                     PUSH   hl   
2455   CD 77 10               CALL   run   
2458   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
245F   CD 7A 0F               CALL   printStr   
2462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246F   E1                     POP   hl   
2470   E5                     PUSH   hl   
2471   E5                     PUSH   hl   
2472   CD 77 10               CALL   run   
2475   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2480   76                     HALT      
2481                EXPECTM_3068S95:      
2481   E1                     POP   HL   
2482                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
2482   31 00 53               LD   SP,STACK   
2485   CD AE 0F               CALL   coldInit   
2488   CD CC 51               CALL   execStr   
248B   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
249B   E1                     POP   HL   
249C   E5                     PUSH   HL   
249D   11 06 00               LD   DE,6   
24A0   B7                     OR   A   
24A1   ED 52                  SBC   HL,DE   
24A3   7D                     LD   A,L   
24A4   B4                     OR   H   
24A5   CA 04 25               JP   Z,expectM_3069S96   
24A8   CD 7A 0F               CALL   printStr   
24AB   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
24C1   CD 7A 0F               CALL   printStr   
24C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D3   21 06 00               LD   hl,6   
24D6   E5                     PUSH   hl   
24D7   E5                     PUSH   hl   
24D8   CD 77 10               CALL   run   
24DB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24E2   CD 7A 0F               CALL   printStr   
24E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F2   E1                     POP   hl   
24F3   E5                     PUSH   hl   
24F4   E5                     PUSH   hl   
24F5   CD 77 10               CALL   run   
24F8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2503   76                     HALT      
2504                EXPECTM_3069S96:      
2504   E1                     POP   HL   
2505                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2505   31 00 53               LD   SP,STACK   
2508   CD AE 0F               CALL   coldInit   
250B   CD CC 51               CALL   execStr   
250E   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
251E   E1                     POP   HL   
251F   E5                     PUSH   HL   
2520   11 03 00               LD   DE,3   
2523   B7                     OR   A   
2524   ED 52                  SBC   HL,DE   
2526   7D                     LD   A,L   
2527   B4                     OR   H   
2528   CA 87 25               JP   Z,expectM_3070S97   
252B   CD 7A 0F               CALL   printStr   
252E   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2544   CD 7A 0F               CALL   printStr   
2547   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2556   21 03 00               LD   hl,3   
2559   E5                     PUSH   hl   
255A   E5                     PUSH   hl   
255B   CD 77 10               CALL   run   
255E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2565   CD 7A 0F               CALL   printStr   
2568   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2575   E1                     POP   hl   
2576   E5                     PUSH   hl   
2577   E5                     PUSH   hl   
2578   CD 77 10               CALL   run   
257B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2586   76                     HALT      
2587                EXPECTM_3070S97:      
2587   E1                     POP   HL   
2588                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2588   31 00 53               LD   SP,STACK   
258B   CD AE 0F               CALL   coldInit   
258E   CD CC 51               CALL   execStr   
2591   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
25A0   E1                     POP   HL   
25A1   E5                     PUSH   HL   
25A2   11 00 00               LD   DE,0   
25A5   B7                     OR   A   
25A6   ED 52                  SBC   HL,DE   
25A8   7D                     LD   A,L   
25A9   B4                     OR   H   
25AA   CA 08 26               JP   Z,expectM_3071S98   
25AD   CD 7A 0F               CALL   printStr   
25B0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25C5   CD 7A 0F               CALL   printStr   
25C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D7   21 00 00               LD   hl,0   
25DA   E5                     PUSH   hl   
25DB   E5                     PUSH   hl   
25DC   CD 77 10               CALL   run   
25DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25E6   CD 7A 0F               CALL   printStr   
25E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F6   E1                     POP   hl   
25F7   E5                     PUSH   hl   
25F8   E5                     PUSH   hl   
25F9   CD 77 10               CALL   run   
25FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2607   76                     HALT      
2608                EXPECTM_3071S98:      
2608   E1                     POP   HL   
2609                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2609   31 00 53               LD   SP,STACK   
260C   CD AE 0F               CALL   coldInit   
260F   CD CC 51               CALL   execStr   
2612   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2621   E1                     POP   HL   
2622   E5                     PUSH   HL   
2623   11 FF 00               LD   DE,$FF   
2626   B7                     OR   A   
2627   ED 52                  SBC   HL,DE   
2629   7D                     LD   A,L   
262A   B4                     OR   H   
262B   CA 89 26               JP   Z,expectM_3072S99   
262E   CD 7A 0F               CALL   printStr   
2631   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2646   CD 7A 0F               CALL   printStr   
2649   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2658   21 FF 00               LD   hl,$FF   
265B   E5                     PUSH   hl   
265C   E5                     PUSH   hl   
265D   CD 77 10               CALL   run   
2660   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2667   CD 7A 0F               CALL   printStr   
266A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2677   E1                     POP   hl   
2678   E5                     PUSH   hl   
2679   E5                     PUSH   hl   
267A   CD 77 10               CALL   run   
267D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2688   76                     HALT      
2689                EXPECTM_3072S99:      
2689   E1                     POP   HL   
268A                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
268A   31 00 53               LD   SP,STACK   
268D   CD AE 0F               CALL   coldInit   
2690   CD CC 51               CALL   execStr   
2693   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
26A4   E1                     POP   HL   
26A5   E5                     PUSH   HL   
26A6   11 0F 00               LD   DE,$0F   
26A9   B7                     OR   A   
26AA   ED 52                  SBC   HL,DE   
26AC   7D                     LD   A,L   
26AD   B4                     OR   H   
26AE   CA 0E 27               JP   Z,expectM_3073S100   
26B1   CD 7A 0F               CALL   printStr   
26B4   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
26CB   CD 7A 0F               CALL   printStr   
26CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DD   21 0F 00               LD   hl,$0F   
26E0   E5                     PUSH   hl   
26E1   E5                     PUSH   hl   
26E2   CD 77 10               CALL   run   
26E5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26EC   CD 7A 0F               CALL   printStr   
26EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26FC   E1                     POP   hl   
26FD   E5                     PUSH   hl   
26FE   E5                     PUSH   hl   
26FF   CD 77 10               CALL   run   
2702   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
270D   76                     HALT      
270E                EXPECTM_3073S100:      
270E   E1                     POP   HL   
270F                          ;*Macro unroll:  test "$00AA~",$FF55
270F   31 00 53               LD   SP,STACK   
2712   CD AE 0F               CALL   coldInit   
2715   CD CC 51               CALL   execStr   
2718   24 30 30 41 41 7E 00   DB   "$00AA~",0   
271F   E1                     POP   HL   
2720   E5                     PUSH   HL   
2721   11 55 FF               LD   DE,$FF55   
2724   B7                     OR   A   
2725   ED 52                  SBC   HL,DE   
2727   7D                     LD   A,L   
2728   B4                     OR   H   
2729   CA 7F 27               JP   Z,expectM_3074S101   
272C   CD 7A 0F               CALL   printStr   
272F   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
273C   CD 7A 0F               CALL   printStr   
273F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
274E   21 55 FF               LD   hl,$FF55   
2751   E5                     PUSH   hl   
2752   E5                     PUSH   hl   
2753   CD 77 10               CALL   run   
2756   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
275D   CD 7A 0F               CALL   printStr   
2760   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276D   E1                     POP   hl   
276E   E5                     PUSH   hl   
276F   E5                     PUSH   hl   
2770   CD 77 10               CALL   run   
2773   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
277E   76                     HALT      
277F                EXPECTM_3074S101:      
277F   E1                     POP   HL   
2780                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2780   31 00 53               LD   SP,STACK   
2783   CD AE 0F               CALL   coldInit   
2786   CD CC 51               CALL   execStr   
2789   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2797   E1                     POP   HL   
2798   E5                     PUSH   HL   
2799   11 55 55               LD   DE,$5555   
279C   B7                     OR   A   
279D   ED 52                  SBC   HL,DE   
279F   7D                     LD   A,L   
27A0   B4                     OR   H   
27A1   CA FE 27               JP   Z,expectM_3075S102   
27A4   CD 7A 0F               CALL   printStr   
27A7   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27BB   CD 7A 0F               CALL   printStr   
27BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CD   21 55 55               LD   hl,$5555   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD 77 10               CALL   run   
27D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27DC   CD 7A 0F               CALL   printStr   
27DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27EC   E1                     POP   hl   
27ED   E5                     PUSH   hl   
27EE   E5                     PUSH   hl   
27EF   CD 77 10               CALL   run   
27F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27FD   76                     HALT      
27FE                EXPECTM_3075S102:      
27FE   E1                     POP   HL   
27FF                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
27FF   31 00 53               LD   SP,STACK   
2802   CD AE 0F               CALL   coldInit   
2805   CD CC 51               CALL   execStr   
2808   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2816   E1                     POP   HL   
2817   E5                     PUSH   HL   
2818   11 06 00               LD   DE,6   
281B   B7                     OR   A   
281C   ED 52                  SBC   HL,DE   
281E   7D                     LD   A,L   
281F   B4                     OR   H   
2820   CA 7D 28               JP   Z,expectM_3076S103   
2823   CD 7A 0F               CALL   printStr   
2826   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
283A   CD 7A 0F               CALL   printStr   
283D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
284C   21 06 00               LD   hl,6   
284F   E5                     PUSH   hl   
2850   E5                     PUSH   hl   
2851   CD 77 10               CALL   run   
2854   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
285B   CD 7A 0F               CALL   printStr   
285E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
286B   E1                     POP   hl   
286C   E5                     PUSH   hl   
286D   E5                     PUSH   hl   
286E   CD 77 10               CALL   run   
2871   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
287C   76                     HALT      
287D                EXPECTM_3076S103:      
287D   E1                     POP   HL   
287E                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
287E   31 00 53               LD   SP,STACK   
2881   CD AE 0F               CALL   coldInit   
2884   CD CC 51               CALL   execStr   
2887   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2896   E1                     POP   HL   
2897   E5                     PUSH   HL   
2898   11 05 00               LD   DE,5   
289B   B7                     OR   A   
289C   ED 52                  SBC   HL,DE   
289E   7D                     LD   A,L   
289F   B4                     OR   H   
28A0   CA FE 28               JP   Z,expectM_3077S104   
28A3   CD 7A 0F               CALL   printStr   
28A6   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
28BB   CD 7A 0F               CALL   printStr   
28BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28CD   21 05 00               LD   hl,5   
28D0   E5                     PUSH   hl   
28D1   E5                     PUSH   hl   
28D2   CD 77 10               CALL   run   
28D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28DC   CD 7A 0F               CALL   printStr   
28DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28EC   E1                     POP   hl   
28ED   E5                     PUSH   hl   
28EE   E5                     PUSH   hl   
28EF   CD 77 10               CALL   run   
28F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28FD   76                     HALT      
28FE                EXPECTM_3077S104:      
28FE   E1                     POP   HL   
28FF                          ;*Macro unroll:  test "7 3 / /re", 1
28FF   31 00 53               LD   SP,STACK   
2902   CD AE 0F               CALL   coldInit   
2905   CD CC 51               CALL   execStr   
2908   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2912   E1                     POP   HL   
2913   E5                     PUSH   HL   
2914   11 01 00               LD   DE,1   
2917   B7                     OR   A   
2918   ED 52                  SBC   HL,DE   
291A   7D                     LD   A,L   
291B   B4                     OR   H   
291C   CA 75 29               JP   Z,expectM_3078S105   
291F   CD 7A 0F               CALL   printStr   
2922   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2932   CD 7A 0F               CALL   printStr   
2935   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2944   21 01 00               LD   hl,1   
2947   E5                     PUSH   hl   
2948   E5                     PUSH   hl   
2949   CD 77 10               CALL   run   
294C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2953   CD 7A 0F               CALL   printStr   
2956   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2963   E1                     POP   hl   
2964   E5                     PUSH   hl   
2965   E5                     PUSH   hl   
2966   CD 77 10               CALL   run   
2969   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2974   76                     HALT      
2975                EXPECTM_3078S105:      
2975   E1                     POP   HL   
2976                          ;*Macro unroll:  test "7 3 /", 2
2976   31 00 53               LD   SP,STACK   
2979   CD AE 0F               CALL   coldInit   
297C   CD CC 51               CALL   execStr   
297F   37 20 33 20 2F 00      DB   "7 3 /",0   
2985   E1                     POP   HL   
2986   E5                     PUSH   HL   
2987   11 02 00               LD   DE,2   
298A   B7                     OR   A   
298B   ED 52                  SBC   HL,DE   
298D   7D                     LD   A,L   
298E   B4                     OR   H   
298F   CA E4 29               JP   Z,expectM_3079S106   
2992   CD 7A 0F               CALL   printStr   
2995   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
29A1   CD 7A 0F               CALL   printStr   
29A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B3   21 02 00               LD   hl,2   
29B6   E5                     PUSH   hl   
29B7   E5                     PUSH   hl   
29B8   CD 77 10               CALL   run   
29BB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29C2   CD 7A 0F               CALL   printStr   
29C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D2   E1                     POP   hl   
29D3   E5                     PUSH   hl   
29D4   E5                     PUSH   hl   
29D5   CD 77 10               CALL   run   
29D8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29E3   76                     HALT      
29E4                EXPECTM_3079S106:      
29E4   E1                     POP   HL   
29E5                          ;*Macro unroll:  test "2 3 ==", FALSE
29E5   31 00 53               LD   SP,STACK   
29E8   CD AE 0F               CALL   coldInit   
29EB   CD CC 51               CALL   execStr   
29EE   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
29F5   E1                     POP   HL   
29F6   E5                     PUSH   HL   
29F7   11 00 00               LD   DE,FALSE   
29FA   B7                     OR   A   
29FB   ED 52                  SBC   HL,DE   
29FD   7D                     LD   A,L   
29FE   B4                     OR   H   
29FF   CA 55 2A               JP   Z,expectM_3080S107   
2A02   CD 7A 0F               CALL   printStr   
2A05   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2A12   CD 7A 0F               CALL   printStr   
2A15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A24   21 00 00               LD   hl,FALSE   
2A27   E5                     PUSH   hl   
2A28   E5                     PUSH   hl   
2A29   CD 77 10               CALL   run   
2A2C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A33   CD 7A 0F               CALL   printStr   
2A36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A43   E1                     POP   hl   
2A44   E5                     PUSH   hl   
2A45   E5                     PUSH   hl   
2A46   CD 77 10               CALL   run   
2A49   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A54   76                     HALT      
2A55                EXPECTM_3080S107:      
2A55   E1                     POP   HL   
2A56                          ;*Macro unroll:  test "3 3 ==", TRUE
2A56   31 00 53               LD   SP,STACK   
2A59   CD AE 0F               CALL   coldInit   
2A5C   CD CC 51               CALL   execStr   
2A5F   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2A66   E1                     POP   HL   
2A67   E5                     PUSH   HL   
2A68   11 FF FF               LD   DE,TRUE   
2A6B   B7                     OR   A   
2A6C   ED 52                  SBC   HL,DE   
2A6E   7D                     LD   A,L   
2A6F   B4                     OR   H   
2A70   CA C6 2A               JP   Z,expectM_3081S108   
2A73   CD 7A 0F               CALL   printStr   
2A76   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2A83   CD 7A 0F               CALL   printStr   
2A86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A95   21 FF FF               LD   hl,TRUE   
2A98   E5                     PUSH   hl   
2A99   E5                     PUSH   hl   
2A9A   CD 77 10               CALL   run   
2A9D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AA4   CD 7A 0F               CALL   printStr   
2AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AB4   E1                     POP   hl   
2AB5   E5                     PUSH   hl   
2AB6   E5                     PUSH   hl   
2AB7   CD 77 10               CALL   run   
2ABA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2AC5   76                     HALT      
2AC6                EXPECTM_3081S108:      
2AC6   E1                     POP   HL   
2AC7                          ;*Macro unroll:  test "1 2 <", TRUE
2AC7   31 00 53               LD   SP,STACK   
2ACA   CD AE 0F               CALL   coldInit   
2ACD   CD CC 51               CALL   execStr   
2AD0   31 20 32 20 3C 00      DB   "1 2 <",0   
2AD6   E1                     POP   HL   
2AD7   E5                     PUSH   HL   
2AD8   11 FF FF               LD   DE,TRUE   
2ADB   B7                     OR   A   
2ADC   ED 52                  SBC   HL,DE   
2ADE   7D                     LD   A,L   
2ADF   B4                     OR   H   
2AE0   CA 35 2B               JP   Z,expectM_3082S109   
2AE3   CD 7A 0F               CALL   printStr   
2AE6   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2AF2   CD 7A 0F               CALL   printStr   
2AF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B04   21 FF FF               LD   hl,TRUE   
2B07   E5                     PUSH   hl   
2B08   E5                     PUSH   hl   
2B09   CD 77 10               CALL   run   
2B0C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B13   CD 7A 0F               CALL   printStr   
2B16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B23   E1                     POP   hl   
2B24   E5                     PUSH   hl   
2B25   E5                     PUSH   hl   
2B26   CD 77 10               CALL   run   
2B29   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B34   76                     HALT      
2B35                EXPECTM_3082S109:      
2B35   E1                     POP   HL   
2B36                          ;*Macro unroll:  test "2 1 <", FALSE
2B36   31 00 53               LD   SP,STACK   
2B39   CD AE 0F               CALL   coldInit   
2B3C   CD CC 51               CALL   execStr   
2B3F   32 20 31 20 3C 00      DB   "2 1 <",0   
2B45   E1                     POP   HL   
2B46   E5                     PUSH   HL   
2B47   11 00 00               LD   DE,FALSE   
2B4A   B7                     OR   A   
2B4B   ED 52                  SBC   HL,DE   
2B4D   7D                     LD   A,L   
2B4E   B4                     OR   H   
2B4F   CA A4 2B               JP   Z,expectM_3083S110   
2B52   CD 7A 0F               CALL   printStr   
2B55   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2B61   CD 7A 0F               CALL   printStr   
2B64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B73   21 00 00               LD   hl,FALSE   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 77 10               CALL   run   
2B7B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B82   CD 7A 0F               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD 77 10               CALL   run   
2B98   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BA3   76                     HALT      
2BA4                EXPECTM_3083S110:      
2BA4   E1                     POP   HL   
2BA5                          ;*Macro unroll:  test "2 3 <", TRUE
2BA5   31 00 53               LD   SP,STACK   
2BA8   CD AE 0F               CALL   coldInit   
2BAB   CD CC 51               CALL   execStr   
2BAE   32 20 33 20 3C 00      DB   "2 3 <",0   
2BB4   E1                     POP   HL   
2BB5   E5                     PUSH   HL   
2BB6   11 FF FF               LD   DE,TRUE   
2BB9   B7                     OR   A   
2BBA   ED 52                  SBC   HL,DE   
2BBC   7D                     LD   A,L   
2BBD   B4                     OR   H   
2BBE   CA 13 2C               JP   Z,expectM_3084S111   
2BC1   CD 7A 0F               CALL   printStr   
2BC4   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2BD0   CD 7A 0F               CALL   printStr   
2BD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BE2   21 FF FF               LD   hl,TRUE   
2BE5   E5                     PUSH   hl   
2BE6   E5                     PUSH   hl   
2BE7   CD 77 10               CALL   run   
2BEA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BF1   CD 7A 0F               CALL   printStr   
2BF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C01   E1                     POP   hl   
2C02   E5                     PUSH   hl   
2C03   E5                     PUSH   hl   
2C04   CD 77 10               CALL   run   
2C07   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C12   76                     HALT      
2C13                EXPECTM_3084S111:      
2C13   E1                     POP   HL   
2C14                          ;*Macro unroll:  test "3 3 <", FALSE
2C14   31 00 53               LD   SP,STACK   
2C17   CD AE 0F               CALL   coldInit   
2C1A   CD CC 51               CALL   execStr   
2C1D   33 20 33 20 3C 00      DB   "3 3 <",0   
2C23   E1                     POP   HL   
2C24   E5                     PUSH   HL   
2C25   11 00 00               LD   DE,FALSE   
2C28   B7                     OR   A   
2C29   ED 52                  SBC   HL,DE   
2C2B   7D                     LD   A,L   
2C2C   B4                     OR   H   
2C2D   CA 82 2C               JP   Z,expectM_3085S112   
2C30   CD 7A 0F               CALL   printStr   
2C33   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2C3F   CD 7A 0F               CALL   printStr   
2C42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C51   21 00 00               LD   hl,FALSE   
2C54   E5                     PUSH   hl   
2C55   E5                     PUSH   hl   
2C56   CD 77 10               CALL   run   
2C59   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C60   CD 7A 0F               CALL   printStr   
2C63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C70   E1                     POP   hl   
2C71   E5                     PUSH   hl   
2C72   E5                     PUSH   hl   
2C73   CD 77 10               CALL   run   
2C76   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C81   76                     HALT      
2C82                EXPECTM_3085S112:      
2C82   E1                     POP   HL   
2C83                          ;*Macro unroll:  test "1 2 >", FALSE
2C83   31 00 53               LD   SP,STACK   
2C86   CD AE 0F               CALL   coldInit   
2C89   CD CC 51               CALL   execStr   
2C8C   31 20 32 20 3E 00      DB   "1 2 >",0   
2C92   E1                     POP   HL   
2C93   E5                     PUSH   HL   
2C94   11 00 00               LD   DE,FALSE   
2C97   B7                     OR   A   
2C98   ED 52                  SBC   HL,DE   
2C9A   7D                     LD   A,L   
2C9B   B4                     OR   H   
2C9C   CA F1 2C               JP   Z,expectM_3086S113   
2C9F   CD 7A 0F               CALL   printStr   
2CA2   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2CAE   CD 7A 0F               CALL   printStr   
2CB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC0   21 00 00               LD   hl,FALSE   
2CC3   E5                     PUSH   hl   
2CC4   E5                     PUSH   hl   
2CC5   CD 77 10               CALL   run   
2CC8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CCF   CD 7A 0F               CALL   printStr   
2CD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CDF   E1                     POP   hl   
2CE0   E5                     PUSH   hl   
2CE1   E5                     PUSH   hl   
2CE2   CD 77 10               CALL   run   
2CE5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CF0   76                     HALT      
2CF1                EXPECTM_3086S113:      
2CF1   E1                     POP   HL   
2CF2                          ;*Macro unroll:  test "2 1 >", TRUE
2CF2   31 00 53               LD   SP,STACK   
2CF5   CD AE 0F               CALL   coldInit   
2CF8   CD CC 51               CALL   execStr   
2CFB   32 20 31 20 3E 00      DB   "2 1 >",0   
2D01   E1                     POP   HL   
2D02   E5                     PUSH   HL   
2D03   11 FF FF               LD   DE,TRUE   
2D06   B7                     OR   A   
2D07   ED 52                  SBC   HL,DE   
2D09   7D                     LD   A,L   
2D0A   B4                     OR   H   
2D0B   CA 60 2D               JP   Z,expectM_3087S114   
2D0E   CD 7A 0F               CALL   printStr   
2D11   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2D1D   CD 7A 0F               CALL   printStr   
2D20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2F   21 FF FF               LD   hl,TRUE   
2D32   E5                     PUSH   hl   
2D33   E5                     PUSH   hl   
2D34   CD 77 10               CALL   run   
2D37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D3E   CD 7A 0F               CALL   printStr   
2D41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D4E   E1                     POP   hl   
2D4F   E5                     PUSH   hl   
2D50   E5                     PUSH   hl   
2D51   CD 77 10               CALL   run   
2D54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D5F   76                     HALT      
2D60                EXPECTM_3087S114:      
2D60   E1                     POP   HL   
2D61                          ;*Macro unroll:  test "3 3 >", FALSE
2D61   31 00 53               LD   SP,STACK   
2D64   CD AE 0F               CALL   coldInit   
2D67   CD CC 51               CALL   execStr   
2D6A   33 20 33 20 3E 00      DB   "3 3 >",0   
2D70   E1                     POP   HL   
2D71   E5                     PUSH   HL   
2D72   11 00 00               LD   DE,FALSE   
2D75   B7                     OR   A   
2D76   ED 52                  SBC   HL,DE   
2D78   7D                     LD   A,L   
2D79   B4                     OR   H   
2D7A   CA CF 2D               JP   Z,expectM_3088S115   
2D7D   CD 7A 0F               CALL   printStr   
2D80   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2D8C   CD 7A 0F               CALL   printStr   
2D8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D9E   21 00 00               LD   hl,FALSE   
2DA1   E5                     PUSH   hl   
2DA2   E5                     PUSH   hl   
2DA3   CD 77 10               CALL   run   
2DA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DAD   CD 7A 0F               CALL   printStr   
2DB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DBD   E1                     POP   hl   
2DBE   E5                     PUSH   hl   
2DBF   E5                     PUSH   hl   
2DC0   CD 77 10               CALL   run   
2DC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DCE   76                     HALT      
2DCF                EXPECTM_3088S115:      
2DCF   E1                     POP   HL   
2DD0                          ;*Macro unroll:  test "4 3 >", TRUE
2DD0   31 00 53               LD   SP,STACK   
2DD3   CD AE 0F               CALL   coldInit   
2DD6   CD CC 51               CALL   execStr   
2DD9   34 20 33 20 3E 00      DB   "4 3 >",0   
2DDF   E1                     POP   HL   
2DE0   E5                     PUSH   HL   
2DE1   11 FF FF               LD   DE,TRUE   
2DE4   B7                     OR   A   
2DE5   ED 52                  SBC   HL,DE   
2DE7   7D                     LD   A,L   
2DE8   B4                     OR   H   
2DE9   CA 3E 2E               JP   Z,expectM_3089S116   
2DEC   CD 7A 0F               CALL   printStr   
2DEF   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2DFB   CD 7A 0F               CALL   printStr   
2DFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E0D   21 FF FF               LD   hl,TRUE   
2E10   E5                     PUSH   hl   
2E11   E5                     PUSH   hl   
2E12   CD 77 10               CALL   run   
2E15   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E1C   CD 7A 0F               CALL   printStr   
2E1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E2C   E1                     POP   hl   
2E2D   E5                     PUSH   hl   
2E2E   E5                     PUSH   hl   
2E2F   CD 77 10               CALL   run   
2E32   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E3D   76                     HALT      
2E3E                EXPECTM_3089S116:      
2E3E   E1                     POP   HL   
2E3F                          ;*Macro unroll:  test "2 2 <=", TRUE
2E3F   31 00 53               LD   SP,STACK   
2E42   CD AE 0F               CALL   coldInit   
2E45   CD CC 51               CALL   execStr   
2E48   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2E4F   E1                     POP   HL   
2E50   E5                     PUSH   HL   
2E51   11 FF FF               LD   DE,TRUE   
2E54   B7                     OR   A   
2E55   ED 52                  SBC   HL,DE   
2E57   7D                     LD   A,L   
2E58   B4                     OR   H   
2E59   CA AF 2E               JP   Z,expectM_3090S117   
2E5C   CD 7A 0F               CALL   printStr   
2E5F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2E6C   CD 7A 0F               CALL   printStr   
2E6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E7E   21 FF FF               LD   hl,TRUE   
2E81   E5                     PUSH   hl   
2E82   E5                     PUSH   hl   
2E83   CD 77 10               CALL   run   
2E86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E8D   CD 7A 0F               CALL   printStr   
2E90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9D   E1                     POP   hl   
2E9E   E5                     PUSH   hl   
2E9F   E5                     PUSH   hl   
2EA0   CD 77 10               CALL   run   
2EA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2EAE   76                     HALT      
2EAF                EXPECTM_3090S117:      
2EAF   E1                     POP   HL   
2EB0                          ;*Macro unroll:  test "2 2 >=", TRUE
2EB0   31 00 53               LD   SP,STACK   
2EB3   CD AE 0F               CALL   coldInit   
2EB6   CD CC 51               CALL   execStr   
2EB9   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2EC0   E1                     POP   HL   
2EC1   E5                     PUSH   HL   
2EC2   11 FF FF               LD   DE,TRUE   
2EC5   B7                     OR   A   
2EC6   ED 52                  SBC   HL,DE   
2EC8   7D                     LD   A,L   
2EC9   B4                     OR   H   
2ECA   CA 20 2F               JP   Z,expectM_3091S118   
2ECD   CD 7A 0F               CALL   printStr   
2ED0   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2EDD   CD 7A 0F               CALL   printStr   
2EE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EEF   21 FF FF               LD   hl,TRUE   
2EF2   E5                     PUSH   hl   
2EF3   E5                     PUSH   hl   
2EF4   CD 77 10               CALL   run   
2EF7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EFE   CD 7A 0F               CALL   printStr   
2F01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0E   E1                     POP   hl   
2F0F   E5                     PUSH   hl   
2F10   E5                     PUSH   hl   
2F11   CD 77 10               CALL   run   
2F14   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F1F   76                     HALT      
2F20                EXPECTM_3091S118:      
2F20   E1                     POP   HL   
2F21                          ;*Macro unroll:  test "3 1 <<", 6
2F21   31 00 53               LD   SP,STACK   
2F24   CD AE 0F               CALL   coldInit   
2F27   CD CC 51               CALL   execStr   
2F2A   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2F31   E1                     POP   HL   
2F32   E5                     PUSH   HL   
2F33   11 06 00               LD   DE,6   
2F36   B7                     OR   A   
2F37   ED 52                  SBC   HL,DE   
2F39   7D                     LD   A,L   
2F3A   B4                     OR   H   
2F3B   CA 91 2F               JP   Z,expectM_3092S119   
2F3E   CD 7A 0F               CALL   printStr   
2F41   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2F4E   CD 7A 0F               CALL   printStr   
2F51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F60   21 06 00               LD   hl,6   
2F63   E5                     PUSH   hl   
2F64   E5                     PUSH   hl   
2F65   CD 77 10               CALL   run   
2F68   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F6F   CD 7A 0F               CALL   printStr   
2F72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F7F   E1                     POP   hl   
2F80   E5                     PUSH   hl   
2F81   E5                     PUSH   hl   
2F82   CD 77 10               CALL   run   
2F85   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F90   76                     HALT      
2F91                EXPECTM_3092S119:      
2F91   E1                     POP   HL   
2F92                          ;*Macro unroll:  test "10 1 >>", 5
2F92   31 00 53               LD   SP,STACK   
2F95   CD AE 0F               CALL   coldInit   
2F98   CD CC 51               CALL   execStr   
2F9B   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2FA3   E1                     POP   HL   
2FA4   E5                     PUSH   HL   
2FA5   11 05 00               LD   DE,5   
2FA8   B7                     OR   A   
2FA9   ED 52                  SBC   HL,DE   
2FAB   7D                     LD   A,L   
2FAC   B4                     OR   H   
2FAD   CA 04 30               JP   Z,expectM_3093S120   
2FB0   CD 7A 0F               CALL   printStr   
2FB3   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2FC1   CD 7A 0F               CALL   printStr   
2FC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD3   21 05 00               LD   hl,5   
2FD6   E5                     PUSH   hl   
2FD7   E5                     PUSH   hl   
2FD8   CD 77 10               CALL   run   
2FDB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FE2   CD 7A 0F               CALL   printStr   
2FE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FF2   E1                     POP   hl   
2FF3   E5                     PUSH   hl   
2FF4   E5                     PUSH   hl   
2FF5   CD 77 10               CALL   run   
2FF8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3003   76                     HALT      
3004                EXPECTM_3093S120:      
3004   E1                     POP   HL   
3005                          ;*Macro unroll:  test "1 x = x", 1
3005   31 00 53               LD   SP,STACK   
3008   CD AE 0F               CALL   coldInit   
300B   CD CC 51               CALL   execStr   
300E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3016   E1                     POP   HL   
3017   E5                     PUSH   HL   
3018   11 01 00               LD   DE,1   
301B   B7                     OR   A   
301C   ED 52                  SBC   HL,DE   
301E   7D                     LD   A,L   
301F   B4                     OR   H   
3020   CA 77 30               JP   Z,expectM_3094S121   
3023   CD 7A 0F               CALL   printStr   
3026   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3034   CD 7A 0F               CALL   printStr   
3037   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3046   21 01 00               LD   hl,1   
3049   E5                     PUSH   hl   
304A   E5                     PUSH   hl   
304B   CD 77 10               CALL   run   
304E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3055   CD 7A 0F               CALL   printStr   
3058   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3065   E1                     POP   hl   
3066   E5                     PUSH   hl   
3067   E5                     PUSH   hl   
3068   CD 77 10               CALL   run   
306B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3076   76                     HALT      
3077                EXPECTM_3094S121:      
3077   E1                     POP   HL   
3078                          ;*Macro unroll:  test "1{}^", 1
3078   31 00 53               LD   SP,STACK   
307B   CD AE 0F               CALL   coldInit   
307E   CD CC 51               CALL   execStr   
3081   31 7B 7D 5E 00         DB   "1{}^",0   
3086   E1                     POP   HL   
3087   E5                     PUSH   HL   
3088   11 01 00               LD   DE,1   
308B   B7                     OR   A   
308C   ED 52                  SBC   HL,DE   
308E   7D                     LD   A,L   
308F   B4                     OR   H   
3090   CA E4 30               JP   Z,expectM_3095S122   
3093   CD 7A 0F               CALL   printStr   
3096   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
30A1   CD 7A 0F               CALL   printStr   
30A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B3   21 01 00               LD   hl,1   
30B6   E5                     PUSH   hl   
30B7   E5                     PUSH   hl   
30B8   CD 77 10               CALL   run   
30BB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30C2   CD 7A 0F               CALL   printStr   
30C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D2   E1                     POP   hl   
30D3   E5                     PUSH   hl   
30D4   E5                     PUSH   hl   
30D5   CD 77 10               CALL   run   
30D8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30E3   76                     HALT      
30E4                EXPECTM_3095S122:      
30E4   E1                     POP   HL   
30E5                          ;*Macro unroll:  test "{1}^", 1
30E5   31 00 53               LD   SP,STACK   
30E8   CD AE 0F               CALL   coldInit   
30EB   CD CC 51               CALL   execStr   
30EE   7B 31 7D 5E 00         DB   "{1}^",0   
30F3   E1                     POP   HL   
30F4   E5                     PUSH   HL   
30F5   11 01 00               LD   DE,1   
30F8   B7                     OR   A   
30F9   ED 52                  SBC   HL,DE   
30FB   7D                     LD   A,L   
30FC   B4                     OR   H   
30FD   CA 51 31               JP   Z,expectM_3096S123   
3100   CD 7A 0F               CALL   printStr   
3103   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
310E   CD 7A 0F               CALL   printStr   
3111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3120   21 01 00               LD   hl,1   
3123   E5                     PUSH   hl   
3124   E5                     PUSH   hl   
3125   CD 77 10               CALL   run   
3128   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
312F   CD 7A 0F               CALL   printStr   
3132   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
313F   E1                     POP   hl   
3140   E5                     PUSH   hl   
3141   E5                     PUSH   hl   
3142   CD 77 10               CALL   run   
3145   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3150   76                     HALT      
3151                EXPECTM_3096S123:      
3151   E1                     POP   HL   
3152                          ;*Macro unroll:  test "{{1}^}^", 1
3152   31 00 53               LD   SP,STACK   
3155   CD AE 0F               CALL   coldInit   
3158   CD CC 51               CALL   execStr   
315B   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
3163   E1                     POP   HL   
3164   E5                     PUSH   HL   
3165   11 01 00               LD   DE,1   
3168   B7                     OR   A   
3169   ED 52                  SBC   HL,DE   
316B   7D                     LD   A,L   
316C   B4                     OR   H   
316D   CA C4 31               JP   Z,expectM_3097S124   
3170   CD 7A 0F               CALL   printStr   
3173   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3181   CD 7A 0F               CALL   printStr   
3184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3193   21 01 00               LD   hl,1   
3196   E5                     PUSH   hl   
3197   E5                     PUSH   hl   
3198   CD 77 10               CALL   run   
319B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31A2   CD 7A 0F               CALL   printStr   
31A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31B2   E1                     POP   hl   
31B3   E5                     PUSH   hl   
31B4   E5                     PUSH   hl   
31B5   CD 77 10               CALL   run   
31B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31C3   76                     HALT      
31C4                EXPECTM_3097S124:      
31C4   E1                     POP   HL   
31C5                          ;*Macro unroll:  test "{{{1}^}^}^", 1
31C5   31 00 53               LD   SP,STACK   
31C8   CD AE 0F               CALL   coldInit   
31CB   CD CC 51               CALL   execStr   
31CE   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
31D9   E1                     POP   HL   
31DA   E5                     PUSH   HL   
31DB   11 01 00               LD   DE,1   
31DE   B7                     OR   A   
31DF   ED 52                  SBC   HL,DE   
31E1   7D                     LD   A,L   
31E2   B4                     OR   H   
31E3   CA 3D 32               JP   Z,expectM_3098S125   
31E6   CD 7A 0F               CALL   printStr   
31E9   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
31FA   CD 7A 0F               CALL   printStr   
31FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320C   21 01 00               LD   hl,1   
320F   E5                     PUSH   hl   
3210   E5                     PUSH   hl   
3211   CD 77 10               CALL   run   
3214   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
321B   CD 7A 0F               CALL   printStr   
321E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
322B   E1                     POP   hl   
322C   E5                     PUSH   hl   
322D   E5                     PUSH   hl   
322E   CD 77 10               CALL   run   
3231   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
323C   76                     HALT      
323D                EXPECTM_3098S125:      
323D   E1                     POP   HL   
323E                          ;*Macro unroll:  test "1 /f{10}{20} ? +", 21
323E   31 00 53               LD   SP,STACK   
3241   CD AE 0F               CALL   coldInit   
3244   CD CC 51               CALL   execStr   
3247   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /f{10}{20} ? +",0   
3258   E1                     POP   HL   
3259   E5                     PUSH   HL   
325A   11 15 00               LD   DE,21   
325D   B7                     OR   A   
325E   ED 52                  SBC   HL,DE   
3260   7D                     LD   A,L   
3261   B4                     OR   H   
3262   CA C2 32               JP   Z,expectM_3099S126   
3265   CD 7A 0F               CALL   printStr   
3268   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ? +"   
327F   CD 7A 0F               CALL   printStr   
3282   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3291   21 15 00               LD   hl,21   
3294   E5                     PUSH   hl   
3295   E5                     PUSH   hl   
3296   CD 77 10               CALL   run   
3299   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32A0   CD 7A 0F               CALL   printStr   
32A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32B0   E1                     POP   hl   
32B1   E5                     PUSH   hl   
32B2   E5                     PUSH   hl   
32B3   CD 77 10               CALL   run   
32B6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32C1   76                     HALT      
32C2                EXPECTM_3099S126:      
32C2   E1                     POP   HL   
32C3                          ;*Macro unroll:  test "1 /t{10}{20} ? +", 11
32C3   31 00 53               LD   SP,STACK   
32C6   CD AE 0F               CALL   coldInit   
32C9   CD CC 51               CALL   execStr   
32CC   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /t{10}{20} ? +",0   
32DD   E1                     POP   HL   
32DE   E5                     PUSH   HL   
32DF   11 0B 00               LD   DE,11   
32E2   B7                     OR   A   
32E3   ED 52                  SBC   HL,DE   
32E5   7D                     LD   A,L   
32E6   B4                     OR   H   
32E7   CA 47 33               JP   Z,expectM_3100S127   
32EA   CD 7A 0F               CALL   printStr   
32ED   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ? +"   
3304   CD 7A 0F               CALL   printStr   
3307   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3316   21 0B 00               LD   hl,11   
3319   E5                     PUSH   hl   
331A   E5                     PUSH   hl   
331B   CD 77 10               CALL   run   
331E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3325   CD 7A 0F               CALL   printStr   
3328   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3335   E1                     POP   hl   
3336   E5                     PUSH   hl   
3337   E5                     PUSH   hl   
3338   CD 77 10               CALL   run   
333B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3346   76                     HALT      
3347                EXPECTM_3100S127:      
3347   E1                     POP   HL   
3348                          ;*Macro unroll:  test "\\{2}^", 2
3348   31 00 53               LD   SP,STACK   
334B   CD AE 0F               CALL   coldInit   
334E   CD CC 51               CALL   execStr   
3351   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
3357   E1                     POP   HL   
3358   E5                     PUSH   HL   
3359   11 02 00               LD   DE,2   
335C   B7                     OR   A   
335D   ED 52                  SBC   HL,DE   
335F   7D                     LD   A,L   
3360   B4                     OR   H   
3361   CA B6 33               JP   Z,expectM_3101S128   
3364   CD 7A 0F               CALL   printStr   
3367   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
3373   CD 7A 0F               CALL   printStr   
3376   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3385   21 02 00               LD   hl,2   
3388   E5                     PUSH   hl   
3389   E5                     PUSH   hl   
338A   CD 77 10               CALL   run   
338D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3394   CD 7A 0F               CALL   printStr   
3397   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A4   E1                     POP   hl   
33A5   E5                     PUSH   hl   
33A6   E5                     PUSH   hl   
33A7   CD 77 10               CALL   run   
33AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33B5   76                     HALT      
33B6                EXPECTM_3101S128:      
33B6   E1                     POP   HL   
33B7                          ;*Macro unroll:  test "\\a{2}^", 2
33B7   31 00 53               LD   SP,STACK   
33BA   CD AE 0F               CALL   coldInit   
33BD   CD CC 51               CALL   execStr   
33C0   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
33C7   E1                     POP   HL   
33C8   E5                     PUSH   HL   
33C9   11 02 00               LD   DE,2   
33CC   B7                     OR   A   
33CD   ED 52                  SBC   HL,DE   
33CF   7D                     LD   A,L   
33D0   B4                     OR   H   
33D1   CA 27 34               JP   Z,expectM_3102S129   
33D4   CD 7A 0F               CALL   printStr   
33D7   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
33E4   CD 7A 0F               CALL   printStr   
33E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33F6   21 02 00               LD   hl,2   
33F9   E5                     PUSH   hl   
33FA   E5                     PUSH   hl   
33FB   CD 77 10               CALL   run   
33FE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3405   CD 7A 0F               CALL   printStr   
3408   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3415   E1                     POP   hl   
3416   E5                     PUSH   hl   
3417   E5                     PUSH   hl   
3418   CD 77 10               CALL   run   
341B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3426   76                     HALT      
3427                EXPECTM_3102S129:      
3427   E1                     POP   HL   
3428                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3428   31 00 53               LD   SP,STACK   
342B   CD AE 0F               CALL   coldInit   
342E   CD CC 51               CALL   execStr   
3431   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
343B   E1                     POP   HL   
343C   E5                     PUSH   HL   
343D   11 05 00               LD   DE,5   
3440   B7                     OR   A   
3441   ED 52                  SBC   HL,DE   
3443   7D                     LD   A,L   
3444   B4                     OR   H   
3445   CA 9E 34               JP   Z,expectM_3103S130   
3448   CD 7A 0F               CALL   printStr   
344B   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
345B   CD 7A 0F               CALL   printStr   
345E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
346D   21 05 00               LD   hl,5   
3470   E5                     PUSH   hl   
3471   E5                     PUSH   hl   
3472   CD 77 10               CALL   run   
3475   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
347C   CD 7A 0F               CALL   printStr   
347F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
348C   E1                     POP   hl   
348D   E5                     PUSH   hl   
348E   E5                     PUSH   hl   
348F   CD 77 10               CALL   run   
3492   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
349D   76                     HALT      
349E                EXPECTM_3103S130:      
349E   E1                     POP   HL   
349F                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
349F   31 00 53               LD   SP,STACK   
34A2   CD AE 0F               CALL   coldInit   
34A5   CD CC 51               CALL   execStr   
34A8   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
34B4   E1                     POP   HL   
34B5   E5                     PUSH   HL   
34B6   11 05 00               LD   DE,5   
34B9   B7                     OR   A   
34BA   ED 52                  SBC   HL,DE   
34BC   7D                     LD   A,L   
34BD   B4                     OR   H   
34BE   CA 19 35               JP   Z,expectM_3104S131   
34C1   CD 7A 0F               CALL   printStr   
34C4   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
34D6   CD 7A 0F               CALL   printStr   
34D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E8   21 05 00               LD   hl,5   
34EB   E5                     PUSH   hl   
34EC   E5                     PUSH   hl   
34ED   CD 77 10               CALL   run   
34F0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34F7   CD 7A 0F               CALL   printStr   
34FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3507   E1                     POP   hl   
3508   E5                     PUSH   hl   
3509   E5                     PUSH   hl   
350A   CD 77 10               CALL   run   
350D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3518   76                     HALT      
3519                EXPECTM_3104S131:      
3519   E1                     POP   HL   
351A                          ;*Macro unroll:  test "\\a{{2}^}^", 2
351A   31 00 53               LD   SP,STACK   
351D   CD AE 0F               CALL   coldInit   
3520   CD CC 51               CALL   execStr   
3523   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
352D   E1                     POP   HL   
352E   E5                     PUSH   HL   
352F   11 02 00               LD   DE,2   
3532   B7                     OR   A   
3533   ED 52                  SBC   HL,DE   
3535   7D                     LD   A,L   
3536   B4                     OR   H   
3537   CA 90 35               JP   Z,expectM_3105S132   
353A   CD 7A 0F               CALL   printStr   
353D   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
354D   CD 7A 0F               CALL   printStr   
3550   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
355F   21 02 00               LD   hl,2   
3562   E5                     PUSH   hl   
3563   E5                     PUSH   hl   
3564   CD 77 10               CALL   run   
3567   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
356E   CD 7A 0F               CALL   printStr   
3571   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
357E   E1                     POP   hl   
357F   E5                     PUSH   hl   
3580   E5                     PUSH   hl   
3581   CD 77 10               CALL   run   
3584   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
358F   76                     HALT      
3590                EXPECTM_3105S132:      
3590   E1                     POP   HL   
3591                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3591   31 00 53               LD   SP,STACK   
3594   CD AE 0F               CALL   coldInit   
3597   CD CC 51               CALL   execStr   
359A   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
35A9   E1                     POP   HL   
35AA   E5                     PUSH   HL   
35AB   11 05 00               LD   DE,5   
35AE   B7                     OR   A   
35AF   ED 52                  SBC   HL,DE   
35B1   7D                     LD   A,L   
35B2   B4                     OR   H   
35B3   CA 11 36               JP   Z,expectM_3106S133   
35B6   CD 7A 0F               CALL   printStr   
35B9   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
35CE   CD 7A 0F               CALL   printStr   
35D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E0   21 05 00               LD   hl,5   
35E3   E5                     PUSH   hl   
35E4   E5                     PUSH   hl   
35E5   CD 77 10               CALL   run   
35E8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35EF   CD 7A 0F               CALL   printStr   
35F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35FF   E1                     POP   hl   
3600   E5                     PUSH   hl   
3601   E5                     PUSH   hl   
3602   CD 77 10               CALL   run   
3605   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3610   76                     HALT      
3611                EXPECTM_3106S133:      
3611   E1                     POP   HL   
3612                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3612   31 00 53               LD   SP,STACK   
3615   CD AE 0F               CALL   coldInit   
3618   CD CC 51               CALL   execStr   
361B   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
362B   E1                     POP   HL   
362C   E5                     PUSH   HL   
362D   11 01 00               LD   DE,1   
3630   B7                     OR   A   
3631   ED 52                  SBC   HL,DE   
3633   7D                     LD   A,L   
3634   B4                     OR   H   
3635   CA 94 36               JP   Z,expectM_3107S134   
3638   CD 7A 0F               CALL   printStr   
363B   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3651   CD 7A 0F               CALL   printStr   
3654   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3663   21 01 00               LD   hl,1   
3666   E5                     PUSH   hl   
3667   E5                     PUSH   hl   
3668   CD 77 10               CALL   run   
366B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3672   CD 7A 0F               CALL   printStr   
3675   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3682   E1                     POP   hl   
3683   E5                     PUSH   hl   
3684   E5                     PUSH   hl   
3685   CD 77 10               CALL   run   
3688   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3693   76                     HALT      
3694                EXPECTM_3107S134:      
3694   E1                     POP   HL   
3695                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3695   31 00 53               LD   SP,STACK   
3698   CD AE 0F               CALL   coldInit   
369B   CD CC 51               CALL   execStr   
369E   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
36B1   E1                     POP   HL   
36B2   E5                     PUSH   HL   
36B3   11 07 00               LD   DE,7   
36B6   B7                     OR   A   
36B7   ED 52                  SBC   HL,DE   
36B9   7D                     LD   A,L   
36BA   B4                     OR   H   
36BB   CA 1D 37               JP   Z,expectM_3108S135   
36BE   CD 7A 0F               CALL   printStr   
36C1   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
36DA   CD 7A 0F               CALL   printStr   
36DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36EC   21 07 00               LD   hl,7   
36EF   E5                     PUSH   hl   
36F0   E5                     PUSH   hl   
36F1   CD 77 10               CALL   run   
36F4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36FB   CD 7A 0F               CALL   printStr   
36FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
370B   E1                     POP   hl   
370C   E5                     PUSH   hl   
370D   E5                     PUSH   hl   
370E   CD 77 10               CALL   run   
3711   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
371C   76                     HALT      
371D                EXPECTM_3108S135:      
371D   E1                     POP   HL   
371E                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
371E   31 00 53               LD   SP,STACK   
3721   CD AE 0F               CALL   coldInit   
3724   CD CC 51               CALL   execStr   
3727   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
373C   E1                     POP   HL   
373D   E5                     PUSH   HL   
373E   11 06 00               LD   DE,6   
3741   B7                     OR   A   
3742   ED 52                  SBC   HL,DE   
3744   7D                     LD   A,L   
3745   B4                     OR   H   
3746   CA AA 37               JP   Z,expectM_3109S136   
3749   CD 7A 0F               CALL   printStr   
374C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3767   CD 7A 0F               CALL   printStr   
376A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3779   21 06 00               LD   hl,6   
377C   E5                     PUSH   hl   
377D   E5                     PUSH   hl   
377E   CD 77 10               CALL   run   
3781   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3788   CD 7A 0F               CALL   printStr   
378B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3798   E1                     POP   hl   
3799   E5                     PUSH   hl   
379A   E5                     PUSH   hl   
379B   CD 77 10               CALL   run   
379E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37A9   76                     HALT      
37AA                EXPECTM_3109S136:      
37AA   E1                     POP   HL   
37AB                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
37AB   31 00 53               LD   SP,STACK   
37AE   CD AE 0F               CALL   coldInit   
37B1   CD CC 51               CALL   execStr   
37B4   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
37C2   E1                     POP   HL   
37C3   E5                     PUSH   HL   
37C4   11 02 00               LD   DE,2   
37C7   B7                     OR   A   
37C8   ED 52                  SBC   HL,DE   
37CA   7D                     LD   A,L   
37CB   B4                     OR   H   
37CC   CA 29 38               JP   Z,expectM_3110S137   
37CF   CD 7A 0F               CALL   printStr   
37D2   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
37E6   CD 7A 0F               CALL   printStr   
37E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F8   21 02 00               LD   hl,2   
37FB   E5                     PUSH   hl   
37FC   E5                     PUSH   hl   
37FD   CD 77 10               CALL   run   
3800   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3807   CD 7A 0F               CALL   printStr   
380A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3817   E1                     POP   hl   
3818   E5                     PUSH   hl   
3819   E5                     PUSH   hl   
381A   CD 77 10               CALL   run   
381D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3828   76                     HALT      
3829                EXPECTM_3110S137:      
3829   E1                     POP   HL   
382A                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
382A   31 00 53               LD   SP,STACK   
382D   CD AE 0F               CALL   coldInit   
3830   CD CC 51               CALL   execStr   
3833   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3844   E1                     POP   HL   
3845   E5                     PUSH   HL   
3846   11 01 00               LD   DE,1   
3849   B7                     OR   A   
384A   ED 52                  SBC   HL,DE   
384C   7D                     LD   A,L   
384D   B4                     OR   H   
384E   CA AE 38               JP   Z,expectM_3111S138   
3851   CD 7A 0F               CALL   printStr   
3854   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
386B   CD 7A 0F               CALL   printStr   
386E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
387D   21 01 00               LD   hl,1   
3880   E5                     PUSH   hl   
3881   E5                     PUSH   hl   
3882   CD 77 10               CALL   run   
3885   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
388C   CD 7A 0F               CALL   printStr   
388F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
389C   E1                     POP   hl   
389D   E5                     PUSH   hl   
389E   E5                     PUSH   hl   
389F   CD 77 10               CALL   run   
38A2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
38AD   76                     HALT      
38AE                EXPECTM_3111S138:      
38AE   E1                     POP   HL   
38AF                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
38AF   31 00 53               LD   SP,STACK   
38B2   CD AE 0F               CALL   coldInit   
38B5   CD CC 51               CALL   execStr   
38B8   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
38CA   E1                     POP   HL   
38CB   E5                     PUSH   HL   
38CC   11 02 00               LD   DE,2   
38CF   B7                     OR   A   
38D0   ED 52                  SBC   HL,DE   
38D2   7D                     LD   A,L   
38D3   B4                     OR   H   
38D4   CA 35 39               JP   Z,expectM_3112S139   
38D7   CD 7A 0F               CALL   printStr   
38DA   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
38F2   CD 7A 0F               CALL   printStr   
38F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3904   21 02 00               LD   hl,2   
3907   E5                     PUSH   hl   
3908   E5                     PUSH   hl   
3909   CD 77 10               CALL   run   
390C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3913   CD 7A 0F               CALL   printStr   
3916   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3923   E1                     POP   hl   
3924   E5                     PUSH   hl   
3925   E5                     PUSH   hl   
3926   CD 77 10               CALL   run   
3929   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3934   76                     HALT      
3935                EXPECTM_3112S139:      
3935   E1                     POP   HL   
3936                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3936   31 00 53               LD   SP,STACK   
3939   CD AE 0F               CALL   coldInit   
393C   CD CC 51               CALL   execStr   
393F   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3952   E1                     POP   HL   
3953   E5                     PUSH   HL   
3954   11 02 00               LD   DE,2   
3957   B7                     OR   A   
3958   ED 52                  SBC   HL,DE   
395A   7D                     LD   A,L   
395B   B4                     OR   H   
395C   CA BE 39               JP   Z,expectM_3113S140   
395F   CD 7A 0F               CALL   printStr   
3962   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
397B   CD 7A 0F               CALL   printStr   
397E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
398D   21 02 00               LD   hl,2   
3990   E5                     PUSH   hl   
3991   E5                     PUSH   hl   
3992   CD 77 10               CALL   run   
3995   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
399C   CD 7A 0F               CALL   printStr   
399F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39AC   E1                     POP   hl   
39AD   E5                     PUSH   hl   
39AE   E5                     PUSH   hl   
39AF   CD 77 10               CALL   run   
39B2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
39BD   76                     HALT      
39BE                EXPECTM_3113S140:      
39BE   E1                     POP   HL   
39BF                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
39BF   31 00 53               LD   SP,STACK   
39C2   CD AE 0F               CALL   coldInit   
39C5   CD CC 51               CALL   execStr   
39C8   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
39DA   E1                     POP   HL   
39DB   E5                     PUSH   HL   
39DC   11 02 00               LD   DE,2   
39DF   B7                     OR   A   
39E0   ED 52                  SBC   HL,DE   
39E2   7D                     LD   A,L   
39E3   B4                     OR   H   
39E4   CA 45 3A               JP   Z,expectM_3114S141   
39E7   CD 7A 0F               CALL   printStr   
39EA   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3A02   CD 7A 0F               CALL   printStr   
3A05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A14   21 02 00               LD   hl,2   
3A17   E5                     PUSH   hl   
3A18   E5                     PUSH   hl   
3A19   CD 77 10               CALL   run   
3A1C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A23   CD 7A 0F               CALL   printStr   
3A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A33   E1                     POP   hl   
3A34   E5                     PUSH   hl   
3A35   E5                     PUSH   hl   
3A36   CD 77 10               CALL   run   
3A39   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A44   76                     HALT      
3A45                EXPECTM_3114S141:      
3A45   E1                     POP   HL   
3A46                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3A46   31 00 53               LD   SP,STACK   
3A49   CD AE 0F               CALL   coldInit   
3A4C   CD CC 51               CALL   execStr   
3A4F   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3A68   E1                     POP   HL   
3A69   E5                     PUSH   HL   
3A6A   11 05 00               LD   DE,5   
3A6D   B7                     OR   A   
3A6E   ED 52                  SBC   HL,DE   
3A70   7D                     LD   A,L   
3A71   B4                     OR   H   
3A72   CA DA 3A               JP   Z,expectM_3115S142   
3A75   CD 7A 0F               CALL   printStr   
3A78   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3A97   CD 7A 0F               CALL   printStr   
3A9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA9   21 05 00               LD   hl,5   
3AAC   E5                     PUSH   hl   
3AAD   E5                     PUSH   hl   
3AAE   CD 77 10               CALL   run   
3AB1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AB8   CD 7A 0F               CALL   printStr   
3ABB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC8   E1                     POP   hl   
3AC9   E5                     PUSH   hl   
3ACA   E5                     PUSH   hl   
3ACB   CD 77 10               CALL   run   
3ACE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AD9   76                     HALT      
3ADA                EXPECTM_3115S142:      
3ADA   E1                     POP   HL   
3ADB                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3ADB   31 00 53               LD   SP,STACK   
3ADE   CD AE 0F               CALL   coldInit   
3AE1   CD CC 51               CALL   execStr   
3AE4   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3AF4   E1                     POP   HL   
3AF5   E5                     PUSH   HL   
3AF6   11 02 00               LD   DE,2   
3AF9   B7                     OR   A   
3AFA   ED 52                  SBC   HL,DE   
3AFC   7D                     LD   A,L   
3AFD   B4                     OR   H   
3AFE   CA 5D 3B               JP   Z,expectM_3116S143   
3B01   CD 7A 0F               CALL   printStr   
3B04   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3B1A   CD 7A 0F               CALL   printStr   
3B1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2C   21 02 00               LD   hl,2   
3B2F   E5                     PUSH   hl   
3B30   E5                     PUSH   hl   
3B31   CD 77 10               CALL   run   
3B34   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B3B   CD 7A 0F               CALL   printStr   
3B3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4B   E1                     POP   hl   
3B4C   E5                     PUSH   hl   
3B4D   E5                     PUSH   hl   
3B4E   CD 77 10               CALL   run   
3B51   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B5C   76                     HALT      
3B5D                EXPECTM_3116S143:      
3B5D   E1                     POP   HL   
3B5E                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3B5E   31 00 53               LD   SP,STACK   
3B61   CD AE 0F               CALL   coldInit   
3B64   CD CC 51               CALL   execStr   
3B67   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3B7E   E1                     POP   HL   
3B7F   E5                     PUSH   HL   
3B80   11 64 00               LD   DE,100   
3B83   B7                     OR   A   
3B84   ED 52                  SBC   HL,DE   
3B86   7D                     LD   A,L   
3B87   B4                     OR   H   
3B88   CA EE 3B               JP   Z,expectM_3117S144   
3B8B   CD 7A 0F               CALL   printStr   
3B8E   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3BAB   CD 7A 0F               CALL   printStr   
3BAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BBD   21 64 00               LD   hl,100   
3BC0   E5                     PUSH   hl   
3BC1   E5                     PUSH   hl   
3BC2   CD 77 10               CALL   run   
3BC5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BCC   CD 7A 0F               CALL   printStr   
3BCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BDC   E1                     POP   hl   
3BDD   E5                     PUSH   hl   
3BDE   E5                     PUSH   hl   
3BDF   CD 77 10               CALL   run   
3BE2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BED   76                     HALT      
3BEE                EXPECTM_3117S144:      
3BEE   E1                     POP   HL   
3BEF                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3BEF   31 00 53               LD   SP,STACK   
3BF2   CD AE 0F               CALL   coldInit   
3BF5   CD CC 51               CALL   execStr   
3BF8   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3C10   E1                     POP   HL   
3C11   E5                     PUSH   HL   
3C12   11 01 00               LD   DE,1   
3C15   B7                     OR   A   
3C16   ED 52                  SBC   HL,DE   
3C18   7D                     LD   A,L   
3C19   B4                     OR   H   
3C1A   CA 81 3C               JP   Z,expectM_3118S145   
3C1D   CD 7A 0F               CALL   printStr   
3C20   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3C3E   CD 7A 0F               CALL   printStr   
3C41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C50   21 01 00               LD   hl,1   
3C53   E5                     PUSH   hl   
3C54   E5                     PUSH   hl   
3C55   CD 77 10               CALL   run   
3C58   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C5F   CD 7A 0F               CALL   printStr   
3C62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C6F   E1                     POP   hl   
3C70   E5                     PUSH   hl   
3C71   E5                     PUSH   hl   
3C72   CD 77 10               CALL   run   
3C75   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C80   76                     HALT      
3C81                EXPECTM_3118S145:      
3C81   E1                     POP   HL   
3C82                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3C82   31 00 53               LD   SP,STACK   
3C85   CD AE 0F               CALL   coldInit   
3C88   CD CC 51               CALL   execStr   
3C8B   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3CA4   E1                     POP   HL   
3CA5   E5                     PUSH   HL   
3CA6   11 02 00               LD   DE,2   
3CA9   B7                     OR   A   
3CAA   ED 52                  SBC   HL,DE   
3CAC   7D                     LD   A,L   
3CAD   B4                     OR   H   
3CAE   CA 16 3D               JP   Z,expectM_3119S146   
3CB1   CD 7A 0F               CALL   printStr   
3CB4   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3CD3   CD 7A 0F               CALL   printStr   
3CD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CE5   21 02 00               LD   hl,2   
3CE8   E5                     PUSH   hl   
3CE9   E5                     PUSH   hl   
3CEA   CD 77 10               CALL   run   
3CED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CF4   CD 7A 0F               CALL   printStr   
3CF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D04   E1                     POP   hl   
3D05   E5                     PUSH   hl   
3D06   E5                     PUSH   hl   
3D07   CD 77 10               CALL   run   
3D0A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D15   76                     HALT      
3D16                EXPECTM_3119S146:      
3D16   E1                     POP   HL   
3D17                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ?}^ +", 11
3D17   31 00 53               LD   SP,STACK   
3D1A   CD AE 0F               CALL   coldInit   
3D1D   CD CC 51               CALL   execStr   
3D20   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ?}^ +",0   
3D3D   E1                     POP   HL   
3D3E   E5                     PUSH   HL   
3D3F   11 0B 00               LD   DE,11   
3D42   B7                     OR   A   
3D43   ED 52                  SBC   HL,DE   
3D45   7D                     LD   A,L   
3D46   B4                     OR   H   
3D47   CA B3 3D               JP   Z,expectM_3120S147   
3D4A   CD 7A 0F               CALL   printStr   
3D4D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ?}^ +"   
3D70   CD 7A 0F               CALL   printStr   
3D73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D82   21 0B 00               LD   hl,11   
3D85   E5                     PUSH   hl   
3D86   E5                     PUSH   hl   
3D87   CD 77 10               CALL   run   
3D8A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D91   CD 7A 0F               CALL   printStr   
3D94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DA1   E1                     POP   hl   
3DA2   E5                     PUSH   hl   
3DA3   E5                     PUSH   hl   
3DA4   CD 77 10               CALL   run   
3DA7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DB2   76                     HALT      
3DB3                EXPECTM_3120S147:      
3DB3   E1                     POP   HL   
3DB4                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ?}^ +", 21
3DB4   31 00 53               LD   SP,STACK   
3DB7   CD AE 0F               CALL   coldInit   
3DBA   CD CC 51               CALL   execStr   
3DBD   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ?}^ +",0   
3DDA   E1                     POP   HL   
3DDB   E5                     PUSH   HL   
3DDC   11 15 00               LD   DE,21   
3DDF   B7                     OR   A   
3DE0   ED 52                  SBC   HL,DE   
3DE2   7D                     LD   A,L   
3DE3   B4                     OR   H   
3DE4   CA 50 3E               JP   Z,expectM_3121S148   
3DE7   CD 7A 0F               CALL   printStr   
3DEA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ?}^ +"   
3E0D   CD 7A 0F               CALL   printStr   
3E10   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E1F   21 15 00               LD   hl,21   
3E22   E5                     PUSH   hl   
3E23   E5                     PUSH   hl   
3E24   CD 77 10               CALL   run   
3E27   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E2E   CD 7A 0F               CALL   printStr   
3E31   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E3E   E1                     POP   hl   
3E3F   E5                     PUSH   hl   
3E40   E5                     PUSH   hl   
3E41   CD 77 10               CALL   run   
3E44   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E4F   76                     HALT      
3E50                EXPECTM_3121S148:      
3E50   E1                     POP   HL   
3E51                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E51   31 00 53               LD   SP,STACK   
3E54   CD AE 0F               CALL   coldInit   
3E57   CD CC 51               CALL   execStr   
3E5A   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3E68   E1                     POP   HL   
3E69   E5                     PUSH   HL   
3E6A   11 14 00               LD   DE,20   
3E6D   B7                     OR   A   
3E6E   ED 52                  SBC   HL,DE   
3E70   7D                     LD   A,L   
3E71   B4                     OR   H   
3E72   CA CF 3E               JP   Z,expectM_3122S149   
3E75   CD 7A 0F               CALL   printStr   
3E78   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3E8C   CD 7A 0F               CALL   printStr   
3E8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E9E   21 14 00               LD   hl,20   
3EA1   E5                     PUSH   hl   
3EA2   E5                     PUSH   hl   
3EA3   CD 77 10               CALL   run   
3EA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3EAD   CD 7A 0F               CALL   printStr   
3EB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EBD   E1                     POP   hl   
3EBE   E5                     PUSH   hl   
3EBF   E5                     PUSH   hl   
3EC0   CD 77 10               CALL   run   
3EC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3ECE   76                     HALT      
3ECF                EXPECTM_3122S149:      
3ECF   E1                     POP   HL   
3ED0                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3ED0   31 00 53               LD   SP,STACK   
3ED3   CD AE 0F               CALL   coldInit   
3ED6   CD CC 51               CALL   execStr   
3ED9   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3EEB   E1                     POP   HL   
3EEC   E5                     PUSH   HL   
3EED   11 04 00               LD   DE,4   
3EF0   B7                     OR   A   
3EF1   ED 52                  SBC   HL,DE   
3EF3   7D                     LD   A,L   
3EF4   B4                     OR   H   
3EF5   CA 56 3F               JP   Z,expectM_3123S150   
3EF8   CD 7A 0F               CALL   printStr   
3EFB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3F13   CD 7A 0F               CALL   printStr   
3F16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F25   21 04 00               LD   hl,4   
3F28   E5                     PUSH   hl   
3F29   E5                     PUSH   hl   
3F2A   CD 77 10               CALL   run   
3F2D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F34   CD 7A 0F               CALL   printStr   
3F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F44   E1                     POP   hl   
3F45   E5                     PUSH   hl   
3F46   E5                     PUSH   hl   
3F47   CD 77 10               CALL   run   
3F4A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F55   76                     HALT      
3F56                EXPECTM_3123S150:      
3F56   E1                     POP   HL   
3F57                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3F57   31 00 53               LD   SP,STACK   
3F5A   CD AE 0F               CALL   coldInit   
3F5D   CD CC 51               CALL   execStr   
3F60   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3F6F   E1                     POP   HL   
3F70   E5                     PUSH   HL   
3F71   11 02 00               LD   DE,2   
3F74   B7                     OR   A   
3F75   ED 52                  SBC   HL,DE   
3F77   7D                     LD   A,L   
3F78   B4                     OR   H   
3F79   CA D7 3F               JP   Z,expectM_3124S151   
3F7C   CD 7A 0F               CALL   printStr   
3F7F   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3F94   CD 7A 0F               CALL   printStr   
3F97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA6   21 02 00               LD   hl,2   
3FA9   E5                     PUSH   hl   
3FAA   E5                     PUSH   hl   
3FAB   CD 77 10               CALL   run   
3FAE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FB5   CD 7A 0F               CALL   printStr   
3FB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FC5   E1                     POP   hl   
3FC6   E5                     PUSH   hl   
3FC7   E5                     PUSH   hl   
3FC8   CD 77 10               CALL   run   
3FCB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FD6   76                     HALT      
3FD7                EXPECTM_3124S151:      
3FD7   E1                     POP   HL   
3FD8                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3FD8   31 00 53               LD   SP,STACK   
3FDB   CD AE 0F               CALL   coldInit   
3FDE   CD CC 51               CALL   execStr   
3FE1   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3FF3   E1                     POP   HL   
3FF4   E5                     PUSH   HL   
3FF5   11 42 00               LD   DE,66   
3FF8   B7                     OR   A   
3FF9   ED 52                  SBC   HL,DE   
3FFB   7D                     LD   A,L   
3FFC   B4                     OR   H   
3FFD   CA 5E 40               JP   Z,expectM_3125S152   
4000   CD 7A 0F               CALL   printStr   
4003   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
401B   CD 7A 0F               CALL   printStr   
401E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
402D   21 42 00               LD   hl,66   
4030   E5                     PUSH   hl   
4031   E5                     PUSH   hl   
4032   CD 77 10               CALL   run   
4035   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
403C   CD 7A 0F               CALL   printStr   
403F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404C   E1                     POP   hl   
404D   E5                     PUSH   hl   
404E   E5                     PUSH   hl   
404F   CD 77 10               CALL   run   
4052   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
405D   76                     HALT      
405E                EXPECTM_3125S152:      
405E   E1                     POP   HL   
405F                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
405F   31 00 53               LD   SP,STACK   
4062   CD AE 0F               CALL   coldInit   
4065   CD CC 51               CALL   execStr   
4068   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
407C   E1                     POP   HL   
407D   E5                     PUSH   HL   
407E   11 0A 00               LD   DE,10   
4081   B7                     OR   A   
4082   ED 52                  SBC   HL,DE   
4084   7D                     LD   A,L   
4085   B4                     OR   H   
4086   CA E9 40               JP   Z,expectM_3126S153   
4089   CD 7A 0F               CALL   printStr   
408C   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
40A6   CD 7A 0F               CALL   printStr   
40A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40B8   21 0A 00               LD   hl,10   
40BB   E5                     PUSH   hl   
40BC   E5                     PUSH   hl   
40BD   CD 77 10               CALL   run   
40C0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40C7   CD 7A 0F               CALL   printStr   
40CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40D7   E1                     POP   hl   
40D8   E5                     PUSH   hl   
40D9   E5                     PUSH   hl   
40DA   CD 77 10               CALL   run   
40DD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40E8   76                     HALT      
40E9                EXPECTM_3126S153:      
40E9   E1                     POP   HL   
40EA                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
40EA   31 00 53               LD   SP,STACK   
40ED   CD AE 0F               CALL   coldInit   
40F0   CD CC 51               CALL   execStr   
40F3   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
410E   E1                     POP   HL   
410F   E5                     PUSH   HL   
4110   11 0A 00               LD   DE,10   
4113   B7                     OR   A   
4114   ED 52                  SBC   HL,DE   
4116   7D                     LD   A,L   
4117   B4                     OR   H   
4118   CA 82 41               JP   Z,expectM_3127S154   
411B   CD 7A 0F               CALL   printStr   
411E   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
413F   CD 7A 0F               CALL   printStr   
4142   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4151   21 0A 00               LD   hl,10   
4154   E5                     PUSH   hl   
4155   E5                     PUSH   hl   
4156   CD 77 10               CALL   run   
4159   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4160   CD 7A 0F               CALL   printStr   
4163   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4170   E1                     POP   hl   
4171   E5                     PUSH   hl   
4172   E5                     PUSH   hl   
4173   CD 77 10               CALL   run   
4176   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4181   76                     HALT      
4182                EXPECTM_3127S154:      
4182   E1                     POP   HL   
4183                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
4183   31 00 53               LD   SP,STACK   
4186   CD AE 0F               CALL   coldInit   
4189   CD CC 51               CALL   execStr   
418C   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
41AB   E1                     POP   HL   
41AC   E5                     PUSH   HL   
41AD   11 0A 00               LD   DE,10   
41B0   B7                     OR   A   
41B1   ED 52                  SBC   HL,DE   
41B3   7D                     LD   A,L   
41B4   B4                     OR   H   
41B5   CA 23 42               JP   Z,expectM_3128S155   
41B8   CD 7A 0F               CALL   printStr   
41BB   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
41E0   CD 7A 0F               CALL   printStr   
41E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41F2   21 0A 00               LD   hl,10   
41F5   E5                     PUSH   hl   
41F6   E5                     PUSH   hl   
41F7   CD 77 10               CALL   run   
41FA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4201   CD 7A 0F               CALL   printStr   
4204   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4211   E1                     POP   hl   
4212   E5                     PUSH   hl   
4213   E5                     PUSH   hl   
4214   CD 77 10               CALL   run   
4217   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4222   76                     HALT      
4223                EXPECTM_3128S155:      
4223   E1                     POP   HL   
4224                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
4224   31 00 53               LD   SP,STACK   
4227   CD AE 0F               CALL   coldInit   
422A   CD CC 51               CALL   execStr   
422D   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
424C   E1                     POP   HL   
424D   E5                     PUSH   HL   
424E   11 14 00               LD   DE,20   
4251   B7                     OR   A   
4252   ED 52                  SBC   HL,DE   
4254   7D                     LD   A,L   
4255   B4                     OR   H   
4256   CA C4 42               JP   Z,expectM_3129S156   
4259   CD 7A 0F               CALL   printStr   
425C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
4281   CD 7A 0F               CALL   printStr   
4284   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4293   21 14 00               LD   hl,20   
4296   E5                     PUSH   hl   
4297   E5                     PUSH   hl   
4298   CD 77 10               CALL   run   
429B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42A2   CD 7A 0F               CALL   printStr   
42A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B2   E1                     POP   hl   
42B3   E5                     PUSH   hl   
42B4   E5                     PUSH   hl   
42B5   CD 77 10               CALL   run   
42B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
42C3   76                     HALT      
42C4                EXPECTM_3129S156:      
42C4   E1                     POP   HL   
42C5                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
42C5   31 00 53               LD   SP,STACK   
42C8   CD AE 0F               CALL   coldInit   
42CB   CD CC 51               CALL   execStr   
42CE   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
42E6   E1                     POP   HL   
42E7   E5                     PUSH   HL   
42E8   11 06 00               LD   DE,6   
42EB   B7                     OR   A   
42EC   ED 52                  SBC   HL,DE   
42EE   7D                     LD   A,L   
42EF   B4                     OR   H   
42F0   CA 57 43               JP   Z,expectM_3130S157   
42F3   CD 7A 0F               CALL   printStr   
42F6   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
4314   CD 7A 0F               CALL   printStr   
4317   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4326   21 06 00               LD   hl,6   
4329   E5                     PUSH   hl   
432A   E5                     PUSH   hl   
432B   CD 77 10               CALL   run   
432E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4335   CD 7A 0F               CALL   printStr   
4338   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4345   E1                     POP   hl   
4346   E5                     PUSH   hl   
4347   E5                     PUSH   hl   
4348   CD 77 10               CALL   run   
434B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4356   76                     HALT      
4357                EXPECTM_3130S157:      
4357   E1                     POP   HL   
4358                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4358   31 00 53               LD   SP,STACK   
435B   CD AE 0F               CALL   coldInit   
435E   CD CC 51               CALL   execStr   
4361   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
437C   E1                     POP   HL   
437D   E5                     PUSH   HL   
437E   11 02 00               LD   DE,2   
4381   B7                     OR   A   
4382   ED 52                  SBC   HL,DE   
4384   7D                     LD   A,L   
4385   B4                     OR   H   
4386   CA F0 43               JP   Z,expectM_3131S158   
4389   CD 7A 0F               CALL   printStr   
438C   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
43AD   CD 7A 0F               CALL   printStr   
43B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43BF   21 02 00               LD   hl,2   
43C2   E5                     PUSH   hl   
43C3   E5                     PUSH   hl   
43C4   CD 77 10               CALL   run   
43C7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43CE   CD 7A 0F               CALL   printStr   
43D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DE   E1                     POP   hl   
43DF   E5                     PUSH   hl   
43E0   E5                     PUSH   hl   
43E1   CD 77 10               CALL   run   
43E4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43EF   76                     HALT      
43F0                EXPECTM_3131S158:      
43F0   E1                     POP   HL   
43F1                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
43F1   31 00 53               LD   SP,STACK   
43F4   CD AE 0F               CALL   coldInit   
43F7   CD CC 51               CALL   execStr   
43FA   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4420   E1                     POP   HL   
4421   E5                     PUSH   HL   
4422   11 0A 00               LD   DE,10   
4425   B7                     OR   A   
4426   ED 52                  SBC   HL,DE   
4428   7D                     LD   A,L   
4429   B4                     OR   H   
442A   CA 9F 44               JP   Z,expectM_3132S159   
442D   CD 7A 0F               CALL   printStr   
4430   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
445C   CD 7A 0F               CALL   printStr   
445F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446E   21 0A 00               LD   hl,10   
4471   E5                     PUSH   hl   
4472   E5                     PUSH   hl   
4473   CD 77 10               CALL   run   
4476   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
447D   CD 7A 0F               CALL   printStr   
4480   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
448D   E1                     POP   hl   
448E   E5                     PUSH   hl   
448F   E5                     PUSH   hl   
4490   CD 77 10               CALL   run   
4493   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
449E   76                     HALT      
449F                EXPECTM_3132S159:      
449F   E1                     POP   HL   
44A0                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /br )^ j ", 10
44A0   31 00 53               LD   SP,STACK   
44A3   CD AE 0F               CALL   coldInit   
44A6   CD CC 51               CALL   execStr   
44A9   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /br )^ j ",0   
44CC   E1                     POP   HL   
44CD   E5                     PUSH   HL   
44CE   11 0A 00               LD   DE,10   
44D1   B7                     OR   A   
44D2   ED 52                  SBC   HL,DE   
44D4   7D                     LD   A,L   
44D5   B4                     OR   H   
44D6   CA 48 45               JP   Z,expectM_3133S160   
44D9   CD 7A 0F               CALL   printStr   
44DC   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /br )^ j "   
4505   CD 7A 0F               CALL   printStr   
4508   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4517   21 0A 00               LD   hl,10   
451A   E5                     PUSH   hl   
451B   E5                     PUSH   hl   
451C   CD 77 10               CALL   run   
451F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4526   CD 7A 0F               CALL   printStr   
4529   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4536   E1                     POP   hl   
4537   E5                     PUSH   hl   
4538   E5                     PUSH   hl   
4539   CD 77 10               CALL   run   
453C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4547   76                     HALT      
4548                EXPECTM_3133S160:      
4548   E1                     POP   HL   
4549                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t", 12
4549   31 00 53               LD   SP,STACK   
454C   CD AE 0F               CALL   coldInit   
454F   CD CC 51               CALL   execStr   
4552   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t",0   
457C   E1                     POP   HL   
457D   E5                     PUSH   HL   
457E   11 0C 00               LD   DE,12   
4581   B7                     OR   A   
4582   ED 52                  SBC   HL,DE   
4584   7D                     LD   A,L   
4585   B4                     OR   H   
4586   CA FF 45               JP   Z,expectM_3134S161   
4589   CD 7A 0F               CALL   printStr   
458C   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t"   
45BC   CD 7A 0F               CALL   printStr   
45BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45CE   21 0C 00               LD   hl,12   
45D1   E5                     PUSH   hl   
45D2   E5                     PUSH   hl   
45D3   CD 77 10               CALL   run   
45D6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45DD   CD 7A 0F               CALL   printStr   
45E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45ED   E1                     POP   hl   
45EE   E5                     PUSH   hl   
45EF   E5                     PUSH   hl   
45F0   CD 77 10               CALL   run   
45F3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
45FE   76                     HALT      
45FF                EXPECTM_3134S161:      
45FF   E1                     POP   HL   
4600                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
4600   31 00 53               LD   SP,STACK   
4603   CD AE 0F               CALL   coldInit   
4606   CD CC 51               CALL   execStr   
4609   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4634   E1                     POP   HL   
4635   E5                     PUSH   HL   
4636   11 06 00               LD   DE,6   
4639   B7                     OR   A   
463A   ED 52                  SBC   HL,DE   
463C   7D                     LD   A,L   
463D   B4                     OR   H   
463E   CA B8 46               JP   Z,expectM_3135S162   
4641   CD 7A 0F               CALL   printStr   
4644   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4675   CD 7A 0F               CALL   printStr   
4678   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4687   21 06 00               LD   hl,6   
468A   E5                     PUSH   hl   
468B   E5                     PUSH   hl   
468C   CD 77 10               CALL   run   
468F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4696   CD 7A 0F               CALL   printStr   
4699   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46A6   E1                     POP   hl   
46A7   E5                     PUSH   hl   
46A8   E5                     PUSH   hl   
46A9   CD 77 10               CALL   run   
46AC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46B7   76                     HALT      
46B8                EXPECTM_3135S162:      
46B8   E1                     POP   HL   
46B9                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
46B9   31 00 53               LD   SP,STACK   
46BC   CD AE 0F               CALL   coldInit   
46BF   CD CC 51               CALL   execStr   
46C2   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
46D6   E1                     POP   HL   
46D7   E5                     PUSH   HL   
46D8   11 03 00               LD   DE,3   
46DB   B7                     OR   A   
46DC   ED 52                  SBC   HL,DE   
46DE   7D                     LD   A,L   
46DF   B4                     OR   H   
46E0   CA 43 47               JP   Z,expectM_3136S163   
46E3   CD 7A 0F               CALL   printStr   
46E6   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
4700   CD 7A 0F               CALL   printStr   
4703   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4712   21 03 00               LD   hl,3   
4715   E5                     PUSH   hl   
4716   E5                     PUSH   hl   
4717   CD 77 10               CALL   run   
471A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4721   CD 7A 0F               CALL   printStr   
4724   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4731   E1                     POP   hl   
4732   E5                     PUSH   hl   
4733   E5                     PUSH   hl   
4734   CD 77 10               CALL   run   
4737   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4742   76                     HALT      
4743                EXPECTM_3136S163:      
4743   E1                     POP   HL   
4744                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4744   31 00 53               LD   SP,STACK   
4747   CD AE 0F               CALL   coldInit   
474A   CD CC 51               CALL   execStr   
474D   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4761   E1                     POP   HL   
4762   E5                     PUSH   HL   
4763   11 01 00               LD   DE,1   
4766   B7                     OR   A   
4767   ED 52                  SBC   HL,DE   
4769   7D                     LD   A,L   
476A   B4                     OR   H   
476B   CA CE 47               JP   Z,expectM_3137S164   
476E   CD 7A 0F               CALL   printStr   
4771   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
478B   CD 7A 0F               CALL   printStr   
478E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
479D   21 01 00               LD   hl,1   
47A0   E5                     PUSH   hl   
47A1   E5                     PUSH   hl   
47A2   CD 77 10               CALL   run   
47A5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47AC   CD 7A 0F               CALL   printStr   
47AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BC   E1                     POP   hl   
47BD   E5                     PUSH   hl   
47BE   E5                     PUSH   hl   
47BF   CD 77 10               CALL   run   
47C2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
47CD   76                     HALT      
47CE                EXPECTM_3137S164:      
47CE   E1                     POP   HL   
47CF                          ;*Macro unroll:  test "_A 1 - /ad", NUL
47CF   31 00 53               LD   SP,STACK   
47D2   CD AE 0F               CALL   coldInit   
47D5   CD CC 51               CALL   execStr   
47D8   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
47E3   E1                     POP   HL   
47E4   E5                     PUSH   HL   
47E5   11 00 00               LD   DE,NUL   
47E8   B7                     OR   A   
47E9   ED 52                  SBC   HL,DE   
47EB   7D                     LD   A,L   
47EC   B4                     OR   H   
47ED   CA 47 48               JP   Z,expectM_3138S165   
47F0   CD 7A 0F               CALL   printStr   
47F3   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
4804   CD 7A 0F               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 00 00               LD   hl,NUL   
4819   E5                     PUSH   hl   
481A   E5                     PUSH   hl   
481B   CD 77 10               CALL   run   
481E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4825   CD 7A 0F               CALL   printStr   
4828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4835   E1                     POP   hl   
4836   E5                     PUSH   hl   
4837   E5                     PUSH   hl   
4838   CD 77 10               CALL   run   
483B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4846   76                     HALT      
4847                EXPECTM_3138S165:      
4847   E1                     POP   HL   
4848                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4848   31 00 53               LD   SP,STACK   
484B   CD AE 0F               CALL   coldInit   
484E   CD CC 51               CALL   execStr   
4851   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
485C   E1                     POP   HL   
485D   E5                     PUSH   HL   
485E   11 00 00               LD   DE,NUL   
4861   B7                     OR   A   
4862   ED 52                  SBC   HL,DE   
4864   7D                     LD   A,L   
4865   B4                     OR   H   
4866   CA C0 48               JP   Z,expectM_3139S166   
4869   CD 7A 0F               CALL   printStr   
486C   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
487D   CD 7A 0F               CALL   printStr   
4880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
488F   21 00 00               LD   hl,NUL   
4892   E5                     PUSH   hl   
4893   E5                     PUSH   hl   
4894   CD 77 10               CALL   run   
4897   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
489E   CD 7A 0F               CALL   printStr   
48A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48AE   E1                     POP   hl   
48AF   E5                     PUSH   hl   
48B0   E5                     PUSH   hl   
48B1   CD 77 10               CALL   run   
48B4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48BF   76                     HALT      
48C0                EXPECTM_3139S166:      
48C0   E1                     POP   HL   
48C1                          ;*Macro unroll:  test "_a 1 - /ad", NUL
48C1   31 00 53               LD   SP,STACK   
48C4   CD AE 0F               CALL   coldInit   
48C7   CD CC 51               CALL   execStr   
48CA   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
48D5   E1                     POP   HL   
48D6   E5                     PUSH   HL   
48D7   11 00 00               LD   DE,NUL   
48DA   B7                     OR   A   
48DB   ED 52                  SBC   HL,DE   
48DD   7D                     LD   A,L   
48DE   B4                     OR   H   
48DF   CA 39 49               JP   Z,expectM_3140S167   
48E2   CD 7A 0F               CALL   printStr   
48E5   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
48F6   CD 7A 0F               CALL   printStr   
48F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4908   21 00 00               LD   hl,NUL   
490B   E5                     PUSH   hl   
490C   E5                     PUSH   hl   
490D   CD 77 10               CALL   run   
4910   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4917   CD 7A 0F               CALL   printStr   
491A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4927   E1                     POP   hl   
4928   E5                     PUSH   hl   
4929   E5                     PUSH   hl   
492A   CD 77 10               CALL   run   
492D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4938   76                     HALT      
4939                EXPECTM_3140S167:      
4939   E1                     POP   HL   
493A                          ;*Macro unroll:  test "_z 1 + /ad", NUL
493A   31 00 53               LD   SP,STACK   
493D   CD AE 0F               CALL   coldInit   
4940   CD CC 51               CALL   execStr   
4943   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
494E   E1                     POP   HL   
494F   E5                     PUSH   HL   
4950   11 00 00               LD   DE,NUL   
4953   B7                     OR   A   
4954   ED 52                  SBC   HL,DE   
4956   7D                     LD   A,L   
4957   B4                     OR   H   
4958   CA B2 49               JP   Z,expectM_3141S168   
495B   CD 7A 0F               CALL   printStr   
495E   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
496F   CD 7A 0F               CALL   printStr   
4972   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4981   21 00 00               LD   hl,NUL   
4984   E5                     PUSH   hl   
4985   E5                     PUSH   hl   
4986   CD 77 10               CALL   run   
4989   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4990   CD 7A 0F               CALL   printStr   
4993   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49A0   E1                     POP   hl   
49A1   E5                     PUSH   hl   
49A2   E5                     PUSH   hl   
49A3   CD 77 10               CALL   run   
49A6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
49B1   76                     HALT      
49B2                EXPECTM_3141S168:      
49B2   E1                     POP   HL   
49B3                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
49B3   31 00 53               LD   SP,STACK   
49B6   CD AE 0F               CALL   coldInit   
49B9   CD CC 51               CALL   execStr   
49BC   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
49C3   E1                     POP   HL   
49C4   E5                     PUSH   HL   
49C5   11 66 55               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49C8   B7                     OR   A   
49C9   ED 52                  SBC   HL,DE   
49CB   7D                     LD   A,L   
49CC   B4                     OR   H   
49CD   CA 23 4A               JP   Z,expectM_3142S169   
49D0   CD 7A 0F               CALL   printStr   
49D3   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
49E0   CD 7A 0F               CALL   printStr   
49E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F2   21 66 55               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49F5   E5                     PUSH   hl   
49F6   E5                     PUSH   hl   
49F7   CD 77 10               CALL   run   
49FA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A01   CD 7A 0F               CALL   printStr   
4A04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A11   E1                     POP   hl   
4A12   E5                     PUSH   hl   
4A13   E5                     PUSH   hl   
4A14   CD 77 10               CALL   run   
4A17   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A22   76                     HALT      
4A23                EXPECTM_3142S169:      
4A23   E1                     POP   HL   
4A24                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4A24   31 00 53               LD   SP,STACK   
4A27   CD AE 0F               CALL   coldInit   
4A2A   CD CC 51               CALL   execStr   
4A2D   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4A34   E1                     POP   HL   
4A35   E5                     PUSH   HL   
4A36   11 34 55               LD   DE,VARS + ("Z"-"A"+1)*2   
4A39   B7                     OR   A   
4A3A   ED 52                  SBC   HL,DE   
4A3C   7D                     LD   A,L   
4A3D   B4                     OR   H   
4A3E   CA 94 4A               JP   Z,expectM_3143S170   
4A41   CD 7A 0F               CALL   printStr   
4A44   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
4A51   CD 7A 0F               CALL   printStr   
4A54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A63   21 34 55               LD   hl,VARS + ("Z"-"A"+1)*2   
4A66   E5                     PUSH   hl   
4A67   E5                     PUSH   hl   
4A68   CD 77 10               CALL   run   
4A6B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A72   CD 7A 0F               CALL   printStr   
4A75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A82   E1                     POP   hl   
4A83   E5                     PUSH   hl   
4A84   E5                     PUSH   hl   
4A85   CD 77 10               CALL   run   
4A88   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A93   76                     HALT      
4A94                EXPECTM_3143S170:      
4A94   E1                     POP   HL   
4A95                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4A95   31 00 53               LD   SP,STACK   
4A98   CD AE 0F               CALL   coldInit   
4A9B   CD CC 51               CALL   execStr   
4A9E   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4AA5   E1                     POP   HL   
4AA6   E5                     PUSH   HL   
4AA7   11 32 55               LD   DE,VARS + ("Z"-"A")*2   
4AAA   B7                     OR   A   
4AAB   ED 52                  SBC   HL,DE   
4AAD   7D                     LD   A,L   
4AAE   B4                     OR   H   
4AAF   CA 05 4B               JP   Z,expectM_3144S171   
4AB2   CD 7A 0F               CALL   printStr   
4AB5   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
4AC2   CD 7A 0F               CALL   printStr   
4AC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AD4   21 32 55               LD   hl,VARS + ("Z"-"A")*2   
4AD7   E5                     PUSH   hl   
4AD8   E5                     PUSH   hl   
4AD9   CD 77 10               CALL   run   
4ADC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AE3   CD 7A 0F               CALL   printStr   
4AE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF3   E1                     POP   hl   
4AF4   E5                     PUSH   hl   
4AF5   E5                     PUSH   hl   
4AF6   CD 77 10               CALL   run   
4AF9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B04   76                     HALT      
4B05                EXPECTM_3144S171:      
4B05   E1                     POP   HL   
4B06                          ;*Macro unroll:  test "_A /ad", VARS
4B06   31 00 53               LD   SP,STACK   
4B09   CD AE 0F               CALL   coldInit   
4B0C   CD CC 51               CALL   execStr   
4B0F   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4B16   E1                     POP   HL   
4B17   E5                     PUSH   HL   
4B18   11 00 55               LD   DE,VARS   
4B1B   B7                     OR   A   
4B1C   ED 52                  SBC   HL,DE   
4B1E   7D                     LD   A,L   
4B1F   B4                     OR   H   
4B20   CA 76 4B               JP   Z,expectM_3145S172   
4B23   CD 7A 0F               CALL   printStr   
4B26   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4B33   CD 7A 0F               CALL   printStr   
4B36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B45   21 00 55               LD   hl,VARS   
4B48   E5                     PUSH   hl   
4B49   E5                     PUSH   hl   
4B4A   CD 77 10               CALL   run   
4B4D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B54   CD 7A 0F               CALL   printStr   
4B57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B64   E1                     POP   hl   
4B65   E5                     PUSH   hl   
4B66   E5                     PUSH   hl   
4B67   CD 77 10               CALL   run   
4B6A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B75   76                     HALT      
4B76                EXPECTM_3145S172:      
4B76   E1                     POP   HL   
4B77                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4B77   31 00 53               LD   SP,STACK   
4B7A   CD AE 0F               CALL   coldInit   
4B7D   CD CC 51               CALL   execStr   
4B80   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4B8D   E1                     POP   HL   
4B8E   E5                     PUSH   HL   
4B8F   11 01 00               LD   DE,1   
4B92   B7                     OR   A   
4B93   ED 52                  SBC   HL,DE   
4B95   7D                     LD   A,L   
4B96   B4                     OR   H   
4B97   CA F3 4B               JP   Z,expectM_3146S173   
4B9A   CD 7A 0F               CALL   printStr   
4B9D   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4BB0   CD 7A 0F               CALL   printStr   
4BB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BC2   21 01 00               LD   hl,1   
4BC5   E5                     PUSH   hl   
4BC6   E5                     PUSH   hl   
4BC7   CD 77 10               CALL   run   
4BCA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BD1   CD 7A 0F               CALL   printStr   
4BD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BE1   E1                     POP   hl   
4BE2   E5                     PUSH   hl   
4BE3   E5                     PUSH   hl   
4BE4   CD 77 10               CALL   run   
4BE7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4BF2   76                     HALT      
4BF3                EXPECTM_3146S173:      
4BF3   E1                     POP   HL   
4BF4                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4BF4   31 00 53               LD   SP,STACK   
4BF7   CD AE 0F               CALL   coldInit   
4BFA   CD CC 51               CALL   execStr   
4BFD   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4C11   E1                     POP   HL   
4C12   E5                     PUSH   HL   
4C13   11 03 00               LD   DE,3   
4C16   B7                     OR   A   
4C17   ED 52                  SBC   HL,DE   
4C19   7D                     LD   A,L   
4C1A   B4                     OR   H   
4C1B   CA 7E 4C               JP   Z,expectM_3147S174   
4C1E   CD 7A 0F               CALL   printStr   
4C21   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4C3B   CD 7A 0F               CALL   printStr   
4C3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C4D   21 03 00               LD   hl,3   
4C50   E5                     PUSH   hl   
4C51   E5                     PUSH   hl   
4C52   CD 77 10               CALL   run   
4C55   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C5C   CD 7A 0F               CALL   printStr   
4C5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C6C   E1                     POP   hl   
4C6D   E5                     PUSH   hl   
4C6E   E5                     PUSH   hl   
4C6F   CD 77 10               CALL   run   
4C72   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C7D   76                     HALT      
4C7E                EXPECTM_3147S174:      
4C7E   E1                     POP   HL   
4C7F                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4C7F   31 00 53               LD   SP,STACK   
4C82   CD AE 0F               CALL   coldInit   
4C85   CD CC 51               CALL   execStr   
4C88   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4C9F   E1                     POP   HL   
4CA0   E5                     PUSH   HL   
4CA1   11 02 00               LD   DE,2   
4CA4   B7                     OR   A   
4CA5   ED 52                  SBC   HL,DE   
4CA7   7D                     LD   A,L   
4CA8   B4                     OR   H   
4CA9   CA 0F 4D               JP   Z,expectM_3148S175   
4CAC   CD 7A 0F               CALL   printStr   
4CAF   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4CCC   CD 7A 0F               CALL   printStr   
4CCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CDE   21 02 00               LD   hl,2   
4CE1   E5                     PUSH   hl   
4CE2   E5                     PUSH   hl   
4CE3   CD 77 10               CALL   run   
4CE6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4CED   CD 7A 0F               CALL   printStr   
4CF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CFD   E1                     POP   hl   
4CFE   E5                     PUSH   hl   
4CFF   E5                     PUSH   hl   
4D00   CD 77 10               CALL   run   
4D03   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D0E   76                     HALT      
4D0F                EXPECTM_3148S175:      
4D0F   E1                     POP   HL   
4D10                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4D10   31 00 53               LD   SP,STACK   
4D13   CD AE 0F               CALL   coldInit   
4D16   CD CC 51               CALL   execStr   
4D19   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4D3C   E1                     POP   HL   
4D3D   E5                     PUSH   HL   
4D3E   11 01 00               LD   DE,1   
4D41   B7                     OR   A   
4D42   ED 52                  SBC   HL,DE   
4D44   7D                     LD   A,L   
4D45   B4                     OR   H   
4D46   CA B8 4D               JP   Z,expectM_3149S176   
4D49   CD 7A 0F               CALL   printStr   
4D4C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4D75   CD 7A 0F               CALL   printStr   
4D78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D87   21 01 00               LD   hl,1   
4D8A   E5                     PUSH   hl   
4D8B   E5                     PUSH   hl   
4D8C   CD 77 10               CALL   run   
4D8F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4D96   CD 7A 0F               CALL   printStr   
4D99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA6   E1                     POP   hl   
4DA7   E5                     PUSH   hl   
4DA8   E5                     PUSH   hl   
4DA9   CD 77 10               CALL   run   
4DAC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DB7   76                     HALT      
4DB8                EXPECTM_3149S176:      
4DB8   E1                     POP   HL   
4DB9                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4DB9   31 00 53               LD   SP,STACK   
4DBC   CD AE 0F               CALL   coldInit   
4DBF   CD CC 51               CALL   execStr   
4DC2   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4DE5   E1                     POP   HL   
4DE6   E5                     PUSH   HL   
4DE7   11 01 00               LD   DE,1   
4DEA   B7                     OR   A   
4DEB   ED 52                  SBC   HL,DE   
4DED   7D                     LD   A,L   
4DEE   B4                     OR   H   
4DEF   CA 61 4E               JP   Z,expectM_3150S177   
4DF2   CD 7A 0F               CALL   printStr   
4DF5   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4E1E   CD 7A 0F               CALL   printStr   
4E21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E30   21 01 00               LD   hl,1   
4E33   E5                     PUSH   hl   
4E34   E5                     PUSH   hl   
4E35   CD 77 10               CALL   run   
4E38   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4E3F   CD 7A 0F               CALL   printStr   
4E42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E4F   E1                     POP   hl   
4E50   E5                     PUSH   hl   
4E51   E5                     PUSH   hl   
4E52   CD 77 10               CALL   run   
4E55   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4E60   76                     HALT      
4E61                EXPECTM_3150S177:      
4E61   E1                     POP   HL   
4E62                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4E62   31 00 53               LD   SP,STACK   
4E65   CD AE 0F               CALL   coldInit   
4E68   CD CC 51               CALL   execStr   
4E6B   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4E9B   E1                     POP   HL   
4E9C   E5                     PUSH   HL   
4E9D   11 02 00               LD   DE,2   
4EA0   B7                     OR   A   
4EA1   ED 52                  SBC   HL,DE   
4EA3   7D                     LD   A,L   
4EA4   B4                     OR   H   
4EA5   CA 24 4F               JP   Z,expectM_3151S178   
4EA8   CD 7A 0F               CALL   printStr   
4EAB   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4EE1   CD 7A 0F               CALL   printStr   
4EE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EF3   21 02 00               LD   hl,2   
4EF6   E5                     PUSH   hl   
4EF7   E5                     PUSH   hl   
4EF8   CD 77 10               CALL   run   
4EFB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F02   CD 7A 0F               CALL   printStr   
4F05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F12   E1                     POP   hl   
4F13   E5                     PUSH   hl   
4F14   E5                     PUSH   hl   
4F15   CD 77 10               CALL   run   
4F18   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F23   76                     HALT      
4F24                EXPECTM_3151S178:      
4F24   E1                     POP   HL   
4F25                          ;*Macro unroll:  test "'hello'/sl",5
4F25   31 00 53               LD   SP,STACK   
4F28   CD AE 0F               CALL   coldInit   
4F2B   CD CC 51               CALL   execStr   
4F2E   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4F39   E1                     POP   HL   
4F3A   E5                     PUSH   HL   
4F3B   11 05 00               LD   DE,5   
4F3E   B7                     OR   A   
4F3F   ED 52                  SBC   HL,DE   
4F41   7D                     LD   A,L   
4F42   B4                     OR   H   
4F43   CA 9D 4F               JP   Z,expectM_3152S179   
4F46   CD 7A 0F               CALL   printStr   
4F49   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4F5A   CD 7A 0F               CALL   printStr   
4F5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F6C   21 05 00               LD   hl,5   
4F6F   E5                     PUSH   hl   
4F70   E5                     PUSH   hl   
4F71   CD 77 10               CALL   run   
4F74   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F7B   CD 7A 0F               CALL   printStr   
4F7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F8B   E1                     POP   hl   
4F8C   E5                     PUSH   hl   
4F8D   E5                     PUSH   hl   
4F8E   CD 77 10               CALL   run   
4F91   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F9C   76                     HALT      
4F9D                EXPECTM_3152S179:      
4F9D   E1                     POP   HL   
4F9E                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
4F9E   31 00 53               LD   SP,STACK   
4FA1   CD AE 0F               CALL   coldInit   
4FA4   CD CC 51               CALL   execStr   
4FA7   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
4FBA   E1                     POP   HL   
4FBB   E5                     PUSH   HL   
4FBC   11 00 00               LD   DE,false   
4FBF   B7                     OR   A   
4FC0   ED 52                  SBC   HL,DE   
4FC2   7D                     LD   A,L   
4FC3   B4                     OR   H   
4FC4   CA 26 50               JP   Z,expectM_3153S180   
4FC7   CD 7A 0F               CALL   printStr   
4FCA   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
4FE3   CD 7A 0F               CALL   printStr   
4FE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FF5   21 00 00               LD   hl,false   
4FF8   E5                     PUSH   hl   
4FF9   E5                     PUSH   hl   
4FFA   CD 77 10               CALL   run   
4FFD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5004   CD 7A 0F               CALL   printStr   
5007   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5014   E1                     POP   hl   
5015   E5                     PUSH   hl   
5016   E5                     PUSH   hl   
5017   CD 77 10               CALL   run   
501A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5025   76                     HALT      
5026                EXPECTM_3153S180:      
5026   E1                     POP   HL   
5027                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
5027   31 00 53               LD   SP,STACK   
502A   CD AE 0F               CALL   coldInit   
502D   CD CC 51               CALL   execStr   
5030   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
5044   E1                     POP   HL   
5045   E5                     PUSH   HL   
5046   11 FF FF               LD   DE,true   
5049   B7                     OR   A   
504A   ED 52                  SBC   HL,DE   
504C   7D                     LD   A,L   
504D   B4                     OR   H   
504E   CA B1 50               JP   Z,expectM_3154S181   
5051   CD 7A 0F               CALL   printStr   
5054   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
506E   CD 7A 0F               CALL   printStr   
5071   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5080   21 FF FF               LD   hl,true   
5083   E5                     PUSH   hl   
5084   E5                     PUSH   hl   
5085   CD 77 10               CALL   run   
5088   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
508F   CD 7A 0F               CALL   printStr   
5092   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
509F   E1                     POP   hl   
50A0   E5                     PUSH   hl   
50A1   E5                     PUSH   hl   
50A2   CD 77 10               CALL   run   
50A5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
50B0   76                     HALT      
50B1                EXPECTM_3154S181:      
50B1   E1                     POP   HL   
50B2                          ;*Macro unroll:  test "[1 2 3]** + +", 6
50B2   31 00 53               LD   SP,STACK   
50B5   CD AE 0F               CALL   coldInit   
50B8   CD CC 51               CALL   execStr   
50BB   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
50C9   E1                     POP   HL   
50CA   E5                     PUSH   HL   
50CB   11 06 00               LD   DE,6   
50CE   B7                     OR   A   
50CF   ED 52                  SBC   HL,DE   
50D1   7D                     LD   A,L   
50D2   B4                     OR   H   
50D3   CA 30 51               JP   Z,expectM_3155S182   
50D6   CD 7A 0F               CALL   printStr   
50D9   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
50ED   CD 7A 0F               CALL   printStr   
50F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50FF   21 06 00               LD   hl,6   
5102   E5                     PUSH   hl   
5103   E5                     PUSH   hl   
5104   CD 77 10               CALL   run   
5107   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
510E   CD 7A 0F               CALL   printStr   
5111   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
511E   E1                     POP   hl   
511F   E5                     PUSH   hl   
5120   E5                     PUSH   hl   
5121   CD 77 10               CALL   run   
5124   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
512F   76                     HALT      
5130                EXPECTM_3155S182:      
5130   E1                     POP   HL   
5131                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2#", $63
5131   31 00 53               LD   SP,STACK   
5134   CD AE 0F               CALL   coldInit   
5137   CD CC 51               CALL   execStr   
513A   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 DB   "/bm[_a [_b _c]** _d]2#",0   
5151   E1                     POP   HL   
5152   E5                     PUSH   HL   
5153   11 63 00               LD   DE,$63   
5156   B7                     OR   A   
5157   ED 52                  SBC   HL,DE   
5159   7D                     LD   A,L   
515A   B4                     OR   H   
515B   CA C1 51               JP   Z,expectM_3156S183   
515E   CD 7A 0F               CALL   printStr   
5161   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2#"   
517E   CD 7A 0F               CALL   printStr   
5181   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5190   21 63 00               LD   hl,$63   
5193   E5                     PUSH   hl   
5194   E5                     PUSH   hl   
5195   CD 77 10               CALL   run   
5198   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
519F   CD 7A 0F               CALL   printStr   
51A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51AF   E1                     POP   hl   
51B0   E5                     PUSH   hl   
51B1   E5                     PUSH   hl   
51B2   CD 77 10               CALL   run   
51B5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
51C0   76                     HALT      
51C1                EXPECTM_3156S183:      
51C1   E1                     POP   HL   
51C2                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
51C2                             ; 
51C2   CD 7A 0F               CALL   printStr   
51C5   44 6F 6E 65 21 00      .CSTR   "Done!"   
51CB   76                     HALT      
51CC                             ; executes a null teminated string (null executes exit_)
51CC                             ; the string should be immedaitely following the call
51CC                EXECSTR:      ; create a root stack frame
51CC   C1                     POP   bc   ; bc = code*
51CD   0B                     DEC   bc   ; dec to prepare for next routine
51CE   11 00 00               LD   de,0   
51D1   D5                     PUSH   de   ; push fake IP
51D2   D5                     PUSH   de   ; push null arg_list*
51D3   D5                     PUSH   de   ; push null first_arg*
51D4   D5                     PUSH   de   ; push fake BP
51D5   DD E9                  JP   (ix)   
51D7                STKSIZE:   EQU   $100   ; Stack size
51D7                TIBSIZE:   EQU   $100   ; 256 bytes
51D7                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
51D7                          ALIGN   $100   
5200                          DS   STKSIZE   
5300                STACK:       
5300                          ALIGN   $100   
5300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5400                          ALIGN   $100   
5400                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5500                          ALIGN   $100   
5500                VARS:        
5500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
55D0                RESTARTS:      
55D0                RST08:    DS   2   
55D2                RST10:    DS   2   
55D4                RST18:    DS   2   
55D6                RST20:    DS   2   
55D8                RST28:    DS   2   
55DA                RST30:    DS   2   ; 
55DC                BAUD:     DS   2   ; 
55DE                INTVEC:   DS   2   ; 
55E0                NMIVEC:   DS   2   ; 
55E2                GETCVEC:   DS   2   ; 
55E4                PUTCVEC:   DS   2   ; 
55E6                SYSVARS:      
55E6                             ; initialised sys variables (preserved)
55E6                VTIBPTR:   DS   2   ; 
55E8                VBUFPTR:   DS   2   ; 
55EA                VNEXT:    DS   2   ; 
55EC                VHEAPPTR:   DS   2   ; 
55EE                VRECURPTR:   DS   2   ; 
55F0                VDATAWIDTH:   DS   1   ; 
55F1                VNUMBASE:   DS   1   ; 
55F2                VSTRMODE:   DS   1   ; 
55F3                VHEXPREFIX:   DS   1   
55F4                          DS   1   
55F5                          DS   1   
55F6                          DS   1   
55F7                          DS   1   
55F8                             ; uninitialised sys variables (preserved)
55F8                VPOINTER:   DS   2   ; 
55FA                VREMAIN:   DS   2   ; 
55FC                VSAVEDIP:   DS   2   ; 
55FE                VSAVEDSP:   DS   2   ; 
5600                VSAVEDNEXT:   DS   2   ; 
5602                VSAVEDBP:   DS   2   ; 
5604                             ; uninitialised sys variables (unpreserved)
5604                VTEMP1:   DS   2   ; 
5606                VTEMP2:   DS   2   ; 
5608                VTEMP3:   DS   2   ; 
560A                          DS   2   ; 
560C                TBPTR:    DS   2   ; reserved for tests
560E                TITLEBUF:   DS   20   
5622                HEAP:        
5622                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5622                             ; db "{"
5622                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5622                             ; db    "\\kt{"
5622                             ; db      "0%t!=/qt"                  ; break if type != 0
5622                             ; db      "\\dt:a{"                   ; return talkback to receive data
5622                             ; db        "%L1#!/qt"                ; if not active don't send
5622                             ; db        "%L0# %a="                ; store current index in A
5622                             ; db        "%s %L0# +="              ; inc value of index by step
5622                             ; db        "1%t!=/qt"                ; break if type != 0
5622                             ; db        "%a %e <"                 ; ifte: in range?
5622                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5622                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
5622                             ; db      "} 0 %k^"                   ; init sink
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC map, 0, "sf"                   ; map
5622                             ; db "{"
5622                             ; db    "\\kt{"
5622                             ; db      "0%t!=/qt"                  ; break if type != 0
5622                             ; db      "\\dt{"                     ; call source with tb
5622                             ; db        "1%t=="                   ; ifte: type == 1 ?
5622                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5622                             ; db        "? %t %k^"               ; ifte: send to sink
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; ; /ft filter
5622                             ; ; src pred -- src1
5622                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5622                             ; db "{"
5622                             ; db    "[0]%T="
5622                             ; db    "\\kt{"                       ; return talkback to receive data
5622                             ; db      "\\dt{"                     ; call source with tb
5622                             ; db        "["
5622                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5622                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5622                             ; db          "{/t}"                  ; case 2: return true
5622                             ; db        "]%t#^"                   ; select on %t
5622                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5622                             ; db        "?"
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC forEach, 1, "spT"
5622                             ; db "{"
5622                             ; db    "[0]%T="
5622                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5622                             ; db      "2%t==/qt"                    ; if type == 2 skip
5622                             ; db      "0%t=="                   ; ifte: type = 0 ?
5622                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5622                             ; db      "?"                      ; ifte:
5622                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5622                             ; db    "} 0 %s^"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5622                             ; db "{"                                  ; reducer: \\da00bbLi4u
5622                             ; db    "[%i]%A="
5622                             ; db    "\\kt{"                         ; return talkback to receive data
5622                             ; db      "\\dt{"                         ; call source with tb
5622                             ; db        "1%t=="                       ; ifte: type == 1 ?
5622                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5622                             ; db        "? %t %k^"                    ; ifte: send to sink
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2618 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2583 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 177 IN MAIN.asm
COMMA_:             0207 DEFINED AT LINE 180 IN MAIN.asm
DOLLAR_:            020A DEFINED AT LINE 183 IN MAIN.asm
DQUOTE_:            020D DEFINED AT LINE 186 IN MAIN.asm
QUOTE_:             020D DEFINED AT LINE 187 IN MAIN.asm
DOT_:               0210 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0213 DEFINED AT LINE 193 IN MAIN.asm
QUESTION_:          0216 DEFINED AT LINE 196 IN MAIN.asm
LPAREN_:            0219 DEFINED AT LINE 199 IN MAIN.asm
SLASH_:             021C DEFINED AT LINE 202 IN MAIN.asm
NUM_:               021F DEFINED AT LINE 205 IN MAIN.asm
SEMICOLON_:         0222 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0225 DEFINED AT LINE 211 IN MAIN.asm
BANG:               0225 DEFINED AT LINE 212 IN MAIN.asm
NOT:                0230 DEFINED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
EQ_:                0236 DEFINED AT LINE 224 IN MAIN.asm
EQ:                 0236 DEFINED AT LINE 225 IN MAIN.asm
EQ0:                0240 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                0241 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GT_:                0245 DEFINED AT LINE 238 IN MAIN.asm
GT:                 0245 DEFINED AT LINE 239 IN MAIN.asm
LT_:                0250 DEFINED AT LINE 247 IN MAIN.asm
LT:                 0250 DEFINED AT LINE 248 IN MAIN.asm
LT1:                0259 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
HASH_:              0262 DEFINED AT LINE 263 IN MAIN.asm
HASH:               0262 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX:         0262 DEFINED AT LINE 265 IN MAIN.asm
ARRAYINDEX0:        026A DEFINED AT LINE 271 IN MAIN.asm
ARRAYINDEX1:        026B DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
ARRAYINDEX2:        0277 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 279 IN MAIN.asm
RPAREN_:            027A DEFINED AT LINE 287 IN MAIN.asm
RPAREN:             027A DEFINED AT LINE 289 IN MAIN.asm
AMPER_:             0282 DEFINED AT LINE 297 IN MAIN.asm
AMPER:              0282 DEFINED AT LINE 298 IN MAIN.asm
AND:                0282 DEFINED AT LINE 299 IN MAIN.asm
MINUS_:             028C DEFINED AT LINE 317 IN MAIN.asm
MINUS:              028C DEFINED AT LINE 318 IN MAIN.asm
SUB:                0298 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
SUB1:               02A2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 330 IN MAIN.asm
SUB2:               02A9 DEFINED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
SUB3:               02AC DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
STAR_:              02B4 DEFINED AT LINE 348 IN MAIN.asm
STAR:               02B4 DEFINED AT LINE 349 IN MAIN.asm
MUL:                02BC DEFINED AT LINE 355 IN MAIN.asm
MUL2:               02BE DEFINED AT LINE 358 IN MAIN.asm
MUL3:               02C6 DEFINED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
PLUS_:              02D8 DEFINED AT LINE 378 IN MAIN.asm
PLUS:               02D8 DEFINED AT LINE 379 IN MAIN.asm
ADD:                02D8 DEFINED AT LINE 380 IN MAIN.asm
ADD1:               02E3 DEFINED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
ADD3:               02E7 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
ADD4:               02F1 DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 405 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 406 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 415 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 416 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 432 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 433 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 434 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 449 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 450 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 451 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 471 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 472 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 473 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 525 IN MAIN.asm
CARET:              039F DEFINED AT LINE 529 IN MAIN.asm
GO:                 039F DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 546 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 548 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 563 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 570 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 571 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 572 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 583 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 587 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 590 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 591 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 599 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 600 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 601 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 613 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 784 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 820 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 844 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 850 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 870 IN MAIN.asm
COMMAND_I_:         056E DEFINED AT LINE 879 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 885 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 891 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 895 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 900 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 906 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 916 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 932 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 936 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 952 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 958 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 963 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 968 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
ADDROF2:            05FF DEFINED AT LINE 1021 IN MAIN.asm
ARRAYLENGTH:        0601 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0607 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
ARRAYSIZE:          060A DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
PERFORMM_1522S1040: 0611 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              061E DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
BREAK1:             0625 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
BYTEMODE:           0638 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
BYTEMODE1:          063A DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
COMMENT:            063F DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
CONSTHEAPSTART:     0648 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
CONSTTIBSTART:      064E DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
CONSTBUFSTART:      0654 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
DECBASE:            065A DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
DECBASE1:           065C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
HEXBASE:            0661 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
HEXPREFIX:          0666 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
ERROR1:             066E DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
INPUT:              0674 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
OUTPUT:             067F DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
QUIT:               0688 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
QUIT1:              068F DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
RECUR:              0692 DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
REMAIN:             0698 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
STRINGBEGIN:        069E DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
STRINGEND:          06A6 DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
STRINGEND1:         06CD DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
STRINGLENGTH:       06D5 DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06DB DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
STRINGLENGTH2:      06DD DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
STRINGLENGTH3:      06E1 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
STRINGSIZE:         06E4 DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
PERFORMM_1668S1205: 06EB DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      06F0 DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
STRINGCOMPARE1:     06F2 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
STRINGCOMPARE2:     06FD DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
STRINGCOMPARE3:     0702 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
STRINGCOMPARE4:     0705 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
VARBUFPTR:          0708 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
VARHEAPPTR:         0711 DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
VARTIBPTR:          071A DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
VARIABLE:           0723 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
CONSTANT:           0726 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
WORDMODE:           0729 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
XOR:                072E DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
XOR1:               072F DEFINED AT LINE 1263 IN MAIN.asm
RANGESRC:           0739 DEFINED AT LINE 32
                    > USED AT LINE 912 IN MAIN.asm
RANGESRCM_1733S1279: 0748 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07CB DEFINED AT LINE 32
                    > USED AT LINE 826 IN MAIN.asm
ARRAYITERM_1752S1299: 07D8 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         084B DEFINED AT LINE 32
                    > USED AT LINE 924 IN MAIN.asm
STRINGITERM_1771S1319: 0858 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08D2 DEFINED AT LINE 32
                    > USED AT LINE 887 IN MAIN.asm
MAPM_1791S1341:     08DF DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0913 DEFINED AT LINE 32
                    > USED AT LINE 858 IN MAIN.asm
FILTERM_1805S1356:  0921 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0970 DEFINED AT LINE 32
                    > USED AT LINE 852 IN MAIN.asm
FOLDM_1824S1376:    097F DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 854 IN MAIN.asm
FOREACHM_1838S1391: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0C DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
FUNCSRCM_1852S1406: 0A18 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A45 DEFINED AT LINE 32
                    > USED AT LINE 616 IN MAIN.asm
PRINTARRAYM_1862S1417: 0A53 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0A8D DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
READCHAR:           0A9C DEFINED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
READSTRING:         0AA5 DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0AAA DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
READSTRING2:        0AB8 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
READNUMBER:         0AC1 DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
PERFORMM_1903S1463: 0ACA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0AE8 DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
PERFORMM_1920S1480: 0AEF DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0AF2 DEFINED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
PERFORMM_1924S1484: 0AF9 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0AFA DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
COLON:              0B00 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
VARREF:             0B00 DEFINED AT LINE 1493 IN MAIN.asm
SEMICOLON:          0B0E DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
TILDE:              0B10 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
INVERT:             0B10 DEFINED AT LINE 1509 IN MAIN.asm
DOLLAR:             0B1A DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
HEXNUM:             0B1A DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0B1D DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
HEXNUM2:            0B25 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
QUESTION:           0B37 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
IF:                 0B37 DEFINED AT LINE 1545 IN MAIN.asm
QUOTE:              0B44 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
STRING:             0B44 DEFINED AT LINE 1559 IN MAIN.asm
STRING1:            0B4D DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
STRING2:            0B50 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
STRING3:            0B56 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
PERCENT:            0B5E DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
ARG:                0B5E DEFINED AT LINE 1586 IN MAIN.asm
ARG0:               0B7A DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
ARG0A:              0B83 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
ARG1:               0B88 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
ARG1A:              0B90 DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
NUM:                0B93 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0B9C DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
NUM1:               0B9D DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
NUM2:               0BB5 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
NUM3:               0BC0 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
RBRACE:             0BC3 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
BLOCKEND:           0BC3 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
BLOCKEND1:          0BF5 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
BLOCKEND2:          0C01 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
BLOCKEND3:          0C13 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
BLOCKEND4:          0C27 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
GOBLOCK:            0C30 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
GOBLOCK2:           0C55 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
GOBLOCK3:           0C5F DEFINED AT LINE 1749 IN MAIN.asm
GOFUNC:             0C63 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GOFUNC1:            0C7C DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
GOFUNC2:            0C82 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
GOFUNC3:            0C8D DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
GOFUNC4:            0CA5 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
GOFUNC5:            0CA8 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
GOFUNC6:            0CAB DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GOFUNC7:            0CAE DEFINED AT LINE 1812 IN MAIN.asm
GOFUNC8:            0CB2 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
ASSIGN:             0CBD DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            0CBF DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
ASSIGN1:            0CC3 DEFINED AT LINE 1834 IN MAIN.asm
ASSIGN2:            0CCC DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
EQUALS:             0CCE DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
NOTEQUALS:          0CD5 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
LESSTHANEQ:         0CDC DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0CE1 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0CE6 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
TRUE1:              0CE9 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
NULL1:              0CEF DEFINED AT LINE 1879 IN MAIN.asm
FALSE1:             0CEF DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
SPREAD:             0CF5 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
SPREAD1:            0D02 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SPREAD2:            0D0D DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
SPREAD3:            0D0F DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
SHIFTLEFT:          0D19 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT2:         0D23 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
SHIFTLEFT3:         0D2B DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
SHIFTLEFT4:         0D2C DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
SHIFTRIGHT:         0D35 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
SHIFTRIGHT2:        0D3F DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
SHIFTRIGHT3:        0D47 DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
SHIFTRIGHT4:        0D4B DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
DIVIDE:             0D54 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
DIVIDE1:            0D59 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
DIVIDE2:            0D66 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
DIVIDE3:            0D67 DEFINED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
DOTNEXT:            0D6D DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
DOTNEXT1:           0D75 DEFINED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
PARSEARGS:          0D87 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
PARSEARGS1:         0D91 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
PARSEARGS1A:        0D99 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
PARSEARGS2:         0DA1 DEFINED AT LINE 2020 IN MAIN.asm
PARSEARGS3:         0DA9 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
PARSEARGS4:         0DAC DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
PARSEARGS5:         0DB2 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
PARSEBLOCK:         0DBD DEFINED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
PARSEBLOCK1:        0DC1 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
PARSEBLOCK2:        0DED DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
PARSEBLOCK3:        0DF0 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PARSEBLOCK4:        0DF8 DEFINED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEBLOCK5:        0DFB DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
PARSEBLOCK6:        0E23 DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
CREATEFUNC:         0E27 DEFINED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
CREATEFUNC0:        0E46 DEFINED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
CREATEFUNC1:        0E5E DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
CREATEFUNC2:        0E71 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
CREATEFUNC2A:       0E90 DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CREATEFUNC3:        0E9F DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
CREATEFUNC4:        0EAA DEFINED AT LINE 2215 IN MAIN.asm
CREATEFUNC5:        0EAB DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
LOWERCASETABLE:     0EC9 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
LOWERCASETABLE1:    0ED3 DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
LOWERCASETABLE2:    0EDA DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
COMMANDTABLE:       0EDF DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
COMMANDTABLE1:      0EE0 DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
COMMANDTABLE2:      0EE1 DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
COMMANDTABLE3:      0EE8 DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
COMMANDTABLE4:      0EF1 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
CMDTABLE:           0EF7 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
CMDTABLE1:          0EF8 DEFINED AT LINE 2302 IN MAIN.asm
CMDTABLE2:          0EF8 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
CMDTABLE3:          0F05 DEFINED AT LINE 2315 IN MAIN.asm
CMDTABLE4:          0F0E DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
CMDTABLE5:          0F13 DEFINED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
GETVARADDR:         0F18 DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
GETVARADDR1:        0F2A DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
PUTSTR0:            0F2F DEFINED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
PUTSTR:             0F33 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
NESTING:            0F38 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
NESTING0:           0F42 DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
NESTING1A:          0F49 DEFINED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
NESTING1:           0F4C DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
NESTING2:           0F5B DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
NESTING3:           0F5D DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
NESTING4:           0F68 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
PROMPT:             0F6A DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
CRLF:               0F73 DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
PRINTSTR:           0F7A DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2608 IN MAIN.asm
                    > USED AT LINE 2613 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 189
INIT:               0F81 DEFINED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
INIT1:              0F89 DEFINED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
WARMINIT:           0F91 DEFINED AT LINE 2439 IN MAIN.asm
COLDBOOT0:          0FA4 DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
COLDINIT:           0FAE DEFINED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0FBF DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
COLDSTART:          0FCC DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
START:              0FD5 DEFINED AT LINE 2474 IN MAIN.asm
START1:             0FDB DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
INTERPRET:          0FE1 DEFINED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
                    > USED AT LINE 2601 IN MAIN.asm
INTERPRET2:         0FED DEFINED AT LINE 2489 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2606 IN MAIN.asm
                    > USED AT LINE 2610 IN MAIN.asm
                    > USED AT LINE 2628 IN MAIN.asm
INTERPRET3:         0FF5 DEFINED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
INTERPRET4:         0FFB DEFINED AT LINE 2503 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
INTERPRET5:         1000 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
INTERPRET5A:        1019 DEFINED AT LINE 2525 IN MAIN.asm
INTERPRET6:         101B DEFINED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
INTERPRET7:         1029 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
INTERPRET8:         103C DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
NEXT:               1057 DEFINED AT LINE 2566 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2570 IN MAIN.asm
NEXT0:              106B DEFINED AT LINE 2580 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
NEXT1:              106C DEFINED AT LINE 2582 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
EXIT:               1073 DEFINED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
RUN:                1077 DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              107B DEFINED AT LINE 2597 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
BACKSPACE_:         108D DEFINED AT LINE 2603 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
REEDIT_:            109D DEFINED AT LINE 2612 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
REEDIT0:            10A9 DEFINED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 2623 IN MAIN.asm
REEDIT1:            10AD DEFINED AT LINE 2620 IN MAIN.asm
                    > USED AT LINE 2616 IN MAIN.asm
F1:                 10BD DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
F1M_2995S12:        10C8 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 10C9 DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
F2M_2997S15:        10D4 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 10D5 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
F3M_2999S18:        10E0 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 10E1 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
F4M_3001S21:        10EC DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3005S27:    1190 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S53:    11F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S54:    1262 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S55:    12C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S56:    1330 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S57:    1397 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S58:    13FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S59:    1467 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S60:    14D2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S61:    153B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S62:    15AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S63:    1613 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S64:    167C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S65:    16E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S66:    1752 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S67:    17C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S68:    1834 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S69:    18A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S70:    1916 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S71:    198D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S72:    1A02 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S73:    1A71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S74:    1AE8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S75:    1B5B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S76:    1BCA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S77:    1C39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S78:    1CB0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S79:    1D1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S80:    1D8E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S81:    1DFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S82:    1E80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S83:    1EEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S84:    1F56 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S85:    1FC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S86:    2030 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S87:    209F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S88:    2116 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S89:    2185 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S90:    2202 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S91:    227F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S92:    22FC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S93:    237B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S94:    23FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S95:    2481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S96:    2504 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S97:    2587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S98:    2608 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S99:    2689 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S100:   270E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S101:   277F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S102:   27FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S103:   287D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S104:   28FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S105:   2975 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S106:   29E4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S107:   2A55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S108:   2AC6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S109:   2B35 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S110:   2BA4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S111:   2C13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S112:   2C82 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S113:   2CF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S114:   2D60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S115:   2DCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S116:   2E3E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S117:   2EAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S118:   2F20 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S119:   2F91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S120:   3004 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S121:   3077 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S122:   30E4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S123:   3151 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S124:   31C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S125:   323D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S126:   32C2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S127:   3347 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S128:   33B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S129:   3427 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S130:   349E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S131:   3519 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S132:   3590 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S133:   3611 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S134:   3694 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S135:   371D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S136:   37AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S137:   3829 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S138:   38AE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S139:   3935 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S140:   39BE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S141:   3A45 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S142:   3ADA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S143:   3B5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S144:   3BEE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S145:   3C81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S146:   3D16 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S147:   3DB3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S148:   3E50 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S149:   3ECF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S150:   3F56 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S151:   3FD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S152:   405E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S153:   40E9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S154:   4182 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S155:   4223 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S156:   42C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S157:   4357 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S158:   43F0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S159:   449F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S160:   4548 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S161:   45FF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S162:   46B8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S163:   4743 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S164:   47CE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S165:   4847 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S166:   48C0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S167:   4939 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S168:   49B2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S169:   4A23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S170:   4A94 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S171:   4B05 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S172:   4B76 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S173:   4BF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S174:   4C7E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S175:   4D0F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S176:   4DB8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S177:   4E61 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S178:   4F24 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S179:   4F9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S180:   5026 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S181:   50B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S182:   5130 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S183:   51C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            51CC DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5300 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5300 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
BUFFER:             5400 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VARS:               5500 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           55D0 DEFINED AT LINE 18 IN ram.asm
RST08:              55D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              55D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              55D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              55D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              55D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              55DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               55DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             55DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             55E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            55E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            55E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            55E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2454 IN MAIN.asm
VTIBPTR:            55E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
VBUFPTR:            55E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
VNEXT:              55EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 2466 IN MAIN.asm
VHEAPPTR:           55EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
VRECURPTR:          55EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
VDATAWIDTH:         55F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
VNUMBASE:           55F1 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
VSTRMODE:           55F2 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
VHEXPREFIX:         55F3 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
VPOINTER:           55F8 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
VREMAIN:            55FA DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
VSAVEDIP:           55FC DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
VSAVEDSP:           55FE DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
VSAVEDNEXT:         5600 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
VSAVEDBP:           5602 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2563 IN MAIN.asm
VTEMP1:             5604 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
VTEMP2:             5606 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
VTEMP3:             5608 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
TBPTR:              560C DEFINED AT LINE 66 IN ram.asm
TITLEBUF:           560E DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
HEAP:               5622 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
