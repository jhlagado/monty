0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hx./dc"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hx./dc `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5B               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5B               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5B               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5B               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5B               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5B               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5B               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 59               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5B               LD   (RST08),HL   
0094   22 D2 5B               LD   (RST10),HL   
0097   22 D4 5B               LD   (RST18),HL   
009A   22 D6 5B               LD   (RST20),HL   
009D   22 D8 5B               LD   (RST28),HL   
00A0   22 DA 5B               LD   (RST30),HL   
00A3   22 DE 5B               LD   (INTVEC),HL   
00A6   22 E0 5B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 59                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5A                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 5C                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 52 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 D5 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 FF 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 19 0C               JP   percent   
0215                QUESTION_:      
0215   C3 F2 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 4E 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 90 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 78 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 89 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA F0 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA D4 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 97 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 9C 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5B               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 89 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 4E 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 7A 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 7A 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA B0 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 7A 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 7A 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5B                  LD   h,msb(VARS)   
0309   22 F8 5B               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 42 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 3E 11               JP   error   
0343                LAMBDA2:      
0343   CD 78 0E               CALL   parseBlock   
0346   CD E7 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5B               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5B               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5B            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5B               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA EB 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 1E 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA EB 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5B            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5B            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 28 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 78 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 7E 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 CB 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5B            LD   de,(vPointer)   
03ED   21 F8 5B               LD   hl,vPointer   
03F0   C3 89 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD B6 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   09 0B                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 5B            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 5B            LD   (vBufPtr),de   ; save buffer*'
041F   C3 28 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 5B            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 5B            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 28 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 5B               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA A8 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 5B            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 5B               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 5F 04               CALL   printDec2   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 5B            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 28 0E               JP   dotNext   
045F                             ; hl = value
045F                             ; de' = buffer*
045F                             ; a, bc, de, hl destroyed
045F                PRINTDEC2:      
045F   CB 7C                  BIT   7,h   
0461   28 0C                  JR   z,printDec3   
0463   D9                     EXX      
0464   3E 2D                  LD   a,"-"   
0466   12                     LD   (de),a   
0467   13                     INC   de   
0468   D9                     EXX      
0469   AF                     XOR   a   
046A   95                     SUB   l   
046B   6F                     LD   l,a   
046C   9F                     SBC   a,a   
046D   94                     SUB   h   
046E   67                     LD   h,a   
046F                PRINTDEC3:      
046F   0E 00                  LD   c,0   ; leading zeros flag = false
0471   11 F0 D8               LD   de,-10000   
0474   CD 8F 04               CALL   printDec4   
0477   11 18 FC               LD   de,-1000   
047A   CD 8F 04               CALL   printDec4   
047D   11 9C FF               LD   de,-100   
0480   CD 8F 04               CALL   printDec4   
0483   1E F6                  LD   e,-10   
0485   CD 8F 04               CALL   printDec4   
0488   0C                     INC   c   ; flag = true for at least digit
0489   1E FF                  LD   e,-1   
048B   CD 8F 04               CALL   printDec4   
048E   C9                     RET      
048F                PRINTDEC4:      
048F   06 2F                  LD   b,"0"-1   
0491                PRINTDEC5:      
0491   04                     INC   b   
0492   19                     ADD   hl,de   
0493   38 FC                  JR   c,printDec5   
0495   ED 52                  SBC   hl,de   
0497   3E 30                  LD   a,"0"   
0499   B8                     CP   b   
049A   20 05                  JR   nz,printDec6   
049C   AF                     XOR   a   
049D   B1                     OR   c   
049E   C8                     RET   z   
049F   18 01                  JR   printDec7   
04A1                PRINTDEC6:      
04A1   0C                     INC   c   
04A2                PRINTDEC7:      
04A2   78                     LD   a,b   
04A3   D9                     EXX      
04A4   12                     LD   (de),a   
04A5   13                     INC   de   
04A6   D9                     EXX      
04A7   C9                     RET      
04A8                             ; buffer hex                    37
04A8                             ; value --
04A8                PRINTHEX:      
04A8   ED 5B E8 5B            LD   de,(vBufPtr)   
04AC   3A F0 5B               LD   a,(vHexPrefix)   ; "$"
04AF   B7                     OR   a   ; skip if null
04B0   28 02                  JR   z,printHex1   
04B2   12                     LD   (de),a   
04B3   13                     INC   de   ; string*++,
04B4                PRINTHEX1:      
04B4   E1                     POP   hl   ; hl = value
04B5   3A EE 5B               LD   a,(vDataWidth)   
04B8   3D                     DEC   a   
04B9   28 04                  JR   z,printHex2   
04BB   7C                     LD   a,h   
04BC   CD CE 04               CALL   printHex3   
04BF                PRINTHEX2:      
04BF   7D                     LD   a,l   
04C0   CD CE 04               CALL   printHex3   
04C3   3E 20                  LD   a," "   ; append space to buffer
04C5   12                     LD   (de),a   
04C6   13                     INC   de   ; string*++,
04C7   ED 53 E8 5B            LD   (vBufPtr),de   
04CB   C3 28 0E               JP   dotNext   
04CE                PRINTHEX3:      
04CE   F5                     PUSH   af   
04CF   1F                     RRA      
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   CD D7 04               CALL   printHex4   
04D6   F1                     POP   af   
04D7                PRINTHEX4:      
04D7   E6 0F                  AND   0x0F   
04D9   C6 90                  ADD   a,0x90   
04DB   27                     DAA      
04DC   CE 40                  ADC   a,0x40   
04DE   27                     DAA      
04DF   12                     LD   (de),a   
04E0   13                     INC   de   ; string*++,
04E1   C9                     RET      
04E2                             ;********************** PAGE 4 END *********************************************
04E2                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA C9 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 9B 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   50                     DB   lsb(command_d_)   
050F   00                     DB   0   
0510   5B                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   86                     DB   lsb(command_h_)   
0513   91                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   9C                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   A7                     DB   lsb(comand_o_)   
051A   B3                     DB   lsb(command_p_)   
051B   BA                     DB   lsb(command_q_)   
051C   C5                     DB   lsb(command_r_)   
051D   D8                     DB   lsb(command_s_)   
051E   DA                     DB   lsb(comand_t_)   
051F   00                     DB   0   
0520   DC                     DB   lsb(command_v_)   
0521   DE                     DB   lsb(command_w_)   
0522   E0                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   E2                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD B6 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   75 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   83 06                  DW   addrOf   
0531   69 00                  DB   "i",0   ; /ai array iterator
0533   78 08                  DW   arrayIter   
0535   6C 6E                  DB   "ln"   ; /al array length
0537   8B 06                  DW   arrayLength   
0539   73 00                  DB   "s",0   ; /as array size
053B   94 06                  DW   arraySize   
053D   00 00                  DW   0   
053F   F0 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD B6 0F               CALL   cmdTable   
0544   62 00                  DB   "b",0   ; /bb bye bye cold boot
0546   8F 10                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   C2 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   F0 06                  DW   error1   
0550                COMMAND_D_:      
0550   CD B6 0F               CALL   cmdTable   
0553   63 00                  DB   "c",0   ; /dc decimal
0555   E4 06                  DW   decBase   
0557   00 00                  DW   0   
0559   F0 06                  DW   error1   
055B                COMMAND_F_:      
055B   CD B6 0F               CALL   cmdTable   
055E   61 6C                  DB   "al"   ; /fal false
0560   AA 0D                  DW   false1   
0562   64 00                  DB   "d",0   ; /fd fold
0564   31 0A                  DW   fold   
0566   6F 72                  DB   "or"   ; /for forEach
0568   82 0A                  DW   forEach   
056A   73 00                  DB   "s",0   ; /fs funcSrc
056C   CE 0A                  DW   funcSrc   
056E   74 00                  DB   "t",0   ; /ft filter
0570   D0 09                  DW   filter   
0572   31 00                  DB   "1",0   
0574   80 11                  DW   f1   
0576   32 00                  DB   "2",0   
0578   8C 11                  DW   f2   
057A   33 00                  DB   "3",0   
057C   98 11                  DW   f3   
057E   34 00                  DB   "4",0   
0580   A4 11                  DW   f4   
0582   00 00                  DW   0   
0584   F0 06                  DW   error1   
0586                COMMAND_H_:      
0586   CD B6 0F               CALL   cmdTable   
0589   78 00                  DB   "x",0   ; /hx hex
058B   EB 06                  DW   hexBase   
058D   00 00                  DW   0   
058F   F0 06                  DW   error1   
0591                             ; 6
0591                COMMAND_I_:      
0591   CD B6 0F               CALL   cmdTable   
0594   6E 00                  DB   "n",0   ; /in input
0596   F6 06                  DW   input   
0598   00 00                  DW   0   
059A   F0 06                  DW   error1   
059C                COMMAND_M_:      
059C   CD B6 0F               CALL   cmdTable   
059F   70 00                  DB   "p",0   ; /mp map
05A1   8E 09                  DW   map   
05A3   00 00                  DW   0   
05A5   F0 06                  DW   error1   
05A7                COMAND_O_:      
05A7   CD B6 0F               CALL   cmdTable   
05AA   75 74 00               DB   "ut",0   ; /out out
05AD   01 07                  DW   output   
05AF   00 00                  DW   0   
05B1   F0 06                  DW   error1   
05B3                             ; 4
05B3                COMMAND_P_:      
05B3   CD B6 0F               CALL   cmdTable   
05B6   00 00                  DW   0   
05B8   F0 06                  DW   error1   
05BA                             ; 6
05BA                COMMAND_Q_:      
05BA   CD B6 0F               CALL   cmdTable   
05BD   69 74                  DB   "it"   ; /qit quit
05BF   0A 07                  DW   quit   
05C1   00 00                  DW   0   
05C3   F0 06                  DW   error1   
05C5                COMMAND_R_:      
05C5   CD B6 0F               CALL   cmdTable   
05C8   63 00                  DB   "c",0   ; /rc tail call optimisation
05CA   14 07                  DW   recur   
05CC   65 6D                  DB   "em"   ; /rem remainder
05CE   1A 07                  DW   remain   
05D0   6E 67                  DB   "ng"   ; /rng range src
05D2   DF 07                  DW   rangeSrc   
05D4   00 00                  DW   0   
05D6   F0 06                  DW   error1   
05D8                COMMAND_S_:      
05D8   18 0A                  JR   command_s   
05DA                COMAND_T_:      
05DA   18 2B                  JR   command_t   
05DC                COMMAND_V_:      
05DC   18 34                  JR   command_v   
05DE                COMMAND_W_:      
05DE   18 59                  JR   command_w   
05E0                COMMAND_X_:      
05E0   18 66                  JR   command_x   
05E2                             ; 3
05E2                COMMAND_DEFAULT_:      
05E2   18 6F                  JR   command_default   
05E4                             ;********************** PAGE 5 END *********************************************
05E4                COMMAND_S:      
05E4   CD B6 0F               CALL   cmdTable   
05E7   62 00                  DB   "b",0   
05E9   47 07                  DW   stringBegin   
05EB   63 00                  DB   "c",0   
05ED   99 07                  DW   stringCompare   
05EF   65 6C                  DB   "el"   
05F1   20 07                  DW   select   
05F3   65 00                  DB   "e",0   
05F5   4F 07                  DW   stringEnd   
05F7   69 00                  DB   "i",0   
05F9   FF 08                  DW   stringIter   
05FB   6C 00                  DB   "l",0   
05FD   7E 07                  DW   stringLength   
05FF   73 00                  DB   "s",0   
0601   8D 07                  DW   stringSize   
0603   00 00                  DW   0   
0605   F0 06                  DW   error1   
0607                COMMAND_T:      
0607   CD B6 0F               CALL   cmdTable   
060A   72 75                  DB   "ru"   
060C   A4 0D                  DW   true1   
060E   00 00                  DW   0   
0610   F0 06                  DW   error1   
0612                COMMAND_V:      
0612   CD B6 0F               CALL   cmdTable   
0615   62 00                  DB   "b",0   
0617   B1 07                  DW   varBufPtr   
0619   65 00                  DB   "e",0   
061B   B7 07                  DW   varEcho   
061D   68 00                  DB   "h",0   
061F   BD 07                  DW   varHeapPtr   
0621   74 00                  DB   "t",0   
0623   C3 07                  DW   varTIBPtr   
0625   78 00                  DB   "x",0   
0627   C9 07                  DW   varHexPrefix   
0629   42 00                  DB   "B",0   
062B   DE 06                  DW   constBufStart   
062D   48 00                  DB   "H",0   
062F   D2 06                  DW   constHeapStart   
0631   54 00                  DB   "T",0   
0633   D8 06                  DW   constTIBStart   
0635   00 00                  DW   0   
0637   F0 06                  DW   error1   
0639                COMMAND_W:      
0639   CD B6 0F               CALL   cmdTable   
063C   68 69                  DB   "hi"   ; /whi while true else break from loop
063E   A8 06                  DW   while   
0640   6D 00                  DB   "m",0   ; /wm word mode
0642   CF 07                  DW   wordMode   
0644   00 00                  DW   0   
0646   F0 06                  DW   error1   
0648                COMMAND_X:      
0648   CD B6 0F               CALL   cmdTable   
064B   6F 72                  DB   "or"   ; /xor exclsuive or
064D   D4 07                  DW   xor   
064F   00 00                  DW   0   
0651   F0 06                  DW   error1   
0653                COMMAND_DEFAULT:      
0653   CD B6 0F               CALL   cmdTable   
0656   00 00                  DW   0   
0658   5A 06                  DW   div   
065A                             ;                               32
065A                DIV:         
065A   E1                     POP   hl   ; hl = arg_b
065B   D1                     POP   de   ; de = arg_a
065C   03                     INC   bc   
065D   0A                     LD   a,(bc)   
065E   FE 3D                  CP   "="   
0660   28 02                  JR   z,div2   
0662   0B                     DEC   bc   ; /
0663   EB                     EX   de,hl   
0664                DIV2:        
0664   F5                     PUSH   af   ; preserve af, bc
0665   C5                     PUSH   bc   
0666   44 4D                  LD   bc,hl   
0668   CD 0F 0E               CALL   divide   
066B   EB                     EX   de,hl   
066C   ED 53 FA 5B            LD   (vRemain),de   
0670   C1                     POP   bc   ; restore
0671   F1                     POP   af   
0672   C3 9D 02               JP   sub3   
0675                             ; /abs absolute
0675                             ; num -- num
0675                ABSOLUTE:      
0675   E1                     POP   hl   
0676   CB 7C                  BIT   7,h   
0678   28 06                  JR   z,absolute1   
067A   AF                     XOR   a   
067B   95                     SUB   l   
067C   6F                     LD   l,a   
067D   9F                     SBC   a,a   
067E   94                     SUB   h   
067F   67                     LD   h,a   
0680                ABSOLUTE1:      
0680   E5                     PUSH   hl   
0681   DD E9                  JP   (ix)   
0683                             ; /adr addrOf
0683                             ; char -- addr
0683                ADDROF:      
0683   E1                     POP   hl   ; a = char
0684   7D                     LD   a,l   
0685   CD D7 0F               CALL   getVarAddr   
0688   E5                     PUSH   hl   
0689                ADDROF2:      
0689   DD E9                  JP   (ix)   
068B                             ; /al length of an array, num elements
068B                             ; array* -- num
068B                ARRAYLENGTH:      
068B   E1                     POP   hl   
068C   2B                     DEC   hl   ; msb size
068D   56                     LD   d,(hl)   
068E   2B                     DEC   hl   ; lsb size
068F   5E                     LD   e,(hl)   
0690   EB                     EX   de,hl   
0691                ARRAYLENGTH1:      
0691   E5                     PUSH   hl   
0692   DD E9                  JP   (ix)   
0694                             ; /as size in bytes of an array, based on current data width
0694                             ; array* -- num
0694                ARRAYSIZE:      
0694                          ;*Macro unroll:  PERFORM arrayLength
0694   DD 21 9B 06            LD   ix,performM_1548S1069   
0698   C3 8B 06               JP   arrayLength   
069B                PERFORMM_1548S1069:      
069B   E1                     POP   hl   
069C   3A EE 5B               LD   a,(vDataWidth)   
069F   3D                     DEC   a   
06A0   28 EF                  JR   z,arrayLength1   
06A2   CB 3C                  SRL   h   
06A4   CB 1D                  RR   l   
06A6   18 E9                  JR   arrayLength1   
06A8                             ; 13
06A8                             ; /whi while true else break from loop
06A8                             ; --
06A8                WHILE:       
06A8   E1                     POP   hl   ; hl = condition, break if false
06A9   7D                     LD   a,l   
06AA   B4                     OR   h   
06AB   28 02                  JR   z,while1   
06AD   DD E9                  JP   (ix)   
06AF                WHILE1:      
06AF   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06B1   FD 54                  LD   d,iyh   
06B3   21 08 00               LD   hl,8   
06B6   19                     ADD   hl,de   
06B7   23                     INC   hl   
06B8   23                     INC   hl   
06B9   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06BC   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06BF   C3 7E 0C               JP   blockEnd   
06C2                             ; /b
06C2                BYTEMODE:      
06C2   3E 01                  LD   a,1   
06C4                BYTEMODE1:      
06C4   32 EE 5B               LD   (vDataWidth),a   
06C7   DD E9                  JP   (ix)   
06C9                             ; //
06C9                COMMENT:      
06C9   03                     INC   bc   ; point to next char
06CA   0A                     LD   a,(bc)   
06CB   FE 20                  CP   " "   ; terminate on any char less than SP
06CD   30 FA                  JR   nc,comment   
06CF   0B                     DEC   bc   
06D0   DD E9                  JP   (ix)   
06D2                CONSTHEAPSTART:      
06D2   11 22 5C               LD   de,HEAP   
06D5   C3 98 0F               JP   constant   
06D8                CONSTTIBSTART:      
06D8   11 00 59               LD   de,TIB   
06DB   C3 98 0F               JP   constant   
06DE                CONSTBUFSTART:      
06DE   11 00 5A               LD   de,BUFFER   
06E1   C3 98 0F               JP   constant   
06E4                DECBASE:      
06E4   3E 0A                  LD   a,10   
06E6                DECBASE1:      
06E6   32 EF 5B               LD   (vNumBase),a   
06E9   DD E9                  JP   (ix)   
06EB                HEXBASE:      
06EB   3E 10                  LD   a,16   
06ED   C3 E6 06               JP   decBase1   
06F0                ERROR1:      
06F0   21 01 00               LD   hl,1   ; error 1: unknown command
06F3   C3 3E 11               JP   error   
06F6                             ; Z80 port input
06F6                             ; port -- value
06F6                INPUT:       
06F6   E1                     POP   hl   
06F7   59                     LD   e,c   ; save IP
06F8   4D                     LD   c,l   
06F9   ED 68                  IN   l,(c)   
06FB   26 00                  LD   h,0   
06FD   4B                     LD   c,e   ; restore IP
06FE   E5                     PUSH   hl   
06FF   DD E9                  JP   (ix)   
0701                             ; /o Z80 port output
0701                             ; value port --
0701                OUTPUT:      
0701   E1                     POP   hl   
0702   59                     LD   e,c   ; save IP
0703   4D                     LD   c,l   
0704   E1                     POP   hl   
0705   ED 69                  OUT   (c),l   
0707   4B                     LD   c,e   ; restore IP
0708   DD E9                  JP   (ix)   
070A                             ; /qit
070A                             ; bool --
070A                QUIT:        
070A   E1                     POP   hl   ; hl = condition, exit if true
070B   7D                     LD   a,l   
070C   B4                     OR   h   
070D   20 02                  JR   nz,quit1   
070F   DD E9                  JP   (ix)   
0711                QUIT1:       
0711   C3 7E 0C               JP   blockEnd   
0714                RECUR:       
0714   E1                     POP   hl   
0715   22 EC 5B               LD   (vRecurPtr),hl   
0718   DD E9                  JP   (ix)   
071A                REMAIN:      
071A   2A FA 5B               LD   hl,(vRemain)   
071D   E5                     PUSH   hl   
071E   DD E9                  JP   (ix)   
0720                             ; select case from an associative array of cases
0720                             ; bool cases* --
0720                SELECT:      
0720   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0721   D1                     POP   de   ; de = select key
0722   C5                     PUSH   bc   ; save IP
0723   2B                     DEC   hl   ; bc = array length
0724   46                     LD   b,(hl)   
0725   2B                     DEC   hl   
0726   4E                     LD   c,(hl)   
0727   23                     INC   hl   
0728   23                     INC   hl   
0729   18 15                  JR   select2   
072B                SELECT1:      
072B   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
072C   BB                     CP   e   
072D   23                     INC   hl   ; hl++, flags are unaltered
072E   20 0C                  JR   nz,select1a   
0730   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0731   BA                     CP   d   
0732   23                     INC   hl   ; hl++, flags are unaltered
0733   20 08                  JR   nz,select1b   
0735   5E                     LD   e,(hl)   
0736   23                     INC   hl   
0737   56                     LD   d,(hl)   
0738   C1                     POP   bc   
0739   C3 A0 03               JP   go1   
073C                SELECT1A:      
073C   23                     INC   hl   
073D                SELECT1B:      
073D   23                     INC   hl   
073E   23                     INC   hl   
073F   0B                     DEC   bc   
0740                SELECT2:      
0740   79                     LD   a,c   
0741   B0                     OR   b   
0742   20 E7                  JR   nz,select1   
0744   C1                     POP   bc   
0745   DD E9                  JP   (ix)   
0747                STRINGBEGIN:      
0747   21 FF FF               LD   hl,TRUE   ; string mode = true
074A   22 F2 5B               LD   (vStrMode),hl   
074D   18 27                  JR   stringEnd1   ; save hl in vBufPtr
074F                STRINGEND:      
074F   21 00 00               LD   hl,FALSE   ; string mode = false
0752   22 F2 5B               LD   (vStrMode),hl   
0755   2A E8 5B               LD   hl,(vBufPtr)   ; append NUL to string
0758   AF                     XOR   a   
0759   77                     LD   (hl),a   
075A   23                     INC   hl   ; hl = string_end*
075B   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
075F   11 00 5A               LD   de,BUFFER   ; de = string*
0762   B7                     OR   a   ; bc = size
0763   ED 52                  SBC   hl,de   
0765   44 4D                  LD   bc,hl   
0767   2A EA 5B               LD   hl,(vHeapPtr)   ; hl = hstring*
076A   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
076B   D5                     PUSH   de   ; return hstring*
076C   ED B0                  LDIR      ; copy size bytes from string* to hstring*
076E   ED 53 EA 5B            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0772   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
0776                STRINGEND1:      
0776   21 00 5A               LD   hl,BUFFER   ; reset vBufPtr
0779   22 E8 5B               LD   (vBufPtr),hl   
077C   DD E9                  JP   (ix)   
077E                STRINGLENGTH:      
077E   D1                     POP   de   
077F   21 00 00               LD   hl,0   
0782   18 02                  JR   stringLength2   
0784                STRINGLENGTH1:      
0784   13                     INC   de   
0785   23                     INC   hl   
0786                STRINGLENGTH2:      
0786   1A                     LD   a,(de)   
0787   B7                     OR   a   
0788   20 FA                  JR   nz,stringLength1   
078A                STRINGLENGTH3:      
078A   E5                     PUSH   hl   
078B   DD E9                  JP   (ix)   
078D                STRINGSIZE:      
078D                          ;*Macro unroll:  PERFORM stringLength
078D   DD 21 94 07            LD   ix,performM_1728S1268   
0791   C3 7E 07               JP   stringLength   
0794                PERFORMM_1728S1268:      
0794   E1                     POP   hl   
0795   23                     INC   hl   
0796   C3 8A 07               JP   stringLength3   
0799                             ; /sc string compare
0799                             ; string1* string2* -- bool
0799                             ; Compares two null terminated strings.
0799                STRINGCOMPARE:      
0799   D1                     POP   de   
079A   E1                     POP   hl   
079B                STRINGCOMPARE1:      
079B   1A                     LD   a,(de)   
079C   BE                     CP   (hl)   
079D   20 07                  JR   nz,stringCompare2   
079F   B7                     OR   a   
07A0   28 09                  JR   z,stringCompare3   
07A2   13                     INC   de   
07A3   23                     INC   hl   
07A4   18 F5                  JR   stringCompare1   
07A6                STRINGCOMPARE2:      
07A6   21 00 00               LD   hl,FALSE   
07A9   18 03                  JR   stringCompare4   
07AB                STRINGCOMPARE3:      
07AB   21 FF FF               LD   hl,TRUE   
07AE                STRINGCOMPARE4:      
07AE   E5                     PUSH   hl   
07AF   DD E9                  JP   (ix)   
07B1                VARBUFPTR:      
07B1   21 E8 5B               LD   hl,vBufPtr   
07B4   C3 89 0F               JP   variable   
07B7                VARECHO:      
07B7   21 F1 5B               LD   hl,vEcho   
07BA   C3 89 0F               JP   variable   
07BD                VARHEAPPTR:      
07BD   21 EA 5B               LD   hl,vHeapPtr   
07C0   C3 89 0F               JP   variable   
07C3                VARTIBPTR:      
07C3   21 E6 5B               LD   hl,vTIBPtr   
07C6   C3 89 0F               JP   variable   
07C9                VARHEXPREFIX:      
07C9   21 F0 5B               LD   hl,vHexPrefix   
07CC   C3 89 0F               JP   variable   
07CF                             ; /wm
07CF                WORDMODE:      
07CF   3E 02                  LD   a,2   
07D1   C3 C4 06               JP   byteMode1   
07D4                             ; /xor
07D4                XOR:         
07D4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07D5                XOR1:        
07D5   E1                     POP   hl   
07D6   7B                     LD   a,e   
07D7   AD                     XOR   l   
07D8   6F                     LD   l,a   
07D9   7A                     LD   a,d   
07DA   AC                     XOR   h   
07DB   67                     LD   h,a   
07DC   C3 D8 02               JP   add3   
07DF                             ;*******************************************************************
07DF                             ; Monty implementations
07DF                             ;*******************************************************************
07DF                             ; /rng rangeSrc
07DF                             ; begin end step -- src
07DF                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07DF                RANGESRC:      ; range source: begin, end, step, local: L
07DF   CD 9F 03               CALL   go   
07E2   00 00                  DW   NUL   
07E4   EE 07                  DW   rangeSrcM_1791S1341   
07E6   E8 07                  DW   $+2   
07E8   01                     DB   1   
07E9   04 62 65 73 4C         .PSTR   "besL"   
07EE                RANGESRCM_1791S1341:      
07EE   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07EF   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0815   5C 6B 74 7B            DB   "\\kt{"   
0819   30 25 74 21 3D 2F 71 69 74 DB   "0%t!=/qit"   ; break if type != 0
0822   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0828   25 4C 31 3B 21 2F 71 69 74 DB   "%L1;!/qit"   ; if not active don't send
0831   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0839   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0843   31 25 74 21 3D 2F 71 69 74 DB   "1%t!=/qit"   ; break if type != 0
084C   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
0851   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
0867   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
086E   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0875   7D                     DB   "}"   
0876   7D                     DB   "}"   
0877   00                     DB   0   
0878                             ; /ai arrayIter
0878                             ; array* -- src
0878                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0878                ARRAYITER:      
0878   CD 9F 03               CALL   go   
087B   00 00                  DW   NUL   
087D   85 08                  DW   arrayIterM_1810S1361   
087F   81 08                  DW   $+2   
0881   01                     DB   1   
0882   02 61 4C               .PSTR   "aL"   
0885                ARRAYITERM_1810S1361:      
0885   7B                     DB   "{"   
0886   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /tru %a/al] %L="   ; init mutable L [index active size]
0898   5C 6B 74 7B            DB   "\\kt{"   
089C   30 25 74 21 3D 2F 71 69 74 DB   "0%t!=/qit"   ; break if type != 0
08A5   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08AB   25 4C 31 3B 21 2F 71 69 74 DB   "%L1;!/qit"   ; if not active don't send
08B4   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08BC   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08C3   31 25 74 21 3D 2F 71 69 74 DB   "1%t!=/qit"   ; break if type != 0
08CC   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08D5   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
08EE   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08F5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08FC   7D                     DB   "}"   
08FD   7D                     DB   "}"   
08FE   00                     DB   0   
08FF                             ; /si stringIter
08FF                             ; string* -- src
08FF                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08FF                STRINGITER:      
08FF   CD 9F 03               CALL   go   
0902   00 00                  DW   NUL   
0904   0C 09                  DW   stringIterM_1829S1381   
0906   08 09                  DW   $+2   
0908   01                     DB   1   
0909   02 73 4C               .PSTR   "sL"   
090C                STRINGITERM_1829S1381:      
090C   7B                     DB   "{"   
090D   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
0919   5C 6B 74 7B            DB   "\\kt{"   
091D   30 25 74 21 3D 2F 71 69 74 DB   "0%t!=/qit"   ; break if type != 0
0926   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
092D   25 4C 31 3B 21 2F 71 69 74 DB   "%L1;!/qit"   ; if not active don't send
0936   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
093E   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0945   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 6D 20 25 63 3D DB   "/byt %s%i; /wm %c="   ; read byte at i, store in c as word
0957   31 25 74 21 3D 2F 71 69 74 DB   "1%t!=/qit"   ; break if type != 0
0960   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0967   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
097D   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0984   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
098B   7D                     DB   "}"   
098C   7D                     DB   "}"   
098D   00                     DB   0   
098E                             ; /mp map
098E                             ; src func -- src1
098E                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
098E                MAP:         ; map: source, function
098E   CD 9F 03               CALL   go   
0991   00 00                  DW   NUL   
0993   9B 09                  DW   mapM_1849S1403   
0995   97 09                  DW   $+2   
0997   00                     DB   0   
0998   02 73 66               .PSTR   "sf"   
099B                MAPM_1849S1403:      
099B   7B                     DB   "{"   
099C   5C 6B 74 7B            DB   "\\kt{"   
09A0   30 25 74 21 3D 2F 71 69 74 DB   "0%t!=/qit"   ; break if type != 0
09A9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09AD   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09B2   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09BE   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09C6   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09CD   7D                     DB   "}"   
09CE   7D                     DB   "}"   
09CF   00                     DB   0   
09D0                             ; /ft filter
09D0                             ; src pred -- src1
09D0                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09D0                FILTER:      ; filter: source, predicate, local: T
09D0   CD 9F 03               CALL   go   
09D3   00 00                  DW   NUL   
09D5   DE 09                  DW   filterM_1863S1418   
09D7   D9 09                  DW   $+2   
09D9   01                     DB   1   
09DA   03 73 70 54            .PSTR   "spT"   
09DE                FILTERM_1863S1418:      
09DE   7B                     DB   "{"   
09DF   5B 30 5D 25 54 3D      DB   "[0]%T="   
09E5   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09ED   5B                     DB   "["   
09EE   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
09FD   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A05   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
0A0B   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0A10   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A26   3F                     DB   "?"   
0A27   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A2E   7D                     DB   "}"   
0A2F   7D                     DB   "}"   
0A30   00                     DB   0   
0A31                             ; /fd fold
0A31                             ; reducer is a function like: \\da00bbLi4u
0A31                             ; src init reducer -- src1
0A31                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A31                FOLD:        ; src, init, reducer
0A31   CD 9F 03               CALL   go   
0A34   00 00                  DW   NUL   
0A36   40 0A                  DW   foldM_1882S1438   
0A38   3A 0A                  DW   $+2   
0A3A   01                     DB   1   
0A3B   04 73 69 72 41         .PSTR   "sirA"   
0A40                FOLDM_1882S1438:      
0A40   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A41   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A48   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A4C   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A50   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A55   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A70   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A78   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A7F   7D                     DB   "}"   
0A80   7D                     DB   "}"   
0A81   00                     DB   0   
0A82                             ; /for forEach
0A82                             ; src proc --
0A82                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A82                FOREACH:      ; forEach: source, procedure, local: T
0A82   CD 9F 03               CALL   go   
0A85   00 00                  DW   NUL   
0A87   90 0A                  DW   forEachM_1896S1453   
0A89   8B 0A                  DW   $+2   
0A8B   01                     DB   1   
0A8C   03 73 70 54            .PSTR   "spT"   
0A90                FOREACHM_1896S1453:      
0A90   7B                     DB   "{"   
0A91   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A97   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A9B   32 25 74 3D 3D 2F 71 69 74 DB   "2%t==/qit"   ; if type == 2 skip
0AA4   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AA9   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0ABB   3F                     DB   "?"   ; ifte:
0ABC   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AC5   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0ACC   7D                     DB   "}"   
0ACD   00                     DB   0   
0ACE                             ; ; /fs funcSrc
0ACE                             ; ; func -- src
0ACE                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0ACE                FUNCSRC:      ; :f func or block
0ACE   CD 9F 03               CALL   go   
0AD1   00 00                  DW   NUL   
0AD3   DA 0A                  DW   funcSrcM_1910S1468   
0AD5   D7 0A                  DW   $+2   
0AD7   00                     DB   0   
0AD8   01 66                  .PSTR   "f"   
0ADA                FUNCSRCM_1910S1468:      
0ADA   7B                     DB   "{"   
0ADB   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0ADF   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /qit
0AE8   5C 64 74 7B            DB   "\\dt{"   
0AEC   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /qit
0AFF   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B06   7D                     DB   "}"   
0B07   7D                     DB   "}"   
0B08   00                     DB   0   
0B09                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B09                PRINTARRAY:      
0B09   CD 9F 03               CALL   go   
0B0C   00 00                  DW   NUL   
0B0E   17 0B                  DW   printArrayM_1920S1479   
0B10   12 0B                  DW   $+2   
0B12   02                     DB   2   
0B13   03 61 62 63            .PSTR   "abc"   
0B17                PRINTARRAYM_1920S1479:      
0B17   7B                     DB   "{"   
0B18   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B50   7D                     DB   "}"   
0B51   00                     DB   0   
0B52                             ;*******************************************************************
0B52                             ; implementations continued
0B52                             ;*******************************************************************
0B52                COMMA:       
0B52   CD B6 0F               CALL   cmdTable   
0B55   63 00                  DB   "c",NUL   ; .c print char
0B57   61 0B                  DW   readChar   
0B59   73 00                  DB   "s",NUL   ; .s print string
0B5B   6A 0B                  DW   readString   
0B5D   00 00                  DW   NUL   ; .  print number, fall through
0B5F   8C 0B                  DW   readNumber   
0B61                READCHAR:      
0B61   CD 81 00               CALL   getchar   
0B64   26 00                  LD   h,0   
0B66   6F                     LD   l,a   
0B67   E5                     PUSH   hl   
0B68   DD E9                  JP   (ix)   
0B6A                READSTRING:      
0B6A   ED 5B EA 5B            LD   de,(vHeapPtr)   
0B6E   D5                     PUSH   de   ; return start of string
0B6F                READSTRING1:      
0B6F   CD 81 00               CALL   getchar   
0B72   FE 0D                  CP   "\r"   
0B74   28 0D                  JR   z,readString2   
0B76   12                     LD   (de),a   
0B77   13                     INC   de   
0B78   3A F1 5B               LD   a,(vEcho)   
0B7B   3C                     INC   a   
0B7C   20 F1                  JR   nz,readString1   
0B7E   CD 85 00               CALL   putchar   
0B81   18 EC                  JR   readString1   
0B83                READSTRING2:      
0B83   AF                     XOR   a   
0B84   12                     LD   (de),a   
0B85   13                     INC   de   
0B86   ED 53 EA 5B            LD   (vHeapPtr),de   
0B8A   DD E9                  JP   (ix)   
0B8C                READNUMBER:      
0B8C   DD E5                  PUSH   ix   
0B8E                          ;*Macro unroll:  PERFORM readString
0B8E   DD 21 95 0B            LD   ix,performM_1964S1528   
0B92   C3 6A 0B               JP   readString   
0B95                PERFORMM_1964S1528:      
0B95   60 69                  LD   hl,bc   ; save bc, hl = string*
0B97   E3                     EX   (sp),hl   
0B98   22 EA 5B               LD   (vHeapPtr),hl   ; restore heap* to before string
0B9B   44 4D                  LD   bc,hl   
0B9D   0A                     LD   a,(bc)   
0B9E   FE 2D                  CP   "-"   
0BA0   28 11                  JR   z,readNumber1   
0BA2   FE 24                  CP   "$"   
0BA4   28 17                  JR   z,readNumber2   
0BA6   FE 30                  CP   "0"   
0BA8   30 09                  JR   nc,readNumber1   
0BAA   FE 3A                  CP   "9"+1   
0BAC   38 05                  JR   c,readNumber1   
0BAE   21 00 00               LD   hl,0   
0BB1   18 12                  JR   readNumber3   
0BB3                READNUMBER1:      
0BB3                          ;*Macro unroll:  PERFORM num
0BB3   DD 21 BA 0B            LD   ix,performM_1981S1545   
0BB7   C3 4E 0C               JP   num   
0BBA                PERFORMM_1981S1545:      
0BBA   E1                     POP   hl   
0BBB   18 08                  JR   readNumber3   
0BBD                READNUMBER2:      
0BBD                          ;*Macro unroll:  PERFORM hexNum
0BBD   DD 21 C4 0B            LD   ix,performM_1985S1549   
0BC1   C3 D5 0B               JP   hexNum   
0BC4                PERFORMM_1985S1549:      
0BC4   E1                     POP   hl   
0BC5                READNUMBER3:      
0BC5   C1                     POP   bc   
0BC6   DD E1                  POP   ix   
0BC8   E5                     PUSH   hl   
0BC9   DD E9                  JP   (ix)   
0BCB                             ; ~ bitwise invert
0BCB                TILDE:       
0BCB                INVERT:      
0BCB   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BCC   7D                     LD   a,l   
0BCD   2F                     CPL      
0BCE   6F                     LD   l,a   
0BCF   7C                     LD   a,h   
0BD0   2F                     CPL      
0BD1   67                     LD   h,a   
0BD2   C3 D8 02               JP   add3   
0BD5                             ; $ hex                         ; 22
0BD5                DOLLAR:      
0BD5                HEXNUM:      
0BD5   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BD8                HEXNUM1:      
0BD8   03                     INC   bc   
0BD9   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BDA   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BDC   28 02                  JR   z,hexnum2   ; no a decimal
0BDE   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BE0                HEXNUM2:      
0BE0   D6 30                  SUB   $30   ; form decimal digit
0BE2   DA 70 0C               JP   c,num2   
0BE5   FE 10                  CP   $0F+1   
0BE7   D2 70 0C               JP   nc,num2   
0BEA   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BEB   29                     ADD   hl,hl   ; 4X
0BEC   29                     ADD   hl,hl   ; 8X
0BED   29                     ADD   hl,hl   ; 16X
0BEE   85                     ADD   a,l   ; add into bottom of hl
0BEF   6F                     LD   l,a   
0BF0   18 E6                  JR   hexnum1   
0BF2                             ; ? if                            23
0BF2                             ; condition then else -- value
0BF2                QUESTION:      
0BF2                IF:          
0BF2   D1                     POP   de   ; de = else
0BF3   E1                     POP   hl   ; hl = then
0BF4   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BF5   7C                     LD   a,h   
0BF6   B5                     OR   l   
0BF7   E1                     POP   hl   ; hl = then
0BF8   CA A0 03               JP   z,go1   ; if z de = else
0BFB   EB                     EX   de,hl   ; condition = false, de = then
0BFC   C3 A0 03               JP   go1   
0BFF                             ; string                        ;38
0BFF                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BFF                QUOTE:       
0BFF                STRING:      
0BFF   2A EA 5B               LD   hl,(vHeapPtr)   ; hl = heap*
0C02   E5                     PUSH   hl   ; save start of string
0C03   0A                     LD   a,(bc)   
0C04   5F                     LD   e,a   ; e = matching terminator
0C05   03                     INC   bc   ; point to next char
0C06   18 03                  JR   string2   
0C08                STRING1:      
0C08   77                     LD   (hl),a   
0C09   23                     INC   hl   ; increase count
0C0A   03                     INC   bc   ; point to next char
0C0B                STRING2:      
0C0B   0A                     LD   a,(bc)   
0C0C   BB                     CP   e   ; is it the string terminator
0C0D   28 02                  JR   z,string3   
0C0F   18 F7                  JR   string1   
0C11                STRING3:      
0C11   AF                     XOR   a   ; write NUL to terminate string
0C12   77                     LD   (hl),a   ; hl = end of string
0C13   23                     INC   hl   
0C14   22 EA 5B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C17   DD E9                  JP   (ix)   
0C19                             ; %a .. %z                      43
0C19                             ; -- value
0C19                             ; returns value of arg
0C19                PERCENT:      
0C19                ARG:         
0C19   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C1C   FD 56 05               LD   d,(iy+5)   
0C1F   EB                     EX   de,hl   
0C20   7D                     LD   a,l   ; arg_list* == null, skip
0C21   B4                     OR   h   
0C22   28 1A                  JR   z,arg0a   
0C24   23                     INC   hl   ; a = num_args, hl = arg_list*
0C25   7E                     LD   a,(hl)   
0C26   23                     INC   hl   
0C27   B7                     OR   a   
0C28   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C2A   5F                     LD   e,a   ; e = a = num_args
0C2B   03                     INC   bc   ; a = next char = dollar_name
0C2C   0A                     LD   a,(bc)   
0C2D   C5                     PUSH   bc   ; save IP
0C2E   43                     LD   b,e   ; b = e = num_args
0C2F   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C32   FD 56 03               LD   d,(iy+3)   
0C35                ARG0:        
0C35   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C36   1B                     DEC   de   
0C37   BE                     CP   (hl)   
0C38   28 09                  JR   z,arg1   
0C3A   23                     INC   hl   ; hl = next arg_list*
0C3B   10 F8                  DJNZ   arg0   
0C3D   C1                     POP   bc   ; no match, restore IP
0C3E                ARG0A:       
0C3E   11 00 00               LD   de,0   ; return 0
0C41   18 08                  JR   arg1a   
0C43                ARG1:        
0C43   C1                     POP   bc   ; restore IP
0C44   EB                     EX   de,hl   ; hl = arg*
0C45   22 F8 5B               LD   (vPointer),hl   ; store arg* in setter
0C48   5E                     LD   e,(hl)   
0C49   23                     INC   hl   
0C4A   56                     LD   d,(hl)   ; de = arg
0C4B                ARG1A:       
0C4B   D5                     PUSH   de   ; push arg
0C4C   DD E9                  JP   (ix)   
0C4E                             ; 0..9 number                   37
0C4E                NUM:         
0C4E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C51   0A                     LD   a,(bc)   ; Get numeral or -
0C52   FE 2D                  CP   "-"   
0C54   20 01                  JR   nz,num0   
0C56   03                     INC   bc   ; move to next char, no flags affected
0C57                NUM0:        
0C57   08                     EX   af,af'   ; save zero flag = 0 for later
0C58                NUM1:        
0C58   0A                     LD   a,(bc)   ; read digit
0C59   D6 30                  SUB   "0"   ; less than 0?
0C5B   38 13                  JR   c,num2   ; not a digit, exit loop
0C5D   FE 0A                  CP   10   ; greater that 9?
0C5F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C61   03                     INC   bc   ; inc IP
0C62   54 5D                  LD   de,hl   ; multiply hl * 10
0C64   29                     ADD   hl,hl   
0C65   29                     ADD   hl,hl   
0C66   19                     ADD   hl,de   
0C67   29                     ADD   hl,hl   
0C68   85                     ADD   a,l   ; add digit in a to hl
0C69   6F                     LD   l,a   
0C6A   3E 00                  LD   a,0   
0C6C   8C                     ADC   a,h   
0C6D   67                     LD   h,a   
0C6E   18 E8                  JR   num1   
0C70                NUM2:        
0C70   0B                     DEC   bc   
0C71   08                     EX   af,af'   ; restore zero flag
0C72   20 07                  JR   nz,num3   
0C74   EB                     EX   de,hl   ; negate the value of hl
0C75   21 00 00               LD   hl,0   
0C78   B7                     OR   a   ; jump to sub2
0C79   ED 52                  SBC   hl,de   
0C7B                NUM3:        
0C7B   E5                     PUSH   hl   ; Put the number on the stack
0C7C   DD E9                  JP   (ix)   ; and process the next character
0C7E                             ; }                               58
0C7E                RBRACE:      
0C7E                BLOCKEND:      
0C7E   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C81   FD 56 01               LD   d,(iy+1)   
0C84   ED 53 04 5C            LD   (vTemp1),de   
0C88   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C8B   FD 56 07               LD   d,(iy+7)   
0C8E   ED 53 06 5C            LD   (vTemp2),de   
0C92   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C95   FD 56 03               LD   d,(iy+3)   
0C98   EB                     EX   de,hl   
0C99   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C9C   FD 56 01               LD   d,(iy+1)   
0C9F   13                     INC   de   ; for carry flag <=
0CA0   B7                     OR   a   
0CA1   ED 52                  SBC   hl,de   
0CA3   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0CA5   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0CA7   FD 5D                  LD   e,iyl   
0CA9   21 08 00               LD   hl,8   
0CAC   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0CAD   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0CAE   18 0C                  JR   blockEnd2   
0CB0                BLOCKEND1:      ; same scope
0CB0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0CB3   FD 56 03               LD   d,(iy+3)   
0CB6   EB                     EX   de,hl   
0CB7   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CB9   FD 5D                  LD   e,iyl   
0CBB   EB                     EX   de,hl   
0CBC                BLOCKEND2:      
0CBC   44 4D                  LD   bc,hl   ; bc = hl = BP
0CBE   B7                     OR   a   ; hl = BP - SP = count
0CBF   ED 72                  SBC   hl,sp   
0CC1   7D                     LD   a,l   
0CC2   B4                     OR   h   
0CC3   28 09                  JR   z,blockEnd3   
0CC5   C5                     PUSH   bc   ; bc = count, hl = BP
0CC6   44 4D                  LD   bc,hl   
0CC8   E1                     POP   hl   
0CC9   2B                     DEC   hl   ; hl = BP-1
0CCA   1B                     DEC   de   ; de = args*-1
0CCB   ED B8                  LDDR      
0CCD   13                     INC   de   
0CCE                BLOCKEND3:      
0CCE   EB                     EX   de,hl   ; sp = de = new tos*
0CCF   F9                     LD   sp,hl   
0CD0   ED 4B 06 5C            LD   bc,(vTemp2)   
0CD4   FD 2A 04 5C            LD   iy,(vTemp1)   
0CD8   ED 5B EC 5B            LD   de,(vRecurPtr)   ; de = recur vector
0CDC   7B                     LD   a,e   ; check for NUL
0CDD   B2                     OR   d   
0CDE   20 02                  JR   nz,blockEnd4   
0CE0   DD E9                  JP   (ix)   
0CE2                BLOCKEND4:      
0CE2   21 00 00               LD   hl,0   ; clear recur vector
0CE5   22 EC 5B               LD   (vRecurPtr),hl   
0CE8   C3 A0 03               JP   go1   ; execute de
0CEB                GOBLOCK:      
0CEB   ED 53 04 5C            LD   (vTemp1),de   ; save de
0CEF   21 00 59               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CF2   FD 54                  LD   d,iyh   
0CF4   FD 5D                  LD   e,iyl   
0CF6   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CF7   ED 52                  SBC   hl,de   
0CF9   ED 5B 04 5C            LD   de,(vTemp1)   ; restore de
0CFD   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CFE   B4                     OR   h   
0CFF   3E 00                  LD   a,0   
0D01   28 6A                  JR   z,goFunc8   
0D03   C5                     PUSH   bc   ; push IP
0D04   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0D07   FD 46 05               LD   b,(iy+5)   
0D0A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0D0D   FD 66 03               LD   h,(iy+3)   
0D10                GOBLOCK2:      
0D10   C5                     PUSH   bc   ; arg_list*
0D11   E5                     PUSH   hl   ; first_arg*
0D12   FD E5                  PUSH   iy   ; push BP
0D14   FD 21 00 00            LD   iy,0   ; BP = SP
0D18   FD 39                  ADD   iy,sp   
0D1A                GOBLOCK3:      
0D1A   42 4B                  LD   bc,de   ; bc = de = block*-1
0D1C   DD E9                  JP   (ix)   
0D1E                GOFUNC:      ; execute func
0D1E   EB                     EX   de,hl   ; hl = func*
0D1F   5E                     LD   e,(hl)   ; de = partial_array*
0D20   23                     INC   hl   
0D21   56                     LD   d,(hl)   
0D22   23                     INC   hl   
0D23   7B                     LD   a,e   ; if partial_array* == null skip
0D24   B2                     OR   d   
0D25   28 21                  JR   z,goFunc3   
0D27   ED 43 04 5C            LD   (vTemp1),bc   
0D2B   22 06 5C               LD   (vTemp2),hl   ; save bc,hl
0D2E   EB                     EX   de,hl   ; hl = partial_array*
0D2F   2B                     DEC   hl   ; bc = count
0D30   46                     LD   b,(hl)   
0D31   2B                     DEC   hl   
0D32   4E                     LD   c,(hl)   
0D33   23                     INC   hl   ; hl = array data*
0D34   23                     INC   hl   
0D35   18 06                  JR   goFunc2   ; push each item on stack
0D37                GOFUNC1:      
0D37   5E                     LD   e,(hl)   ; de = partial item
0D38   23                     INC   hl   
0D39   56                     LD   d,(hl)   
0D3A   23                     INC   hl   
0D3B   D5                     PUSH   de   ; push on stack
0D3C   0B                     DEC   bc   
0D3D                GOFUNC2:      
0D3D   79                     LD   a,c   ; if count != 0 then loop
0D3E   B0                     OR   b   
0D3F   20 F6                  JR   nz,goFunc1   
0D41   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore bc
0D45   2A 06 5C               LD   hl,(vTemp2)   ; restore hl
0D48                GOFUNC3:      
0D48   5E                     LD   e,(hl)   ; de = block*
0D49   23                     INC   hl   
0D4A   56                     LD   d,(hl)   
0D4B   23                     INC   hl   
0D4C   ED 53 04 5C            LD   (vTemp1),de   ; save block*
0D50   5E                     LD   e,(hl)   ; de = arg_list*
0D51   23                     INC   hl   
0D52   56                     LD   d,(hl)   
0D53   23                     INC   hl   
0D54   EB                     EX   de,hl   ; hl = arg_list*
0D55   ED 5B 04 5C            LD   de,(vTemp1)   ; restore de = block*
0D59   7D                     LD   a,l   ; if arg_list* == null a = 0
0D5A   B4                     OR   h   
0D5B   20 03                  JR   nz,goFunc4   
0D5D   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D5E   18 0D                  JR   goFunc8   
0D60                GOFUNC4:      ; allocate locals
0D60   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D61   18 03                  JR   goFunc6   
0D63                GOFUNC5:      ; loop
0D63   3B                     DEC   sp   
0D64   3B                     DEC   sp   
0D65   3D                     DEC   a   
0D66                GOFUNC6:      
0D66   B7                     OR   a   
0D67   20 FA                  JR   nz,goFunc5   ; end loop
0D69                GOFUNC7:      
0D69   23                     INC   hl   ; a = num_args* x 2
0D6A   7E                     LD   a,(hl)   
0D6B   2B                     DEC   hl   
0D6C   87                     ADD   a,a   ; a *= 2
0D6D                GOFUNC8:      
0D6D   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D6E   44 4D                  LD   bc,hl   
0D70   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D73   85                     ADD   a,l   
0D74   6F                     LD   l,a   
0D75   39                     ADD   hl,sp   
0D76   18 98                  JR   goBlock2   
0D78                             ; =                              21
0D78                             ; value _oldValue --            ; uses address in vPointer 15
0D78                ASSIGN:      
0D78   E1                     POP   hl   ; discard last accessed value
0D79   E1                     POP   hl   ; hl = new value
0D7A                ASSIGN0:      
0D7A   EB                     EX   de,hl   ; de = new value
0D7B   2A F8 5B               LD   hl,(vPointer)   
0D7E                ASSIGN1:      ; entry point from defineEnd
0D7E   73                     LD   (hl),e   
0D7F   3A EE 5B               LD   a,(vDataWidth)   
0D82   3D                     DEC   a   ; is it byte?
0D83   28 02                  JR   z,assign2   
0D85   23                     INC   hl   
0D86   72                     LD   (hl),d   
0D87                ASSIGN2:      
0D87   DD E9                  JP   (ix)   
0D89                             ; hl = value1, de = value2
0D89                             ; hl = result
0D89                EQUALS:      
0D89   B7                     OR   a   ; reset the carry flag
0D8A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D8C   28 16                  JR   z,true1   
0D8E   18 1A                  JR   false1   
0D90                NOTEQUALS:      
0D90   B7                     OR   a   ; reset the carry flag
0D91   ED 52                  SBC   hl,de   
0D93   20 0F                  JR   nz,true1   
0D95   18 13                  JR   false1   
0D97                             ; hl = value1 de = value2
0D97                             ; hl = result
0D97                LESSTHANEQ:      
0D97   B7                     OR   a   
0D98   ED 52                  SBC   hl,de   
0D9A   18 05                  JR   lessthan1   
0D9C                             ; hl = value1 de = value2
0D9C                             ; hl = result
0D9C                LESSTHAN:      
0D9C   B7                     OR   a   
0D9D   ED 52                  SBC   hl,de   
0D9F   28 09                  JR   z,false1   
0DA1                LESSTHAN1:      
0DA1   FA AA 0D               JP   m,false1   
0DA4                TRUE1:       
0DA4   21 FF FF               LD   hl,TRUE   
0DA7   E5                     PUSH   hl   
0DA8   DD E9                  JP   (ix)   
0DAA                NULL1:       
0DAA                FALSE1:      
0DAA   21 00 00               LD   hl,FALSE   
0DAD   E5                     PUSH   hl   
0DAE   DD E9                  JP   (ix)   
0DB0                SPREAD:      
0DB0   E1                     POP   hl   ; hl = array*
0DB1   ED 43 04 5C            LD   (vTemp1),bc   ; save bc
0DB5   2B                     DEC   hl   ; bc = length
0DB6   46                     LD   b,(hl)   
0DB7   2B                     DEC   hl   
0DB8   4E                     LD   c,(hl)   
0DB9   23                     INC   hl   ; move back to array 0
0DBA   23                     INC   hl   
0DBB   18 0D                  JR   spread3   
0DBD                SPREAD1:      
0DBD   5E                     LD   e,(hl)   ; e = lsb data at hl
0DBE   23                     INC   hl   
0DBF   3A EE 5B               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DC2   57                     LD   d,a   
0DC3   15                     DEC   d   
0DC4   28 02                  JR   z,spread2   
0DC6   56                     LD   d,(hl)   ; d = msb data at hl
0DC7   23                     INC   hl   
0DC8                SPREAD2:      
0DC8   D5                     PUSH   de   ; return de
0DC9   0B                     DEC   bc   ; count--
0DCA                SPREAD3:      
0DCA   79                     LD   a,c   ; exit loop if bc == 0
0DCB   B0                     OR   b   
0DCC   20 EF                  JR   nz,spread1   
0DCE   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore bc
0DD2   DD E9                  JP   (ix)   
0DD4                             ; shiftLeft
0DD4                             ; value count <<
0DD4                             ; count variable <<=
0DD4                SHIFTLEFT:      
0DD4   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DD5   D1                     POP   de   
0DD6   03                     INC   bc   
0DD7   0A                     LD   a,(bc)   
0DD8   FE 3D                  CP   "="   
0DDA   28 02                  JR   z,shiftLeft2   
0DDC   0B                     DEC   bc   
0DDD   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DDE                SHIFTLEFT2:      
0DDE   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
0DE2   43                     LD   b,e   ; b = loop counter
0DE3   04                     INC   b   ; test for counter=0 case
0DE4   18 01                  JR   shiftLeft4   
0DE6                SHIFTLEFT3:      
0DE6   29                     ADD   hl,hl   ; left shift hl
0DE7                SHIFTLEFT4:      
0DE7   10 FD                  DJNZ   shiftLeft3   
0DE9   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
0DED   C3 9D 02               JP   sub3   
0DF0                             ; shiftRight
0DF0                             ; value count >>
0DF0                             ; count variable >>=
0DF0                SHIFTRIGHT:      
0DF0   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DF1   D1                     POP   de   
0DF2   03                     INC   bc   
0DF3   0A                     LD   a,(bc)   
0DF4   FE 3D                  CP   "="   
0DF6   28 02                  JR   z,shiftRight2   
0DF8   0B                     DEC   bc   
0DF9   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0DFA                SHIFTRIGHT2:      
0DFA   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
0DFE   43                     LD   b,e   ; b = loop counter
0DFF   04                     INC   b   ; test for counter=0 case
0E00   18 04                  JR   shiftRight4   
0E02                SHIFTRIGHT3:      
0E02   CB 3C                  SRL   h   ; right shift hl
0E04   CB 1D                  RR   l   
0E06                SHIFTRIGHT4:      
0E06   10 FA                  DJNZ   shiftRight3   
0E08   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
0E0C   C3 9D 02               JP   sub3   
0E0F                             ; division subroutine.
0E0F                             ; bc: divisor, de: dividend, hl: remainder
0E0F                DIVIDE:      
0E0F   21 00 00               LD   hl,0   ; zero the remainder
0E12   3E 10                  LD   a,16   ; loop counter
0E14                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0E14   CB 21                  SLA   c   
0E16   CB 10                  RL   b   
0E18   ED 6A                  ADC   hl,hl   
0E1A   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E1C   38 03                  JR   c,divide2   
0E1E   0C                     INC   c   
0E1F   18 01                  JR   divide3   
0E21                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E21   19                     ADD   hl,de   
0E22                DIVIDE3:      
0E22   3D                     DEC   a   
0E23   20 EF                  JR   nz,divide1   
0E25   50 59                  LD   de,bc   ; result from bc to de
0E27   C9                     RET      
0E28                DOTNEXT:      
0E28   3A F2 5B               LD   a,(vStrMode)   ; if string mode then exit
0E2B   3C                     INC   a   
0E2C   20 02                  JR   nz,dotNext1   
0E2E   DD E9                  JP   (ix)   
0E30                DOTNEXT1:      
0E30   11 00 5A               LD   de,BUFFER   
0E33   2A E8 5B               LD   hl,(vBufPtr)   
0E36   36 00                  LD   (hl),0   ; store NUL at end of string
0E38   ED 53 E8 5B            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E3C   EB                     EX   de,hl   ; hl = BUFFER
0E3D   CD F2 0F               CALL   putstr   
0E40   DD E9                  JP   (ix)   
0E42                             ; arg_list - parses arg_list e.g. ab:c
0E42                             ; -- arg_list*
0E42                PARSEARGS:      
0E42   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E45   2A EA 5B               LD   hl,(vHeapPtr)   ; hl = heap*
0E48   E5                     PUSH   hl   ; save start of arg_list
0E49   23                     INC   hl   ; skip length fields to start of string
0E4A   23                     INC   hl   
0E4B   03                     INC   bc   ; point to next char
0E4C                PARSEARGS1:      
0E4C   0A                     LD   a,(bc)   
0E4D   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E4F   20 03                  JR   nz,parseArgs1a   
0E51   14                     INC   d   ; non zero value local count acts as flag
0E52   18 10                  JR   parseArgs3   
0E54                PARSEARGS1A:      
0E54   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E56   38 0F                  JR   c,parseArgs4   
0E58   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E5A   30 0B                  JR   nc,parseArgs4   
0E5C                PARSEARGS2:      
0E5C   77                     LD   (hl),a   
0E5D   23                     INC   hl   
0E5E   1C                     INC   e   ; increase arg count
0E5F   AF                     XOR   a   
0E60   B2                     OR   d   
0E61   28 01                  JR   z,parseArgs3   
0E63   14                     INC   d   ; if d > 0 increase local count
0E64                PARSEARGS3:      
0E64   03                     INC   bc   ; point to next char
0E65   18 E5                  JR   parseArgs1   
0E67                PARSEARGS4:      
0E67   0B                     DEC   bc   
0E68   AF                     XOR   a   
0E69   B2                     OR   d   
0E6A   28 01                  JR   z,parseArgs5   
0E6C   15                     DEC   d   ; remove initial inc
0E6D                PARSEARGS5:      
0E6D   23                     INC   hl   
0E6E   22 EA 5B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E71   E1                     POP   hl   ; hl = start of arg_list
0E72   72                     LD   (hl),d   ; write number of locals at start - 1
0E73   23                     INC   hl   
0E74   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E75   2B                     DEC   hl   
0E76   E3                     EX   (sp),hl   
0E77   E9                     JP   (hl)   
0E78                             ; create block: parses block e.g. 00bbIC4uLi4g
0E78                             ; -- block*
0E78                PARSEBLOCK:      
0E78   C5                     PUSH   bc   ; return pointer to first { of block
0E79   03                     INC   bc   
0E7A   16 01                  LD   d,1   ; nesting: count first parenthesis
0E7C                PARSEBLOCK1:      ; Skip to end of definition
0E7C   0A                     LD   a,(bc)   ; Get the next character
0E7D   03                     INC   bc   ; Point to next character
0E7E   FE 21                  CP   " " + 1   ; ignore whitespace
0E80   38 FA                  JR   c,parseBlock1   
0E82   FE 27                  CP   "'"   ; quote char
0E84   28 0F                  JR   z,parseBlock2   
0E86   FE 22                  CP   DQ   ; double quote char
0E88   28 0B                  JR   z,parseBlock2   
0E8A   FE 60                  CP   "`"   ; grave char
0E8C   28 07                  JR   z,parseBlock2   
0E8E   CB 7A                  BIT   7,d   
0E90   20 EA                  JR   nz,parseBlock1   
0E92   C3 9B 0E               JP   parseBlock3   
0E95                PARSEBLOCK2:      
0E95   3E 80                  LD   a,$80   
0E97   AA                     XOR   d   
0E98   57                     LD   d,a   
0E99   18 E1                  JR   parseBlock1   
0E9B                PARSEBLOCK3:      
0E9B   FE 28                  CP   "("   
0E9D   28 16                  JR   z,parseBlock4   
0E9F   FE 7B                  CP   "{"   
0EA1   28 12                  JR   z,parseBlock4   
0EA3   FE 5B                  CP   "["   
0EA5   28 0E                  JR   z,parseBlock4   
0EA7   FE 29                  CP   ")"   
0EA9   28 0D                  JR   z,parseBlock5   
0EAB   FE 7D                  CP   "}"   
0EAD   28 09                  JR   z,parseBlock5   
0EAF   FE 5D                  CP   "]"   
0EB1   28 05                  JR   z,parseBlock5   
0EB3   18 C7                  JR   parseBlock1   
0EB5                PARSEBLOCK4:      
0EB5   14                     INC   d   
0EB6   18 C4                  JR   parseBlock1   
0EB8                PARSEBLOCK5:      
0EB8   15                     DEC   d   
0EB9   20 C1                  JR   nz,parseBlock1   ; get the next element
0EBB   60 69                  LD   hl,bc   ; hl = IP
0EBD   11 22 5C               LD   de,HEAP   ; is IP pointing to object in heap
0EC0   B7                     OR   a   ; IP - HEAP
0EC1   ED 52                  SBC   hl,de   
0EC3   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EC5   28 1C                  JR   z,parseBlock6   
0EC7   60 69                  LD   hl,bc   ; hl = IP
0EC9   D1                     POP   de   ; de = block*
0ECA   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
0ECE   B7                     OR   a   ; bc = size
0ECF   ED 52                  SBC   hl,de   
0ED1   44 4D                  LD   bc,hl   
0ED3   EB                     EX   de,hl   ; hl = block* de = heap*
0ED4   ED 5B EA 5B            LD   de,(vHeapPtr)   
0ED8   D5                     PUSH   de   ; return hblock*
0ED9   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EDB   ED 53 EA 5B            LD   (vHeapPtr),de   ; heap* += size
0EDF   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
0EE3                PARSEBLOCK6:      
0EE3   0B                     DEC   bc   ; balanced, exit
0EE4   E1                     POP   hl   ; hl = block*
0EE5   E3                     EX   (sp),hl   ; return to caller
0EE6   E9                     JP   (hl)   
0EE7                             ; create function
0EE7                             ; arg_list* block* -- func*
0EE7                CREATEFUNC:      
0EE7   E1                     POP   hl   ; save retrn address
0EE8   22 08 5C               LD   (vTemp3),hl   
0EEB   ED 43 04 5C            LD   (vTemp1),bc   ; save IP
0EEF   E1                     POP   hl   ; hl = block*
0EF0   22 06 5C               LD   (vTemp2),hl   ; save block*
0EF3   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0EF6   FD 56 05               LD   d,(iy+5)   
0EF9   7B                     LD   a,e   ; if arg_list == null then make a func
0EFA   B2                     OR   d   
0EFB   20 09                  JR   nz,createFunc0   
0EFD   21 00 00               LD   hl,0   ; partial_array = null
0F00   ED 5B EA 5B            LD   de,(vHeapPtr)   ; de = compile*
0F04   18 65                  JR   createFunc5   
0F06                CREATEFUNC0:      
0F06   E1                     POP   hl   ; hl = inner_arg_list*
0F07   E5                     PUSH   hl   ; save inner_arg_list
0F08   ED 5B EA 5B            LD   de,(vHeapPtr)   ; de = compile*
0F0C   7E                     LD   a,(hl)   ; compile inner_num_locals
0F0D   4F                     LD   c,a   ; b = inner_num_locals
0F0E   12                     LD   (de),a   
0F0F   23                     INC   hl   
0F10   13                     INC   de   
0F11   7E                     LD   a,(hl)   ; compile inner_length
0F12   12                     LD   (de),a   
0F13   91                     SUB   c   ; a = inner_num args
0F14   23                     INC   hl   
0F15   13                     INC   de   
0F16   B7                     OR   a   ; compile args if inner_length > 0
0F17   28 05                  JR   z,createFunc1   
0F19   4F                     LD   c,a   ; bc = a
0F1A   06 00                  LD   b,0   
0F1C   ED B0                  LDIR      
0F1E                CREATEFUNC1:      
0F1E   EB                     EX   de,hl   ; hl = outer_arg_list
0F1F   FD 5E 04               LD   e,(iy+4)   
0F22   FD 56 05               LD   d,(iy+5)   
0F25   EB                     EX   de,hl   
0F26   23                     INC   hl   ; a = outer_length
0F27   7E                     LD   a,(hl)   
0F28   23                     INC   hl   
0F29   B7                     OR   a   
0F2A   28 05                  JR   z,createFunc2   
0F2C   4F                     LD   c,a   
0F2D   06 00                  LD   b,0   
0F2F   ED B0                  LDIR      ; append outer_args
0F31                CREATEFUNC2:      ; a = outer_length
0F31   47                     LD   b,a   ; b = a = outer_length
0F32   2A EA 5B               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F35   23                     INC   hl   
0F36   7E                     LD   a,(hl)   ; add outer_length to new length
0F37   80                     ADD   a,b   
0F38   77                     LD   (hl),a   
0F39   2B                     DEC   hl   
0F3A   78                     LD   a,b   ; save outer_length in a'
0F3B   08                     EX   af,af'   
0F3C   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F3D   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F3E   B7                     OR   a   
0F3F   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F41   4F                     LD   c,a   ; c = inner_num_locals
0F42   06 00                  LD   b,0   ; bc = inner_num_locals
0F44   23                     INC   hl   ; a = inner_length
0F45   7E                     LD   a,(hl)   
0F46   91                     SUB   c   ; a = inner_num_args
0F47   23                     INC   hl   ; hl = inner_arg_chars
0F48   85                     ADD   a,l   ; hl += a
0F49   6F                     LD   l,a   
0F4A   3E 00                  LD   a,0   
0F4C   84                     ADD   a,h   
0F4D   67                     LD   h,a   
0F4E   ED B0                  LDIR      ; append inner_locals
0F50                CREATEFUNC2A:      
0F50   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F51   12                     LD   (de),a   ; compile partial_array length field
0F52   13                     INC   de   
0F53   AF                     XOR   a   
0F54   12                     LD   (de),a   
0F55   13                     INC   de   
0F56   D5                     PUSH   de   ; push partial_array*
0F57   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F58   FD 5E 02               LD   e,(iy+2)   
0F5B   FD 56 03               LD   d,(iy+3)   
0F5E   EB                     EX   de,hl   
0F5F                CREATEFUNC3:      
0F5F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F60   4E                     LD   c,(hl)   
0F61   2B                     DEC   hl   
0F62   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F63   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F64   13                     INC   de   
0F65   79                     LD   a,c   
0F66   12                     LD   (de),a   
0F67   13                     INC   de   
0F68   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F6A                CREATEFUNC4:      
0F6A   E1                     POP   hl   ; hl = partial_array*
0F6B                CREATEFUNC5:      
0F6B   C1                     POP   bc   ; bc = new_arg_list*
0F6C   D5                     PUSH   de   ; return new func*
0F6D   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F6E   73                     LD   (hl),e   ; compile partial_array* to func
0F6F   23                     INC   hl   
0F70   72                     LD   (hl),d   
0F71   23                     INC   hl   
0F72   ED 5B 06 5C            LD   de,(vTemp2)   ; de = block*
0F76   73                     LD   (hl),e   ; compile block* to func
0F77   23                     INC   hl   
0F78   72                     LD   (hl),d   
0F79   23                     INC   hl   
0F7A   71                     LD   (hl),c   ; compile new_arg_list* to func
0F7B   23                     INC   hl   
0F7C   70                     LD   (hl),b   
0F7D   23                     INC   hl   
0F7E   22 EA 5B               LD   (vHeapPtr),hl   ; bump heap ptr
0F81   ED 4B 04 5C            LD   bc,(vTemp1)   ; restore IP
0F85   2A 08 5C               LD   hl,(vTemp3)   ; jump to return address
0F88   E9                     JP   (hl)   
0F89                             ;*******************************************************************
0F89                             ; general routines
0F89                             ;*******************************************************************
0F89                             ; hl = address
0F89                VARIABLE:      
0F89   22 F8 5B               LD   (vPointer),hl   
0F8C   5E                     LD   e,(hl)   
0F8D   3A EE 5B               LD   a,(vDataWidth)   
0F90   3D                     DEC   a   
0F91   16 00                  LD   d,0   
0F93   28 03                  JR   z,constant   
0F95   23                     INC   hl   
0F96   56                     LD   d,(hl)   
0F97   2B                     DEC   hl   
0F98                CONSTANT:      
0F98   D5                     PUSH   de   
0F99   DD E9                  JP   (ix)   
0F9B                             ; followed by a table
0F9B                             ; indexed on the 0-25 lowercase letter
0F9B                             ; db lsb(addr)
0F9B                             ; the final item index 26 matches any other char
0F9B                CHARTABLE:      
0F9B   03                     INC   bc   
0F9C   0A                     LD   a,(bc)   
0F9D   FE 7B                  CP   "z"+1   
0F9F   30 10                  JR   nc,charTable3   
0FA1   D6 61                  SUB   "a"   
0FA3   38 0C                  JR   c,charTable3   
0FA5                CHARTABLE1:      
0FA5   E1                     POP   hl   
0FA6   85                     ADD   a,l   
0FA7   6F                     LD   l,a   
0FA8   7E                     LD   a,(hl)   ; must have the same msb as the table
0FA9   B7                     OR   a   ; a = 0, nop
0FAA   20 03                  JR   nz,charTable2   
0FAC   C3 F0 06               JP   error1   
0FAF                CHARTABLE2:      
0FAF   6F                     LD   l,a   
0FB0   E9                     JP   (hl)   
0FB1                CHARTABLE3:      
0FB1   3E 1A                  LD   a,26   
0FB3   0B                     DEC   bc   
0FB4   18 EF                  JR   charTable1   
0FB6                             ; followed by a table
0FB6                             ; db char
0FB6                             ; db char - if null only match on first char
0FB6                             ; dw addr
0FB6                             ; the final item must have char == NUL
0FB6                CMDTABLE:      
0FB6   E1                     POP   hl   
0FB7                CMDTABLE1:      
0FB7                CMDTABLE2:      
0FB7   56                     LD   d,(hl)   
0FB8   23                     INC   hl   
0FB9   5E                     LD   e,(hl)   
0FBA   23                     INC   hl   
0FBB   AF                     XOR   a   ; if d == 0, matched
0FBC   BA                     CP   d   
0FBD   28 13                  JR   z,cmdTable5   
0FBF   03                     INC   bc   ; match?
0FC0   0A                     LD   a,(bc)   
0FC1   BA                     CP   d   
0FC2   20 09                  JR   nz,cmdTable4   
0FC4                CMDTABLE3:      
0FC4   AF                     XOR   a   ; if e == 0, matched
0FC5   BB                     CP   e   
0FC6   28 0A                  JR   z,cmdTable5   
0FC8   03                     INC   bc   
0FC9   0A                     LD   a,(bc)   ; match?
0FCA   BB                     CP   e   
0FCB   28 05                  JR   z,cmdTable5   
0FCD                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FCD   0B                     DEC   bc   
0FCE   23                     INC   hl   
0FCF   23                     INC   hl   
0FD0   18 E5                  JR   cmdTable2   
0FD2                CMDTABLE5:      ; matched, jump to addr
0FD2   5E                     LD   e,(hl)   
0FD3   23                     INC   hl   
0FD4   56                     LD   d,(hl)   
0FD5   EB                     EX   de,hl   
0FD6   E9                     JP   (hl)   
0FD7                GETVARADDR:      
0FD7   21 00 00               LD   hl,0   
0FDA   FE 7B                  CP   "z"+1   ; if a > z then exit
0FDC   D0                     RET   nc   
0FDD   D6 41                  SUB   "A"   ; a - 65
0FDF   D8                     RET   c   ; if < A then exit
0FE0   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FE2   38 05                  JR   c,getVarAddr1   
0FE4   D6 06                  SUB   "a"-("Z"+1)   
0FE6   FE 1A                  CP   "Z"-"A"+1   
0FE8   D8                     RET   c   ; if < a then exit
0FE9                GETVARADDR1:      
0FE9   87                     ADD   a,a   ; double a
0FEA   6F                     LD   l,a   
0FEB   26 5B                  LD   h,msb(VARS)   
0FED   C9                     RET      
0FEE                PUTSTR0:      
0FEE   CD 85 00               CALL   putchar   
0FF1   23                     INC   hl   
0FF2                PUTSTR:      
0FF2   7E                     LD   a,(hl)   
0FF3   B7                     OR   a   
0FF4   20 F8                  JR   nz,putstr0   
0FF6   C9                     RET      
0FF7                             ; **************************************************************************
0FF7                             ; calculate nesting value
0FF7                             ; a is char to be tested,
0FF7                             ; e is the nesting value (initially 0)
0FF7                             ; e is increased by ( and [
0FF7                             ; e is decreased by ) and ]
0FF7                             ; e has its bit 7 toggled by `
0FF7                             ; limited to 127 levels
0FF7                             ; **************************************************************************
0FF7                NESTING:      
0FF7   FE 27                  CP   "'"   ; quote char
0FF9   28 0A                  JR   z,nesting0   
0FFB   FE 22                  CP   DQ   ; double quote char
0FFD   28 06                  JR   z,nesting0   
0FFF   FE 60                  CP   "`"   ; grave char
1001   28 02                  JR   z,nesting0   
1003   18 0A                  JR   nesting1   
1005                NESTING0:      
1005   CB 7B                  BIT   7,e   
1007   28 03                  JR   z,nesting1a   
1009   CB BB                  RES   7,e   
100B   C9                     RET      
100C                NESTING1A:      
100C   CB FB                  SET   7,e   
100E   C9                     RET      
100F                NESTING1:      
100F   CB 7B                  BIT   7,e   
1011   C0                     RET   nz   
1012   FE 7B                  CP   "{"   
1014   28 08                  JR   z,nesting2   
1016   FE 5B                  CP   "["   
1018   28 04                  JR   z,nesting2   
101A   FE 28                  CP   "("   
101C   20 02                  JR   nz,nesting3   
101E                NESTING2:      
101E   1C                     INC   e   
101F   C9                     RET      
1020                NESTING3:      
1020   FE 7D                  CP   "}"   
1022   28 07                  JR   z,nesting4   
1024   FE 5D                  CP   "]"   
1026   28 03                  JR   z,nesting4   
1028   FE 29                  CP   ")"   
102A   C0                     RET   nz   
102B                NESTING4:      
102B   1D                     DEC   e   
102C   C9                     RET      
102D                PROMPT:      
102D   CD 3D 10               CALL   printStr   
1030   0D 0A 3E 20 00         .CSTR   "\r\n> "   
1035   C9                     RET      
1036                CRLF:        
1036   CD 3D 10               CALL   printStr   
1039   0D 0A 00               .CSTR   "\r\n"   
103C   C9                     RET      
103D                             ; prints a null teminated string
103D                             ; the string should be immediately following the call
103D                PRINTSTR:      
103D   E3                     EX   (sp),hl   ; swap			
103E   CD F2 0F               CALL   putstr   
1041   23                     INC   hl   ; inc past NUL
1042   E3                     EX   (sp),hl   ; put it back	
1043   C9                     RET      
1044                INIT:        
1044   21 F0 01               LD   hl,titleStr   
1047   11 0E 5C               LD   de,titleBuf   
104A   06 14                  LD   b,20   
104C                INIT1:       
104C   1A                     LD   a,(de)   
104D   BE                     CP   (hl)   
104E   20 17                  JR   nz,coldBoot0   
1050   13                     INC   de   
1051   23                     INC   hl   
1052   10 F8                  DJNZ   init1   
1054                WARMINIT:      
1054   ED 4B FC 5B            LD   bc,(vSavedIP)   ; restore IP
1058   ED 7B FE 5B            LD   sp,(vSavedSP)   ; restore SP
105C   DD 2A 00 5C            LD   ix,(vSavedNext)   ; restore Next
1060   FD 2A 02 5C            LD   iy,(vSavedBP)   ; restore BP
1064   C3 9E 10               JP   start1   
1067                COLDBOOT0:      
1067   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
106A   11 0E 5C               LD   de,titleBuf   
106D   06 14                  LD   b,20   
106F   ED B0                  LDIR      
1071                COLDINIT:      
1071   21 DE 01               LD   hl,isysVars   
1074   11 E6 5B               LD   de,sysVars   
1077   01 12 00               LD   bc,4 * 2 + 10   
107A   ED B0                  LDIR      
107C   21 00 5B               LD   hl,vars   ; 52 vars LO HI
107F   06 34                  LD   b,26*2   
1081   AF                     XOR   a   
1082                COLDBOOT1:      
1082   77                     LD   (hl),a   
1083   23                     INC   hl   
1084   10 FC                  DJNZ   coldBoot1   
1086   DD 21 1A 11            LD   ix,NEXT   
108A   FD 21 00 59            LD   iy,STACK   
108E   C9                     RET      
108F                COLDSTART:      
108F   31 00 59               LD   sp,STACK   
1092   CD 67 10               CALL   coldBoot0   
1095   C3 9E 10               JP   start1   
1098                START:       
1098   31 00 59               LD   sp,STACK   ; start Monty
109B   CD 44 10               CALL   init   ; setups
109E                START1:      
109E   21 0E 5C               LD   hl,titleBuf   
10A1   CD F2 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
10A4                INTERPRET:      
10A4   CD 2D 10               CALL   prompt   
10A7   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
10AA   21 00 59               LD   hl,TIB   
10AD   22 E6 5B               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
10B0                INTERPRET2:      ; calculate nesting
10B0   1E 00                  LD   e,0   ; initilize nesting value
10B2   C5                     PUSH   bc   ; save offset into TIB,
10B3                             ; bc is also the count of chars in TIB
10B3   21 00 59               LD   hl,TIB   ; hl is start of TIB
10B6   18 06                  JR   interpret4   
10B8                INTERPRET3:      
10B8   7E                     LD   a,(hl)   ; a = char in TIB
10B9   23                     INC   hl   ; inc pointer into TIB
10BA   0B                     DEC   bc   ; dec count of chars in TIB
10BB   CD F7 0F               CALL   nesting   ; update nesting value
10BE                INTERPRET4:      
10BE   79                     LD   a,c   ; is count zero?
10BF   B0                     OR   b   
10C0   20 F6                  JR   nz,interpret3   ; if not loop
10C2   C1                     POP   bc   ; restore offset into TIB
10C3                INTERPRET5:      
10C3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10C6   FE 20                  CP   $20   ; compare to space
10C8   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10CA   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10CC   28 31                  JR   z,interpret8   
10CE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10D0   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10D2   FE 08                  CP   CTRL_H   
10D4   CA 50 11               JP   z,backSpace_   
10D7   FE 0A                  CP   CTRL_J   
10D9   CA 60 11               JP   z,reEdit_   
10DC                INTERPRET5A:      
10DC   18 D2                  JR   interpret2   
10DE                INTERPRET6:      
10DE   21 00 59               LD   hl,TIB   
10E1   09                     ADD   hl,bc   
10E2   77                     LD   (hl),a   ; store the character in textbuf
10E3   03                     INC   bc   
10E4   CD 85 00               CALL   putchar   ; echo character to screen
10E7   CD F7 0F               CALL   nesting   
10EA   18 D7                  JR   interpret5   ; wait for next character
10EC                INTERPRET7:      
10EC   21 00 59               LD   hl,TIB   
10EF   09                     ADD   hl,bc   
10F0   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10F2   23                     INC   hl   
10F3   36 0A                  LD   (hl),"\n"   
10F5   23                     INC   hl   
10F6   03                     INC   bc   
10F7   03                     INC   bc   
10F8   CD 36 10               CALL   crlf   ; echo character to screen
10FB   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10FC   B7                     OR   a   
10FD   20 C4                  JR   nz,interpret5   
10FF                INTERPRET8:      
10FF   21 00 59               LD   hl,TIB   
1102   09                     ADD   hl,bc   
1103   22 E6 5B               LD   (vTIBPtr),hl   
1106   01 00 59               LD   bc,TIB   
1109   ED 43 FC 5B            LD   (vSavedIP),bc   ; save IP
110D   ED 73 FE 5B            LD   (vSavedSP),sp   ; save SP
1111   DD 22 00 5C            LD   (vSavedNext),ix   ; save Next
1115   FD 22 02 5C            LD   (vSavedBP),iy   ; save BP
1119   0B                     DEC   bc   
111A                NEXT:        
111A   03                     INC   bc   ; Increment the IP
111B   0A                     LD   a,(bc)   ; Get the next character and dispatch
111C   FE 20                  CP   " "   ; whitespace?
111E   28 FA                  JR   z,next   ; space? ignore
1120   38 0D                  JR   c,next1   
1122   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1124   6F                     LD   l,a   ; index into table
1125   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1127   6E                     LD   l,(hl)   ; get low jump address
1128   24                     INC   h   ; page 2
1129   FE BA                  CP   "Z" - "!" + 1 + $80   
112B   38 01                  JR   c,next0   
112D   24                     INC   h   ; page 3
112E                NEXT0:       
112E   E9                     JP   (hl)   ; Jump to routine
112F                NEXT1:       
112F   FE 00                  CP   NUL   ; end of input string?
1131   28 03                  JR   z,exit   
1133   C3 A4 10               JP   interpret   ; no, other whitespace, macros?
1136                EXIT:        
1136   03                     INC   bc   
1137   60 69                  LD   hl,bc   
1139   E9                     JP   (hl)   
113A                RUN:         
113A   C1                     POP   bc   
113B   0B                     DEC   bc   
113C   DD E9                  JP   (ix)   
113E                ERROR:       
113E   E5                     PUSH   hl   
113F   CD 3A 11               CALL   run   
1142   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
114D   C3 A4 10               JP   interpret   
1150                BACKSPACE_:      
1150   79                     LD   a,c   
1151   B0                     OR   b   
1152   CA B0 10               JP   z,interpret2   
1155   0B                     DEC   bc   
1156   CD 3D 10               CALL   printStr   
1159   08 20 08 00            .CSTR   "\b \b"   
115D   C3 B0 10               JP   interpret2   
1160                REEDIT_:      
1160   CD 3D 10               CALL   printStr   
1163   0D 3E 20 00            .CSTR   "\r> "   
1167   21 00 59               LD   hl,TIB   
116A   18 04                  JR   reEdit1   
116C                REEDIT0:      
116C   CD 85 00               CALL   putchar   
116F   23                     INC   hl   
1170                REEDIT1:      
1170   7E                     LD   a,(hl)   
1171   FE 0D                  CP   "\r"   
1173   20 F7                  JR   nz,reEdit0   
1175   11 00 59               LD   de,TIB   
1178   B7                     OR   a   
1179   ED 52                  SBC   hl,de   
117B   44 4D                  LD   bc,hl   
117D   C3 B0 10               JP   interpret2   
1180                          ;*Macro unroll: FUNC f1, 0, ""
1180                F1:          
1180   CD 9F 03               CALL   go   
1183   00 00                  DW   NUL   
1185   8B 11                  DW   f1M_3037S12   
1187   89 11                  DW   $+2   
1189   00                     DB   0   
118A   00                     .PSTR   ""   
118B                F1M_3037S12:      
118B   00                     DB   0   
118C                          ;*Macro unroll: FUNC f2, 0, ""
118C                F2:          
118C   CD 9F 03               CALL   go   
118F   00 00                  DW   NUL   
1191   97 11                  DW   f2M_3039S15   
1193   95 11                  DW   $+2   
1195   00                     DB   0   
1196   00                     .PSTR   ""   
1197                F2M_3039S15:      
1197   00                     DB   0   
1198                          ;*Macro unroll: FUNC f3, 0, ""
1198                F3:          
1198   CD 9F 03               CALL   go   
119B   00 00                  DW   NUL   
119D   A3 11                  DW   f3M_3041S18   
119F   A1 11                  DW   $+2   
11A1   00                     DB   0   
11A2   00                     .PSTR   ""   
11A3                F3M_3041S18:      
11A3   00                     DB   0   
11A4                          ;*Macro unroll: FUNC f4, 0, ""
11A4                F4:          
11A4   CD 9F 03               CALL   go   
11A7   00 00                  DW   NUL   
11A9   AF 11                  DW   f4M_3043S21   
11AB   AD 11                  DW   $+2   
11AD   00                     DB   0   
11AE   00                     .PSTR   ""   
11AF                F4M_3043S21:      
11AF   00                     DB   0   
11B0                          ALIGN   $100   
1200                TESTSSTART:      
1200                          ;*Macro unroll:  test "0 10 1 /rng \\a{%a.} /for", 0
1200   31 00 59               LD   SP,STACK   
1203   CD 71 10               CALL   coldInit   
1206   CD 60 57               CALL   execStr   
1209   30 20 31 30 20 31 20 2F 72 6E 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 6F 72 00 DB   "0 10 1 /rng \\a{%a.} /for",0   
1222   E1                     POP   HL   
1223   E5                     PUSH   HL   
1224   11 00 00               LD   DE,0   
1227   B7                     OR   A   
1228   ED 52                  SBC   HL,DE   
122A   7D                     LD   A,L   
122B   B4                     OR   H   
122C   CA 9B 12               JP   Z,expectM_3047S27   
122F   CD 3D 10               CALL   printStr   
1232   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 72 6E 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 6F 72 00 .CSTR   "Code: ","0 10 1 /rng \\a{%a.} /for"   
1251   CD 3D 10               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 3A 11               CALL   run   
126B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1275   CD 3D 10               CALL   printStr   
1278   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1285   E1                     POP   hl   
1286   E5                     PUSH   hl   
1287   E5                     PUSH   hl   
1288   CD 3A 11               CALL   run   
128B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
129A   76                     HALT      
129B                EXPECTM_3047S27:      
129B   E1                     POP   HL   
129C                             ; test "0 10 1 /rng \\a{%a 1 + 10 *} /mp \\a{%a.} /for", 0
129C                             ; test "0 10 1 /rng \\a{%a 3<}/ft \\a{%a.} /for", 0
129C                             ; test "0 10 1 /rng  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /for", 0
129C                             ; test "[10 20 30] /ai \\a{%a.} /for", 0
129C                             ; test "[1 2 3].a", 0
129C                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
129C                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
129C                             ; test "/hx /byt $1234.",0
129C                             ; test "/byt 257.",0
129C                             ; test "$1000 'hello there!' /si \\a{%a.c} /for", $1000
129C                             ; test "10 0 -1 /rng \\a{%a.} /for", 0
129C                             ; test "0 10 1 /f1 \\a{%a.} /for", 0
129C                             ; test "0 x = 2 x + = x .", false
129C                             ; test "_B [_A {1} _B {2}] /sel", 2
129C                             ; ; test "[_A {1} _B {2}] x= _B x /sel", 2
129C                             ; ; test "/bra", 2
129C                             ; call printStr
129C                             ; .cstr "Done!"
129C                             ; HALT
129C                          ;*Macro unroll:  test "/fal", false
129C   31 00 59               LD   SP,STACK   
129F   CD 71 10               CALL   coldInit   
12A2   CD 60 57               CALL   execStr   
12A5   2F 66 61 6C 00         DB   "/fal",0   
12AA   E1                     POP   HL   
12AB   E5                     PUSH   HL   
12AC   11 00 00               LD   DE,false   
12AF   B7                     OR   A   
12B0   ED 52                  SBC   HL,DE   
12B2   7D                     LD   A,L   
12B3   B4                     OR   H   
12B4   CA 0F 13               JP   Z,expectM_3067S52   
12B7   CD 3D 10               CALL   printStr   
12BA   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
12C5   CD 3D 10               CALL   printStr   
12C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D7   21 00 00               LD   hl,false   
12DA   E5                     PUSH   hl   
12DB   E5                     PUSH   hl   
12DC   CD 3A 11               CALL   run   
12DF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
12E9   CD 3D 10               CALL   printStr   
12EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F9   E1                     POP   hl   
12FA   E5                     PUSH   hl   
12FB   E5                     PUSH   hl   
12FC   CD 3A 11               CALL   run   
12FF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
130E   76                     HALT      
130F                EXPECTM_3067S52:      
130F   E1                     POP   HL   
1310                          ;*Macro unroll:  test "/tru", true
1310   31 00 59               LD   SP,STACK   
1313   CD 71 10               CALL   coldInit   
1316   CD 60 57               CALL   execStr   
1319   2F 74 72 75 00         DB   "/tru",0   
131E   E1                     POP   HL   
131F   E5                     PUSH   HL   
1320   11 FF FF               LD   DE,true   
1323   B7                     OR   A   
1324   ED 52                  SBC   HL,DE   
1326   7D                     LD   A,L   
1327   B4                     OR   H   
1328   CA 83 13               JP   Z,expectM_3068S53   
132B   CD 3D 10               CALL   printStr   
132E   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
1339   CD 3D 10               CALL   printStr   
133C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134B   21 FF FF               LD   hl,true   
134E   E5                     PUSH   hl   
134F   E5                     PUSH   hl   
1350   CD 3A 11               CALL   run   
1353   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
135D   CD 3D 10               CALL   printStr   
1360   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136D   E1                     POP   hl   
136E   E5                     PUSH   hl   
136F   E5                     PUSH   hl   
1370   CD 3A 11               CALL   run   
1373   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1382   76                     HALT      
1383                EXPECTM_3068S53:      
1383   E1                     POP   HL   
1384                          ;*Macro unroll:  test "1", 1
1384   31 00 59               LD   SP,STACK   
1387   CD 71 10               CALL   coldInit   
138A   CD 60 57               CALL   execStr   
138D   31 00                  DB   "1",0   
138F   E1                     POP   HL   
1390   E5                     PUSH   HL   
1391   11 01 00               LD   DE,1   
1394   B7                     OR   A   
1395   ED 52                  SBC   HL,DE   
1397   7D                     LD   A,L   
1398   B4                     OR   H   
1399   CA F1 13               JP   Z,expectM_3069S54   
139C   CD 3D 10               CALL   printStr   
139F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13A7   CD 3D 10               CALL   printStr   
13AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13B9   21 01 00               LD   hl,1   
13BC   E5                     PUSH   hl   
13BD   E5                     PUSH   hl   
13BE   CD 3A 11               CALL   run   
13C1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
13CB   CD 3D 10               CALL   printStr   
13CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13DB   E1                     POP   hl   
13DC   E5                     PUSH   hl   
13DD   E5                     PUSH   hl   
13DE   CD 3A 11               CALL   run   
13E1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
13F0   76                     HALT      
13F1                EXPECTM_3069S54:      
13F1   E1                     POP   HL   
13F2                          ;*Macro unroll:  test "2", 2
13F2   31 00 59               LD   SP,STACK   
13F5   CD 71 10               CALL   coldInit   
13F8   CD 60 57               CALL   execStr   
13FB   32 00                  DB   "2",0   
13FD   E1                     POP   HL   
13FE   E5                     PUSH   HL   
13FF   11 02 00               LD   DE,2   
1402   B7                     OR   A   
1403   ED 52                  SBC   HL,DE   
1405   7D                     LD   A,L   
1406   B4                     OR   H   
1407   CA 5F 14               JP   Z,expectM_3070S55   
140A   CD 3D 10               CALL   printStr   
140D   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1415   CD 3D 10               CALL   printStr   
1418   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1427   21 02 00               LD   hl,2   
142A   E5                     PUSH   hl   
142B   E5                     PUSH   hl   
142C   CD 3A 11               CALL   run   
142F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1439   CD 3D 10               CALL   printStr   
143C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1449   E1                     POP   hl   
144A   E5                     PUSH   hl   
144B   E5                     PUSH   hl   
144C   CD 3A 11               CALL   run   
144F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
145E   76                     HALT      
145F                EXPECTM_3070S55:      
145F   E1                     POP   HL   
1460                          ;*Macro unroll:  test "1", 1
1460   31 00 59               LD   SP,STACK   
1463   CD 71 10               CALL   coldInit   
1466   CD 60 57               CALL   execStr   
1469   31 00                  DB   "1",0   
146B   E1                     POP   HL   
146C   E5                     PUSH   HL   
146D   11 01 00               LD   DE,1   
1470   B7                     OR   A   
1471   ED 52                  SBC   HL,DE   
1473   7D                     LD   A,L   
1474   B4                     OR   H   
1475   CA CD 14               JP   Z,expectM_3071S56   
1478   CD 3D 10               CALL   printStr   
147B   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1483   CD 3D 10               CALL   printStr   
1486   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1495   21 01 00               LD   hl,1   
1498   E5                     PUSH   hl   
1499   E5                     PUSH   hl   
149A   CD 3A 11               CALL   run   
149D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
14A7   CD 3D 10               CALL   printStr   
14AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B7   E1                     POP   hl   
14B8   E5                     PUSH   hl   
14B9   E5                     PUSH   hl   
14BA   CD 3A 11               CALL   run   
14BD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
14CC   76                     HALT      
14CD                EXPECTM_3071S56:      
14CD   E1                     POP   HL   
14CE                          ;*Macro unroll:  test "0", 0
14CE   31 00 59               LD   SP,STACK   
14D1   CD 71 10               CALL   coldInit   
14D4   CD 60 57               CALL   execStr   
14D7   30 00                  DB   "0",0   
14D9   E1                     POP   HL   
14DA   E5                     PUSH   HL   
14DB   11 00 00               LD   DE,0   
14DE   B7                     OR   A   
14DF   ED 52                  SBC   HL,DE   
14E1   7D                     LD   A,L   
14E2   B4                     OR   H   
14E3   CA 3B 15               JP   Z,expectM_3072S57   
14E6   CD 3D 10               CALL   printStr   
14E9   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
14F1   CD 3D 10               CALL   printStr   
14F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1503   21 00 00               LD   hl,0   
1506   E5                     PUSH   hl   
1507   E5                     PUSH   hl   
1508   CD 3A 11               CALL   run   
150B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1515   CD 3D 10               CALL   printStr   
1518   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1525   E1                     POP   hl   
1526   E5                     PUSH   hl   
1527   E5                     PUSH   hl   
1528   CD 3A 11               CALL   run   
152B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
153A   76                     HALT      
153B                EXPECTM_3072S57:      
153B   E1                     POP   HL   
153C                          ;*Macro unroll:  test "10", 10
153C   31 00 59               LD   SP,STACK   
153F   CD 71 10               CALL   coldInit   
1542   CD 60 57               CALL   execStr   
1545   31 30 00               DB   "10",0   
1548   E1                     POP   HL   
1549   E5                     PUSH   HL   
154A   11 0A 00               LD   DE,10   
154D   B7                     OR   A   
154E   ED 52                  SBC   HL,DE   
1550   7D                     LD   A,L   
1551   B4                     OR   H   
1552   CA AB 15               JP   Z,expectM_3073S58   
1555   CD 3D 10               CALL   printStr   
1558   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1561   CD 3D 10               CALL   printStr   
1564   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1573   21 0A 00               LD   hl,10   
1576   E5                     PUSH   hl   
1577   E5                     PUSH   hl   
1578   CD 3A 11               CALL   run   
157B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1585   CD 3D 10               CALL   printStr   
1588   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1595   E1                     POP   hl   
1596   E5                     PUSH   hl   
1597   E5                     PUSH   hl   
1598   CD 3A 11               CALL   run   
159B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
15AA   76                     HALT      
15AB                EXPECTM_3073S58:      
15AB   E1                     POP   HL   
15AC                          ;*Macro unroll:  test "123", 123
15AC   31 00 59               LD   SP,STACK   
15AF   CD 71 10               CALL   coldInit   
15B2   CD 60 57               CALL   execStr   
15B5   31 32 33 00            DB   "123",0   
15B9   E1                     POP   HL   
15BA   E5                     PUSH   HL   
15BB   11 7B 00               LD   DE,123   
15BE   B7                     OR   A   
15BF   ED 52                  SBC   HL,DE   
15C1   7D                     LD   A,L   
15C2   B4                     OR   H   
15C3   CA 1D 16               JP   Z,expectM_3074S59   
15C6   CD 3D 10               CALL   printStr   
15C9   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
15D3   CD 3D 10               CALL   printStr   
15D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15E5   21 7B 00               LD   hl,123   
15E8   E5                     PUSH   hl   
15E9   E5                     PUSH   hl   
15EA   CD 3A 11               CALL   run   
15ED   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
15F7   CD 3D 10               CALL   printStr   
15FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1607   E1                     POP   hl   
1608   E5                     PUSH   hl   
1609   E5                     PUSH   hl   
160A   CD 3A 11               CALL   run   
160D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
161C   76                     HALT      
161D                EXPECTM_3074S59:      
161D   E1                     POP   HL   
161E                          ;*Macro unroll:  test "-1",-1
161E   31 00 59               LD   SP,STACK   
1621   CD 71 10               CALL   coldInit   
1624   CD 60 57               CALL   execStr   
1627   2D 31 00               DB   "-1",0   
162A   E1                     POP   HL   
162B   E5                     PUSH   HL   
162C   11 FF FF               LD   DE,-1   
162F   B7                     OR   A   
1630   ED 52                  SBC   HL,DE   
1632   7D                     LD   A,L   
1633   B4                     OR   H   
1634   CA 8D 16               JP   Z,expectM_3075S60   
1637   CD 3D 10               CALL   printStr   
163A   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1643   CD 3D 10               CALL   printStr   
1646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1655   21 FF FF               LD   hl,-1   
1658   E5                     PUSH   hl   
1659   E5                     PUSH   hl   
165A   CD 3A 11               CALL   run   
165D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1667   CD 3D 10               CALL   printStr   
166A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1677   E1                     POP   hl   
1678   E5                     PUSH   hl   
1679   E5                     PUSH   hl   
167A   CD 3A 11               CALL   run   
167D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
168C   76                     HALT      
168D                EXPECTM_3075S60:      
168D   E1                     POP   HL   
168E                          ;*Macro unroll:  test "-1/abs",1
168E   31 00 59               LD   SP,STACK   
1691   CD 71 10               CALL   coldInit   
1694   CD 60 57               CALL   execStr   
1697   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
169E   E1                     POP   HL   
169F   E5                     PUSH   HL   
16A0   11 01 00               LD   DE,1   
16A3   B7                     OR   A   
16A4   ED 52                  SBC   HL,DE   
16A6   7D                     LD   A,L   
16A7   B4                     OR   H   
16A8   CA 05 17               JP   Z,expectM_3076S61   
16AB   CD 3D 10               CALL   printStr   
16AE   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
16BB   CD 3D 10               CALL   printStr   
16BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CD   21 01 00               LD   hl,1   
16D0   E5                     PUSH   hl   
16D1   E5                     PUSH   hl   
16D2   CD 3A 11               CALL   run   
16D5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
16DF   CD 3D 10               CALL   printStr   
16E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16EF   E1                     POP   hl   
16F0   E5                     PUSH   hl   
16F1   E5                     PUSH   hl   
16F2   CD 3A 11               CALL   run   
16F5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1704   76                     HALT      
1705                EXPECTM_3076S61:      
1705   E1                     POP   HL   
1706                          ;*Macro unroll:  test "_a", $61
1706   31 00 59               LD   SP,STACK   
1709   CD 71 10               CALL   coldInit   
170C   CD 60 57               CALL   execStr   
170F   5F 61 00               DB   "_a",0   
1712   E1                     POP   HL   
1713   E5                     PUSH   HL   
1714   11 61 00               LD   DE,$61   
1717   B7                     OR   A   
1718   ED 52                  SBC   HL,DE   
171A   7D                     LD   A,L   
171B   B4                     OR   H   
171C   CA 75 17               JP   Z,expectM_3077S62   
171F   CD 3D 10               CALL   printStr   
1722   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
172B   CD 3D 10               CALL   printStr   
172E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
173D   21 61 00               LD   hl,$61   
1740   E5                     PUSH   hl   
1741   E5                     PUSH   hl   
1742   CD 3A 11               CALL   run   
1745   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
174F   CD 3D 10               CALL   printStr   
1752   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
175F   E1                     POP   hl   
1760   E5                     PUSH   hl   
1761   E5                     PUSH   hl   
1762   CD 3A 11               CALL   run   
1765   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1774   76                     HALT      
1775                EXPECTM_3077S62:      
1775   E1                     POP   HL   
1776                          ;*Macro unroll:  test "__", $5F
1776   31 00 59               LD   SP,STACK   
1779   CD 71 10               CALL   coldInit   
177C   CD 60 57               CALL   execStr   
177F   5F 5F 00               DB   "__",0   
1782   E1                     POP   HL   
1783   E5                     PUSH   HL   
1784   11 5F 00               LD   DE,$5F   
1787   B7                     OR   A   
1788   ED 52                  SBC   HL,DE   
178A   7D                     LD   A,L   
178B   B4                     OR   H   
178C   CA E5 17               JP   Z,expectM_3078S63   
178F   CD 3D 10               CALL   printStr   
1792   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
179B   CD 3D 10               CALL   printStr   
179E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17AD   21 5F 00               LD   hl,$5F   
17B0   E5                     PUSH   hl   
17B1   E5                     PUSH   hl   
17B2   CD 3A 11               CALL   run   
17B5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
17BF   CD 3D 10               CALL   printStr   
17C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CF   E1                     POP   hl   
17D0   E5                     PUSH   hl   
17D1   E5                     PUSH   hl   
17D2   CD 3A 11               CALL   run   
17D5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
17E4   76                     HALT      
17E5                EXPECTM_3078S63:      
17E5   E1                     POP   HL   
17E6                          ;*Macro unroll:  test "$10", $10
17E6   31 00 59               LD   SP,STACK   
17E9   CD 71 10               CALL   coldInit   
17EC   CD 60 57               CALL   execStr   
17EF   24 31 30 00            DB   "$10",0   
17F3   E1                     POP   HL   
17F4   E5                     PUSH   HL   
17F5   11 10 00               LD   DE,$10   
17F8   B7                     OR   A   
17F9   ED 52                  SBC   HL,DE   
17FB   7D                     LD   A,L   
17FC   B4                     OR   H   
17FD   CA 57 18               JP   Z,expectM_3079S64   
1800   CD 3D 10               CALL   printStr   
1803   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
180D   CD 3D 10               CALL   printStr   
1810   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
181F   21 10 00               LD   hl,$10   
1822   E5                     PUSH   hl   
1823   E5                     PUSH   hl   
1824   CD 3A 11               CALL   run   
1827   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1831   CD 3D 10               CALL   printStr   
1834   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1841   E1                     POP   hl   
1842   E5                     PUSH   hl   
1843   E5                     PUSH   hl   
1844   CD 3A 11               CALL   run   
1847   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1856   76                     HALT      
1857                EXPECTM_3079S64:      
1857   E1                     POP   HL   
1858                          ;*Macro unroll:  test "$FF", $FF
1858   31 00 59               LD   SP,STACK   
185B   CD 71 10               CALL   coldInit   
185E   CD 60 57               CALL   execStr   
1861   24 46 46 00            DB   "$FF",0   
1865   E1                     POP   HL   
1866   E5                     PUSH   HL   
1867   11 FF 00               LD   DE,$FF   
186A   B7                     OR   A   
186B   ED 52                  SBC   HL,DE   
186D   7D                     LD   A,L   
186E   B4                     OR   H   
186F   CA C9 18               JP   Z,expectM_3080S65   
1872   CD 3D 10               CALL   printStr   
1875   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
187F   CD 3D 10               CALL   printStr   
1882   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1891   21 FF 00               LD   hl,$FF   
1894   E5                     PUSH   hl   
1895   E5                     PUSH   hl   
1896   CD 3A 11               CALL   run   
1899   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
18A3   CD 3D 10               CALL   printStr   
18A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B3   E1                     POP   hl   
18B4   E5                     PUSH   hl   
18B5   E5                     PUSH   hl   
18B6   CD 3A 11               CALL   run   
18B9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
18C8   76                     HALT      
18C9                EXPECTM_3080S65:      
18C9   E1                     POP   HL   
18CA                          ;*Macro unroll:  test "-1 2 +",1
18CA   31 00 59               LD   SP,STACK   
18CD   CD 71 10               CALL   coldInit   
18D0   CD 60 57               CALL   execStr   
18D3   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
18DA   E1                     POP   HL   
18DB   E5                     PUSH   HL   
18DC   11 01 00               LD   DE,1   
18DF   B7                     OR   A   
18E0   ED 52                  SBC   HL,DE   
18E2   7D                     LD   A,L   
18E3   B4                     OR   H   
18E4   CA 41 19               JP   Z,expectM_3081S66   
18E7   CD 3D 10               CALL   printStr   
18EA   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
18F7   CD 3D 10               CALL   printStr   
18FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1909   21 01 00               LD   hl,1   
190C   E5                     PUSH   hl   
190D   E5                     PUSH   hl   
190E   CD 3A 11               CALL   run   
1911   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
191B   CD 3D 10               CALL   printStr   
191E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
192B   E1                     POP   hl   
192C   E5                     PUSH   hl   
192D   E5                     PUSH   hl   
192E   CD 3A 11               CALL   run   
1931   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1940   76                     HALT      
1941                EXPECTM_3081S66:      
1941   E1                     POP   HL   
1942                          ;*Macro unroll:  test "-1 1 +",0
1942   31 00 59               LD   SP,STACK   
1945   CD 71 10               CALL   coldInit   
1948   CD 60 57               CALL   execStr   
194B   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1952   E1                     POP   HL   
1953   E5                     PUSH   HL   
1954   11 00 00               LD   DE,0   
1957   B7                     OR   A   
1958   ED 52                  SBC   HL,DE   
195A   7D                     LD   A,L   
195B   B4                     OR   H   
195C   CA B9 19               JP   Z,expectM_3082S67   
195F   CD 3D 10               CALL   printStr   
1962   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
196F   CD 3D 10               CALL   printStr   
1972   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1981   21 00 00               LD   hl,0   
1984   E5                     PUSH   hl   
1985   E5                     PUSH   hl   
1986   CD 3A 11               CALL   run   
1989   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1993   CD 3D 10               CALL   printStr   
1996   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19A3   E1                     POP   hl   
19A4   E5                     PUSH   hl   
19A5   E5                     PUSH   hl   
19A6   CD 3A 11               CALL   run   
19A9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
19B8   76                     HALT      
19B9                EXPECTM_3082S67:      
19B9   E1                     POP   HL   
19BA                          ;*Macro unroll:  test "1 2 +", 3
19BA   31 00 59               LD   SP,STACK   
19BD   CD 71 10               CALL   coldInit   
19C0   CD 60 57               CALL   execStr   
19C3   31 20 32 20 2B 00      DB   "1 2 +",0   
19C9   E1                     POP   HL   
19CA   E5                     PUSH   HL   
19CB   11 03 00               LD   DE,3   
19CE   B7                     OR   A   
19CF   ED 52                  SBC   HL,DE   
19D1   7D                     LD   A,L   
19D2   B4                     OR   H   
19D3   CA 2F 1A               JP   Z,expectM_3083S68   
19D6   CD 3D 10               CALL   printStr   
19D9   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
19E5   CD 3D 10               CALL   printStr   
19E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F7   21 03 00               LD   hl,3   
19FA   E5                     PUSH   hl   
19FB   E5                     PUSH   hl   
19FC   CD 3A 11               CALL   run   
19FF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1A09   CD 3D 10               CALL   printStr   
1A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A19   E1                     POP   hl   
1A1A   E5                     PUSH   hl   
1A1B   E5                     PUSH   hl   
1A1C   CD 3A 11               CALL   run   
1A1F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1A2E   76                     HALT      
1A2F                EXPECTM_3083S68:      
1A2F   E1                     POP   HL   
1A30                          ;*Macro unroll:  test "4 1 2 +", 3
1A30   31 00 59               LD   SP,STACK   
1A33   CD 71 10               CALL   coldInit   
1A36   CD 60 57               CALL   execStr   
1A39   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1A41   E1                     POP   HL   
1A42   E5                     PUSH   HL   
1A43   11 03 00               LD   DE,3   
1A46   B7                     OR   A   
1A47   ED 52                  SBC   HL,DE   
1A49   7D                     LD   A,L   
1A4A   B4                     OR   H   
1A4B   CA A9 1A               JP   Z,expectM_3084S69   
1A4E   CD 3D 10               CALL   printStr   
1A51   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1A5F   CD 3D 10               CALL   printStr   
1A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A71   21 03 00               LD   hl,3   
1A74   E5                     PUSH   hl   
1A75   E5                     PUSH   hl   
1A76   CD 3A 11               CALL   run   
1A79   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1A83   CD 3D 10               CALL   printStr   
1A86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A93   E1                     POP   hl   
1A94   E5                     PUSH   hl   
1A95   E5                     PUSH   hl   
1A96   CD 3A 11               CALL   run   
1A99   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1AA8   76                     HALT      
1AA9                EXPECTM_3084S69:      
1AA9   E1                     POP   HL   
1AAA                          ;*Macro unroll:  test "123 456 +", 123+456
1AAA   31 00 59               LD   SP,STACK   
1AAD   CD 71 10               CALL   coldInit   
1AB0   CD 60 57               CALL   execStr   
1AB3   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1ABD   E1                     POP   HL   
1ABE   E5                     PUSH   HL   
1ABF   11 43 02               LD   DE,123+456   
1AC2   B7                     OR   A   
1AC3   ED 52                  SBC   HL,DE   
1AC5   7D                     LD   A,L   
1AC6   B4                     OR   H   
1AC7   CA 27 1B               JP   Z,expectM_3085S70   
1ACA   CD 3D 10               CALL   printStr   
1ACD   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1ADD   CD 3D 10               CALL   printStr   
1AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AEF   21 43 02               LD   hl,123+456   
1AF2   E5                     PUSH   hl   
1AF3   E5                     PUSH   hl   
1AF4   CD 3A 11               CALL   run   
1AF7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1B01   CD 3D 10               CALL   printStr   
1B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B11   E1                     POP   hl   
1B12   E5                     PUSH   hl   
1B13   E5                     PUSH   hl   
1B14   CD 3A 11               CALL   run   
1B17   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1B26   76                     HALT      
1B27                EXPECTM_3085S70:      
1B27   E1                     POP   HL   
1B28                          ;*Macro unroll:  test "64 128 +", 64+128
1B28   31 00 59               LD   SP,STACK   
1B2B   CD 71 10               CALL   coldInit   
1B2E   CD 60 57               CALL   execStr   
1B31   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1B3A   E1                     POP   HL   
1B3B   E5                     PUSH   HL   
1B3C   11 C0 00               LD   DE,64+128   
1B3F   B7                     OR   A   
1B40   ED 52                  SBC   HL,DE   
1B42   7D                     LD   A,L   
1B43   B4                     OR   H   
1B44   CA A3 1B               JP   Z,expectM_3086S71   
1B47   CD 3D 10               CALL   printStr   
1B4A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1B59   CD 3D 10               CALL   printStr   
1B5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B6B   21 C0 00               LD   hl,64+128   
1B6E   E5                     PUSH   hl   
1B6F   E5                     PUSH   hl   
1B70   CD 3A 11               CALL   run   
1B73   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1B7D   CD 3D 10               CALL   printStr   
1B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B8D   E1                     POP   hl   
1B8E   E5                     PUSH   hl   
1B8F   E5                     PUSH   hl   
1B90   CD 3A 11               CALL   run   
1B93   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1BA2   76                     HALT      
1BA3                EXPECTM_3086S71:      
1BA3   E1                     POP   HL   
1BA4                          ;*Macro unroll:  test "1 2 +", 3
1BA4   31 00 59               LD   SP,STACK   
1BA7   CD 71 10               CALL   coldInit   
1BAA   CD 60 57               CALL   execStr   
1BAD   31 20 32 20 2B 00      DB   "1 2 +",0   
1BB3   E1                     POP   HL   
1BB4   E5                     PUSH   HL   
1BB5   11 03 00               LD   DE,3   
1BB8   B7                     OR   A   
1BB9   ED 52                  SBC   HL,DE   
1BBB   7D                     LD   A,L   
1BBC   B4                     OR   H   
1BBD   CA 19 1C               JP   Z,expectM_3087S72   
1BC0   CD 3D 10               CALL   printStr   
1BC3   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1BCF   CD 3D 10               CALL   printStr   
1BD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BE1   21 03 00               LD   hl,3   
1BE4   E5                     PUSH   hl   
1BE5   E5                     PUSH   hl   
1BE6   CD 3A 11               CALL   run   
1BE9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1BF3   CD 3D 10               CALL   printStr   
1BF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C03   E1                     POP   hl   
1C04   E5                     PUSH   hl   
1C05   E5                     PUSH   hl   
1C06   CD 3A 11               CALL   run   
1C09   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1C18   76                     HALT      
1C19                EXPECTM_3087S72:      
1C19   E1                     POP   HL   
1C1A                          ;*Macro unroll:  test "1a= a++ a",2
1C1A   31 00 59               LD   SP,STACK   
1C1D   CD 71 10               CALL   coldInit   
1C20   CD 60 57               CALL   execStr   
1C23   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1C2D   E1                     POP   HL   
1C2E   E5                     PUSH   HL   
1C2F   11 02 00               LD   DE,2   
1C32   B7                     OR   A   
1C33   ED 52                  SBC   HL,DE   
1C35   7D                     LD   A,L   
1C36   B4                     OR   H   
1C37   CA 97 1C               JP   Z,expectM_3088S73   
1C3A   CD 3D 10               CALL   printStr   
1C3D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1C4D   CD 3D 10               CALL   printStr   
1C50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C5F   21 02 00               LD   hl,2   
1C62   E5                     PUSH   hl   
1C63   E5                     PUSH   hl   
1C64   CD 3A 11               CALL   run   
1C67   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1C71   CD 3D 10               CALL   printStr   
1C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C81   E1                     POP   hl   
1C82   E5                     PUSH   hl   
1C83   E5                     PUSH   hl   
1C84   CD 3A 11               CALL   run   
1C87   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1C96   76                     HALT      
1C97                EXPECTM_3088S73:      
1C97   E1                     POP   HL   
1C98                          ;*Macro unroll:  test "-1 -1 -",0
1C98   31 00 59               LD   SP,STACK   
1C9B   CD 71 10               CALL   coldInit   
1C9E   CD 60 57               CALL   execStr   
1CA1   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1CA9   E1                     POP   HL   
1CAA   E5                     PUSH   HL   
1CAB   11 00 00               LD   DE,0   
1CAE   B7                     OR   A   
1CAF   ED 52                  SBC   HL,DE   
1CB1   7D                     LD   A,L   
1CB2   B4                     OR   H   
1CB3   CA 11 1D               JP   Z,expectM_3089S74   
1CB6   CD 3D 10               CALL   printStr   
1CB9   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1CC7   CD 3D 10               CALL   printStr   
1CCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD9   21 00 00               LD   hl,0   
1CDC   E5                     PUSH   hl   
1CDD   E5                     PUSH   hl   
1CDE   CD 3A 11               CALL   run   
1CE1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1CEB   CD 3D 10               CALL   printStr   
1CEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFB   E1                     POP   hl   
1CFC   E5                     PUSH   hl   
1CFD   E5                     PUSH   hl   
1CFE   CD 3A 11               CALL   run   
1D01   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1D10   76                     HALT      
1D11                EXPECTM_3089S74:      
1D11   E1                     POP   HL   
1D12                          ;*Macro unroll:  test "5 3 -", 2
1D12   31 00 59               LD   SP,STACK   
1D15   CD 71 10               CALL   coldInit   
1D18   CD 60 57               CALL   execStr   
1D1B   35 20 33 20 2D 00      DB   "5 3 -",0   
1D21   E1                     POP   HL   
1D22   E5                     PUSH   HL   
1D23   11 02 00               LD   DE,2   
1D26   B7                     OR   A   
1D27   ED 52                  SBC   HL,DE   
1D29   7D                     LD   A,L   
1D2A   B4                     OR   H   
1D2B   CA 87 1D               JP   Z,expectM_3090S75   
1D2E   CD 3D 10               CALL   printStr   
1D31   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1D3D   CD 3D 10               CALL   printStr   
1D40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D4F   21 02 00               LD   hl,2   
1D52   E5                     PUSH   hl   
1D53   E5                     PUSH   hl   
1D54   CD 3A 11               CALL   run   
1D57   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1D61   CD 3D 10               CALL   printStr   
1D64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D71   E1                     POP   hl   
1D72   E5                     PUSH   hl   
1D73   E5                     PUSH   hl   
1D74   CD 3A 11               CALL   run   
1D77   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1D86   76                     HALT      
1D87                EXPECTM_3090S75:      
1D87   E1                     POP   HL   
1D88                          ;*Macro unroll:  test "2 1 -",1
1D88   31 00 59               LD   SP,STACK   
1D8B   CD 71 10               CALL   coldInit   
1D8E   CD 60 57               CALL   execStr   
1D91   32 20 31 20 2D 00      DB   "2 1 -",0   
1D97   E1                     POP   HL   
1D98   E5                     PUSH   HL   
1D99   11 01 00               LD   DE,1   
1D9C   B7                     OR   A   
1D9D   ED 52                  SBC   HL,DE   
1D9F   7D                     LD   A,L   
1DA0   B4                     OR   H   
1DA1   CA FD 1D               JP   Z,expectM_3091S76   
1DA4   CD 3D 10               CALL   printStr   
1DA7   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1DB3   CD 3D 10               CALL   printStr   
1DB6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC5   21 01 00               LD   hl,1   
1DC8   E5                     PUSH   hl   
1DC9   E5                     PUSH   hl   
1DCA   CD 3A 11               CALL   run   
1DCD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1DD7   CD 3D 10               CALL   printStr   
1DDA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DE7   E1                     POP   hl   
1DE8   E5                     PUSH   hl   
1DE9   E5                     PUSH   hl   
1DEA   CD 3A 11               CALL   run   
1DED   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1DFC   76                     HALT      
1DFD                EXPECTM_3091S76:      
1DFD   E1                     POP   HL   
1DFE                          ;*Macro unroll:  test "3a= a-- a",2
1DFE   31 00 59               LD   SP,STACK   
1E01   CD 71 10               CALL   coldInit   
1E04   CD 60 57               CALL   execStr   
1E07   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1E11   E1                     POP   HL   
1E12   E5                     PUSH   HL   
1E13   11 02 00               LD   DE,2   
1E16   B7                     OR   A   
1E17   ED 52                  SBC   HL,DE   
1E19   7D                     LD   A,L   
1E1A   B4                     OR   H   
1E1B   CA 7B 1E               JP   Z,expectM_3092S77   
1E1E   CD 3D 10               CALL   printStr   
1E21   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1E31   CD 3D 10               CALL   printStr   
1E34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E43   21 02 00               LD   hl,2   
1E46   E5                     PUSH   hl   
1E47   E5                     PUSH   hl   
1E48   CD 3A 11               CALL   run   
1E4B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1E55   CD 3D 10               CALL   printStr   
1E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E65   E1                     POP   hl   
1E66   E5                     PUSH   hl   
1E67   E5                     PUSH   hl   
1E68   CD 3A 11               CALL   run   
1E6B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1E7A   76                     HALT      
1E7B                EXPECTM_3092S77:      
1E7B   E1                     POP   HL   
1E7C                          ;*Macro unroll:  test "3 5 &", 1
1E7C   31 00 59               LD   SP,STACK   
1E7F   CD 71 10               CALL   coldInit   
1E82   CD 60 57               CALL   execStr   
1E85   33 20 35 20 26 00      DB   "3 5 &",0   
1E8B   E1                     POP   HL   
1E8C   E5                     PUSH   HL   
1E8D   11 01 00               LD   DE,1   
1E90   B7                     OR   A   
1E91   ED 52                  SBC   HL,DE   
1E93   7D                     LD   A,L   
1E94   B4                     OR   H   
1E95   CA F1 1E               JP   Z,expectM_3093S78   
1E98   CD 3D 10               CALL   printStr   
1E9B   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1EA7   CD 3D 10               CALL   printStr   
1EAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB9   21 01 00               LD   hl,1   
1EBC   E5                     PUSH   hl   
1EBD   E5                     PUSH   hl   
1EBE   CD 3A 11               CALL   run   
1EC1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1ECB   CD 3D 10               CALL   printStr   
1ECE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EDB   E1                     POP   hl   
1EDC   E5                     PUSH   hl   
1EDD   E5                     PUSH   hl   
1EDE   CD 3A 11               CALL   run   
1EE1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1EF0   76                     HALT      
1EF1                EXPECTM_3093S78:      
1EF1   E1                     POP   HL   
1EF2                          ;*Macro unroll:  test "3 5 |", 7
1EF2   31 00 59               LD   SP,STACK   
1EF5   CD 71 10               CALL   coldInit   
1EF8   CD 60 57               CALL   execStr   
1EFB   33 20 35 20 7C 00      DB   "3 5 |",0   
1F01   E1                     POP   HL   
1F02   E5                     PUSH   HL   
1F03   11 07 00               LD   DE,7   
1F06   B7                     OR   A   
1F07   ED 52                  SBC   HL,DE   
1F09   7D                     LD   A,L   
1F0A   B4                     OR   H   
1F0B   CA 67 1F               JP   Z,expectM_3094S79   
1F0E   CD 3D 10               CALL   printStr   
1F11   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1F1D   CD 3D 10               CALL   printStr   
1F20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F2F   21 07 00               LD   hl,7   
1F32   E5                     PUSH   hl   
1F33   E5                     PUSH   hl   
1F34   CD 3A 11               CALL   run   
1F37   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1F41   CD 3D 10               CALL   printStr   
1F44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F51   E1                     POP   hl   
1F52   E5                     PUSH   hl   
1F53   E5                     PUSH   hl   
1F54   CD 3A 11               CALL   run   
1F57   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1F66   76                     HALT      
1F67                EXPECTM_3094S79:      
1F67   E1                     POP   HL   
1F68                          ;*Macro unroll:  test "3 5 /xor", 6
1F68   31 00 59               LD   SP,STACK   
1F6B   CD 71 10               CALL   coldInit   
1F6E   CD 60 57               CALL   execStr   
1F71   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1F7A   E1                     POP   HL   
1F7B   E5                     PUSH   HL   
1F7C   11 06 00               LD   DE,6   
1F7F   B7                     OR   A   
1F80   ED 52                  SBC   HL,DE   
1F82   7D                     LD   A,L   
1F83   B4                     OR   H   
1F84   CA E3 1F               JP   Z,expectM_3095S80   
1F87   CD 3D 10               CALL   printStr   
1F8A   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1F99   CD 3D 10               CALL   printStr   
1F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FAB   21 06 00               LD   hl,6   
1FAE   E5                     PUSH   hl   
1FAF   E5                     PUSH   hl   
1FB0   CD 3A 11               CALL   run   
1FB3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1FBD   CD 3D 10               CALL   printStr   
1FC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FCD   E1                     POP   hl   
1FCE   E5                     PUSH   hl   
1FCF   E5                     PUSH   hl   
1FD0   CD 3A 11               CALL   run   
1FD3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1FE2   76                     HALT      
1FE3                EXPECTM_3095S80:      
1FE3   E1                     POP   HL   
1FE4                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1FE4   31 00 59               LD   SP,STACK   
1FE7   CD 71 10               CALL   coldInit   
1FEA   CD 60 57               CALL   execStr   
1FED   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1FFE   E1                     POP   HL   
1FFF   E5                     PUSH   HL   
2000   11 06 00               LD   DE,6   
2003   B7                     OR   A   
2004   ED 52                  SBC   HL,DE   
2006   7D                     LD   A,L   
2007   B4                     OR   H   
2008   CA 6F 20               JP   Z,expectM_3096S81   
200B   CD 3D 10               CALL   printStr   
200E   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
2025   CD 3D 10               CALL   printStr   
2028   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2037   21 06 00               LD   hl,6   
203A   E5                     PUSH   hl   
203B   E5                     PUSH   hl   
203C   CD 3A 11               CALL   run   
203F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2049   CD 3D 10               CALL   printStr   
204C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2059   E1                     POP   hl   
205A   E5                     PUSH   hl   
205B   E5                     PUSH   hl   
205C   CD 3A 11               CALL   run   
205F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
206E   76                     HALT      
206F                EXPECTM_3096S81:      
206F   E1                     POP   HL   
2070                          ;*Macro unroll:  test "0 !", true
2070   31 00 59               LD   SP,STACK   
2073   CD 71 10               CALL   coldInit   
2076   CD 60 57               CALL   execStr   
2079   30 20 21 00            DB   "0 !",0   
207D   E1                     POP   HL   
207E   E5                     PUSH   HL   
207F   11 FF FF               LD   DE,true   
2082   B7                     OR   A   
2083   ED 52                  SBC   HL,DE   
2085   7D                     LD   A,L   
2086   B4                     OR   H   
2087   CA E1 20               JP   Z,expectM_3097S82   
208A   CD 3D 10               CALL   printStr   
208D   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
2097   CD 3D 10               CALL   printStr   
209A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A9   21 FF FF               LD   hl,true   
20AC   E5                     PUSH   hl   
20AD   E5                     PUSH   hl   
20AE   CD 3A 11               CALL   run   
20B1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
20BB   CD 3D 10               CALL   printStr   
20BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20CB   E1                     POP   hl   
20CC   E5                     PUSH   hl   
20CD   E5                     PUSH   hl   
20CE   CD 3A 11               CALL   run   
20D1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
20E0   76                     HALT      
20E1                EXPECTM_3097S82:      
20E1   E1                     POP   HL   
20E2                          ;*Macro unroll:  test "2 !", false
20E2   31 00 59               LD   SP,STACK   
20E5   CD 71 10               CALL   coldInit   
20E8   CD 60 57               CALL   execStr   
20EB   32 20 21 00            DB   "2 !",0   
20EF   E1                     POP   HL   
20F0   E5                     PUSH   HL   
20F1   11 00 00               LD   DE,false   
20F4   B7                     OR   A   
20F5   ED 52                  SBC   HL,DE   
20F7   7D                     LD   A,L   
20F8   B4                     OR   H   
20F9   CA 53 21               JP   Z,expectM_3098S83   
20FC   CD 3D 10               CALL   printStr   
20FF   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
2109   CD 3D 10               CALL   printStr   
210C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
211B   21 00 00               LD   hl,false   
211E   E5                     PUSH   hl   
211F   E5                     PUSH   hl   
2120   CD 3A 11               CALL   run   
2123   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
212D   CD 3D 10               CALL   printStr   
2130   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213D   E1                     POP   hl   
213E   E5                     PUSH   hl   
213F   E5                     PUSH   hl   
2140   CD 3A 11               CALL   run   
2143   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2152   76                     HALT      
2153                EXPECTM_3098S83:      
2153   E1                     POP   HL   
2154                          ;*Macro unroll:  test "0 !!", false
2154   31 00 59               LD   SP,STACK   
2157   CD 71 10               CALL   coldInit   
215A   CD 60 57               CALL   execStr   
215D   30 20 21 21 00         DB   "0 !!",0   
2162   E1                     POP   HL   
2163   E5                     PUSH   HL   
2164   11 00 00               LD   DE,false   
2167   B7                     OR   A   
2168   ED 52                  SBC   HL,DE   
216A   7D                     LD   A,L   
216B   B4                     OR   H   
216C   CA C7 21               JP   Z,expectM_3099S84   
216F   CD 3D 10               CALL   printStr   
2172   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
217D   CD 3D 10               CALL   printStr   
2180   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
218F   21 00 00               LD   hl,false   
2192   E5                     PUSH   hl   
2193   E5                     PUSH   hl   
2194   CD 3A 11               CALL   run   
2197   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
21A1   CD 3D 10               CALL   printStr   
21A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21B1   E1                     POP   hl   
21B2   E5                     PUSH   hl   
21B3   E5                     PUSH   hl   
21B4   CD 3A 11               CALL   run   
21B7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
21C6   76                     HALT      
21C7                EXPECTM_3099S84:      
21C7   E1                     POP   HL   
21C8                          ;*Macro unroll:  test "2 !!", true
21C8   31 00 59               LD   SP,STACK   
21CB   CD 71 10               CALL   coldInit   
21CE   CD 60 57               CALL   execStr   
21D1   32 20 21 21 00         DB   "2 !!",0   
21D6   E1                     POP   HL   
21D7   E5                     PUSH   HL   
21D8   11 FF FF               LD   DE,true   
21DB   B7                     OR   A   
21DC   ED 52                  SBC   HL,DE   
21DE   7D                     LD   A,L   
21DF   B4                     OR   H   
21E0   CA 3B 22               JP   Z,expectM_3100S85   
21E3   CD 3D 10               CALL   printStr   
21E6   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
21F1   CD 3D 10               CALL   printStr   
21F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2203   21 FF FF               LD   hl,true   
2206   E5                     PUSH   hl   
2207   E5                     PUSH   hl   
2208   CD 3A 11               CALL   run   
220B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2215   CD 3D 10               CALL   printStr   
2218   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2225   E1                     POP   hl   
2226   E5                     PUSH   hl   
2227   E5                     PUSH   hl   
2228   CD 3A 11               CALL   run   
222B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
223A   76                     HALT      
223B                EXPECTM_3100S85:      
223B   E1                     POP   HL   
223C                          ;*Macro unroll:  test "2 3 *", 6
223C   31 00 59               LD   SP,STACK   
223F   CD 71 10               CALL   coldInit   
2242   CD 60 57               CALL   execStr   
2245   32 20 33 20 2A 00      DB   "2 3 *",0   
224B   E1                     POP   HL   
224C   E5                     PUSH   HL   
224D   11 06 00               LD   DE,6   
2250   B7                     OR   A   
2251   ED 52                  SBC   HL,DE   
2253   7D                     LD   A,L   
2254   B4                     OR   H   
2255   CA B1 22               JP   Z,expectM_3101S86   
2258   CD 3D 10               CALL   printStr   
225B   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2267   CD 3D 10               CALL   printStr   
226A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2279   21 06 00               LD   hl,6   
227C   E5                     PUSH   hl   
227D   E5                     PUSH   hl   
227E   CD 3A 11               CALL   run   
2281   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
228B   CD 3D 10               CALL   printStr   
228E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229B   E1                     POP   hl   
229C   E5                     PUSH   hl   
229D   E5                     PUSH   hl   
229E   CD 3A 11               CALL   run   
22A1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
22B0   76                     HALT      
22B1                EXPECTM_3101S86:      
22B1   E1                     POP   HL   
22B2                          ;*Macro unroll:  test "1 2 3 + *", 5
22B2   31 00 59               LD   SP,STACK   
22B5   CD 71 10               CALL   coldInit   
22B8   CD 60 57               CALL   execStr   
22BB   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
22C5   E1                     POP   HL   
22C6   E5                     PUSH   HL   
22C7   11 05 00               LD   DE,5   
22CA   B7                     OR   A   
22CB   ED 52                  SBC   HL,DE   
22CD   7D                     LD   A,L   
22CE   B4                     OR   H   
22CF   CA 2F 23               JP   Z,expectM_3102S87   
22D2   CD 3D 10               CALL   printStr   
22D5   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
22E5   CD 3D 10               CALL   printStr   
22E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F7   21 05 00               LD   hl,5   
22FA   E5                     PUSH   hl   
22FB   E5                     PUSH   hl   
22FC   CD 3A 11               CALL   run   
22FF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2309   CD 3D 10               CALL   printStr   
230C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2319   E1                     POP   hl   
231A   E5                     PUSH   hl   
231B   E5                     PUSH   hl   
231C   CD 3A 11               CALL   run   
231F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
232E   76                     HALT      
232F                EXPECTM_3102S87:      
232F   E1                     POP   HL   
2330                          ;*Macro unroll:  test "7 3 /", 2
2330   31 00 59               LD   SP,STACK   
2333   CD 71 10               CALL   coldInit   
2336   CD 60 57               CALL   execStr   
2339   37 20 33 20 2F 00      DB   "7 3 /",0   
233F   E1                     POP   HL   
2340   E5                     PUSH   HL   
2341   11 02 00               LD   DE,2   
2344   B7                     OR   A   
2345   ED 52                  SBC   HL,DE   
2347   7D                     LD   A,L   
2348   B4                     OR   H   
2349   CA A5 23               JP   Z,expectM_3103S88   
234C   CD 3D 10               CALL   printStr   
234F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
235B   CD 3D 10               CALL   printStr   
235E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
236D   21 02 00               LD   hl,2   
2370   E5                     PUSH   hl   
2371   E5                     PUSH   hl   
2372   CD 3A 11               CALL   run   
2375   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
237F   CD 3D 10               CALL   printStr   
2382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
238F   E1                     POP   hl   
2390   E5                     PUSH   hl   
2391   E5                     PUSH   hl   
2392   CD 3A 11               CALL   run   
2395   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
23A4   76                     HALT      
23A5                EXPECTM_3103S88:      
23A5   E1                     POP   HL   
23A6                          ;*Macro unroll:  test "100a= 1a+= a", 101
23A6   31 00 59               LD   SP,STACK   
23A9   CD 71 10               CALL   coldInit   
23AC   CD 60 57               CALL   execStr   
23AF   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
23BC   E1                     POP   HL   
23BD   E5                     PUSH   HL   
23BE   11 65 00               LD   DE,101   
23C1   B7                     OR   A   
23C2   ED 52                  SBC   HL,DE   
23C4   7D                     LD   A,L   
23C5   B4                     OR   H   
23C6   CA 29 24               JP   Z,expectM_3104S89   
23C9   CD 3D 10               CALL   printStr   
23CC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
23DF   CD 3D 10               CALL   printStr   
23E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F1   21 65 00               LD   hl,101   
23F4   E5                     PUSH   hl   
23F5   E5                     PUSH   hl   
23F6   CD 3A 11               CALL   run   
23F9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2403   CD 3D 10               CALL   printStr   
2406   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2413   E1                     POP   hl   
2414   E5                     PUSH   hl   
2415   E5                     PUSH   hl   
2416   CD 3A 11               CALL   run   
2419   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2428   76                     HALT      
2429                EXPECTM_3104S89:      
2429   E1                     POP   HL   
242A                          ;*Macro unroll:  test "100a= 1a-= a", 99
242A   31 00 59               LD   SP,STACK   
242D   CD 71 10               CALL   coldInit   
2430   CD 60 57               CALL   execStr   
2433   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2440   E1                     POP   HL   
2441   E5                     PUSH   HL   
2442   11 63 00               LD   DE,99   
2445   B7                     OR   A   
2446   ED 52                  SBC   HL,DE   
2448   7D                     LD   A,L   
2449   B4                     OR   H   
244A   CA AD 24               JP   Z,expectM_3105S90   
244D   CD 3D 10               CALL   printStr   
2450   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
2463   CD 3D 10               CALL   printStr   
2466   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2475   21 63 00               LD   hl,99   
2478   E5                     PUSH   hl   
2479   E5                     PUSH   hl   
247A   CD 3A 11               CALL   run   
247D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2487   CD 3D 10               CALL   printStr   
248A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2497   E1                     POP   hl   
2498   E5                     PUSH   hl   
2499   E5                     PUSH   hl   
249A   CD 3A 11               CALL   run   
249D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
24AC   76                     HALT      
24AD                EXPECTM_3105S90:      
24AD   E1                     POP   HL   
24AE                          ;*Macro unroll:  test "100a= 2a*= a", 200
24AE   31 00 59               LD   SP,STACK   
24B1   CD 71 10               CALL   coldInit   
24B4   CD 60 57               CALL   execStr   
24B7   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
24C4   E1                     POP   HL   
24C5   E5                     PUSH   HL   
24C6   11 C8 00               LD   DE,200   
24C9   B7                     OR   A   
24CA   ED 52                  SBC   HL,DE   
24CC   7D                     LD   A,L   
24CD   B4                     OR   H   
24CE   CA 31 25               JP   Z,expectM_3106S91   
24D1   CD 3D 10               CALL   printStr   
24D4   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
24E7   CD 3D 10               CALL   printStr   
24EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F9   21 C8 00               LD   hl,200   
24FC   E5                     PUSH   hl   
24FD   E5                     PUSH   hl   
24FE   CD 3A 11               CALL   run   
2501   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
250B   CD 3D 10               CALL   printStr   
250E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
251B   E1                     POP   hl   
251C   E5                     PUSH   hl   
251D   E5                     PUSH   hl   
251E   CD 3A 11               CALL   run   
2521   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2530   76                     HALT      
2531                EXPECTM_3106S91:      
2531   E1                     POP   HL   
2532                          ;*Macro unroll:  test "100a= 2 a/= a", 50
2532   31 00 59               LD   SP,STACK   
2535   CD 71 10               CALL   coldInit   
2538   CD 60 57               CALL   execStr   
253B   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
2549   E1                     POP   HL   
254A   E5                     PUSH   HL   
254B   11 32 00               LD   DE,50   
254E   B7                     OR   A   
254F   ED 52                  SBC   HL,DE   
2551   7D                     LD   A,L   
2552   B4                     OR   H   
2553   CA B7 25               JP   Z,expectM_3107S92   
2556   CD 3D 10               CALL   printStr   
2559   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
256D   CD 3D 10               CALL   printStr   
2570   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257F   21 32 00               LD   hl,50   
2582   E5                     PUSH   hl   
2583   E5                     PUSH   hl   
2584   CD 3A 11               CALL   run   
2587   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2591   CD 3D 10               CALL   printStr   
2594   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A1   E1                     POP   hl   
25A2   E5                     PUSH   hl   
25A3   E5                     PUSH   hl   
25A4   CD 3A 11               CALL   run   
25A7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
25B6   76                     HALT      
25B7                EXPECTM_3107S92:      
25B7   E1                     POP   HL   
25B8                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
25B8   31 00 59               LD   SP,STACK   
25BB   CD 71 10               CALL   coldInit   
25BE   CD 60 57               CALL   execStr   
25C1   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
25D1   E1                     POP   HL   
25D2   E5                     PUSH   HL   
25D3   11 05 00               LD   DE,5   
25D6   B7                     OR   A   
25D7   ED 52                  SBC   HL,DE   
25D9   7D                     LD   A,L   
25DA   B4                     OR   H   
25DB   CA 41 26               JP   Z,expectM_3108S93   
25DE   CD 3D 10               CALL   printStr   
25E1   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
25F7   CD 3D 10               CALL   printStr   
25FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2609   21 05 00               LD   hl,5   
260C   E5                     PUSH   hl   
260D   E5                     PUSH   hl   
260E   CD 3A 11               CALL   run   
2611   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
261B   CD 3D 10               CALL   printStr   
261E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
262B   E1                     POP   hl   
262C   E5                     PUSH   hl   
262D   E5                     PUSH   hl   
262E   CD 3A 11               CALL   run   
2631   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2640   76                     HALT      
2641                EXPECTM_3108S93:      
2641   E1                     POP   HL   
2642                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
2642   31 00 59               LD   SP,STACK   
2645   CD 71 10               CALL   coldInit   
2648   CD 60 57               CALL   execStr   
264B   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
265B   E1                     POP   HL   
265C   E5                     PUSH   HL   
265D   11 01 00               LD   DE,1   
2660   B7                     OR   A   
2661   ED 52                  SBC   HL,DE   
2663   7D                     LD   A,L   
2664   B4                     OR   H   
2665   CA CB 26               JP   Z,expectM_3109S94   
2668   CD 3D 10               CALL   printStr   
266B   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
2681   CD 3D 10               CALL   printStr   
2684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2693   21 01 00               LD   hl,1   
2696   E5                     PUSH   hl   
2697   E5                     PUSH   hl   
2698   CD 3A 11               CALL   run   
269B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
26A5   CD 3D 10               CALL   printStr   
26A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B5   E1                     POP   hl   
26B6   E5                     PUSH   hl   
26B7   E5                     PUSH   hl   
26B8   CD 3A 11               CALL   run   
26BB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
26CA   76                     HALT      
26CB                EXPECTM_3109S94:      
26CB   E1                     POP   HL   
26CC                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
26CC   31 00 59               LD   SP,STACK   
26CF   CD 71 10               CALL   coldInit   
26D2   CD 60 57               CALL   execStr   
26D5   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
26E5   E1                     POP   HL   
26E6   E5                     PUSH   HL   
26E7   11 06 00               LD   DE,6   
26EA   B7                     OR   A   
26EB   ED 52                  SBC   HL,DE   
26ED   7D                     LD   A,L   
26EE   B4                     OR   H   
26EF   CA 55 27               JP   Z,expectM_3110S95   
26F2   CD 3D 10               CALL   printStr   
26F5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
270B   CD 3D 10               CALL   printStr   
270E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
271D   21 06 00               LD   hl,6   
2720   E5                     PUSH   hl   
2721   E5                     PUSH   hl   
2722   CD 3A 11               CALL   run   
2725   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
272F   CD 3D 10               CALL   printStr   
2732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
273F   E1                     POP   hl   
2740   E5                     PUSH   hl   
2741   E5                     PUSH   hl   
2742   CD 3A 11               CALL   run   
2745   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2754   76                     HALT      
2755                EXPECTM_3110S95:      
2755   E1                     POP   HL   
2756                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2756   31 00 59               LD   SP,STACK   
2759   CD 71 10               CALL   coldInit   
275C   CD 60 57               CALL   execStr   
275F   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
276F   E1                     POP   HL   
2770   E5                     PUSH   HL   
2771   11 03 00               LD   DE,3   
2774   B7                     OR   A   
2775   ED 52                  SBC   HL,DE   
2777   7D                     LD   A,L   
2778   B4                     OR   H   
2779   CA DF 27               JP   Z,expectM_3111S96   
277C   CD 3D 10               CALL   printStr   
277F   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2795   CD 3D 10               CALL   printStr   
2798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A7   21 03 00               LD   hl,3   
27AA   E5                     PUSH   hl   
27AB   E5                     PUSH   hl   
27AC   CD 3A 11               CALL   run   
27AF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
27B9   CD 3D 10               CALL   printStr   
27BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27C9   E1                     POP   hl   
27CA   E5                     PUSH   hl   
27CB   E5                     PUSH   hl   
27CC   CD 3A 11               CALL   run   
27CF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
27DE   76                     HALT      
27DF                EXPECTM_3111S96:      
27DF   E1                     POP   HL   
27E0                          ;*Macro unroll:  test "$55a= $AAa&= a",0
27E0   31 00 59               LD   SP,STACK   
27E3   CD 71 10               CALL   coldInit   
27E6   CD 60 57               CALL   execStr   
27E9   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
27F8   E1                     POP   HL   
27F9   E5                     PUSH   HL   
27FA   11 00 00               LD   DE,0   
27FD   B7                     OR   A   
27FE   ED 52                  SBC   HL,DE   
2800   7D                     LD   A,L   
2801   B4                     OR   H   
2802   CA 67 28               JP   Z,expectM_3112S97   
2805   CD 3D 10               CALL   printStr   
2808   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
281D   CD 3D 10               CALL   printStr   
2820   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
282F   21 00 00               LD   hl,0   
2832   E5                     PUSH   hl   
2833   E5                     PUSH   hl   
2834   CD 3A 11               CALL   run   
2837   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2841   CD 3D 10               CALL   printStr   
2844   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2851   E1                     POP   hl   
2852   E5                     PUSH   hl   
2853   E5                     PUSH   hl   
2854   CD 3A 11               CALL   run   
2857   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2866   76                     HALT      
2867                EXPECTM_3112S97:      
2867   E1                     POP   HL   
2868                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2868   31 00 59               LD   SP,STACK   
286B   CD 71 10               CALL   coldInit   
286E   CD 60 57               CALL   execStr   
2871   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2880   E1                     POP   HL   
2881   E5                     PUSH   HL   
2882   11 FF 00               LD   DE,$FF   
2885   B7                     OR   A   
2886   ED 52                  SBC   HL,DE   
2888   7D                     LD   A,L   
2889   B4                     OR   H   
288A   CA EF 28               JP   Z,expectM_3113S98   
288D   CD 3D 10               CALL   printStr   
2890   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
28A5   CD 3D 10               CALL   printStr   
28A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B7   21 FF 00               LD   hl,$FF   
28BA   E5                     PUSH   hl   
28BB   E5                     PUSH   hl   
28BC   CD 3A 11               CALL   run   
28BF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
28C9   CD 3D 10               CALL   printStr   
28CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D9   E1                     POP   hl   
28DA   E5                     PUSH   hl   
28DB   E5                     PUSH   hl   
28DC   CD 3A 11               CALL   run   
28DF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
28EE   76                     HALT      
28EF                EXPECTM_3113S98:      
28EF   E1                     POP   HL   
28F0                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
28F0   31 00 59               LD   SP,STACK   
28F3   CD 71 10               CALL   coldInit   
28F6   CD 60 57               CALL   execStr   
28F9   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
290C   E1                     POP   HL   
290D   E5                     PUSH   HL   
290E   11 0F 00               LD   DE,$0F   
2911   B7                     OR   A   
2912   ED 52                  SBC   HL,DE   
2914   7D                     LD   A,L   
2915   B4                     OR   H   
2916   CA 7F 29               JP   Z,expectM_3114S99   
2919   CD 3D 10               CALL   printStr   
291C   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2935   CD 3D 10               CALL   printStr   
2938   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2947   21 0F 00               LD   hl,$0F   
294A   E5                     PUSH   hl   
294B   E5                     PUSH   hl   
294C   CD 3A 11               CALL   run   
294F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2959   CD 3D 10               CALL   printStr   
295C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2969   E1                     POP   hl   
296A   E5                     PUSH   hl   
296B   E5                     PUSH   hl   
296C   CD 3A 11               CALL   run   
296F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
297E   76                     HALT      
297F                EXPECTM_3114S99:      
297F   E1                     POP   HL   
2980                          ;*Macro unroll:  test "$00AA~",$FF55
2980   31 00 59               LD   SP,STACK   
2983   CD 71 10               CALL   coldInit   
2986   CD 60 57               CALL   execStr   
2989   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2990   E1                     POP   HL   
2991   E5                     PUSH   HL   
2992   11 55 FF               LD   DE,$FF55   
2995   B7                     OR   A   
2996   ED 52                  SBC   HL,DE   
2998   7D                     LD   A,L   
2999   B4                     OR   H   
299A   CA F7 29               JP   Z,expectM_3115S100   
299D   CD 3D 10               CALL   printStr   
29A0   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
29AD   CD 3D 10               CALL   printStr   
29B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29BF   21 55 FF               LD   hl,$FF55   
29C2   E5                     PUSH   hl   
29C3   E5                     PUSH   hl   
29C4   CD 3A 11               CALL   run   
29C7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
29D1   CD 3D 10               CALL   printStr   
29D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E1   E1                     POP   hl   
29E2   E5                     PUSH   hl   
29E3   E5                     PUSH   hl   
29E4   CD 3A 11               CALL   run   
29E7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
29F6   76                     HALT      
29F7                EXPECTM_3115S100:      
29F7   E1                     POP   HL   
29F8                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
29F8   31 00 59               LD   SP,STACK   
29FB   CD 71 10               CALL   coldInit   
29FE   CD 60 57               CALL   execStr   
2A01   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2A0F   E1                     POP   HL   
2A10   E5                     PUSH   HL   
2A11   11 55 55               LD   DE,$5555   
2A14   B7                     OR   A   
2A15   ED 52                  SBC   HL,DE   
2A17   7D                     LD   A,L   
2A18   B4                     OR   H   
2A19   CA 7D 2A               JP   Z,expectM_3116S101   
2A1C   CD 3D 10               CALL   printStr   
2A1F   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2A33   CD 3D 10               CALL   printStr   
2A36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A45   21 55 55               LD   hl,$5555   
2A48   E5                     PUSH   hl   
2A49   E5                     PUSH   hl   
2A4A   CD 3A 11               CALL   run   
2A4D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2A57   CD 3D 10               CALL   printStr   
2A5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A67   E1                     POP   hl   
2A68   E5                     PUSH   hl   
2A69   E5                     PUSH   hl   
2A6A   CD 3A 11               CALL   run   
2A6D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2A7C   76                     HALT      
2A7D                EXPECTM_3116S101:      
2A7D   E1                     POP   HL   
2A7E                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2A7E   31 00 59               LD   SP,STACK   
2A81   CD 71 10               CALL   coldInit   
2A84   CD 60 57               CALL   execStr   
2A87   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2A95   E1                     POP   HL   
2A96   E5                     PUSH   HL   
2A97   11 06 00               LD   DE,6   
2A9A   B7                     OR   A   
2A9B   ED 52                  SBC   HL,DE   
2A9D   7D                     LD   A,L   
2A9E   B4                     OR   H   
2A9F   CA 03 2B               JP   Z,expectM_3117S102   
2AA2   CD 3D 10               CALL   printStr   
2AA5   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2AB9   CD 3D 10               CALL   printStr   
2ABC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ACB   21 06 00               LD   hl,6   
2ACE   E5                     PUSH   hl   
2ACF   E5                     PUSH   hl   
2AD0   CD 3A 11               CALL   run   
2AD3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2ADD   CD 3D 10               CALL   printStr   
2AE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AED   E1                     POP   hl   
2AEE   E5                     PUSH   hl   
2AEF   E5                     PUSH   hl   
2AF0   CD 3A 11               CALL   run   
2AF3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2B02   76                     HALT      
2B03                EXPECTM_3117S102:      
2B03   E1                     POP   HL   
2B04                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2B04   31 00 59               LD   SP,STACK   
2B07   CD 71 10               CALL   coldInit   
2B0A   CD 60 57               CALL   execStr   
2B0D   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2B1C   E1                     POP   HL   
2B1D   E5                     PUSH   HL   
2B1E   11 05 00               LD   DE,5   
2B21   B7                     OR   A   
2B22   ED 52                  SBC   HL,DE   
2B24   7D                     LD   A,L   
2B25   B4                     OR   H   
2B26   CA 8B 2B               JP   Z,expectM_3118S103   
2B29   CD 3D 10               CALL   printStr   
2B2C   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2B41   CD 3D 10               CALL   printStr   
2B44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B53   21 05 00               LD   hl,5   
2B56   E5                     PUSH   hl   
2B57   E5                     PUSH   hl   
2B58   CD 3A 11               CALL   run   
2B5B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2B65   CD 3D 10               CALL   printStr   
2B68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B75   E1                     POP   hl   
2B76   E5                     PUSH   hl   
2B77   E5                     PUSH   hl   
2B78   CD 3A 11               CALL   run   
2B7B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2B8A   76                     HALT      
2B8B                EXPECTM_3118S103:      
2B8B   E1                     POP   HL   
2B8C                          ;*Macro unroll:  test "7 3 / /rem", 1
2B8C   31 00 59               LD   SP,STACK   
2B8F   CD 71 10               CALL   coldInit   
2B92   CD 60 57               CALL   execStr   
2B95   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2BA0   E1                     POP   HL   
2BA1   E5                     PUSH   HL   
2BA2   11 01 00               LD   DE,1   
2BA5   B7                     OR   A   
2BA6   ED 52                  SBC   HL,DE   
2BA8   7D                     LD   A,L   
2BA9   B4                     OR   H   
2BAA   CA 0B 2C               JP   Z,expectM_3119S104   
2BAD   CD 3D 10               CALL   printStr   
2BB0   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2BC1   CD 3D 10               CALL   printStr   
2BC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BD3   21 01 00               LD   hl,1   
2BD6   E5                     PUSH   hl   
2BD7   E5                     PUSH   hl   
2BD8   CD 3A 11               CALL   run   
2BDB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2BE5   CD 3D 10               CALL   printStr   
2BE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BF5   E1                     POP   hl   
2BF6   E5                     PUSH   hl   
2BF7   E5                     PUSH   hl   
2BF8   CD 3A 11               CALL   run   
2BFB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2C0A   76                     HALT      
2C0B                EXPECTM_3119S104:      
2C0B   E1                     POP   HL   
2C0C                          ;*Macro unroll:  test "7 3 /", 2
2C0C   31 00 59               LD   SP,STACK   
2C0F   CD 71 10               CALL   coldInit   
2C12   CD 60 57               CALL   execStr   
2C15   37 20 33 20 2F 00      DB   "7 3 /",0   
2C1B   E1                     POP   HL   
2C1C   E5                     PUSH   HL   
2C1D   11 02 00               LD   DE,2   
2C20   B7                     OR   A   
2C21   ED 52                  SBC   HL,DE   
2C23   7D                     LD   A,L   
2C24   B4                     OR   H   
2C25   CA 81 2C               JP   Z,expectM_3120S105   
2C28   CD 3D 10               CALL   printStr   
2C2B   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2C37   CD 3D 10               CALL   printStr   
2C3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C49   21 02 00               LD   hl,2   
2C4C   E5                     PUSH   hl   
2C4D   E5                     PUSH   hl   
2C4E   CD 3A 11               CALL   run   
2C51   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2C5B   CD 3D 10               CALL   printStr   
2C5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C6B   E1                     POP   hl   
2C6C   E5                     PUSH   hl   
2C6D   E5                     PUSH   hl   
2C6E   CD 3A 11               CALL   run   
2C71   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2C80   76                     HALT      
2C81                EXPECTM_3120S105:      
2C81   E1                     POP   HL   
2C82                          ;*Macro unroll:  test "2 3 ==", FALSE
2C82   31 00 59               LD   SP,STACK   
2C85   CD 71 10               CALL   coldInit   
2C88   CD 60 57               CALL   execStr   
2C8B   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2C92   E1                     POP   HL   
2C93   E5                     PUSH   HL   
2C94   11 00 00               LD   DE,FALSE   
2C97   B7                     OR   A   
2C98   ED 52                  SBC   HL,DE   
2C9A   7D                     LD   A,L   
2C9B   B4                     OR   H   
2C9C   CA F9 2C               JP   Z,expectM_3121S106   
2C9F   CD 3D 10               CALL   printStr   
2CA2   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2CAF   CD 3D 10               CALL   printStr   
2CB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC1   21 00 00               LD   hl,FALSE   
2CC4   E5                     PUSH   hl   
2CC5   E5                     PUSH   hl   
2CC6   CD 3A 11               CALL   run   
2CC9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2CD3   CD 3D 10               CALL   printStr   
2CD6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE3   E1                     POP   hl   
2CE4   E5                     PUSH   hl   
2CE5   E5                     PUSH   hl   
2CE6   CD 3A 11               CALL   run   
2CE9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2CF8   76                     HALT      
2CF9                EXPECTM_3121S106:      
2CF9   E1                     POP   HL   
2CFA                          ;*Macro unroll:  test "3 3 ==", TRUE
2CFA   31 00 59               LD   SP,STACK   
2CFD   CD 71 10               CALL   coldInit   
2D00   CD 60 57               CALL   execStr   
2D03   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2D0A   E1                     POP   HL   
2D0B   E5                     PUSH   HL   
2D0C   11 FF FF               LD   DE,TRUE   
2D0F   B7                     OR   A   
2D10   ED 52                  SBC   HL,DE   
2D12   7D                     LD   A,L   
2D13   B4                     OR   H   
2D14   CA 71 2D               JP   Z,expectM_3122S107   
2D17   CD 3D 10               CALL   printStr   
2D1A   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2D27   CD 3D 10               CALL   printStr   
2D2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D39   21 FF FF               LD   hl,TRUE   
2D3C   E5                     PUSH   hl   
2D3D   E5                     PUSH   hl   
2D3E   CD 3A 11               CALL   run   
2D41   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2D4B   CD 3D 10               CALL   printStr   
2D4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D5B   E1                     POP   hl   
2D5C   E5                     PUSH   hl   
2D5D   E5                     PUSH   hl   
2D5E   CD 3A 11               CALL   run   
2D61   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2D70   76                     HALT      
2D71                EXPECTM_3122S107:      
2D71   E1                     POP   HL   
2D72                          ;*Macro unroll:  test "1 2 <", TRUE
2D72   31 00 59               LD   SP,STACK   
2D75   CD 71 10               CALL   coldInit   
2D78   CD 60 57               CALL   execStr   
2D7B   31 20 32 20 3C 00      DB   "1 2 <",0   
2D81   E1                     POP   HL   
2D82   E5                     PUSH   HL   
2D83   11 FF FF               LD   DE,TRUE   
2D86   B7                     OR   A   
2D87   ED 52                  SBC   HL,DE   
2D89   7D                     LD   A,L   
2D8A   B4                     OR   H   
2D8B   CA E7 2D               JP   Z,expectM_3123S108   
2D8E   CD 3D 10               CALL   printStr   
2D91   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2D9D   CD 3D 10               CALL   printStr   
2DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DAF   21 FF FF               LD   hl,TRUE   
2DB2   E5                     PUSH   hl   
2DB3   E5                     PUSH   hl   
2DB4   CD 3A 11               CALL   run   
2DB7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2DC1   CD 3D 10               CALL   printStr   
2DC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD1   E1                     POP   hl   
2DD2   E5                     PUSH   hl   
2DD3   E5                     PUSH   hl   
2DD4   CD 3A 11               CALL   run   
2DD7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2DE6   76                     HALT      
2DE7                EXPECTM_3123S108:      
2DE7   E1                     POP   HL   
2DE8                          ;*Macro unroll:  test "2 1 <", FALSE
2DE8   31 00 59               LD   SP,STACK   
2DEB   CD 71 10               CALL   coldInit   
2DEE   CD 60 57               CALL   execStr   
2DF1   32 20 31 20 3C 00      DB   "2 1 <",0   
2DF7   E1                     POP   HL   
2DF8   E5                     PUSH   HL   
2DF9   11 00 00               LD   DE,FALSE   
2DFC   B7                     OR   A   
2DFD   ED 52                  SBC   HL,DE   
2DFF   7D                     LD   A,L   
2E00   B4                     OR   H   
2E01   CA 5D 2E               JP   Z,expectM_3124S109   
2E04   CD 3D 10               CALL   printStr   
2E07   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2E13   CD 3D 10               CALL   printStr   
2E16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E25   21 00 00               LD   hl,FALSE   
2E28   E5                     PUSH   hl   
2E29   E5                     PUSH   hl   
2E2A   CD 3A 11               CALL   run   
2E2D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2E37   CD 3D 10               CALL   printStr   
2E3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E47   E1                     POP   hl   
2E48   E5                     PUSH   hl   
2E49   E5                     PUSH   hl   
2E4A   CD 3A 11               CALL   run   
2E4D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2E5C   76                     HALT      
2E5D                EXPECTM_3124S109:      
2E5D   E1                     POP   HL   
2E5E                          ;*Macro unroll:  test "2 3 <", TRUE
2E5E   31 00 59               LD   SP,STACK   
2E61   CD 71 10               CALL   coldInit   
2E64   CD 60 57               CALL   execStr   
2E67   32 20 33 20 3C 00      DB   "2 3 <",0   
2E6D   E1                     POP   HL   
2E6E   E5                     PUSH   HL   
2E6F   11 FF FF               LD   DE,TRUE   
2E72   B7                     OR   A   
2E73   ED 52                  SBC   HL,DE   
2E75   7D                     LD   A,L   
2E76   B4                     OR   H   
2E77   CA D3 2E               JP   Z,expectM_3125S110   
2E7A   CD 3D 10               CALL   printStr   
2E7D   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2E89   CD 3D 10               CALL   printStr   
2E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E9B   21 FF FF               LD   hl,TRUE   
2E9E   E5                     PUSH   hl   
2E9F   E5                     PUSH   hl   
2EA0   CD 3A 11               CALL   run   
2EA3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2EAD   CD 3D 10               CALL   printStr   
2EB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EBD   E1                     POP   hl   
2EBE   E5                     PUSH   hl   
2EBF   E5                     PUSH   hl   
2EC0   CD 3A 11               CALL   run   
2EC3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2ED2   76                     HALT      
2ED3                EXPECTM_3125S110:      
2ED3   E1                     POP   HL   
2ED4                          ;*Macro unroll:  test "3 3 <", FALSE
2ED4   31 00 59               LD   SP,STACK   
2ED7   CD 71 10               CALL   coldInit   
2EDA   CD 60 57               CALL   execStr   
2EDD   33 20 33 20 3C 00      DB   "3 3 <",0   
2EE3   E1                     POP   HL   
2EE4   E5                     PUSH   HL   
2EE5   11 00 00               LD   DE,FALSE   
2EE8   B7                     OR   A   
2EE9   ED 52                  SBC   HL,DE   
2EEB   7D                     LD   A,L   
2EEC   B4                     OR   H   
2EED   CA 49 2F               JP   Z,expectM_3126S111   
2EF0   CD 3D 10               CALL   printStr   
2EF3   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2EFF   CD 3D 10               CALL   printStr   
2F02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F11   21 00 00               LD   hl,FALSE   
2F14   E5                     PUSH   hl   
2F15   E5                     PUSH   hl   
2F16   CD 3A 11               CALL   run   
2F19   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2F23   CD 3D 10               CALL   printStr   
2F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F33   E1                     POP   hl   
2F34   E5                     PUSH   hl   
2F35   E5                     PUSH   hl   
2F36   CD 3A 11               CALL   run   
2F39   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2F48   76                     HALT      
2F49                EXPECTM_3126S111:      
2F49   E1                     POP   HL   
2F4A                          ;*Macro unroll:  test "1 2 >", FALSE
2F4A   31 00 59               LD   SP,STACK   
2F4D   CD 71 10               CALL   coldInit   
2F50   CD 60 57               CALL   execStr   
2F53   31 20 32 20 3E 00      DB   "1 2 >",0   
2F59   E1                     POP   HL   
2F5A   E5                     PUSH   HL   
2F5B   11 00 00               LD   DE,FALSE   
2F5E   B7                     OR   A   
2F5F   ED 52                  SBC   HL,DE   
2F61   7D                     LD   A,L   
2F62   B4                     OR   H   
2F63   CA BF 2F               JP   Z,expectM_3127S112   
2F66   CD 3D 10               CALL   printStr   
2F69   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2F75   CD 3D 10               CALL   printStr   
2F78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F87   21 00 00               LD   hl,FALSE   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD 3A 11               CALL   run   
2F8F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2F99   CD 3D 10               CALL   printStr   
2F9C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FA9   E1                     POP   hl   
2FAA   E5                     PUSH   hl   
2FAB   E5                     PUSH   hl   
2FAC   CD 3A 11               CALL   run   
2FAF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2FBE   76                     HALT      
2FBF                EXPECTM_3127S112:      
2FBF   E1                     POP   HL   
2FC0                          ;*Macro unroll:  test "2 1 >", TRUE
2FC0   31 00 59               LD   SP,STACK   
2FC3   CD 71 10               CALL   coldInit   
2FC6   CD 60 57               CALL   execStr   
2FC9   32 20 31 20 3E 00      DB   "2 1 >",0   
2FCF   E1                     POP   HL   
2FD0   E5                     PUSH   HL   
2FD1   11 FF FF               LD   DE,TRUE   
2FD4   B7                     OR   A   
2FD5   ED 52                  SBC   HL,DE   
2FD7   7D                     LD   A,L   
2FD8   B4                     OR   H   
2FD9   CA 35 30               JP   Z,expectM_3128S113   
2FDC   CD 3D 10               CALL   printStr   
2FDF   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2FEB   CD 3D 10               CALL   printStr   
2FEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FFD   21 FF FF               LD   hl,TRUE   
3000   E5                     PUSH   hl   
3001   E5                     PUSH   hl   
3002   CD 3A 11               CALL   run   
3005   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
300F   CD 3D 10               CALL   printStr   
3012   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
301F   E1                     POP   hl   
3020   E5                     PUSH   hl   
3021   E5                     PUSH   hl   
3022   CD 3A 11               CALL   run   
3025   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3034   76                     HALT      
3035                EXPECTM_3128S113:      
3035   E1                     POP   HL   
3036                          ;*Macro unroll:  test "3 3 >", FALSE
3036   31 00 59               LD   SP,STACK   
3039   CD 71 10               CALL   coldInit   
303C   CD 60 57               CALL   execStr   
303F   33 20 33 20 3E 00      DB   "3 3 >",0   
3045   E1                     POP   HL   
3046   E5                     PUSH   HL   
3047   11 00 00               LD   DE,FALSE   
304A   B7                     OR   A   
304B   ED 52                  SBC   HL,DE   
304D   7D                     LD   A,L   
304E   B4                     OR   H   
304F   CA AB 30               JP   Z,expectM_3129S114   
3052   CD 3D 10               CALL   printStr   
3055   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
3061   CD 3D 10               CALL   printStr   
3064   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3073   21 00 00               LD   hl,FALSE   
3076   E5                     PUSH   hl   
3077   E5                     PUSH   hl   
3078   CD 3A 11               CALL   run   
307B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3085   CD 3D 10               CALL   printStr   
3088   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3095   E1                     POP   hl   
3096   E5                     PUSH   hl   
3097   E5                     PUSH   hl   
3098   CD 3A 11               CALL   run   
309B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
30AA   76                     HALT      
30AB                EXPECTM_3129S114:      
30AB   E1                     POP   HL   
30AC                          ;*Macro unroll:  test "4 3 >", TRUE
30AC   31 00 59               LD   SP,STACK   
30AF   CD 71 10               CALL   coldInit   
30B2   CD 60 57               CALL   execStr   
30B5   34 20 33 20 3E 00      DB   "4 3 >",0   
30BB   E1                     POP   HL   
30BC   E5                     PUSH   HL   
30BD   11 FF FF               LD   DE,TRUE   
30C0   B7                     OR   A   
30C1   ED 52                  SBC   HL,DE   
30C3   7D                     LD   A,L   
30C4   B4                     OR   H   
30C5   CA 21 31               JP   Z,expectM_3130S115   
30C8   CD 3D 10               CALL   printStr   
30CB   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
30D7   CD 3D 10               CALL   printStr   
30DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E9   21 FF FF               LD   hl,TRUE   
30EC   E5                     PUSH   hl   
30ED   E5                     PUSH   hl   
30EE   CD 3A 11               CALL   run   
30F1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
30FB   CD 3D 10               CALL   printStr   
30FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310B   E1                     POP   hl   
310C   E5                     PUSH   hl   
310D   E5                     PUSH   hl   
310E   CD 3A 11               CALL   run   
3111   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3120   76                     HALT      
3121                EXPECTM_3130S115:      
3121   E1                     POP   HL   
3122                          ;*Macro unroll:  test "2 2 <=", TRUE
3122   31 00 59               LD   SP,STACK   
3125   CD 71 10               CALL   coldInit   
3128   CD 60 57               CALL   execStr   
312B   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
3132   E1                     POP   HL   
3133   E5                     PUSH   HL   
3134   11 FF FF               LD   DE,TRUE   
3137   B7                     OR   A   
3138   ED 52                  SBC   HL,DE   
313A   7D                     LD   A,L   
313B   B4                     OR   H   
313C   CA 99 31               JP   Z,expectM_3131S116   
313F   CD 3D 10               CALL   printStr   
3142   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
314F   CD 3D 10               CALL   printStr   
3152   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3161   21 FF FF               LD   hl,TRUE   
3164   E5                     PUSH   hl   
3165   E5                     PUSH   hl   
3166   CD 3A 11               CALL   run   
3169   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3173   CD 3D 10               CALL   printStr   
3176   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3183   E1                     POP   hl   
3184   E5                     PUSH   hl   
3185   E5                     PUSH   hl   
3186   CD 3A 11               CALL   run   
3189   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3198   76                     HALT      
3199                EXPECTM_3131S116:      
3199   E1                     POP   HL   
319A                          ;*Macro unroll:  test "2 2 >=", TRUE
319A   31 00 59               LD   SP,STACK   
319D   CD 71 10               CALL   coldInit   
31A0   CD 60 57               CALL   execStr   
31A3   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
31AA   E1                     POP   HL   
31AB   E5                     PUSH   HL   
31AC   11 FF FF               LD   DE,TRUE   
31AF   B7                     OR   A   
31B0   ED 52                  SBC   HL,DE   
31B2   7D                     LD   A,L   
31B3   B4                     OR   H   
31B4   CA 11 32               JP   Z,expectM_3132S117   
31B7   CD 3D 10               CALL   printStr   
31BA   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
31C7   CD 3D 10               CALL   printStr   
31CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D9   21 FF FF               LD   hl,TRUE   
31DC   E5                     PUSH   hl   
31DD   E5                     PUSH   hl   
31DE   CD 3A 11               CALL   run   
31E1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
31EB   CD 3D 10               CALL   printStr   
31EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31FB   E1                     POP   hl   
31FC   E5                     PUSH   hl   
31FD   E5                     PUSH   hl   
31FE   CD 3A 11               CALL   run   
3201   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3210   76                     HALT      
3211                EXPECTM_3132S117:      
3211   E1                     POP   HL   
3212                          ;*Macro unroll:  test "3 1 <<", 6
3212   31 00 59               LD   SP,STACK   
3215   CD 71 10               CALL   coldInit   
3218   CD 60 57               CALL   execStr   
321B   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
3222   E1                     POP   HL   
3223   E5                     PUSH   HL   
3224   11 06 00               LD   DE,6   
3227   B7                     OR   A   
3228   ED 52                  SBC   HL,DE   
322A   7D                     LD   A,L   
322B   B4                     OR   H   
322C   CA 89 32               JP   Z,expectM_3133S118   
322F   CD 3D 10               CALL   printStr   
3232   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
323F   CD 3D 10               CALL   printStr   
3242   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3251   21 06 00               LD   hl,6   
3254   E5                     PUSH   hl   
3255   E5                     PUSH   hl   
3256   CD 3A 11               CALL   run   
3259   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3263   CD 3D 10               CALL   printStr   
3266   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3273   E1                     POP   hl   
3274   E5                     PUSH   hl   
3275   E5                     PUSH   hl   
3276   CD 3A 11               CALL   run   
3279   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3288   76                     HALT      
3289                EXPECTM_3133S118:      
3289   E1                     POP   HL   
328A                          ;*Macro unroll:  test "10 1 >>", 5
328A   31 00 59               LD   SP,STACK   
328D   CD 71 10               CALL   coldInit   
3290   CD 60 57               CALL   execStr   
3293   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
329B   E1                     POP   HL   
329C   E5                     PUSH   HL   
329D   11 05 00               LD   DE,5   
32A0   B7                     OR   A   
32A1   ED 52                  SBC   HL,DE   
32A3   7D                     LD   A,L   
32A4   B4                     OR   H   
32A5   CA 03 33               JP   Z,expectM_3134S119   
32A8   CD 3D 10               CALL   printStr   
32AB   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
32B9   CD 3D 10               CALL   printStr   
32BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32CB   21 05 00               LD   hl,5   
32CE   E5                     PUSH   hl   
32CF   E5                     PUSH   hl   
32D0   CD 3A 11               CALL   run   
32D3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
32DD   CD 3D 10               CALL   printStr   
32E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32ED   E1                     POP   hl   
32EE   E5                     PUSH   hl   
32EF   E5                     PUSH   hl   
32F0   CD 3A 11               CALL   run   
32F3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3302   76                     HALT      
3303                EXPECTM_3134S119:      
3303   E1                     POP   HL   
3304                          ;*Macro unroll:  test "1 x = x", 1
3304   31 00 59               LD   SP,STACK   
3307   CD 71 10               CALL   coldInit   
330A   CD 60 57               CALL   execStr   
330D   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3315   E1                     POP   HL   
3316   E5                     PUSH   HL   
3317   11 01 00               LD   DE,1   
331A   B7                     OR   A   
331B   ED 52                  SBC   HL,DE   
331D   7D                     LD   A,L   
331E   B4                     OR   H   
331F   CA 7D 33               JP   Z,expectM_3135S120   
3322   CD 3D 10               CALL   printStr   
3325   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3333   CD 3D 10               CALL   printStr   
3336   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3345   21 01 00               LD   hl,1   
3348   E5                     PUSH   hl   
3349   E5                     PUSH   hl   
334A   CD 3A 11               CALL   run   
334D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3357   CD 3D 10               CALL   printStr   
335A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3367   E1                     POP   hl   
3368   E5                     PUSH   hl   
3369   E5                     PUSH   hl   
336A   CD 3A 11               CALL   run   
336D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
337C   76                     HALT      
337D                EXPECTM_3135S120:      
337D   E1                     POP   HL   
337E                          ;*Macro unroll:  test "1{}^", 1
337E   31 00 59               LD   SP,STACK   
3381   CD 71 10               CALL   coldInit   
3384   CD 60 57               CALL   execStr   
3387   31 7B 7D 5E 00         DB   "1{}^",0   
338C   E1                     POP   HL   
338D   E5                     PUSH   HL   
338E   11 01 00               LD   DE,1   
3391   B7                     OR   A   
3392   ED 52                  SBC   HL,DE   
3394   7D                     LD   A,L   
3395   B4                     OR   H   
3396   CA F1 33               JP   Z,expectM_3136S121   
3399   CD 3D 10               CALL   printStr   
339C   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
33A7   CD 3D 10               CALL   printStr   
33AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B9   21 01 00               LD   hl,1   
33BC   E5                     PUSH   hl   
33BD   E5                     PUSH   hl   
33BE   CD 3A 11               CALL   run   
33C1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
33CB   CD 3D 10               CALL   printStr   
33CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33DB   E1                     POP   hl   
33DC   E5                     PUSH   hl   
33DD   E5                     PUSH   hl   
33DE   CD 3A 11               CALL   run   
33E1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
33F0   76                     HALT      
33F1                EXPECTM_3136S121:      
33F1   E1                     POP   HL   
33F2                          ;*Macro unroll:  test "{1}^", 1
33F2   31 00 59               LD   SP,STACK   
33F5   CD 71 10               CALL   coldInit   
33F8   CD 60 57               CALL   execStr   
33FB   7B 31 7D 5E 00         DB   "{1}^",0   
3400   E1                     POP   HL   
3401   E5                     PUSH   HL   
3402   11 01 00               LD   DE,1   
3405   B7                     OR   A   
3406   ED 52                  SBC   HL,DE   
3408   7D                     LD   A,L   
3409   B4                     OR   H   
340A   CA 65 34               JP   Z,expectM_3137S122   
340D   CD 3D 10               CALL   printStr   
3410   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
341B   CD 3D 10               CALL   printStr   
341E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
342D   21 01 00               LD   hl,1   
3430   E5                     PUSH   hl   
3431   E5                     PUSH   hl   
3432   CD 3A 11               CALL   run   
3435   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
343F   CD 3D 10               CALL   printStr   
3442   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
344F   E1                     POP   hl   
3450   E5                     PUSH   hl   
3451   E5                     PUSH   hl   
3452   CD 3A 11               CALL   run   
3455   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3464   76                     HALT      
3465                EXPECTM_3137S122:      
3465   E1                     POP   HL   
3466                          ;*Macro unroll:  test "{{1}^}^", 1
3466   31 00 59               LD   SP,STACK   
3469   CD 71 10               CALL   coldInit   
346C   CD 60 57               CALL   execStr   
346F   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
3477   E1                     POP   HL   
3478   E5                     PUSH   HL   
3479   11 01 00               LD   DE,1   
347C   B7                     OR   A   
347D   ED 52                  SBC   HL,DE   
347F   7D                     LD   A,L   
3480   B4                     OR   H   
3481   CA DF 34               JP   Z,expectM_3138S123   
3484   CD 3D 10               CALL   printStr   
3487   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3495   CD 3D 10               CALL   printStr   
3498   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34A7   21 01 00               LD   hl,1   
34AA   E5                     PUSH   hl   
34AB   E5                     PUSH   hl   
34AC   CD 3A 11               CALL   run   
34AF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
34B9   CD 3D 10               CALL   printStr   
34BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34C9   E1                     POP   hl   
34CA   E5                     PUSH   hl   
34CB   E5                     PUSH   hl   
34CC   CD 3A 11               CALL   run   
34CF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
34DE   76                     HALT      
34DF                EXPECTM_3138S123:      
34DF   E1                     POP   HL   
34E0                          ;*Macro unroll:  test "{{{1}^}^}^", 1
34E0   31 00 59               LD   SP,STACK   
34E3   CD 71 10               CALL   coldInit   
34E6   CD 60 57               CALL   execStr   
34E9   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
34F4   E1                     POP   HL   
34F5   E5                     PUSH   HL   
34F6   11 01 00               LD   DE,1   
34F9   B7                     OR   A   
34FA   ED 52                  SBC   HL,DE   
34FC   7D                     LD   A,L   
34FD   B4                     OR   H   
34FE   CA 5F 35               JP   Z,expectM_3139S124   
3501   CD 3D 10               CALL   printStr   
3504   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3515   CD 3D 10               CALL   printStr   
3518   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3527   21 01 00               LD   hl,1   
352A   E5                     PUSH   hl   
352B   E5                     PUSH   hl   
352C   CD 3A 11               CALL   run   
352F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3539   CD 3D 10               CALL   printStr   
353C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3549   E1                     POP   hl   
354A   E5                     PUSH   hl   
354B   E5                     PUSH   hl   
354C   CD 3A 11               CALL   run   
354F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
355E   76                     HALT      
355F                EXPECTM_3139S124:      
355F   E1                     POP   HL   
3560                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
3560   31 00 59               LD   SP,STACK   
3563   CD 71 10               CALL   coldInit   
3566   CD 60 57               CALL   execStr   
3569   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
357C   E1                     POP   HL   
357D   E5                     PUSH   HL   
357E   11 15 00               LD   DE,21   
3581   B7                     OR   A   
3582   ED 52                  SBC   HL,DE   
3584   7D                     LD   A,L   
3585   B4                     OR   H   
3586   CA EF 35               JP   Z,expectM_3140S125   
3589   CD 3D 10               CALL   printStr   
358C   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
35A5   CD 3D 10               CALL   printStr   
35A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35B7   21 15 00               LD   hl,21   
35BA   E5                     PUSH   hl   
35BB   E5                     PUSH   hl   
35BC   CD 3A 11               CALL   run   
35BF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
35C9   CD 3D 10               CALL   printStr   
35CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35D9   E1                     POP   hl   
35DA   E5                     PUSH   hl   
35DB   E5                     PUSH   hl   
35DC   CD 3A 11               CALL   run   
35DF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
35EE   76                     HALT      
35EF                EXPECTM_3140S125:      
35EF   E1                     POP   HL   
35F0                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
35F0   31 00 59               LD   SP,STACK   
35F3   CD 71 10               CALL   coldInit   
35F6   CD 60 57               CALL   execStr   
35F9   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
360C   E1                     POP   HL   
360D   E5                     PUSH   HL   
360E   11 0B 00               LD   DE,11   
3611   B7                     OR   A   
3612   ED 52                  SBC   HL,DE   
3614   7D                     LD   A,L   
3615   B4                     OR   H   
3616   CA 7F 36               JP   Z,expectM_3141S126   
3619   CD 3D 10               CALL   printStr   
361C   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
3635   CD 3D 10               CALL   printStr   
3638   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3647   21 0B 00               LD   hl,11   
364A   E5                     PUSH   hl   
364B   E5                     PUSH   hl   
364C   CD 3A 11               CALL   run   
364F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3659   CD 3D 10               CALL   printStr   
365C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3669   E1                     POP   hl   
366A   E5                     PUSH   hl   
366B   E5                     PUSH   hl   
366C   CD 3A 11               CALL   run   
366F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
367E   76                     HALT      
367F                EXPECTM_3141S126:      
367F   E1                     POP   HL   
3680                          ;*Macro unroll:  test "\\{2}^", 2
3680   31 00 59               LD   SP,STACK   
3683   CD 71 10               CALL   coldInit   
3686   CD 60 57               CALL   execStr   
3689   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
368F   E1                     POP   HL   
3690   E5                     PUSH   HL   
3691   11 02 00               LD   DE,2   
3694   B7                     OR   A   
3695   ED 52                  SBC   HL,DE   
3697   7D                     LD   A,L   
3698   B4                     OR   H   
3699   CA F5 36               JP   Z,expectM_3142S127   
369C   CD 3D 10               CALL   printStr   
369F   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
36AB   CD 3D 10               CALL   printStr   
36AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36BD   21 02 00               LD   hl,2   
36C0   E5                     PUSH   hl   
36C1   E5                     PUSH   hl   
36C2   CD 3A 11               CALL   run   
36C5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
36CF   CD 3D 10               CALL   printStr   
36D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36DF   E1                     POP   hl   
36E0   E5                     PUSH   hl   
36E1   E5                     PUSH   hl   
36E2   CD 3A 11               CALL   run   
36E5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
36F4   76                     HALT      
36F5                EXPECTM_3142S127:      
36F5   E1                     POP   HL   
36F6                          ;*Macro unroll:  test "\\a{2}^", 2
36F6   31 00 59               LD   SP,STACK   
36F9   CD 71 10               CALL   coldInit   
36FC   CD 60 57               CALL   execStr   
36FF   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3706   E1                     POP   HL   
3707   E5                     PUSH   HL   
3708   11 02 00               LD   DE,2   
370B   B7                     OR   A   
370C   ED 52                  SBC   HL,DE   
370E   7D                     LD   A,L   
370F   B4                     OR   H   
3710   CA 6D 37               JP   Z,expectM_3143S128   
3713   CD 3D 10               CALL   printStr   
3716   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3723   CD 3D 10               CALL   printStr   
3726   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3735   21 02 00               LD   hl,2   
3738   E5                     PUSH   hl   
3739   E5                     PUSH   hl   
373A   CD 3A 11               CALL   run   
373D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3747   CD 3D 10               CALL   printStr   
374A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3757   E1                     POP   hl   
3758   E5                     PUSH   hl   
3759   E5                     PUSH   hl   
375A   CD 3A 11               CALL   run   
375D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
376C   76                     HALT      
376D                EXPECTM_3143S128:      
376D   E1                     POP   HL   
376E                          ;*Macro unroll:  test "5 \\a{%a}^", 5
376E   31 00 59               LD   SP,STACK   
3771   CD 71 10               CALL   coldInit   
3774   CD 60 57               CALL   execStr   
3777   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3781   E1                     POP   HL   
3782   E5                     PUSH   HL   
3783   11 05 00               LD   DE,5   
3786   B7                     OR   A   
3787   ED 52                  SBC   HL,DE   
3789   7D                     LD   A,L   
378A   B4                     OR   H   
378B   CA EB 37               JP   Z,expectM_3144S129   
378E   CD 3D 10               CALL   printStr   
3791   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
37A1   CD 3D 10               CALL   printStr   
37A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37B3   21 05 00               LD   hl,5   
37B6   E5                     PUSH   hl   
37B7   E5                     PUSH   hl   
37B8   CD 3A 11               CALL   run   
37BB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
37C5   CD 3D 10               CALL   printStr   
37C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37D5   E1                     POP   hl   
37D6   E5                     PUSH   hl   
37D7   E5                     PUSH   hl   
37D8   CD 3A 11               CALL   run   
37DB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
37EA   76                     HALT      
37EB                EXPECTM_3144S129:      
37EB   E1                     POP   HL   
37EC                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
37EC   31 00 59               LD   SP,STACK   
37EF   CD 71 10               CALL   coldInit   
37F2   CD 60 57               CALL   execStr   
37F5   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
3801   E1                     POP   HL   
3802   E5                     PUSH   HL   
3803   11 05 00               LD   DE,5   
3806   B7                     OR   A   
3807   ED 52                  SBC   HL,DE   
3809   7D                     LD   A,L   
380A   B4                     OR   H   
380B   CA 6D 38               JP   Z,expectM_3145S130   
380E   CD 3D 10               CALL   printStr   
3811   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3823   CD 3D 10               CALL   printStr   
3826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3835   21 05 00               LD   hl,5   
3838   E5                     PUSH   hl   
3839   E5                     PUSH   hl   
383A   CD 3A 11               CALL   run   
383D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3847   CD 3D 10               CALL   printStr   
384A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3857   E1                     POP   hl   
3858   E5                     PUSH   hl   
3859   E5                     PUSH   hl   
385A   CD 3A 11               CALL   run   
385D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
386C   76                     HALT      
386D                EXPECTM_3145S130:      
386D   E1                     POP   HL   
386E                          ;*Macro unroll:  test "\\a{{2}^}^", 2
386E   31 00 59               LD   SP,STACK   
3871   CD 71 10               CALL   coldInit   
3874   CD 60 57               CALL   execStr   
3877   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3881   E1                     POP   HL   
3882   E5                     PUSH   HL   
3883   11 02 00               LD   DE,2   
3886   B7                     OR   A   
3887   ED 52                  SBC   HL,DE   
3889   7D                     LD   A,L   
388A   B4                     OR   H   
388B   CA EB 38               JP   Z,expectM_3146S131   
388E   CD 3D 10               CALL   printStr   
3891   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
38A1   CD 3D 10               CALL   printStr   
38A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38B3   21 02 00               LD   hl,2   
38B6   E5                     PUSH   hl   
38B7   E5                     PUSH   hl   
38B8   CD 3A 11               CALL   run   
38BB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
38C5   CD 3D 10               CALL   printStr   
38C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38D5   E1                     POP   hl   
38D6   E5                     PUSH   hl   
38D7   E5                     PUSH   hl   
38D8   CD 3A 11               CALL   run   
38DB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
38EA   76                     HALT      
38EB                EXPECTM_3146S131:      
38EB   E1                     POP   HL   
38EC                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
38EC   31 00 59               LD   SP,STACK   
38EF   CD 71 10               CALL   coldInit   
38F2   CD 60 57               CALL   execStr   
38F5   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3904   E1                     POP   HL   
3905   E5                     PUSH   HL   
3906   11 05 00               LD   DE,5   
3909   B7                     OR   A   
390A   ED 52                  SBC   HL,DE   
390C   7D                     LD   A,L   
390D   B4                     OR   H   
390E   CA 73 39               JP   Z,expectM_3147S132   
3911   CD 3D 10               CALL   printStr   
3914   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3929   CD 3D 10               CALL   printStr   
392C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
393B   21 05 00               LD   hl,5   
393E   E5                     PUSH   hl   
393F   E5                     PUSH   hl   
3940   CD 3A 11               CALL   run   
3943   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
394D   CD 3D 10               CALL   printStr   
3950   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
395D   E1                     POP   hl   
395E   E5                     PUSH   hl   
395F   E5                     PUSH   hl   
3960   CD 3A 11               CALL   run   
3963   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3972   76                     HALT      
3973                EXPECTM_3147S132:      
3973   E1                     POP   HL   
3974                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3974   31 00 59               LD   SP,STACK   
3977   CD 71 10               CALL   coldInit   
397A   CD 60 57               CALL   execStr   
397D   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
398D   E1                     POP   HL   
398E   E5                     PUSH   HL   
398F   11 01 00               LD   DE,1   
3992   B7                     OR   A   
3993   ED 52                  SBC   HL,DE   
3995   7D                     LD   A,L   
3996   B4                     OR   H   
3997   CA FD 39               JP   Z,expectM_3148S133   
399A   CD 3D 10               CALL   printStr   
399D   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
39B3   CD 3D 10               CALL   printStr   
39B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39C5   21 01 00               LD   hl,1   
39C8   E5                     PUSH   hl   
39C9   E5                     PUSH   hl   
39CA   CD 3A 11               CALL   run   
39CD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
39D7   CD 3D 10               CALL   printStr   
39DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E7   E1                     POP   hl   
39E8   E5                     PUSH   hl   
39E9   E5                     PUSH   hl   
39EA   CD 3A 11               CALL   run   
39ED   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
39FC   76                     HALT      
39FD                EXPECTM_3148S133:      
39FD   E1                     POP   HL   
39FE                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
39FE   31 00 59               LD   SP,STACK   
3A01   CD 71 10               CALL   coldInit   
3A04   CD 60 57               CALL   execStr   
3A07   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3A1A   E1                     POP   HL   
3A1B   E5                     PUSH   HL   
3A1C   11 07 00               LD   DE,7   
3A1F   B7                     OR   A   
3A20   ED 52                  SBC   HL,DE   
3A22   7D                     LD   A,L   
3A23   B4                     OR   H   
3A24   CA 8D 3A               JP   Z,expectM_3149S134   
3A27   CD 3D 10               CALL   printStr   
3A2A   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3A43   CD 3D 10               CALL   printStr   
3A46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A55   21 07 00               LD   hl,7   
3A58   E5                     PUSH   hl   
3A59   E5                     PUSH   hl   
3A5A   CD 3A 11               CALL   run   
3A5D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3A67   CD 3D 10               CALL   printStr   
3A6A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A77   E1                     POP   hl   
3A78   E5                     PUSH   hl   
3A79   E5                     PUSH   hl   
3A7A   CD 3A 11               CALL   run   
3A7D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3A8C   76                     HALT      
3A8D                EXPECTM_3149S134:      
3A8D   E1                     POP   HL   
3A8E                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3A8E   31 00 59               LD   SP,STACK   
3A91   CD 71 10               CALL   coldInit   
3A94   CD 60 57               CALL   execStr   
3A97   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3AAC   E1                     POP   HL   
3AAD   E5                     PUSH   HL   
3AAE   11 06 00               LD   DE,6   
3AB1   B7                     OR   A   
3AB2   ED 52                  SBC   HL,DE   
3AB4   7D                     LD   A,L   
3AB5   B4                     OR   H   
3AB6   CA 21 3B               JP   Z,expectM_3150S135   
3AB9   CD 3D 10               CALL   printStr   
3ABC   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3AD7   CD 3D 10               CALL   printStr   
3ADA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AE9   21 06 00               LD   hl,6   
3AEC   E5                     PUSH   hl   
3AED   E5                     PUSH   hl   
3AEE   CD 3A 11               CALL   run   
3AF1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3AFB   CD 3D 10               CALL   printStr   
3AFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B0B   E1                     POP   hl   
3B0C   E5                     PUSH   hl   
3B0D   E5                     PUSH   hl   
3B0E   CD 3A 11               CALL   run   
3B11   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3B20   76                     HALT      
3B21                EXPECTM_3150S135:      
3B21   E1                     POP   HL   
3B22                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3B22   31 00 59               LD   SP,STACK   
3B25   CD 71 10               CALL   coldInit   
3B28   CD 60 57               CALL   execStr   
3B2B   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3B39   E1                     POP   HL   
3B3A   E5                     PUSH   HL   
3B3B   11 02 00               LD   DE,2   
3B3E   B7                     OR   A   
3B3F   ED 52                  SBC   HL,DE   
3B41   7D                     LD   A,L   
3B42   B4                     OR   H   
3B43   CA A7 3B               JP   Z,expectM_3151S136   
3B46   CD 3D 10               CALL   printStr   
3B49   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3B5D   CD 3D 10               CALL   printStr   
3B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B6F   21 02 00               LD   hl,2   
3B72   E5                     PUSH   hl   
3B73   E5                     PUSH   hl   
3B74   CD 3A 11               CALL   run   
3B77   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3B81   CD 3D 10               CALL   printStr   
3B84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B91   E1                     POP   hl   
3B92   E5                     PUSH   hl   
3B93   E5                     PUSH   hl   
3B94   CD 3A 11               CALL   run   
3B97   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3BA6   76                     HALT      
3BA7                EXPECTM_3151S136:      
3BA7   E1                     POP   HL   
3BA8                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3BA8   31 00 59               LD   SP,STACK   
3BAB   CD 71 10               CALL   coldInit   
3BAE   CD 60 57               CALL   execStr   
3BB1   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3BC2   E1                     POP   HL   
3BC3   E5                     PUSH   HL   
3BC4   11 01 00               LD   DE,1   
3BC7   B7                     OR   A   
3BC8   ED 52                  SBC   HL,DE   
3BCA   7D                     LD   A,L   
3BCB   B4                     OR   H   
3BCC   CA 33 3C               JP   Z,expectM_3152S137   
3BCF   CD 3D 10               CALL   printStr   
3BD2   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3BE9   CD 3D 10               CALL   printStr   
3BEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BFB   21 01 00               LD   hl,1   
3BFE   E5                     PUSH   hl   
3BFF   E5                     PUSH   hl   
3C00   CD 3A 11               CALL   run   
3C03   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3C0D   CD 3D 10               CALL   printStr   
3C10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C1D   E1                     POP   hl   
3C1E   E5                     PUSH   hl   
3C1F   E5                     PUSH   hl   
3C20   CD 3A 11               CALL   run   
3C23   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3C32   76                     HALT      
3C33                EXPECTM_3152S137:      
3C33   E1                     POP   HL   
3C34                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3C34   31 00 59               LD   SP,STACK   
3C37   CD 71 10               CALL   coldInit   
3C3A   CD 60 57               CALL   execStr   
3C3D   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3C4F   E1                     POP   HL   
3C50   E5                     PUSH   HL   
3C51   11 02 00               LD   DE,2   
3C54   B7                     OR   A   
3C55   ED 52                  SBC   HL,DE   
3C57   7D                     LD   A,L   
3C58   B4                     OR   H   
3C59   CA C1 3C               JP   Z,expectM_3153S138   
3C5C   CD 3D 10               CALL   printStr   
3C5F   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3C77   CD 3D 10               CALL   printStr   
3C7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C89   21 02 00               LD   hl,2   
3C8C   E5                     PUSH   hl   
3C8D   E5                     PUSH   hl   
3C8E   CD 3A 11               CALL   run   
3C91   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3C9B   CD 3D 10               CALL   printStr   
3C9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CAB   E1                     POP   hl   
3CAC   E5                     PUSH   hl   
3CAD   E5                     PUSH   hl   
3CAE   CD 3A 11               CALL   run   
3CB1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3CC0   76                     HALT      
3CC1                EXPECTM_3153S138:      
3CC1   E1                     POP   HL   
3CC2                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3CC2   31 00 59               LD   SP,STACK   
3CC5   CD 71 10               CALL   coldInit   
3CC8   CD 60 57               CALL   execStr   
3CCB   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3CDE   E1                     POP   HL   
3CDF   E5                     PUSH   HL   
3CE0   11 02 00               LD   DE,2   
3CE3   B7                     OR   A   
3CE4   ED 52                  SBC   HL,DE   
3CE6   7D                     LD   A,L   
3CE7   B4                     OR   H   
3CE8   CA 51 3D               JP   Z,expectM_3154S139   
3CEB   CD 3D 10               CALL   printStr   
3CEE   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3D07   CD 3D 10               CALL   printStr   
3D0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D19   21 02 00               LD   hl,2   
3D1C   E5                     PUSH   hl   
3D1D   E5                     PUSH   hl   
3D1E   CD 3A 11               CALL   run   
3D21   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3D2B   CD 3D 10               CALL   printStr   
3D2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D3B   E1                     POP   hl   
3D3C   E5                     PUSH   hl   
3D3D   E5                     PUSH   hl   
3D3E   CD 3A 11               CALL   run   
3D41   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3D50   76                     HALT      
3D51                EXPECTM_3154S139:      
3D51   E1                     POP   HL   
3D52                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3D52   31 00 59               LD   SP,STACK   
3D55   CD 71 10               CALL   coldInit   
3D58   CD 60 57               CALL   execStr   
3D5B   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3D6D   E1                     POP   HL   
3D6E   E5                     PUSH   HL   
3D6F   11 02 00               LD   DE,2   
3D72   B7                     OR   A   
3D73   ED 52                  SBC   HL,DE   
3D75   7D                     LD   A,L   
3D76   B4                     OR   H   
3D77   CA DF 3D               JP   Z,expectM_3155S140   
3D7A   CD 3D 10               CALL   printStr   
3D7D   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3D95   CD 3D 10               CALL   printStr   
3D98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DA7   21 02 00               LD   hl,2   
3DAA   E5                     PUSH   hl   
3DAB   E5                     PUSH   hl   
3DAC   CD 3A 11               CALL   run   
3DAF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3DB9   CD 3D 10               CALL   printStr   
3DBC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC9   E1                     POP   hl   
3DCA   E5                     PUSH   hl   
3DCB   E5                     PUSH   hl   
3DCC   CD 3A 11               CALL   run   
3DCF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3DDE   76                     HALT      
3DDF                EXPECTM_3155S140:      
3DDF   E1                     POP   HL   
3DE0                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3DE0   31 00 59               LD   SP,STACK   
3DE3   CD 71 10               CALL   coldInit   
3DE6   CD 60 57               CALL   execStr   
3DE9   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3E02   E1                     POP   HL   
3E03   E5                     PUSH   HL   
3E04   11 05 00               LD   DE,5   
3E07   B7                     OR   A   
3E08   ED 52                  SBC   HL,DE   
3E0A   7D                     LD   A,L   
3E0B   B4                     OR   H   
3E0C   CA 7B 3E               JP   Z,expectM_3156S141   
3E0F   CD 3D 10               CALL   printStr   
3E12   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3E31   CD 3D 10               CALL   printStr   
3E34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E43   21 05 00               LD   hl,5   
3E46   E5                     PUSH   hl   
3E47   E5                     PUSH   hl   
3E48   CD 3A 11               CALL   run   
3E4B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3E55   CD 3D 10               CALL   printStr   
3E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E65   E1                     POP   hl   
3E66   E5                     PUSH   hl   
3E67   E5                     PUSH   hl   
3E68   CD 3A 11               CALL   run   
3E6B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3E7A   76                     HALT      
3E7B                EXPECTM_3156S141:      
3E7B   E1                     POP   HL   
3E7C                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3E7C   31 00 59               LD   SP,STACK   
3E7F   CD 71 10               CALL   coldInit   
3E82   CD 60 57               CALL   execStr   
3E85   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3E95   E1                     POP   HL   
3E96   E5                     PUSH   HL   
3E97   11 02 00               LD   DE,2   
3E9A   B7                     OR   A   
3E9B   ED 52                  SBC   HL,DE   
3E9D   7D                     LD   A,L   
3E9E   B4                     OR   H   
3E9F   CA 05 3F               JP   Z,expectM_3157S142   
3EA2   CD 3D 10               CALL   printStr   
3EA5   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3EBB   CD 3D 10               CALL   printStr   
3EBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ECD   21 02 00               LD   hl,2   
3ED0   E5                     PUSH   hl   
3ED1   E5                     PUSH   hl   
3ED2   CD 3A 11               CALL   run   
3ED5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3EDF   CD 3D 10               CALL   printStr   
3EE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EEF   E1                     POP   hl   
3EF0   E5                     PUSH   hl   
3EF1   E5                     PUSH   hl   
3EF2   CD 3A 11               CALL   run   
3EF5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3F04   76                     HALT      
3F05                EXPECTM_3157S142:      
3F05   E1                     POP   HL   
3F06                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3F06   31 00 59               LD   SP,STACK   
3F09   CD 71 10               CALL   coldInit   
3F0C   CD 60 57               CALL   execStr   
3F0F   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3F26   E1                     POP   HL   
3F27   E5                     PUSH   HL   
3F28   11 64 00               LD   DE,100   
3F2B   B7                     OR   A   
3F2C   ED 52                  SBC   HL,DE   
3F2E   7D                     LD   A,L   
3F2F   B4                     OR   H   
3F30   CA 9D 3F               JP   Z,expectM_3158S143   
3F33   CD 3D 10               CALL   printStr   
3F36   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3F53   CD 3D 10               CALL   printStr   
3F56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F65   21 64 00               LD   hl,100   
3F68   E5                     PUSH   hl   
3F69   E5                     PUSH   hl   
3F6A   CD 3A 11               CALL   run   
3F6D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3F77   CD 3D 10               CALL   printStr   
3F7A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F87   E1                     POP   hl   
3F88   E5                     PUSH   hl   
3F89   E5                     PUSH   hl   
3F8A   CD 3A 11               CALL   run   
3F8D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3F9C   76                     HALT      
3F9D                EXPECTM_3158S143:      
3F9D   E1                     POP   HL   
3F9E                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3F9E   31 00 59               LD   SP,STACK   
3FA1   CD 71 10               CALL   coldInit   
3FA4   CD 60 57               CALL   execStr   
3FA7   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3FBF   E1                     POP   HL   
3FC0   E5                     PUSH   HL   
3FC1   11 01 00               LD   DE,1   
3FC4   B7                     OR   A   
3FC5   ED 52                  SBC   HL,DE   
3FC7   7D                     LD   A,L   
3FC8   B4                     OR   H   
3FC9   CA 37 40               JP   Z,expectM_3159S144   
3FCC   CD 3D 10               CALL   printStr   
3FCF   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3FED   CD 3D 10               CALL   printStr   
3FF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FFF   21 01 00               LD   hl,1   
4002   E5                     PUSH   hl   
4003   E5                     PUSH   hl   
4004   CD 3A 11               CALL   run   
4007   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4011   CD 3D 10               CALL   printStr   
4014   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4021   E1                     POP   hl   
4022   E5                     PUSH   hl   
4023   E5                     PUSH   hl   
4024   CD 3A 11               CALL   run   
4027   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4036   76                     HALT      
4037                EXPECTM_3159S144:      
4037   E1                     POP   HL   
4038                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
4038   31 00 59               LD   SP,STACK   
403B   CD 71 10               CALL   coldInit   
403E   CD 60 57               CALL   execStr   
4041   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
405A   E1                     POP   HL   
405B   E5                     PUSH   HL   
405C   11 02 00               LD   DE,2   
405F   B7                     OR   A   
4060   ED 52                  SBC   HL,DE   
4062   7D                     LD   A,L   
4063   B4                     OR   H   
4064   CA D3 40               JP   Z,expectM_3160S145   
4067   CD 3D 10               CALL   printStr   
406A   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
4089   CD 3D 10               CALL   printStr   
408C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
409B   21 02 00               LD   hl,2   
409E   E5                     PUSH   hl   
409F   E5                     PUSH   hl   
40A0   CD 3A 11               CALL   run   
40A3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
40AD   CD 3D 10               CALL   printStr   
40B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40BD   E1                     POP   hl   
40BE   E5                     PUSH   hl   
40BF   E5                     PUSH   hl   
40C0   CD 3A 11               CALL   run   
40C3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
40D2   76                     HALT      
40D3                EXPECTM_3160S145:      
40D3   E1                     POP   HL   
40D4                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
40D4   31 00 59               LD   SP,STACK   
40D7   CD 71 10               CALL   coldInit   
40DA   CD 60 57               CALL   execStr   
40DD   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
40FC   E1                     POP   HL   
40FD   E5                     PUSH   HL   
40FE   11 0B 00               LD   DE,11   
4101   B7                     OR   A   
4102   ED 52                  SBC   HL,DE   
4104   7D                     LD   A,L   
4105   B4                     OR   H   
4106   CA 7B 41               JP   Z,expectM_3161S146   
4109   CD 3D 10               CALL   printStr   
410C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
4131   CD 3D 10               CALL   printStr   
4134   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4143   21 0B 00               LD   hl,11   
4146   E5                     PUSH   hl   
4147   E5                     PUSH   hl   
4148   CD 3A 11               CALL   run   
414B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4155   CD 3D 10               CALL   printStr   
4158   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4165   E1                     POP   hl   
4166   E5                     PUSH   hl   
4167   E5                     PUSH   hl   
4168   CD 3A 11               CALL   run   
416B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
417A   76                     HALT      
417B                EXPECTM_3161S146:      
417B   E1                     POP   HL   
417C                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
417C   31 00 59               LD   SP,STACK   
417F   CD 71 10               CALL   coldInit   
4182   CD 60 57               CALL   execStr   
4185   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
41A4   E1                     POP   HL   
41A5   E5                     PUSH   HL   
41A6   11 15 00               LD   DE,21   
41A9   B7                     OR   A   
41AA   ED 52                  SBC   HL,DE   
41AC   7D                     LD   A,L   
41AD   B4                     OR   H   
41AE   CA 23 42               JP   Z,expectM_3162S147   
41B1   CD 3D 10               CALL   printStr   
41B4   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
41D9   CD 3D 10               CALL   printStr   
41DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41EB   21 15 00               LD   hl,21   
41EE   E5                     PUSH   hl   
41EF   E5                     PUSH   hl   
41F0   CD 3A 11               CALL   run   
41F3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
41FD   CD 3D 10               CALL   printStr   
4200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
420D   E1                     POP   hl   
420E   E5                     PUSH   hl   
420F   E5                     PUSH   hl   
4210   CD 3A 11               CALL   run   
4213   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4222   76                     HALT      
4223                EXPECTM_3162S147:      
4223   E1                     POP   HL   
4224                          ;*Macro unroll:  test "[10 20 30] 1;", 20
4224   31 00 59               LD   SP,STACK   
4227   CD 71 10               CALL   coldInit   
422A   CD 60 57               CALL   execStr   
422D   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
423B   E1                     POP   HL   
423C   E5                     PUSH   HL   
423D   11 14 00               LD   DE,20   
4240   B7                     OR   A   
4241   ED 52                  SBC   HL,DE   
4243   7D                     LD   A,L   
4244   B4                     OR   H   
4245   CA A9 42               JP   Z,expectM_3163S148   
4248   CD 3D 10               CALL   printStr   
424B   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
425F   CD 3D 10               CALL   printStr   
4262   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4271   21 14 00               LD   hl,20   
4274   E5                     PUSH   hl   
4275   E5                     PUSH   hl   
4276   CD 3A 11               CALL   run   
4279   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4283   CD 3D 10               CALL   printStr   
4286   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4293   E1                     POP   hl   
4294   E5                     PUSH   hl   
4295   E5                     PUSH   hl   
4296   CD 3A 11               CALL   run   
4299   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
42A8   76                     HALT      
42A9                EXPECTM_3163S148:      
42A9   E1                     POP   HL   
42AA                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
42AA   31 00 59               LD   SP,STACK   
42AD   CD 71 10               CALL   coldInit   
42B0   CD 60 57               CALL   execStr   
42B3   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
42C6   E1                     POP   HL   
42C7   E5                     PUSH   HL   
42C8   11 04 00               LD   DE,4   
42CB   B7                     OR   A   
42CC   ED 52                  SBC   HL,DE   
42CE   7D                     LD   A,L   
42CF   B4                     OR   H   
42D0   CA 39 43               JP   Z,expectM_3164S149   
42D3   CD 3D 10               CALL   printStr   
42D6   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
42EF   CD 3D 10               CALL   printStr   
42F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4301   21 04 00               LD   hl,4   
4304   E5                     PUSH   hl   
4305   E5                     PUSH   hl   
4306   CD 3A 11               CALL   run   
4309   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4313   CD 3D 10               CALL   printStr   
4316   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4323   E1                     POP   hl   
4324   E5                     PUSH   hl   
4325   E5                     PUSH   hl   
4326   CD 3A 11               CALL   run   
4329   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4338   76                     HALT      
4339                EXPECTM_3164S149:      
4339   E1                     POP   HL   
433A                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
433A   31 00 59               LD   SP,STACK   
433D   CD 71 10               CALL   coldInit   
4340   CD 60 57               CALL   execStr   
4343   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
4353   E1                     POP   HL   
4354   E5                     PUSH   HL   
4355   11 02 00               LD   DE,2   
4358   B7                     OR   A   
4359   ED 52                  SBC   HL,DE   
435B   7D                     LD   A,L   
435C   B4                     OR   H   
435D   CA C3 43               JP   Z,expectM_3165S150   
4360   CD 3D 10               CALL   printStr   
4363   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
4379   CD 3D 10               CALL   printStr   
437C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
438B   21 02 00               LD   hl,2   
438E   E5                     PUSH   hl   
438F   E5                     PUSH   hl   
4390   CD 3A 11               CALL   run   
4393   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
439D   CD 3D 10               CALL   printStr   
43A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AD   E1                     POP   hl   
43AE   E5                     PUSH   hl   
43AF   E5                     PUSH   hl   
43B0   CD 3A 11               CALL   run   
43B3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
43C2   76                     HALT      
43C3                EXPECTM_3165S150:      
43C3   E1                     POP   HL   
43C4                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
43C4   31 00 59               LD   SP,STACK   
43C7   CD 71 10               CALL   coldInit   
43CA   CD 60 57               CALL   execStr   
43CD   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
43E0   E1                     POP   HL   
43E1   E5                     PUSH   HL   
43E2   11 42 00               LD   DE,66   
43E5   B7                     OR   A   
43E6   ED 52                  SBC   HL,DE   
43E8   7D                     LD   A,L   
43E9   B4                     OR   H   
43EA   CA 53 44               JP   Z,expectM_3166S151   
43ED   CD 3D 10               CALL   printStr   
43F0   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
4409   CD 3D 10               CALL   printStr   
440C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
441B   21 42 00               LD   hl,66   
441E   E5                     PUSH   hl   
441F   E5                     PUSH   hl   
4420   CD 3A 11               CALL   run   
4423   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
442D   CD 3D 10               CALL   printStr   
4430   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
443D   E1                     POP   hl   
443E   E5                     PUSH   hl   
443F   E5                     PUSH   hl   
4440   CD 3A 11               CALL   run   
4443   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4452   76                     HALT      
4453                EXPECTM_3166S151:      
4453   E1                     POP   HL   
4454                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
4454   31 00 59               LD   SP,STACK   
4457   CD 71 10               CALL   coldInit   
445A   CD 60 57               CALL   execStr   
445D   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4471   E1                     POP   HL   
4472   E5                     PUSH   HL   
4473   11 0A 00               LD   DE,10   
4476   B7                     OR   A   
4477   ED 52                  SBC   HL,DE   
4479   7D                     LD   A,L   
447A   B4                     OR   H   
447B   CA E5 44               JP   Z,expectM_3167S152   
447E   CD 3D 10               CALL   printStr   
4481   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
449B   CD 3D 10               CALL   printStr   
449E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44AD   21 0A 00               LD   hl,10   
44B0   E5                     PUSH   hl   
44B1   E5                     PUSH   hl   
44B2   CD 3A 11               CALL   run   
44B5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
44BF   CD 3D 10               CALL   printStr   
44C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44CF   E1                     POP   hl   
44D0   E5                     PUSH   hl   
44D1   E5                     PUSH   hl   
44D2   CD 3A 11               CALL   run   
44D5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
44E4   76                     HALT      
44E5                EXPECTM_3167S152:      
44E5   E1                     POP   HL   
44E6                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
44E6   31 00 59               LD   SP,STACK   
44E9   CD 71 10               CALL   coldInit   
44EC   CD 60 57               CALL   execStr   
44EF   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
450A   E1                     POP   HL   
450B   E5                     PUSH   HL   
450C   11 0A 00               LD   DE,10   
450F   B7                     OR   A   
4510   ED 52                  SBC   HL,DE   
4512   7D                     LD   A,L   
4513   B4                     OR   H   
4514   CA 85 45               JP   Z,expectM_3168S153   
4517   CD 3D 10               CALL   printStr   
451A   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
453B   CD 3D 10               CALL   printStr   
453E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
454D   21 0A 00               LD   hl,10   
4550   E5                     PUSH   hl   
4551   E5                     PUSH   hl   
4552   CD 3A 11               CALL   run   
4555   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
455F   CD 3D 10               CALL   printStr   
4562   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
456F   E1                     POP   hl   
4570   E5                     PUSH   hl   
4571   E5                     PUSH   hl   
4572   CD 3A 11               CALL   run   
4575   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4584   76                     HALT      
4585                EXPECTM_3168S153:      
4585   E1                     POP   HL   
4586                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4586   31 00 59               LD   SP,STACK   
4589   CD 71 10               CALL   coldInit   
458C   CD 60 57               CALL   execStr   
458F   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
45AE   E1                     POP   HL   
45AF   E5                     PUSH   HL   
45B0   11 0A 00               LD   DE,10   
45B3   B7                     OR   A   
45B4   ED 52                  SBC   HL,DE   
45B6   7D                     LD   A,L   
45B7   B4                     OR   H   
45B8   CA 2D 46               JP   Z,expectM_3169S154   
45BB   CD 3D 10               CALL   printStr   
45BE   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
45E3   CD 3D 10               CALL   printStr   
45E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F5   21 0A 00               LD   hl,10   
45F8   E5                     PUSH   hl   
45F9   E5                     PUSH   hl   
45FA   CD 3A 11               CALL   run   
45FD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4607   CD 3D 10               CALL   printStr   
460A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4617   E1                     POP   hl   
4618   E5                     PUSH   hl   
4619   E5                     PUSH   hl   
461A   CD 3A 11               CALL   run   
461D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
462C   76                     HALT      
462D                EXPECTM_3169S154:      
462D   E1                     POP   HL   
462E                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
462E   31 00 59               LD   SP,STACK   
4631   CD 71 10               CALL   coldInit   
4634   CD 60 57               CALL   execStr   
4637   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4656   E1                     POP   HL   
4657   E5                     PUSH   HL   
4658   11 14 00               LD   DE,20   
465B   B7                     OR   A   
465C   ED 52                  SBC   HL,DE   
465E   7D                     LD   A,L   
465F   B4                     OR   H   
4660   CA D5 46               JP   Z,expectM_3170S155   
4663   CD 3D 10               CALL   printStr   
4666   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
468B   CD 3D 10               CALL   printStr   
468E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
469D   21 14 00               LD   hl,20   
46A0   E5                     PUSH   hl   
46A1   E5                     PUSH   hl   
46A2   CD 3A 11               CALL   run   
46A5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
46AF   CD 3D 10               CALL   printStr   
46B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46BF   E1                     POP   hl   
46C0   E5                     PUSH   hl   
46C1   E5                     PUSH   hl   
46C2   CD 3A 11               CALL   run   
46C5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
46D4   76                     HALT      
46D5                EXPECTM_3170S155:      
46D5   E1                     POP   HL   
46D6                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
46D6   31 00 59               LD   SP,STACK   
46D9   CD 71 10               CALL   coldInit   
46DC   CD 60 57               CALL   execStr   
46DF   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
46F8   E1                     POP   HL   
46F9   E5                     PUSH   HL   
46FA   11 06 00               LD   DE,6   
46FD   B7                     OR   A   
46FE   ED 52                  SBC   HL,DE   
4700   7D                     LD   A,L   
4701   B4                     OR   H   
4702   CA 71 47               JP   Z,expectM_3171S156   
4705   CD 3D 10               CALL   printStr   
4708   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
4727   CD 3D 10               CALL   printStr   
472A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4739   21 06 00               LD   hl,6   
473C   E5                     PUSH   hl   
473D   E5                     PUSH   hl   
473E   CD 3A 11               CALL   run   
4741   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
474B   CD 3D 10               CALL   printStr   
474E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
475B   E1                     POP   hl   
475C   E5                     PUSH   hl   
475D   E5                     PUSH   hl   
475E   CD 3A 11               CALL   run   
4761   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4770   76                     HALT      
4771                EXPECTM_3171S156:      
4771   E1                     POP   HL   
4772                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
4772   31 00 59               LD   SP,STACK   
4775   CD 71 10               CALL   coldInit   
4778   CD 60 57               CALL   execStr   
477B   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
4797   E1                     POP   HL   
4798   E5                     PUSH   HL   
4799   11 02 00               LD   DE,2   
479C   B7                     OR   A   
479D   ED 52                  SBC   HL,DE   
479F   7D                     LD   A,L   
47A0   B4                     OR   H   
47A1   CA 13 48               JP   Z,expectM_3172S157   
47A4   CD 3D 10               CALL   printStr   
47A7   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
47C9   CD 3D 10               CALL   printStr   
47CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DB   21 02 00               LD   hl,2   
47DE   E5                     PUSH   hl   
47DF   E5                     PUSH   hl   
47E0   CD 3A 11               CALL   run   
47E3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
47ED   CD 3D 10               CALL   printStr   
47F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47FD   E1                     POP   hl   
47FE   E5                     PUSH   hl   
47FF   E5                     PUSH   hl   
4800   CD 3A 11               CALL   run   
4803   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4812   76                     HALT      
4813                EXPECTM_3172S157:      
4813   E1                     POP   HL   
4814                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
4814   31 00 59               LD   SP,STACK   
4817   CD 71 10               CALL   coldInit   
481A   CD 60 57               CALL   execStr   
481D   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
4844   E1                     POP   HL   
4845   E5                     PUSH   HL   
4846   11 0A 00               LD   DE,10   
4849   B7                     OR   A   
484A   ED 52                  SBC   HL,DE   
484C   7D                     LD   A,L   
484D   B4                     OR   H   
484E   CA CB 48               JP   Z,expectM_3173S158   
4851   CD 3D 10               CALL   printStr   
4854   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
4881   CD 3D 10               CALL   printStr   
4884   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4893   21 0A 00               LD   hl,10   
4896   E5                     PUSH   hl   
4897   E5                     PUSH   hl   
4898   CD 3A 11               CALL   run   
489B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
48A5   CD 3D 10               CALL   printStr   
48A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48B5   E1                     POP   hl   
48B6   E5                     PUSH   hl   
48B7   E5                     PUSH   hl   
48B8   CD 3A 11               CALL   run   
48BB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
48CA   76                     HALT      
48CB                EXPECTM_3173S158:      
48CB   E1                     POP   HL   
48CC                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
48CC   31 00 59               LD   SP,STACK   
48CF   CD 71 10               CALL   coldInit   
48D2   CD 60 57               CALL   execStr   
48D5   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
48F9   E1                     POP   HL   
48FA   E5                     PUSH   HL   
48FB   11 0A 00               LD   DE,10   
48FE   B7                     OR   A   
48FF   ED 52                  SBC   HL,DE   
4901   7D                     LD   A,L   
4902   B4                     OR   H   
4903   CA 7D 49               JP   Z,expectM_3174S159   
4906   CD 3D 10               CALL   printStr   
4909   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
4933   CD 3D 10               CALL   printStr   
4936   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4945   21 0A 00               LD   hl,10   
4948   E5                     PUSH   hl   
4949   E5                     PUSH   hl   
494A   CD 3A 11               CALL   run   
494D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4957   CD 3D 10               CALL   printStr   
495A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4967   E1                     POP   hl   
4968   E5                     PUSH   hl   
4969   E5                     PUSH   hl   
496A   CD 3A 11               CALL   run   
496D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
497C   76                     HALT      
497D                EXPECTM_3174S159:      
497D   E1                     POP   HL   
497E                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
497E   31 00 59               LD   SP,STACK   
4981   CD 71 10               CALL   coldInit   
4984   CD 60 57               CALL   execStr   
4987   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
49B3   E1                     POP   HL   
49B4   E5                     PUSH   HL   
49B5   11 0C 00               LD   DE,12   
49B8   B7                     OR   A   
49B9   ED 52                  SBC   HL,DE   
49BB   7D                     LD   A,L   
49BC   B4                     OR   H   
49BD   CA 3F 4A               JP   Z,expectM_3175S160   
49C0   CD 3D 10               CALL   printStr   
49C3   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
49F5   CD 3D 10               CALL   printStr   
49F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A07   21 0C 00               LD   hl,12   
4A0A   E5                     PUSH   hl   
4A0B   E5                     PUSH   hl   
4A0C   CD 3A 11               CALL   run   
4A0F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4A19   CD 3D 10               CALL   printStr   
4A1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A29   E1                     POP   hl   
4A2A   E5                     PUSH   hl   
4A2B   E5                     PUSH   hl   
4A2C   CD 3A 11               CALL   run   
4A2F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4A3E   76                     HALT      
4A3F                EXPECTM_3175S160:      
4A3F   E1                     POP   HL   
4A40                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
4A40   31 00 59               LD   SP,STACK   
4A43   CD 71 10               CALL   coldInit   
4A46   CD 60 57               CALL   execStr   
4A49   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
4A75   E1                     POP   HL   
4A76   E5                     PUSH   HL   
4A77   11 06 00               LD   DE,6   
4A7A   B7                     OR   A   
4A7B   ED 52                  SBC   HL,DE   
4A7D   7D                     LD   A,L   
4A7E   B4                     OR   H   
4A7F   CA 01 4B               JP   Z,expectM_3176S161   
4A82   CD 3D 10               CALL   printStr   
4A85   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4AB7   CD 3D 10               CALL   printStr   
4ABA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AC9   21 06 00               LD   hl,6   
4ACC   E5                     PUSH   hl   
4ACD   E5                     PUSH   hl   
4ACE   CD 3A 11               CALL   run   
4AD1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4ADB   CD 3D 10               CALL   printStr   
4ADE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AEB   E1                     POP   hl   
4AEC   E5                     PUSH   hl   
4AED   E5                     PUSH   hl   
4AEE   CD 3A 11               CALL   run   
4AF1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4B00   76                     HALT      
4B01                EXPECTM_3176S161:      
4B01   E1                     POP   HL   
4B02                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
4B02   31 00 59               LD   SP,STACK   
4B05   CD 71 10               CALL   coldInit   
4B08   CD 60 57               CALL   execStr   
4B0B   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
4B22   E1                     POP   HL   
4B23   E5                     PUSH   HL   
4B24   11 03 00               LD   DE,3   
4B27   B7                     OR   A   
4B28   ED 52                  SBC   HL,DE   
4B2A   7D                     LD   A,L   
4B2B   B4                     OR   H   
4B2C   CA 99 4B               JP   Z,expectM_3177S162   
4B2F   CD 3D 10               CALL   printStr   
4B32   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
4B4F   CD 3D 10               CALL   printStr   
4B52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B61   21 03 00               LD   hl,3   
4B64   E5                     PUSH   hl   
4B65   E5                     PUSH   hl   
4B66   CD 3A 11               CALL   run   
4B69   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4B73   CD 3D 10               CALL   printStr   
4B76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B83   E1                     POP   hl   
4B84   E5                     PUSH   hl   
4B85   E5                     PUSH   hl   
4B86   CD 3A 11               CALL   run   
4B89   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4B98   76                     HALT      
4B99                EXPECTM_3177S162:      
4B99   E1                     POP   HL   
4B9A                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4B9A   31 00 59               LD   SP,STACK   
4B9D   CD 71 10               CALL   coldInit   
4BA0   CD 60 57               CALL   execStr   
4BA3   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4BBA   E1                     POP   HL   
4BBB   E5                     PUSH   HL   
4BBC   11 01 00               LD   DE,1   
4BBF   B7                     OR   A   
4BC0   ED 52                  SBC   HL,DE   
4BC2   7D                     LD   A,L   
4BC3   B4                     OR   H   
4BC4   CA 31 4C               JP   Z,expectM_3178S163   
4BC7   CD 3D 10               CALL   printStr   
4BCA   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4BE7   CD 3D 10               CALL   printStr   
4BEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BF9   21 01 00               LD   hl,1   
4BFC   E5                     PUSH   hl   
4BFD   E5                     PUSH   hl   
4BFE   CD 3A 11               CALL   run   
4C01   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4C0B   CD 3D 10               CALL   printStr   
4C0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C1B   E1                     POP   hl   
4C1C   E5                     PUSH   hl   
4C1D   E5                     PUSH   hl   
4C1E   CD 3A 11               CALL   run   
4C21   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4C30   76                     HALT      
4C31                EXPECTM_3178S163:      
4C31   E1                     POP   HL   
4C32                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4C32   31 00 59               LD   SP,STACK   
4C35   CD 71 10               CALL   coldInit   
4C38   CD 60 57               CALL   execStr   
4C3B   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4C47   E1                     POP   HL   
4C48   E5                     PUSH   HL   
4C49   11 00 00               LD   DE,NUL   
4C4C   B7                     OR   A   
4C4D   ED 52                  SBC   HL,DE   
4C4F   7D                     LD   A,L   
4C50   B4                     OR   H   
4C51   CA B3 4C               JP   Z,expectM_3179S164   
4C54   CD 3D 10               CALL   printStr   
4C57   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4C69   CD 3D 10               CALL   printStr   
4C6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C7B   21 00 00               LD   hl,NUL   
4C7E   E5                     PUSH   hl   
4C7F   E5                     PUSH   hl   
4C80   CD 3A 11               CALL   run   
4C83   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4C8D   CD 3D 10               CALL   printStr   
4C90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C9D   E1                     POP   hl   
4C9E   E5                     PUSH   hl   
4C9F   E5                     PUSH   hl   
4CA0   CD 3A 11               CALL   run   
4CA3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4CB2   76                     HALT      
4CB3                EXPECTM_3179S164:      
4CB3   E1                     POP   HL   
4CB4                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4CB4   31 00 59               LD   SP,STACK   
4CB7   CD 71 10               CALL   coldInit   
4CBA   CD 60 57               CALL   execStr   
4CBD   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4CC9   E1                     POP   HL   
4CCA   E5                     PUSH   HL   
4CCB   11 00 00               LD   DE,NUL   
4CCE   B7                     OR   A   
4CCF   ED 52                  SBC   HL,DE   
4CD1   7D                     LD   A,L   
4CD2   B4                     OR   H   
4CD3   CA 35 4D               JP   Z,expectM_3180S165   
4CD6   CD 3D 10               CALL   printStr   
4CD9   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4CEB   CD 3D 10               CALL   printStr   
4CEE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CFD   21 00 00               LD   hl,NUL   
4D00   E5                     PUSH   hl   
4D01   E5                     PUSH   hl   
4D02   CD 3A 11               CALL   run   
4D05   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4D0F   CD 3D 10               CALL   printStr   
4D12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D1F   E1                     POP   hl   
4D20   E5                     PUSH   hl   
4D21   E5                     PUSH   hl   
4D22   CD 3A 11               CALL   run   
4D25   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4D34   76                     HALT      
4D35                EXPECTM_3180S165:      
4D35   E1                     POP   HL   
4D36                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4D36   31 00 59               LD   SP,STACK   
4D39   CD 71 10               CALL   coldInit   
4D3C   CD 60 57               CALL   execStr   
4D3F   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4D4B   E1                     POP   HL   
4D4C   E5                     PUSH   HL   
4D4D   11 00 00               LD   DE,NUL   
4D50   B7                     OR   A   
4D51   ED 52                  SBC   HL,DE   
4D53   7D                     LD   A,L   
4D54   B4                     OR   H   
4D55   CA B7 4D               JP   Z,expectM_3181S166   
4D58   CD 3D 10               CALL   printStr   
4D5B   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4D6D   CD 3D 10               CALL   printStr   
4D70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D7F   21 00 00               LD   hl,NUL   
4D82   E5                     PUSH   hl   
4D83   E5                     PUSH   hl   
4D84   CD 3A 11               CALL   run   
4D87   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4D91   CD 3D 10               CALL   printStr   
4D94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA1   E1                     POP   hl   
4DA2   E5                     PUSH   hl   
4DA3   E5                     PUSH   hl   
4DA4   CD 3A 11               CALL   run   
4DA7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4DB6   76                     HALT      
4DB7                EXPECTM_3181S166:      
4DB7   E1                     POP   HL   
4DB8                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4DB8   31 00 59               LD   SP,STACK   
4DBB   CD 71 10               CALL   coldInit   
4DBE   CD 60 57               CALL   execStr   
4DC1   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4DCD   E1                     POP   HL   
4DCE   E5                     PUSH   HL   
4DCF   11 00 00               LD   DE,NUL   
4DD2   B7                     OR   A   
4DD3   ED 52                  SBC   HL,DE   
4DD5   7D                     LD   A,L   
4DD6   B4                     OR   H   
4DD7   CA 39 4E               JP   Z,expectM_3182S167   
4DDA   CD 3D 10               CALL   printStr   
4DDD   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4DEF   CD 3D 10               CALL   printStr   
4DF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E01   21 00 00               LD   hl,NUL   
4E04   E5                     PUSH   hl   
4E05   E5                     PUSH   hl   
4E06   CD 3A 11               CALL   run   
4E09   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4E13   CD 3D 10               CALL   printStr   
4E16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E23   E1                     POP   hl   
4E24   E5                     PUSH   hl   
4E25   E5                     PUSH   hl   
4E26   CD 3A 11               CALL   run   
4E29   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4E38   76                     HALT      
4E39                EXPECTM_3182S167:      
4E39   E1                     POP   HL   
4E3A                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
4E3A   31 00 59               LD   SP,STACK   
4E3D   CD 71 10               CALL   coldInit   
4E40   CD 60 57               CALL   execStr   
4E43   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
4E4B   E1                     POP   HL   
4E4C   E5                     PUSH   HL   
4E4D   11 66 5B               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4E50   B7                     OR   A   
4E51   ED 52                  SBC   HL,DE   
4E53   7D                     LD   A,L   
4E54   B4                     OR   H   
4E55   CA B3 4E               JP   Z,expectM_3183S168   
4E58   CD 3D 10               CALL   printStr   
4E5B   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
4E69   CD 3D 10               CALL   printStr   
4E6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E7B   21 66 5B               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4E7E   E5                     PUSH   hl   
4E7F   E5                     PUSH   hl   
4E80   CD 3A 11               CALL   run   
4E83   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4E8D   CD 3D 10               CALL   printStr   
4E90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E9D   E1                     POP   hl   
4E9E   E5                     PUSH   hl   
4E9F   E5                     PUSH   hl   
4EA0   CD 3A 11               CALL   run   
4EA3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4EB2   76                     HALT      
4EB3                EXPECTM_3183S168:      
4EB3   E1                     POP   HL   
4EB4                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
4EB4   31 00 59               LD   SP,STACK   
4EB7   CD 71 10               CALL   coldInit   
4EBA   CD 60 57               CALL   execStr   
4EBD   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
4EC5   E1                     POP   HL   
4EC6   E5                     PUSH   HL   
4EC7   11 34 5B               LD   DE,VARS + ("Z"-"A"+1)*2   
4ECA   B7                     OR   A   
4ECB   ED 52                  SBC   HL,DE   
4ECD   7D                     LD   A,L   
4ECE   B4                     OR   H   
4ECF   CA 2D 4F               JP   Z,expectM_3184S169   
4ED2   CD 3D 10               CALL   printStr   
4ED5   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
4EE3   CD 3D 10               CALL   printStr   
4EE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EF5   21 34 5B               LD   hl,VARS + ("Z"-"A"+1)*2   
4EF8   E5                     PUSH   hl   
4EF9   E5                     PUSH   hl   
4EFA   CD 3A 11               CALL   run   
4EFD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4F07   CD 3D 10               CALL   printStr   
4F0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F17   E1                     POP   hl   
4F18   E5                     PUSH   hl   
4F19   E5                     PUSH   hl   
4F1A   CD 3A 11               CALL   run   
4F1D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4F2C   76                     HALT      
4F2D                EXPECTM_3184S169:      
4F2D   E1                     POP   HL   
4F2E                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
4F2E   31 00 59               LD   SP,STACK   
4F31   CD 71 10               CALL   coldInit   
4F34   CD 60 57               CALL   execStr   
4F37   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
4F3F   E1                     POP   HL   
4F40   E5                     PUSH   HL   
4F41   11 32 5B               LD   DE,VARS + ("Z"-"A")*2   
4F44   B7                     OR   A   
4F45   ED 52                  SBC   HL,DE   
4F47   7D                     LD   A,L   
4F48   B4                     OR   H   
4F49   CA A7 4F               JP   Z,expectM_3185S170   
4F4C   CD 3D 10               CALL   printStr   
4F4F   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
4F5D   CD 3D 10               CALL   printStr   
4F60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F6F   21 32 5B               LD   hl,VARS + ("Z"-"A")*2   
4F72   E5                     PUSH   hl   
4F73   E5                     PUSH   hl   
4F74   CD 3A 11               CALL   run   
4F77   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4F81   CD 3D 10               CALL   printStr   
4F84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F91   E1                     POP   hl   
4F92   E5                     PUSH   hl   
4F93   E5                     PUSH   hl   
4F94   CD 3A 11               CALL   run   
4F97   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4FA6   76                     HALT      
4FA7                EXPECTM_3185S170:      
4FA7   E1                     POP   HL   
4FA8                          ;*Macro unroll:  test "_A /adr", VARS
4FA8   31 00 59               LD   SP,STACK   
4FAB   CD 71 10               CALL   coldInit   
4FAE   CD 60 57               CALL   execStr   
4FB1   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
4FB9   E1                     POP   HL   
4FBA   E5                     PUSH   HL   
4FBB   11 00 5B               LD   DE,VARS   
4FBE   B7                     OR   A   
4FBF   ED 52                  SBC   HL,DE   
4FC1   7D                     LD   A,L   
4FC2   B4                     OR   H   
4FC3   CA 21 50               JP   Z,expectM_3186S171   
4FC6   CD 3D 10               CALL   printStr   
4FC9   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
4FD7   CD 3D 10               CALL   printStr   
4FDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FE9   21 00 5B               LD   hl,VARS   
4FEC   E5                     PUSH   hl   
4FED   E5                     PUSH   hl   
4FEE   CD 3A 11               CALL   run   
4FF1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4FFB   CD 3D 10               CALL   printStr   
4FFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
500B   E1                     POP   hl   
500C   E5                     PUSH   hl   
500D   E5                     PUSH   hl   
500E   CD 3A 11               CALL   run   
5011   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5020   76                     HALT      
5021                EXPECTM_3186S171:      
5021   E1                     POP   HL   
5022                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
5022   31 00 59               LD   SP,STACK   
5025   CD 71 10               CALL   coldInit   
5028   CD 60 57               CALL   execStr   
502B   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
5038   E1                     POP   HL   
5039   E5                     PUSH   HL   
503A   11 01 00               LD   DE,1   
503D   B7                     OR   A   
503E   ED 52                  SBC   HL,DE   
5040   7D                     LD   A,L   
5041   B4                     OR   H   
5042   CA A5 50               JP   Z,expectM_3187S172   
5045   CD 3D 10               CALL   printStr   
5048   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
505B   CD 3D 10               CALL   printStr   
505E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
506D   21 01 00               LD   hl,1   
5070   E5                     PUSH   hl   
5071   E5                     PUSH   hl   
5072   CD 3A 11               CALL   run   
5075   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
507F   CD 3D 10               CALL   printStr   
5082   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
508F   E1                     POP   hl   
5090   E5                     PUSH   hl   
5091   E5                     PUSH   hl   
5092   CD 3A 11               CALL   run   
5095   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
50A4   76                     HALT      
50A5                EXPECTM_3187S172:      
50A5   E1                     POP   HL   
50A6                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
50A6   31 00 59               LD   SP,STACK   
50A9   CD 71 10               CALL   coldInit   
50AC   CD 60 57               CALL   execStr   
50AF   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
50C3   E1                     POP   HL   
50C4   E5                     PUSH   HL   
50C5   11 03 00               LD   DE,3   
50C8   B7                     OR   A   
50C9   ED 52                  SBC   HL,DE   
50CB   7D                     LD   A,L   
50CC   B4                     OR   H   
50CD   CA 37 51               JP   Z,expectM_3188S173   
50D0   CD 3D 10               CALL   printStr   
50D3   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
50ED   CD 3D 10               CALL   printStr   
50F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50FF   21 03 00               LD   hl,3   
5102   E5                     PUSH   hl   
5103   E5                     PUSH   hl   
5104   CD 3A 11               CALL   run   
5107   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5111   CD 3D 10               CALL   printStr   
5114   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5121   E1                     POP   hl   
5122   E5                     PUSH   hl   
5123   E5                     PUSH   hl   
5124   CD 3A 11               CALL   run   
5127   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5136   76                     HALT      
5137                EXPECTM_3188S173:      
5137   E1                     POP   HL   
5138                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5138   31 00 59               LD   SP,STACK   
513B   CD 71 10               CALL   coldInit   
513E   CD 60 57               CALL   execStr   
5141   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5158   E1                     POP   HL   
5159   E5                     PUSH   HL   
515A   11 02 00               LD   DE,2   
515D   B7                     OR   A   
515E   ED 52                  SBC   HL,DE   
5160   7D                     LD   A,L   
5161   B4                     OR   H   
5162   CA CF 51               JP   Z,expectM_3189S174   
5165   CD 3D 10               CALL   printStr   
5168   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
5185   CD 3D 10               CALL   printStr   
5188   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5197   21 02 00               LD   hl,2   
519A   E5                     PUSH   hl   
519B   E5                     PUSH   hl   
519C   CD 3A 11               CALL   run   
519F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
51A9   CD 3D 10               CALL   printStr   
51AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51B9   E1                     POP   hl   
51BA   E5                     PUSH   hl   
51BB   E5                     PUSH   hl   
51BC   CD 3A 11               CALL   run   
51BF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
51CE   76                     HALT      
51CF                EXPECTM_3189S174:      
51CF   E1                     POP   HL   
51D0                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
51D0   31 00 59               LD   SP,STACK   
51D3   CD 71 10               CALL   coldInit   
51D6   CD 60 57               CALL   execStr   
51D9   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
51FC   E1                     POP   HL   
51FD   E5                     PUSH   HL   
51FE   11 01 00               LD   DE,1   
5201   B7                     OR   A   
5202   ED 52                  SBC   HL,DE   
5204   7D                     LD   A,L   
5205   B4                     OR   H   
5206   CA 7F 52               JP   Z,expectM_3190S175   
5209   CD 3D 10               CALL   printStr   
520C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5235   CD 3D 10               CALL   printStr   
5238   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5247   21 01 00               LD   hl,1   
524A   E5                     PUSH   hl   
524B   E5                     PUSH   hl   
524C   CD 3A 11               CALL   run   
524F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5259   CD 3D 10               CALL   printStr   
525C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5269   E1                     POP   hl   
526A   E5                     PUSH   hl   
526B   E5                     PUSH   hl   
526C   CD 3A 11               CALL   run   
526F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
527E   76                     HALT      
527F                EXPECTM_3190S175:      
527F   E1                     POP   HL   
5280                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
5280   31 00 59               LD   SP,STACK   
5283   CD 71 10               CALL   coldInit   
5286   CD 60 57               CALL   execStr   
5289   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
52AC   E1                     POP   HL   
52AD   E5                     PUSH   HL   
52AE   11 01 00               LD   DE,1   
52B1   B7                     OR   A   
52B2   ED 52                  SBC   HL,DE   
52B4   7D                     LD   A,L   
52B5   B4                     OR   H   
52B6   CA 2F 53               JP   Z,expectM_3191S176   
52B9   CD 3D 10               CALL   printStr   
52BC   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
52E5   CD 3D 10               CALL   printStr   
52E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52F7   21 01 00               LD   hl,1   
52FA   E5                     PUSH   hl   
52FB   E5                     PUSH   hl   
52FC   CD 3A 11               CALL   run   
52FF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5309   CD 3D 10               CALL   printStr   
530C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5319   E1                     POP   hl   
531A   E5                     PUSH   hl   
531B   E5                     PUSH   hl   
531C   CD 3A 11               CALL   run   
531F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
532E   76                     HALT      
532F                EXPECTM_3191S176:      
532F   E1                     POP   HL   
5330                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5330   31 00 59               LD   SP,STACK   
5333   CD 71 10               CALL   coldInit   
5336   CD 60 57               CALL   execStr   
5339   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
5369   E1                     POP   HL   
536A   E5                     PUSH   HL   
536B   11 02 00               LD   DE,2   
536E   B7                     OR   A   
536F   ED 52                  SBC   HL,DE   
5371   7D                     LD   A,L   
5372   B4                     OR   H   
5373   CA F9 53               JP   Z,expectM_3192S177   
5376   CD 3D 10               CALL   printStr   
5379   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
53AF   CD 3D 10               CALL   printStr   
53B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53C1   21 02 00               LD   hl,2   
53C4   E5                     PUSH   hl   
53C5   E5                     PUSH   hl   
53C6   CD 3A 11               CALL   run   
53C9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
53D3   CD 3D 10               CALL   printStr   
53D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53E3   E1                     POP   hl   
53E4   E5                     PUSH   hl   
53E5   E5                     PUSH   hl   
53E6   CD 3A 11               CALL   run   
53E9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
53F8   76                     HALT      
53F9                EXPECTM_3192S177:      
53F9   E1                     POP   HL   
53FA                          ;*Macro unroll:  test "'hello'/sl",5
53FA   31 00 59               LD   SP,STACK   
53FD   CD 71 10               CALL   coldInit   
5400   CD 60 57               CALL   execStr   
5403   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
540E   E1                     POP   HL   
540F   E5                     PUSH   HL   
5410   11 05 00               LD   DE,5   
5413   B7                     OR   A   
5414   ED 52                  SBC   HL,DE   
5416   7D                     LD   A,L   
5417   B4                     OR   H   
5418   CA 79 54               JP   Z,expectM_3193S178   
541B   CD 3D 10               CALL   printStr   
541E   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
542F   CD 3D 10               CALL   printStr   
5432   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5441   21 05 00               LD   hl,5   
5444   E5                     PUSH   hl   
5445   E5                     PUSH   hl   
5446   CD 3A 11               CALL   run   
5449   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5453   CD 3D 10               CALL   printStr   
5456   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5463   E1                     POP   hl   
5464   E5                     PUSH   hl   
5465   E5                     PUSH   hl   
5466   CD 3A 11               CALL   run   
5469   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5478   76                     HALT      
5479                EXPECTM_3193S178:      
5479   E1                     POP   HL   
547A                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
547A   31 00 59               LD   SP,STACK   
547D   CD 71 10               CALL   coldInit   
5480   CD 60 57               CALL   execStr   
5483   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
5496   E1                     POP   HL   
5497   E5                     PUSH   HL   
5498   11 00 00               LD   DE,false   
549B   B7                     OR   A   
549C   ED 52                  SBC   HL,DE   
549E   7D                     LD   A,L   
549F   B4                     OR   H   
54A0   CA 09 55               JP   Z,expectM_3194S179   
54A3   CD 3D 10               CALL   printStr   
54A6   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
54BF   CD 3D 10               CALL   printStr   
54C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54D1   21 00 00               LD   hl,false   
54D4   E5                     PUSH   hl   
54D5   E5                     PUSH   hl   
54D6   CD 3A 11               CALL   run   
54D9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
54E3   CD 3D 10               CALL   printStr   
54E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54F3   E1                     POP   hl   
54F4   E5                     PUSH   hl   
54F5   E5                     PUSH   hl   
54F6   CD 3A 11               CALL   run   
54F9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5508   76                     HALT      
5509                EXPECTM_3194S179:      
5509   E1                     POP   HL   
550A                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
550A   31 00 59               LD   SP,STACK   
550D   CD 71 10               CALL   coldInit   
5510   CD 60 57               CALL   execStr   
5513   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
5527   E1                     POP   HL   
5528   E5                     PUSH   HL   
5529   11 FF FF               LD   DE,true   
552C   B7                     OR   A   
552D   ED 52                  SBC   HL,DE   
552F   7D                     LD   A,L   
5530   B4                     OR   H   
5531   CA 9B 55               JP   Z,expectM_3195S180   
5534   CD 3D 10               CALL   printStr   
5537   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5551   CD 3D 10               CALL   printStr   
5554   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5563   21 FF FF               LD   hl,true   
5566   E5                     PUSH   hl   
5567   E5                     PUSH   hl   
5568   CD 3A 11               CALL   run   
556B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5575   CD 3D 10               CALL   printStr   
5578   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5585   E1                     POP   hl   
5586   E5                     PUSH   hl   
5587   E5                     PUSH   hl   
5588   CD 3A 11               CALL   run   
558B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
559A   76                     HALT      
559B                EXPECTM_3195S180:      
559B   E1                     POP   HL   
559C                          ;*Macro unroll:  test "[1 2 3]** + +", 6
559C   31 00 59               LD   SP,STACK   
559F   CD 71 10               CALL   coldInit   
55A2   CD 60 57               CALL   execStr   
55A5   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
55B3   E1                     POP   HL   
55B4   E5                     PUSH   HL   
55B5   11 06 00               LD   DE,6   
55B8   B7                     OR   A   
55B9   ED 52                  SBC   HL,DE   
55BB   7D                     LD   A,L   
55BC   B4                     OR   H   
55BD   CA 21 56               JP   Z,expectM_3196S181   
55C0   CD 3D 10               CALL   printStr   
55C3   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
55D7   CD 3D 10               CALL   printStr   
55DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55E9   21 06 00               LD   hl,6   
55EC   E5                     PUSH   hl   
55ED   E5                     PUSH   hl   
55EE   CD 3A 11               CALL   run   
55F1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
55FB   CD 3D 10               CALL   printStr   
55FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
560B   E1                     POP   hl   
560C   E5                     PUSH   hl   
560D   E5                     PUSH   hl   
560E   CD 3A 11               CALL   run   
5611   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5620   76                     HALT      
5621                EXPECTM_3196S181:      
5621   E1                     POP   HL   
5622                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
5622   31 00 59               LD   SP,STACK   
5625   CD 71 10               CALL   coldInit   
5628   CD 60 57               CALL   execStr   
562B   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
5643   E1                     POP   HL   
5644   E5                     PUSH   HL   
5645   11 63 00               LD   DE,$63   
5648   B7                     OR   A   
5649   ED 52                  SBC   HL,DE   
564B   7D                     LD   A,L   
564C   B4                     OR   H   
564D   CA BB 56               JP   Z,expectM_3197S182   
5650   CD 3D 10               CALL   printStr   
5653   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
5671   CD 3D 10               CALL   printStr   
5674   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5683   21 63 00               LD   hl,$63   
5686   E5                     PUSH   hl   
5687   E5                     PUSH   hl   
5688   CD 3A 11               CALL   run   
568B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5695   CD 3D 10               CALL   printStr   
5698   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56A5   E1                     POP   hl   
56A6   E5                     PUSH   hl   
56A7   E5                     PUSH   hl   
56A8   CD 3A 11               CALL   run   
56AB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
56BA   76                     HALT      
56BB                EXPECTM_3197S182:      
56BB   E1                     POP   HL   
56BC                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
56BC   31 00 59               LD   SP,STACK   
56BF   CD 71 10               CALL   coldInit   
56C2   CD 60 57               CALL   execStr   
56C5   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
56DD   E1                     POP   HL   
56DE   E5                     PUSH   HL   
56DF   11 02 00               LD   DE,2   
56E2   B7                     OR   A   
56E3   ED 52                  SBC   HL,DE   
56E5   7D                     LD   A,L   
56E6   B4                     OR   H   
56E7   CA 55 57               JP   Z,expectM_3198S183   
56EA   CD 3D 10               CALL   printStr   
56ED   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
570B   CD 3D 10               CALL   printStr   
570E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
571D   21 02 00               LD   hl,2   
5720   E5                     PUSH   hl   
5721   E5                     PUSH   hl   
5722   CD 3A 11               CALL   run   
5725   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
572F   CD 3D 10               CALL   printStr   
5732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
573F   E1                     POP   hl   
5740   E5                     PUSH   hl   
5741   E5                     PUSH   hl   
5742   CD 3A 11               CALL   run   
5745   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5754   76                     HALT      
5755                EXPECTM_3198S183:      
5755   E1                     POP   HL   
5756                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /mp \\a{%a.} /for", $1000
5756                             ; 
5756   CD 3D 10               CALL   printStr   
5759   44 6F 6E 65 21 00      .CSTR   "Done!"   
575F   76                     HALT      
5760                             ; executes a null teminated string (null executes exit_)
5760                             ; the string should be immedaitely following the call
5760                EXECSTR:      ; create a root stack frame
5760   C1                     POP   bc   ; bc = code*
5761   0B                     DEC   bc   ; dec to prepare for next routine
5762   11 00 00               LD   de,0   
5765   D5                     PUSH   de   ; push fake IP
5766   D5                     PUSH   de   ; push null arg_list*
5767   D5                     PUSH   de   ; push null first_arg*
5768   D5                     PUSH   de   ; push fake BP
5769   DD E9                  JP   (ix)   
576B                STKSIZE:   EQU   $100   ; Stack size
576B                TIBSIZE:   EQU   $100   ; 256 bytes
576B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
576B                          ALIGN   $100   
5800                          DS   STKSIZE   
5900                STACK:       
5900                          ALIGN   $100   
5900                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5A00                          ALIGN   $100   
5A00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5B00                          ALIGN   $100   
5B00                VARS:        
5B00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5BD0                RESTARTS:      
5BD0                RST08:    DS   2   
5BD2                RST10:    DS   2   
5BD4                RST18:    DS   2   
5BD6                RST20:    DS   2   
5BD8                RST28:    DS   2   
5BDA                RST30:    DS   2   ; 
5BDC                BAUD:     DS   2   ; 
5BDE                INTVEC:   DS   2   ; 
5BE0                NMIVEC:   DS   2   ; 
5BE2                GETCVEC:   DS   2   ; 
5BE4                PUTCVEC:   DS   2   ; 
5BE6                SYSVARS:      
5BE6                             ; initialised sys variables (preserved)
5BE6                VTIBPTR:   DS   2   
5BE8                VBUFPTR:   DS   2   
5BEA                VHEAPPTR:   DS   2   
5BEC                VRECURPTR:   DS   2   
5BEE                VDATAWIDTH:   DS   1   
5BEF                VNUMBASE:   DS   1   
5BF0                VHEXPREFIX:   DS   1   
5BF1                VECHO:    DS   1   
5BF2                VSTRMODE:   DS   1   
5BF3                          DS   1   
5BF4                          DS   1   
5BF5                          DS   1   
5BF6                          DS   1   
5BF7                          DS   1   
5BF8                             ; uninitialised sys variables (preserved)
5BF8                VPOINTER:   DS   2   ; 
5BFA                VREMAIN:   DS   2   ; 
5BFC                VSAVEDIP:   DS   2   ; 
5BFE                VSAVEDSP:   DS   2   ; 
5C00                VSAVEDNEXT:   DS   2   ; 
5C02                VSAVEDBP:   DS   2   ; 
5C04                             ; uninitialised sys variables (unpreserved)
5C04                VTEMP1:   DS   2   ; 
5C06                VTEMP2:   DS   2   ; 
5C08                VTEMP3:   DS   2   ; 
5C0A                          DS   2   ; 
5C0C                TBPTR:    DS   2   ; reserved for tests
5C0E                TITLEBUF:   DS   20   
5C22                HEAP:        
5C22                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5C22                             ; db "{"
5C22                             ; db    "[%b /tru] %L="                 ; init mutable L [index active]
5C22                             ; db    "\\kt{"
5C22                             ; db      "0%t!=/qit"                  ; break if type != 0
5C22                             ; db      "\\dt:a{"                   ; return talkback to receive data
5C22                             ; db        "%L1;!/qit"                ; if not active don't send
5C22                             ; db        "%L0; %a="                ; store current index in A
5C22                             ; db        "%s %L0; +="              ; inc value of index by step
5C22                             ; db        "1%t!=/qit"                ; break if type != 0
5C22                             ; db        "%a %e <"                 ; ifte: in range?
5C22                             ; db          "{%a 1}{/fal %L1;= 0 2}"  ; ifte: /tru index, /fal active = false, quit
5C22                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
5C22                             ; db      "} 0 %k^"                   ; init sink
5C22                             ; db    "}"
5C22                             ; db "}"
5C22                             ; db 0
5C22                             ; FUNC map, 0, "sf"                   ; map
5C22                             ; db "{"
5C22                             ; db    "\\kt{"
5C22                             ; db      "0%t!=/qit"                  ; break if type != 0
5C22                             ; db      "\\dt{"                     ; call source with tb
5C22                             ; db        "1%t=="                   ; ifte: type == 1 ?
5C22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5C22                             ; db        "? %t %k^"               ; ifte: send to sink
5C22                             ; db      "} 0 %s^"
5C22                             ; db    "}"
5C22                             ; db "}"
5C22                             ; db 0
5C22                             ; ; /ft filter
5C22                             ; ; src pred -- src1
5C22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5C22                             ; db "{"
5C22                             ; db    "[0]%T="
5C22                             ; db    "\\kt{"                       ; return talkback to receive data
5C22                             ; db      "\\dt{"                     ; call source with tb
5C22                             ; db        "["
5C22                             ; db          "{%d %T0;= /tru}"         ; case 0: store talkback in T[0], return true
5C22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5C22                             ; db          "{/tru}"                  ; case 2: return true
5C22                             ; db        "]%t;^"                   ; select on %t
5C22                             ; db        "{%d %t %k^}{0 1 %T0;^}"  ; ifte: true send d to sink, false send 1 to talkback
5C22                             ; db        "?"
5C22                             ; db      "} 0 %s^"
5C22                             ; db    "}"
5C22                             ; db "}"
5C22                             ; db 0
5C22                             ; FUNC forEach, 1, "spT"
5C22                             ; db "{"
5C22                             ; db    "[0]%T="
5C22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5C22                             ; db      "2%t==/qit"                    ; if type == 2 skip
5C22                             ; db      "0%t=="                   ; ifte: type = 0 ?
5C22                             ; db      "{%d %T0;=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5C22                             ; db      "?"                      ; ifte:
5C22                             ; db      "0 1 %T0;^"               ; 0 or 1: get next src data item
5C22                             ; db    "} 0 %s^"
5C22                             ; db "}"
5C22                             ; db 0
5C22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5C22                             ; db "{"                                  ; reducer: \\da00bbLi4u
5C22                             ; db    "[%i]%A="
5C22                             ; db    "\\kt{"                         ; return talkback to receive data
5C22                             ; db      "\\dt{"                         ; call source with tb
5C22                             ; db        "1%t=="                       ; ifte: type == 1 ?
5C22                             ; db        "{ %d %A0; %r^ %A0;= %A0;}{%d}"      ; ifte: reduce -> acc, acc or data
5C22                             ; db        "? %t %k^"                    ; ifte: send to sink
5C22                             ; db      "} 0 %s^"
5C22                             ; db    "}"
5C22                             ; db "}"
5C22                             ; db 0
5C22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2575 IN MAIN.asm
                    > USED AT LINE 2659 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2563 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046F DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048F DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0491 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A1 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A2 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A8 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B4 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BF DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CE DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D7 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0550 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_F_:         055B DEFINED AT LINE 841 IN MAIN.asm
COMMAND_H_:         0586 DEFINED AT LINE 864 IN MAIN.asm
COMMAND_I_:         0591 DEFINED AT LINE 872 IN MAIN.asm
COMMAND_M_:         059C DEFINED AT LINE 879 IN MAIN.asm
COMAND_O_:          05A7 DEFINED AT LINE 886 IN MAIN.asm
COMMAND_P_:         05B3 DEFINED AT LINE 893 IN MAIN.asm
COMMAND_Q_:         05BA DEFINED AT LINE 899 IN MAIN.asm
COMMAND_R_:         05C5 DEFINED AT LINE 906 IN MAIN.asm
COMMAND_S_:         05D8 DEFINED AT LINE 917 IN MAIN.asm
COMAND_T_:          05DA DEFINED AT LINE 920 IN MAIN.asm
COMMAND_V_:         05DC DEFINED AT LINE 923 IN MAIN.asm
COMMAND_W_:         05DE DEFINED AT LINE 926 IN MAIN.asm
COMMAND_X_:         05E0 DEFINED AT LINE 929 IN MAIN.asm
COMMAND_DEFAULT_:   05E2 DEFINED AT LINE 932 IN MAIN.asm
COMMAND_S:          05E4 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
COMMAND_T:          0607 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
COMMAND_V:          0612 DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
COMMAND_W:          0639 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
COMMAND_X:          0648 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
COMMAND_DEFAULT:    0653 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
DIV:                065A DEFINED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
DIV2:               0664 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
ABSOLUTE:           0675 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          0680 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
ADDROF:             0683 DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            0689 DEFINED AT LINE 1050 IN MAIN.asm
ARRAYLENGTH:        068B DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0691 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
ARRAYSIZE:          0694 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
PERFORMM_1548S1069: 069B DEFINED AT LINE 45
                    > USED AT LINE 43
WHILE:              06A8 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
WHILE1:             06AF DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
BYTEMODE:           06C2 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BYTEMODE1:          06C4 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
COMMENT:            06C9 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
CONSTHEAPSTART:     06D2 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
CONSTTIBSTART:      06D8 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
CONSTBUFSTART:      06DE DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
DECBASE:            06E4 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
DECBASE1:           06E6 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
HEXBASE:            06EB DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
ERROR1:             06F0 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
INPUT:              06F6 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
OUTPUT:             0701 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
QUIT:               070A DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
QUIT1:              0711 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
RECUR:              0714 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
REMAIN:             071A DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
SELECT:             0720 DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
SELECT1:            072B DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
SELECT1A:           073C DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
SELECT1B:           073D DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
SELECT2:            0740 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
STRINGBEGIN:        0747 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
STRINGEND:          074F DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
STRINGEND1:         0776 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
STRINGLENGTH:       077E DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      0784 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
STRINGLENGTH2:      0786 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGLENGTH3:      078A DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
STRINGSIZE:         078D DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
PERFORMM_1728S1268: 0794 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0799 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGCOMPARE1:     079B DEFINED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
STRINGCOMPARE2:     07A6 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
STRINGCOMPARE3:     07AB DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
STRINGCOMPARE4:     07AE DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
VARBUFPTR:          07B1 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
VARECHO:            07B7 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
VARHEAPPTR:         07BD DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
VARTIBPTR:          07C3 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
VARHEXPREFIX:       07C9 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
WORDMODE:           07CF DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
XOR:                07D4 DEFINED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
XOR1:               07D5 DEFINED AT LINE 1325 IN MAIN.asm
RANGESRC:           07DF DEFINED AT LINE 32
                    > USED AT LINE 913 IN MAIN.asm
RANGESRCM_1791S1341: 07EE DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0878 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1810S1361: 0885 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08FF DEFINED AT LINE 32
                    > USED AT LINE 949 IN MAIN.asm
STRINGITERM_1829S1381: 090C DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                098E DEFINED AT LINE 32
                    > USED AT LINE 882 IN MAIN.asm
MAPM_1849S1403:     099B DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09D0 DEFINED AT LINE 32
                    > USED AT LINE 852 IN MAIN.asm
FILTERM_1863S1418:  09DE DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A31 DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
FOLDM_1882S1438:    0A40 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A82 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
FOREACHM_1896S1453: 0A90 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0ACE DEFINED AT LINE 32
                    > USED AT LINE 850 IN MAIN.asm
FUNCSRCM_1910S1468: 0ADA DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B09 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1920S1479: 0B17 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B52 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B61 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
READSTRING:         0B6A DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B6F DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
READSTRING2:        0B83 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
READNUMBER:         0B8C DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PERFORMM_1964S1528: 0B95 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0BB3 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
PERFORMM_1981S1545: 0BBA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BBD DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
PERFORMM_1985S1549: 0BC4 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BC5 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
TILDE:              0BCB DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BCB DEFINED AT LINE 1559 IN MAIN.asm
DOLLAR:             0BD5 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BD5 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BD8 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
HEXNUM2:            0BE0 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
QUESTION:           0BF2 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BF2 DEFINED AT LINE 1595 IN MAIN.asm
QUOTE:              0BFF DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BFF DEFINED AT LINE 1609 IN MAIN.asm
STRING1:            0C08 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
STRING2:            0C0B DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
STRING3:            0C11 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
PERCENT:            0C19 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0C19 DEFINED AT LINE 1636 IN MAIN.asm
ARG0:               0C35 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
ARG0A:              0C3E DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
ARG1:               0C43 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
ARG1A:              0C4B DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
NUM:                0C4E DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C57 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
NUM1:               0C58 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
NUM2:               0C70 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
NUM3:               0C7B DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
RBRACE:             0C7E DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C7E DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
BLOCKEND1:          0CB0 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
BLOCKEND2:          0CBC DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
BLOCKEND3:          0CCE DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
BLOCKEND4:          0CE2 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
GOBLOCK:            0CEB DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0D10 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
GOBLOCK3:           0D1A DEFINED AT LINE 1799 IN MAIN.asm
GOFUNC:             0D1E DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D37 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
GOFUNC2:            0D3D DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
GOFUNC3:            0D48 DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
GOFUNC4:            0D60 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
GOFUNC5:            0D63 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
GOFUNC6:            0D66 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
GOFUNC7:            0D69 DEFINED AT LINE 1862 IN MAIN.asm
GOFUNC8:            0D6D DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
ASSIGN:             0D78 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D7A DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D7E DEFINED AT LINE 1884 IN MAIN.asm
ASSIGN2:            0D87 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
EQUALS:             0D89 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D90 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D97 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D9C DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0DA1 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
TRUE1:              0DA4 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
NULL1:              0DAA DEFINED AT LINE 1929 IN MAIN.asm
FALSE1:             0DAA DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
SPREAD:             0DB0 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DBD DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
SPREAD2:            0DC8 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
SPREAD3:            0DCA DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
SHIFTLEFT:          0DD4 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DDE DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
SHIFTLEFT3:         0DE6 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
SHIFTLEFT4:         0DE7 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
SHIFTRIGHT:         0DF0 DEFINED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0DFA DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
SHIFTRIGHT3:        0E02 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
SHIFTRIGHT4:        0E06 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
DIVIDE:             0E0F DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
DIVIDE1:            0E14 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
DIVIDE2:            0E21 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
DIVIDE3:            0E22 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
DOTNEXT:            0E28 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E30 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
PARSEARGS:          0E42 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E4C DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
PARSEARGS1A:        0E54 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEARGS2:         0E5C DEFINED AT LINE 2070 IN MAIN.asm
PARSEARGS3:         0E64 DEFINED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
PARSEARGS4:         0E67 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
PARSEARGS5:         0E6D DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
PARSEBLOCK:         0E78 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E7C DEFINED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
PARSEBLOCK2:        0E95 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
PARSEBLOCK3:        0E9B DEFINED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
PARSEBLOCK4:        0EB5 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
PARSEBLOCK5:        0EB8 DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
PARSEBLOCK6:        0EE3 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
CREATEFUNC:         0EE7 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0F06 DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CREATEFUNC1:        0F1E DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
CREATEFUNC2:        0F31 DEFINED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
CREATEFUNC2A:       0F50 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
CREATEFUNC3:        0F5F DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
CREATEFUNC4:        0F6A DEFINED AT LINE 2264 IN MAIN.asm
CREATEFUNC5:        0F6B DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
VARIABLE:           0F89 DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
CONSTANT:           0F98 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
CHARTABLE:          0F9B DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0FA5 DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
CHARTABLE2:         0FAF DEFINED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
CHARTABLE3:         0FB1 DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
CMDTABLE:           0FB6 DEFINED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
CMDTABLE1:          0FB7 DEFINED AT LINE 2341 IN MAIN.asm
CMDTABLE2:          0FB7 DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
CMDTABLE3:          0FC4 DEFINED AT LINE 2354 IN MAIN.asm
CMDTABLE4:          0FCD DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
CMDTABLE5:          0FD2 DEFINED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
GETVARADDR:         0FD7 DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
GETVARADDR1:        0FE9 DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
PUTSTR0:            0FEE DEFINED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
PUTSTR:             0FF2 DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
NESTING:            0FF7 DEFINED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
NESTING0:           1005 DEFINED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
NESTING1A:          100C DEFINED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
NESTING1:           100F DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
NESTING2:           101E DEFINED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
NESTING3:           1020 DEFINED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
NESTING4:           102B DEFINED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
PROMPT:             102D DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
CRLF:               1036 DEFINED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2589 IN MAIN.asm
PRINTSTR:           103D DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2654 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 189
INIT:               1044 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
INIT1:              104C DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
WARMINIT:           1054 DEFINED AT LINE 2480 IN MAIN.asm
COLDBOOT0:          1067 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
COLDINIT:           1071 DEFINED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1082 DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
COLDSTART:          108F DEFINED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
START:              1098 DEFINED AT LINE 2515 IN MAIN.asm
START1:             109E DEFINED AT LINE 2518 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
INTERPRET:          10A4 DEFINED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
INTERPRET2:         10B0 DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
                    > USED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2669 IN MAIN.asm
INTERPRET3:         10B8 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
INTERPRET4:         10BE DEFINED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
INTERPRET5:         10C3 DEFINED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2577 IN MAIN.asm
                    > USED AT LINE 2592 IN MAIN.asm
INTERPRET5A:        10DC DEFINED AT LINE 2566 IN MAIN.asm
INTERPRET6:         10DE DEFINED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 2555 IN MAIN.asm
INTERPRET7:         10EC DEFINED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET8:         10FF DEFINED AT LINE 2594 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
NEXT:               111A DEFINED AT LINE 2607 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2611 IN MAIN.asm
NEXT0:              112E DEFINED AT LINE 2621 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
NEXT1:              112F DEFINED AT LINE 2623 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
EXIT:               1136 DEFINED AT LINE 2628 IN MAIN.asm
                    > USED AT LINE 2625 IN MAIN.asm
RUN:                113A DEFINED AT LINE 2633 IN MAIN.asm
                    > USED AT LINE 2640 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              113E DEFINED AT LINE 2638 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
BACKSPACE_:         1150 DEFINED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
REEDIT_:            1160 DEFINED AT LINE 2653 IN MAIN.asm
                    > USED AT LINE 2564 IN MAIN.asm
REEDIT0:            116C DEFINED AT LINE 2658 IN MAIN.asm
                    > USED AT LINE 2664 IN MAIN.asm
REEDIT1:            1170 DEFINED AT LINE 2661 IN MAIN.asm
                    > USED AT LINE 2657 IN MAIN.asm
F1:                 1180 DEFINED AT LINE 32
                    > USED AT LINE 854 IN MAIN.asm
F1M_3037S12:        118B DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 118C DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
F2M_3039S15:        1197 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1198 DEFINED AT LINE 32
                    > USED AT LINE 858 IN MAIN.asm
F3M_3041S18:        11A3 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 11A4 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
F4M_3043S21:        11AF DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3047S27:    129B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S52:    130F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S53:    1383 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S54:    13F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S55:    145F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S56:    14CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S57:    153B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S58:    15AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S59:    161D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S60:    168D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S61:    1705 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S62:    1775 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S63:    17E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S64:    1857 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S65:    18C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S66:    1941 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S67:    19B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S68:    1A2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S69:    1AA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S70:    1B27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S71:    1BA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S72:    1C19 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S73:    1C97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S74:    1D11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S75:    1D87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S76:    1DFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S77:    1E7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S78:    1EF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S79:    1F67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S80:    1FE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S81:    206F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S82:    20E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S83:    2153 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S84:    21C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S85:    223B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S86:    22B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S87:    232F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S88:    23A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S89:    2429 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S90:    24AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S91:    2531 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S92:    25B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S93:    2641 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S94:    26CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S95:    2755 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S96:    27DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S97:    2867 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S98:    28EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S99:    297F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S100:   29F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S101:   2A7D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S102:   2B03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S103:   2B8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S104:   2C0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S105:   2C81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S106:   2CF9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S107:   2D71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S108:   2DE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S109:   2E5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S110:   2ED3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S111:   2F49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S112:   2FBF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S113:   3035 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S114:   30AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S115:   3121 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S116:   3199 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S117:   3211 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S118:   3289 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S119:   3303 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S120:   337D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S121:   33F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S122:   3465 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S123:   34DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S124:   355F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S125:   35EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S126:   367F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S127:   36F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S128:   376D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S129:   37EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S130:   386D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S131:   38EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S132:   3973 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S133:   39FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S134:   3A8D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S135:   3B21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S136:   3BA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S137:   3C33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S138:   3CC1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S139:   3D51 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S140:   3DDF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S141:   3E7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S142:   3F05 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S143:   3F9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S144:   4037 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S145:   40D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S146:   417B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S147:   4223 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S148:   42A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S149:   4339 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S150:   43C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S151:   4453 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S152:   44E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S153:   4585 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S154:   462D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S155:   46D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S156:   4771 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S157:   4813 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S158:   48CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S159:   497D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S160:   4A3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S161:   4B01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S162:   4B99 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S163:   4C31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S164:   4CB3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S165:   4D35 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S166:   4DB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S167:   4E39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S168:   4EB3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S169:   4F2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S170:   4FA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S171:   5021 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S172:   50A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S173:   5137 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S174:   51CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S175:   527F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S176:   532F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S177:   53F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S178:   5479 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S179:   5509 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S180:   559B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S181:   5621 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S182:   56BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S183:   5755 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5760 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5900 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5900 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
                    > USED AT LINE 2581 IN MAIN.asm
                    > USED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
                    > USED AT LINE 2656 IN MAIN.asm
                    > USED AT LINE 2665 IN MAIN.asm
BUFFER:             5A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
VARS:               5B00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5BD0 DEFINED AT LINE 18 IN ram.asm
RST08:              5BD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5BD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5BD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5BD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5BD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5BDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5BDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5BDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5BE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5BE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5BE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5BE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2495 IN MAIN.asm
VTIBPTR:            5BE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
VBUFPTR:            5BE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
VHEAPPTR:           5BEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
VRECURPTR:          5BEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
VDATAWIDTH:         5BEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
VNUMBASE:           5BEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
VHEXPREFIX:         5BF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
VECHO:              5BF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
VSTRMODE:           5BF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
VPOINTER:           5BF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
VREMAIN:            5BFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
VSAVEDIP:           5BFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2601 IN MAIN.asm
VSAVEDSP:           5BFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2602 IN MAIN.asm
VSAVEDNEXT:         5C00 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2603 IN MAIN.asm
VSAVEDBP:           5C02 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
VTEMP1:             5C04 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
VTEMP2:             5C06 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
VTEMP3:             5C08 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
TBPTR:              5C0C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           5C0E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
HEAP:               5C22 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
