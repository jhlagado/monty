0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hx./dc"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hx./dc `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5A               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5A               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5A               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5A               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5A               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5A               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5A               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 58               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5A               LD   (RST08),HL   
0094   22 D2 5A               LD   (RST10),HL   
0097   22 D4 5A               LD   (RST18),HL   
009A   22 D6 5A               LD   (RST20),HL   
009D   22 D8 5A               LD   (RST28),HL   
00A0   22 DA 5A               LD   (RST30),HL   
00A3   22 DE 5A               LD   (INTVEC),HL   
00A6   22 E0 5A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 58                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 59                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 5B                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 2A 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 AD 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 D7 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 F1 0B               JP   percent   
0215                QUESTION_:      
0215   C3 CA 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 26 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 68 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 50 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 61 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA C8 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA AC 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 6F 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 74 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5A               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 61 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 26 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 52 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 52 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 88 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 52 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 52 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5A                  LD   h,msb(VARS)   
0309   22 F8 5A               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 1A 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 15 11               JP   error   
0343                LAMBDA2:      
0343   CD 50 0E               CALL   parseBlock   
0346   CD BF 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5A               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5A               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5A            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5A               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA C3 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 F6 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA C3 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5A            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5A            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 00 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 50 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 56 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 A3 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5A            LD   de,(vPointer)   
03ED   21 F8 5A               LD   hl,vPointer   
03F0   C3 61 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 8D 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   E1 0A                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 5A            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 5A            LD   (vBufPtr),de   ; save buffer*'
041F   C3 00 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 5A            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 5A            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 00 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 5A               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA A8 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 5A            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 5A               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 5F 04               CALL   printDec2   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 5A            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 00 0E               JP   dotNext   
045F                             ; hl = value
045F                             ; de' = buffer*
045F                             ; a, bc, de, hl destroyed
045F                PRINTDEC2:      
045F   CB 7C                  BIT   7,h   
0461   28 0C                  JR   z,printDec3   
0463   D9                     EXX      
0464   3E 2D                  LD   a,"-"   
0466   12                     LD   (de),a   
0467   13                     INC   de   
0468   D9                     EXX      
0469   AF                     XOR   a   
046A   95                     SUB   l   
046B   6F                     LD   l,a   
046C   9F                     SBC   a,a   
046D   94                     SUB   h   
046E   67                     LD   h,a   
046F                PRINTDEC3:      
046F   0E 00                  LD   c,0   ; leading zeros flag = false
0471   11 F0 D8               LD   de,-10000   
0474   CD 8F 04               CALL   printDec4   
0477   11 18 FC               LD   de,-1000   
047A   CD 8F 04               CALL   printDec4   
047D   11 9C FF               LD   de,-100   
0480   CD 8F 04               CALL   printDec4   
0483   1E F6                  LD   e,-10   
0485   CD 8F 04               CALL   printDec4   
0488   0C                     INC   c   ; flag = true for at least digit
0489   1E FF                  LD   e,-1   
048B   CD 8F 04               CALL   printDec4   
048E   C9                     RET      
048F                PRINTDEC4:      
048F   06 2F                  LD   b,"0"-1   
0491                PRINTDEC5:      
0491   04                     INC   b   
0492   19                     ADD   hl,de   
0493   38 FC                  JR   c,printDec5   
0495   ED 52                  SBC   hl,de   
0497   3E 30                  LD   a,"0"   
0499   B8                     CP   b   
049A   20 05                  JR   nz,printDec6   
049C   AF                     XOR   a   
049D   B1                     OR   c   
049E   C8                     RET   z   
049F   18 01                  JR   printDec7   
04A1                PRINTDEC6:      
04A1   0C                     INC   c   
04A2                PRINTDEC7:      
04A2   78                     LD   a,b   
04A3   D9                     EXX      
04A4   12                     LD   (de),a   
04A5   13                     INC   de   
04A6   D9                     EXX      
04A7   C9                     RET      
04A8                             ; buffer hex                    37
04A8                             ; value --
04A8                PRINTHEX:      
04A8   ED 5B E8 5A            LD   de,(vBufPtr)   
04AC   3A F0 5A               LD   a,(vHexPrefix)   ; "$"
04AF   B7                     OR   a   ; skip if null
04B0   28 02                  JR   z,printHex1   
04B2   12                     LD   (de),a   
04B3   13                     INC   de   ; string*++,
04B4                PRINTHEX1:      
04B4   E1                     POP   hl   ; hl = value
04B5   3A EE 5A               LD   a,(vDataWidth)   
04B8   3D                     DEC   a   
04B9   28 04                  JR   z,printHex2   
04BB   7C                     LD   a,h   
04BC   CD CE 04               CALL   printHex3   
04BF                PRINTHEX2:      
04BF   7D                     LD   a,l   
04C0   CD CE 04               CALL   printHex3   
04C3   3E 20                  LD   a," "   ; append space to buffer
04C5   12                     LD   (de),a   
04C6   13                     INC   de   ; string*++,
04C7   ED 53 E8 5A            LD   (vBufPtr),de   
04CB   C3 00 0E               JP   dotNext   
04CE                PRINTHEX3:      
04CE   F5                     PUSH   af   
04CF   1F                     RRA      
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   CD D7 04               CALL   printHex4   
04D6   F1                     POP   af   
04D7                PRINTHEX4:      
04D7   E6 0F                  AND   0x0F   
04D9   C6 90                  ADD   a,0x90   
04DB   27                     DAA      
04DC   CE 40                  ADC   a,0x40   
04DE   27                     DAA      
04DF   12                     LD   (de),a   
04E0   13                     INC   de   ; string*++,
04E1   C9                     RET      
04E2                             ;********************** PAGE 4 END *********************************************
04E2                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA BC 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 73 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   50                     DB   lsb(command_d_)   
050F   00                     DB   0   
0510   5B                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   82                     DB   lsb(command_h_)   
0513   8D                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   98                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   A3                     DB   lsb(comand_o_)   
051A   AA                     DB   lsb(command_p_)   
051B   B1                     DB   lsb(command_q_)   
051C   BC                     DB   lsb(command_r_)   
051D   CF                     DB   lsb(command_s_)   
051E   D1                     DB   lsb(comand_t_)   
051F   00                     DB   0   
0520   D3                     DB   lsb(command_v_)   
0521   D5                     DB   lsb(command_w_)   
0522   D7                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   D9                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD 8D 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   68 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   76 06                  DW   addrOf   
0531   69 00                  DB   "i",0   ; /ai array iterator
0533   64 08                  DW   arrayIter   
0535   6C 6E                  DB   "ln"   ; /al array length
0537   7E 06                  DW   arrayLength   
0539   73 00                  DB   "s",0   ; /as array size
053B   87 06                  DW   arraySize   
053D   00 00                  DW   0   
053F   E3 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD 8D 0F               CALL   cmdTable   
0544   62 00                  DB   "b",0   ; /bb bye bye cold boot
0546   66 10                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   B5 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   E3 06                  DW   error1   
0550                COMMAND_D_:      
0550   CD 8D 0F               CALL   cmdTable   
0553   63 00                  DB   "c",0   ; /dc decimal
0555   D7 06                  DW   decBase   
0557   00 00                  DW   0   
0559   E3 06                  DW   error1   
055B                COMMAND_F_:      
055B   CD 8D 0F               CALL   cmdTable   
055E   64 00                  DB   "d",0   ; /fd fold
0560   0A 0A                  DW   fold   
0562   65 00                  DB   "e",0   ; /fe forEach
0564   5B 0A                  DW   forEach   
0566   73 00                  DB   "s",0   ; /fs funcSrc
0568   A6 0A                  DW   funcSrc   
056A   74 00                  DB   "t",0   ; /ft filter
056C   AD 09                  DW   filter   
056E   31 00                  DB   "1",0   
0570   57 11                  DW   f1   
0572   32 00                  DB   "2",0   
0574   63 11                  DW   f2   
0576   33 00                  DB   "3",0   
0578   6F 11                  DW   f3   
057A   34 00                  DB   "4",0   
057C   7B 11                  DW   f4   
057E   00 00                  DW   0   
0580   82 0D                  DW   false1   
0582                COMMAND_H_:      
0582   CD 8D 0F               CALL   cmdTable   
0585   78 00                  DB   "x",0   ; /hx hex
0587   DE 06                  DW   hexBase   
0589   00 00                  DW   0   
058B   E3 06                  DW   error1   
058D                             ; 6
058D                COMMAND_I_:      
058D   CD 8D 0F               CALL   cmdTable   
0590   6E 00                  DB   "n",0   ; /in input
0592   E9 06                  DW   input   
0594   00 00                  DW   0   
0596   E3 06                  DW   error1   
0598                COMMAND_M_:      
0598   CD 8D 0F               CALL   cmdTable   
059B   70 00                  DB   "p",0   ; /mp map
059D   6C 09                  DW   map   
059F   00 00                  DW   0   
05A1   E3 06                  DW   error1   
05A3                COMAND_O_:      
05A3   CD 8D 0F               CALL   cmdTable   
05A6   00 00                  DW   0   
05A8   F4 06                  DW   output   
05AA                             ; 4
05AA                COMMAND_P_:      
05AA   CD 8D 0F               CALL   cmdTable   
05AD   00 00                  DW   0   
05AF   E3 06                  DW   error1   
05B1                             ; 6
05B1                COMMAND_Q_:      
05B1   CD 8D 0F               CALL   cmdTable   
05B4   74 00                  DB   "t",0   ; /qt quit
05B6   FD 06                  DW   quit   
05B8   00 00                  DW   0   
05BA   E3 06                  DW   error1   
05BC                COMMAND_R_:      
05BC   CD 8D 0F               CALL   cmdTable   
05BF   63 00                  DB   "c",0   ; /rc tail call optimisation
05C1   07 07                  DW   recur   
05C3   65 6D                  DB   "em"   ; /rem remainder
05C5   0D 07                  DW   remain   
05C7   67 00                  DB   "g",0   ; /rg range src
05C9   D2 07                  DW   rangeSrc   
05CB   00 00                  DW   0   
05CD   E3 06                  DW   error1   
05CF                COMMAND_S_:      
05CF   18 0A                  JR   command_s   
05D1                COMAND_T_:      
05D1   18 2B                  JR   command_t   
05D3                COMMAND_V_:      
05D3   18 30                  JR   command_v   
05D5                COMMAND_W_:      
05D5   18 55                  JR   command_w   
05D7                COMMAND_X_:      
05D7   18 62                  JR   command_x   
05D9                             ; 3
05D9                COMMAND_DEFAULT_:      
05D9   18 6B                  JR   command_default   
05DB                             ;********************** PAGE 5 END *********************************************
05DB                COMMAND_S:      
05DB   CD 8D 0F               CALL   cmdTable   
05DE   62 00                  DB   "b",0   
05E0   3A 07                  DW   stringBegin   
05E2   63 00                  DB   "c",0   
05E4   8C 07                  DW   stringCompare   
05E6   65 6C                  DB   "el"   
05E8   13 07                  DW   select   
05EA   65 00                  DB   "e",0   
05EC   42 07                  DW   stringEnd   
05EE   69 00                  DB   "i",0   
05F0   E4 08                  DW   stringIter   
05F2   6C 00                  DB   "l",0   
05F4   71 07                  DW   stringLength   
05F6   73 00                  DB   "s",0   
05F8   80 07                  DW   stringSize   
05FA   00 00                  DW   0   
05FC   E3 06                  DW   error1   
05FE                COMMAND_T:      
05FE   CD 8D 0F               CALL   cmdTable   
0601   00 00                  DW   0   
0603   7C 0D                  DW   true1   
0605                COMMAND_V:      
0605   CD 8D 0F               CALL   cmdTable   
0608   62 00                  DB   "b",0   
060A   A4 07                  DW   varBufPtr   
060C   65 00                  DB   "e",0   
060E   AA 07                  DW   varEcho   
0610   68 00                  DB   "h",0   
0612   B0 07                  DW   varHeapPtr   
0614   74 00                  DB   "t",0   
0616   B6 07                  DW   varTIBPtr   
0618   78 00                  DB   "x",0   
061A   BC 07                  DW   varHexPrefix   
061C   42 00                  DB   "B",0   
061E   D1 06                  DW   constBufStart   
0620   48 00                  DB   "H",0   
0622   C5 06                  DW   constHeapStart   
0624   54 00                  DB   "T",0   
0626   CB 06                  DW   constTIBStart   
0628   00 00                  DW   0   
062A   E3 06                  DW   error1   
062C                COMMAND_W:      
062C   CD 8D 0F               CALL   cmdTable   
062F   68 69                  DB   "hi"   ; /whi while true else break from loop
0631   9B 06                  DW   while   
0633   6D 00                  DB   "m",0   ; /wm word mode
0635   C2 07                  DW   wordMode   
0637   00 00                  DW   0   
0639   E3 06                  DW   error1   
063B                COMMAND_X:      
063B   CD 8D 0F               CALL   cmdTable   
063E   6F 72                  DB   "or"   ; /xor exclsuive or
0640   C7 07                  DW   xor   
0642   00 00                  DW   0   
0644   E3 06                  DW   error1   
0646                COMMAND_DEFAULT:      
0646   CD 8D 0F               CALL   cmdTable   
0649   00 00                  DW   0   
064B   4D 06                  DW   div   
064D                             ;                               32
064D                DIV:         
064D   E1                     POP   hl   ; hl = arg_b
064E   D1                     POP   de   ; de = arg_a
064F   03                     INC   bc   
0650   0A                     LD   a,(bc)   
0651   FE 3D                  CP   "="   
0653   28 02                  JR   z,div2   
0655   0B                     DEC   bc   ; /
0656   EB                     EX   de,hl   
0657                DIV2:        
0657   F5                     PUSH   af   ; preserve af, bc
0658   C5                     PUSH   bc   
0659   44 4D                  LD   bc,hl   
065B   CD E7 0D               CALL   divide   
065E   EB                     EX   de,hl   
065F   ED 53 FA 5A            LD   (vRemain),de   
0663   C1                     POP   bc   ; restore
0664   F1                     POP   af   
0665   C3 9D 02               JP   sub3   
0668                             ; /abs absolute
0668                             ; num -- num
0668                ABSOLUTE:      
0668   E1                     POP   hl   
0669   CB 7C                  BIT   7,h   
066B   28 06                  JR   z,absolute1   
066D   AF                     XOR   a   
066E   95                     SUB   l   
066F   6F                     LD   l,a   
0670   9F                     SBC   a,a   
0671   94                     SUB   h   
0672   67                     LD   h,a   
0673                ABSOLUTE1:      
0673   E5                     PUSH   hl   
0674   DD E9                  JP   (ix)   
0676                             ; /adr addrOf
0676                             ; char -- addr
0676                ADDROF:      
0676   E1                     POP   hl   ; a = char
0677   7D                     LD   a,l   
0678   CD AE 0F               CALL   getVarAddr   
067B   E5                     PUSH   hl   
067C                ADDROF2:      
067C   DD E9                  JP   (ix)   
067E                             ; /al length of an array, num elements
067E                             ; array* -- num
067E                ARRAYLENGTH:      
067E   E1                     POP   hl   
067F   2B                     DEC   hl   ; msb size
0680   56                     LD   d,(hl)   
0681   2B                     DEC   hl   ; lsb size
0682   5E                     LD   e,(hl)   
0683   EB                     EX   de,hl   
0684                ARRAYLENGTH1:      
0684   E5                     PUSH   hl   
0685   DD E9                  JP   (ix)   
0687                             ; /as size in bytes of an array, based on current data width
0687                             ; array* -- num
0687                ARRAYSIZE:      
0687                          ;*Macro unroll:  PERFORM arrayLength
0687   DD 21 8E 06            LD   ix,performM_1542S1063   
068B   C3 7E 06               JP   arrayLength   
068E                PERFORMM_1542S1063:      
068E   E1                     POP   hl   
068F   3A EE 5A               LD   a,(vDataWidth)   
0692   3D                     DEC   a   
0693   28 EF                  JR   z,arrayLength1   
0695   CB 3C                  SRL   h   
0697   CB 1D                  RR   l   
0699   18 E9                  JR   arrayLength1   
069B                             ; 13
069B                             ; /whi while true else break from loop
069B                             ; --
069B                WHILE:       
069B   E1                     POP   hl   ; hl = condition, break if false
069C   7D                     LD   a,l   
069D   B4                     OR   h   
069E   28 02                  JR   z,while1   
06A0   DD E9                  JP   (ix)   
06A2                WHILE1:      
06A2   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06A4   FD 54                  LD   d,iyh   
06A6   21 08 00               LD   hl,8   
06A9   19                     ADD   hl,de   
06AA   23                     INC   hl   
06AB   23                     INC   hl   
06AC   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06AF   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06B2   C3 56 0C               JP   blockEnd   
06B5                             ; /b
06B5                BYTEMODE:      
06B5   3E 01                  LD   a,1   
06B7                BYTEMODE1:      
06B7   32 EE 5A               LD   (vDataWidth),a   
06BA   DD E9                  JP   (ix)   
06BC                             ; //
06BC                COMMENT:      
06BC   03                     INC   bc   ; point to next char
06BD   0A                     LD   a,(bc)   
06BE   FE 20                  CP   " "   ; terminate on any char less than SP
06C0   30 FA                  JR   nc,comment   
06C2   0B                     DEC   bc   
06C3   DD E9                  JP   (ix)   
06C5                CONSTHEAPSTART:      
06C5   11 22 5B               LD   de,HEAP   
06C8   C3 70 0F               JP   constant   
06CB                CONSTTIBSTART:      
06CB   11 00 58               LD   de,TIB   
06CE   C3 70 0F               JP   constant   
06D1                CONSTBUFSTART:      
06D1   11 00 59               LD   de,BUFFER   
06D4   C3 70 0F               JP   constant   
06D7                DECBASE:      
06D7   3E 0A                  LD   a,10   
06D9                DECBASE1:      
06D9   32 EF 5A               LD   (vNumBase),a   
06DC   DD E9                  JP   (ix)   
06DE                HEXBASE:      
06DE   3E 10                  LD   a,16   
06E0   C3 D9 06               JP   decBase1   
06E3                ERROR1:      
06E3   21 01 00               LD   hl,1   ; error 1: unknown command
06E6   C3 15 11               JP   error   
06E9                             ; Z80 port input
06E9                             ; port -- value
06E9                INPUT:       
06E9   E1                     POP   hl   
06EA   59                     LD   e,c   ; save IP
06EB   4D                     LD   c,l   
06EC   ED 68                  IN   l,(c)   
06EE   26 00                  LD   h,0   
06F0   4B                     LD   c,e   ; restore IP
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; /o Z80 port output
06F4                             ; value port --
06F4                OUTPUT:      
06F4   E1                     POP   hl   
06F5   59                     LD   e,c   ; save IP
06F6   4D                     LD   c,l   
06F7   E1                     POP   hl   
06F8   ED 69                  OUT   (c),l   
06FA   4B                     LD   c,e   ; restore IP
06FB   DD E9                  JP   (ix)   
06FD                             ; /qt
06FD                             ; bool --
06FD                QUIT:        
06FD   E1                     POP   hl   ; hl = condition, exit if true
06FE   7D                     LD   a,l   
06FF   B4                     OR   h   
0700   20 02                  JR   nz,quit1   
0702   DD E9                  JP   (ix)   
0704                QUIT1:       
0704   C3 56 0C               JP   blockEnd   
0707                RECUR:       
0707   E1                     POP   hl   
0708   22 EC 5A               LD   (vRecurPtr),hl   
070B   DD E9                  JP   (ix)   
070D                REMAIN:      
070D   2A FA 5A               LD   hl,(vRemain)   
0710   E5                     PUSH   hl   
0711   DD E9                  JP   (ix)   
0713                             ; bool cases* --
0713                SELECT:      
0713   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0714   D1                     POP   de   ; de = select key
0715   C5                     PUSH   bc   ; save IP
0716   2B                     DEC   hl   ; bc = array length
0717   46                     LD   b,(hl)   
0718   2B                     DEC   hl   
0719   4E                     LD   c,(hl)   
071A   23                     INC   hl   
071B   23                     INC   hl   
071C   18 15                  JR   select2   
071E                SELECT1:      
071E   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
071F   BB                     CP   e   
0720   23                     INC   hl   ; hl++, flags are unaltered
0721   20 0C                  JR   nz,select1a   
0723   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0724   BA                     CP   d   
0725   23                     INC   hl   ; hl++, flags are unaltered
0726   20 08                  JR   nz,select1b   
0728   5E                     LD   e,(hl)   
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   C1                     POP   bc   
072C   C3 A0 03               JP   go1   
072F                SELECT1A:      
072F   23                     INC   hl   
0730                SELECT1B:      
0730   23                     INC   hl   
0731   23                     INC   hl   
0732   0B                     DEC   bc   
0733                SELECT2:      
0733   79                     LD   a,c   
0734   B0                     OR   b   
0735   20 E7                  JR   nz,select1   
0737   C1                     POP   bc   
0738   DD E9                  JP   (ix)   
073A                STRINGBEGIN:      
073A   21 FF FF               LD   hl,TRUE   ; string mode = true
073D   22 F2 5A               LD   (vStrMode),hl   
0740   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0742                STRINGEND:      
0742   21 00 00               LD   hl,FALSE   ; string mode = false
0745   22 F2 5A               LD   (vStrMode),hl   
0748   2A E8 5A               LD   hl,(vBufPtr)   ; append NUL to string
074B   AF                     XOR   a   
074C   77                     LD   (hl),a   
074D   23                     INC   hl   ; hl = string_end*
074E   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0752   11 00 59               LD   de,BUFFER   ; de = string*
0755   B7                     OR   a   ; bc = size
0756   ED 52                  SBC   hl,de   
0758   44 4D                  LD   bc,hl   
075A   2A EA 5A               LD   hl,(vHeapPtr)   ; hl = hstring*
075D   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
075E   D5                     PUSH   de   ; return hstring*
075F   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0761   ED 53 EA 5A            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0765   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
0769                STRINGEND1:      
0769   21 00 59               LD   hl,BUFFER   ; reset vBufPtr
076C   22 E8 5A               LD   (vBufPtr),hl   
076F   DD E9                  JP   (ix)   
0771                STRINGLENGTH:      
0771   D1                     POP   de   
0772   21 00 00               LD   hl,0   
0775   18 02                  JR   stringLength2   
0777                STRINGLENGTH1:      
0777   13                     INC   de   
0778   23                     INC   hl   
0779                STRINGLENGTH2:      
0779   1A                     LD   a,(de)   
077A   B7                     OR   a   
077B   20 FA                  JR   nz,stringLength1   
077D                STRINGLENGTH3:      
077D   E5                     PUSH   hl   
077E   DD E9                  JP   (ix)   
0780                STRINGSIZE:      
0780                          ;*Macro unroll:  PERFORM stringLength
0780   DD 21 87 07            LD   ix,performM_1721S1261   
0784   C3 71 07               JP   stringLength   
0787                PERFORMM_1721S1261:      
0787   E1                     POP   hl   
0788   23                     INC   hl   
0789   C3 7D 07               JP   stringLength3   
078C                             ; /sc string compare
078C                             ; string1* string2* -- bool
078C                             ; Compares two null terminated strings.
078C                STRINGCOMPARE:      
078C   D1                     POP   de   
078D   E1                     POP   hl   
078E                STRINGCOMPARE1:      
078E   1A                     LD   a,(de)   
078F   BE                     CP   (hl)   
0790   20 07                  JR   nz,stringCompare2   
0792   B7                     OR   a   
0793   28 09                  JR   z,stringCompare3   
0795   13                     INC   de   
0796   23                     INC   hl   
0797   18 F5                  JR   stringCompare1   
0799                STRINGCOMPARE2:      
0799   21 00 00               LD   hl,FALSE   
079C   18 03                  JR   stringCompare4   
079E                STRINGCOMPARE3:      
079E   21 FF FF               LD   hl,TRUE   
07A1                STRINGCOMPARE4:      
07A1   E5                     PUSH   hl   
07A2   DD E9                  JP   (ix)   
07A4                VARBUFPTR:      
07A4   21 E8 5A               LD   hl,vBufPtr   
07A7   C3 61 0F               JP   variable   
07AA                VARECHO:      
07AA   21 F1 5A               LD   hl,vEcho   
07AD   C3 61 0F               JP   variable   
07B0                VARHEAPPTR:      
07B0   21 EA 5A               LD   hl,vHeapPtr   
07B3   C3 61 0F               JP   variable   
07B6                VARTIBPTR:      
07B6   21 E6 5A               LD   hl,vTIBPtr   
07B9   C3 61 0F               JP   variable   
07BC                VARHEXPREFIX:      
07BC   21 F0 5A               LD   hl,vHexPrefix   
07BF   C3 61 0F               JP   variable   
07C2                             ; /wm
07C2                WORDMODE:      
07C2   3E 02                  LD   a,2   
07C4   C3 B7 06               JP   byteMode1   
07C7                             ; /xor
07C7                XOR:         
07C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07C8                XOR1:        
07C8   E1                     POP   hl   
07C9   7B                     LD   a,e   
07CA   AD                     XOR   l   
07CB   6F                     LD   l,a   
07CC   7A                     LD   a,d   
07CD   AC                     XOR   h   
07CE   67                     LD   h,a   
07CF   C3 D8 02               JP   add3   
07D2                             ;*******************************************************************
07D2                             ; Monty implementations
07D2                             ;*******************************************************************
07D2                             ; /rg rangeSrc
07D2                             ; begin end step -- src
07D2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07D2                RANGESRC:      ; range source: begin, end, step, local: L
07D2   CD 9F 03               CALL   go   
07D5   00 00                  DW   NUL   
07D7   E1 07                  DW   rangeSrcM_1784S1334   
07D9   DB 07                  DW   $+2   
07DB   01                     DB   1   
07DC   04 62 65 73 4C         .PSTR   "besL"   
07E1                RANGESRCM_1784S1334:      
07E1   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07E2   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0806   5C 6B 74 7B            DB   "\\kt{"   
080A   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0812   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0818   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
0820   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0828   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0832   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
083A   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
083F   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1;= 0 2}"   ; ifte: /t index, /f active = false, quit
0853   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
085A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0861   7D                     DB   "}"   
0862   7D                     DB   "}"   
0863   00                     DB   0   
0864                             ; /ai arrayIter
0864                             ; array* -- src
0864                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0864                ARRAYITER:      
0864   CD 9F 03               CALL   go   
0867   00 00                  DW   NUL   
0869   71 08                  DW   arrayIterM_1803S1354   
086B   6D 08                  DW   $+2   
086D   01                     DB   1   
086E   02 61 4C               .PSTR   "aL"   
0871                ARRAYITERM_1803S1354:      
0871   7B                     DB   "{"   
0872   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0882   5C 6B 74 7B            DB   "\\kt{"   
0886   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088E   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0894   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
089C   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08A4   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08AB   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B3   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08BC   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/f %L1;= 0 2}"   ; ifte: /t value, /f active = false, quit
08D3   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08DA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E1   7D                     DB   "}"   
08E2   7D                     DB   "}"   
08E3   00                     DB   0   
08E4                             ; /si stringIter
08E4                             ; string* -- src
08E4                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E4                STRINGITER:      
08E4   CD 9F 03               CALL   go   
08E7   00 00                  DW   NUL   
08E9   F1 08                  DW   stringIterM_1822S1374   
08EB   ED 08                  DW   $+2   
08ED   01                     DB   1   
08EE   02 73 4C               .PSTR   "sL"   
08F1                STRINGITERM_1822S1374:      
08F1   7B                     DB   "{"   
08F2   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08FC   5C 6B 74 7B            DB   "\\kt{"   
0900   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0908   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
090F   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
0917   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
091F   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0926   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 6D 20 25 63 3D DB   "/byt %s%i; /wm %c="   ; read byte at i, store in c as word
0938   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0940   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0947   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
095B   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0962   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0969   7D                     DB   "}"   
096A   7D                     DB   "}"   
096B   00                     DB   0   
096C                             ; /mp map
096C                             ; src func -- src1
096C                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
096C                MAP:         ; map: source, function
096C   CD 9F 03               CALL   go   
096F   00 00                  DW   NUL   
0971   79 09                  DW   mapM_1842S1396   
0973   75 09                  DW   $+2   
0975   00                     DB   0   
0976   02 73 66               .PSTR   "sf"   
0979                MAPM_1842S1396:      
0979   7B                     DB   "{"   
097A   5C 6B 74 7B            DB   "\\kt{"   
097E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0986   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
098F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
099B   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09A3   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09AA   7D                     DB   "}"   
09AB   7D                     DB   "}"   
09AC   00                     DB   0   
09AD                             ; /ft filter
09AD                             ; src pred -- src1
09AD                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09AD                FILTER:      ; filter: source, predicate, local: T
09AD   CD 9F 03               CALL   go   
09B0   00 00                  DW   NUL   
09B2   BB 09                  DW   filterM_1856S1411   
09B4   B6 09                  DW   $+2   
09B6   01                     DB   1   
09B7   03 73 70 54            .PSTR   "spT"   
09BB                FILTERM_1856S1411:      
09BB   7B                     DB   "{"   
09BC   5B 30 5D 25 54 3D      DB   "[0]%T="   
09C2   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09C6   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09CA   5B                     DB   "["   
09CB   7B 25 64 20 25 54 30 3B 3D 20 2F 74 7D DB   "{%d %T0;= /t}"   ; case 0: store talkback in T[0], return true
09D8   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09E0   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09E4   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
09E9   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
09FF   3F                     DB   "?"   
0A00   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A07   7D                     DB   "}"   
0A08   7D                     DB   "}"   
0A09   00                     DB   0   
0A0A                             ; /fd fold
0A0A                             ; reducer is a function like: \\da00bbLi4u
0A0A                             ; src init reducer -- src1
0A0A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A0A                FOLD:        ; src, init, reducer
0A0A   CD 9F 03               CALL   go   
0A0D   00 00                  DW   NUL   
0A0F   19 0A                  DW   foldM_1875S1431   
0A11   13 0A                  DW   $+2   
0A13   01                     DB   1   
0A14   04 73 69 72 41         .PSTR   "sirA"   
0A19                FOLDM_1875S1431:      
0A19   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A1A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A21   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A25   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A29   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A2E   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A49   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A51   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A58   7D                     DB   "}"   
0A59   7D                     DB   "}"   
0A5A   00                     DB   0   
0A5B                             ; /fe forEach
0A5B                             ; src proc --
0A5B                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A5B                FOREACH:      ; forEach: source, procedure, local: T
0A5B   CD 9F 03               CALL   go   
0A5E   00 00                  DW   NUL   
0A60   69 0A                  DW   forEachM_1889S1446   
0A62   64 0A                  DW   $+2   
0A64   01                     DB   1   
0A65   03 73 70 54            .PSTR   "spT"   
0A69                FOREACHM_1889S1446:      
0A69   7B                     DB   "{"   
0A6A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A70   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A74   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A7C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A81   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A93   3F                     DB   "?"   ; ifte:
0A94   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0A9D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AA4   7D                     DB   "}"   
0AA5   00                     DB   0   
0AA6                             ; ; /fs funcSrc
0AA6                             ; ; func -- src
0AA6                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0AA6                FUNCSRC:      ; :f func or block
0AA6   CD 9F 03               CALL   go   
0AA9   00 00                  DW   NUL   
0AAB   B2 0A                  DW   funcSrcM_1903S1461   
0AAD   AF 0A                  DW   $+2   
0AAF   00                     DB   0   
0AB0   01 66                  .PSTR   "f"   
0AB2                FUNCSRCM_1903S1461:      
0AB2   7B                     DB   "{"   
0AB3   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AB7   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /qt
0AC0   5C 64 74 7B            DB   "\\dt{"   
0AC4   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /qt
0AD7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0ADE   7D                     DB   "}"   
0ADF   7D                     DB   "}"   
0AE0   00                     DB   0   
0AE1                          ;*Macro unroll: FUNC printArray, 2, "abc"
0AE1                PRINTARRAY:      
0AE1   CD 9F 03               CALL   go   
0AE4   00 00                  DW   NUL   
0AE6   EF 0A                  DW   printArrayM_1913S1472   
0AE8   EA 0A                  DW   $+2   
0AEA   02                     DB   2   
0AEB   03 61 62 63            .PSTR   "abc"   
0AEF                PRINTARRAYM_1913S1472:      
0AEF   7B                     DB   "{"   
0AF0   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B28   7D                     DB   "}"   
0B29   00                     DB   0   
0B2A                             ;*******************************************************************
0B2A                             ; implementations continued
0B2A                             ;*******************************************************************
0B2A                COMMA:       
0B2A   CD 8D 0F               CALL   cmdTable   
0B2D   63 00                  DB   "c",NUL   ; .c print char
0B2F   39 0B                  DW   readChar   
0B31   73 00                  DB   "s",NUL   ; .s print string
0B33   42 0B                  DW   readString   
0B35   00 00                  DW   NUL   ; .  print number, fall through
0B37   64 0B                  DW   readNumber   
0B39                READCHAR:      
0B39   CD 81 00               CALL   getchar   
0B3C   26 00                  LD   h,0   
0B3E   6F                     LD   l,a   
0B3F   E5                     PUSH   hl   
0B40   DD E9                  JP   (ix)   
0B42                READSTRING:      
0B42   ED 5B EA 5A            LD   de,(vHeapPtr)   
0B46   D5                     PUSH   de   ; return start of string
0B47                READSTRING1:      
0B47   CD 81 00               CALL   getchar   
0B4A   FE 0D                  CP   "\r"   
0B4C   28 0D                  JR   z,readString2   
0B4E   12                     LD   (de),a   
0B4F   13                     INC   de   
0B50   3A F1 5A               LD   a,(vEcho)   
0B53   3C                     INC   a   
0B54   20 F1                  JR   nz,readString1   
0B56   CD 85 00               CALL   putchar   
0B59   18 EC                  JR   readString1   
0B5B                READSTRING2:      
0B5B   AF                     XOR   a   
0B5C   12                     LD   (de),a   
0B5D   13                     INC   de   
0B5E   ED 53 EA 5A            LD   (vHeapPtr),de   
0B62   DD E9                  JP   (ix)   
0B64                READNUMBER:      
0B64   DD E5                  PUSH   ix   
0B66                          ;*Macro unroll:  PERFORM readString
0B66   DD 21 6D 0B            LD   ix,performM_1957S1521   
0B6A   C3 42 0B               JP   readString   
0B6D                PERFORMM_1957S1521:      
0B6D   60 69                  LD   hl,bc   ; save bc, hl = string*
0B6F   E3                     EX   (sp),hl   
0B70   22 EA 5A               LD   (vHeapPtr),hl   ; restore heap* to before string
0B73   44 4D                  LD   bc,hl   
0B75   0A                     LD   a,(bc)   
0B76   FE 2D                  CP   "-"   
0B78   28 11                  JR   z,readNumber1   
0B7A   FE 24                  CP   "$"   
0B7C   28 17                  JR   z,readNumber2   
0B7E   FE 30                  CP   "0"   
0B80   30 09                  JR   nc,readNumber1   
0B82   FE 3A                  CP   "9"+1   
0B84   38 05                  JR   c,readNumber1   
0B86   21 00 00               LD   hl,0   
0B89   18 12                  JR   readNumber3   
0B8B                READNUMBER1:      
0B8B                          ;*Macro unroll:  PERFORM num
0B8B   DD 21 92 0B            LD   ix,performM_1974S1538   
0B8F   C3 26 0C               JP   num   
0B92                PERFORMM_1974S1538:      
0B92   E1                     POP   hl   
0B93   18 08                  JR   readNumber3   
0B95                READNUMBER2:      
0B95                          ;*Macro unroll:  PERFORM hexNum
0B95   DD 21 9C 0B            LD   ix,performM_1978S1542   
0B99   C3 AD 0B               JP   hexNum   
0B9C                PERFORMM_1978S1542:      
0B9C   E1                     POP   hl   
0B9D                READNUMBER3:      
0B9D   C1                     POP   bc   
0B9E   DD E1                  POP   ix   
0BA0   E5                     PUSH   hl   
0BA1   DD E9                  JP   (ix)   
0BA3                             ; ~ bitwise invert
0BA3                TILDE:       
0BA3                INVERT:      
0BA3   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BA4   7D                     LD   a,l   
0BA5   2F                     CPL      
0BA6   6F                     LD   l,a   
0BA7   7C                     LD   a,h   
0BA8   2F                     CPL      
0BA9   67                     LD   h,a   
0BAA   C3 D8 02               JP   add3   
0BAD                             ; $ hex                         ; 22
0BAD                DOLLAR:      
0BAD                HEXNUM:      
0BAD   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BB0                HEXNUM1:      
0BB0   03                     INC   bc   
0BB1   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BB2   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BB4   28 02                  JR   z,hexnum2   ; no a decimal
0BB6   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BB8                HEXNUM2:      
0BB8   D6 30                  SUB   $30   ; form decimal digit
0BBA   DA 48 0C               JP   c,num2   
0BBD   FE 10                  CP   $0F+1   
0BBF   D2 48 0C               JP   nc,num2   
0BC2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BC3   29                     ADD   hl,hl   ; 4X
0BC4   29                     ADD   hl,hl   ; 8X
0BC5   29                     ADD   hl,hl   ; 16X
0BC6   85                     ADD   a,l   ; add into bottom of hl
0BC7   6F                     LD   l,a   
0BC8   18 E6                  JR   hexnum1   
0BCA                             ; ? if                            23
0BCA                             ; condition then else -- value
0BCA                QUESTION:      
0BCA                IF:          
0BCA   D1                     POP   de   ; de = else
0BCB   E1                     POP   hl   ; hl = then
0BCC   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BCD   7C                     LD   a,h   
0BCE   B5                     OR   l   
0BCF   E1                     POP   hl   ; hl = then
0BD0   CA A0 03               JP   z,go1   ; if z de = else
0BD3   EB                     EX   de,hl   ; condition = false, de = then
0BD4   C3 A0 03               JP   go1   
0BD7                             ; string                        ;38
0BD7                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BD7                QUOTE:       
0BD7                STRING:      
0BD7   2A EA 5A               LD   hl,(vHeapPtr)   ; hl = heap*
0BDA   E5                     PUSH   hl   ; save start of string
0BDB   0A                     LD   a,(bc)   
0BDC   5F                     LD   e,a   ; e = matching terminator
0BDD   03                     INC   bc   ; point to next char
0BDE   18 03                  JR   string2   
0BE0                STRING1:      
0BE0   77                     LD   (hl),a   
0BE1   23                     INC   hl   ; increase count
0BE2   03                     INC   bc   ; point to next char
0BE3                STRING2:      
0BE3   0A                     LD   a,(bc)   
0BE4   BB                     CP   e   ; is it the string terminator
0BE5   28 02                  JR   z,string3   
0BE7   18 F7                  JR   string1   
0BE9                STRING3:      
0BE9   AF                     XOR   a   ; write NUL to terminate string
0BEA   77                     LD   (hl),a   ; hl = end of string
0BEB   23                     INC   hl   
0BEC   22 EA 5A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BEF   DD E9                  JP   (ix)   
0BF1                             ; %a .. %z                      43
0BF1                             ; -- value
0BF1                             ; returns value of arg
0BF1                PERCENT:      
0BF1                ARG:         
0BF1   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0BF4   FD 56 05               LD   d,(iy+5)   
0BF7   EB                     EX   de,hl   
0BF8   7D                     LD   a,l   ; arg_list* == null, skip
0BF9   B4                     OR   h   
0BFA   28 1A                  JR   z,arg0a   
0BFC   23                     INC   hl   ; a = num_args, hl = arg_list*
0BFD   7E                     LD   a,(hl)   
0BFE   23                     INC   hl   
0BFF   B7                     OR   a   
0C00   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C02   5F                     LD   e,a   ; e = a = num_args
0C03   03                     INC   bc   ; a = next char = dollar_name
0C04   0A                     LD   a,(bc)   
0C05   C5                     PUSH   bc   ; save IP
0C06   43                     LD   b,e   ; b = e = num_args
0C07   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C0A   FD 56 03               LD   d,(iy+3)   
0C0D                ARG0:        
0C0D   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C0E   1B                     DEC   de   
0C0F   BE                     CP   (hl)   
0C10   28 09                  JR   z,arg1   
0C12   23                     INC   hl   ; hl = next arg_list*
0C13   10 F8                  DJNZ   arg0   
0C15   C1                     POP   bc   ; no match, restore IP
0C16                ARG0A:       
0C16   11 00 00               LD   de,0   ; return 0
0C19   18 08                  JR   arg1a   
0C1B                ARG1:        
0C1B   C1                     POP   bc   ; restore IP
0C1C   EB                     EX   de,hl   ; hl = arg*
0C1D   22 F8 5A               LD   (vPointer),hl   ; store arg* in setter
0C20   5E                     LD   e,(hl)   
0C21   23                     INC   hl   
0C22   56                     LD   d,(hl)   ; de = arg
0C23                ARG1A:       
0C23   D5                     PUSH   de   ; push arg
0C24   DD E9                  JP   (ix)   
0C26                             ; 0..9 number                   37
0C26                NUM:         
0C26   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C29   0A                     LD   a,(bc)   ; Get numeral or -
0C2A   FE 2D                  CP   "-"   
0C2C   20 01                  JR   nz,num0   
0C2E   03                     INC   bc   ; move to next char, no flags affected
0C2F                NUM0:        
0C2F   08                     EX   af,af'   ; save zero flag = 0 for later
0C30                NUM1:        
0C30   0A                     LD   a,(bc)   ; read digit
0C31   D6 30                  SUB   "0"   ; less than 0?
0C33   38 13                  JR   c,num2   ; not a digit, exit loop
0C35   FE 0A                  CP   10   ; greater that 9?
0C37   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C39   03                     INC   bc   ; inc IP
0C3A   54 5D                  LD   de,hl   ; multiply hl * 10
0C3C   29                     ADD   hl,hl   
0C3D   29                     ADD   hl,hl   
0C3E   19                     ADD   hl,de   
0C3F   29                     ADD   hl,hl   
0C40   85                     ADD   a,l   ; add digit in a to hl
0C41   6F                     LD   l,a   
0C42   3E 00                  LD   a,0   
0C44   8C                     ADC   a,h   
0C45   67                     LD   h,a   
0C46   18 E8                  JR   num1   
0C48                NUM2:        
0C48   0B                     DEC   bc   
0C49   08                     EX   af,af'   ; restore zero flag
0C4A   20 07                  JR   nz,num3   
0C4C   EB                     EX   de,hl   ; negate the value of hl
0C4D   21 00 00               LD   hl,0   
0C50   B7                     OR   a   ; jump to sub2
0C51   ED 52                  SBC   hl,de   
0C53                NUM3:        
0C53   E5                     PUSH   hl   ; Put the number on the stack
0C54   DD E9                  JP   (ix)   ; and process the next character
0C56                             ; }                               58
0C56                RBRACE:      
0C56                BLOCKEND:      
0C56   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C59   FD 56 01               LD   d,(iy+1)   
0C5C   ED 53 04 5B            LD   (vTemp1),de   
0C60   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C63   FD 56 07               LD   d,(iy+7)   
0C66   ED 53 06 5B            LD   (vTemp2),de   
0C6A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C6D   FD 56 03               LD   d,(iy+3)   
0C70   EB                     EX   de,hl   
0C71   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C74   FD 56 01               LD   d,(iy+1)   
0C77   13                     INC   de   ; for carry flag <=
0C78   B7                     OR   a   
0C79   ED 52                  SBC   hl,de   
0C7B   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C7D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C7F   FD 5D                  LD   e,iyl   
0C81   21 08 00               LD   hl,8   
0C84   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C85   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C86   18 0C                  JR   blockEnd2   
0C88                BLOCKEND1:      ; same scope
0C88   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C8B   FD 56 03               LD   d,(iy+3)   
0C8E   EB                     EX   de,hl   
0C8F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C91   FD 5D                  LD   e,iyl   
0C93   EB                     EX   de,hl   
0C94                BLOCKEND2:      
0C94   44 4D                  LD   bc,hl   ; bc = hl = BP
0C96   B7                     OR   a   ; hl = BP - SP = count
0C97   ED 72                  SBC   hl,sp   
0C99   7D                     LD   a,l   
0C9A   B4                     OR   h   
0C9B   28 09                  JR   z,blockEnd3   
0C9D   C5                     PUSH   bc   ; bc = count, hl = BP
0C9E   44 4D                  LD   bc,hl   
0CA0   E1                     POP   hl   
0CA1   2B                     DEC   hl   ; hl = BP-1
0CA2   1B                     DEC   de   ; de = args*-1
0CA3   ED B8                  LDDR      
0CA5   13                     INC   de   
0CA6                BLOCKEND3:      
0CA6   EB                     EX   de,hl   ; sp = de = new tos*
0CA7   F9                     LD   sp,hl   
0CA8   ED 4B 06 5B            LD   bc,(vTemp2)   
0CAC   FD 2A 04 5B            LD   iy,(vTemp1)   
0CB0   ED 5B EC 5A            LD   de,(vRecurPtr)   ; de = recur vector
0CB4   7B                     LD   a,e   ; check for NUL
0CB5   B2                     OR   d   
0CB6   20 02                  JR   nz,blockEnd4   
0CB8   DD E9                  JP   (ix)   
0CBA                BLOCKEND4:      
0CBA   21 00 00               LD   hl,0   ; clear recur vector
0CBD   22 EC 5A               LD   (vRecurPtr),hl   
0CC0   C3 A0 03               JP   go1   ; execute de
0CC3                GOBLOCK:      
0CC3   ED 53 04 5B            LD   (vTemp1),de   ; save de
0CC7   21 00 58               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CCA   FD 54                  LD   d,iyh   
0CCC   FD 5D                  LD   e,iyl   
0CCE   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CCF   ED 52                  SBC   hl,de   
0CD1   ED 5B 04 5B            LD   de,(vTemp1)   ; restore de
0CD5   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CD6   B4                     OR   h   
0CD7   3E 00                  LD   a,0   
0CD9   28 6A                  JR   z,goFunc8   
0CDB   C5                     PUSH   bc   ; push IP
0CDC   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CDF   FD 46 05               LD   b,(iy+5)   
0CE2   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CE5   FD 66 03               LD   h,(iy+3)   
0CE8                GOBLOCK2:      
0CE8   C5                     PUSH   bc   ; arg_list*
0CE9   E5                     PUSH   hl   ; first_arg*
0CEA   FD E5                  PUSH   iy   ; push BP
0CEC   FD 21 00 00            LD   iy,0   ; BP = SP
0CF0   FD 39                  ADD   iy,sp   
0CF2                GOBLOCK3:      
0CF2   42 4B                  LD   bc,de   ; bc = de = block*-1
0CF4   DD E9                  JP   (ix)   
0CF6                GOFUNC:      ; execute func
0CF6   EB                     EX   de,hl   ; hl = func*
0CF7   5E                     LD   e,(hl)   ; de = partial_array*
0CF8   23                     INC   hl   
0CF9   56                     LD   d,(hl)   
0CFA   23                     INC   hl   
0CFB   7B                     LD   a,e   ; if partial_array* == null skip
0CFC   B2                     OR   d   
0CFD   28 21                  JR   z,goFunc3   
0CFF   ED 43 04 5B            LD   (vTemp1),bc   
0D03   22 06 5B               LD   (vTemp2),hl   ; save bc,hl
0D06   EB                     EX   de,hl   ; hl = partial_array*
0D07   2B                     DEC   hl   ; bc = count
0D08   46                     LD   b,(hl)   
0D09   2B                     DEC   hl   
0D0A   4E                     LD   c,(hl)   
0D0B   23                     INC   hl   ; hl = array data*
0D0C   23                     INC   hl   
0D0D   18 06                  JR   goFunc2   ; push each item on stack
0D0F                GOFUNC1:      
0D0F   5E                     LD   e,(hl)   ; de = partial item
0D10   23                     INC   hl   
0D11   56                     LD   d,(hl)   
0D12   23                     INC   hl   
0D13   D5                     PUSH   de   ; push on stack
0D14   0B                     DEC   bc   
0D15                GOFUNC2:      
0D15   79                     LD   a,c   ; if count != 0 then loop
0D16   B0                     OR   b   
0D17   20 F6                  JR   nz,goFunc1   
0D19   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore bc
0D1D   2A 06 5B               LD   hl,(vTemp2)   ; restore hl
0D20                GOFUNC3:      
0D20   5E                     LD   e,(hl)   ; de = block*
0D21   23                     INC   hl   
0D22   56                     LD   d,(hl)   
0D23   23                     INC   hl   
0D24   ED 53 04 5B            LD   (vTemp1),de   ; save block*
0D28   5E                     LD   e,(hl)   ; de = arg_list*
0D29   23                     INC   hl   
0D2A   56                     LD   d,(hl)   
0D2B   23                     INC   hl   
0D2C   EB                     EX   de,hl   ; hl = arg_list*
0D2D   ED 5B 04 5B            LD   de,(vTemp1)   ; restore de = block*
0D31   7D                     LD   a,l   ; if arg_list* == null a = 0
0D32   B4                     OR   h   
0D33   20 03                  JR   nz,goFunc4   
0D35   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D36   18 0D                  JR   goFunc8   
0D38                GOFUNC4:      ; allocate locals
0D38   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D39   18 03                  JR   goFunc6   
0D3B                GOFUNC5:      ; loop
0D3B   3B                     DEC   sp   
0D3C   3B                     DEC   sp   
0D3D   3D                     DEC   a   
0D3E                GOFUNC6:      
0D3E   B7                     OR   a   
0D3F   20 FA                  JR   nz,goFunc5   ; end loop
0D41                GOFUNC7:      
0D41   23                     INC   hl   ; a = num_args* x 2
0D42   7E                     LD   a,(hl)   
0D43   2B                     DEC   hl   
0D44   87                     ADD   a,a   ; a *= 2
0D45                GOFUNC8:      
0D45   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D46   44 4D                  LD   bc,hl   
0D48   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D4B   85                     ADD   a,l   
0D4C   6F                     LD   l,a   
0D4D   39                     ADD   hl,sp   
0D4E   18 98                  JR   goBlock2   
0D50                             ; =                              21
0D50                             ; value _oldValue --            ; uses address in vPointer 15
0D50                ASSIGN:      
0D50   E1                     POP   hl   ; discard last accessed value
0D51   E1                     POP   hl   ; hl = new value
0D52                ASSIGN0:      
0D52   EB                     EX   de,hl   ; de = new value
0D53   2A F8 5A               LD   hl,(vPointer)   
0D56                ASSIGN1:      ; entry point from defineEnd
0D56   73                     LD   (hl),e   
0D57   3A EE 5A               LD   a,(vDataWidth)   
0D5A   3D                     DEC   a   ; is it byte?
0D5B   28 02                  JR   z,assign2   
0D5D   23                     INC   hl   
0D5E   72                     LD   (hl),d   
0D5F                ASSIGN2:      
0D5F   DD E9                  JP   (ix)   
0D61                             ; hl = value1, de = value2
0D61                             ; hl = result
0D61                EQUALS:      
0D61   B7                     OR   a   ; reset the carry flag
0D62   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D64   28 16                  JR   z,true1   
0D66   18 1A                  JR   false1   
0D68                NOTEQUALS:      
0D68   B7                     OR   a   ; reset the carry flag
0D69   ED 52                  SBC   hl,de   
0D6B   20 0F                  JR   nz,true1   
0D6D   18 13                  JR   false1   
0D6F                             ; hl = value1 de = value2
0D6F                             ; hl = result
0D6F                LESSTHANEQ:      
0D6F   B7                     OR   a   
0D70   ED 52                  SBC   hl,de   
0D72   18 05                  JR   lessthan1   
0D74                             ; hl = value1 de = value2
0D74                             ; hl = result
0D74                LESSTHAN:      
0D74   B7                     OR   a   
0D75   ED 52                  SBC   hl,de   
0D77   28 09                  JR   z,false1   
0D79                LESSTHAN1:      
0D79   FA 82 0D               JP   m,false1   
0D7C                TRUE1:       
0D7C   21 FF FF               LD   hl,TRUE   
0D7F   E5                     PUSH   hl   
0D80   DD E9                  JP   (ix)   
0D82                NULL1:       
0D82                FALSE1:      
0D82   21 00 00               LD   hl,FALSE   
0D85   E5                     PUSH   hl   
0D86   DD E9                  JP   (ix)   
0D88                SPREAD:      
0D88   E1                     POP   hl   ; hl = array*
0D89   ED 43 04 5B            LD   (vTemp1),bc   ; save bc
0D8D   2B                     DEC   hl   ; bc = length
0D8E   46                     LD   b,(hl)   
0D8F   2B                     DEC   hl   
0D90   4E                     LD   c,(hl)   
0D91   23                     INC   hl   ; move back to array 0
0D92   23                     INC   hl   
0D93   18 0D                  JR   spread3   
0D95                SPREAD1:      
0D95   5E                     LD   e,(hl)   ; e = lsb data at hl
0D96   23                     INC   hl   
0D97   3A EE 5A               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D9A   57                     LD   d,a   
0D9B   15                     DEC   d   
0D9C   28 02                  JR   z,spread2   
0D9E   56                     LD   d,(hl)   ; d = msb data at hl
0D9F   23                     INC   hl   
0DA0                SPREAD2:      
0DA0   D5                     PUSH   de   ; return de
0DA1   0B                     DEC   bc   ; count--
0DA2                SPREAD3:      
0DA2   79                     LD   a,c   ; exit loop if bc == 0
0DA3   B0                     OR   b   
0DA4   20 EF                  JR   nz,spread1   
0DA6   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore bc
0DAA   DD E9                  JP   (ix)   
0DAC                             ; shiftLeft
0DAC                             ; value count <<
0DAC                             ; count variable <<=
0DAC                SHIFTLEFT:      
0DAC   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DAD   D1                     POP   de   
0DAE   03                     INC   bc   
0DAF   0A                     LD   a,(bc)   
0DB0   FE 3D                  CP   "="   
0DB2   28 02                  JR   z,shiftLeft2   
0DB4   0B                     DEC   bc   
0DB5   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DB6                SHIFTLEFT2:      
0DB6   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0DBA   43                     LD   b,e   ; b = loop counter
0DBB   04                     INC   b   ; test for counter=0 case
0DBC   18 01                  JR   shiftLeft4   
0DBE                SHIFTLEFT3:      
0DBE   29                     ADD   hl,hl   ; left shift hl
0DBF                SHIFTLEFT4:      
0DBF   10 FD                  DJNZ   shiftLeft3   
0DC1   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
0DC5   C3 9D 02               JP   sub3   
0DC8                             ; shiftRight
0DC8                             ; value count >>
0DC8                             ; count variable >>=
0DC8                SHIFTRIGHT:      
0DC8   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DC9   D1                     POP   de   
0DCA   03                     INC   bc   
0DCB   0A                     LD   a,(bc)   
0DCC   FE 3D                  CP   "="   
0DCE   28 02                  JR   z,shiftRight2   
0DD0   0B                     DEC   bc   
0DD1   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0DD2                SHIFTRIGHT2:      
0DD2   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0DD6   43                     LD   b,e   ; b = loop counter
0DD7   04                     INC   b   ; test for counter=0 case
0DD8   18 04                  JR   shiftRight4   
0DDA                SHIFTRIGHT3:      
0DDA   CB 3C                  SRL   h   ; right shift hl
0DDC   CB 1D                  RR   l   
0DDE                SHIFTRIGHT4:      
0DDE   10 FA                  DJNZ   shiftRight3   
0DE0   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
0DE4   C3 9D 02               JP   sub3   
0DE7                             ; division subroutine.
0DE7                             ; bc: divisor, de: dividend, hl: remainder
0DE7                DIVIDE:      
0DE7   21 00 00               LD   hl,0   ; zero the remainder
0DEA   3E 10                  LD   a,16   ; loop counter
0DEC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DEC   CB 21                  SLA   c   
0DEE   CB 10                  RL   b   
0DF0   ED 6A                  ADC   hl,hl   
0DF2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0DF4   38 03                  JR   c,divide2   
0DF6   0C                     INC   c   
0DF7   18 01                  JR   divide3   
0DF9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0DF9   19                     ADD   hl,de   
0DFA                DIVIDE3:      
0DFA   3D                     DEC   a   
0DFB   20 EF                  JR   nz,divide1   
0DFD   50 59                  LD   de,bc   ; result from bc to de
0DFF   C9                     RET      
0E00                DOTNEXT:      
0E00   3A F2 5A               LD   a,(vStrMode)   ; if string mode then exit
0E03   3C                     INC   a   
0E04   20 02                  JR   nz,dotNext1   
0E06   DD E9                  JP   (ix)   
0E08                DOTNEXT1:      
0E08   11 00 59               LD   de,BUFFER   
0E0B   2A E8 5A               LD   hl,(vBufPtr)   
0E0E   36 00                  LD   (hl),0   ; store NUL at end of string
0E10   ED 53 E8 5A            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E14   EB                     EX   de,hl   ; hl = BUFFER
0E15   CD C9 0F               CALL   putstr   
0E18   DD E9                  JP   (ix)   
0E1A                             ; arg_list - parses arg_list e.g. ab:c
0E1A                             ; -- arg_list*
0E1A                PARSEARGS:      
0E1A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E1D   2A EA 5A               LD   hl,(vHeapPtr)   ; hl = heap*
0E20   E5                     PUSH   hl   ; save start of arg_list
0E21   23                     INC   hl   ; skip length fields to start of string
0E22   23                     INC   hl   
0E23   03                     INC   bc   ; point to next char
0E24                PARSEARGS1:      
0E24   0A                     LD   a,(bc)   
0E25   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E27   20 03                  JR   nz,parseArgs1a   
0E29   14                     INC   d   ; non zero value local count acts as flag
0E2A   18 10                  JR   parseArgs3   
0E2C                PARSEARGS1A:      
0E2C   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E2E   38 0F                  JR   c,parseArgs4   
0E30   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E32   30 0B                  JR   nc,parseArgs4   
0E34                PARSEARGS2:      
0E34   77                     LD   (hl),a   
0E35   23                     INC   hl   
0E36   1C                     INC   e   ; increase arg count
0E37   AF                     XOR   a   
0E38   B2                     OR   d   
0E39   28 01                  JR   z,parseArgs3   
0E3B   14                     INC   d   ; if d > 0 increase local count
0E3C                PARSEARGS3:      
0E3C   03                     INC   bc   ; point to next char
0E3D   18 E5                  JR   parseArgs1   
0E3F                PARSEARGS4:      
0E3F   0B                     DEC   bc   
0E40   AF                     XOR   a   
0E41   B2                     OR   d   
0E42   28 01                  JR   z,parseArgs5   
0E44   15                     DEC   d   ; remove initial inc
0E45                PARSEARGS5:      
0E45   23                     INC   hl   
0E46   22 EA 5A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E49   E1                     POP   hl   ; hl = start of arg_list
0E4A   72                     LD   (hl),d   ; write number of locals at start - 1
0E4B   23                     INC   hl   
0E4C   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E4D   2B                     DEC   hl   
0E4E   E3                     EX   (sp),hl   
0E4F   E9                     JP   (hl)   
0E50                             ; create block: parses block e.g. 00bbIC4uLi4g
0E50                             ; -- block*
0E50                PARSEBLOCK:      
0E50   C5                     PUSH   bc   ; return pointer to first { of block
0E51   03                     INC   bc   
0E52   16 01                  LD   d,1   ; nesting: count first parenthesis
0E54                PARSEBLOCK1:      ; Skip to end of definition
0E54   0A                     LD   a,(bc)   ; Get the next character
0E55   03                     INC   bc   ; Point to next character
0E56   FE 21                  CP   " " + 1   ; ignore whitespace
0E58   38 FA                  JR   c,parseBlock1   
0E5A   FE 27                  CP   "'"   ; quote char
0E5C   28 0F                  JR   z,parseBlock2   
0E5E   FE 22                  CP   DQ   ; double quote char
0E60   28 0B                  JR   z,parseBlock2   
0E62   FE 60                  CP   "`"   ; grave char
0E64   28 07                  JR   z,parseBlock2   
0E66   CB 7A                  BIT   7,d   
0E68   20 EA                  JR   nz,parseBlock1   
0E6A   C3 73 0E               JP   parseBlock3   
0E6D                PARSEBLOCK2:      
0E6D   3E 80                  LD   a,$80   
0E6F   AA                     XOR   d   
0E70   57                     LD   d,a   
0E71   18 E1                  JR   parseBlock1   
0E73                PARSEBLOCK3:      
0E73   FE 28                  CP   "("   
0E75   28 16                  JR   z,parseBlock4   
0E77   FE 7B                  CP   "{"   
0E79   28 12                  JR   z,parseBlock4   
0E7B   FE 5B                  CP   "["   
0E7D   28 0E                  JR   z,parseBlock4   
0E7F   FE 29                  CP   ")"   
0E81   28 0D                  JR   z,parseBlock5   
0E83   FE 7D                  CP   "}"   
0E85   28 09                  JR   z,parseBlock5   
0E87   FE 5D                  CP   "]"   
0E89   28 05                  JR   z,parseBlock5   
0E8B   18 C7                  JR   parseBlock1   
0E8D                PARSEBLOCK4:      
0E8D   14                     INC   d   
0E8E   18 C4                  JR   parseBlock1   
0E90                PARSEBLOCK5:      
0E90   15                     DEC   d   
0E91   20 C1                  JR   nz,parseBlock1   ; get the next element
0E93   60 69                  LD   hl,bc   ; hl = IP
0E95   11 22 5B               LD   de,HEAP   ; is IP pointing to object in heap
0E98   B7                     OR   a   ; IP - HEAP
0E99   ED 52                  SBC   hl,de   
0E9B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E9D   28 1C                  JR   z,parseBlock6   
0E9F   60 69                  LD   hl,bc   ; hl = IP
0EA1   D1                     POP   de   ; de = block*
0EA2   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0EA6   B7                     OR   a   ; bc = size
0EA7   ED 52                  SBC   hl,de   
0EA9   44 4D                  LD   bc,hl   
0EAB   EB                     EX   de,hl   ; hl = block* de = heap*
0EAC   ED 5B EA 5A            LD   de,(vHeapPtr)   
0EB0   D5                     PUSH   de   ; return hblock*
0EB1   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EB3   ED 53 EA 5A            LD   (vHeapPtr),de   ; heap* += size
0EB7   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
0EBB                PARSEBLOCK6:      
0EBB   0B                     DEC   bc   ; balanced, exit
0EBC   E1                     POP   hl   ; hl = block*
0EBD   E3                     EX   (sp),hl   ; return to caller
0EBE   E9                     JP   (hl)   
0EBF                             ; create function
0EBF                             ; arg_list* block* -- func*
0EBF                CREATEFUNC:      
0EBF   E1                     POP   hl   ; save retrn address
0EC0   22 08 5B               LD   (vTemp3),hl   
0EC3   ED 43 04 5B            LD   (vTemp1),bc   ; save IP
0EC7   E1                     POP   hl   ; hl = block*
0EC8   22 06 5B               LD   (vTemp2),hl   ; save block*
0ECB   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0ECE   FD 56 05               LD   d,(iy+5)   
0ED1   7B                     LD   a,e   ; if arg_list == null then make a func
0ED2   B2                     OR   d   
0ED3   20 09                  JR   nz,createFunc0   
0ED5   21 00 00               LD   hl,0   ; partial_array = null
0ED8   ED 5B EA 5A            LD   de,(vHeapPtr)   ; de = compile*
0EDC   18 65                  JR   createFunc5   
0EDE                CREATEFUNC0:      
0EDE   E1                     POP   hl   ; hl = inner_arg_list*
0EDF   E5                     PUSH   hl   ; save inner_arg_list
0EE0   ED 5B EA 5A            LD   de,(vHeapPtr)   ; de = compile*
0EE4   7E                     LD   a,(hl)   ; compile inner_num_locals
0EE5   4F                     LD   c,a   ; b = inner_num_locals
0EE6   12                     LD   (de),a   
0EE7   23                     INC   hl   
0EE8   13                     INC   de   
0EE9   7E                     LD   a,(hl)   ; compile inner_length
0EEA   12                     LD   (de),a   
0EEB   91                     SUB   c   ; a = inner_num args
0EEC   23                     INC   hl   
0EED   13                     INC   de   
0EEE   B7                     OR   a   ; compile args if inner_length > 0
0EEF   28 05                  JR   z,createFunc1   
0EF1   4F                     LD   c,a   ; bc = a
0EF2   06 00                  LD   b,0   
0EF4   ED B0                  LDIR      
0EF6                CREATEFUNC1:      
0EF6   EB                     EX   de,hl   ; hl = outer_arg_list
0EF7   FD 5E 04               LD   e,(iy+4)   
0EFA   FD 56 05               LD   d,(iy+5)   
0EFD   EB                     EX   de,hl   
0EFE   23                     INC   hl   ; a = outer_length
0EFF   7E                     LD   a,(hl)   
0F00   23                     INC   hl   
0F01   B7                     OR   a   
0F02   28 05                  JR   z,createFunc2   
0F04   4F                     LD   c,a   
0F05   06 00                  LD   b,0   
0F07   ED B0                  LDIR      ; append outer_args
0F09                CREATEFUNC2:      ; a = outer_length
0F09   47                     LD   b,a   ; b = a = outer_length
0F0A   2A EA 5A               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F0D   23                     INC   hl   
0F0E   7E                     LD   a,(hl)   ; add outer_length to new length
0F0F   80                     ADD   a,b   
0F10   77                     LD   (hl),a   
0F11   2B                     DEC   hl   
0F12   78                     LD   a,b   ; save outer_length in a'
0F13   08                     EX   af,af'   
0F14   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F15   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F16   B7                     OR   a   
0F17   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F19   4F                     LD   c,a   ; c = inner_num_locals
0F1A   06 00                  LD   b,0   ; bc = inner_num_locals
0F1C   23                     INC   hl   ; a = inner_length
0F1D   7E                     LD   a,(hl)   
0F1E   91                     SUB   c   ; a = inner_num_args
0F1F   23                     INC   hl   ; hl = inner_arg_chars
0F20   85                     ADD   a,l   ; hl += a
0F21   6F                     LD   l,a   
0F22   3E 00                  LD   a,0   
0F24   84                     ADD   a,h   
0F25   67                     LD   h,a   
0F26   ED B0                  LDIR      ; append inner_locals
0F28                CREATEFUNC2A:      
0F28   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F29   12                     LD   (de),a   ; compile partial_array length field
0F2A   13                     INC   de   
0F2B   AF                     XOR   a   
0F2C   12                     LD   (de),a   
0F2D   13                     INC   de   
0F2E   D5                     PUSH   de   ; push partial_array*
0F2F   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F30   FD 5E 02               LD   e,(iy+2)   
0F33   FD 56 03               LD   d,(iy+3)   
0F36   EB                     EX   de,hl   
0F37                CREATEFUNC3:      
0F37   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F38   4E                     LD   c,(hl)   
0F39   2B                     DEC   hl   
0F3A   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F3B   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F3C   13                     INC   de   
0F3D   79                     LD   a,c   
0F3E   12                     LD   (de),a   
0F3F   13                     INC   de   
0F40   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F42                CREATEFUNC4:      
0F42   E1                     POP   hl   ; hl = partial_array*
0F43                CREATEFUNC5:      
0F43   C1                     POP   bc   ; bc = new_arg_list*
0F44   D5                     PUSH   de   ; return new func*
0F45   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F46   73                     LD   (hl),e   ; compile partial_array* to func
0F47   23                     INC   hl   
0F48   72                     LD   (hl),d   
0F49   23                     INC   hl   
0F4A   ED 5B 06 5B            LD   de,(vTemp2)   ; de = block*
0F4E   73                     LD   (hl),e   ; compile block* to func
0F4F   23                     INC   hl   
0F50   72                     LD   (hl),d   
0F51   23                     INC   hl   
0F52   71                     LD   (hl),c   ; compile new_arg_list* to func
0F53   23                     INC   hl   
0F54   70                     LD   (hl),b   
0F55   23                     INC   hl   
0F56   22 EA 5A               LD   (vHeapPtr),hl   ; bump heap ptr
0F59   ED 4B 04 5B            LD   bc,(vTemp1)   ; restore IP
0F5D   2A 08 5B               LD   hl,(vTemp3)   ; jump to return address
0F60   E9                     JP   (hl)   
0F61                             ;*******************************************************************
0F61                             ; general routines
0F61                             ;*******************************************************************
0F61                             ; hl = address
0F61                VARIABLE:      
0F61   22 F8 5A               LD   (vPointer),hl   
0F64   5E                     LD   e,(hl)   
0F65   3A EE 5A               LD   a,(vDataWidth)   
0F68   3D                     DEC   a   
0F69   16 00                  LD   d,0   
0F6B   28 03                  JR   z,constant   
0F6D   23                     INC   hl   
0F6E   56                     LD   d,(hl)   
0F6F   2B                     DEC   hl   
0F70                CONSTANT:      
0F70   D5                     PUSH   de   
0F71   DD E9                  JP   (ix)   
0F73                             ; followed by a table
0F73                             ; indexed on the 0-25 lowercase letter
0F73                             ; db lsb(addr)
0F73                             ; the final item index 26 matches any other char
0F73                CHARTABLE:      
0F73   03                     INC   bc   
0F74   0A                     LD   a,(bc)   
0F75   FE 7B                  CP   "z"+1   
0F77   30 0F                  JR   nc,charTable3   
0F79   D6 61                  SUB   "a"   
0F7B   38 0B                  JR   c,charTable3   
0F7D                CHARTABLE1:      
0F7D   E1                     POP   hl   
0F7E   85                     ADD   a,l   
0F7F   6F                     LD   l,a   
0F80   7E                     LD   a,(hl)   ; must have the same msb as the table
0F81   B7                     OR   a   ; a = 0, nop
0F82   20 02                  JR   nz,charTable2   
0F84   DD E9                  JP   (ix)   
0F86                CHARTABLE2:      
0F86   6F                     LD   l,a   
0F87   E9                     JP   (hl)   
0F88                CHARTABLE3:      
0F88   3E 1A                  LD   a,26   
0F8A   0B                     DEC   bc   
0F8B   18 F0                  JR   charTable1   
0F8D                             ; followed by a table
0F8D                             ; db char
0F8D                             ; db char - if null only match on first char
0F8D                             ; dw addr
0F8D                             ; the final item must have char == NUL
0F8D                CMDTABLE:      
0F8D   E1                     POP   hl   
0F8E                CMDTABLE1:      
0F8E                CMDTABLE2:      
0F8E   56                     LD   d,(hl)   
0F8F   23                     INC   hl   
0F90   5E                     LD   e,(hl)   
0F91   23                     INC   hl   
0F92   AF                     XOR   a   ; if d == 0, matched
0F93   BA                     CP   d   
0F94   28 13                  JR   z,cmdTable5   
0F96   03                     INC   bc   ; match?
0F97   0A                     LD   a,(bc)   
0F98   BA                     CP   d   
0F99   20 09                  JR   nz,cmdTable4   
0F9B                CMDTABLE3:      
0F9B   AF                     XOR   a   ; if e == 0, matched
0F9C   BB                     CP   e   
0F9D   28 0A                  JR   z,cmdTable5   
0F9F   03                     INC   bc   
0FA0   0A                     LD   a,(bc)   ; match?
0FA1   BB                     CP   e   
0FA2   28 05                  JR   z,cmdTable5   
0FA4                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FA4   0B                     DEC   bc   
0FA5   23                     INC   hl   
0FA6   23                     INC   hl   
0FA7   18 E5                  JR   cmdTable2   
0FA9                CMDTABLE5:      ; matched, jump to addr
0FA9   5E                     LD   e,(hl)   
0FAA   23                     INC   hl   
0FAB   56                     LD   d,(hl)   
0FAC   EB                     EX   de,hl   
0FAD   E9                     JP   (hl)   
0FAE                GETVARADDR:      
0FAE   21 00 00               LD   hl,0   
0FB1   FE 7B                  CP   "z"+1   ; if a > z then exit
0FB3   D0                     RET   nc   
0FB4   D6 41                  SUB   "A"   ; a - 65
0FB6   D8                     RET   c   ; if < A then exit
0FB7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FB9   38 05                  JR   c,getVarAddr1   
0FBB   D6 06                  SUB   "a"-("Z"+1)   
0FBD   FE 1A                  CP   "Z"-"A"+1   
0FBF   D8                     RET   c   ; if < a then exit
0FC0                GETVARADDR1:      
0FC0   87                     ADD   a,a   ; double a
0FC1   6F                     LD   l,a   
0FC2   26 5A                  LD   h,msb(VARS)   
0FC4   C9                     RET      
0FC5                PUTSTR0:      
0FC5   CD 85 00               CALL   putchar   
0FC8   23                     INC   hl   
0FC9                PUTSTR:      
0FC9   7E                     LD   a,(hl)   
0FCA   B7                     OR   a   
0FCB   20 F8                  JR   nz,putstr0   
0FCD   C9                     RET      
0FCE                             ; **************************************************************************
0FCE                             ; calculate nesting value
0FCE                             ; a is char to be tested,
0FCE                             ; e is the nesting value (initially 0)
0FCE                             ; e is increased by ( and [
0FCE                             ; e is decreased by ) and ]
0FCE                             ; e has its bit 7 toggled by `
0FCE                             ; limited to 127 levels
0FCE                             ; **************************************************************************
0FCE                NESTING:      
0FCE   FE 27                  CP   "'"   ; quote char
0FD0   28 0A                  JR   z,nesting0   
0FD2   FE 22                  CP   DQ   ; double quote char
0FD4   28 06                  JR   z,nesting0   
0FD6   FE 60                  CP   "`"   ; grave char
0FD8   28 02                  JR   z,nesting0   
0FDA   18 0A                  JR   nesting1   
0FDC                NESTING0:      
0FDC   CB 7B                  BIT   7,e   
0FDE   28 03                  JR   z,nesting1a   
0FE0   CB BB                  RES   7,e   
0FE2   C9                     RET      
0FE3                NESTING1A:      
0FE3   CB FB                  SET   7,e   
0FE5   C9                     RET      
0FE6                NESTING1:      
0FE6   CB 7B                  BIT   7,e   
0FE8   C0                     RET   nz   
0FE9   FE 7B                  CP   "{"   
0FEB   28 08                  JR   z,nesting2   
0FED   FE 5B                  CP   "["   
0FEF   28 04                  JR   z,nesting2   
0FF1   FE 28                  CP   "("   
0FF3   20 02                  JR   nz,nesting3   
0FF5                NESTING2:      
0FF5   1C                     INC   e   
0FF6   C9                     RET      
0FF7                NESTING3:      
0FF7   FE 7D                  CP   "}"   
0FF9   28 07                  JR   z,nesting4   
0FFB   FE 5D                  CP   "]"   
0FFD   28 03                  JR   z,nesting4   
0FFF   FE 29                  CP   ")"   
1001   C0                     RET   nz   
1002                NESTING4:      
1002   1D                     DEC   e   
1003   C9                     RET      
1004                PROMPT:      
1004   CD 14 10               CALL   printStr   
1007   0D 0A 3E 20 00         .CSTR   "\r\n> "   
100C   C9                     RET      
100D                CRLF:        
100D   CD 14 10               CALL   printStr   
1010   0D 0A 00               .CSTR   "\r\n"   
1013   C9                     RET      
1014                             ; prints a null teminated string
1014                             ; the string should be immediately following the call
1014                PRINTSTR:      
1014   E3                     EX   (sp),hl   ; swap			
1015   CD C9 0F               CALL   putstr   
1018   23                     INC   hl   ; inc past NUL
1019   E3                     EX   (sp),hl   ; put it back	
101A   C9                     RET      
101B                INIT:        
101B   21 F0 01               LD   hl,titleStr   
101E   11 0E 5B               LD   de,titleBuf   
1021   06 14                  LD   b,20   
1023                INIT1:       
1023   1A                     LD   a,(de)   
1024   BE                     CP   (hl)   
1025   20 17                  JR   nz,coldBoot0   
1027   13                     INC   de   
1028   23                     INC   hl   
1029   10 F8                  DJNZ   init1   
102B                WARMINIT:      
102B   ED 4B FC 5A            LD   bc,(vSavedIP)   ; restore IP
102F   ED 7B FE 5A            LD   sp,(vSavedSP)   ; restore SP
1033   DD 2A 00 5B            LD   ix,(vSavedNext)   ; restore Next
1037   FD 2A 02 5B            LD   iy,(vSavedBP)   ; restore BP
103B   C3 75 10               JP   start1   
103E                COLDBOOT0:      
103E   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1041   11 0E 5B               LD   de,titleBuf   
1044   06 14                  LD   b,20   
1046   ED B0                  LDIR      
1048                COLDINIT:      
1048   21 DE 01               LD   hl,isysVars   
104B   11 E6 5A               LD   de,sysVars   
104E   01 12 00               LD   bc,4 * 2 + 10   
1051   ED B0                  LDIR      
1053   21 00 5A               LD   hl,vars   ; 52 vars LO HI
1056   06 34                  LD   b,26*2   
1058   AF                     XOR   a   
1059                COLDBOOT1:      
1059   77                     LD   (hl),a   
105A   23                     INC   hl   
105B   10 FC                  DJNZ   coldBoot1   
105D   DD 21 F1 10            LD   ix,NEXT   
1061   FD 21 00 58            LD   iy,STACK   
1065   C9                     RET      
1066                COLDSTART:      
1066   31 00 58               LD   sp,STACK   
1069   CD 3E 10               CALL   coldBoot0   
106C   C3 75 10               JP   start1   
106F                START:       
106F   31 00 58               LD   sp,STACK   ; start Monty
1072   CD 1B 10               CALL   init   ; setups
1075                START1:      
1075   21 0E 5B               LD   hl,titleBuf   
1078   CD C9 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
107B                INTERPRET:      
107B   CD 04 10               CALL   prompt   
107E   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1081   21 00 58               LD   hl,TIB   
1084   22 E6 5A               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1087                INTERPRET2:      ; calculate nesting
1087   1E 00                  LD   e,0   ; initilize nesting value
1089   C5                     PUSH   bc   ; save offset into TIB,
108A                             ; bc is also the count of chars in TIB
108A   21 00 58               LD   hl,TIB   ; hl is start of TIB
108D   18 06                  JR   interpret4   
108F                INTERPRET3:      
108F   7E                     LD   a,(hl)   ; a = char in TIB
1090   23                     INC   hl   ; inc pointer into TIB
1091   0B                     DEC   bc   ; dec count of chars in TIB
1092   CD CE 0F               CALL   nesting   ; update nesting value
1095                INTERPRET4:      
1095   79                     LD   a,c   ; is count zero?
1096   B0                     OR   b   
1097   20 F6                  JR   nz,interpret3   ; if not loop
1099   C1                     POP   bc   ; restore offset into TIB
109A                INTERPRET5:      
109A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
109D   FE 20                  CP   $20   ; compare to space
109F   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10A1   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10A3   28 31                  JR   z,interpret8   
10A5   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10A7   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10A9   FE 08                  CP   CTRL_H   
10AB   CA 27 11               JP   z,backSpace_   
10AE   FE 0A                  CP   CTRL_J   
10B0   CA 37 11               JP   z,reEdit_   
10B3                INTERPRET5A:      
10B3   18 D2                  JR   interpret2   
10B5                INTERPRET6:      
10B5   21 00 58               LD   hl,TIB   
10B8   09                     ADD   hl,bc   
10B9   77                     LD   (hl),a   ; store the character in textbuf
10BA   03                     INC   bc   
10BB   CD 85 00               CALL   putchar   ; echo character to screen
10BE   CD CE 0F               CALL   nesting   
10C1   18 D7                  JR   interpret5   ; wait for next character
10C3                INTERPRET7:      
10C3   21 00 58               LD   hl,TIB   
10C6   09                     ADD   hl,bc   
10C7   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10C9   23                     INC   hl   
10CA   36 0A                  LD   (hl),"\n"   
10CC   23                     INC   hl   
10CD   03                     INC   bc   
10CE   03                     INC   bc   
10CF   CD 0D 10               CALL   crlf   ; echo character to screen
10D2   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10D3   B7                     OR   a   
10D4   20 C4                  JR   nz,interpret5   
10D6                INTERPRET8:      
10D6   21 00 58               LD   hl,TIB   
10D9   09                     ADD   hl,bc   
10DA   22 E6 5A               LD   (vTIBPtr),hl   
10DD   01 00 58               LD   bc,TIB   
10E0   ED 43 FC 5A            LD   (vSavedIP),bc   ; save IP
10E4   ED 73 FE 5A            LD   (vSavedSP),sp   ; save SP
10E8   DD 22 00 5B            LD   (vSavedNext),ix   ; save Next
10EC   FD 22 02 5B            LD   (vSavedBP),iy   ; save BP
10F0   0B                     DEC   bc   
10F1                NEXT:        
10F1   03                     INC   bc   ; Increment the IP
10F2   0A                     LD   a,(bc)   ; Get the next character and dispatch
10F3   FE 20                  CP   " "   ; whitespace?
10F5   28 FA                  JR   z,next   ; space? ignore
10F7   38 0D                  JR   c,next1   
10F9   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
10FB   6F                     LD   l,a   ; index into table
10FC   26 01                  LD   h,msb(opcodes)   ; start address of jump table
10FE   6E                     LD   l,(hl)   ; get low jump address
10FF   24                     INC   h   ; page 2
1100   FE BA                  CP   "Z" - "!" + 1 + $80   
1102   38 01                  JR   c,next0   
1104   24                     INC   h   ; page 3
1105                NEXT0:       
1105   E9                     JP   (hl)   ; Jump to routine
1106                NEXT1:       
1106   FE 00                  CP   NUL   ; end of input string?
1108   28 03                  JR   z,exit   
110A   C3 7B 10               JP   interpret   ; no, other whitespace, macros?
110D                EXIT:        
110D   03                     INC   bc   
110E   60 69                  LD   hl,bc   
1110   E9                     JP   (hl)   
1111                RUN:         
1111   C1                     POP   bc   
1112   0B                     DEC   bc   
1113   DD E9                  JP   (ix)   
1115                ERROR:       
1115   E5                     PUSH   hl   
1116   CD 11 11               CALL   run   
1119   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1124   C3 7B 10               JP   interpret   
1127                BACKSPACE_:      
1127   79                     LD   a,c   
1128   B0                     OR   b   
1129   CA 87 10               JP   z,interpret2   
112C   0B                     DEC   bc   
112D   CD 14 10               CALL   printStr   
1130   08 20 08 00            .CSTR   "\b \b"   
1134   C3 87 10               JP   interpret2   
1137                REEDIT_:      
1137   CD 14 10               CALL   printStr   
113A   0D 3E 20 00            .CSTR   "\r> "   
113E   21 00 58               LD   hl,TIB   
1141   18 04                  JR   reEdit1   
1143                REEDIT0:      
1143   CD 85 00               CALL   putchar   
1146   23                     INC   hl   
1147                REEDIT1:      
1147   7E                     LD   a,(hl)   
1148   FE 0D                  CP   "\r"   
114A   20 F7                  JR   nz,reEdit0   
114C   11 00 58               LD   de,TIB   
114F   B7                     OR   a   
1150   ED 52                  SBC   hl,de   
1152   44 4D                  LD   bc,hl   
1154   C3 87 10               JP   interpret2   
1157                          ;*Macro unroll: FUNC f1, 0, ""
1157                F1:          
1157   CD 9F 03               CALL   go   
115A   00 00                  DW   NUL   
115C   62 11                  DW   f1M_3030S12   
115E   60 11                  DW   $+2   
1160   00                     DB   0   
1161   00                     .PSTR   ""   
1162                F1M_3030S12:      
1162   00                     DB   0   
1163                          ;*Macro unroll: FUNC f2, 0, ""
1163                F2:          
1163   CD 9F 03               CALL   go   
1166   00 00                  DW   NUL   
1168   6E 11                  DW   f2M_3032S15   
116A   6C 11                  DW   $+2   
116C   00                     DB   0   
116D   00                     .PSTR   ""   
116E                F2M_3032S15:      
116E   00                     DB   0   
116F                          ;*Macro unroll: FUNC f3, 0, ""
116F                F3:          
116F   CD 9F 03               CALL   go   
1172   00 00                  DW   NUL   
1174   7A 11                  DW   f3M_3034S18   
1176   78 11                  DW   $+2   
1178   00                     DB   0   
1179   00                     .PSTR   ""   
117A                F3M_3034S18:      
117A   00                     DB   0   
117B                          ;*Macro unroll: FUNC f4, 0, ""
117B                F4:          
117B   CD 9F 03               CALL   go   
117E   00 00                  DW   NUL   
1180   86 11                  DW   f4M_3036S21   
1182   84 11                  DW   $+2   
1184   00                     DB   0   
1185   00                     .PSTR   ""   
1186                F4M_3036S21:      
1186   00                     DB   0   
1187                          ALIGN   $100   
1200                TESTSSTART:      
1200                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1200                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1200                             ; test "[1 2 3].a", 0
1200                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1200                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1200                             ; test "/hx /byt $1234.",0
1200                             ; test "/byt 257.",0
1200                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1200                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1200                             ; test "0 x = 2 x + = x .", false
1200                             ; call printStr
1200                             ; .cstr "Done!"
1200                             ; HALT
1200                          ;*Macro unroll:  test "/f", false
1200   31 00 58               LD   SP,STACK   
1203   CD 48 10               CALL   coldInit   
1206   CD A4 56               CALL   execStr   
1209   2F 66 00               DB   "/f",0   
120C   E1                     POP   HL   
120D   E5                     PUSH   HL   
120E   11 00 00               LD   DE,false   
1211   B7                     OR   A   
1212   ED 52                  SBC   HL,DE   
1214   7D                     LD   A,L   
1215   B4                     OR   H   
1216   CA 6F 12               JP   Z,expectM_3057S49   
1219   CD 14 10               CALL   printStr   
121C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1225   CD 14 10               CALL   printStr   
1228   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1237   21 00 00               LD   hl,false   
123A   E5                     PUSH   hl   
123B   E5                     PUSH   hl   
123C   CD 11 11               CALL   run   
123F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1249   CD 14 10               CALL   printStr   
124C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1259   E1                     POP   hl   
125A   E5                     PUSH   hl   
125B   E5                     PUSH   hl   
125C   CD 11 11               CALL   run   
125F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
126E   76                     HALT      
126F                EXPECTM_3057S49:      
126F   E1                     POP   HL   
1270                          ;*Macro unroll:  test "/t", true
1270   31 00 58               LD   SP,STACK   
1273   CD 48 10               CALL   coldInit   
1276   CD A4 56               CALL   execStr   
1279   2F 74 00               DB   "/t",0   
127C   E1                     POP   HL   
127D   E5                     PUSH   HL   
127E   11 FF FF               LD   DE,true   
1281   B7                     OR   A   
1282   ED 52                  SBC   HL,DE   
1284   7D                     LD   A,L   
1285   B4                     OR   H   
1286   CA DF 12               JP   Z,expectM_3058S50   
1289   CD 14 10               CALL   printStr   
128C   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1295   CD 14 10               CALL   printStr   
1298   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A7   21 FF FF               LD   hl,true   
12AA   E5                     PUSH   hl   
12AB   E5                     PUSH   hl   
12AC   CD 11 11               CALL   run   
12AF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
12B9   CD 14 10               CALL   printStr   
12BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C9   E1                     POP   hl   
12CA   E5                     PUSH   hl   
12CB   E5                     PUSH   hl   
12CC   CD 11 11               CALL   run   
12CF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
12DE   76                     HALT      
12DF                EXPECTM_3058S50:      
12DF   E1                     POP   HL   
12E0                          ;*Macro unroll:  test "1", 1
12E0   31 00 58               LD   SP,STACK   
12E3   CD 48 10               CALL   coldInit   
12E6   CD A4 56               CALL   execStr   
12E9   31 00                  DB   "1",0   
12EB   E1                     POP   HL   
12EC   E5                     PUSH   HL   
12ED   11 01 00               LD   DE,1   
12F0   B7                     OR   A   
12F1   ED 52                  SBC   HL,DE   
12F3   7D                     LD   A,L   
12F4   B4                     OR   H   
12F5   CA 4D 13               JP   Z,expectM_3059S51   
12F8   CD 14 10               CALL   printStr   
12FB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1303   CD 14 10               CALL   printStr   
1306   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1315   21 01 00               LD   hl,1   
1318   E5                     PUSH   hl   
1319   E5                     PUSH   hl   
131A   CD 11 11               CALL   run   
131D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1327   CD 14 10               CALL   printStr   
132A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1337   E1                     POP   hl   
1338   E5                     PUSH   hl   
1339   E5                     PUSH   hl   
133A   CD 11 11               CALL   run   
133D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
134C   76                     HALT      
134D                EXPECTM_3059S51:      
134D   E1                     POP   HL   
134E                          ;*Macro unroll:  test "2", 2
134E   31 00 58               LD   SP,STACK   
1351   CD 48 10               CALL   coldInit   
1354   CD A4 56               CALL   execStr   
1357   32 00                  DB   "2",0   
1359   E1                     POP   HL   
135A   E5                     PUSH   HL   
135B   11 02 00               LD   DE,2   
135E   B7                     OR   A   
135F   ED 52                  SBC   HL,DE   
1361   7D                     LD   A,L   
1362   B4                     OR   H   
1363   CA BB 13               JP   Z,expectM_3060S52   
1366   CD 14 10               CALL   printStr   
1369   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1371   CD 14 10               CALL   printStr   
1374   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1383   21 02 00               LD   hl,2   
1386   E5                     PUSH   hl   
1387   E5                     PUSH   hl   
1388   CD 11 11               CALL   run   
138B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1395   CD 14 10               CALL   printStr   
1398   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A5   E1                     POP   hl   
13A6   E5                     PUSH   hl   
13A7   E5                     PUSH   hl   
13A8   CD 11 11               CALL   run   
13AB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
13BA   76                     HALT      
13BB                EXPECTM_3060S52:      
13BB   E1                     POP   HL   
13BC                          ;*Macro unroll:  test "1", 1
13BC   31 00 58               LD   SP,STACK   
13BF   CD 48 10               CALL   coldInit   
13C2   CD A4 56               CALL   execStr   
13C5   31 00                  DB   "1",0   
13C7   E1                     POP   HL   
13C8   E5                     PUSH   HL   
13C9   11 01 00               LD   DE,1   
13CC   B7                     OR   A   
13CD   ED 52                  SBC   HL,DE   
13CF   7D                     LD   A,L   
13D0   B4                     OR   H   
13D1   CA 29 14               JP   Z,expectM_3061S53   
13D4   CD 14 10               CALL   printStr   
13D7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13DF   CD 14 10               CALL   printStr   
13E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13F1   21 01 00               LD   hl,1   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD 11 11               CALL   run   
13F9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1403   CD 14 10               CALL   printStr   
1406   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1413   E1                     POP   hl   
1414   E5                     PUSH   hl   
1415   E5                     PUSH   hl   
1416   CD 11 11               CALL   run   
1419   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1428   76                     HALT      
1429                EXPECTM_3061S53:      
1429   E1                     POP   HL   
142A                          ;*Macro unroll:  test "0", 0
142A   31 00 58               LD   SP,STACK   
142D   CD 48 10               CALL   coldInit   
1430   CD A4 56               CALL   execStr   
1433   30 00                  DB   "0",0   
1435   E1                     POP   HL   
1436   E5                     PUSH   HL   
1437   11 00 00               LD   DE,0   
143A   B7                     OR   A   
143B   ED 52                  SBC   HL,DE   
143D   7D                     LD   A,L   
143E   B4                     OR   H   
143F   CA 97 14               JP   Z,expectM_3062S54   
1442   CD 14 10               CALL   printStr   
1445   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
144D   CD 14 10               CALL   printStr   
1450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145F   21 00 00               LD   hl,0   
1462   E5                     PUSH   hl   
1463   E5                     PUSH   hl   
1464   CD 11 11               CALL   run   
1467   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1471   CD 14 10               CALL   printStr   
1474   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1481   E1                     POP   hl   
1482   E5                     PUSH   hl   
1483   E5                     PUSH   hl   
1484   CD 11 11               CALL   run   
1487   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1496   76                     HALT      
1497                EXPECTM_3062S54:      
1497   E1                     POP   HL   
1498                          ;*Macro unroll:  test "10", 10
1498   31 00 58               LD   SP,STACK   
149B   CD 48 10               CALL   coldInit   
149E   CD A4 56               CALL   execStr   
14A1   31 30 00               DB   "10",0   
14A4   E1                     POP   HL   
14A5   E5                     PUSH   HL   
14A6   11 0A 00               LD   DE,10   
14A9   B7                     OR   A   
14AA   ED 52                  SBC   HL,DE   
14AC   7D                     LD   A,L   
14AD   B4                     OR   H   
14AE   CA 07 15               JP   Z,expectM_3063S55   
14B1   CD 14 10               CALL   printStr   
14B4   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
14BD   CD 14 10               CALL   printStr   
14C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CF   21 0A 00               LD   hl,10   
14D2   E5                     PUSH   hl   
14D3   E5                     PUSH   hl   
14D4   CD 11 11               CALL   run   
14D7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
14E1   CD 14 10               CALL   printStr   
14E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14F1   E1                     POP   hl   
14F2   E5                     PUSH   hl   
14F3   E5                     PUSH   hl   
14F4   CD 11 11               CALL   run   
14F7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1506   76                     HALT      
1507                EXPECTM_3063S55:      
1507   E1                     POP   HL   
1508                          ;*Macro unroll:  test "123", 123
1508   31 00 58               LD   SP,STACK   
150B   CD 48 10               CALL   coldInit   
150E   CD A4 56               CALL   execStr   
1511   31 32 33 00            DB   "123",0   
1515   E1                     POP   HL   
1516   E5                     PUSH   HL   
1517   11 7B 00               LD   DE,123   
151A   B7                     OR   A   
151B   ED 52                  SBC   HL,DE   
151D   7D                     LD   A,L   
151E   B4                     OR   H   
151F   CA 79 15               JP   Z,expectM_3064S56   
1522   CD 14 10               CALL   printStr   
1525   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
152F   CD 14 10               CALL   printStr   
1532   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1541   21 7B 00               LD   hl,123   
1544   E5                     PUSH   hl   
1545   E5                     PUSH   hl   
1546   CD 11 11               CALL   run   
1549   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1553   CD 14 10               CALL   printStr   
1556   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1563   E1                     POP   hl   
1564   E5                     PUSH   hl   
1565   E5                     PUSH   hl   
1566   CD 11 11               CALL   run   
1569   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1578   76                     HALT      
1579                EXPECTM_3064S56:      
1579   E1                     POP   HL   
157A                          ;*Macro unroll:  test "-1",-1
157A   31 00 58               LD   SP,STACK   
157D   CD 48 10               CALL   coldInit   
1580   CD A4 56               CALL   execStr   
1583   2D 31 00               DB   "-1",0   
1586   E1                     POP   HL   
1587   E5                     PUSH   HL   
1588   11 FF FF               LD   DE,-1   
158B   B7                     OR   A   
158C   ED 52                  SBC   HL,DE   
158E   7D                     LD   A,L   
158F   B4                     OR   H   
1590   CA E9 15               JP   Z,expectM_3065S57   
1593   CD 14 10               CALL   printStr   
1596   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
159F   CD 14 10               CALL   printStr   
15A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15B1   21 FF FF               LD   hl,-1   
15B4   E5                     PUSH   hl   
15B5   E5                     PUSH   hl   
15B6   CD 11 11               CALL   run   
15B9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
15C3   CD 14 10               CALL   printStr   
15C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15D3   E1                     POP   hl   
15D4   E5                     PUSH   hl   
15D5   E5                     PUSH   hl   
15D6   CD 11 11               CALL   run   
15D9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
15E8   76                     HALT      
15E9                EXPECTM_3065S57:      
15E9   E1                     POP   HL   
15EA                          ;*Macro unroll:  test "-1/abs",1
15EA   31 00 58               LD   SP,STACK   
15ED   CD 48 10               CALL   coldInit   
15F0   CD A4 56               CALL   execStr   
15F3   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
15FA   E1                     POP   HL   
15FB   E5                     PUSH   HL   
15FC   11 01 00               LD   DE,1   
15FF   B7                     OR   A   
1600   ED 52                  SBC   HL,DE   
1602   7D                     LD   A,L   
1603   B4                     OR   H   
1604   CA 61 16               JP   Z,expectM_3066S58   
1607   CD 14 10               CALL   printStr   
160A   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
1617   CD 14 10               CALL   printStr   
161A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1629   21 01 00               LD   hl,1   
162C   E5                     PUSH   hl   
162D   E5                     PUSH   hl   
162E   CD 11 11               CALL   run   
1631   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
163B   CD 14 10               CALL   printStr   
163E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164B   E1                     POP   hl   
164C   E5                     PUSH   hl   
164D   E5                     PUSH   hl   
164E   CD 11 11               CALL   run   
1651   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1660   76                     HALT      
1661                EXPECTM_3066S58:      
1661   E1                     POP   HL   
1662                          ;*Macro unroll:  test "_a", $61
1662   31 00 58               LD   SP,STACK   
1665   CD 48 10               CALL   coldInit   
1668   CD A4 56               CALL   execStr   
166B   5F 61 00               DB   "_a",0   
166E   E1                     POP   HL   
166F   E5                     PUSH   HL   
1670   11 61 00               LD   DE,$61   
1673   B7                     OR   A   
1674   ED 52                  SBC   HL,DE   
1676   7D                     LD   A,L   
1677   B4                     OR   H   
1678   CA D1 16               JP   Z,expectM_3067S59   
167B   CD 14 10               CALL   printStr   
167E   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1687   CD 14 10               CALL   printStr   
168A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1699   21 61 00               LD   hl,$61   
169C   E5                     PUSH   hl   
169D   E5                     PUSH   hl   
169E   CD 11 11               CALL   run   
16A1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
16AB   CD 14 10               CALL   printStr   
16AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16BB   E1                     POP   hl   
16BC   E5                     PUSH   hl   
16BD   E5                     PUSH   hl   
16BE   CD 11 11               CALL   run   
16C1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
16D0   76                     HALT      
16D1                EXPECTM_3067S59:      
16D1   E1                     POP   HL   
16D2                          ;*Macro unroll:  test "__", $5F
16D2   31 00 58               LD   SP,STACK   
16D5   CD 48 10               CALL   coldInit   
16D8   CD A4 56               CALL   execStr   
16DB   5F 5F 00               DB   "__",0   
16DE   E1                     POP   HL   
16DF   E5                     PUSH   HL   
16E0   11 5F 00               LD   DE,$5F   
16E3   B7                     OR   A   
16E4   ED 52                  SBC   HL,DE   
16E6   7D                     LD   A,L   
16E7   B4                     OR   H   
16E8   CA 41 17               JP   Z,expectM_3068S60   
16EB   CD 14 10               CALL   printStr   
16EE   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
16F7   CD 14 10               CALL   printStr   
16FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1709   21 5F 00               LD   hl,$5F   
170C   E5                     PUSH   hl   
170D   E5                     PUSH   hl   
170E   CD 11 11               CALL   run   
1711   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
171B   CD 14 10               CALL   printStr   
171E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
172B   E1                     POP   hl   
172C   E5                     PUSH   hl   
172D   E5                     PUSH   hl   
172E   CD 11 11               CALL   run   
1731   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1740   76                     HALT      
1741                EXPECTM_3068S60:      
1741   E1                     POP   HL   
1742                          ;*Macro unroll:  test "$10", $10
1742   31 00 58               LD   SP,STACK   
1745   CD 48 10               CALL   coldInit   
1748   CD A4 56               CALL   execStr   
174B   24 31 30 00            DB   "$10",0   
174F   E1                     POP   HL   
1750   E5                     PUSH   HL   
1751   11 10 00               LD   DE,$10   
1754   B7                     OR   A   
1755   ED 52                  SBC   HL,DE   
1757   7D                     LD   A,L   
1758   B4                     OR   H   
1759   CA B3 17               JP   Z,expectM_3069S61   
175C   CD 14 10               CALL   printStr   
175F   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1769   CD 14 10               CALL   printStr   
176C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
177B   21 10 00               LD   hl,$10   
177E   E5                     PUSH   hl   
177F   E5                     PUSH   hl   
1780   CD 11 11               CALL   run   
1783   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
178D   CD 14 10               CALL   printStr   
1790   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179D   E1                     POP   hl   
179E   E5                     PUSH   hl   
179F   E5                     PUSH   hl   
17A0   CD 11 11               CALL   run   
17A3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
17B2   76                     HALT      
17B3                EXPECTM_3069S61:      
17B3   E1                     POP   HL   
17B4                          ;*Macro unroll:  test "$FF", $FF
17B4   31 00 58               LD   SP,STACK   
17B7   CD 48 10               CALL   coldInit   
17BA   CD A4 56               CALL   execStr   
17BD   24 46 46 00            DB   "$FF",0   
17C1   E1                     POP   HL   
17C2   E5                     PUSH   HL   
17C3   11 FF 00               LD   DE,$FF   
17C6   B7                     OR   A   
17C7   ED 52                  SBC   HL,DE   
17C9   7D                     LD   A,L   
17CA   B4                     OR   H   
17CB   CA 25 18               JP   Z,expectM_3070S62   
17CE   CD 14 10               CALL   printStr   
17D1   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
17DB   CD 14 10               CALL   printStr   
17DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17ED   21 FF 00               LD   hl,$FF   
17F0   E5                     PUSH   hl   
17F1   E5                     PUSH   hl   
17F2   CD 11 11               CALL   run   
17F5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
17FF   CD 14 10               CALL   printStr   
1802   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
180F   E1                     POP   hl   
1810   E5                     PUSH   hl   
1811   E5                     PUSH   hl   
1812   CD 11 11               CALL   run   
1815   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1824   76                     HALT      
1825                EXPECTM_3070S62:      
1825   E1                     POP   HL   
1826                          ;*Macro unroll:  test "-1 2 +",1
1826   31 00 58               LD   SP,STACK   
1829   CD 48 10               CALL   coldInit   
182C   CD A4 56               CALL   execStr   
182F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1836   E1                     POP   HL   
1837   E5                     PUSH   HL   
1838   11 01 00               LD   DE,1   
183B   B7                     OR   A   
183C   ED 52                  SBC   HL,DE   
183E   7D                     LD   A,L   
183F   B4                     OR   H   
1840   CA 9D 18               JP   Z,expectM_3071S63   
1843   CD 14 10               CALL   printStr   
1846   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1853   CD 14 10               CALL   printStr   
1856   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1865   21 01 00               LD   hl,1   
1868   E5                     PUSH   hl   
1869   E5                     PUSH   hl   
186A   CD 11 11               CALL   run   
186D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1877   CD 14 10               CALL   printStr   
187A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1887   E1                     POP   hl   
1888   E5                     PUSH   hl   
1889   E5                     PUSH   hl   
188A   CD 11 11               CALL   run   
188D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
189C   76                     HALT      
189D                EXPECTM_3071S63:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "-1 1 +",0
189E   31 00 58               LD   SP,STACK   
18A1   CD 48 10               CALL   coldInit   
18A4   CD A4 56               CALL   execStr   
18A7   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
18AE   E1                     POP   HL   
18AF   E5                     PUSH   HL   
18B0   11 00 00               LD   DE,0   
18B3   B7                     OR   A   
18B4   ED 52                  SBC   HL,DE   
18B6   7D                     LD   A,L   
18B7   B4                     OR   H   
18B8   CA 15 19               JP   Z,expectM_3072S64   
18BB   CD 14 10               CALL   printStr   
18BE   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
18CB   CD 14 10               CALL   printStr   
18CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DD   21 00 00               LD   hl,0   
18E0   E5                     PUSH   hl   
18E1   E5                     PUSH   hl   
18E2   CD 11 11               CALL   run   
18E5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
18EF   CD 14 10               CALL   printStr   
18F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FF   E1                     POP   hl   
1900   E5                     PUSH   hl   
1901   E5                     PUSH   hl   
1902   CD 11 11               CALL   run   
1905   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1914   76                     HALT      
1915                EXPECTM_3072S64:      
1915   E1                     POP   HL   
1916                          ;*Macro unroll:  test "1 2 +", 3
1916   31 00 58               LD   SP,STACK   
1919   CD 48 10               CALL   coldInit   
191C   CD A4 56               CALL   execStr   
191F   31 20 32 20 2B 00      DB   "1 2 +",0   
1925   E1                     POP   HL   
1926   E5                     PUSH   HL   
1927   11 03 00               LD   DE,3   
192A   B7                     OR   A   
192B   ED 52                  SBC   HL,DE   
192D   7D                     LD   A,L   
192E   B4                     OR   H   
192F   CA 8B 19               JP   Z,expectM_3073S65   
1932   CD 14 10               CALL   printStr   
1935   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1941   CD 14 10               CALL   printStr   
1944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1953   21 03 00               LD   hl,3   
1956   E5                     PUSH   hl   
1957   E5                     PUSH   hl   
1958   CD 11 11               CALL   run   
195B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1965   CD 14 10               CALL   printStr   
1968   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1975   E1                     POP   hl   
1976   E5                     PUSH   hl   
1977   E5                     PUSH   hl   
1978   CD 11 11               CALL   run   
197B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
198A   76                     HALT      
198B                EXPECTM_3073S65:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "4 1 2 +", 3
198C   31 00 58               LD   SP,STACK   
198F   CD 48 10               CALL   coldInit   
1992   CD A4 56               CALL   execStr   
1995   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
199D   E1                     POP   HL   
199E   E5                     PUSH   HL   
199F   11 03 00               LD   DE,3   
19A2   B7                     OR   A   
19A3   ED 52                  SBC   HL,DE   
19A5   7D                     LD   A,L   
19A6   B4                     OR   H   
19A7   CA 05 1A               JP   Z,expectM_3074S66   
19AA   CD 14 10               CALL   printStr   
19AD   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
19BB   CD 14 10               CALL   printStr   
19BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CD   21 03 00               LD   hl,3   
19D0   E5                     PUSH   hl   
19D1   E5                     PUSH   hl   
19D2   CD 11 11               CALL   run   
19D5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
19DF   CD 14 10               CALL   printStr   
19E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EF   E1                     POP   hl   
19F0   E5                     PUSH   hl   
19F1   E5                     PUSH   hl   
19F2   CD 11 11               CALL   run   
19F5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1A04   76                     HALT      
1A05                EXPECTM_3074S66:      
1A05   E1                     POP   HL   
1A06                          ;*Macro unroll:  test "123 456 +", 123+456
1A06   31 00 58               LD   SP,STACK   
1A09   CD 48 10               CALL   coldInit   
1A0C   CD A4 56               CALL   execStr   
1A0F   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1A19   E1                     POP   HL   
1A1A   E5                     PUSH   HL   
1A1B   11 43 02               LD   DE,123+456   
1A1E   B7                     OR   A   
1A1F   ED 52                  SBC   HL,DE   
1A21   7D                     LD   A,L   
1A22   B4                     OR   H   
1A23   CA 83 1A               JP   Z,expectM_3075S67   
1A26   CD 14 10               CALL   printStr   
1A29   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1A39   CD 14 10               CALL   printStr   
1A3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4B   21 43 02               LD   hl,123+456   
1A4E   E5                     PUSH   hl   
1A4F   E5                     PUSH   hl   
1A50   CD 11 11               CALL   run   
1A53   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1A5D   CD 14 10               CALL   printStr   
1A60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A6D   E1                     POP   hl   
1A6E   E5                     PUSH   hl   
1A6F   E5                     PUSH   hl   
1A70   CD 11 11               CALL   run   
1A73   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1A82   76                     HALT      
1A83                EXPECTM_3075S67:      
1A83   E1                     POP   HL   
1A84                          ;*Macro unroll:  test "64 128 +", 64+128
1A84   31 00 58               LD   SP,STACK   
1A87   CD 48 10               CALL   coldInit   
1A8A   CD A4 56               CALL   execStr   
1A8D   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1A96   E1                     POP   HL   
1A97   E5                     PUSH   HL   
1A98   11 C0 00               LD   DE,64+128   
1A9B   B7                     OR   A   
1A9C   ED 52                  SBC   HL,DE   
1A9E   7D                     LD   A,L   
1A9F   B4                     OR   H   
1AA0   CA FF 1A               JP   Z,expectM_3076S68   
1AA3   CD 14 10               CALL   printStr   
1AA6   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1AB5   CD 14 10               CALL   printStr   
1AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AC7   21 C0 00               LD   hl,64+128   
1ACA   E5                     PUSH   hl   
1ACB   E5                     PUSH   hl   
1ACC   CD 11 11               CALL   run   
1ACF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1AD9   CD 14 10               CALL   printStr   
1ADC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE9   E1                     POP   hl   
1AEA   E5                     PUSH   hl   
1AEB   E5                     PUSH   hl   
1AEC   CD 11 11               CALL   run   
1AEF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1AFE   76                     HALT      
1AFF                EXPECTM_3076S68:      
1AFF   E1                     POP   HL   
1B00                          ;*Macro unroll:  test "1 2 +", 3
1B00   31 00 58               LD   SP,STACK   
1B03   CD 48 10               CALL   coldInit   
1B06   CD A4 56               CALL   execStr   
1B09   31 20 32 20 2B 00      DB   "1 2 +",0   
1B0F   E1                     POP   HL   
1B10   E5                     PUSH   HL   
1B11   11 03 00               LD   DE,3   
1B14   B7                     OR   A   
1B15   ED 52                  SBC   HL,DE   
1B17   7D                     LD   A,L   
1B18   B4                     OR   H   
1B19   CA 75 1B               JP   Z,expectM_3077S69   
1B1C   CD 14 10               CALL   printStr   
1B1F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1B2B   CD 14 10               CALL   printStr   
1B2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B3D   21 03 00               LD   hl,3   
1B40   E5                     PUSH   hl   
1B41   E5                     PUSH   hl   
1B42   CD 11 11               CALL   run   
1B45   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1B4F   CD 14 10               CALL   printStr   
1B52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B5F   E1                     POP   hl   
1B60   E5                     PUSH   hl   
1B61   E5                     PUSH   hl   
1B62   CD 11 11               CALL   run   
1B65   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1B74   76                     HALT      
1B75                EXPECTM_3077S69:      
1B75   E1                     POP   HL   
1B76                          ;*Macro unroll:  test "1a= a++ a",2
1B76   31 00 58               LD   SP,STACK   
1B79   CD 48 10               CALL   coldInit   
1B7C   CD A4 56               CALL   execStr   
1B7F   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1B89   E1                     POP   HL   
1B8A   E5                     PUSH   HL   
1B8B   11 02 00               LD   DE,2   
1B8E   B7                     OR   A   
1B8F   ED 52                  SBC   HL,DE   
1B91   7D                     LD   A,L   
1B92   B4                     OR   H   
1B93   CA F3 1B               JP   Z,expectM_3078S70   
1B96   CD 14 10               CALL   printStr   
1B99   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1BA9   CD 14 10               CALL   printStr   
1BAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBB   21 02 00               LD   hl,2   
1BBE   E5                     PUSH   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD 11 11               CALL   run   
1BC3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1BCD   CD 14 10               CALL   printStr   
1BD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BDD   E1                     POP   hl   
1BDE   E5                     PUSH   hl   
1BDF   E5                     PUSH   hl   
1BE0   CD 11 11               CALL   run   
1BE3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1BF2   76                     HALT      
1BF3                EXPECTM_3078S70:      
1BF3   E1                     POP   HL   
1BF4                          ;*Macro unroll:  test "-1 -1 -",0
1BF4   31 00 58               LD   SP,STACK   
1BF7   CD 48 10               CALL   coldInit   
1BFA   CD A4 56               CALL   execStr   
1BFD   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1C05   E1                     POP   HL   
1C06   E5                     PUSH   HL   
1C07   11 00 00               LD   DE,0   
1C0A   B7                     OR   A   
1C0B   ED 52                  SBC   HL,DE   
1C0D   7D                     LD   A,L   
1C0E   B4                     OR   H   
1C0F   CA 6D 1C               JP   Z,expectM_3079S71   
1C12   CD 14 10               CALL   printStr   
1C15   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1C23   CD 14 10               CALL   printStr   
1C26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C35   21 00 00               LD   hl,0   
1C38   E5                     PUSH   hl   
1C39   E5                     PUSH   hl   
1C3A   CD 11 11               CALL   run   
1C3D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1C47   CD 14 10               CALL   printStr   
1C4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C57   E1                     POP   hl   
1C58   E5                     PUSH   hl   
1C59   E5                     PUSH   hl   
1C5A   CD 11 11               CALL   run   
1C5D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1C6C   76                     HALT      
1C6D                EXPECTM_3079S71:      
1C6D   E1                     POP   HL   
1C6E                          ;*Macro unroll:  test "5 3 -", 2
1C6E   31 00 58               LD   SP,STACK   
1C71   CD 48 10               CALL   coldInit   
1C74   CD A4 56               CALL   execStr   
1C77   35 20 33 20 2D 00      DB   "5 3 -",0   
1C7D   E1                     POP   HL   
1C7E   E5                     PUSH   HL   
1C7F   11 02 00               LD   DE,2   
1C82   B7                     OR   A   
1C83   ED 52                  SBC   HL,DE   
1C85   7D                     LD   A,L   
1C86   B4                     OR   H   
1C87   CA E3 1C               JP   Z,expectM_3080S72   
1C8A   CD 14 10               CALL   printStr   
1C8D   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1C99   CD 14 10               CALL   printStr   
1C9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CAB   21 02 00               LD   hl,2   
1CAE   E5                     PUSH   hl   
1CAF   E5                     PUSH   hl   
1CB0   CD 11 11               CALL   run   
1CB3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1CBD   CD 14 10               CALL   printStr   
1CC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CCD   E1                     POP   hl   
1CCE   E5                     PUSH   hl   
1CCF   E5                     PUSH   hl   
1CD0   CD 11 11               CALL   run   
1CD3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1CE2   76                     HALT      
1CE3                EXPECTM_3080S72:      
1CE3   E1                     POP   HL   
1CE4                          ;*Macro unroll:  test "2 1 -",1
1CE4   31 00 58               LD   SP,STACK   
1CE7   CD 48 10               CALL   coldInit   
1CEA   CD A4 56               CALL   execStr   
1CED   32 20 31 20 2D 00      DB   "2 1 -",0   
1CF3   E1                     POP   HL   
1CF4   E5                     PUSH   HL   
1CF5   11 01 00               LD   DE,1   
1CF8   B7                     OR   A   
1CF9   ED 52                  SBC   HL,DE   
1CFB   7D                     LD   A,L   
1CFC   B4                     OR   H   
1CFD   CA 59 1D               JP   Z,expectM_3081S73   
1D00   CD 14 10               CALL   printStr   
1D03   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1D0F   CD 14 10               CALL   printStr   
1D12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D21   21 01 00               LD   hl,1   
1D24   E5                     PUSH   hl   
1D25   E5                     PUSH   hl   
1D26   CD 11 11               CALL   run   
1D29   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1D33   CD 14 10               CALL   printStr   
1D36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D43   E1                     POP   hl   
1D44   E5                     PUSH   hl   
1D45   E5                     PUSH   hl   
1D46   CD 11 11               CALL   run   
1D49   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1D58   76                     HALT      
1D59                EXPECTM_3081S73:      
1D59   E1                     POP   HL   
1D5A                          ;*Macro unroll:  test "3a= a-- a",2
1D5A   31 00 58               LD   SP,STACK   
1D5D   CD 48 10               CALL   coldInit   
1D60   CD A4 56               CALL   execStr   
1D63   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1D6D   E1                     POP   HL   
1D6E   E5                     PUSH   HL   
1D6F   11 02 00               LD   DE,2   
1D72   B7                     OR   A   
1D73   ED 52                  SBC   HL,DE   
1D75   7D                     LD   A,L   
1D76   B4                     OR   H   
1D77   CA D7 1D               JP   Z,expectM_3082S74   
1D7A   CD 14 10               CALL   printStr   
1D7D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1D8D   CD 14 10               CALL   printStr   
1D90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D9F   21 02 00               LD   hl,2   
1DA2   E5                     PUSH   hl   
1DA3   E5                     PUSH   hl   
1DA4   CD 11 11               CALL   run   
1DA7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1DB1   CD 14 10               CALL   printStr   
1DB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC1   E1                     POP   hl   
1DC2   E5                     PUSH   hl   
1DC3   E5                     PUSH   hl   
1DC4   CD 11 11               CALL   run   
1DC7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1DD6   76                     HALT      
1DD7                EXPECTM_3082S74:      
1DD7   E1                     POP   HL   
1DD8                          ;*Macro unroll:  test "3 5 &", 1
1DD8   31 00 58               LD   SP,STACK   
1DDB   CD 48 10               CALL   coldInit   
1DDE   CD A4 56               CALL   execStr   
1DE1   33 20 35 20 26 00      DB   "3 5 &",0   
1DE7   E1                     POP   HL   
1DE8   E5                     PUSH   HL   
1DE9   11 01 00               LD   DE,1   
1DEC   B7                     OR   A   
1DED   ED 52                  SBC   HL,DE   
1DEF   7D                     LD   A,L   
1DF0   B4                     OR   H   
1DF1   CA 4D 1E               JP   Z,expectM_3083S75   
1DF4   CD 14 10               CALL   printStr   
1DF7   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1E03   CD 14 10               CALL   printStr   
1E06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E15   21 01 00               LD   hl,1   
1E18   E5                     PUSH   hl   
1E19   E5                     PUSH   hl   
1E1A   CD 11 11               CALL   run   
1E1D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1E27   CD 14 10               CALL   printStr   
1E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E37   E1                     POP   hl   
1E38   E5                     PUSH   hl   
1E39   E5                     PUSH   hl   
1E3A   CD 11 11               CALL   run   
1E3D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1E4C   76                     HALT      
1E4D                EXPECTM_3083S75:      
1E4D   E1                     POP   HL   
1E4E                          ;*Macro unroll:  test "3 5 |", 7
1E4E   31 00 58               LD   SP,STACK   
1E51   CD 48 10               CALL   coldInit   
1E54   CD A4 56               CALL   execStr   
1E57   33 20 35 20 7C 00      DB   "3 5 |",0   
1E5D   E1                     POP   HL   
1E5E   E5                     PUSH   HL   
1E5F   11 07 00               LD   DE,7   
1E62   B7                     OR   A   
1E63   ED 52                  SBC   HL,DE   
1E65   7D                     LD   A,L   
1E66   B4                     OR   H   
1E67   CA C3 1E               JP   Z,expectM_3084S76   
1E6A   CD 14 10               CALL   printStr   
1E6D   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1E79   CD 14 10               CALL   printStr   
1E7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E8B   21 07 00               LD   hl,7   
1E8E   E5                     PUSH   hl   
1E8F   E5                     PUSH   hl   
1E90   CD 11 11               CALL   run   
1E93   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1E9D   CD 14 10               CALL   printStr   
1EA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EAD   E1                     POP   hl   
1EAE   E5                     PUSH   hl   
1EAF   E5                     PUSH   hl   
1EB0   CD 11 11               CALL   run   
1EB3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1EC2   76                     HALT      
1EC3                EXPECTM_3084S76:      
1EC3   E1                     POP   HL   
1EC4                          ;*Macro unroll:  test "3 5 /xor", 6
1EC4   31 00 58               LD   SP,STACK   
1EC7   CD 48 10               CALL   coldInit   
1ECA   CD A4 56               CALL   execStr   
1ECD   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1ED6   E1                     POP   HL   
1ED7   E5                     PUSH   HL   
1ED8   11 06 00               LD   DE,6   
1EDB   B7                     OR   A   
1EDC   ED 52                  SBC   HL,DE   
1EDE   7D                     LD   A,L   
1EDF   B4                     OR   H   
1EE0   CA 3F 1F               JP   Z,expectM_3085S77   
1EE3   CD 14 10               CALL   printStr   
1EE6   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
1EF5   CD 14 10               CALL   printStr   
1EF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F07   21 06 00               LD   hl,6   
1F0A   E5                     PUSH   hl   
1F0B   E5                     PUSH   hl   
1F0C   CD 11 11               CALL   run   
1F0F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1F19   CD 14 10               CALL   printStr   
1F1C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F29   E1                     POP   hl   
1F2A   E5                     PUSH   hl   
1F2B   E5                     PUSH   hl   
1F2C   CD 11 11               CALL   run   
1F2F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1F3E   76                     HALT      
1F3F                EXPECTM_3085S77:      
1F3F   E1                     POP   HL   
1F40                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
1F40   31 00 58               LD   SP,STACK   
1F43   CD 48 10               CALL   coldInit   
1F46   CD A4 56               CALL   execStr   
1F49   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
1F5A   E1                     POP   HL   
1F5B   E5                     PUSH   HL   
1F5C   11 06 00               LD   DE,6   
1F5F   B7                     OR   A   
1F60   ED 52                  SBC   HL,DE   
1F62   7D                     LD   A,L   
1F63   B4                     OR   H   
1F64   CA CB 1F               JP   Z,expectM_3086S78   
1F67   CD 14 10               CALL   printStr   
1F6A   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
1F81   CD 14 10               CALL   printStr   
1F84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F93   21 06 00               LD   hl,6   
1F96   E5                     PUSH   hl   
1F97   E5                     PUSH   hl   
1F98   CD 11 11               CALL   run   
1F9B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
1FA5   CD 14 10               CALL   printStr   
1FA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB5   E1                     POP   hl   
1FB6   E5                     PUSH   hl   
1FB7   E5                     PUSH   hl   
1FB8   CD 11 11               CALL   run   
1FBB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
1FCA   76                     HALT      
1FCB                EXPECTM_3086S78:      
1FCB   E1                     POP   HL   
1FCC                          ;*Macro unroll:  test "0 !", true
1FCC   31 00 58               LD   SP,STACK   
1FCF   CD 48 10               CALL   coldInit   
1FD2   CD A4 56               CALL   execStr   
1FD5   30 20 21 00            DB   "0 !",0   
1FD9   E1                     POP   HL   
1FDA   E5                     PUSH   HL   
1FDB   11 FF FF               LD   DE,true   
1FDE   B7                     OR   A   
1FDF   ED 52                  SBC   HL,DE   
1FE1   7D                     LD   A,L   
1FE2   B4                     OR   H   
1FE3   CA 3D 20               JP   Z,expectM_3087S79   
1FE6   CD 14 10               CALL   printStr   
1FE9   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1FF3   CD 14 10               CALL   printStr   
1FF6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2005   21 FF FF               LD   hl,true   
2008   E5                     PUSH   hl   
2009   E5                     PUSH   hl   
200A   CD 11 11               CALL   run   
200D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2017   CD 14 10               CALL   printStr   
201A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2027   E1                     POP   hl   
2028   E5                     PUSH   hl   
2029   E5                     PUSH   hl   
202A   CD 11 11               CALL   run   
202D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
203C   76                     HALT      
203D                EXPECTM_3087S79:      
203D   E1                     POP   HL   
203E                          ;*Macro unroll:  test "2 !", false
203E   31 00 58               LD   SP,STACK   
2041   CD 48 10               CALL   coldInit   
2044   CD A4 56               CALL   execStr   
2047   32 20 21 00            DB   "2 !",0   
204B   E1                     POP   HL   
204C   E5                     PUSH   HL   
204D   11 00 00               LD   DE,false   
2050   B7                     OR   A   
2051   ED 52                  SBC   HL,DE   
2053   7D                     LD   A,L   
2054   B4                     OR   H   
2055   CA AF 20               JP   Z,expectM_3088S80   
2058   CD 14 10               CALL   printStr   
205B   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
2065   CD 14 10               CALL   printStr   
2068   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2077   21 00 00               LD   hl,false   
207A   E5                     PUSH   hl   
207B   E5                     PUSH   hl   
207C   CD 11 11               CALL   run   
207F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2089   CD 14 10               CALL   printStr   
208C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2099   E1                     POP   hl   
209A   E5                     PUSH   hl   
209B   E5                     PUSH   hl   
209C   CD 11 11               CALL   run   
209F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
20AE   76                     HALT      
20AF                EXPECTM_3088S80:      
20AF   E1                     POP   HL   
20B0                          ;*Macro unroll:  test "0 !!", false
20B0   31 00 58               LD   SP,STACK   
20B3   CD 48 10               CALL   coldInit   
20B6   CD A4 56               CALL   execStr   
20B9   30 20 21 21 00         DB   "0 !!",0   
20BE   E1                     POP   HL   
20BF   E5                     PUSH   HL   
20C0   11 00 00               LD   DE,false   
20C3   B7                     OR   A   
20C4   ED 52                  SBC   HL,DE   
20C6   7D                     LD   A,L   
20C7   B4                     OR   H   
20C8   CA 23 21               JP   Z,expectM_3089S81   
20CB   CD 14 10               CALL   printStr   
20CE   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
20D9   CD 14 10               CALL   printStr   
20DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20EB   21 00 00               LD   hl,false   
20EE   E5                     PUSH   hl   
20EF   E5                     PUSH   hl   
20F0   CD 11 11               CALL   run   
20F3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
20FD   CD 14 10               CALL   printStr   
2100   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
210D   E1                     POP   hl   
210E   E5                     PUSH   hl   
210F   E5                     PUSH   hl   
2110   CD 11 11               CALL   run   
2113   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2122   76                     HALT      
2123                EXPECTM_3089S81:      
2123   E1                     POP   HL   
2124                          ;*Macro unroll:  test "2 !!", true
2124   31 00 58               LD   SP,STACK   
2127   CD 48 10               CALL   coldInit   
212A   CD A4 56               CALL   execStr   
212D   32 20 21 21 00         DB   "2 !!",0   
2132   E1                     POP   HL   
2133   E5                     PUSH   HL   
2134   11 FF FF               LD   DE,true   
2137   B7                     OR   A   
2138   ED 52                  SBC   HL,DE   
213A   7D                     LD   A,L   
213B   B4                     OR   H   
213C   CA 97 21               JP   Z,expectM_3090S82   
213F   CD 14 10               CALL   printStr   
2142   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
214D   CD 14 10               CALL   printStr   
2150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
215F   21 FF FF               LD   hl,true   
2162   E5                     PUSH   hl   
2163   E5                     PUSH   hl   
2164   CD 11 11               CALL   run   
2167   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2171   CD 14 10               CALL   printStr   
2174   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2181   E1                     POP   hl   
2182   E5                     PUSH   hl   
2183   E5                     PUSH   hl   
2184   CD 11 11               CALL   run   
2187   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2196   76                     HALT      
2197                EXPECTM_3090S82:      
2197   E1                     POP   HL   
2198                          ;*Macro unroll:  test "2 3 *", 6
2198   31 00 58               LD   SP,STACK   
219B   CD 48 10               CALL   coldInit   
219E   CD A4 56               CALL   execStr   
21A1   32 20 33 20 2A 00      DB   "2 3 *",0   
21A7   E1                     POP   HL   
21A8   E5                     PUSH   HL   
21A9   11 06 00               LD   DE,6   
21AC   B7                     OR   A   
21AD   ED 52                  SBC   HL,DE   
21AF   7D                     LD   A,L   
21B0   B4                     OR   H   
21B1   CA 0D 22               JP   Z,expectM_3091S83   
21B4   CD 14 10               CALL   printStr   
21B7   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
21C3   CD 14 10               CALL   printStr   
21C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D5   21 06 00               LD   hl,6   
21D8   E5                     PUSH   hl   
21D9   E5                     PUSH   hl   
21DA   CD 11 11               CALL   run   
21DD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
21E7   CD 14 10               CALL   printStr   
21EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21F7   E1                     POP   hl   
21F8   E5                     PUSH   hl   
21F9   E5                     PUSH   hl   
21FA   CD 11 11               CALL   run   
21FD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
220C   76                     HALT      
220D                EXPECTM_3091S83:      
220D   E1                     POP   HL   
220E                          ;*Macro unroll:  test "1 2 3 + *", 5
220E   31 00 58               LD   SP,STACK   
2211   CD 48 10               CALL   coldInit   
2214   CD A4 56               CALL   execStr   
2217   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2221   E1                     POP   HL   
2222   E5                     PUSH   HL   
2223   11 05 00               LD   DE,5   
2226   B7                     OR   A   
2227   ED 52                  SBC   HL,DE   
2229   7D                     LD   A,L   
222A   B4                     OR   H   
222B   CA 8B 22               JP   Z,expectM_3092S84   
222E   CD 14 10               CALL   printStr   
2231   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2241   CD 14 10               CALL   printStr   
2244   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2253   21 05 00               LD   hl,5   
2256   E5                     PUSH   hl   
2257   E5                     PUSH   hl   
2258   CD 11 11               CALL   run   
225B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2265   CD 14 10               CALL   printStr   
2268   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2275   E1                     POP   hl   
2276   E5                     PUSH   hl   
2277   E5                     PUSH   hl   
2278   CD 11 11               CALL   run   
227B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
228A   76                     HALT      
228B                EXPECTM_3092S84:      
228B   E1                     POP   HL   
228C                          ;*Macro unroll:  test "7 3 /", 2
228C   31 00 58               LD   SP,STACK   
228F   CD 48 10               CALL   coldInit   
2292   CD A4 56               CALL   execStr   
2295   37 20 33 20 2F 00      DB   "7 3 /",0   
229B   E1                     POP   HL   
229C   E5                     PUSH   HL   
229D   11 02 00               LD   DE,2   
22A0   B7                     OR   A   
22A1   ED 52                  SBC   HL,DE   
22A3   7D                     LD   A,L   
22A4   B4                     OR   H   
22A5   CA 01 23               JP   Z,expectM_3093S85   
22A8   CD 14 10               CALL   printStr   
22AB   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22B7   CD 14 10               CALL   printStr   
22BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C9   21 02 00               LD   hl,2   
22CC   E5                     PUSH   hl   
22CD   E5                     PUSH   hl   
22CE   CD 11 11               CALL   run   
22D1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
22DB   CD 14 10               CALL   printStr   
22DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EB   E1                     POP   hl   
22EC   E5                     PUSH   hl   
22ED   E5                     PUSH   hl   
22EE   CD 11 11               CALL   run   
22F1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2300   76                     HALT      
2301                EXPECTM_3093S85:      
2301   E1                     POP   HL   
2302                          ;*Macro unroll:  test "100a= 1a+= a", 101
2302   31 00 58               LD   SP,STACK   
2305   CD 48 10               CALL   coldInit   
2308   CD A4 56               CALL   execStr   
230B   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2318   E1                     POP   HL   
2319   E5                     PUSH   HL   
231A   11 65 00               LD   DE,101   
231D   B7                     OR   A   
231E   ED 52                  SBC   HL,DE   
2320   7D                     LD   A,L   
2321   B4                     OR   H   
2322   CA 85 23               JP   Z,expectM_3094S86   
2325   CD 14 10               CALL   printStr   
2328   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
233B   CD 14 10               CALL   printStr   
233E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234D   21 65 00               LD   hl,101   
2350   E5                     PUSH   hl   
2351   E5                     PUSH   hl   
2352   CD 11 11               CALL   run   
2355   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
235F   CD 14 10               CALL   printStr   
2362   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
236F   E1                     POP   hl   
2370   E5                     PUSH   hl   
2371   E5                     PUSH   hl   
2372   CD 11 11               CALL   run   
2375   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2384   76                     HALT      
2385                EXPECTM_3094S86:      
2385   E1                     POP   HL   
2386                          ;*Macro unroll:  test "100a= 1a-= a", 99
2386   31 00 58               LD   SP,STACK   
2389   CD 48 10               CALL   coldInit   
238C   CD A4 56               CALL   execStr   
238F   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
239C   E1                     POP   HL   
239D   E5                     PUSH   HL   
239E   11 63 00               LD   DE,99   
23A1   B7                     OR   A   
23A2   ED 52                  SBC   HL,DE   
23A4   7D                     LD   A,L   
23A5   B4                     OR   H   
23A6   CA 09 24               JP   Z,expectM_3095S87   
23A9   CD 14 10               CALL   printStr   
23AC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
23BF   CD 14 10               CALL   printStr   
23C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D1   21 63 00               LD   hl,99   
23D4   E5                     PUSH   hl   
23D5   E5                     PUSH   hl   
23D6   CD 11 11               CALL   run   
23D9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
23E3   CD 14 10               CALL   printStr   
23E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F3   E1                     POP   hl   
23F4   E5                     PUSH   hl   
23F5   E5                     PUSH   hl   
23F6   CD 11 11               CALL   run   
23F9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2408   76                     HALT      
2409                EXPECTM_3095S87:      
2409   E1                     POP   HL   
240A                          ;*Macro unroll:  test "100a= 2a*= a", 200
240A   31 00 58               LD   SP,STACK   
240D   CD 48 10               CALL   coldInit   
2410   CD A4 56               CALL   execStr   
2413   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2420   E1                     POP   HL   
2421   E5                     PUSH   HL   
2422   11 C8 00               LD   DE,200   
2425   B7                     OR   A   
2426   ED 52                  SBC   HL,DE   
2428   7D                     LD   A,L   
2429   B4                     OR   H   
242A   CA 8D 24               JP   Z,expectM_3096S88   
242D   CD 14 10               CALL   printStr   
2430   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
2443   CD 14 10               CALL   printStr   
2446   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2455   21 C8 00               LD   hl,200   
2458   E5                     PUSH   hl   
2459   E5                     PUSH   hl   
245A   CD 11 11               CALL   run   
245D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2467   CD 14 10               CALL   printStr   
246A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2477   E1                     POP   hl   
2478   E5                     PUSH   hl   
2479   E5                     PUSH   hl   
247A   CD 11 11               CALL   run   
247D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
248C   76                     HALT      
248D                EXPECTM_3096S88:      
248D   E1                     POP   HL   
248E                          ;*Macro unroll:  test "100a= 2 a/= a", 50
248E   31 00 58               LD   SP,STACK   
2491   CD 48 10               CALL   coldInit   
2494   CD A4 56               CALL   execStr   
2497   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
24A5   E1                     POP   HL   
24A6   E5                     PUSH   HL   
24A7   11 32 00               LD   DE,50   
24AA   B7                     OR   A   
24AB   ED 52                  SBC   HL,DE   
24AD   7D                     LD   A,L   
24AE   B4                     OR   H   
24AF   CA 13 25               JP   Z,expectM_3097S89   
24B2   CD 14 10               CALL   printStr   
24B5   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
24C9   CD 14 10               CALL   printStr   
24CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24DB   21 32 00               LD   hl,50   
24DE   E5                     PUSH   hl   
24DF   E5                     PUSH   hl   
24E0   CD 11 11               CALL   run   
24E3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
24ED   CD 14 10               CALL   printStr   
24F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24FD   E1                     POP   hl   
24FE   E5                     PUSH   hl   
24FF   E5                     PUSH   hl   
2500   CD 11 11               CALL   run   
2503   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2512   76                     HALT      
2513                EXPECTM_3097S89:      
2513   E1                     POP   HL   
2514                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2514   31 00 58               LD   SP,STACK   
2517   CD 48 10               CALL   coldInit   
251A   CD A4 56               CALL   execStr   
251D   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
252D   E1                     POP   HL   
252E   E5                     PUSH   HL   
252F   11 05 00               LD   DE,5   
2532   B7                     OR   A   
2533   ED 52                  SBC   HL,DE   
2535   7D                     LD   A,L   
2536   B4                     OR   H   
2537   CA 9D 25               JP   Z,expectM_3098S90   
253A   CD 14 10               CALL   printStr   
253D   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
2553   CD 14 10               CALL   printStr   
2556   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2565   21 05 00               LD   hl,5   
2568   E5                     PUSH   hl   
2569   E5                     PUSH   hl   
256A   CD 11 11               CALL   run   
256D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2577   CD 14 10               CALL   printStr   
257A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2587   E1                     POP   hl   
2588   E5                     PUSH   hl   
2589   E5                     PUSH   hl   
258A   CD 11 11               CALL   run   
258D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
259C   76                     HALT      
259D                EXPECTM_3098S90:      
259D   E1                     POP   HL   
259E                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
259E   31 00 58               LD   SP,STACK   
25A1   CD 48 10               CALL   coldInit   
25A4   CD A4 56               CALL   execStr   
25A7   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
25B7   E1                     POP   HL   
25B8   E5                     PUSH   HL   
25B9   11 01 00               LD   DE,1   
25BC   B7                     OR   A   
25BD   ED 52                  SBC   HL,DE   
25BF   7D                     LD   A,L   
25C0   B4                     OR   H   
25C1   CA 27 26               JP   Z,expectM_3099S91   
25C4   CD 14 10               CALL   printStr   
25C7   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
25DD   CD 14 10               CALL   printStr   
25E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EF   21 01 00               LD   hl,1   
25F2   E5                     PUSH   hl   
25F3   E5                     PUSH   hl   
25F4   CD 11 11               CALL   run   
25F7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2601   CD 14 10               CALL   printStr   
2604   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2611   E1                     POP   hl   
2612   E5                     PUSH   hl   
2613   E5                     PUSH   hl   
2614   CD 11 11               CALL   run   
2617   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2626   76                     HALT      
2627                EXPECTM_3099S91:      
2627   E1                     POP   HL   
2628                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
2628   31 00 58               LD   SP,STACK   
262B   CD 48 10               CALL   coldInit   
262E   CD A4 56               CALL   execStr   
2631   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
2641   E1                     POP   HL   
2642   E5                     PUSH   HL   
2643   11 06 00               LD   DE,6   
2646   B7                     OR   A   
2647   ED 52                  SBC   HL,DE   
2649   7D                     LD   A,L   
264A   B4                     OR   H   
264B   CA B1 26               JP   Z,expectM_3100S92   
264E   CD 14 10               CALL   printStr   
2651   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
2667   CD 14 10               CALL   printStr   
266A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2679   21 06 00               LD   hl,6   
267C   E5                     PUSH   hl   
267D   E5                     PUSH   hl   
267E   CD 11 11               CALL   run   
2681   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
268B   CD 14 10               CALL   printStr   
268E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
269B   E1                     POP   hl   
269C   E5                     PUSH   hl   
269D   E5                     PUSH   hl   
269E   CD 11 11               CALL   run   
26A1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
26B0   76                     HALT      
26B1                EXPECTM_3100S92:      
26B1   E1                     POP   HL   
26B2                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
26B2   31 00 58               LD   SP,STACK   
26B5   CD 48 10               CALL   coldInit   
26B8   CD A4 56               CALL   execStr   
26BB   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
26CB   E1                     POP   HL   
26CC   E5                     PUSH   HL   
26CD   11 03 00               LD   DE,3   
26D0   B7                     OR   A   
26D1   ED 52                  SBC   HL,DE   
26D3   7D                     LD   A,L   
26D4   B4                     OR   H   
26D5   CA 3B 27               JP   Z,expectM_3101S93   
26D8   CD 14 10               CALL   printStr   
26DB   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
26F1   CD 14 10               CALL   printStr   
26F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2703   21 03 00               LD   hl,3   
2706   E5                     PUSH   hl   
2707   E5                     PUSH   hl   
2708   CD 11 11               CALL   run   
270B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2715   CD 14 10               CALL   printStr   
2718   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2725   E1                     POP   hl   
2726   E5                     PUSH   hl   
2727   E5                     PUSH   hl   
2728   CD 11 11               CALL   run   
272B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
273A   76                     HALT      
273B                EXPECTM_3101S93:      
273B   E1                     POP   HL   
273C                          ;*Macro unroll:  test "$55a= $AAa&= a",0
273C   31 00 58               LD   SP,STACK   
273F   CD 48 10               CALL   coldInit   
2742   CD A4 56               CALL   execStr   
2745   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2754   E1                     POP   HL   
2755   E5                     PUSH   HL   
2756   11 00 00               LD   DE,0   
2759   B7                     OR   A   
275A   ED 52                  SBC   HL,DE   
275C   7D                     LD   A,L   
275D   B4                     OR   H   
275E   CA C3 27               JP   Z,expectM_3102S94   
2761   CD 14 10               CALL   printStr   
2764   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2779   CD 14 10               CALL   printStr   
277C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
278B   21 00 00               LD   hl,0   
278E   E5                     PUSH   hl   
278F   E5                     PUSH   hl   
2790   CD 11 11               CALL   run   
2793   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
279D   CD 14 10               CALL   printStr   
27A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27AD   E1                     POP   hl   
27AE   E5                     PUSH   hl   
27AF   E5                     PUSH   hl   
27B0   CD 11 11               CALL   run   
27B3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
27C2   76                     HALT      
27C3                EXPECTM_3102S94:      
27C3   E1                     POP   HL   
27C4                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
27C4   31 00 58               LD   SP,STACK   
27C7   CD 48 10               CALL   coldInit   
27CA   CD A4 56               CALL   execStr   
27CD   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
27DC   E1                     POP   HL   
27DD   E5                     PUSH   HL   
27DE   11 FF 00               LD   DE,$FF   
27E1   B7                     OR   A   
27E2   ED 52                  SBC   HL,DE   
27E4   7D                     LD   A,L   
27E5   B4                     OR   H   
27E6   CA 4B 28               JP   Z,expectM_3103S95   
27E9   CD 14 10               CALL   printStr   
27EC   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2801   CD 14 10               CALL   printStr   
2804   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2813   21 FF 00               LD   hl,$FF   
2816   E5                     PUSH   hl   
2817   E5                     PUSH   hl   
2818   CD 11 11               CALL   run   
281B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2825   CD 14 10               CALL   printStr   
2828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2835   E1                     POP   hl   
2836   E5                     PUSH   hl   
2837   E5                     PUSH   hl   
2838   CD 11 11               CALL   run   
283B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
284A   76                     HALT      
284B                EXPECTM_3103S95:      
284B   E1                     POP   HL   
284C                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
284C   31 00 58               LD   SP,STACK   
284F   CD 48 10               CALL   coldInit   
2852   CD A4 56               CALL   execStr   
2855   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
2868   E1                     POP   HL   
2869   E5                     PUSH   HL   
286A   11 0F 00               LD   DE,$0F   
286D   B7                     OR   A   
286E   ED 52                  SBC   HL,DE   
2870   7D                     LD   A,L   
2871   B4                     OR   H   
2872   CA DB 28               JP   Z,expectM_3104S96   
2875   CD 14 10               CALL   printStr   
2878   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
2891   CD 14 10               CALL   printStr   
2894   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A3   21 0F 00               LD   hl,$0F   
28A6   E5                     PUSH   hl   
28A7   E5                     PUSH   hl   
28A8   CD 11 11               CALL   run   
28AB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
28B5   CD 14 10               CALL   printStr   
28B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C5   E1                     POP   hl   
28C6   E5                     PUSH   hl   
28C7   E5                     PUSH   hl   
28C8   CD 11 11               CALL   run   
28CB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
28DA   76                     HALT      
28DB                EXPECTM_3104S96:      
28DB   E1                     POP   HL   
28DC                          ;*Macro unroll:  test "$00AA~",$FF55
28DC   31 00 58               LD   SP,STACK   
28DF   CD 48 10               CALL   coldInit   
28E2   CD A4 56               CALL   execStr   
28E5   24 30 30 41 41 7E 00   DB   "$00AA~",0   
28EC   E1                     POP   HL   
28ED   E5                     PUSH   HL   
28EE   11 55 FF               LD   DE,$FF55   
28F1   B7                     OR   A   
28F2   ED 52                  SBC   HL,DE   
28F4   7D                     LD   A,L   
28F5   B4                     OR   H   
28F6   CA 53 29               JP   Z,expectM_3105S97   
28F9   CD 14 10               CALL   printStr   
28FC   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2909   CD 14 10               CALL   printStr   
290C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
291B   21 55 FF               LD   hl,$FF55   
291E   E5                     PUSH   hl   
291F   E5                     PUSH   hl   
2920   CD 11 11               CALL   run   
2923   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
292D   CD 14 10               CALL   printStr   
2930   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
293D   E1                     POP   hl   
293E   E5                     PUSH   hl   
293F   E5                     PUSH   hl   
2940   CD 11 11               CALL   run   
2943   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2952   76                     HALT      
2953                EXPECTM_3105S97:      
2953   E1                     POP   HL   
2954                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2954   31 00 58               LD   SP,STACK   
2957   CD 48 10               CALL   coldInit   
295A   CD A4 56               CALL   execStr   
295D   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
296B   E1                     POP   HL   
296C   E5                     PUSH   HL   
296D   11 55 55               LD   DE,$5555   
2970   B7                     OR   A   
2971   ED 52                  SBC   HL,DE   
2973   7D                     LD   A,L   
2974   B4                     OR   H   
2975   CA D9 29               JP   Z,expectM_3106S98   
2978   CD 14 10               CALL   printStr   
297B   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
298F   CD 14 10               CALL   printStr   
2992   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29A1   21 55 55               LD   hl,$5555   
29A4   E5                     PUSH   hl   
29A5   E5                     PUSH   hl   
29A6   CD 11 11               CALL   run   
29A9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
29B3   CD 14 10               CALL   printStr   
29B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C3   E1                     POP   hl   
29C4   E5                     PUSH   hl   
29C5   E5                     PUSH   hl   
29C6   CD 11 11               CALL   run   
29C9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
29D8   76                     HALT      
29D9                EXPECTM_3106S98:      
29D9   E1                     POP   HL   
29DA                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
29DA   31 00 58               LD   SP,STACK   
29DD   CD 48 10               CALL   coldInit   
29E0   CD A4 56               CALL   execStr   
29E3   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
29F1   E1                     POP   HL   
29F2   E5                     PUSH   HL   
29F3   11 06 00               LD   DE,6   
29F6   B7                     OR   A   
29F7   ED 52                  SBC   HL,DE   
29F9   7D                     LD   A,L   
29FA   B4                     OR   H   
29FB   CA 5F 2A               JP   Z,expectM_3107S99   
29FE   CD 14 10               CALL   printStr   
2A01   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2A15   CD 14 10               CALL   printStr   
2A18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A27   21 06 00               LD   hl,6   
2A2A   E5                     PUSH   hl   
2A2B   E5                     PUSH   hl   
2A2C   CD 11 11               CALL   run   
2A2F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2A39   CD 14 10               CALL   printStr   
2A3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A49   E1                     POP   hl   
2A4A   E5                     PUSH   hl   
2A4B   E5                     PUSH   hl   
2A4C   CD 11 11               CALL   run   
2A4F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2A5E   76                     HALT      
2A5F                EXPECTM_3107S99:      
2A5F   E1                     POP   HL   
2A60                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2A60   31 00 58               LD   SP,STACK   
2A63   CD 48 10               CALL   coldInit   
2A66   CD A4 56               CALL   execStr   
2A69   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2A78   E1                     POP   HL   
2A79   E5                     PUSH   HL   
2A7A   11 05 00               LD   DE,5   
2A7D   B7                     OR   A   
2A7E   ED 52                  SBC   HL,DE   
2A80   7D                     LD   A,L   
2A81   B4                     OR   H   
2A82   CA E7 2A               JP   Z,expectM_3108S100   
2A85   CD 14 10               CALL   printStr   
2A88   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2A9D   CD 14 10               CALL   printStr   
2AA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AAF   21 05 00               LD   hl,5   
2AB2   E5                     PUSH   hl   
2AB3   E5                     PUSH   hl   
2AB4   CD 11 11               CALL   run   
2AB7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2AC1   CD 14 10               CALL   printStr   
2AC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD1   E1                     POP   hl   
2AD2   E5                     PUSH   hl   
2AD3   E5                     PUSH   hl   
2AD4   CD 11 11               CALL   run   
2AD7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2AE6   76                     HALT      
2AE7                EXPECTM_3108S100:      
2AE7   E1                     POP   HL   
2AE8                          ;*Macro unroll:  test "7 3 / /rem", 1
2AE8   31 00 58               LD   SP,STACK   
2AEB   CD 48 10               CALL   coldInit   
2AEE   CD A4 56               CALL   execStr   
2AF1   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2AFC   E1                     POP   HL   
2AFD   E5                     PUSH   HL   
2AFE   11 01 00               LD   DE,1   
2B01   B7                     OR   A   
2B02   ED 52                  SBC   HL,DE   
2B04   7D                     LD   A,L   
2B05   B4                     OR   H   
2B06   CA 67 2B               JP   Z,expectM_3109S101   
2B09   CD 14 10               CALL   printStr   
2B0C   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2B1D   CD 14 10               CALL   printStr   
2B20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B2F   21 01 00               LD   hl,1   
2B32   E5                     PUSH   hl   
2B33   E5                     PUSH   hl   
2B34   CD 11 11               CALL   run   
2B37   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2B41   CD 14 10               CALL   printStr   
2B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B51   E1                     POP   hl   
2B52   E5                     PUSH   hl   
2B53   E5                     PUSH   hl   
2B54   CD 11 11               CALL   run   
2B57   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2B66   76                     HALT      
2B67                EXPECTM_3109S101:      
2B67   E1                     POP   HL   
2B68                          ;*Macro unroll:  test "7 3 /", 2
2B68   31 00 58               LD   SP,STACK   
2B6B   CD 48 10               CALL   coldInit   
2B6E   CD A4 56               CALL   execStr   
2B71   37 20 33 20 2F 00      DB   "7 3 /",0   
2B77   E1                     POP   HL   
2B78   E5                     PUSH   HL   
2B79   11 02 00               LD   DE,2   
2B7C   B7                     OR   A   
2B7D   ED 52                  SBC   HL,DE   
2B7F   7D                     LD   A,L   
2B80   B4                     OR   H   
2B81   CA DD 2B               JP   Z,expectM_3110S102   
2B84   CD 14 10               CALL   printStr   
2B87   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2B93   CD 14 10               CALL   printStr   
2B96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA5   21 02 00               LD   hl,2   
2BA8   E5                     PUSH   hl   
2BA9   E5                     PUSH   hl   
2BAA   CD 11 11               CALL   run   
2BAD   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2BB7   CD 14 10               CALL   printStr   
2BBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC7   E1                     POP   hl   
2BC8   E5                     PUSH   hl   
2BC9   E5                     PUSH   hl   
2BCA   CD 11 11               CALL   run   
2BCD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2BDC   76                     HALT      
2BDD                EXPECTM_3110S102:      
2BDD   E1                     POP   HL   
2BDE                          ;*Macro unroll:  test "2 3 ==", FALSE
2BDE   31 00 58               LD   SP,STACK   
2BE1   CD 48 10               CALL   coldInit   
2BE4   CD A4 56               CALL   execStr   
2BE7   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2BEE   E1                     POP   HL   
2BEF   E5                     PUSH   HL   
2BF0   11 00 00               LD   DE,FALSE   
2BF3   B7                     OR   A   
2BF4   ED 52                  SBC   HL,DE   
2BF6   7D                     LD   A,L   
2BF7   B4                     OR   H   
2BF8   CA 55 2C               JP   Z,expectM_3111S103   
2BFB   CD 14 10               CALL   printStr   
2BFE   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2C0B   CD 14 10               CALL   printStr   
2C0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C1D   21 00 00               LD   hl,FALSE   
2C20   E5                     PUSH   hl   
2C21   E5                     PUSH   hl   
2C22   CD 11 11               CALL   run   
2C25   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2C2F   CD 14 10               CALL   printStr   
2C32   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C3F   E1                     POP   hl   
2C40   E5                     PUSH   hl   
2C41   E5                     PUSH   hl   
2C42   CD 11 11               CALL   run   
2C45   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2C54   76                     HALT      
2C55                EXPECTM_3111S103:      
2C55   E1                     POP   HL   
2C56                          ;*Macro unroll:  test "3 3 ==", TRUE
2C56   31 00 58               LD   SP,STACK   
2C59   CD 48 10               CALL   coldInit   
2C5C   CD A4 56               CALL   execStr   
2C5F   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2C66   E1                     POP   HL   
2C67   E5                     PUSH   HL   
2C68   11 FF FF               LD   DE,TRUE   
2C6B   B7                     OR   A   
2C6C   ED 52                  SBC   HL,DE   
2C6E   7D                     LD   A,L   
2C6F   B4                     OR   H   
2C70   CA CD 2C               JP   Z,expectM_3112S104   
2C73   CD 14 10               CALL   printStr   
2C76   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2C83   CD 14 10               CALL   printStr   
2C86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C95   21 FF FF               LD   hl,TRUE   
2C98   E5                     PUSH   hl   
2C99   E5                     PUSH   hl   
2C9A   CD 11 11               CALL   run   
2C9D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2CA7   CD 14 10               CALL   printStr   
2CAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CB7   E1                     POP   hl   
2CB8   E5                     PUSH   hl   
2CB9   E5                     PUSH   hl   
2CBA   CD 11 11               CALL   run   
2CBD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2CCC   76                     HALT      
2CCD                EXPECTM_3112S104:      
2CCD   E1                     POP   HL   
2CCE                          ;*Macro unroll:  test "1 2 <", TRUE
2CCE   31 00 58               LD   SP,STACK   
2CD1   CD 48 10               CALL   coldInit   
2CD4   CD A4 56               CALL   execStr   
2CD7   31 20 32 20 3C 00      DB   "1 2 <",0   
2CDD   E1                     POP   HL   
2CDE   E5                     PUSH   HL   
2CDF   11 FF FF               LD   DE,TRUE   
2CE2   B7                     OR   A   
2CE3   ED 52                  SBC   HL,DE   
2CE5   7D                     LD   A,L   
2CE6   B4                     OR   H   
2CE7   CA 43 2D               JP   Z,expectM_3113S105   
2CEA   CD 14 10               CALL   printStr   
2CED   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2CF9   CD 14 10               CALL   printStr   
2CFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D0B   21 FF FF               LD   hl,TRUE   
2D0E   E5                     PUSH   hl   
2D0F   E5                     PUSH   hl   
2D10   CD 11 11               CALL   run   
2D13   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2D1D   CD 14 10               CALL   printStr   
2D20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D2D   E1                     POP   hl   
2D2E   E5                     PUSH   hl   
2D2F   E5                     PUSH   hl   
2D30   CD 11 11               CALL   run   
2D33   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2D42   76                     HALT      
2D43                EXPECTM_3113S105:      
2D43   E1                     POP   HL   
2D44                          ;*Macro unroll:  test "2 1 <", FALSE
2D44   31 00 58               LD   SP,STACK   
2D47   CD 48 10               CALL   coldInit   
2D4A   CD A4 56               CALL   execStr   
2D4D   32 20 31 20 3C 00      DB   "2 1 <",0   
2D53   E1                     POP   HL   
2D54   E5                     PUSH   HL   
2D55   11 00 00               LD   DE,FALSE   
2D58   B7                     OR   A   
2D59   ED 52                  SBC   HL,DE   
2D5B   7D                     LD   A,L   
2D5C   B4                     OR   H   
2D5D   CA B9 2D               JP   Z,expectM_3114S106   
2D60   CD 14 10               CALL   printStr   
2D63   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2D6F   CD 14 10               CALL   printStr   
2D72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D81   21 00 00               LD   hl,FALSE   
2D84   E5                     PUSH   hl   
2D85   E5                     PUSH   hl   
2D86   CD 11 11               CALL   run   
2D89   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2D93   CD 14 10               CALL   printStr   
2D96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DA3   E1                     POP   hl   
2DA4   E5                     PUSH   hl   
2DA5   E5                     PUSH   hl   
2DA6   CD 11 11               CALL   run   
2DA9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2DB8   76                     HALT      
2DB9                EXPECTM_3114S106:      
2DB9   E1                     POP   HL   
2DBA                          ;*Macro unroll:  test "2 3 <", TRUE
2DBA   31 00 58               LD   SP,STACK   
2DBD   CD 48 10               CALL   coldInit   
2DC0   CD A4 56               CALL   execStr   
2DC3   32 20 33 20 3C 00      DB   "2 3 <",0   
2DC9   E1                     POP   HL   
2DCA   E5                     PUSH   HL   
2DCB   11 FF FF               LD   DE,TRUE   
2DCE   B7                     OR   A   
2DCF   ED 52                  SBC   HL,DE   
2DD1   7D                     LD   A,L   
2DD2   B4                     OR   H   
2DD3   CA 2F 2E               JP   Z,expectM_3115S107   
2DD6   CD 14 10               CALL   printStr   
2DD9   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2DE5   CD 14 10               CALL   printStr   
2DE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF7   21 FF FF               LD   hl,TRUE   
2DFA   E5                     PUSH   hl   
2DFB   E5                     PUSH   hl   
2DFC   CD 11 11               CALL   run   
2DFF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2E09   CD 14 10               CALL   printStr   
2E0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E19   E1                     POP   hl   
2E1A   E5                     PUSH   hl   
2E1B   E5                     PUSH   hl   
2E1C   CD 11 11               CALL   run   
2E1F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2E2E   76                     HALT      
2E2F                EXPECTM_3115S107:      
2E2F   E1                     POP   HL   
2E30                          ;*Macro unroll:  test "3 3 <", FALSE
2E30   31 00 58               LD   SP,STACK   
2E33   CD 48 10               CALL   coldInit   
2E36   CD A4 56               CALL   execStr   
2E39   33 20 33 20 3C 00      DB   "3 3 <",0   
2E3F   E1                     POP   HL   
2E40   E5                     PUSH   HL   
2E41   11 00 00               LD   DE,FALSE   
2E44   B7                     OR   A   
2E45   ED 52                  SBC   HL,DE   
2E47   7D                     LD   A,L   
2E48   B4                     OR   H   
2E49   CA A5 2E               JP   Z,expectM_3116S108   
2E4C   CD 14 10               CALL   printStr   
2E4F   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2E5B   CD 14 10               CALL   printStr   
2E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6D   21 00 00               LD   hl,FALSE   
2E70   E5                     PUSH   hl   
2E71   E5                     PUSH   hl   
2E72   CD 11 11               CALL   run   
2E75   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2E7F   CD 14 10               CALL   printStr   
2E82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E8F   E1                     POP   hl   
2E90   E5                     PUSH   hl   
2E91   E5                     PUSH   hl   
2E92   CD 11 11               CALL   run   
2E95   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2EA4   76                     HALT      
2EA5                EXPECTM_3116S108:      
2EA5   E1                     POP   HL   
2EA6                          ;*Macro unroll:  test "1 2 >", FALSE
2EA6   31 00 58               LD   SP,STACK   
2EA9   CD 48 10               CALL   coldInit   
2EAC   CD A4 56               CALL   execStr   
2EAF   31 20 32 20 3E 00      DB   "1 2 >",0   
2EB5   E1                     POP   HL   
2EB6   E5                     PUSH   HL   
2EB7   11 00 00               LD   DE,FALSE   
2EBA   B7                     OR   A   
2EBB   ED 52                  SBC   HL,DE   
2EBD   7D                     LD   A,L   
2EBE   B4                     OR   H   
2EBF   CA 1B 2F               JP   Z,expectM_3117S109   
2EC2   CD 14 10               CALL   printStr   
2EC5   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2ED1   CD 14 10               CALL   printStr   
2ED4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EE3   21 00 00               LD   hl,FALSE   
2EE6   E5                     PUSH   hl   
2EE7   E5                     PUSH   hl   
2EE8   CD 11 11               CALL   run   
2EEB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2EF5   CD 14 10               CALL   printStr   
2EF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F05   E1                     POP   hl   
2F06   E5                     PUSH   hl   
2F07   E5                     PUSH   hl   
2F08   CD 11 11               CALL   run   
2F0B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2F1A   76                     HALT      
2F1B                EXPECTM_3117S109:      
2F1B   E1                     POP   HL   
2F1C                          ;*Macro unroll:  test "2 1 >", TRUE
2F1C   31 00 58               LD   SP,STACK   
2F1F   CD 48 10               CALL   coldInit   
2F22   CD A4 56               CALL   execStr   
2F25   32 20 31 20 3E 00      DB   "2 1 >",0   
2F2B   E1                     POP   HL   
2F2C   E5                     PUSH   HL   
2F2D   11 FF FF               LD   DE,TRUE   
2F30   B7                     OR   A   
2F31   ED 52                  SBC   HL,DE   
2F33   7D                     LD   A,L   
2F34   B4                     OR   H   
2F35   CA 91 2F               JP   Z,expectM_3118S110   
2F38   CD 14 10               CALL   printStr   
2F3B   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2F47   CD 14 10               CALL   printStr   
2F4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F59   21 FF FF               LD   hl,TRUE   
2F5C   E5                     PUSH   hl   
2F5D   E5                     PUSH   hl   
2F5E   CD 11 11               CALL   run   
2F61   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2F6B   CD 14 10               CALL   printStr   
2F6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F7B   E1                     POP   hl   
2F7C   E5                     PUSH   hl   
2F7D   E5                     PUSH   hl   
2F7E   CD 11 11               CALL   run   
2F81   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
2F90   76                     HALT      
2F91                EXPECTM_3118S110:      
2F91   E1                     POP   HL   
2F92                          ;*Macro unroll:  test "3 3 >", FALSE
2F92   31 00 58               LD   SP,STACK   
2F95   CD 48 10               CALL   coldInit   
2F98   CD A4 56               CALL   execStr   
2F9B   33 20 33 20 3E 00      DB   "3 3 >",0   
2FA1   E1                     POP   HL   
2FA2   E5                     PUSH   HL   
2FA3   11 00 00               LD   DE,FALSE   
2FA6   B7                     OR   A   
2FA7   ED 52                  SBC   HL,DE   
2FA9   7D                     LD   A,L   
2FAA   B4                     OR   H   
2FAB   CA 07 30               JP   Z,expectM_3119S111   
2FAE   CD 14 10               CALL   printStr   
2FB1   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2FBD   CD 14 10               CALL   printStr   
2FC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FCF   21 00 00               LD   hl,FALSE   
2FD2   E5                     PUSH   hl   
2FD3   E5                     PUSH   hl   
2FD4   CD 11 11               CALL   run   
2FD7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
2FE1   CD 14 10               CALL   printStr   
2FE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FF1   E1                     POP   hl   
2FF2   E5                     PUSH   hl   
2FF3   E5                     PUSH   hl   
2FF4   CD 11 11               CALL   run   
2FF7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3006   76                     HALT      
3007                EXPECTM_3119S111:      
3007   E1                     POP   HL   
3008                          ;*Macro unroll:  test "4 3 >", TRUE
3008   31 00 58               LD   SP,STACK   
300B   CD 48 10               CALL   coldInit   
300E   CD A4 56               CALL   execStr   
3011   34 20 33 20 3E 00      DB   "4 3 >",0   
3017   E1                     POP   HL   
3018   E5                     PUSH   HL   
3019   11 FF FF               LD   DE,TRUE   
301C   B7                     OR   A   
301D   ED 52                  SBC   HL,DE   
301F   7D                     LD   A,L   
3020   B4                     OR   H   
3021   CA 7D 30               JP   Z,expectM_3120S112   
3024   CD 14 10               CALL   printStr   
3027   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
3033   CD 14 10               CALL   printStr   
3036   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3045   21 FF FF               LD   hl,TRUE   
3048   E5                     PUSH   hl   
3049   E5                     PUSH   hl   
304A   CD 11 11               CALL   run   
304D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3057   CD 14 10               CALL   printStr   
305A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3067   E1                     POP   hl   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD 11 11               CALL   run   
306D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
307C   76                     HALT      
307D                EXPECTM_3120S112:      
307D   E1                     POP   HL   
307E                          ;*Macro unroll:  test "2 2 <=", TRUE
307E   31 00 58               LD   SP,STACK   
3081   CD 48 10               CALL   coldInit   
3084   CD A4 56               CALL   execStr   
3087   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
308E   E1                     POP   HL   
308F   E5                     PUSH   HL   
3090   11 FF FF               LD   DE,TRUE   
3093   B7                     OR   A   
3094   ED 52                  SBC   HL,DE   
3096   7D                     LD   A,L   
3097   B4                     OR   H   
3098   CA F5 30               JP   Z,expectM_3121S113   
309B   CD 14 10               CALL   printStr   
309E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
30AB   CD 14 10               CALL   printStr   
30AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BD   21 FF FF               LD   hl,TRUE   
30C0   E5                     PUSH   hl   
30C1   E5                     PUSH   hl   
30C2   CD 11 11               CALL   run   
30C5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
30CF   CD 14 10               CALL   printStr   
30D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30DF   E1                     POP   hl   
30E0   E5                     PUSH   hl   
30E1   E5                     PUSH   hl   
30E2   CD 11 11               CALL   run   
30E5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
30F4   76                     HALT      
30F5                EXPECTM_3121S113:      
30F5   E1                     POP   HL   
30F6                          ;*Macro unroll:  test "2 2 >=", TRUE
30F6   31 00 58               LD   SP,STACK   
30F9   CD 48 10               CALL   coldInit   
30FC   CD A4 56               CALL   execStr   
30FF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
3106   E1                     POP   HL   
3107   E5                     PUSH   HL   
3108   11 FF FF               LD   DE,TRUE   
310B   B7                     OR   A   
310C   ED 52                  SBC   HL,DE   
310E   7D                     LD   A,L   
310F   B4                     OR   H   
3110   CA 6D 31               JP   Z,expectM_3122S114   
3113   CD 14 10               CALL   printStr   
3116   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
3123   CD 14 10               CALL   printStr   
3126   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3135   21 FF FF               LD   hl,TRUE   
3138   E5                     PUSH   hl   
3139   E5                     PUSH   hl   
313A   CD 11 11               CALL   run   
313D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3147   CD 14 10               CALL   printStr   
314A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3157   E1                     POP   hl   
3158   E5                     PUSH   hl   
3159   E5                     PUSH   hl   
315A   CD 11 11               CALL   run   
315D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
316C   76                     HALT      
316D                EXPECTM_3122S114:      
316D   E1                     POP   HL   
316E                          ;*Macro unroll:  test "3 1 <<", 6
316E   31 00 58               LD   SP,STACK   
3171   CD 48 10               CALL   coldInit   
3174   CD A4 56               CALL   execStr   
3177   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
317E   E1                     POP   HL   
317F   E5                     PUSH   HL   
3180   11 06 00               LD   DE,6   
3183   B7                     OR   A   
3184   ED 52                  SBC   HL,DE   
3186   7D                     LD   A,L   
3187   B4                     OR   H   
3188   CA E5 31               JP   Z,expectM_3123S115   
318B   CD 14 10               CALL   printStr   
318E   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
319B   CD 14 10               CALL   printStr   
319E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31AD   21 06 00               LD   hl,6   
31B0   E5                     PUSH   hl   
31B1   E5                     PUSH   hl   
31B2   CD 11 11               CALL   run   
31B5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
31BF   CD 14 10               CALL   printStr   
31C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CF   E1                     POP   hl   
31D0   E5                     PUSH   hl   
31D1   E5                     PUSH   hl   
31D2   CD 11 11               CALL   run   
31D5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
31E4   76                     HALT      
31E5                EXPECTM_3123S115:      
31E5   E1                     POP   HL   
31E6                          ;*Macro unroll:  test "10 1 >>", 5
31E6   31 00 58               LD   SP,STACK   
31E9   CD 48 10               CALL   coldInit   
31EC   CD A4 56               CALL   execStr   
31EF   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
31F7   E1                     POP   HL   
31F8   E5                     PUSH   HL   
31F9   11 05 00               LD   DE,5   
31FC   B7                     OR   A   
31FD   ED 52                  SBC   HL,DE   
31FF   7D                     LD   A,L   
3200   B4                     OR   H   
3201   CA 5F 32               JP   Z,expectM_3124S116   
3204   CD 14 10               CALL   printStr   
3207   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
3215   CD 14 10               CALL   printStr   
3218   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3227   21 05 00               LD   hl,5   
322A   E5                     PUSH   hl   
322B   E5                     PUSH   hl   
322C   CD 11 11               CALL   run   
322F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3239   CD 14 10               CALL   printStr   
323C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3249   E1                     POP   hl   
324A   E5                     PUSH   hl   
324B   E5                     PUSH   hl   
324C   CD 11 11               CALL   run   
324F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
325E   76                     HALT      
325F                EXPECTM_3124S116:      
325F   E1                     POP   HL   
3260                          ;*Macro unroll:  test "1 x = x", 1
3260   31 00 58               LD   SP,STACK   
3263   CD 48 10               CALL   coldInit   
3266   CD A4 56               CALL   execStr   
3269   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3271   E1                     POP   HL   
3272   E5                     PUSH   HL   
3273   11 01 00               LD   DE,1   
3276   B7                     OR   A   
3277   ED 52                  SBC   HL,DE   
3279   7D                     LD   A,L   
327A   B4                     OR   H   
327B   CA D9 32               JP   Z,expectM_3125S117   
327E   CD 14 10               CALL   printStr   
3281   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
328F   CD 14 10               CALL   printStr   
3292   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A1   21 01 00               LD   hl,1   
32A4   E5                     PUSH   hl   
32A5   E5                     PUSH   hl   
32A6   CD 11 11               CALL   run   
32A9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
32B3   CD 14 10               CALL   printStr   
32B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C3   E1                     POP   hl   
32C4   E5                     PUSH   hl   
32C5   E5                     PUSH   hl   
32C6   CD 11 11               CALL   run   
32C9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
32D8   76                     HALT      
32D9                EXPECTM_3125S117:      
32D9   E1                     POP   HL   
32DA                          ;*Macro unroll:  test "1{}^", 1
32DA   31 00 58               LD   SP,STACK   
32DD   CD 48 10               CALL   coldInit   
32E0   CD A4 56               CALL   execStr   
32E3   31 7B 7D 5E 00         DB   "1{}^",0   
32E8   E1                     POP   HL   
32E9   E5                     PUSH   HL   
32EA   11 01 00               LD   DE,1   
32ED   B7                     OR   A   
32EE   ED 52                  SBC   HL,DE   
32F0   7D                     LD   A,L   
32F1   B4                     OR   H   
32F2   CA 4D 33               JP   Z,expectM_3126S118   
32F5   CD 14 10               CALL   printStr   
32F8   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
3303   CD 14 10               CALL   printStr   
3306   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3315   21 01 00               LD   hl,1   
3318   E5                     PUSH   hl   
3319   E5                     PUSH   hl   
331A   CD 11 11               CALL   run   
331D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3327   CD 14 10               CALL   printStr   
332A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3337   E1                     POP   hl   
3338   E5                     PUSH   hl   
3339   E5                     PUSH   hl   
333A   CD 11 11               CALL   run   
333D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
334C   76                     HALT      
334D                EXPECTM_3126S118:      
334D   E1                     POP   HL   
334E                          ;*Macro unroll:  test "{1}^", 1
334E   31 00 58               LD   SP,STACK   
3351   CD 48 10               CALL   coldInit   
3354   CD A4 56               CALL   execStr   
3357   7B 31 7D 5E 00         DB   "{1}^",0   
335C   E1                     POP   HL   
335D   E5                     PUSH   HL   
335E   11 01 00               LD   DE,1   
3361   B7                     OR   A   
3362   ED 52                  SBC   HL,DE   
3364   7D                     LD   A,L   
3365   B4                     OR   H   
3366   CA C1 33               JP   Z,expectM_3127S119   
3369   CD 14 10               CALL   printStr   
336C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3377   CD 14 10               CALL   printStr   
337A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3389   21 01 00               LD   hl,1   
338C   E5                     PUSH   hl   
338D   E5                     PUSH   hl   
338E   CD 11 11               CALL   run   
3391   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
339B   CD 14 10               CALL   printStr   
339E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33AB   E1                     POP   hl   
33AC   E5                     PUSH   hl   
33AD   E5                     PUSH   hl   
33AE   CD 11 11               CALL   run   
33B1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
33C0   76                     HALT      
33C1                EXPECTM_3127S119:      
33C1   E1                     POP   HL   
33C2                          ;*Macro unroll:  test "{{1}^}^", 1
33C2   31 00 58               LD   SP,STACK   
33C5   CD 48 10               CALL   coldInit   
33C8   CD A4 56               CALL   execStr   
33CB   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
33D3   E1                     POP   HL   
33D4   E5                     PUSH   HL   
33D5   11 01 00               LD   DE,1   
33D8   B7                     OR   A   
33D9   ED 52                  SBC   HL,DE   
33DB   7D                     LD   A,L   
33DC   B4                     OR   H   
33DD   CA 3B 34               JP   Z,expectM_3128S120   
33E0   CD 14 10               CALL   printStr   
33E3   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
33F1   CD 14 10               CALL   printStr   
33F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3403   21 01 00               LD   hl,1   
3406   E5                     PUSH   hl   
3407   E5                     PUSH   hl   
3408   CD 11 11               CALL   run   
340B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3415   CD 14 10               CALL   printStr   
3418   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3425   E1                     POP   hl   
3426   E5                     PUSH   hl   
3427   E5                     PUSH   hl   
3428   CD 11 11               CALL   run   
342B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
343A   76                     HALT      
343B                EXPECTM_3128S120:      
343B   E1                     POP   HL   
343C                          ;*Macro unroll:  test "{{{1}^}^}^", 1
343C   31 00 58               LD   SP,STACK   
343F   CD 48 10               CALL   coldInit   
3442   CD A4 56               CALL   execStr   
3445   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3450   E1                     POP   HL   
3451   E5                     PUSH   HL   
3452   11 01 00               LD   DE,1   
3455   B7                     OR   A   
3456   ED 52                  SBC   HL,DE   
3458   7D                     LD   A,L   
3459   B4                     OR   H   
345A   CA BB 34               JP   Z,expectM_3129S121   
345D   CD 14 10               CALL   printStr   
3460   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3471   CD 14 10               CALL   printStr   
3474   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3483   21 01 00               LD   hl,1   
3486   E5                     PUSH   hl   
3487   E5                     PUSH   hl   
3488   CD 11 11               CALL   run   
348B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3495   CD 14 10               CALL   printStr   
3498   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34A5   E1                     POP   hl   
34A6   E5                     PUSH   hl   
34A7   E5                     PUSH   hl   
34A8   CD 11 11               CALL   run   
34AB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
34BA   76                     HALT      
34BB                EXPECTM_3129S121:      
34BB   E1                     POP   HL   
34BC                          ;*Macro unroll:  test "1 /f{10}{20} ? +", 21
34BC   31 00 58               LD   SP,STACK   
34BF   CD 48 10               CALL   coldInit   
34C2   CD A4 56               CALL   execStr   
34C5   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /f{10}{20} ? +",0   
34D6   E1                     POP   HL   
34D7   E5                     PUSH   HL   
34D8   11 15 00               LD   DE,21   
34DB   B7                     OR   A   
34DC   ED 52                  SBC   HL,DE   
34DE   7D                     LD   A,L   
34DF   B4                     OR   H   
34E0   CA 47 35               JP   Z,expectM_3130S122   
34E3   CD 14 10               CALL   printStr   
34E6   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ? +"   
34FD   CD 14 10               CALL   printStr   
3500   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350F   21 15 00               LD   hl,21   
3512   E5                     PUSH   hl   
3513   E5                     PUSH   hl   
3514   CD 11 11               CALL   run   
3517   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3521   CD 14 10               CALL   printStr   
3524   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3531   E1                     POP   hl   
3532   E5                     PUSH   hl   
3533   E5                     PUSH   hl   
3534   CD 11 11               CALL   run   
3537   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3546   76                     HALT      
3547                EXPECTM_3130S122:      
3547   E1                     POP   HL   
3548                          ;*Macro unroll:  test "1 /t{10}{20} ? +", 11
3548   31 00 58               LD   SP,STACK   
354B   CD 48 10               CALL   coldInit   
354E   CD A4 56               CALL   execStr   
3551   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /t{10}{20} ? +",0   
3562   E1                     POP   HL   
3563   E5                     PUSH   HL   
3564   11 0B 00               LD   DE,11   
3567   B7                     OR   A   
3568   ED 52                  SBC   HL,DE   
356A   7D                     LD   A,L   
356B   B4                     OR   H   
356C   CA D3 35               JP   Z,expectM_3131S123   
356F   CD 14 10               CALL   printStr   
3572   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ? +"   
3589   CD 14 10               CALL   printStr   
358C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359B   21 0B 00               LD   hl,11   
359E   E5                     PUSH   hl   
359F   E5                     PUSH   hl   
35A0   CD 11 11               CALL   run   
35A3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
35AD   CD 14 10               CALL   printStr   
35B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BD   E1                     POP   hl   
35BE   E5                     PUSH   hl   
35BF   E5                     PUSH   hl   
35C0   CD 11 11               CALL   run   
35C3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
35D2   76                     HALT      
35D3                EXPECTM_3131S123:      
35D3   E1                     POP   HL   
35D4                          ;*Macro unroll:  test "\\{2}^", 2
35D4   31 00 58               LD   SP,STACK   
35D7   CD 48 10               CALL   coldInit   
35DA   CD A4 56               CALL   execStr   
35DD   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
35E3   E1                     POP   HL   
35E4   E5                     PUSH   HL   
35E5   11 02 00               LD   DE,2   
35E8   B7                     OR   A   
35E9   ED 52                  SBC   HL,DE   
35EB   7D                     LD   A,L   
35EC   B4                     OR   H   
35ED   CA 49 36               JP   Z,expectM_3132S124   
35F0   CD 14 10               CALL   printStr   
35F3   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
35FF   CD 14 10               CALL   printStr   
3602   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3611   21 02 00               LD   hl,2   
3614   E5                     PUSH   hl   
3615   E5                     PUSH   hl   
3616   CD 11 11               CALL   run   
3619   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3623   CD 14 10               CALL   printStr   
3626   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3633   E1                     POP   hl   
3634   E5                     PUSH   hl   
3635   E5                     PUSH   hl   
3636   CD 11 11               CALL   run   
3639   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3648   76                     HALT      
3649                EXPECTM_3132S124:      
3649   E1                     POP   HL   
364A                          ;*Macro unroll:  test "\\a{2}^", 2
364A   31 00 58               LD   SP,STACK   
364D   CD 48 10               CALL   coldInit   
3650   CD A4 56               CALL   execStr   
3653   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
365A   E1                     POP   HL   
365B   E5                     PUSH   HL   
365C   11 02 00               LD   DE,2   
365F   B7                     OR   A   
3660   ED 52                  SBC   HL,DE   
3662   7D                     LD   A,L   
3663   B4                     OR   H   
3664   CA C1 36               JP   Z,expectM_3133S125   
3667   CD 14 10               CALL   printStr   
366A   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3677   CD 14 10               CALL   printStr   
367A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3689   21 02 00               LD   hl,2   
368C   E5                     PUSH   hl   
368D   E5                     PUSH   hl   
368E   CD 11 11               CALL   run   
3691   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
369B   CD 14 10               CALL   printStr   
369E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36AB   E1                     POP   hl   
36AC   E5                     PUSH   hl   
36AD   E5                     PUSH   hl   
36AE   CD 11 11               CALL   run   
36B1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
36C0   76                     HALT      
36C1                EXPECTM_3133S125:      
36C1   E1                     POP   HL   
36C2                          ;*Macro unroll:  test "5 \\a{%a}^", 5
36C2   31 00 58               LD   SP,STACK   
36C5   CD 48 10               CALL   coldInit   
36C8   CD A4 56               CALL   execStr   
36CB   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
36D5   E1                     POP   HL   
36D6   E5                     PUSH   HL   
36D7   11 05 00               LD   DE,5   
36DA   B7                     OR   A   
36DB   ED 52                  SBC   HL,DE   
36DD   7D                     LD   A,L   
36DE   B4                     OR   H   
36DF   CA 3F 37               JP   Z,expectM_3134S126   
36E2   CD 14 10               CALL   printStr   
36E5   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
36F5   CD 14 10               CALL   printStr   
36F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3707   21 05 00               LD   hl,5   
370A   E5                     PUSH   hl   
370B   E5                     PUSH   hl   
370C   CD 11 11               CALL   run   
370F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3719   CD 14 10               CALL   printStr   
371C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3729   E1                     POP   hl   
372A   E5                     PUSH   hl   
372B   E5                     PUSH   hl   
372C   CD 11 11               CALL   run   
372F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
373E   76                     HALT      
373F                EXPECTM_3134S126:      
373F   E1                     POP   HL   
3740                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3740   31 00 58               LD   SP,STACK   
3743   CD 48 10               CALL   coldInit   
3746   CD A4 56               CALL   execStr   
3749   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
3755   E1                     POP   HL   
3756   E5                     PUSH   HL   
3757   11 05 00               LD   DE,5   
375A   B7                     OR   A   
375B   ED 52                  SBC   HL,DE   
375D   7D                     LD   A,L   
375E   B4                     OR   H   
375F   CA C1 37               JP   Z,expectM_3135S127   
3762   CD 14 10               CALL   printStr   
3765   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3777   CD 14 10               CALL   printStr   
377A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3789   21 05 00               LD   hl,5   
378C   E5                     PUSH   hl   
378D   E5                     PUSH   hl   
378E   CD 11 11               CALL   run   
3791   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
379B   CD 14 10               CALL   printStr   
379E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37AB   E1                     POP   hl   
37AC   E5                     PUSH   hl   
37AD   E5                     PUSH   hl   
37AE   CD 11 11               CALL   run   
37B1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
37C0   76                     HALT      
37C1                EXPECTM_3135S127:      
37C1   E1                     POP   HL   
37C2                          ;*Macro unroll:  test "\\a{{2}^}^", 2
37C2   31 00 58               LD   SP,STACK   
37C5   CD 48 10               CALL   coldInit   
37C8   CD A4 56               CALL   execStr   
37CB   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
37D5   E1                     POP   HL   
37D6   E5                     PUSH   HL   
37D7   11 02 00               LD   DE,2   
37DA   B7                     OR   A   
37DB   ED 52                  SBC   HL,DE   
37DD   7D                     LD   A,L   
37DE   B4                     OR   H   
37DF   CA 3F 38               JP   Z,expectM_3136S128   
37E2   CD 14 10               CALL   printStr   
37E5   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
37F5   CD 14 10               CALL   printStr   
37F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3807   21 02 00               LD   hl,2   
380A   E5                     PUSH   hl   
380B   E5                     PUSH   hl   
380C   CD 11 11               CALL   run   
380F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3819   CD 14 10               CALL   printStr   
381C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3829   E1                     POP   hl   
382A   E5                     PUSH   hl   
382B   E5                     PUSH   hl   
382C   CD 11 11               CALL   run   
382F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
383E   76                     HALT      
383F                EXPECTM_3136S128:      
383F   E1                     POP   HL   
3840                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3840   31 00 58               LD   SP,STACK   
3843   CD 48 10               CALL   coldInit   
3846   CD A4 56               CALL   execStr   
3849   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3858   E1                     POP   HL   
3859   E5                     PUSH   HL   
385A   11 05 00               LD   DE,5   
385D   B7                     OR   A   
385E   ED 52                  SBC   HL,DE   
3860   7D                     LD   A,L   
3861   B4                     OR   H   
3862   CA C7 38               JP   Z,expectM_3137S129   
3865   CD 14 10               CALL   printStr   
3868   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
387D   CD 14 10               CALL   printStr   
3880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
388F   21 05 00               LD   hl,5   
3892   E5                     PUSH   hl   
3893   E5                     PUSH   hl   
3894   CD 11 11               CALL   run   
3897   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
38A1   CD 14 10               CALL   printStr   
38A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38B1   E1                     POP   hl   
38B2   E5                     PUSH   hl   
38B3   E5                     PUSH   hl   
38B4   CD 11 11               CALL   run   
38B7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
38C6   76                     HALT      
38C7                EXPECTM_3137S129:      
38C7   E1                     POP   HL   
38C8                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
38C8   31 00 58               LD   SP,STACK   
38CB   CD 48 10               CALL   coldInit   
38CE   CD A4 56               CALL   execStr   
38D1   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
38E1   E1                     POP   HL   
38E2   E5                     PUSH   HL   
38E3   11 01 00               LD   DE,1   
38E6   B7                     OR   A   
38E7   ED 52                  SBC   HL,DE   
38E9   7D                     LD   A,L   
38EA   B4                     OR   H   
38EB   CA 51 39               JP   Z,expectM_3138S130   
38EE   CD 14 10               CALL   printStr   
38F1   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3907   CD 14 10               CALL   printStr   
390A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3919   21 01 00               LD   hl,1   
391C   E5                     PUSH   hl   
391D   E5                     PUSH   hl   
391E   CD 11 11               CALL   run   
3921   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
392B   CD 14 10               CALL   printStr   
392E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
393B   E1                     POP   hl   
393C   E5                     PUSH   hl   
393D   E5                     PUSH   hl   
393E   CD 11 11               CALL   run   
3941   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3950   76                     HALT      
3951                EXPECTM_3138S130:      
3951   E1                     POP   HL   
3952                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3952   31 00 58               LD   SP,STACK   
3955   CD 48 10               CALL   coldInit   
3958   CD A4 56               CALL   execStr   
395B   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
396E   E1                     POP   HL   
396F   E5                     PUSH   HL   
3970   11 07 00               LD   DE,7   
3973   B7                     OR   A   
3974   ED 52                  SBC   HL,DE   
3976   7D                     LD   A,L   
3977   B4                     OR   H   
3978   CA E1 39               JP   Z,expectM_3139S131   
397B   CD 14 10               CALL   printStr   
397E   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3997   CD 14 10               CALL   printStr   
399A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39A9   21 07 00               LD   hl,7   
39AC   E5                     PUSH   hl   
39AD   E5                     PUSH   hl   
39AE   CD 11 11               CALL   run   
39B1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
39BB   CD 14 10               CALL   printStr   
39BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39CB   E1                     POP   hl   
39CC   E5                     PUSH   hl   
39CD   E5                     PUSH   hl   
39CE   CD 11 11               CALL   run   
39D1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
39E0   76                     HALT      
39E1                EXPECTM_3139S131:      
39E1   E1                     POP   HL   
39E2                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
39E2   31 00 58               LD   SP,STACK   
39E5   CD 48 10               CALL   coldInit   
39E8   CD A4 56               CALL   execStr   
39EB   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3A00   E1                     POP   HL   
3A01   E5                     PUSH   HL   
3A02   11 06 00               LD   DE,6   
3A05   B7                     OR   A   
3A06   ED 52                  SBC   HL,DE   
3A08   7D                     LD   A,L   
3A09   B4                     OR   H   
3A0A   CA 75 3A               JP   Z,expectM_3140S132   
3A0D   CD 14 10               CALL   printStr   
3A10   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3A2B   CD 14 10               CALL   printStr   
3A2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A3D   21 06 00               LD   hl,6   
3A40   E5                     PUSH   hl   
3A41   E5                     PUSH   hl   
3A42   CD 11 11               CALL   run   
3A45   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3A4F   CD 14 10               CALL   printStr   
3A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A5F   E1                     POP   hl   
3A60   E5                     PUSH   hl   
3A61   E5                     PUSH   hl   
3A62   CD 11 11               CALL   run   
3A65   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3A74   76                     HALT      
3A75                EXPECTM_3140S132:      
3A75   E1                     POP   HL   
3A76                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3A76   31 00 58               LD   SP,STACK   
3A79   CD 48 10               CALL   coldInit   
3A7C   CD A4 56               CALL   execStr   
3A7F   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3A8D   E1                     POP   HL   
3A8E   E5                     PUSH   HL   
3A8F   11 02 00               LD   DE,2   
3A92   B7                     OR   A   
3A93   ED 52                  SBC   HL,DE   
3A95   7D                     LD   A,L   
3A96   B4                     OR   H   
3A97   CA FB 3A               JP   Z,expectM_3141S133   
3A9A   CD 14 10               CALL   printStr   
3A9D   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3AB1   CD 14 10               CALL   printStr   
3AB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC3   21 02 00               LD   hl,2   
3AC6   E5                     PUSH   hl   
3AC7   E5                     PUSH   hl   
3AC8   CD 11 11               CALL   run   
3ACB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3AD5   CD 14 10               CALL   printStr   
3AD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AE5   E1                     POP   hl   
3AE6   E5                     PUSH   hl   
3AE7   E5                     PUSH   hl   
3AE8   CD 11 11               CALL   run   
3AEB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3AFA   76                     HALT      
3AFB                EXPECTM_3141S133:      
3AFB   E1                     POP   HL   
3AFC                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3AFC   31 00 58               LD   SP,STACK   
3AFF   CD 48 10               CALL   coldInit   
3B02   CD A4 56               CALL   execStr   
3B05   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3B16   E1                     POP   HL   
3B17   E5                     PUSH   HL   
3B18   11 01 00               LD   DE,1   
3B1B   B7                     OR   A   
3B1C   ED 52                  SBC   HL,DE   
3B1E   7D                     LD   A,L   
3B1F   B4                     OR   H   
3B20   CA 87 3B               JP   Z,expectM_3142S134   
3B23   CD 14 10               CALL   printStr   
3B26   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3B3D   CD 14 10               CALL   printStr   
3B40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B4F   21 01 00               LD   hl,1   
3B52   E5                     PUSH   hl   
3B53   E5                     PUSH   hl   
3B54   CD 11 11               CALL   run   
3B57   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3B61   CD 14 10               CALL   printStr   
3B64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B71   E1                     POP   hl   
3B72   E5                     PUSH   hl   
3B73   E5                     PUSH   hl   
3B74   CD 11 11               CALL   run   
3B77   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3B86   76                     HALT      
3B87                EXPECTM_3142S134:      
3B87   E1                     POP   HL   
3B88                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3B88   31 00 58               LD   SP,STACK   
3B8B   CD 48 10               CALL   coldInit   
3B8E   CD A4 56               CALL   execStr   
3B91   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3BA3   E1                     POP   HL   
3BA4   E5                     PUSH   HL   
3BA5   11 02 00               LD   DE,2   
3BA8   B7                     OR   A   
3BA9   ED 52                  SBC   HL,DE   
3BAB   7D                     LD   A,L   
3BAC   B4                     OR   H   
3BAD   CA 15 3C               JP   Z,expectM_3143S135   
3BB0   CD 14 10               CALL   printStr   
3BB3   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3BCB   CD 14 10               CALL   printStr   
3BCE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BDD   21 02 00               LD   hl,2   
3BE0   E5                     PUSH   hl   
3BE1   E5                     PUSH   hl   
3BE2   CD 11 11               CALL   run   
3BE5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3BEF   CD 14 10               CALL   printStr   
3BF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BFF   E1                     POP   hl   
3C00   E5                     PUSH   hl   
3C01   E5                     PUSH   hl   
3C02   CD 11 11               CALL   run   
3C05   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3C14   76                     HALT      
3C15                EXPECTM_3143S135:      
3C15   E1                     POP   HL   
3C16                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3C16   31 00 58               LD   SP,STACK   
3C19   CD 48 10               CALL   coldInit   
3C1C   CD A4 56               CALL   execStr   
3C1F   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3C32   E1                     POP   HL   
3C33   E5                     PUSH   HL   
3C34   11 02 00               LD   DE,2   
3C37   B7                     OR   A   
3C38   ED 52                  SBC   HL,DE   
3C3A   7D                     LD   A,L   
3C3B   B4                     OR   H   
3C3C   CA A5 3C               JP   Z,expectM_3144S136   
3C3F   CD 14 10               CALL   printStr   
3C42   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3C5B   CD 14 10               CALL   printStr   
3C5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C6D   21 02 00               LD   hl,2   
3C70   E5                     PUSH   hl   
3C71   E5                     PUSH   hl   
3C72   CD 11 11               CALL   run   
3C75   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3C7F   CD 14 10               CALL   printStr   
3C82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C8F   E1                     POP   hl   
3C90   E5                     PUSH   hl   
3C91   E5                     PUSH   hl   
3C92   CD 11 11               CALL   run   
3C95   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3CA4   76                     HALT      
3CA5                EXPECTM_3144S136:      
3CA5   E1                     POP   HL   
3CA6                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3CA6   31 00 58               LD   SP,STACK   
3CA9   CD 48 10               CALL   coldInit   
3CAC   CD A4 56               CALL   execStr   
3CAF   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3CC1   E1                     POP   HL   
3CC2   E5                     PUSH   HL   
3CC3   11 02 00               LD   DE,2   
3CC6   B7                     OR   A   
3CC7   ED 52                  SBC   HL,DE   
3CC9   7D                     LD   A,L   
3CCA   B4                     OR   H   
3CCB   CA 33 3D               JP   Z,expectM_3145S137   
3CCE   CD 14 10               CALL   printStr   
3CD1   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3CE9   CD 14 10               CALL   printStr   
3CEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CFB   21 02 00               LD   hl,2   
3CFE   E5                     PUSH   hl   
3CFF   E5                     PUSH   hl   
3D00   CD 11 11               CALL   run   
3D03   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3D0D   CD 14 10               CALL   printStr   
3D10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D1D   E1                     POP   hl   
3D1E   E5                     PUSH   hl   
3D1F   E5                     PUSH   hl   
3D20   CD 11 11               CALL   run   
3D23   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3D32   76                     HALT      
3D33                EXPECTM_3145S137:      
3D33   E1                     POP   HL   
3D34                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3D34   31 00 58               LD   SP,STACK   
3D37   CD 48 10               CALL   coldInit   
3D3A   CD A4 56               CALL   execStr   
3D3D   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3D56   E1                     POP   HL   
3D57   E5                     PUSH   HL   
3D58   11 05 00               LD   DE,5   
3D5B   B7                     OR   A   
3D5C   ED 52                  SBC   HL,DE   
3D5E   7D                     LD   A,L   
3D5F   B4                     OR   H   
3D60   CA CF 3D               JP   Z,expectM_3146S138   
3D63   CD 14 10               CALL   printStr   
3D66   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3D85   CD 14 10               CALL   printStr   
3D88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D97   21 05 00               LD   hl,5   
3D9A   E5                     PUSH   hl   
3D9B   E5                     PUSH   hl   
3D9C   CD 11 11               CALL   run   
3D9F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3DA9   CD 14 10               CALL   printStr   
3DAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DB9   E1                     POP   hl   
3DBA   E5                     PUSH   hl   
3DBB   E5                     PUSH   hl   
3DBC   CD 11 11               CALL   run   
3DBF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3DCE   76                     HALT      
3DCF                EXPECTM_3146S138:      
3DCF   E1                     POP   HL   
3DD0                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3DD0   31 00 58               LD   SP,STACK   
3DD3   CD 48 10               CALL   coldInit   
3DD6   CD A4 56               CALL   execStr   
3DD9   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3DE9   E1                     POP   HL   
3DEA   E5                     PUSH   HL   
3DEB   11 02 00               LD   DE,2   
3DEE   B7                     OR   A   
3DEF   ED 52                  SBC   HL,DE   
3DF1   7D                     LD   A,L   
3DF2   B4                     OR   H   
3DF3   CA 59 3E               JP   Z,expectM_3147S139   
3DF6   CD 14 10               CALL   printStr   
3DF9   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3E0F   CD 14 10               CALL   printStr   
3E12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E21   21 02 00               LD   hl,2   
3E24   E5                     PUSH   hl   
3E25   E5                     PUSH   hl   
3E26   CD 11 11               CALL   run   
3E29   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3E33   CD 14 10               CALL   printStr   
3E36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E43   E1                     POP   hl   
3E44   E5                     PUSH   hl   
3E45   E5                     PUSH   hl   
3E46   CD 11 11               CALL   run   
3E49   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3E58   76                     HALT      
3E59                EXPECTM_3147S139:      
3E59   E1                     POP   HL   
3E5A                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3E5A   31 00 58               LD   SP,STACK   
3E5D   CD 48 10               CALL   coldInit   
3E60   CD A4 56               CALL   execStr   
3E63   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3E7A   E1                     POP   HL   
3E7B   E5                     PUSH   HL   
3E7C   11 64 00               LD   DE,100   
3E7F   B7                     OR   A   
3E80   ED 52                  SBC   HL,DE   
3E82   7D                     LD   A,L   
3E83   B4                     OR   H   
3E84   CA F1 3E               JP   Z,expectM_3148S140   
3E87   CD 14 10               CALL   printStr   
3E8A   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3EA7   CD 14 10               CALL   printStr   
3EAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EB9   21 64 00               LD   hl,100   
3EBC   E5                     PUSH   hl   
3EBD   E5                     PUSH   hl   
3EBE   CD 11 11               CALL   run   
3EC1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3ECB   CD 14 10               CALL   printStr   
3ECE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EDB   E1                     POP   hl   
3EDC   E5                     PUSH   hl   
3EDD   E5                     PUSH   hl   
3EDE   CD 11 11               CALL   run   
3EE1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3EF0   76                     HALT      
3EF1                EXPECTM_3148S140:      
3EF1   E1                     POP   HL   
3EF2                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3EF2   31 00 58               LD   SP,STACK   
3EF5   CD 48 10               CALL   coldInit   
3EF8   CD A4 56               CALL   execStr   
3EFB   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3F13   E1                     POP   HL   
3F14   E5                     PUSH   HL   
3F15   11 01 00               LD   DE,1   
3F18   B7                     OR   A   
3F19   ED 52                  SBC   HL,DE   
3F1B   7D                     LD   A,L   
3F1C   B4                     OR   H   
3F1D   CA 8B 3F               JP   Z,expectM_3149S141   
3F20   CD 14 10               CALL   printStr   
3F23   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3F41   CD 14 10               CALL   printStr   
3F44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F53   21 01 00               LD   hl,1   
3F56   E5                     PUSH   hl   
3F57   E5                     PUSH   hl   
3F58   CD 11 11               CALL   run   
3F5B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
3F65   CD 14 10               CALL   printStr   
3F68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F75   E1                     POP   hl   
3F76   E5                     PUSH   hl   
3F77   E5                     PUSH   hl   
3F78   CD 11 11               CALL   run   
3F7B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
3F8A   76                     HALT      
3F8B                EXPECTM_3149S141:      
3F8B   E1                     POP   HL   
3F8C                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3F8C   31 00 58               LD   SP,STACK   
3F8F   CD 48 10               CALL   coldInit   
3F92   CD A4 56               CALL   execStr   
3F95   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3FAE   E1                     POP   HL   
3FAF   E5                     PUSH   HL   
3FB0   11 02 00               LD   DE,2   
3FB3   B7                     OR   A   
3FB4   ED 52                  SBC   HL,DE   
3FB6   7D                     LD   A,L   
3FB7   B4                     OR   H   
3FB8   CA 27 40               JP   Z,expectM_3150S142   
3FBB   CD 14 10               CALL   printStr   
3FBE   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3FDD   CD 14 10               CALL   printStr   
3FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FEF   21 02 00               LD   hl,2   
3FF2   E5                     PUSH   hl   
3FF3   E5                     PUSH   hl   
3FF4   CD 11 11               CALL   run   
3FF7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4001   CD 14 10               CALL   printStr   
4004   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4011   E1                     POP   hl   
4012   E5                     PUSH   hl   
4013   E5                     PUSH   hl   
4014   CD 11 11               CALL   run   
4017   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4026   76                     HALT      
4027                EXPECTM_3150S142:      
4027   E1                     POP   HL   
4028                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ?}^ +", 11
4028   31 00 58               LD   SP,STACK   
402B   CD 48 10               CALL   coldInit   
402E   CD A4 56               CALL   execStr   
4031   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ?}^ +",0   
404E   E1                     POP   HL   
404F   E5                     PUSH   HL   
4050   11 0B 00               LD   DE,11   
4053   B7                     OR   A   
4054   ED 52                  SBC   HL,DE   
4056   7D                     LD   A,L   
4057   B4                     OR   H   
4058   CA CB 40               JP   Z,expectM_3151S143   
405B   CD 14 10               CALL   printStr   
405E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ?}^ +"   
4081   CD 14 10               CALL   printStr   
4084   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4093   21 0B 00               LD   hl,11   
4096   E5                     PUSH   hl   
4097   E5                     PUSH   hl   
4098   CD 11 11               CALL   run   
409B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
40A5   CD 14 10               CALL   printStr   
40A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40B5   E1                     POP   hl   
40B6   E5                     PUSH   hl   
40B7   E5                     PUSH   hl   
40B8   CD 11 11               CALL   run   
40BB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
40CA   76                     HALT      
40CB                EXPECTM_3151S143:      
40CB   E1                     POP   HL   
40CC                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ?}^ +", 21
40CC   31 00 58               LD   SP,STACK   
40CF   CD 48 10               CALL   coldInit   
40D2   CD A4 56               CALL   execStr   
40D5   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ?}^ +",0   
40F2   E1                     POP   HL   
40F3   E5                     PUSH   HL   
40F4   11 15 00               LD   DE,21   
40F7   B7                     OR   A   
40F8   ED 52                  SBC   HL,DE   
40FA   7D                     LD   A,L   
40FB   B4                     OR   H   
40FC   CA 6F 41               JP   Z,expectM_3152S144   
40FF   CD 14 10               CALL   printStr   
4102   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ?}^ +"   
4125   CD 14 10               CALL   printStr   
4128   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4137   21 15 00               LD   hl,21   
413A   E5                     PUSH   hl   
413B   E5                     PUSH   hl   
413C   CD 11 11               CALL   run   
413F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4149   CD 14 10               CALL   printStr   
414C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4159   E1                     POP   hl   
415A   E5                     PUSH   hl   
415B   E5                     PUSH   hl   
415C   CD 11 11               CALL   run   
415F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
416E   76                     HALT      
416F                EXPECTM_3152S144:      
416F   E1                     POP   HL   
4170                          ;*Macro unroll:  test "[10 20 30] 1;", 20
4170   31 00 58               LD   SP,STACK   
4173   CD 48 10               CALL   coldInit   
4176   CD A4 56               CALL   execStr   
4179   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
4187   E1                     POP   HL   
4188   E5                     PUSH   HL   
4189   11 14 00               LD   DE,20   
418C   B7                     OR   A   
418D   ED 52                  SBC   HL,DE   
418F   7D                     LD   A,L   
4190   B4                     OR   H   
4191   CA F5 41               JP   Z,expectM_3153S145   
4194   CD 14 10               CALL   printStr   
4197   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
41AB   CD 14 10               CALL   printStr   
41AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BD   21 14 00               LD   hl,20   
41C0   E5                     PUSH   hl   
41C1   E5                     PUSH   hl   
41C2   CD 11 11               CALL   run   
41C5   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
41CF   CD 14 10               CALL   printStr   
41D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DF   E1                     POP   hl   
41E0   E5                     PUSH   hl   
41E1   E5                     PUSH   hl   
41E2   CD 11 11               CALL   run   
41E5   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
41F4   76                     HALT      
41F5                EXPECTM_3153S145:      
41F5   E1                     POP   HL   
41F6                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
41F6   31 00 58               LD   SP,STACK   
41F9   CD 48 10               CALL   coldInit   
41FC   CD A4 56               CALL   execStr   
41FF   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
4212   E1                     POP   HL   
4213   E5                     PUSH   HL   
4214   11 04 00               LD   DE,4   
4217   B7                     OR   A   
4218   ED 52                  SBC   HL,DE   
421A   7D                     LD   A,L   
421B   B4                     OR   H   
421C   CA 85 42               JP   Z,expectM_3154S146   
421F   CD 14 10               CALL   printStr   
4222   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
423B   CD 14 10               CALL   printStr   
423E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
424D   21 04 00               LD   hl,4   
4250   E5                     PUSH   hl   
4251   E5                     PUSH   hl   
4252   CD 11 11               CALL   run   
4255   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
425F   CD 14 10               CALL   printStr   
4262   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
426F   E1                     POP   hl   
4270   E5                     PUSH   hl   
4271   E5                     PUSH   hl   
4272   CD 11 11               CALL   run   
4275   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4284   76                     HALT      
4285                EXPECTM_3154S146:      
4285   E1                     POP   HL   
4286                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
4286   31 00 58               LD   SP,STACK   
4289   CD 48 10               CALL   coldInit   
428C   CD A4 56               CALL   execStr   
428F   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
429F   E1                     POP   HL   
42A0   E5                     PUSH   HL   
42A1   11 02 00               LD   DE,2   
42A4   B7                     OR   A   
42A5   ED 52                  SBC   HL,DE   
42A7   7D                     LD   A,L   
42A8   B4                     OR   H   
42A9   CA 0F 43               JP   Z,expectM_3155S147   
42AC   CD 14 10               CALL   printStr   
42AF   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
42C5   CD 14 10               CALL   printStr   
42C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D7   21 02 00               LD   hl,2   
42DA   E5                     PUSH   hl   
42DB   E5                     PUSH   hl   
42DC   CD 11 11               CALL   run   
42DF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
42E9   CD 14 10               CALL   printStr   
42EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F9   E1                     POP   hl   
42FA   E5                     PUSH   hl   
42FB   E5                     PUSH   hl   
42FC   CD 11 11               CALL   run   
42FF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
430E   76                     HALT      
430F                EXPECTM_3155S147:      
430F   E1                     POP   HL   
4310                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
4310   31 00 58               LD   SP,STACK   
4313   CD 48 10               CALL   coldInit   
4316   CD A4 56               CALL   execStr   
4319   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
432C   E1                     POP   HL   
432D   E5                     PUSH   HL   
432E   11 42 00               LD   DE,66   
4331   B7                     OR   A   
4332   ED 52                  SBC   HL,DE   
4334   7D                     LD   A,L   
4335   B4                     OR   H   
4336   CA 9F 43               JP   Z,expectM_3156S148   
4339   CD 14 10               CALL   printStr   
433C   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
4355   CD 14 10               CALL   printStr   
4358   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4367   21 42 00               LD   hl,66   
436A   E5                     PUSH   hl   
436B   E5                     PUSH   hl   
436C   CD 11 11               CALL   run   
436F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4379   CD 14 10               CALL   printStr   
437C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4389   E1                     POP   hl   
438A   E5                     PUSH   hl   
438B   E5                     PUSH   hl   
438C   CD 11 11               CALL   run   
438F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
439E   76                     HALT      
439F                EXPECTM_3156S148:      
439F   E1                     POP   HL   
43A0                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
43A0   31 00 58               LD   SP,STACK   
43A3   CD 48 10               CALL   coldInit   
43A6   CD A4 56               CALL   execStr   
43A9   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
43BD   E1                     POP   HL   
43BE   E5                     PUSH   HL   
43BF   11 0A 00               LD   DE,10   
43C2   B7                     OR   A   
43C3   ED 52                  SBC   HL,DE   
43C5   7D                     LD   A,L   
43C6   B4                     OR   H   
43C7   CA 31 44               JP   Z,expectM_3157S149   
43CA   CD 14 10               CALL   printStr   
43CD   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
43E7   CD 14 10               CALL   printStr   
43EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43F9   21 0A 00               LD   hl,10   
43FC   E5                     PUSH   hl   
43FD   E5                     PUSH   hl   
43FE   CD 11 11               CALL   run   
4401   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
440B   CD 14 10               CALL   printStr   
440E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
441B   E1                     POP   hl   
441C   E5                     PUSH   hl   
441D   E5                     PUSH   hl   
441E   CD 11 11               CALL   run   
4421   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4430   76                     HALT      
4431                EXPECTM_3157S149:      
4431   E1                     POP   HL   
4432                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
4432   31 00 58               LD   SP,STACK   
4435   CD 48 10               CALL   coldInit   
4438   CD A4 56               CALL   execStr   
443B   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
4456   E1                     POP   HL   
4457   E5                     PUSH   HL   
4458   11 0A 00               LD   DE,10   
445B   B7                     OR   A   
445C   ED 52                  SBC   HL,DE   
445E   7D                     LD   A,L   
445F   B4                     OR   H   
4460   CA D1 44               JP   Z,expectM_3158S150   
4463   CD 14 10               CALL   printStr   
4466   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
4487   CD 14 10               CALL   printStr   
448A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4499   21 0A 00               LD   hl,10   
449C   E5                     PUSH   hl   
449D   E5                     PUSH   hl   
449E   CD 11 11               CALL   run   
44A1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
44AB   CD 14 10               CALL   printStr   
44AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44BB   E1                     POP   hl   
44BC   E5                     PUSH   hl   
44BD   E5                     PUSH   hl   
44BE   CD 11 11               CALL   run   
44C1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
44D0   76                     HALT      
44D1                EXPECTM_3158S150:      
44D1   E1                     POP   HL   
44D2                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
44D2   31 00 58               LD   SP,STACK   
44D5   CD 48 10               CALL   coldInit   
44D8   CD A4 56               CALL   execStr   
44DB   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
44FA   E1                     POP   HL   
44FB   E5                     PUSH   HL   
44FC   11 0A 00               LD   DE,10   
44FF   B7                     OR   A   
4500   ED 52                  SBC   HL,DE   
4502   7D                     LD   A,L   
4503   B4                     OR   H   
4504   CA 79 45               JP   Z,expectM_3159S151   
4507   CD 14 10               CALL   printStr   
450A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
452F   CD 14 10               CALL   printStr   
4532   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4541   21 0A 00               LD   hl,10   
4544   E5                     PUSH   hl   
4545   E5                     PUSH   hl   
4546   CD 11 11               CALL   run   
4549   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4553   CD 14 10               CALL   printStr   
4556   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4563   E1                     POP   hl   
4564   E5                     PUSH   hl   
4565   E5                     PUSH   hl   
4566   CD 11 11               CALL   run   
4569   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4578   76                     HALT      
4579                EXPECTM_3159S151:      
4579   E1                     POP   HL   
457A                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
457A   31 00 58               LD   SP,STACK   
457D   CD 48 10               CALL   coldInit   
4580   CD A4 56               CALL   execStr   
4583   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
45A2   E1                     POP   HL   
45A3   E5                     PUSH   HL   
45A4   11 14 00               LD   DE,20   
45A7   B7                     OR   A   
45A8   ED 52                  SBC   HL,DE   
45AA   7D                     LD   A,L   
45AB   B4                     OR   H   
45AC   CA 21 46               JP   Z,expectM_3160S152   
45AF   CD 14 10               CALL   printStr   
45B2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
45D7   CD 14 10               CALL   printStr   
45DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E9   21 14 00               LD   hl,20   
45EC   E5                     PUSH   hl   
45ED   E5                     PUSH   hl   
45EE   CD 11 11               CALL   run   
45F1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
45FB   CD 14 10               CALL   printStr   
45FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
460B   E1                     POP   hl   
460C   E5                     PUSH   hl   
460D   E5                     PUSH   hl   
460E   CD 11 11               CALL   run   
4611   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4620   76                     HALT      
4621                EXPECTM_3160S152:      
4621   E1                     POP   HL   
4622                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
4622   31 00 58               LD   SP,STACK   
4625   CD 48 10               CALL   coldInit   
4628   CD A4 56               CALL   execStr   
462B   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
4644   E1                     POP   HL   
4645   E5                     PUSH   HL   
4646   11 06 00               LD   DE,6   
4649   B7                     OR   A   
464A   ED 52                  SBC   HL,DE   
464C   7D                     LD   A,L   
464D   B4                     OR   H   
464E   CA BD 46               JP   Z,expectM_3161S153   
4651   CD 14 10               CALL   printStr   
4654   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
4673   CD 14 10               CALL   printStr   
4676   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4685   21 06 00               LD   hl,6   
4688   E5                     PUSH   hl   
4689   E5                     PUSH   hl   
468A   CD 11 11               CALL   run   
468D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4697   CD 14 10               CALL   printStr   
469A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46A7   E1                     POP   hl   
46A8   E5                     PUSH   hl   
46A9   E5                     PUSH   hl   
46AA   CD 11 11               CALL   run   
46AD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
46BC   76                     HALT      
46BD                EXPECTM_3161S153:      
46BD   E1                     POP   HL   
46BE                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
46BE   31 00 58               LD   SP,STACK   
46C1   CD 48 10               CALL   coldInit   
46C4   CD A4 56               CALL   execStr   
46C7   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
46E3   E1                     POP   HL   
46E4   E5                     PUSH   HL   
46E5   11 02 00               LD   DE,2   
46E8   B7                     OR   A   
46E9   ED 52                  SBC   HL,DE   
46EB   7D                     LD   A,L   
46EC   B4                     OR   H   
46ED   CA 5F 47               JP   Z,expectM_3162S154   
46F0   CD 14 10               CALL   printStr   
46F3   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
4715   CD 14 10               CALL   printStr   
4718   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4727   21 02 00               LD   hl,2   
472A   E5                     PUSH   hl   
472B   E5                     PUSH   hl   
472C   CD 11 11               CALL   run   
472F   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4739   CD 14 10               CALL   printStr   
473C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4749   E1                     POP   hl   
474A   E5                     PUSH   hl   
474B   E5                     PUSH   hl   
474C   CD 11 11               CALL   run   
474F   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
475E   76                     HALT      
475F                EXPECTM_3162S154:      
475F   E1                     POP   HL   
4760                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
4760   31 00 58               LD   SP,STACK   
4763   CD 48 10               CALL   coldInit   
4766   CD A4 56               CALL   execStr   
4769   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
4790   E1                     POP   HL   
4791   E5                     PUSH   HL   
4792   11 0A 00               LD   DE,10   
4795   B7                     OR   A   
4796   ED 52                  SBC   HL,DE   
4798   7D                     LD   A,L   
4799   B4                     OR   H   
479A   CA 17 48               JP   Z,expectM_3163S155   
479D   CD 14 10               CALL   printStr   
47A0   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
47CD   CD 14 10               CALL   printStr   
47D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DF   21 0A 00               LD   hl,10   
47E2   E5                     PUSH   hl   
47E3   E5                     PUSH   hl   
47E4   CD 11 11               CALL   run   
47E7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
47F1   CD 14 10               CALL   printStr   
47F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4801   E1                     POP   hl   
4802   E5                     PUSH   hl   
4803   E5                     PUSH   hl   
4804   CD 11 11               CALL   run   
4807   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4816   76                     HALT      
4817                EXPECTM_3163S155:      
4817   E1                     POP   HL   
4818                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
4818   31 00 58               LD   SP,STACK   
481B   CD 48 10               CALL   coldInit   
481E   CD A4 56               CALL   execStr   
4821   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4845   E1                     POP   HL   
4846   E5                     PUSH   HL   
4847   11 0A 00               LD   DE,10   
484A   B7                     OR   A   
484B   ED 52                  SBC   HL,DE   
484D   7D                     LD   A,L   
484E   B4                     OR   H   
484F   CA C9 48               JP   Z,expectM_3164S156   
4852   CD 14 10               CALL   printStr   
4855   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
487F   CD 14 10               CALL   printStr   
4882   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4891   21 0A 00               LD   hl,10   
4894   E5                     PUSH   hl   
4895   E5                     PUSH   hl   
4896   CD 11 11               CALL   run   
4899   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
48A3   CD 14 10               CALL   printStr   
48A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48B3   E1                     POP   hl   
48B4   E5                     PUSH   hl   
48B5   E5                     PUSH   hl   
48B6   CD 11 11               CALL   run   
48B9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
48C8   76                     HALT      
48C9                EXPECTM_3164S156:      
48C9   E1                     POP   HL   
48CA                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
48CA   31 00 58               LD   SP,STACK   
48CD   CD 48 10               CALL   coldInit   
48D0   CD A4 56               CALL   execStr   
48D3   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
48FF   E1                     POP   HL   
4900   E5                     PUSH   HL   
4901   11 0C 00               LD   DE,12   
4904   B7                     OR   A   
4905   ED 52                  SBC   HL,DE   
4907   7D                     LD   A,L   
4908   B4                     OR   H   
4909   CA 8B 49               JP   Z,expectM_3165S157   
490C   CD 14 10               CALL   printStr   
490F   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4941   CD 14 10               CALL   printStr   
4944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4953   21 0C 00               LD   hl,12   
4956   E5                     PUSH   hl   
4957   E5                     PUSH   hl   
4958   CD 11 11               CALL   run   
495B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4965   CD 14 10               CALL   printStr   
4968   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4975   E1                     POP   hl   
4976   E5                     PUSH   hl   
4977   E5                     PUSH   hl   
4978   CD 11 11               CALL   run   
497B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
498A   76                     HALT      
498B                EXPECTM_3165S157:      
498B   E1                     POP   HL   
498C                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
498C   31 00 58               LD   SP,STACK   
498F   CD 48 10               CALL   coldInit   
4992   CD A4 56               CALL   execStr   
4995   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
49C1   E1                     POP   HL   
49C2   E5                     PUSH   HL   
49C3   11 06 00               LD   DE,6   
49C6   B7                     OR   A   
49C7   ED 52                  SBC   HL,DE   
49C9   7D                     LD   A,L   
49CA   B4                     OR   H   
49CB   CA 4D 4A               JP   Z,expectM_3166S158   
49CE   CD 14 10               CALL   printStr   
49D1   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4A03   CD 14 10               CALL   printStr   
4A06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A15   21 06 00               LD   hl,6   
4A18   E5                     PUSH   hl   
4A19   E5                     PUSH   hl   
4A1A   CD 11 11               CALL   run   
4A1D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4A27   CD 14 10               CALL   printStr   
4A2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A37   E1                     POP   hl   
4A38   E5                     PUSH   hl   
4A39   E5                     PUSH   hl   
4A3A   CD 11 11               CALL   run   
4A3D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4A4C   76                     HALT      
4A4D                EXPECTM_3166S158:      
4A4D   E1                     POP   HL   
4A4E                          ;*Macro unroll:  test "/t \\f{1 %f/whi 2 +}^",3
4A4E   31 00 58               LD   SP,STACK   
4A51   CD 48 10               CALL   coldInit   
4A54   CD A4 56               CALL   execStr   
4A57   2F 74 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/whi 2 +}^",0   
4A6C   E1                     POP   HL   
4A6D   E5                     PUSH   HL   
4A6E   11 03 00               LD   DE,3   
4A71   B7                     OR   A   
4A72   ED 52                  SBC   HL,DE   
4A74   7D                     LD   A,L   
4A75   B4                     OR   H   
4A76   CA E1 4A               JP   Z,expectM_3167S159   
4A79   CD 14 10               CALL   printStr   
4A7C   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/whi 2 +}^"   
4A97   CD 14 10               CALL   printStr   
4A9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA9   21 03 00               LD   hl,3   
4AAC   E5                     PUSH   hl   
4AAD   E5                     PUSH   hl   
4AAE   CD 11 11               CALL   run   
4AB1   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4ABB   CD 14 10               CALL   printStr   
4ABE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ACB   E1                     POP   hl   
4ACC   E5                     PUSH   hl   
4ACD   E5                     PUSH   hl   
4ACE   CD 11 11               CALL   run   
4AD1   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4AE0   76                     HALT      
4AE1                EXPECTM_3167S159:      
4AE1   E1                     POP   HL   
4AE2                          ;*Macro unroll:  test "/f \\f{1 %f/whi 2 +}^",1
4AE2   31 00 58               LD   SP,STACK   
4AE5   CD 48 10               CALL   coldInit   
4AE8   CD A4 56               CALL   execStr   
4AEB   2F 66 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/whi 2 +}^",0   
4B00   E1                     POP   HL   
4B01   E5                     PUSH   HL   
4B02   11 01 00               LD   DE,1   
4B05   B7                     OR   A   
4B06   ED 52                  SBC   HL,DE   
4B08   7D                     LD   A,L   
4B09   B4                     OR   H   
4B0A   CA 75 4B               JP   Z,expectM_3168S160   
4B0D   CD 14 10               CALL   printStr   
4B10   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/whi 2 +}^"   
4B2B   CD 14 10               CALL   printStr   
4B2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B3D   21 01 00               LD   hl,1   
4B40   E5                     PUSH   hl   
4B41   E5                     PUSH   hl   
4B42   CD 11 11               CALL   run   
4B45   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4B4F   CD 14 10               CALL   printStr   
4B52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B5F   E1                     POP   hl   
4B60   E5                     PUSH   hl   
4B61   E5                     PUSH   hl   
4B62   CD 11 11               CALL   run   
4B65   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4B74   76                     HALT      
4B75                EXPECTM_3168S160:      
4B75   E1                     POP   HL   
4B76                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4B76   31 00 58               LD   SP,STACK   
4B79   CD 48 10               CALL   coldInit   
4B7C   CD A4 56               CALL   execStr   
4B7F   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4B8B   E1                     POP   HL   
4B8C   E5                     PUSH   HL   
4B8D   11 00 00               LD   DE,NUL   
4B90   B7                     OR   A   
4B91   ED 52                  SBC   HL,DE   
4B93   7D                     LD   A,L   
4B94   B4                     OR   H   
4B95   CA F7 4B               JP   Z,expectM_3169S161   
4B98   CD 14 10               CALL   printStr   
4B9B   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4BAD   CD 14 10               CALL   printStr   
4BB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BBF   21 00 00               LD   hl,NUL   
4BC2   E5                     PUSH   hl   
4BC3   E5                     PUSH   hl   
4BC4   CD 11 11               CALL   run   
4BC7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4BD1   CD 14 10               CALL   printStr   
4BD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BE1   E1                     POP   hl   
4BE2   E5                     PUSH   hl   
4BE3   E5                     PUSH   hl   
4BE4   CD 11 11               CALL   run   
4BE7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4BF6   76                     HALT      
4BF7                EXPECTM_3169S161:      
4BF7   E1                     POP   HL   
4BF8                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4BF8   31 00 58               LD   SP,STACK   
4BFB   CD 48 10               CALL   coldInit   
4BFE   CD A4 56               CALL   execStr   
4C01   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4C0D   E1                     POP   HL   
4C0E   E5                     PUSH   HL   
4C0F   11 00 00               LD   DE,NUL   
4C12   B7                     OR   A   
4C13   ED 52                  SBC   HL,DE   
4C15   7D                     LD   A,L   
4C16   B4                     OR   H   
4C17   CA 79 4C               JP   Z,expectM_3170S162   
4C1A   CD 14 10               CALL   printStr   
4C1D   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4C2F   CD 14 10               CALL   printStr   
4C32   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C41   21 00 00               LD   hl,NUL   
4C44   E5                     PUSH   hl   
4C45   E5                     PUSH   hl   
4C46   CD 11 11               CALL   run   
4C49   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4C53   CD 14 10               CALL   printStr   
4C56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C63   E1                     POP   hl   
4C64   E5                     PUSH   hl   
4C65   E5                     PUSH   hl   
4C66   CD 11 11               CALL   run   
4C69   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4C78   76                     HALT      
4C79                EXPECTM_3170S162:      
4C79   E1                     POP   HL   
4C7A                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4C7A   31 00 58               LD   SP,STACK   
4C7D   CD 48 10               CALL   coldInit   
4C80   CD A4 56               CALL   execStr   
4C83   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4C8F   E1                     POP   HL   
4C90   E5                     PUSH   HL   
4C91   11 00 00               LD   DE,NUL   
4C94   B7                     OR   A   
4C95   ED 52                  SBC   HL,DE   
4C97   7D                     LD   A,L   
4C98   B4                     OR   H   
4C99   CA FB 4C               JP   Z,expectM_3171S163   
4C9C   CD 14 10               CALL   printStr   
4C9F   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4CB1   CD 14 10               CALL   printStr   
4CB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CC3   21 00 00               LD   hl,NUL   
4CC6   E5                     PUSH   hl   
4CC7   E5                     PUSH   hl   
4CC8   CD 11 11               CALL   run   
4CCB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4CD5   CD 14 10               CALL   printStr   
4CD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CE5   E1                     POP   hl   
4CE6   E5                     PUSH   hl   
4CE7   E5                     PUSH   hl   
4CE8   CD 11 11               CALL   run   
4CEB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4CFA   76                     HALT      
4CFB                EXPECTM_3171S163:      
4CFB   E1                     POP   HL   
4CFC                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4CFC   31 00 58               LD   SP,STACK   
4CFF   CD 48 10               CALL   coldInit   
4D02   CD A4 56               CALL   execStr   
4D05   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4D11   E1                     POP   HL   
4D12   E5                     PUSH   HL   
4D13   11 00 00               LD   DE,NUL   
4D16   B7                     OR   A   
4D17   ED 52                  SBC   HL,DE   
4D19   7D                     LD   A,L   
4D1A   B4                     OR   H   
4D1B   CA 7D 4D               JP   Z,expectM_3172S164   
4D1E   CD 14 10               CALL   printStr   
4D21   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4D33   CD 14 10               CALL   printStr   
4D36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D45   21 00 00               LD   hl,NUL   
4D48   E5                     PUSH   hl   
4D49   E5                     PUSH   hl   
4D4A   CD 11 11               CALL   run   
4D4D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4D57   CD 14 10               CALL   printStr   
4D5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D67   E1                     POP   hl   
4D68   E5                     PUSH   hl   
4D69   E5                     PUSH   hl   
4D6A   CD 11 11               CALL   run   
4D6D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4D7C   76                     HALT      
4D7D                EXPECTM_3172S164:      
4D7D   E1                     POP   HL   
4D7E                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
4D7E   31 00 58               LD   SP,STACK   
4D81   CD 48 10               CALL   coldInit   
4D84   CD A4 56               CALL   execStr   
4D87   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
4D8F   E1                     POP   HL   
4D90   E5                     PUSH   HL   
4D91   11 66 5A               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4D94   B7                     OR   A   
4D95   ED 52                  SBC   HL,DE   
4D97   7D                     LD   A,L   
4D98   B4                     OR   H   
4D99   CA F7 4D               JP   Z,expectM_3173S165   
4D9C   CD 14 10               CALL   printStr   
4D9F   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
4DAD   CD 14 10               CALL   printStr   
4DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DBF   21 66 5A               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4DC2   E5                     PUSH   hl   
4DC3   E5                     PUSH   hl   
4DC4   CD 11 11               CALL   run   
4DC7   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4DD1   CD 14 10               CALL   printStr   
4DD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DE1   E1                     POP   hl   
4DE2   E5                     PUSH   hl   
4DE3   E5                     PUSH   hl   
4DE4   CD 11 11               CALL   run   
4DE7   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4DF6   76                     HALT      
4DF7                EXPECTM_3173S165:      
4DF7   E1                     POP   HL   
4DF8                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
4DF8   31 00 58               LD   SP,STACK   
4DFB   CD 48 10               CALL   coldInit   
4DFE   CD A4 56               CALL   execStr   
4E01   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
4E09   E1                     POP   HL   
4E0A   E5                     PUSH   HL   
4E0B   11 34 5A               LD   DE,VARS + ("Z"-"A"+1)*2   
4E0E   B7                     OR   A   
4E0F   ED 52                  SBC   HL,DE   
4E11   7D                     LD   A,L   
4E12   B4                     OR   H   
4E13   CA 71 4E               JP   Z,expectM_3174S166   
4E16   CD 14 10               CALL   printStr   
4E19   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
4E27   CD 14 10               CALL   printStr   
4E2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E39   21 34 5A               LD   hl,VARS + ("Z"-"A"+1)*2   
4E3C   E5                     PUSH   hl   
4E3D   E5                     PUSH   hl   
4E3E   CD 11 11               CALL   run   
4E41   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4E4B   CD 14 10               CALL   printStr   
4E4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E5B   E1                     POP   hl   
4E5C   E5                     PUSH   hl   
4E5D   E5                     PUSH   hl   
4E5E   CD 11 11               CALL   run   
4E61   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4E70   76                     HALT      
4E71                EXPECTM_3174S166:      
4E71   E1                     POP   HL   
4E72                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
4E72   31 00 58               LD   SP,STACK   
4E75   CD 48 10               CALL   coldInit   
4E78   CD A4 56               CALL   execStr   
4E7B   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
4E83   E1                     POP   HL   
4E84   E5                     PUSH   HL   
4E85   11 32 5A               LD   DE,VARS + ("Z"-"A")*2   
4E88   B7                     OR   A   
4E89   ED 52                  SBC   HL,DE   
4E8B   7D                     LD   A,L   
4E8C   B4                     OR   H   
4E8D   CA EB 4E               JP   Z,expectM_3175S167   
4E90   CD 14 10               CALL   printStr   
4E93   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
4EA1   CD 14 10               CALL   printStr   
4EA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EB3   21 32 5A               LD   hl,VARS + ("Z"-"A")*2   
4EB6   E5                     PUSH   hl   
4EB7   E5                     PUSH   hl   
4EB8   CD 11 11               CALL   run   
4EBB   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4EC5   CD 14 10               CALL   printStr   
4EC8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ED5   E1                     POP   hl   
4ED6   E5                     PUSH   hl   
4ED7   E5                     PUSH   hl   
4ED8   CD 11 11               CALL   run   
4EDB   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4EEA   76                     HALT      
4EEB                EXPECTM_3175S167:      
4EEB   E1                     POP   HL   
4EEC                          ;*Macro unroll:  test "_A /adr", VARS
4EEC   31 00 58               LD   SP,STACK   
4EEF   CD 48 10               CALL   coldInit   
4EF2   CD A4 56               CALL   execStr   
4EF5   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
4EFD   E1                     POP   HL   
4EFE   E5                     PUSH   HL   
4EFF   11 00 5A               LD   DE,VARS   
4F02   B7                     OR   A   
4F03   ED 52                  SBC   HL,DE   
4F05   7D                     LD   A,L   
4F06   B4                     OR   H   
4F07   CA 65 4F               JP   Z,expectM_3176S168   
4F0A   CD 14 10               CALL   printStr   
4F0D   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
4F1B   CD 14 10               CALL   printStr   
4F1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F2D   21 00 5A               LD   hl,VARS   
4F30   E5                     PUSH   hl   
4F31   E5                     PUSH   hl   
4F32   CD 11 11               CALL   run   
4F35   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4F3F   CD 14 10               CALL   printStr   
4F42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F4F   E1                     POP   hl   
4F50   E5                     PUSH   hl   
4F51   E5                     PUSH   hl   
4F52   CD 11 11               CALL   run   
4F55   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4F64   76                     HALT      
4F65                EXPECTM_3176S168:      
4F65   E1                     POP   HL   
4F66                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4F66   31 00 58               LD   SP,STACK   
4F69   CD 48 10               CALL   coldInit   
4F6C   CD A4 56               CALL   execStr   
4F6F   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4F7C   E1                     POP   HL   
4F7D   E5                     PUSH   HL   
4F7E   11 01 00               LD   DE,1   
4F81   B7                     OR   A   
4F82   ED 52                  SBC   HL,DE   
4F84   7D                     LD   A,L   
4F85   B4                     OR   H   
4F86   CA E9 4F               JP   Z,expectM_3177S169   
4F89   CD 14 10               CALL   printStr   
4F8C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4F9F   CD 14 10               CALL   printStr   
4FA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FB1   21 01 00               LD   hl,1   
4FB4   E5                     PUSH   hl   
4FB5   E5                     PUSH   hl   
4FB6   CD 11 11               CALL   run   
4FB9   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
4FC3   CD 14 10               CALL   printStr   
4FC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FD3   E1                     POP   hl   
4FD4   E5                     PUSH   hl   
4FD5   E5                     PUSH   hl   
4FD6   CD 11 11               CALL   run   
4FD9   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
4FE8   76                     HALT      
4FE9                EXPECTM_3177S169:      
4FE9   E1                     POP   HL   
4FEA                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4FEA   31 00 58               LD   SP,STACK   
4FED   CD 48 10               CALL   coldInit   
4FF0   CD A4 56               CALL   execStr   
4FF3   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
5007   E1                     POP   HL   
5008   E5                     PUSH   HL   
5009   11 03 00               LD   DE,3   
500C   B7                     OR   A   
500D   ED 52                  SBC   HL,DE   
500F   7D                     LD   A,L   
5010   B4                     OR   H   
5011   CA 7B 50               JP   Z,expectM_3178S170   
5014   CD 14 10               CALL   printStr   
5017   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
5031   CD 14 10               CALL   printStr   
5034   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5043   21 03 00               LD   hl,3   
5046   E5                     PUSH   hl   
5047   E5                     PUSH   hl   
5048   CD 11 11               CALL   run   
504B   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5055   CD 14 10               CALL   printStr   
5058   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5065   E1                     POP   hl   
5066   E5                     PUSH   hl   
5067   E5                     PUSH   hl   
5068   CD 11 11               CALL   run   
506B   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
507A   76                     HALT      
507B                EXPECTM_3178S170:      
507B   E1                     POP   HL   
507C                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
507C   31 00 58               LD   SP,STACK   
507F   CD 48 10               CALL   coldInit   
5082   CD A4 56               CALL   execStr   
5085   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
509C   E1                     POP   HL   
509D   E5                     PUSH   HL   
509E   11 02 00               LD   DE,2   
50A1   B7                     OR   A   
50A2   ED 52                  SBC   HL,DE   
50A4   7D                     LD   A,L   
50A5   B4                     OR   H   
50A6   CA 13 51               JP   Z,expectM_3179S171   
50A9   CD 14 10               CALL   printStr   
50AC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
50C9   CD 14 10               CALL   printStr   
50CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50DB   21 02 00               LD   hl,2   
50DE   E5                     PUSH   hl   
50DF   E5                     PUSH   hl   
50E0   CD 11 11               CALL   run   
50E3   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
50ED   CD 14 10               CALL   printStr   
50F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50FD   E1                     POP   hl   
50FE   E5                     PUSH   hl   
50FF   E5                     PUSH   hl   
5100   CD 11 11               CALL   run   
5103   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5112   76                     HALT      
5113                EXPECTM_3179S171:      
5113   E1                     POP   HL   
5114                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
5114   31 00 58               LD   SP,STACK   
5117   CD 48 10               CALL   coldInit   
511A   CD A4 56               CALL   execStr   
511D   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
5140   E1                     POP   HL   
5141   E5                     PUSH   HL   
5142   11 01 00               LD   DE,1   
5145   B7                     OR   A   
5146   ED 52                  SBC   HL,DE   
5148   7D                     LD   A,L   
5149   B4                     OR   H   
514A   CA C3 51               JP   Z,expectM_3180S172   
514D   CD 14 10               CALL   printStr   
5150   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5179   CD 14 10               CALL   printStr   
517C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
518B   21 01 00               LD   hl,1   
518E   E5                     PUSH   hl   
518F   E5                     PUSH   hl   
5190   CD 11 11               CALL   run   
5193   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
519D   CD 14 10               CALL   printStr   
51A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51AD   E1                     POP   hl   
51AE   E5                     PUSH   hl   
51AF   E5                     PUSH   hl   
51B0   CD 11 11               CALL   run   
51B3   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
51C2   76                     HALT      
51C3                EXPECTM_3180S172:      
51C3   E1                     POP   HL   
51C4                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
51C4   31 00 58               LD   SP,STACK   
51C7   CD 48 10               CALL   coldInit   
51CA   CD A4 56               CALL   execStr   
51CD   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
51F0   E1                     POP   HL   
51F1   E5                     PUSH   HL   
51F2   11 01 00               LD   DE,1   
51F5   B7                     OR   A   
51F6   ED 52                  SBC   HL,DE   
51F8   7D                     LD   A,L   
51F9   B4                     OR   H   
51FA   CA 73 52               JP   Z,expectM_3181S173   
51FD   CD 14 10               CALL   printStr   
5200   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
5229   CD 14 10               CALL   printStr   
522C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
523B   21 01 00               LD   hl,1   
523E   E5                     PUSH   hl   
523F   E5                     PUSH   hl   
5240   CD 11 11               CALL   run   
5243   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
524D   CD 14 10               CALL   printStr   
5250   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
525D   E1                     POP   hl   
525E   E5                     PUSH   hl   
525F   E5                     PUSH   hl   
5260   CD 11 11               CALL   run   
5263   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5272   76                     HALT      
5273                EXPECTM_3181S173:      
5273   E1                     POP   HL   
5274                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5274   31 00 58               LD   SP,STACK   
5277   CD 48 10               CALL   coldInit   
527A   CD A4 56               CALL   execStr   
527D   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
52AD   E1                     POP   HL   
52AE   E5                     PUSH   HL   
52AF   11 02 00               LD   DE,2   
52B2   B7                     OR   A   
52B3   ED 52                  SBC   HL,DE   
52B5   7D                     LD   A,L   
52B6   B4                     OR   H   
52B7   CA 3D 53               JP   Z,expectM_3182S174   
52BA   CD 14 10               CALL   printStr   
52BD   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
52F3   CD 14 10               CALL   printStr   
52F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5305   21 02 00               LD   hl,2   
5308   E5                     PUSH   hl   
5309   E5                     PUSH   hl   
530A   CD 11 11               CALL   run   
530D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5317   CD 14 10               CALL   printStr   
531A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5327   E1                     POP   hl   
5328   E5                     PUSH   hl   
5329   E5                     PUSH   hl   
532A   CD 11 11               CALL   run   
532D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
533C   76                     HALT      
533D                EXPECTM_3182S174:      
533D   E1                     POP   HL   
533E                          ;*Macro unroll:  test "'hello'/sl",5
533E   31 00 58               LD   SP,STACK   
5341   CD 48 10               CALL   coldInit   
5344   CD A4 56               CALL   execStr   
5347   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
5352   E1                     POP   HL   
5353   E5                     PUSH   HL   
5354   11 05 00               LD   DE,5   
5357   B7                     OR   A   
5358   ED 52                  SBC   HL,DE   
535A   7D                     LD   A,L   
535B   B4                     OR   H   
535C   CA BD 53               JP   Z,expectM_3183S175   
535F   CD 14 10               CALL   printStr   
5362   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
5373   CD 14 10               CALL   printStr   
5376   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5385   21 05 00               LD   hl,5   
5388   E5                     PUSH   hl   
5389   E5                     PUSH   hl   
538A   CD 11 11               CALL   run   
538D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5397   CD 14 10               CALL   printStr   
539A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53A7   E1                     POP   hl   
53A8   E5                     PUSH   hl   
53A9   E5                     PUSH   hl   
53AA   CD 11 11               CALL   run   
53AD   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
53BC   76                     HALT      
53BD                EXPECTM_3183S175:      
53BD   E1                     POP   HL   
53BE                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
53BE   31 00 58               LD   SP,STACK   
53C1   CD 48 10               CALL   coldInit   
53C4   CD A4 56               CALL   execStr   
53C7   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
53DA   E1                     POP   HL   
53DB   E5                     PUSH   HL   
53DC   11 00 00               LD   DE,false   
53DF   B7                     OR   A   
53E0   ED 52                  SBC   HL,DE   
53E2   7D                     LD   A,L   
53E3   B4                     OR   H   
53E4   CA 4D 54               JP   Z,expectM_3184S176   
53E7   CD 14 10               CALL   printStr   
53EA   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
5403   CD 14 10               CALL   printStr   
5406   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5415   21 00 00               LD   hl,false   
5418   E5                     PUSH   hl   
5419   E5                     PUSH   hl   
541A   CD 11 11               CALL   run   
541D   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5427   CD 14 10               CALL   printStr   
542A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5437   E1                     POP   hl   
5438   E5                     PUSH   hl   
5439   E5                     PUSH   hl   
543A   CD 11 11               CALL   run   
543D   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
544C   76                     HALT      
544D                EXPECTM_3184S176:      
544D   E1                     POP   HL   
544E                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
544E   31 00 58               LD   SP,STACK   
5451   CD 48 10               CALL   coldInit   
5454   CD A4 56               CALL   execStr   
5457   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
546B   E1                     POP   HL   
546C   E5                     PUSH   HL   
546D   11 FF FF               LD   DE,true   
5470   B7                     OR   A   
5471   ED 52                  SBC   HL,DE   
5473   7D                     LD   A,L   
5474   B4                     OR   H   
5475   CA DF 54               JP   Z,expectM_3185S177   
5478   CD 14 10               CALL   printStr   
547B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5495   CD 14 10               CALL   printStr   
5498   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54A7   21 FF FF               LD   hl,true   
54AA   E5                     PUSH   hl   
54AB   E5                     PUSH   hl   
54AC   CD 11 11               CALL   run   
54AF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
54B9   CD 14 10               CALL   printStr   
54BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54C9   E1                     POP   hl   
54CA   E5                     PUSH   hl   
54CB   E5                     PUSH   hl   
54CC   CD 11 11               CALL   run   
54CF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
54DE   76                     HALT      
54DF                EXPECTM_3185S177:      
54DF   E1                     POP   HL   
54E0                          ;*Macro unroll:  test "[1 2 3]** + +", 6
54E0   31 00 58               LD   SP,STACK   
54E3   CD 48 10               CALL   coldInit   
54E6   CD A4 56               CALL   execStr   
54E9   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
54F7   E1                     POP   HL   
54F8   E5                     PUSH   HL   
54F9   11 06 00               LD   DE,6   
54FC   B7                     OR   A   
54FD   ED 52                  SBC   HL,DE   
54FF   7D                     LD   A,L   
5500   B4                     OR   H   
5501   CA 65 55               JP   Z,expectM_3186S178   
5504   CD 14 10               CALL   printStr   
5507   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
551B   CD 14 10               CALL   printStr   
551E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
552D   21 06 00               LD   hl,6   
5530   E5                     PUSH   hl   
5531   E5                     PUSH   hl   
5532   CD 11 11               CALL   run   
5535   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
553F   CD 14 10               CALL   printStr   
5542   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
554F   E1                     POP   hl   
5550   E5                     PUSH   hl   
5551   E5                     PUSH   hl   
5552   CD 11 11               CALL   run   
5555   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5564   76                     HALT      
5565                EXPECTM_3186S178:      
5565   E1                     POP   HL   
5566                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
5566   31 00 58               LD   SP,STACK   
5569   CD 48 10               CALL   coldInit   
556C   CD A4 56               CALL   execStr   
556F   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
5587   E1                     POP   HL   
5588   E5                     PUSH   HL   
5589   11 63 00               LD   DE,$63   
558C   B7                     OR   A   
558D   ED 52                  SBC   HL,DE   
558F   7D                     LD   A,L   
5590   B4                     OR   H   
5591   CA FF 55               JP   Z,expectM_3187S179   
5594   CD 14 10               CALL   printStr   
5597   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
55B5   CD 14 10               CALL   printStr   
55B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55C7   21 63 00               LD   hl,$63   
55CA   E5                     PUSH   hl   
55CB   E5                     PUSH   hl   
55CC   CD 11 11               CALL   run   
55CF   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
55D9   CD 14 10               CALL   printStr   
55DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55E9   E1                     POP   hl   
55EA   E5                     PUSH   hl   
55EB   E5                     PUSH   hl   
55EC   CD 11 11               CALL   run   
55EF   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
55FE   76                     HALT      
55FF                EXPECTM_3187S179:      
55FF   E1                     POP   HL   
5600                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
5600   31 00 58               LD   SP,STACK   
5603   CD 48 10               CALL   coldInit   
5606   CD A4 56               CALL   execStr   
5609   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
5621   E1                     POP   HL   
5622   E5                     PUSH   HL   
5623   11 02 00               LD   DE,2   
5626   B7                     OR   A   
5627   ED 52                  SBC   HL,DE   
5629   7D                     LD   A,L   
562A   B4                     OR   H   
562B   CA 99 56               JP   Z,expectM_3188S180   
562E   CD 14 10               CALL   printStr   
5631   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
564F   CD 14 10               CALL   printStr   
5652   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5661   21 02 00               LD   hl,2   
5664   E5                     PUSH   hl   
5665   E5                     PUSH   hl   
5666   CD 11 11               CALL   run   
5669   2E 20 2F 68 78 2E 2F 64 63 00 .CSTR   ". /hx./dc"   
5673   CD 14 10               CALL   printStr   
5676   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5683   E1                     POP   hl   
5684   E5                     PUSH   hl   
5685   E5                     PUSH   hl   
5686   CD 11 11               CALL   run   
5689   2E 20 2F 68 78 2E 2F 64 63 20 60 0D 0A 60 00 .CSTR   ". /hx./dc `\r\n`"   
5698   76                     HALT      
5699                EXPECTM_3188S180:      
5699   E1                     POP   HL   
569A                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
569A                             ; 
569A   CD 14 10               CALL   printStr   
569D   44 6F 6E 65 21 00      .CSTR   "Done!"   
56A3   76                     HALT      
56A4                             ; executes a null teminated string (null executes exit_)
56A4                             ; the string should be immedaitely following the call
56A4                EXECSTR:      ; create a root stack frame
56A4   C1                     POP   bc   ; bc = code*
56A5   0B                     DEC   bc   ; dec to prepare for next routine
56A6   11 00 00               LD   de,0   
56A9   D5                     PUSH   de   ; push fake IP
56AA   D5                     PUSH   de   ; push null arg_list*
56AB   D5                     PUSH   de   ; push null first_arg*
56AC   D5                     PUSH   de   ; push fake BP
56AD   DD E9                  JP   (ix)   
56AF                STKSIZE:   EQU   $100   ; Stack size
56AF                TIBSIZE:   EQU   $100   ; 256 bytes
56AF                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
56AF                          ALIGN   $100   
5700                          DS   STKSIZE   
5800                STACK:       
5800                          ALIGN   $100   
5800                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5900                          ALIGN   $100   
5900                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5A00                          ALIGN   $100   
5A00                VARS:        
5A00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5AD0                RESTARTS:      
5AD0                RST08:    DS   2   
5AD2                RST10:    DS   2   
5AD4                RST18:    DS   2   
5AD6                RST20:    DS   2   
5AD8                RST28:    DS   2   
5ADA                RST30:    DS   2   ; 
5ADC                BAUD:     DS   2   ; 
5ADE                INTVEC:   DS   2   ; 
5AE0                NMIVEC:   DS   2   ; 
5AE2                GETCVEC:   DS   2   ; 
5AE4                PUTCVEC:   DS   2   ; 
5AE6                SYSVARS:      
5AE6                             ; initialised sys variables (preserved)
5AE6                VTIBPTR:   DS   2   
5AE8                VBUFPTR:   DS   2   
5AEA                VHEAPPTR:   DS   2   
5AEC                VRECURPTR:   DS   2   
5AEE                VDATAWIDTH:   DS   1   
5AEF                VNUMBASE:   DS   1   
5AF0                VHEXPREFIX:   DS   1   
5AF1                VECHO:    DS   1   
5AF2                VSTRMODE:   DS   1   
5AF3                          DS   1   
5AF4                          DS   1   
5AF5                          DS   1   
5AF6                          DS   1   
5AF7                          DS   1   
5AF8                             ; uninitialised sys variables (preserved)
5AF8                VPOINTER:   DS   2   ; 
5AFA                VREMAIN:   DS   2   ; 
5AFC                VSAVEDIP:   DS   2   ; 
5AFE                VSAVEDSP:   DS   2   ; 
5B00                VSAVEDNEXT:   DS   2   ; 
5B02                VSAVEDBP:   DS   2   ; 
5B04                             ; uninitialised sys variables (unpreserved)
5B04                VTEMP1:   DS   2   ; 
5B06                VTEMP2:   DS   2   ; 
5B08                VTEMP3:   DS   2   ; 
5B0A                          DS   2   ; 
5B0C                TBPTR:    DS   2   ; reserved for tests
5B0E                TITLEBUF:   DS   20   
5B22                HEAP:        
5B22                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5B22                             ; db "{"
5B22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5B22                             ; db    "\\kt{"
5B22                             ; db      "0%t!=/qt"                  ; break if type != 0
5B22                             ; db      "\\dt:a{"                   ; return talkback to receive data
5B22                             ; db        "%L1;!/qt"                ; if not active don't send
5B22                             ; db        "%L0; %a="                ; store current index in A
5B22                             ; db        "%s %L0; +="              ; inc value of index by step
5B22                             ; db        "1%t!=/qt"                ; break if type != 0
5B22                             ; db        "%a %e <"                 ; ifte: in range?
5B22                             ; db          "{%a 1}{/f %L1;= 0 2}"  ; ifte: /t index, /f active = false, quit
5B22                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
5B22                             ; db      "} 0 %k^"                   ; init sink
5B22                             ; db    "}"
5B22                             ; db "}"
5B22                             ; db 0
5B22                             ; FUNC map, 0, "sf"                   ; map
5B22                             ; db "{"
5B22                             ; db    "\\kt{"
5B22                             ; db      "0%t!=/qt"                  ; break if type != 0
5B22                             ; db      "\\dt{"                     ; call source with tb
5B22                             ; db        "1%t=="                   ; ifte: type == 1 ?
5B22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5B22                             ; db        "? %t %k^"               ; ifte: send to sink
5B22                             ; db      "} 0 %s^"
5B22                             ; db    "}"
5B22                             ; db "}"
5B22                             ; db 0
5B22                             ; ; /ft filter
5B22                             ; ; src pred -- src1
5B22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5B22                             ; db "{"
5B22                             ; db    "[0]%T="
5B22                             ; db    "\\kt{"                       ; return talkback to receive data
5B22                             ; db      "\\dt{"                     ; call source with tb
5B22                             ; db        "["
5B22                             ; db          "{%d %T0;= /t}"         ; case 0: store talkback in T[0], return true
5B22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5B22                             ; db          "{/t}"                  ; case 2: return true
5B22                             ; db        "]%t;^"                   ; select on %t
5B22                             ; db        "{%d %t %k^}{0 1 %T0;^}"  ; ifte: true send d to sink, false send 1 to talkback
5B22                             ; db        "?"
5B22                             ; db      "} 0 %s^"
5B22                             ; db    "}"
5B22                             ; db "}"
5B22                             ; db 0
5B22                             ; FUNC forEach, 1, "spT"
5B22                             ; db "{"
5B22                             ; db    "[0]%T="
5B22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5B22                             ; db      "2%t==/qt"                    ; if type == 2 skip
5B22                             ; db      "0%t=="                   ; ifte: type = 0 ?
5B22                             ; db      "{%d %T0;=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5B22                             ; db      "?"                      ; ifte:
5B22                             ; db      "0 1 %T0;^"               ; 0 or 1: get next src data item
5B22                             ; db    "} 0 %s^"
5B22                             ; db "}"
5B22                             ; db 0
5B22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5B22                             ; db "{"                                  ; reducer: \\da00bbLi4u
5B22                             ; db    "[%i]%A="
5B22                             ; db    "\\kt{"                         ; return talkback to receive data
5B22                             ; db      "\\dt{"                         ; call source with tb
5B22                             ; db        "1%t=="                       ; ifte: type == 1 ?
5B22                             ; db        "{ %d %A0; %r^ %A0;= %A0;}{%d}"      ; ifte: reduce -> acc, acc or data
5B22                             ; db        "? %t %k^"                    ; ifte: send to sink
5B22                             ; db      "} 0 %s^"
5B22                             ; db    "}"
5B22                             ; db "}"
5B22                             ; db 0
5B22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 2546 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2568 IN MAIN.asm
                    > USED AT LINE 2652 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2554 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046F DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048F DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0491 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A1 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A2 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A8 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B4 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BF DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CE DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D7 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0550 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_F_:         055B DEFINED AT LINE 841 IN MAIN.asm
COMMAND_H_:         0582 DEFINED AT LINE 862 IN MAIN.asm
COMMAND_I_:         058D DEFINED AT LINE 870 IN MAIN.asm
COMMAND_M_:         0598 DEFINED AT LINE 877 IN MAIN.asm
COMAND_O_:          05A3 DEFINED AT LINE 884 IN MAIN.asm
COMMAND_P_:         05AA DEFINED AT LINE 889 IN MAIN.asm
COMMAND_Q_:         05B1 DEFINED AT LINE 895 IN MAIN.asm
COMMAND_R_:         05BC DEFINED AT LINE 902 IN MAIN.asm
COMMAND_S_:         05CF DEFINED AT LINE 913 IN MAIN.asm
COMAND_T_:          05D1 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_V_:         05D3 DEFINED AT LINE 919 IN MAIN.asm
COMMAND_W_:         05D5 DEFINED AT LINE 922 IN MAIN.asm
COMMAND_X_:         05D7 DEFINED AT LINE 925 IN MAIN.asm
COMMAND_DEFAULT_:   05D9 DEFINED AT LINE 928 IN MAIN.asm
COMMAND_S:          05DB DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
COMMAND_T:          05FE DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
COMMAND_V:          0605 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
COMMAND_W:          062C DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
COMMAND_X:          063B DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
COMMAND_DEFAULT:    0646 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
DIV:                064D DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
DIV2:               0657 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
ABSOLUTE:           0668 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          0673 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
ADDROF:             0676 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            067C DEFINED AT LINE 1044 IN MAIN.asm
ARRAYLENGTH:        067E DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0684 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
ARRAYSIZE:          0687 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
PERFORMM_1542S1063: 068E DEFINED AT LINE 45
                    > USED AT LINE 43
WHILE:              069B DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
WHILE1:             06A2 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
BYTEMODE:           06B5 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BYTEMODE1:          06B7 DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
COMMENT:            06BC DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
CONSTHEAPSTART:     06C5 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
CONSTTIBSTART:      06CB DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
CONSTBUFSTART:      06D1 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
DECBASE:            06D7 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
DECBASE1:           06D9 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
HEXBASE:            06DE DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
ERROR1:             06E3 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
INPUT:              06E9 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
OUTPUT:             06F4 DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
QUIT:               06FD DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
QUIT1:              0704 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
RECUR:              0707 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
REMAIN:             070D DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
SELECT:             0713 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
SELECT1:            071E DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
SELECT1A:           072F DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SELECT1B:           0730 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
SELECT2:            0733 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
STRINGBEGIN:        073A DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
STRINGEND:          0742 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGEND1:         0769 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
STRINGLENGTH:       0771 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      0777 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGLENGTH2:      0779 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGLENGTH3:      077D DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
STRINGSIZE:         0780 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
PERFORMM_1721S1261: 0787 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      078C DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGCOMPARE1:     078E DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
STRINGCOMPARE2:     0799 DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
STRINGCOMPARE3:     079E DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
STRINGCOMPARE4:     07A1 DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
VARBUFPTR:          07A4 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VARECHO:            07AA DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
VARHEAPPTR:         07B0 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
VARTIBPTR:          07B6 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
VARHEXPREFIX:       07BC DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
WORDMODE:           07C2 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
XOR:                07C7 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
XOR1:               07C8 DEFINED AT LINE 1318 IN MAIN.asm
RANGESRC:           07D2 DEFINED AT LINE 32
                    > USED AT LINE 909 IN MAIN.asm
RANGESRCM_1784S1334: 07E1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0864 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1803S1354: 0871 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E4 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
STRINGITERM_1822S1374: 08F1 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                096C DEFINED AT LINE 32
                    > USED AT LINE 880 IN MAIN.asm
MAPM_1842S1396:     0979 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09AD DEFINED AT LINE 32
                    > USED AT LINE 850 IN MAIN.asm
FILTERM_1856S1411:  09BB DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A0A DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
FOLDM_1875S1431:    0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A5B DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
FOREACHM_1889S1446: 0A69 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0AA6 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
FUNCSRCM_1903S1461: 0AB2 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0AE1 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1913S1472: 0AEF DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B2A DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B39 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
READSTRING:         0B42 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B47 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
READSTRING2:        0B5B DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
READNUMBER:         0B64 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PERFORMM_1957S1521: 0B6D DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B8B DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
PERFORMM_1974S1538: 0B92 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0B95 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
PERFORMM_1978S1542: 0B9C DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0B9D DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
TILDE:              0BA3 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BA3 DEFINED AT LINE 1552 IN MAIN.asm
DOLLAR:             0BAD DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BAD DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BB0 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
HEXNUM2:            0BB8 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
QUESTION:           0BCA DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BCA DEFINED AT LINE 1588 IN MAIN.asm
QUOTE:              0BD7 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BD7 DEFINED AT LINE 1602 IN MAIN.asm
STRING1:            0BE0 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
STRING2:            0BE3 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
STRING3:            0BE9 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
PERCENT:            0BF1 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0BF1 DEFINED AT LINE 1629 IN MAIN.asm
ARG0:               0C0D DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
ARG0A:              0C16 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
ARG1:               0C1B DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
ARG1A:              0C23 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
NUM:                0C26 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C2F DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
NUM1:               0C30 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
NUM2:               0C48 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
NUM3:               0C53 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
RBRACE:             0C56 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C56 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
BLOCKEND1:          0C88 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
BLOCKEND2:          0C94 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
BLOCKEND3:          0CA6 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
BLOCKEND4:          0CBA DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOBLOCK:            0CC3 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0CE8 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
GOBLOCK3:           0CF2 DEFINED AT LINE 1792 IN MAIN.asm
GOFUNC:             0CF6 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D0F DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
GOFUNC2:            0D15 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
GOFUNC3:            0D20 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GOFUNC4:            0D38 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
GOFUNC5:            0D3B DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
GOFUNC6:            0D3E DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
GOFUNC7:            0D41 DEFINED AT LINE 1855 IN MAIN.asm
GOFUNC8:            0D45 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
ASSIGN:             0D50 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D52 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D56 DEFINED AT LINE 1877 IN MAIN.asm
ASSIGN2:            0D5F DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
EQUALS:             0D61 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D68 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D6F DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D74 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0D79 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
TRUE1:              0D7C DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
NULL1:              0D82 DEFINED AT LINE 1922 IN MAIN.asm
FALSE1:             0D82 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
SPREAD:             0D88 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0D95 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
SPREAD2:            0DA0 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
SPREAD3:            0DA2 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
SHIFTLEFT:          0DAC DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DB6 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
SHIFTLEFT3:         0DBE DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
SHIFTLEFT4:         0DBF DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
SHIFTRIGHT:         0DC8 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0DD2 DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
SHIFTRIGHT3:        0DDA DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
SHIFTRIGHT4:        0DDE DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
DIVIDE:             0DE7 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
DIVIDE1:            0DEC DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
DIVIDE2:            0DF9 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
DIVIDE3:            0DFA DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
DOTNEXT:            0E00 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E08 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
PARSEARGS:          0E1A DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E24 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
PARSEARGS1A:        0E2C DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PARSEARGS2:         0E34 DEFINED AT LINE 2063 IN MAIN.asm
PARSEARGS3:         0E3C DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
PARSEARGS4:         0E3F DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEARGS5:         0E45 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
PARSEBLOCK:         0E50 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E54 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
PARSEBLOCK2:        0E6D DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
PARSEBLOCK3:        0E73 DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
PARSEBLOCK4:        0E8D DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PARSEBLOCK5:        0E90 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
PARSEBLOCK6:        0EBB DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
CREATEFUNC:         0EBF DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0EDE DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
CREATEFUNC1:        0EF6 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
CREATEFUNC2:        0F09 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
CREATEFUNC2A:       0F28 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
CREATEFUNC3:        0F37 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
CREATEFUNC4:        0F42 DEFINED AT LINE 2257 IN MAIN.asm
CREATEFUNC5:        0F43 DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
VARIABLE:           0F61 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
CONSTANT:           0F70 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
CHARTABLE:          0F73 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0F7D DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
CHARTABLE2:         0F86 DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
CHARTABLE3:         0F88 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
CMDTABLE:           0F8D DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
CMDTABLE1:          0F8E DEFINED AT LINE 2334 IN MAIN.asm
CMDTABLE2:          0F8E DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
CMDTABLE3:          0F9B DEFINED AT LINE 2347 IN MAIN.asm
CMDTABLE4:          0FA4 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
CMDTABLE5:          0FA9 DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
GETVARADDR:         0FAE DEFINED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
GETVARADDR1:        0FC0 DEFINED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
PUTSTR0:            0FC5 DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
PUTSTR:             0FC9 DEFINED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
NESTING:            0FCE DEFINED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
NESTING0:           0FDC DEFINED AT LINE 2411 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
NESTING1A:          0FE3 DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
NESTING1:           0FE6 DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
NESTING2:           0FF5 DEFINED AT LINE 2428 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
NESTING3:           0FF7 DEFINED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
NESTING4:           1002 DEFINED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
PROMPT:             1004 DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
CRLF:               100D DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
PRINTSTR:           1014 DEFINED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 186
INIT:               101B DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2510 IN MAIN.asm
INIT1:              1023 DEFINED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
WARMINIT:           102B DEFINED AT LINE 2473 IN MAIN.asm
COLDBOOT0:          103E DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
COLDINIT:           1048 DEFINED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1059 DEFINED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
COLDSTART:          1066 DEFINED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
START:              106F DEFINED AT LINE 2508 IN MAIN.asm
START1:             1075 DEFINED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
INTERPRET:          107B DEFINED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2635 IN MAIN.asm
INTERPRET2:         1087 DEFINED AT LINE 2523 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
                    > USED AT LINE 2640 IN MAIN.asm
                    > USED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2662 IN MAIN.asm
INTERPRET3:         108F DEFINED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2541 IN MAIN.asm
INTERPRET4:         1095 DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
INTERPRET5:         109A DEFINED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2570 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
INTERPRET5A:        10B3 DEFINED AT LINE 2559 IN MAIN.asm
INTERPRET6:         10B5 DEFINED AT LINE 2562 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
INTERPRET7:         10C3 DEFINED AT LINE 2572 IN MAIN.asm
                    > USED AT LINE 2552 IN MAIN.asm
INTERPRET8:         10D6 DEFINED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
NEXT:               10F1 DEFINED AT LINE 2600 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
NEXT0:              1105 DEFINED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
NEXT1:              1106 DEFINED AT LINE 2616 IN MAIN.asm
                    > USED AT LINE 2605 IN MAIN.asm
EXIT:               110D DEFINED AT LINE 2621 IN MAIN.asm
                    > USED AT LINE 2618 IN MAIN.asm
RUN:                1111 DEFINED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2633 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              1115 DEFINED AT LINE 2631 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
BACKSPACE_:         1127 DEFINED AT LINE 2637 IN MAIN.asm
                    > USED AT LINE 2555 IN MAIN.asm
REEDIT_:            1137 DEFINED AT LINE 2646 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
REEDIT0:            1143 DEFINED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2657 IN MAIN.asm
REEDIT1:            1147 DEFINED AT LINE 2654 IN MAIN.asm
                    > USED AT LINE 2650 IN MAIN.asm
F1:                 1157 DEFINED AT LINE 32
                    > USED AT LINE 852 IN MAIN.asm
F1M_3030S12:        1162 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1163 DEFINED AT LINE 32
                    > USED AT LINE 854 IN MAIN.asm
F2M_3032S15:        116E DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 116F DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
F3M_3034S18:        117A DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 117B DEFINED AT LINE 32
                    > USED AT LINE 858 IN MAIN.asm
F4M_3036S21:        1186 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3057S49:    126F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S50:    12DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S51:    134D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S52:    13BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S53:    1429 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S54:    1497 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S55:    1507 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S56:    1579 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S57:    15E9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S58:    1661 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S59:    16D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S60:    1741 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S61:    17B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S62:    1825 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S63:    189D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S64:    1915 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S65:    198B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S66:    1A05 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S67:    1A83 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S68:    1AFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S69:    1B75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S70:    1BF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S71:    1C6D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S72:    1CE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S73:    1D59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S74:    1DD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S75:    1E4D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S76:    1EC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S77:    1F3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S78:    1FCB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S79:    203D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S80:    20AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S81:    2123 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S82:    2197 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S83:    220D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S84:    228B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S85:    2301 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S86:    2385 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S87:    2409 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S88:    248D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S89:    2513 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S90:    259D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S91:    2627 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S92:    26B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S93:    273B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S94:    27C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S95:    284B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S96:    28DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S97:    2953 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S98:    29D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S99:    2A5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S100:   2AE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S101:   2B67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S102:   2BDD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S103:   2C55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S104:   2CCD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S105:   2D43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S106:   2DB9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S107:   2E2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S108:   2EA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S109:   2F1B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S110:   2F91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S111:   3007 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S112:   307D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S113:   30F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S114:   316D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S115:   31E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S116:   325F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S117:   32D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S118:   334D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S119:   33C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S120:   343B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S121:   34BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S122:   3547 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S123:   35D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S124:   3649 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S125:   36C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S126:   373F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S127:   37C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S128:   383F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S129:   38C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S130:   3951 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S131:   39E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S132:   3A75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S133:   3AFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S134:   3B87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S135:   3C15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S136:   3CA5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S137:   3D33 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S138:   3DCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S139:   3E59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S140:   3EF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S141:   3F8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S142:   4027 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S143:   40CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S144:   416F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S145:   41F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S146:   4285 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S147:   430F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S148:   439F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S149:   4431 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S150:   44D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S151:   4579 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S152:   4621 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S153:   46BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S154:   475F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S155:   4817 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S156:   48C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S157:   498B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S158:   4A4D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S159:   4AE1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S160:   4B75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S161:   4BF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S162:   4C79 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S163:   4CFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S164:   4D7D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S165:   4DF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S166:   4E71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S167:   4EEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S168:   4F65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S169:   4FE9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S170:   507B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S171:   5113 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S172:   51C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S173:   5273 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S174:   533D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S175:   53BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S176:   544D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S177:   54DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S178:   5565 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S179:   55FF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S180:   5699 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            56A4 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5800 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2564 IN MAIN.asm
                    > USED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2589 IN MAIN.asm
                    > USED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2658 IN MAIN.asm
BUFFER:             5900 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
VARS:               5A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5AD0 DEFINED AT LINE 18 IN ram.asm
RST08:              5AD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5AD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5AD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5AD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5AD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5ADA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5ADC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5ADE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5AE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5AE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5AE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5AE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2488 IN MAIN.asm
VTIBPTR:            5AE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2591 IN MAIN.asm
VBUFPTR:            5AE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
VHEAPPTR:           5AEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
VRECURPTR:          5AEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
VDATAWIDTH:         5AEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
VNUMBASE:           5AEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
VHEXPREFIX:         5AF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
VECHO:              5AF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
VSTRMODE:           5AF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
VPOINTER:           5AF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
VREMAIN:            5AFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
VSAVEDIP:           5AFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2594 IN MAIN.asm
VSAVEDSP:           5AFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2595 IN MAIN.asm
VSAVEDNEXT:         5B00 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2596 IN MAIN.asm
VSAVEDBP:           5B02 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2597 IN MAIN.asm
VTEMP1:             5B04 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
VTEMP2:             5B06 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
VTEMP3:             5B08 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
TBPTR:              5B0C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           5B0E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
HEAP:               5B22 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
