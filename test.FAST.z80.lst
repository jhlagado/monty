0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 54               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 54               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 54               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 54               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 54               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 54               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 54               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 54               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 54               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 54               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 52               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 54               LD   (RST08),HL   
0094   22 D2 54               LD   (RST10),HL   
0097   22 D4 54               LD   (RST18),HL   
009A   22 D6 54               LD   (RST20),HL   
009D   22 D8 54               LD   (RST28),HL   
00A0   22 DA 54               LD   (RST30),HL   
00A3   22 DE 54               LD   (INTVEC),HL   
00A6   22 E0 54               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 54               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 54               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 52                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 53                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   58 0F                  DW   next   ; nNext
01E8   20 55                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 75 09               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 75 09               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F6 54            LD   de,(vPointer)   
0238   21 F6 54               LD   hl,vPointer   
023B   C3 AF 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 75 09               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 14 0C               JP   num   
026E                EQ_:         
026E   CD 0F 0E               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 73 09               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 5C 0C               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 4C 0C               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 44 0C               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 99 0B               JP   dollar   
02C3                LBRACK_:      
02C3   C3 EF 08               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 0B 09               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 BA 08               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 84 09               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 89 09               JP   rbrace   
02D2                TICK_:       
02D2   C3 10 0A               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 85 08               JP   semicolon   
02D8                DOT_:        
02D8   C3 B5 04               JP   dot   
02DB                COLON_:      
02DB   C3 4E 08               JP   colon   
02DE                UPCASE_:      
02DE   C3 B6 0B               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 BB 0B               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 CD 0B               JP   question   
02E7                STAR_:       
02E7   C3 F8 0B               JP   star   
02EA                HASH_:       
02EA   C3 5B 09               JP   hash   
02ED                CARET_:      
02ED   C3 FA 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 4C 08               JP   comma   
02F3                DQUOTE_:      
02F3   C3 6F 0C               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 5B 08               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 4C 08               JP   underscore   
02FC                TILDE_:      
02FC   C3 4C 08               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA E6 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD FB 0D               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   36                     DB   lsb(command_b_)   
030E   68                     DB   lsb(command_nop_)   
030F   6A                     DB   lsb(decimal_)   
0310   68                     DB   lsb(command_nop_)   
0311   E4                     DB   lsb(command_f_)   
0312   68                     DB   lsb(command_nop_)   
0313   7C                     DB   lsb(hexadecimal_)   
0314   41                     DB   lsb(command_i_)   
0315   68                     DB   lsb(command_nop_)   
0316   82                     DB   lsb(key_)   
0317   68                     DB   lsb(command_nop_)   
0318   4A                     DB   lsb(command_m_)   
0319   68                     DB   lsb(command_nop_)   
031A   85                     DB   lsb(output_)   
031B   4D                     DB   lsb(command_p_)   
031C   56                     DB   lsb(command_q_)   
031D   5F                     DB   lsb(command_r_)   
031E   62                     DB   lsb(command_s_)   
031F   88                     DB   lsb(true_)   
0320   68                     DB   lsb(command_nop_)   
0321   65                     DB   lsb(command_v_)   
0322   8B                     DB   lsb(words_)   
0323   8E                     DB   lsb(xor_)   
0324   68                     DB   lsb(command_nop_)   
0325   68                     DB   lsb(command_nop_)   
0326   72                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD 0F 0E               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   99                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A6                     DB   lsb(addrOf_)   
032E   69                     DB   "i"   ; /ad address of
032F   A9                     DB   lsb(arrayIter_)   
0330   73                     DB   "s"   ; /as array size
0331   AC                     DB   lsb(arraySize_)   
0332   00                     DB   NUL   
0333   C3 76 03               JP   error1_   
0336                COMMAND_B_:      
0336   CD 0F 0E               CALL   jumpTable   
0339   72                     DB   "r"   ; /br break
033A   B4                     DB   lsb(break_)   
033B   79                     DB   "y"   ; /by cold boot
033C   B7                     DB   lsb(coldStart_)   
033D   00                     DB   NUL   
033E   C3 BA 03               JP   bytes_   ; /b bytes
0341                COMMAND_I_:      
0341   CD 0F 0E               CALL   jumpTable   
0344   6E                     DB   "n"   ; /in input
0345   C2                     DB   lsb(input_)   
0346   00                     DB   NUL   
0347   C3 76 03               JP   error1_   
034A                COMMAND_M_:      
034A   C3 3E 04               JP   command_m   
034D                COMMAND_P_:      
034D   CD 0F 0E               CALL   jumpTable   
0350   63                     DB   "c"   ; /pc print chars
0351   CD                     DB   lsb(printChars_)   
0352   00                     DB   NUL   
0353   C3 76 03               JP   error1_   
0356                COMMAND_Q_:      
0356   CD 0F 0E               CALL   jumpTable   
0359   74                     DB   "t"   ; /qt quit
035A   D4                     DB   lsb(quit_)   
035B   00                     DB   NUL   
035C   C3 76 03               JP   error1_   
035F                COMMAND_R_:      
035F   C3 4A 04               JP   command_r   
0362                COMMAND_S_:      
0362   C3 63 04               JP   command_s   
0365                COMMAND_V_:      
0365   C3 72 04               JP   command_v   
0368                COMMAND_NOP_:      
0368   DD E9                  JP   (ix)   
036A                DECIMAL_:      
036A   21 0A 00               LD   hl,10   
036D                DECIMAL1:      
036D   22 E8 54               LD   (vNumBase),hl   
0370   DD E9                  JP   (ix)   
0372                DIV_:        
0372   00                     DB   NUL   
0373   C3 25 0A               JP   div   
0376                ERROR1_:      
0376   21 01 00               LD   hl,1   ; error 1: unknown command
0379   C3 77 0F               JP   error   
037C                HEXADECIMAL_:      
037C   21 10 00               LD   hl,16   
037F   C3 6D 03               JP   decimal1   
0382                KEY_:        
0382   C3 82 03               JP   key_   
0385                OUTPUT_:      
0385   C3 EF 0B               JP   output   
0388                TRUE_:       
0388   C3 B1 02               JP   true1   
038B                WORDS_:      
038B   C3 DE 03               JP   words   
038E                XOR_:        
038E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038F                XOR1:        
038F   E1                     POP   hl   
0390   7B                     LD   a,e   
0391   AD                     XOR   l   
0392   6F                     LD   l,a   
0393   7A                     LD   a,d   
0394   AC                     XOR   h   
0395   67                     LD   h,a   
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; /ab absolute
0399                             ; num -- num
0399                ABSOLUTE_:      
0399   E1                     POP   hl   
039A   CB 7C                  BIT   7,h   
039C   C8                     RET   z   
039D   AF                     XOR   a   
039E   95                     SUB   l   
039F   6F                     LD   l,a   
03A0   9F                     SBC   a,a   
03A1   94                     SUB   h   
03A2   67                     LD   h,a   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADDROF_:      
03A6   C3 99 08               JP   addrOf   
03A9                ARRAYITER_:      
03A9   C3 86 05               JP   arrayIter   
03AC                             ; /as size of an array, num elements, ignores vDataWidth :-/
03AC                             ; array* -- num
03AC                ARRAYSIZE_:      
03AC   E1                     POP   hl   
03AD   2B                     DEC   hl   ; msb size
03AE   56                     LD   d,(hl)   
03AF   2B                     DEC   hl   ; lsb size
03B0   5E                     LD   e,(hl)   
03B1   D5                     PUSH   de   
03B2   DD E9                  JP   (ix)   
03B4                BREAK_:      
03B4   C3 F6 09               JP   break   
03B7                             ; /by
03B7                COLDSTART_:      
03B7   C3 C0 0E               JP   coldStart   
03BA                             ; /b
03BA                BYTES_:      
03BA   21 01 00               LD   hl,1   
03BD                BYTES1:      
03BD   22 E6 54               LD   (vDataWidth),hl   
03C0   DD E9                  JP   (ix)   
03C2                             ; Z80 port input
03C2                             ; port -- value
03C2                INPUT_:      
03C2   E1                     POP   hl   
03C3   59                     LD   e,c   ; save IP
03C4   4D                     LD   c,l   
03C5   ED 68                  IN   l,(c)   
03C7   26 00                  LD   h,0   
03C9   4B                     LD   c,e   ; restore IP
03CA   E5                     PUSH   hl   
03CB   DD E9                  JP   (ix)   
03CD                             ; /pc printChars
03CD                             ; char* len --
03CD                PRINTCHARS_:      
03CD   E1                     POP   hl   ; hl = count
03CE   D1                     POP   de   ; de = char*
03CF   CD 9D 0C               CALL   printChars2   
03D2   DD E9                  JP   (ix)   
03D4                             ; /qt
03D4                             ; bool --
03D4                QUIT_:       
03D4   E1                     POP   hl   ; hl = condition, exit if true
03D5   7D                     LD   a,l   
03D6   B4                     OR   h   
03D7   20 02                  JR   nz,quit1   
03D9   DD E9                  JP   (ix)   
03DB                QUIT1:       
03DB   C3 89 09               JP   blockEnd   
03DE                             ; /w
03DE                WORDS:       
03DE   21 02 00               LD   hl,2   
03E1   C3 BD 03               JP   bytes1   
03E4                COMMAND_F_:      
03E4   18 1A                  JR   command_f   
03E6                             ; //
03E6                COMMENT:      
03E6   03                     INC   bc   ; point to next char
03E7   0A                     LD   a,(bc)   
03E8   FE 20                  CP   " "   ; terminate on any char less than SP
03EA   30 FA                  JR   nc,comment   
03EC   0B                     DEC   bc   
03ED   DD E9                  JP   (ix)   
03EF                             ;********************** PAGE 3 END *********************************************
03EF                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                COMMAND_F:      
0400   CD 0F 0E               CALL   jumpTable   
0403   64                     DB   "d"   ; /fd fold
0404   26                     DB   lsb(fold_)   
0405   65                     DB   "e"   ; /fe forEach
0406   1B                     DB   lsb(forEach_)   
0407   6C                     DB   "l"   ; /fl flush output buffer
0408   1E                     DB   lsb(flush_)   
0409   73                     DB   "s"   ; /fs funcSrc
040A   29                     DB   lsb(funcSrc_)   
040B   74                     DB   "t"   ; /ft filter
040C   23                     DB   lsb(filter_)   
040D   31                     DB   "1"   
040E   2C                     DB   lsb(f1_)   
040F   32                     DB   "2"   
0410   2F                     DB   lsb(f2_)   
0411   33                     DB   "3"   
0412   32                     DB   lsb(f3_)   
0413   34                     DB   "4"   
0414   35                     DB   lsb(f4_)   
0415   7A                     DB   "z"   
0416   38                     DB   lsb(fz_)   
0417   00                     DB   NUL   
0418   C3 3B 04               JP   false_   
041B                FOREACH_:      
041B   C3 7F 07               JP   forEach   
041E                             ; /fl flush
041E                             ; --
041E                FLUSH_:      
041E   CD E4 0D               CALL   flushBuffer   
0421   DD E9                  JP   (ix)   
0423                FILTER_:      
0423   C3 CF 06               JP   filter   
0426                FOLD_:       
0426   C3 2D 07               JP   fold   
0429                FUNCSRC_:      
0429   C3 CB 07               JP   funcSrc   
042C                F1_:         
042C   C3 C0 0F               JP   f1   
042F                F2_:         
042F   C3 46 10               JP   f2   
0432                F3_:         
0432   C3 52 10               JP   f3   
0435                F4_:         
0435   C3 5E 10               JP   f4   
0438                FZ_:         
0438   C3 ED 0A               JP   fz   
043B                FALSE_:      
043B   C3 B7 02               JP   false1   
043E                COMMAND_M:      
043E   CD 0F 0E               CALL   jumpTable   
0441   70                     DB   "p"   ; /mp map
0442   47                     DB   lsb(map_)   
0443   00                     DB   NUL   
0444   C3 76 03               JP   error1_   
0447                MAP_:        
0447   C3 8D 06               JP   map   
044A                COMMAND_R:      
044A   CD 0F 0E               CALL   jumpTable   
044D   63                     DB   "c"   ; /rc tail call optimisation
044E   57                     DB   lsb(recur_)   
044F   65                     DB   "e"   ; /re remainder
0450   5D                     DB   lsb(remain_)   
0451   67                     DB   "g"   ; /rg range src
0452   6F                     DB   lsb(rangeSrc_)   
0453   00                     DB   NUL   
0454   C3 76 03               JP   error1_   
0457                RECUR_:      
0457   E1                     POP   hl   
0458   22 F2 54               LD   (vRecur),hl   
045B   DD E9                  JP   (ix)   
045D                REMAIN_:      
045D   2A F8 54               LD   hl,(vRemain)   
0460   E5                     PUSH   hl   
0461   DD E9                  JP   (ix)   
0463                COMMAND_S:      
0463   CD 0F 0E               CALL   jumpTable   
0466   69                     DB   "i"   
0467   6C                     DB   lsb(stringIter_)   
0468   00                     DB   NUL   
0469   C3 76 03               JP   error1_   
046C                STRINGITER_:      
046C   C3 07 06               JP   stringIter   
046F                RANGESRC_:      
046F   C3 0A 05               JP   rangeSrc   
0472                COMMAND_V:      
0472   CD 0F 0E               CALL   jumpTable   
0475   62                     DB   "b"   
0476   94                     DB   lsb(varBufPtr_)   
0477   68                     DB   "h"   
0478   9D                     DB   lsb(varHeapPtr_)   
0479   74                     DB   "t"   
047A   A6                     DB   lsb(varTIBPtr_)   
047B   42                     DB   "B"   
047C   85                     DB   lsb(constBufStart_)   
047D   48                     DB   "H"   
047E   8A                     DB   lsb(constHeapStart_)   
047F   54                     DB   "T"   
0480   8F                     DB   lsb(constTIBStart_)   
0481   00                     DB   NUL   
0482   C3 76 03               JP   error1_   
0485                CONSTBUFSTART_:      
0485   11 00 53               LD   de,BUF   
0488   18 28                  JR   constant   
048A                CONSTHEAPSTART_:      
048A   11 20 55               LD   de,HEAP   
048D   18 23                  JR   constant   
048F                CONSTTIBSTART_:      
048F   11 00 52               LD   de,TIB   
0492   18 1E                  JR   constant   
0494                VARBUFPTR_:      
0494   ED 5B EC 54            LD   de,(vBufPtr)   
0498   21 EC 54               LD   hl,vBufPtr   
049B   18 12                  JR   variable   
049D                VARHEAPPTR_:      
049D   ED 5B F0 54            LD   de,(vHeapPtr)   
04A1   21 F0 54               LD   hl,vHeapPtr   
04A4   18 09                  JR   variable   
04A6                VARTIBPTR_:      
04A6   ED 5B EA 54            LD   de,(vTIBPtr)   
04AA   21 EA 54               LD   hl,vTIBPtr   
04AD   18 00                  JR   variable   
04AF                VARIABLE:      
04AF   22 F6 54               LD   (vPointer),hl   
04B2                CONSTANT:      
04B2   D5                     PUSH   de   
04B3   DD E9                  JP   (ix)   
04B5                DOT:         
04B5   CD 0F 0E               CALL   jumpTable   
04B8   61                     DB   "a"   ; .a print array
04B9   04                     DB   lsb(dotArray)   
04BA   63                     DB   "c"   ; .c print char
04BB   E9                     DB   lsb(dotChar_)   
04BC   73                     DB   "s"   ; .s print string
04BD   CF                     DB   lsb(dotString_)   
04BE   78                     DB   "x"   ; .x print x chars
04BF   EE                     DB   lsb(dotXChars_)   
04C0   00                     DB   NUL   ; .  print number
04C1   C3 C4 04               JP   dotNumber_   
04C4                             ; /bd buffer decimal
04C4                             ; value --
04C4                DOTNUMBER_:      
04C4   3A E8 54               LD   a,(vNumBase)   
04C7   FE 10                  CP   16   
04C9   CA 9C 0A               JP   z,bufferHex   ; else falls through
04CC   C3 36 0A               JP   bufferDec   
04CF                             ; /bs buffered string
04CF                             ; string* --
04CF                DOTSTRING_:      
04CF   E1                     POP   hl   ; hl = string*
04D0   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
04D4   18 06                  JR   dotString1   
04D6                DOTSTRING0:      
04D6   12                     LD   (de),a   ; a -> buffer*
04D7   1C                     INC   e   ; buffer*++, wraparound
04D8   CC E4 0D               CALL   z,flushBuffer   
04DB   23                     INC   hl   
04DC                DOTSTRING1:      
04DC   7E                     LD   a,(hl)   ; a <- string*
04DD   B7                     OR   a   ; if NUL exit loop
04DE   20 F6                  JR   nz,dotString0   
04E0   2A EC 54               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04E3   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*' in pointer
04E7   DD E9                  JP   (ix)   
04E9                             ; /bc buffer char
04E9                             ; char --
04E9                DOTCHAR_:      
04E9   21 01 00               LD   hl,1   
04EC   18 01                  JR   dotXChars0   
04EE                             ; /bx buffered x chars
04EE                             ; char length --
04EE                DOTXCHARS_:      
04EE   E1                     POP   hl   ; hl = length
04EF                DOTXCHARS0:      
04EF   D1                     POP   de   ; a' = char
04F0   7B                     LD   a,e   
04F1   08                     EX   af,af'   
04F2   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
04F6   18 08                  JR   dotXChars2   
04F8                DOTXCHARS1:      
04F8   08                     EX   af,af'   
04F9   12                     LD   (de),a   
04FA   08                     EX   af,af'   
04FB   1C                     INC   e   ; buffer*++, wraparound
04FC   CC E4 0D               CALL   z,flushBuffer   
04FF   2B                     DEC   hl   
0500                DOTXCHARS2:      
0500   7D                     LD   a,l   
0501   B4                     OR   h   
0502   20 F4                  JR   nz,dotXChars1   
0504   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*'
0508   DD E9                  JP   (ix)   
050A                             ;********************** PAGE 4 END *********************************************
050A                             ;*******************************************************************
050A                             ; Monty implementations
050A                             ;*******************************************************************
050A                             ; /rg rangeSrc
050A                             ; begin end step -- src
050A                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
050A                RANGESRC:      ; range source: begin, end, step, local: L
050A   CD FA 0A               CALL   go   
050D   00 00                  DW   NUL   
050F   19 05                  DW   rangeSrcM_1335S870   
0511   13 05                  DW   $+2   
0513   01                     DB   1   
0514   04 62 65 73 4C         .PSTR   "besL"   
0519                RANGESRCM_1335S870:      
0519   7B                     DB   "{"   
051A   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0525   5C 6B 74 7B            DB   "\\kt{"   
0529   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0531   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0537   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
053F   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0547   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0551   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0559   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0560   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0574   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
057C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0583   7D                     DB   "}"   
0584   7D                     DB   "}"   
0585   00                     DB   0   
0586                             ; /ai arrayIter
0586                             ; array* -- src
0586                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0586                ARRAYITER:      
0586   CD FA 0A               CALL   go   
0589   00 00                  DW   NUL   
058B   93 05                  DW   arrayIterM_1354S890   
058D   8F 05                  DW   $+2   
058F   01                     DB   1   
0590   02 61 4C               .PSTR   "aL"   
0593                ARRAYITERM_1354S890:      
0593   7B                     DB   "{"   
0594   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
05A4   5C 6B 74 7B            DB   "\\kt{"   
05A8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
05B0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
05B6   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
05BE   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
05C6   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
05CD   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
05D5   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
05DE   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
05F5   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
05FD   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0604   7D                     DB   "}"   
0605   7D                     DB   "}"   
0606   00                     DB   0   
0607                             ; /si stringIter
0607                             ; string* -- src
0607                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0607                STRINGITER:      
0607   CD FA 0A               CALL   go   
060A   00 00                  DW   NUL   
060C   14 06                  DW   stringIterM_1373S910   
060E   10 06                  DW   $+2   
0610   01                     DB   1   
0611   02 73 4C               .PSTR   "sL"   
0614                STRINGITERM_1373S910:      
0614   7B                     DB   "{"   
0615   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
061F   5C 6B 74 7B            DB   "\\kt{"   
0623   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
062B   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0632   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
063A   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0642   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0649   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
0658   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0660   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0667   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
067B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0683   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
068A   7D                     DB   "}"   
068B   7D                     DB   "}"   
068C   00                     DB   0   
068D                             ; /mp map
068D                             ; src func -- src1
068D                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
068D                MAP:         ; map: source, function
068D   CD FA 0A               CALL   go   
0690   00 00                  DW   NUL   
0692   9A 06                  DW   mapM_1393S932   
0694   96 06                  DW   $+2   
0696   00                     DB   0   
0697   02 73 66               .PSTR   "sf"   
069A                MAPM_1393S932:      
069A   7B                     DB   "{"   
069B   5C 6B 74 7B            DB   "\\kt{"   
069F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
06A7   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
06AB   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
06B0   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
06BC   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
06C5   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
06CC   7D                     DB   "}"   
06CD   7D                     DB   "}"   
06CE   00                     DB   0   
06CF                             ; /ft filter
06CF                             ; src pred -- src1
06CF                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
06CF                FILTER:      ; filter: source, predicate, local: T
06CF   CD FA 0A               CALL   go   
06D2   00 00                  DW   NUL   
06D4   DD 06                  DW   filterM_1407S947   
06D6   D8 06                  DW   $+2   
06D8   01                     DB   1   
06D9   03 73 70 54            .PSTR   "spT"   
06DD                FILTERM_1407S947:      
06DD   7B                     DB   "{"   
06DE   5B 30 5D 25 54 3D      DB   "[0]%T="   
06E4   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
06E8   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
06EC   5B                     DB   "["   
06ED   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
06FA   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0702   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0706   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
070B   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0721   3F 3F                  DB   "??"   
0723   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
072A   7D                     DB   "}"   
072B   7D                     DB   "}"   
072C   00                     DB   0   
072D                             ; /fd fold
072D                             ; reducer is a function like: \\da00bbLi4u
072D                             ; src init reducer -- src1
072D                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
072D                FOLD:        ; src, init, reducer
072D   CD FA 0A               CALL   go   
0730   00 00                  DW   NUL   
0732   3C 07                  DW   foldM_1426S967   
0734   36 07                  DW   $+2   
0736   01                     DB   1   
0737   04 73 69 72 41         .PSTR   "sirA"   
073C                FOLDM_1426S967:      
073C   7B                     DB   "{"   ; reducer: \\da00bbLi4u
073D   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0744   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0748   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
074C   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0751   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
076C   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0775   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
077C   7D                     DB   "}"   
077D   7D                     DB   "}"   
077E   00                     DB   0   
077F                             ; /fe forEach
077F                             ; src proc --
077F                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
077F                FOREACH:      ; forEach: source, procedure, local: T
077F   CD FA 0A               CALL   go   
0782   00 00                  DW   NUL   
0784   8D 07                  DW   forEachM_1440S982   
0786   88 07                  DW   $+2   
0788   01                     DB   1   
0789   03 73 70 54            .PSTR   "spT"   
078D                FOREACHM_1440S982:      
078D   7B                     DB   "{"   
078E   5B 30 5D 25 54 3D      DB   "[0]%T="   
0794   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0798   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
07A0   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
07A5   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
07B7   3F 3F                  DB   "??"   ; ifte:
07B9   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
07C2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
07C9   7D                     DB   "}"   
07CA   00                     DB   0   
07CB                             ; ; /fs funcSrc
07CB                             ; ; func -- src
07CB                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
07CB                FUNCSRC:      ; :f func or block
07CB   CD FA 0A               CALL   go   
07CE   00 00                  DW   NUL   
07D0   D7 07                  DW   funcSrcM_1454S997   
07D2   D4 07                  DW   $+2   
07D4   00                     DB   0   
07D5   01 66                  .PSTR   "f"   
07D7                FUNCSRCM_1454S997:      
07D7   7B                     DB   "{"   
07D8   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
07DC   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
07E4   5C 64 74 7B            DB   "\\dt{"   
07E8   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
07FA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0801   7D                     DB   "}"   
0802   7D                     DB   "}"   
0803   00                     DB   0   
0804                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0804                DOTARRAY:      
0804   CD FA 0A               CALL   go   
0807   00 00                  DW   NUL   
0809   12 08                  DW   dotArrayM_1464S1008   
080B   0D 08                  DW   $+2   
080D   02                     DB   2   
080E   03 61 62 63            .PSTR   "abc"   
0812                DOTARRAYM_1464S1008:      
0812   7B                     DB   "{"   
0813   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
084A   7D                     DB   "}"   
084B   00                     DB   0   
084C                             ;*******************************************************************
084C                             ; unused opcodes (reserved)
084C                             ;*******************************************************************
084C                UNDERSCORE:      
084C                TILDE:       
084C                COMMA:       
084C   DD E9                  JP   (ix)   
084E                             ;*******************************************************************
084E                             ; implementations
084E                             ;*******************************************************************
084E                             ; _ func
084E                             ; -- func*
084E                COLON:       
084E   03                     INC   bc   ; arg_list must ve immediately followed by {
084F   0A                     LD   a,(bc)   
0850   FE 3D                  CP   "="   ; := definition
0852   28 28                  JR   z,defineStart   
0854   0B                     DEC   bc   
0855   21 01 00               LD   hl,1   
0858   C3 77 0F               JP   error   
085B                BACKSLASH:      
085B                LAMBDA:      
085B   DD E5                  PUSH   ix   
085D   CD A2 0C               CALL   parseArgs   
0860                LAMBDA1:      
0860   03                     INC   bc   ; arg_list must ve immediately followed by {
0861   0A                     LD   a,(bc)   
0862   FE 21                  CP   " "+1   ; skip white space
0864   38 FA                  JR   c,lambda1   
0866   FE 7B                  CP   "{"   
0868   28 06                  JR   z,lambda2   
086A   21 02 00               LD   hl,2   ; error 2: parse error
086D   C3 77 0F               JP   error   
0870                LAMBDA2:      
0870   CD D8 0C               CALL   parseBlock   
0873   CD 42 0D               CALL   createFunc   
0876   E1                     POP   hl   
0877   DD E1                  POP   ix   
0879   E5                     PUSH   hl   
087A   DD E9                  JP   (ix)   
087C                DEFINESTART:      
087C   E1                     POP   hl   ; discard variable value
087D   2A F6 54               LD   hl,(vPointer)   ; vDefine = vPointer
0880   22 F4 54               LD   (vDefine),hl   
0883   DD E9                  JP   (ix)   
0885                SEMICOLON:      
0885                DEFINEEND:      
0885   2A F4 54               LD   hl,(vDefine)   ; hl = define*
0888   7D                     LD   a,l   
0889   B4                     OR   h   
088A   28 0B                  JR   z,defineEnd1   
088C   11 00 00               LD   de,NUL   ; set vDefine=NUL
088F   ED 53 F4 54            LD   (vDefine),de   
0893   D1                     POP   de   ; de = value
0894   C3 79 09               JP   assign1   
0897                DEFINEEND1:      
0897   DD E9                  JP   (ix)   
0899                             ; /ad addrOf
0899                             ; char -- addr
0899                ADDROF:      
0899   E1                     POP   hl   ; a = char
089A   7D                     LD   a,l   
089B   FE 7B                  CP   "z"+1   ; if a > z then exit
089D   30 19                  JR   nc,addrOf2   
089F   D6 41                  SUB   "A"   ; a - 65
08A1   38 15                  JR   c,addrOf2   ; if < A then exit
08A3   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08A5   38 06                  JR   c,addrOf1   
08A7   D6 06                  SUB   "a"-("Z"+1)   
08A9   FE 1A                  CP   "Z"-"A"+1   
08AB   38 0B                  JR   c,addrOf2   ; if < a then exit
08AD                ADDROF1:      
08AD   87                     ADD   a,a   ; double a
08AE   21 00 54               LD   hl,VARS   ; hl = VARS + a
08B1   85                     ADD   a,l   
08B2   6F                     LD   l,a   
08B3   3E 00                  LD   a,0   
08B5   8C                     ADC   a,h   
08B6   67                     LD   h,a   
08B7   E5                     PUSH   hl   
08B8                ADDROF2:      
08B8   DD E9                  JP   (ix)   
08BA                             ; %a .. %z
08BA                             ; -- value
08BA                             ; returns value of arg
08BA                PERCENT:      
08BA                ARG:         
08BA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
08BD   FD 56 05               LD   d,(iy+5)   
08C0   EB                     EX   de,hl   
08C1   7D                     LD   a,l   ; arg_list* == null, skip
08C2   B4                     OR   h   
08C3   28 1A                  JR   z,arg0a   
08C5   23                     INC   hl   ; a = num_args, hl = arg_list*
08C6   7E                     LD   a,(hl)   
08C7   23                     INC   hl   
08C8   B7                     OR   a   
08C9   28 14                  JR   z,arg0a   ; num_args == 0, skip
08CB   5F                     LD   e,a   ; e = a = num_args
08CC   03                     INC   bc   ; a = next char = dollar_name
08CD   0A                     LD   a,(bc)   
08CE   C5                     PUSH   bc   ; save IP
08CF   43                     LD   b,e   ; b = e = num_args
08D0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08D3   FD 56 03               LD   d,(iy+3)   
08D6                ARG0:        
08D6   1B                     DEC   de   ; a = dollar_name, de = next arg*
08D7   1B                     DEC   de   
08D8   BE                     CP   (hl)   
08D9   28 09                  JR   z,arg1   
08DB   23                     INC   hl   ; hl = next arg_list*
08DC   10 F8                  DJNZ   arg0   
08DE   C1                     POP   bc   ; no match, restore IP
08DF                ARG0A:       
08DF   11 00 00               LD   de,0   ; return 0
08E2   18 08                  JR   arg1a   
08E4                ARG1:        
08E4   C1                     POP   bc   ; restore IP
08E5   EB                     EX   de,hl   ; hl = arg*
08E6   22 F6 54               LD   (vPointer),hl   ; store arg* in setter
08E9   5E                     LD   e,(hl)   
08EA   23                     INC   hl   
08EB   56                     LD   d,(hl)   ; de = arg
08EC                ARG1A:       
08EC   D5                     PUSH   de   ; push arg
08ED   DD E9                  JP   (ix)   
08EF                LBRACK:      
08EF                ARRAYSTART:      
08EF   11 00 00               LD   de,0   ; create stack frame
08F2   D5                     PUSH   de   ; push null for IP
08F3   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
08F6   FD 56 05               LD   d,(iy+5)   ; 
08F9   D5                     PUSH   de   ; 
08FA   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
08FD   FD 56 03               LD   d,(iy+3)   ; 
0900   D5                     PUSH   de   ; 
0901   FD E5                  PUSH   iy   ; push BP
0903   FD 21 00 00            LD   iy,0   ; BP = SP
0907   FD 39                  ADD   iy,sp   
0909   DD E9                  JP   (ix)   
090B                RBRACK:      
090B                ARRAYEND:      
090B   FD 54                  LD   d,iyh   ; de = BP
090D   FD 5D                  LD   e,iyl   
090F   ED 43 02 55            LD   (vTemp1),bc   ; save IP
0913   62 6B                  LD   hl,de   ; hl = de = BP
0915   B7                     OR   a   
0916   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0918   CB 3C                  SRL   h   ; 
091A   CB 1D                  RR   l   
091C   44 4D                  LD   bc,hl   ; bc = count
091E   2A F0 54               LD   hl,(vHeapPtr)   ; hl = array[-4]
0921   71                     LD   (hl),c   ; write num items in length word
0922   23                     INC   hl   
0923   70                     LD   (hl),b   
0924   23                     INC   hl   ; hl = array[0], bc = count
0925                             ; de = BP, hl = array[0], bc = count
0925   18 15                  JR   arrayEnd3   
0927                ARRAYEND1:      
0927   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
092A   77                     LD   (hl),a   ; write lsb of array item
092B   23                     INC   hl   ; move to msb of array item
092C   3A E6 54               LD   a,(vDataWidth)   ; vDataWidth=1?
092F   3D                     DEC   a   
0930   28 05                  JR   z,arrayEnd2   
0932   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0935   77                     LD   (hl),a   ; write msb of array item
0936   23                     INC   hl   ; move to next word in array
0937                ARRAYEND2:      
0937   FD 2B                  DEC   iy   ; move to next word on stack
0939   FD 2B                  DEC   iy   
093B   0B                     DEC   bc   ; dec items count
093C                ARRAYEND3:      
093C   79                     LD   a,c   ; if not zero loop
093D   B0                     OR   b   
093E   20 E7                  JR   nz,arrayEnd1   
0940   EB                     EX   de,hl   ; de = end of array, hl = BP
0941   F9                     LD   sp,hl   ; sp = BP
0942   E1                     POP   hl   ; de = end of array, hl = old BP
0943   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0944   FD 62                  LD   iyh,d   
0946   FD 6B                  LD   iyl,e   
0948   D1                     POP   de   ; pop arg_list (discard)
0949   D1                     POP   de   ; pop first_arg* (discard)
094A   D1                     POP   de   ; pop IP (discard)
094B   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = array[-2]
094F   13                     INC   de   
0950   13                     INC   de   
0951   D5                     PUSH   de   ; return array[0]
0952   22 F0 54               LD   (vHeapPtr),hl   ; move heap* to end of array
0955   ED 4B 02 55            LD   bc,(vTemp1)   ; restore IP
0959   DD E9                  JP   (ix)   
095B                             ; index of an array, based on vDataWidth
095B                             ; array* num -- value    ; also sets vPointer to address
095B                HASH:        
095B                ARRAYINDEX:      
095B   E1                     POP   hl   ; hl = index
095C   D1                     POP   de   ; de = array
095D   3A E6 54               LD   a,(vDataWidth)   ; a = data width
0960   3D                     DEC   a   
0961   28 01                  JR   z,arrayIndex1   
0963                ARRAYINDEX0:      
0963   29                     ADD   hl,hl   ; if data width = 2 then double
0964                ARRAYINDEX1:      
0964   19                     ADD   hl,de   ; add addr
0965   22 F6 54               LD   (vPointer),hl   ; store address in setter
0968   16 00                  LD   d,0   
096A   5E                     LD   e,(hl)   
096B   B7                     OR   a   ; check data width again
096C   28 02                  JR   z,arrayIndex2   
096E   23                     INC   hl   
096F   56                     LD   d,(hl)   
0970                ARRAYINDEX2:      
0970   D5                     PUSH   de   
0971   DD E9                  JP   (ix)   
0973                             ; value _oldValue --            ; uses address in vPointer
0973                ASSIGN:      
0973   E1                     POP   hl   ; discard last accessed value
0974   E1                     POP   hl   ; hl = new value
0975                ASSIGN0:      
0975   EB                     EX   de,hl   ; de = new value
0976   2A F6 54               LD   hl,(vPointer)   
0979                ASSIGN1:      ; entry point from defineEnd
0979   73                     LD   (hl),e   
097A   3A E6 54               LD   a,(vDataWidth)   
097D   3D                     DEC   a   ; is it byte?
097E   28 02                  JR   z,assign2   
0980   23                     INC   hl   
0981   72                     LD   (hl),d   
0982                ASSIGN2:      
0982   DD E9                  JP   (ix)   
0984                             ; { block start
0984                             ; -- block*
0984                LBRACE:      
0984   CD D8 0C               CALL   parseBlock   
0987   DD E9                  JP   (ix)   
0989                RBRACE:      
0989                BLOCKEND:      
0989   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
098C   FD 56 01               LD   d,(iy+1)   
098F   ED 53 02 55            LD   (vTemp1),de   
0993   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0996   FD 56 07               LD   d,(iy+7)   
0999   ED 53 04 55            LD   (vTemp2),de   
099D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
09A0   FD 56 03               LD   d,(iy+3)   
09A3   EB                     EX   de,hl   
09A4   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
09A7   FD 56 01               LD   d,(iy+1)   
09AA   13                     INC   de   ; for carry flag <=
09AB   B7                     OR   a   
09AC   ED 52                  SBC   hl,de   
09AE   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
09B0   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
09B2   FD 5D                  LD   e,iyl   
09B4   21 08 00               LD   hl,8   
09B7   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
09B8   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
09B9   18 0C                  JR   blockEnd2   
09BB                BLOCKEND1:      ; same scope
09BB   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
09BE   FD 56 03               LD   d,(iy+3)   
09C1   EB                     EX   de,hl   
09C2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
09C4   FD 5D                  LD   e,iyl   
09C6   EB                     EX   de,hl   
09C7                BLOCKEND2:      
09C7   44 4D                  LD   bc,hl   ; bc = hl = BP
09C9   B7                     OR   a   ; hl = BP - SP = count
09CA   ED 72                  SBC   hl,sp   
09CC   7D                     LD   a,l   
09CD   B4                     OR   h   
09CE   28 09                  JR   z,blockEnd3   
09D0   C5                     PUSH   bc   ; bc = count, hl = BP
09D1   44 4D                  LD   bc,hl   
09D3   E1                     POP   hl   
09D4   2B                     DEC   hl   ; hl = BP-1
09D5   1B                     DEC   de   ; de = args*-1
09D6   ED B8                  LDDR      
09D8   13                     INC   de   
09D9                BLOCKEND3:      
09D9   EB                     EX   de,hl   ; sp = de = new tos*
09DA   F9                     LD   sp,hl   
09DB   ED 4B 04 55            LD   bc,(vTemp2)   
09DF   FD 2A 02 55            LD   iy,(vTemp1)   
09E3   ED 5B F2 54            LD   de,(vRecur)   ; de = recur vector
09E7   7B                     LD   a,e   ; check for NUL
09E8   B2                     OR   d   
09E9   20 02                  JR   nz,blockEnd4   
09EB   DD E9                  JP   (ix)   
09ED                BLOCKEND4:      
09ED   21 00 00               LD   hl,0   ; clear recur vector
09F0   22 F2 54               LD   (vRecur),hl   
09F3   C3 FB 0A               JP   go1   ; execute de
09F6                             ; /br break from loop
09F6                             ; --
09F6                BREAK:       
09F6   E1                     POP   hl   ; hl = condition, break if false
09F7   7D                     LD   a,l   
09F8   B4                     OR   h   
09F9   28 02                  JR   z,break1   
09FB   DD E9                  JP   (ix)   
09FD                BREAK1:      
09FD   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09FF   FD 54                  LD   d,iyh   
0A01   21 08 00               LD   hl,8   
0A04   19                     ADD   hl,de   
0A05   23                     INC   hl   
0A06   23                     INC   hl   
0A07   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0A0A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0A0D   C3 89 09               JP   blockEnd   
0A10                TICK:        
0A10                CHAR:        
0A10   21 00 00               LD   hl,0   ; if "" is empty or null
0A13                CHAR1:       
0A13   03                     INC   bc   ; point to next char
0A14   0A                     LD   a,(bc)   
0A15   FE 27                  CP   "'"   ; ' is the terminator
0A17   28 09                  JR   z,char3   
0A19   FE 5C                  CP   $5c   ; \ is the escape
0A1B   20 02                  JR   nz,char2   
0A1D   03                     INC   bc   
0A1E   0A                     LD   a,(bc)   
0A1F                CHAR2:       
0A1F   6F                     LD   l,a   
0A20   18 F1                  JR   char1   
0A22                CHAR3:       
0A22   E5                     PUSH   hl   
0A23   DD E9                  JP   (ix)   
0A25                DIV:         
0A25   D1                     POP   de   
0A26   E1                     POP   hl   
0A27   C5                     PUSH   bc   ; preserve the IP
0A28   44 4D                  LD   bc,hl   
0A2A   CD D4 0A               CALL   divide   
0A2D   EB                     EX   de,hl   
0A2E   ED 53 F8 54            LD   (vRemain),de   
0A32   C1                     POP   bc   
0A33   C3 13 02               JP   add3   
0A36                             ; /bd buffer decimal
0A36                             ; value --
0A36                BUFFERDEC:      
0A36   ED 5B EC 54            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0A3A   D9                     EXX      
0A3B   E1                     POP   hl   ; hl = value
0A3C   CD 50 0A               CALL   bufferDec0   
0A3F   D9                     EXX      ; de = buffer*' bc = IP
0A40   3E 20                  LD   a," "   ; append space to buffer
0A42   12                     LD   (de),a   
0A43   1C                     INC   e   ; buffer*++, wraparound
0A44   CC E4 0D               CALL   z,flushBuffer   
0A47   2A EC 54               LD   hl,(vBufPtr)   ; hl = buffer*
0A4A   ED 53 EC 54            LD   (vBufPtr),de   ; update buffer* with buffer*'
0A4E   DD E9                  JP   (ix)   
0A50                             ; hl = value
0A50                             ; de' = buffer*
0A50                             ; a, bc, de, hl destroyed
0A50                BUFFERDEC0:      
0A50   CB 7C                  BIT   7,h   
0A52   28 0C                  JR   z,bufferDec1   
0A54   D9                     EXX      
0A55   3E 2D                  LD   a,"-"   
0A57   12                     LD   (de),a   
0A58   13                     INC   de   
0A59   D9                     EXX      
0A5A   AF                     XOR   a   
0A5B   95                     SUB   l   
0A5C   6F                     LD   l,a   
0A5D   9F                     SBC   a,a   
0A5E   94                     SUB   h   
0A5F   67                     LD   h,a   
0A60                BUFFERDEC1:      
0A60   0E 00                  LD   c,0   ; leading zeros flag = false
0A62   11 F0 D8               LD   de,-10000   
0A65   CD 80 0A               CALL   bufferDec2   
0A68   11 18 FC               LD   de,-1000   
0A6B   CD 80 0A               CALL   bufferDec2   
0A6E   11 9C FF               LD   de,-100   
0A71   CD 80 0A               CALL   bufferDec2   
0A74   1E F6                  LD   e,-10   
0A76   CD 80 0A               CALL   bufferDec2   
0A79   0C                     INC   c   ; flag = true for at least digit
0A7A   1E FF                  LD   e,-1   
0A7C   CD 80 0A               CALL   bufferDec2   
0A7F   C9                     RET      
0A80                BUFFERDEC2:      
0A80   06 2F                  LD   b,"0"-1   
0A82                BUFFERDEC3:      
0A82   04                     INC   b   
0A83   19                     ADD   hl,de   
0A84   38 FC                  JR   c,bufferDec3   
0A86   ED 52                  SBC   hl,de   
0A88   3E 30                  LD   a,"0"   
0A8A   B8                     CP   b   
0A8B   20 05                  JR   nz,bufferDec4   
0A8D   AF                     XOR   a   
0A8E   B1                     OR   c   
0A8F   C8                     RET   z   
0A90   18 01                  JR   bufferDec5   
0A92                BUFFERDEC4:      
0A92   0C                     INC   c   
0A93                BUFFERDEC5:      
0A93   78                     LD   a,b   
0A94   D9                     EXX      
0A95   12                     LD   (de),a   
0A96   1C                     INC   e   
0A97   CC E4 0D               CALL   z,flushBuffer   
0A9A   D9                     EXX      
0A9B   C9                     RET      
0A9C                             ; /bh buffer hex
0A9C                             ; value --
0A9C                BUFFERHEX:      
0A9C   E1                     POP   hl   ; hl = value
0A9D   ED 5B EC 54            LD   de,(vBufPtr)   
0AA1   3E 24                  LD   a,"$"   ; # prefix
0AA3   12                     LD   (de),a   
0AA4   1C                     INC   e   ; buffer*++, wraparound
0AA5   CC E4 0D               CALL   z,flushBuffer   
0AA8   7C                     LD   a,h   
0AA9   CD BD 0A               CALL   bufferHex1   
0AAC   7D                     LD   a,l   
0AAD   CD BD 0A               CALL   bufferHex1   
0AB0   3E 20                  LD   a," "   ; append space to buffer
0AB2   12                     LD   (de),a   
0AB3   1C                     INC   e   ; buffer*++, wraparound
0AB4   CC E4 0D               CALL   z,flushBuffer   
0AB7   ED 53 EC 54            LD   (vBufPtr),de   
0ABB   DD E9                  JP   (ix)   
0ABD                BUFFERHEX1:      
0ABD   F5                     PUSH   af   
0ABE   1F                     RRA      
0ABF   1F                     RRA      
0AC0   1F                     RRA      
0AC1   1F                     RRA      
0AC2   CD C6 0A               CALL   bufferHex2   
0AC5   F1                     POP   af   
0AC6                BUFFERHEX2:      
0AC6   E6 0F                  AND   0x0F   
0AC8   C6 90                  ADD   a,0x90   
0ACA   27                     DAA      
0ACB   CE 40                  ADC   a,0x40   
0ACD   27                     DAA      
0ACE   12                     LD   (de),a   
0ACF   1C                     INC   e   ; buffer*++, wraparound
0AD0   CC E4 0D               CALL   z,flushBuffer   
0AD3   C9                     RET      
0AD4                             ; division subroutine.
0AD4                             ; bc: divisor, de: dividend, hl: remainder
0AD4                DIVIDE:      
0AD4   21 00 00               LD   hl,0   ; zero the remainder
0AD7   3E 10                  LD   a,16   ; loop counter
0AD9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0AD9   CB 21                  SLA   c   
0ADB   CB 10                  RL   b   
0ADD   ED 6A                  ADC   hl,hl   
0ADF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0AE1   38 03                  JR   c,divide2   
0AE3   0C                     INC   c   
0AE4   18 01                  JR   divide3   
0AE6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0AE6   19                     ADD   hl,de   
0AE7                DIVIDE3:      
0AE7   3D                     DEC   a   
0AE8   20 EF                  JR   nz,divide1   
0AEA   50 59                  LD   de,bc   ; result from bc to de
0AEC   C9                     RET      
0AED                FZ:          
0AED   21 00 52               LD   hl,STACK   
0AF0   ED 72                  SBC   hl,sp   
0AF2   CB 3C                  SRL   h   
0AF4   CB 1D                  RR   l   
0AF6   E5                     PUSH   hl   
0AF7   C3 C4 04               JP   dotNumber_   
0AFA                             ; execute a block of code which ends with }
0AFA                             ; creates a root scope if BP == stack
0AFA                             ; else uses outer scope
0AFA                CARET:       
0AFA                GO:          
0AFA   D1                     POP   de   ; de = block*
0AFB                GO1:         
0AFB   7B                     LD   a,e   ; if block* == null, exit
0AFC   B2                     OR   d   
0AFD   20 02                  JR   nz,go2   
0AFF   DD E9                  JP   (ix)   
0B01                GO2:         
0B01   1A                     LD   a,(de)   
0B02   FE 7B                  CP   "{"   
0B04   28 06                  JR   z,goBlock   
0B06   FE 28                  CP   "("   
0B08   C2 3F 0B               JP   nz,goFunc   
0B0B   D5                     PUSH   de   ; push de just before stack frame
0B0C                GOBLOCK:      
0B0C   ED 53 02 55            LD   (vTemp1),de   ; save de
0B10   21 00 52               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B13   FD 54                  LD   d,iyh   
0B15   FD 5D                  LD   e,iyl   
0B17   B7                     OR   a   ; if stack* == BP then this is the root_scope
0B18   ED 52                  SBC   hl,de   
0B1A   ED 5B 02 55            LD   de,(vTemp1)   ; restore de
0B1E   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0B1F   B4                     OR   h   
0B20   3E 00                  LD   a,0   
0B22   28 6A                  JR   z,goFunc8   
0B24   C5                     PUSH   bc   ; push IP
0B25   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B28   FD 46 05               LD   b,(iy+5)   
0B2B   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0B2E   FD 66 03               LD   h,(iy+3)   
0B31                GOBLOCK2:      
0B31   C5                     PUSH   bc   ; arg_list*
0B32   E5                     PUSH   hl   ; first_arg*
0B33   FD E5                  PUSH   iy   ; push BP
0B35   FD 21 00 00            LD   iy,0   ; BP = SP
0B39   FD 39                  ADD   iy,sp   
0B3B                GOBLOCK3:      
0B3B   42 4B                  LD   bc,de   ; bc = de = block*-1
0B3D   DD E9                  JP   (ix)   
0B3F                GOFUNC:      ; execute func
0B3F   EB                     EX   de,hl   ; hl = func*
0B40   5E                     LD   e,(hl)   ; de = partial_array*
0B41   23                     INC   hl   
0B42   56                     LD   d,(hl)   
0B43   23                     INC   hl   
0B44   7B                     LD   a,e   ; if partial_array* == null skip
0B45   B2                     OR   d   
0B46   28 21                  JR   z,goFunc3   
0B48   ED 43 02 55            LD   (vTemp1),bc   
0B4C   22 04 55               LD   (vTemp2),hl   ; save bc,hl
0B4F   EB                     EX   de,hl   ; hl = partial_array*
0B50   2B                     DEC   hl   ; bc = count
0B51   46                     LD   b,(hl)   
0B52   2B                     DEC   hl   
0B53   4E                     LD   c,(hl)   
0B54   23                     INC   hl   ; hl = array data*
0B55   23                     INC   hl   
0B56   18 06                  JR   goFunc2   ; push each item on stack
0B58                GOFUNC1:      
0B58   5E                     LD   e,(hl)   ; de = partial item
0B59   23                     INC   hl   
0B5A   56                     LD   d,(hl)   
0B5B   23                     INC   hl   
0B5C   D5                     PUSH   de   ; push on stack
0B5D   0B                     DEC   bc   
0B5E                GOFUNC2:      
0B5E   79                     LD   a,c   ; if count != 0 then loop
0B5F   B0                     OR   b   
0B60   20 F6                  JR   nz,goFunc1   
0B62   ED 4B 02 55            LD   bc,(vTemp1)   ; restore bc
0B66   2A 04 55               LD   hl,(vTemp2)   ; restore hl
0B69                GOFUNC3:      
0B69   5E                     LD   e,(hl)   ; de = block*
0B6A   23                     INC   hl   
0B6B   56                     LD   d,(hl)   
0B6C   23                     INC   hl   
0B6D   ED 53 02 55            LD   (vTemp1),de   ; save block*
0B71   5E                     LD   e,(hl)   ; de = arg_list*
0B72   23                     INC   hl   
0B73   56                     LD   d,(hl)   
0B74   23                     INC   hl   
0B75   EB                     EX   de,hl   ; hl = arg_list*
0B76   ED 5B 02 55            LD   de,(vTemp1)   ; restore de = block*
0B7A   7D                     LD   a,l   ; if arg_list* == null a = 0
0B7B   B4                     OR   h   
0B7C   20 03                  JR   nz,goFunc4   
0B7E   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0B7F   18 0D                  JR   goFunc8   
0B81                GOFUNC4:      ; allocate locals
0B81   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0B82   18 03                  JR   goFunc6   
0B84                GOFUNC5:      ; loop
0B84   3B                     DEC   sp   
0B85   3B                     DEC   sp   
0B86   3D                     DEC   a   
0B87                GOFUNC6:      
0B87   B7                     OR   a   
0B88   20 FA                  JR   nz,goFunc5   ; end loop
0B8A                GOFUNC7:      
0B8A   23                     INC   hl   ; a = num_args* x 2
0B8B   7E                     LD   a,(hl)   
0B8C   2B                     DEC   hl   
0B8D   87                     ADD   a,a   ; a *= 2
0B8E                GOFUNC8:      
0B8E   C5                     PUSH   bc   ; push IP
0B8F   44 4D                  LD   bc,hl   
0B91   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0B94   85                     ADD   a,l   
0B95   6F                     LD   l,a   
0B96   39                     ADD   hl,sp   
0B97   18 98                  JR   goBlock2   
0B99                DOLLAR:      
0B99                HEXNUM:      
0B99   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B9C                HEXNUM1:      
0B9C   03                     INC   bc   
0B9D   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B9E   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BA0   28 02                  JR   z,hexnum2   ; no a decimal
0BA2   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BA4                HEXNUM2:      
0BA4   D6 30                  SUB   $30   ; form decimal digit
0BA6   DA 36 0C               JP   c,num2   
0BA9   FE 10                  CP   $0F+1   
0BAB   D2 36 0C               JP   nc,num2   
0BAE   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BAF   29                     ADD   hl,hl   ; 4X
0BB0   29                     ADD   hl,hl   ; 8X
0BB1   29                     ADD   hl,hl   ; 16X
0BB2   85                     ADD   a,l   ; add into bottom of hl
0BB3   6F                     LD   l,a   
0BB4   18 E6                  JR   hexnum1   
0BB6                UPCASE:      
0BB6   0A                     LD   a,(bc)   ; a = identifier char
0BB7   D6 41                  SUB   "A"   ; "A" = 0
0BB9   18 05                  JR   ident1   
0BBB                LOWCASE:      
0BBB   0A                     LD   a,(bc)   
0BBC   D6 61                  SUB   "a"   
0BBE   C6 1A                  ADD   a,26   
0BC0                IDENT1:      
0BC0   87                     ADD   a,a   ; l = a * 2
0BC1   6F                     LD   l,a   
0BC2   26 54                  LD   h,msb(vars)   
0BC4   22 F6 54               LD   (vPointer),hl   ; store address in setter
0BC7   5E                     LD   e,(hl)   
0BC8   23                     INC   hl   
0BC9   56                     LD   d,(hl)   
0BCA   D5                     PUSH   de   
0BCB   DD E9                  JP   (ix)   
0BCD                             ; if
0BCD                             ; condition then -- value
0BCD                QUESTION:      
0BCD                IF:          
0BCD   03                     INC   bc   
0BCE   0A                     LD   a,(bc)   
0BCF   FE 3F                  CP   "?"   
0BD1   28 06                  JR   z,ifte   
0BD3   0B                     DEC   bc   
0BD4   11 00 00               LD   de,NUL   ; NUL pointer for else
0BD7   18 01                  JR   ifte1   
0BD9                             ; ifte
0BD9                             ; condition then else -- value
0BD9                IFTE:        
0BD9   D1                     POP   de   ; de = else
0BDA                IFTE1:       
0BDA   E1                     POP   hl   ; hl = then
0BDB   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BDC   7C                     LD   a,h   
0BDD   B5                     OR   l   
0BDE   E1                     POP   hl   ; hl = then
0BDF   CA FB 0A               JP   z,go1   ; if z de = else
0BE2   EB                     EX   de,hl   ; condition = false, de = then
0BE3   C3 FB 0A               JP   go1   
0BE6                KEY:         
0BE6   CD 81 00               CALL   getchar   
0BE9   26 00                  LD   h,0   
0BEB   6F                     LD   l,a   
0BEC   E5                     PUSH   hl   
0BED   DD E9                  JP   (ix)   
0BEF                             ; Z80 port output
0BEF                             ; value port --
0BEF                OUTPUT:      
0BEF   E1                     POP   hl   
0BF0   59                     LD   e,c   ; save IP
0BF1   4D                     LD   c,l   
0BF2   E1                     POP   hl   
0BF3   ED 69                  OUT   (c),l   
0BF5   4B                     LD   c,e   ; restore IP
0BF6   DD E9                  JP   (ix)   
0BF8                STAR:        
0BF8                MUL:         
0BF8   D1                     POP   de   ; get first value
0BF9   E1                     POP   hl   
0BFA                MUL2:        
0BFA   C5                     PUSH   bc   ; Preserve the IP
0BFB   44 4D                  LD   bc,hl   ; bc = 2nd value
0BFD   21 00 00               LD   hl,0   
0C00   3E 10                  LD   a,16   
0C02                MUL3:        
0C02   29                     ADD   hl,hl   
0C03   CB 13                  RL   e   
0C05   CB 12                  RL   d   
0C07   30 04                  JR   nc,$+6   
0C09   09                     ADD   hl,bc   
0C0A   30 01                  JR   nc,$+3   
0C0C   13                     INC   de   
0C0D   3D                     DEC   a   
0C0E   20 F2                  JR   nz,mul3   
0C10   C1                     POP   bc   ; Restore the IP
0C11   C3 13 02               JP   add3   
0C14                NUM:         
0C14   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C17   0A                     LD   a,(bc)   ; Get numeral or -
0C18   FE 2D                  CP   "-"   
0C1A   20 01                  JR   nz,num0   
0C1C   03                     INC   bc   ; move to next char, no flags affected
0C1D                NUM0:        
0C1D   08                     EX   af,af'   ; save zero flag = 0 for later
0C1E                NUM1:        
0C1E   0A                     LD   a,(bc)   ; read digit
0C1F   D6 30                  SUB   "0"   ; less than 0?
0C21   38 13                  JR   c,num2   ; not a digit, exit loop
0C23   FE 0A                  CP   10   ; greater that 9?
0C25   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C27   03                     INC   bc   ; inc IP
0C28   54 5D                  LD   de,hl   ; multiply hl * 10
0C2A   29                     ADD   hl,hl   
0C2B   29                     ADD   hl,hl   
0C2C   19                     ADD   hl,de   
0C2D   29                     ADD   hl,hl   
0C2E   85                     ADD   a,l   ; add digit in a to hl
0C2F   6F                     LD   l,a   
0C30   3E 00                  LD   a,0   
0C32   8C                     ADC   a,h   
0C33   67                     LD   h,a   
0C34   18 E8                  JR   num1   
0C36                NUM2:        
0C36   0B                     DEC   bc   
0C37   08                     EX   af,af'   ; restore zero flag
0C38   20 07                  JR   nz,num3   
0C3A   EB                     EX   de,hl   ; negate the value of hl
0C3B   21 00 00               LD   hl,0   
0C3E   B7                     OR   a   ; jump to sub2
0C3F   ED 52                  SBC   hl,de   
0C41                NUM3:        
0C41   E5                     PUSH   hl   ; Put the number on the stack
0C42   DD E9                  JP   (ix)   ; and process the next character
0C44                RPAREN:      
0C44   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0C47   FD 46 09               LD   b,(iy+9)   
0C4A   DD E9                  JP   (ix)   
0C4C                             ; shiftLeft
0C4C                             ; value count -- value2          shift left count places
0C4C                SHIFTLEFT:      
0C4C   50 59                  LD   de,bc   ; save IP
0C4E   C1                     POP   bc   ; bc = count
0C4F   41                     LD   b,c   ; b = loop counter
0C50   E1                     POP   hl   
0C51   04                     INC   b   ; test for counter=0 case
0C52   18 01                  JR   shiftLeft2   
0C54                SHIFTLEFT1:      
0C54   29                     ADD   hl,hl   ; left shift hl
0C55                SHIFTLEFT2:      
0C55   10 FD                  DJNZ   shiftLeft1   
0C57   E5                     PUSH   hl   
0C58   42 4B                  LD   bc,de   ; restore IP
0C5A   DD E9                  JP   (ix)   
0C5C                             ; shiftRight
0C5C                             ; value count -- value2          shift left count places
0C5C                SHIFTRIGHT:      
0C5C   50 59                  LD   de,bc   ; save IP
0C5E   C1                     POP   bc   ; bc = count
0C5F   41                     LD   b,c   ; b = loop counter
0C60   E1                     POP   hl   
0C61   04                     INC   b   ; test for counter=0 case
0C62   18 04                  JR   shiftRight2   
0C64                SHIFTRIGHT1:      
0C64   CB 3C                  SRL   h   ; right shift hl
0C66   CB 1D                  RR   l   
0C68                SHIFTRIGHT2:      
0C68   10 FA                  DJNZ   shiftRight1   
0C6A   E5                     PUSH   hl   
0C6B   42 4B                  LD   bc,de   ; restore IP
0C6D   DD E9                  JP   (ix)   
0C6F                             ; string
0C6F                             ; -- ptr                        ; points to start of string chars,
0C6F                             ; length is stored at start - 2 bytes
0C6F                DQUOTE:      
0C6F                STRING:      
0C6F   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
0C72   23                     INC   hl   ; skip length field to start
0C73   23                     INC   hl   
0C74   E5                     PUSH   hl   ; save start of string
0C75   03                     INC   bc   ; point to next char
0C76   18 03                  JR   string2   
0C78                STRING1:      
0C78   77                     LD   (hl),a   
0C79   23                     INC   hl   ; increase count
0C7A   03                     INC   bc   ; point to next char
0C7B                STRING2:      
0C7B   0A                     LD   a,(bc)   
0C7C   FE 22                  CP   DQ   ; " is the string terminator
0C7E   28 04                  JR   z,string3   
0C80   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C82   20 F4                  JR   nz,string1   
0C84                STRING3:      
0C84   AF                     XOR   a   ; write NUL to terminate string
0C85   77                     LD   (hl),a   ; hl = end of string
0C86   23                     INC   hl   
0C87   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C8A   2B                     DEC   hl   ; hl = end of string without terminator
0C8B   D1                     POP   de   ; de = start of string
0C8C   D5                     PUSH   de   ; return start of string
0C8D   B7                     OR   a   ; hl = length bytes, de = start of string
0C8E   ED 52                  SBC   hl,de   
0C90   EB                     EX   de,hl   
0C91   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C92   72                     LD   (hl),d   
0C93   2B                     DEC   hl   
0C94   73                     LD   (hl),e   
0C95   DD E9                  JP   (ix)   
0C97                PRINTCHARS1:      
0C97   1A                     LD   a,(de)   ; print char at char*
0C98   CD 85 00               CALL   putchar   
0C9B   13                     INC   de   ; char*++
0C9C   2B                     DEC   hl   ; count--
0C9D                PRINTCHARS2:      
0C9D   7D                     LD   a,l   ; count == 0?
0C9E   B4                     OR   h   
0C9F   C8                     RET   z   
0CA0   18 F5                  JR   printChars1   ; if not loop
0CA2                             ; 
0CA2                             ;*******************************************************************
0CA2                             ; general routines
0CA2                             ;*******************************************************************
0CA2                             ; arg_list - parses arg_list e.g. ab:c
0CA2                             ; -- arg_list*
0CA2                PARSEARGS:      
0CA2   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CA5   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
0CA8   E5                     PUSH   hl   ; save start of arg_list
0CA9   23                     INC   hl   ; skip length fields to start of string
0CAA   23                     INC   hl   
0CAB   03                     INC   bc   ; point to next char
0CAC                PARSEARGS1:      
0CAC   0A                     LD   a,(bc)   
0CAD   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CAF   20 03                  JR   nz,parseArgs1a   
0CB1   14                     INC   d   ; non zero value local count acts as flag
0CB2   18 10                  JR   parseArgs3   
0CB4                PARSEARGS1A:      
0CB4   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CB6   38 0F                  JR   c,parseArgs4   
0CB8   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CBA   30 0B                  JR   nc,parseArgs4   
0CBC                PARSEARGS2:      
0CBC   77                     LD   (hl),a   
0CBD   23                     INC   hl   
0CBE   1C                     INC   e   ; increase arg count
0CBF   AF                     XOR   a   
0CC0   B2                     OR   d   
0CC1   28 01                  JR   z,parseArgs3   
0CC3   14                     INC   d   ; if d > 0 increase local count
0CC4                PARSEARGS3:      
0CC4   03                     INC   bc   ; point to next char
0CC5   18 E5                  JR   parseArgs1   
0CC7                PARSEARGS4:      
0CC7   0B                     DEC   bc   
0CC8   AF                     XOR   a   
0CC9   B2                     OR   d   
0CCA   28 01                  JR   z,parseArgs5   
0CCC   15                     DEC   d   ; remove initial inc
0CCD                PARSEARGS5:      
0CCD   23                     INC   hl   
0CCE   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CD1   E1                     POP   hl   ; hl = start of arg_list
0CD2   72                     LD   (hl),d   ; write number of locals at start - 1
0CD3   23                     INC   hl   
0CD4   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CD5   2B                     DEC   hl   
0CD6   E3                     EX   (sp),hl   
0CD7   E9                     JP   (hl)   
0CD8                             ; create block: parses block e.g. 00bbIC4uLi4g
0CD8                             ; -- block*
0CD8                PARSEBLOCK:      
0CD8   C5                     PUSH   bc   ; return pointer to first { of block
0CD9   03                     INC   bc   
0CDA   16 01                  LD   d,1   ; nesting: count first parenthesis
0CDC                PARSEBLOCK1:      ; Skip to end of definition
0CDC   0A                     LD   a,(bc)   ; Get the next character
0CDD   03                     INC   bc   ; Point to next character
0CDE   FE 21                  CP   " " + 1   ; ignore whitespace
0CE0   38 FA                  JR   c,parseBlock1   
0CE2   FE 29                  CP   ")"   
0CE4   28 2D                  JR   z,parseBlock4   
0CE6   FE 7D                  CP   "}"   
0CE8   28 29                  JR   z,parseBlock4   
0CEA   FE 5D                  CP   "]"   
0CEC   28 25                  JR   z,parseBlock4   
0CEE   FE 28                  CP   "("   
0CF0   28 16                  JR   z,parseBlock2   
0CF2   FE 7B                  CP   "{"   
0CF4   28 12                  JR   z,parseBlock2   
0CF6   FE 5B                  CP   "["   
0CF8   28 0E                  JR   z,parseBlock2   
0CFA   FE 27                  CP   "'"   
0CFC   28 0D                  JR   z,parseBlock3   
0CFE   FE 60                  CP   "`"   
0D00   28 09                  JR   z,parseBlock3   
0D02   FE 22                  CP   DQ   
0D04   28 05                  JR   z,parseBlock3   
0D06   18 D4                  JR   parseBlock1   
0D08                PARSEBLOCK2:      
0D08   14                     INC   d   
0D09   18 D1                  JR   parseBlock1   
0D0B                PARSEBLOCK3:      
0D0B   3E 80                  LD   a,$80   
0D0D   AA                     XOR   d   
0D0E   57                     LD   d,a   
0D0F   20 CB                  JR   nz,parseBlock1   
0D11   18 03                  JR   parseBlock5   
0D13                PARSEBLOCK4:      
0D13   15                     DEC   d   
0D14   20 C6                  JR   nz,parseBlock1   ; get the next element
0D16                PARSEBLOCK5:      
0D16   60 69                  LD   hl,bc   ; hl = IP
0D18   11 20 55               LD   de,HEAP   ; is IP pointing to object in heap
0D1B   B7                     OR   a   ; IP - HEAP
0D1C   ED 52                  SBC   hl,de   
0D1E   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D20   28 1C                  JR   z,parseBlock6   
0D22   60 69                  LD   hl,bc   ; hl = IP
0D24   D1                     POP   de   ; de = block*
0D25   ED 43 02 55            LD   (vTemp1),bc   ; save IP
0D29   B7                     OR   a   ; bc = size
0D2A   ED 52                  SBC   hl,de   
0D2C   44 4D                  LD   bc,hl   
0D2E   EB                     EX   de,hl   ; hl = block* de = heap*
0D2F   ED 5B F0 54            LD   de,(vHeapPtr)   
0D33   D5                     PUSH   de   ; return hblock*
0D34   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D36   ED 53 F0 54            LD   (vHeapPtr),de   ; heap* += size
0D3A   ED 4B 02 55            LD   bc,(vTemp1)   ; restore IP
0D3E                PARSEBLOCK6:      
0D3E   0B                     DEC   bc   ; balanced, exit
0D3F   E1                     POP   hl   ; hl = block*
0D40   E3                     EX   (sp),hl   ; return to caller
0D41   E9                     JP   (hl)   
0D42                             ; create function
0D42                             ; arg_list* block* -- func*
0D42                CREATEFUNC:      
0D42   E1                     POP   hl   ; save retrn address
0D43   22 06 55               LD   (vTemp3),hl   
0D46   ED 43 02 55            LD   (vTemp1),bc   ; save IP
0D4A   E1                     POP   hl   ; hl = block*
0D4B   22 04 55               LD   (vTemp2),hl   ; save block*
0D4E   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D51   FD 56 05               LD   d,(iy+5)   
0D54   7B                     LD   a,e   ; if arg_list == null then make a func
0D55   B2                     OR   d   
0D56   20 09                  JR   nz,createFunc0   
0D58   21 00 00               LD   hl,0   ; partial_array = null
0D5B   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
0D5F   18 65                  JR   createFunc5   
0D61                CREATEFUNC0:      
0D61   E1                     POP   hl   ; hl = inner_arg_list*
0D62   E5                     PUSH   hl   ; save inner_arg_list
0D63   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
0D67   7E                     LD   a,(hl)   ; compile inner_num_locals
0D68   4F                     LD   c,a   ; b = inner_num_locals
0D69   12                     LD   (de),a   
0D6A   23                     INC   hl   
0D6B   13                     INC   de   
0D6C   7E                     LD   a,(hl)   ; compile inner_length
0D6D   12                     LD   (de),a   
0D6E   91                     SUB   c   ; a = inner_num args
0D6F   23                     INC   hl   
0D70   13                     INC   de   
0D71   B7                     OR   a   ; compile args if inner_length > 0
0D72   28 05                  JR   z,createFunc1   
0D74   4F                     LD   c,a   ; bc = a
0D75   06 00                  LD   b,0   
0D77   ED B0                  LDIR      
0D79                CREATEFUNC1:      
0D79   EB                     EX   de,hl   ; hl = outer_arg_list
0D7A   FD 5E 04               LD   e,(iy+4)   
0D7D   FD 56 05               LD   d,(iy+5)   
0D80   EB                     EX   de,hl   
0D81   23                     INC   hl   ; a = outer_length
0D82   7E                     LD   a,(hl)   
0D83   23                     INC   hl   
0D84   B7                     OR   a   
0D85   28 05                  JR   z,createFunc2   
0D87   4F                     LD   c,a   
0D88   06 00                  LD   b,0   
0D8A   ED B0                  LDIR      ; append outer_args
0D8C                CREATEFUNC2:      ; a = outer_length
0D8C   47                     LD   b,a   ; b = a = outer_length
0D8D   2A F0 54               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0D90   23                     INC   hl   
0D91   7E                     LD   a,(hl)   ; add outer_length to new length
0D92   80                     ADD   a,b   
0D93   77                     LD   (hl),a   
0D94   2B                     DEC   hl   
0D95   78                     LD   a,b   ; save outer_length in a'
0D96   08                     EX   af,af'   
0D97   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0D98   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0D99   B7                     OR   a   
0D9A   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0D9C   4F                     LD   c,a   ; c = inner_num_locals
0D9D   06 00                  LD   b,0   ; bc = inner_num_locals
0D9F   23                     INC   hl   ; a = inner_length
0DA0   7E                     LD   a,(hl)   
0DA1   91                     SUB   c   ; a = inner_num_args
0DA2   23                     INC   hl   ; hl = inner_arg_chars
0DA3   85                     ADD   a,l   ; hl += a
0DA4   6F                     LD   l,a   
0DA5   3E 00                  LD   a,0   
0DA7   84                     ADD   a,h   
0DA8   67                     LD   h,a   
0DA9   ED B0                  LDIR      ; append inner_locals
0DAB                CREATEFUNC2A:      
0DAB   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DAC   12                     LD   (de),a   ; compile partial_array length field
0DAD   13                     INC   de   
0DAE   AF                     XOR   a   
0DAF   12                     LD   (de),a   
0DB0   13                     INC   de   
0DB1   D5                     PUSH   de   ; push partial_array*
0DB2   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DB3   FD 5E 02               LD   e,(iy+2)   
0DB6   FD 56 03               LD   d,(iy+3)   
0DB9   EB                     EX   de,hl   
0DBA                CREATEFUNC3:      
0DBA   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DBB   4E                     LD   c,(hl)   
0DBC   2B                     DEC   hl   
0DBD   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DBE   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DBF   13                     INC   de   
0DC0   79                     LD   a,c   
0DC1   12                     LD   (de),a   
0DC2   13                     INC   de   
0DC3   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DC5                CREATEFUNC4:      
0DC5   E1                     POP   hl   ; hl = partial_array*
0DC6                CREATEFUNC5:      
0DC6   C1                     POP   bc   ; bc = new_arg_list*
0DC7   D5                     PUSH   de   ; return new func*
0DC8   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DC9   73                     LD   (hl),e   ; compile partial_array* to func
0DCA   23                     INC   hl   
0DCB   72                     LD   (hl),d   
0DCC   23                     INC   hl   
0DCD   ED 5B 04 55            LD   de,(vTemp2)   ; de = block*
0DD1   73                     LD   (hl),e   ; compile block* to func
0DD2   23                     INC   hl   
0DD3   72                     LD   (hl),d   
0DD4   23                     INC   hl   
0DD5   71                     LD   (hl),c   ; compile new_arg_list* to func
0DD6   23                     INC   hl   
0DD7   70                     LD   (hl),b   
0DD8   23                     INC   hl   
0DD9   22 F0 54               LD   (vHeapPtr),hl   ; bump heap ptr
0DDC   ED 4B 02 55            LD   bc,(vTemp1)   ; restore IP
0DE0   2A 06 55               LD   hl,(vTemp3)   ; jump to return address
0DE3   E9                     JP   (hl)   
0DE4                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DE4                FLUSHBUFFER:      
0DE4   F5                     PUSH   af   
0DE5   D5                     PUSH   de   
0DE6   E5                     PUSH   hl   
0DE7   2A EC 54               LD   hl,(vBufPtr)   
0DEA   11 00 53               LD   de,BUF   
0DED   ED 53 EC 54            LD   (vBufPtr),de   
0DF1   B7                     OR   a   
0DF2   ED 52                  SBC   hl,de   
0DF4   CD 9D 0C               CALL   printChars2   
0DF7   E1                     POP   hl   
0DF8   D1                     POP   de   
0DF9   F1                     POP   af   
0DFA   C9                     RET      
0DFB                COMMANDTABLE:      
0DFB   03                     INC   bc   
0DFC   0A                     LD   a,(bc)   
0DFD   FE 7B                  CP   "z"+1   
0DFF   30 09                  JR   nc,commandTable2   
0E01   D6 61                  SUB   "a"   
0E03   38 05                  JR   c,commandTable2   
0E05                COMMANDTABLE1:      
0E05   E1                     POP   hl   
0E06   85                     ADD   a,l   
0E07   6F                     LD   l,a   
0E08   6E                     LD   l,(hl)   ; must have the same msb as the table
0E09   E9                     JP   (hl)   
0E0A                COMMANDTABLE2:      
0E0A   3E 1A                  LD   a,26   
0E0C   0B                     DEC   bc   
0E0D   18 F6                  JR   commandTable1   
0E0F                             ; followed by a table
0E0F                             ; db char
0E0F                             ; db lsb(addr)
0E0F                             ; the final item must have char == NUL
0E0F                JUMPTABLE:      
0E0F   E1                     POP   hl   
0E10   03                     INC   bc   
0E11                JUMPTABLE0:      
0E11   AF                     XOR   a   
0E12   BE                     CP   (hl)   
0E13   28 0B                  JR   z,jumpTable2   
0E15   0A                     LD   a,(bc)   
0E16   BE                     CP   (hl)   
0E17   28 04                  JR   z,jumpTable1   
0E19   23                     INC   hl   
0E1A   23                     INC   hl   
0E1B   18 F4                  JR   jumpTable0   
0E1D                JUMPTABLE1:      
0E1D   23                     INC   hl   
0E1E   6E                     LD   l,(hl)   ; must have the same msb as the table
0E1F   E9                     JP   (hl)   
0E20                JUMPTABLE2:      
0E20   0B                     DEC   bc   
0E21   23                     INC   hl   
0E22   E9                     JP   (hl)   
0E23                PRTSTR0:      
0E23   CD 85 00               CALL   putchar   
0E26   23                     INC   hl   
0E27                PRTSTR:      
0E27   7E                     LD   a,(hl)   
0E28   B7                     OR   a   
0E29   20 F8                  JR   nz,prtstr0   
0E2B   C9                     RET      
0E2C                             ; **************************************************************************
0E2C                             ; calculate nesting value
0E2C                             ; a is char to be tested,
0E2C                             ; e is the nesting value (initially 0)
0E2C                             ; e is increased by ( and [
0E2C                             ; e is decreased by ) and ]
0E2C                             ; e has its bit 7 toggled by `
0E2C                             ; limited to 127 levels
0E2C                             ; **************************************************************************
0E2C                NESTING:      
0E2C   FE 22                  CP   DQ   ; quote char
0E2E   28 06                  JR   z,nesting0   
0E30   FE 60                  CP   "`"   ; quote char
0E32   28 02                  JR   z,nesting0   
0E34   18 0A                  JR   nesting1   
0E36                NESTING0:      
0E36   CB 7B                  BIT   7,e   
0E38   28 03                  JR   z,nesting1a   
0E3A   CB BB                  RES   7,e   
0E3C   C9                     RET      
0E3D                NESTING1A:      
0E3D   CB FB                  SET   7,e   
0E3F   C9                     RET      
0E40                NESTING1:      
0E40   CB 7B                  BIT   7,e   
0E42   C0                     RET   nz   
0E43   FE 7B                  CP   "{"   
0E45   28 08                  JR   z,nesting2   
0E47   FE 5B                  CP   "["   
0E49   28 04                  JR   z,nesting2   
0E4B   FE 28                  CP   "("   
0E4D   20 02                  JR   nz,nesting3   
0E4F                NESTING2:      
0E4F   1C                     INC   e   
0E50   C9                     RET      
0E51                NESTING3:      
0E51   FE 7D                  CP   "}"   
0E53   28 07                  JR   z,nesting4   
0E55   FE 5D                  CP   "]"   
0E57   28 03                  JR   z,nesting4   
0E59   FE 29                  CP   ")"   
0E5B   C0                     RET   nz   
0E5C                NESTING4:      
0E5C   1D                     DEC   e   
0E5D   C9                     RET      
0E5E                PROMPT:      
0E5E   CD 6E 0E               CALL   printStr   
0E61   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E66   C9                     RET      
0E67                CRLF:        
0E67   CD 6E 0E               CALL   printStr   
0E6A   0D 0A 00               .CSTR   "\r\n"   
0E6D   C9                     RET      
0E6E                             ; prints a null teminated string
0E6E                             ; the string should be immediately following the call
0E6E                PRINTSTR:      
0E6E   E3                     EX   (sp),hl   ; swap			
0E6F   CD 27 0E               CALL   prtstr   
0E72   23                     INC   hl   ; inc past NUL
0E73   E3                     EX   (sp),hl   ; put it back	
0E74   C9                     RET      
0E75                INIT:        
0E75   21 F0 01               LD   hl,titleStr   
0E78   11 0C 55               LD   de,titleBuf   
0E7B   06 14                  LD   b,20   
0E7D                INIT1:       
0E7D   1A                     LD   a,(de)   
0E7E   BE                     CP   (hl)   
0E7F   20 17                  JR   nz,coldBoot0   
0E81   13                     INC   de   
0E82   23                     INC   hl   
0E83   10 F8                  DJNZ   init1   
0E85                WARMINIT:      
0E85   ED 4B FA 54            LD   bc,(vSavedIP)   ; restore IP
0E89   ED 7B FC 54            LD   sp,(vSavedSP)   ; restore SP
0E8D   DD 2A FE 54            LD   ix,(vSavedNext)   ; restore Next
0E91   FD 2A 00 55            LD   iy,(vSavedBP)   ; restore BP
0E95   C3 CF 0E               JP   start1   
0E98                COLDBOOT0:      
0E98   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E9B   11 0C 55               LD   de,titleBuf   
0E9E   06 14                  LD   b,20   
0EA0   ED B0                  LDIR      
0EA2                COLDINIT:      
0EA2   21 DE 01               LD   hl,isysVars   
0EA5   11 E6 54               LD   de,sysVars   
0EA8   01 10 00               LD   bc,8 * 2   
0EAB   ED B0                  LDIR      
0EAD   21 00 54               LD   hl,vars   ; 52 vars LO HI
0EB0   06 34                  LD   b,26*2   
0EB2   AF                     XOR   a   
0EB3                COLDBOOT1:      
0EB3   77                     LD   (hl),a   
0EB4   23                     INC   hl   
0EB5   10 FC                  DJNZ   coldBoot1   
0EB7   DD 2A EE 54            LD   ix,(vNext)   
0EBB   FD 21 00 52            LD   iy,STACK   
0EBF   C9                     RET      
0EC0                COLDSTART:      
0EC0   31 00 52               LD   sp,STACK   
0EC3   CD 98 0E               CALL   coldBoot0   
0EC6   C3 CF 0E               JP   start1   
0EC9                START:       
0EC9   31 00 52               LD   sp,STACK   ; start Monty
0ECC   CD 75 0E               CALL   init   ; setups
0ECF                START1:      
0ECF   21 0C 55               LD   hl,titleBuf   
0ED2   CD 27 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0ED5                INTERPRET:      
0ED5   CD E4 0D               CALL   flushBuffer   
0ED8   CD 5E 0E               CALL   prompt   
0EDB   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EDE   21 00 52               LD   hl,TIB   
0EE1   22 EA 54               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EE4                INTERPRET2:      ; calculate nesting
0EE4   1E 00                  LD   e,0   ; initilize nesting value
0EE6   C5                     PUSH   bc   ; save offset into TIB,
0EE7                             ; bc is also the count of chars in TIB
0EE7   21 00 52               LD   hl,TIB   ; hl is start of TIB
0EEA   18 0B                  JR   interpret4   
0EEC                INTERPRET3:      
0EEC   3E 33                  LD   a,"3"   
0EEE   CD 85 00               CALL   putchar   
0EF1   7E                     LD   a,(hl)   ; a = char in TIB
0EF2   23                     INC   hl   ; inc pointer into TIB
0EF3   0B                     DEC   bc   ; dec count of chars in TIB
0EF4   CD 2C 0E               CALL   nesting   ; update nesting value
0EF7                INTERPRET4:      
0EF7   79                     LD   a,c   ; is count zero?
0EF8   B0                     OR   b   
0EF9   20 F1                  JR   nz,interpret3   ; if not loop
0EFB   C1                     POP   bc   ; restore offset into TIB
0EFC                INTERPRET5:      
0EFC   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0EFF   FE 20                  CP   $20   ; compare to space
0F01   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F03   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F05                             ; ???? NEEDED?
0F05   28 36                  JR   z,interpret8   
0F07   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F09   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F0B   FE 05                  CP   CTRL_E   
0F0D   CA 9B 0F               JP   z,edit_   
0F10   FE 08                  CP   CTRL_H   
0F12   CA 8B 0F               JP   z,backSpace_   
0F15   FE 0A                  CP   CTRL_J   
0F17   CA B3 0F               JP   z,reEdit_   
0F1A                             ; cp CTRL_S
0F1A                             ; jp z,printStack_
0F1A                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F1A                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F1A                             ; DB     lsb(list_)       ; FF  ^L 12
0F1A                             ; DB     lsb(printStack_) ; DLE ^P 16
0F1A                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F1A                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F1A                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F1A                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F1A                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F1A                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F1A                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F1A                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F1A                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F1A                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F1A                INTERPRET5A:      
0F1A                             ; ld (vTIBPtr),bc
0F1A                             ; ld bc,(vTIBPtr)
0F1A   18 C8                  JR   interpret2   
0F1C                INTERPRET6:      
0F1C   21 00 52               LD   hl,TIB   
0F1F   09                     ADD   hl,bc   
0F20   77                     LD   (hl),a   ; store the character in textbuf
0F21   03                     INC   bc   
0F22   CD 85 00               CALL   putchar   ; echo character to screen
0F25   CD 2C 0E               CALL   nesting   
0F28   18 D2                  JR   interpret5   ; wait for next character
0F2A                INTERPRET7:      
0F2A   21 00 52               LD   hl,TIB   
0F2D   09                     ADD   hl,bc   
0F2E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F30   23                     INC   hl   
0F31   36 0A                  LD   (hl),"\n"   
0F33   23                     INC   hl   
0F34   03                     INC   bc   
0F35   03                     INC   bc   
0F36   CD 67 0E               CALL   crlf   ; echo character to screen
0F39   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F3A   B7                     OR   a   
0F3B   20 BF                  JR   nz,interpret5   
0F3D                INTERPRET8:      
0F3D   21 00 52               LD   hl,TIB   
0F40   09                     ADD   hl,bc   
0F41   22 EA 54               LD   (vTIBPtr),hl   
0F44   01 00 52               LD   bc,TIB   
0F47   ED 43 FA 54            LD   (vSavedIP),bc   ; save IP
0F4B   ED 73 FC 54            LD   (vSavedSP),sp   ; save SP
0F4F   DD 22 FE 54            LD   (vSavedNext),ix   ; save Next
0F53   FD 22 00 55            LD   (vSavedBP),iy   ; save BP
0F57   0B                     DEC   bc   
0F58                NEXT:        
0F58   03                     INC   bc   ; Increment the IP
0F59   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F5A   FE 20                  CP   " "   ; whitespace?
0F5C   28 FA                  JR   z,next   ; space? ignore
0F5E   38 08                  JR   c,next1   
0F60   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F62   6F                     LD   l,a   ; index into table
0F63   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F65   6E                     LD   l,(hl)   ; get low jump address
0F66   24                     INC   h   ; Load h with page after opcodes
0F67   E9                     JP   (hl)   ; Jump to routine
0F68                NEXT1:       
0F68   FE 00                  CP   NUL   ; end of input string?
0F6A   28 03                  JR   z,exit   
0F6C   C3 D5 0E               JP   interpret   ; no, other whitespace, macros?
0F6F                EXIT:        
0F6F   03                     INC   bc   
0F70   60 69                  LD   hl,bc   
0F72   E9                     JP   (hl)   
0F73                RUN:         
0F73   C1                     POP   bc   
0F74   0B                     DEC   bc   
0F75   DD E9                  JP   (ix)   
0F77                ERROR:       
0F77   E5                     PUSH   hl   
0F78   CD 73 0F               CALL   run   
0F7B   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F88   C3 D5 0E               JP   interpret   
0F8B                BACKSPACE_:      
0F8B   79                     LD   a,c   
0F8C   B0                     OR   b   
0F8D   CA E4 0E               JP   z,interpret2   
0F90   0B                     DEC   bc   
0F91   CD 6E 0E               CALL   printStr   
0F94   08 20 08 00            .CSTR   "\b \b"   
0F98   C3 E4 0E               JP   interpret2   
0F9B                             ; edit
0F9B                EDIT_:       
0F9B   CD 73 0F               CALL   run   
0F9E   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FB0   C3 D5 0E               JP   interpret   
0FB3                REEDIT_:      
0FB3   C3 D5 0E               JP   interpret   
0FB6                PRINTSTACK_:      
0FB6   CD 73 0F               CALL   run   
0FB9   2F 70 6B 00            .CSTR   "/pk"   
0FBD   C3 D5 0E               JP   interpret   
0FC0                             ; editDef:
0FC0                             ;     pop hl                      ; pop ret address
0FC0                             ;     ex (sp),hl                  ; swap with TOS
0FC0                             ;     push hl                     ; dup TOS
0FC0                             ;     ld a,l                      ; a = ident
0FC0                             ;     ld de,TIB                   ; de = start of TIB
0FC0                             ;     ld (vTIBPtr),de             ; update TIB*
0FC0                             ;     push ix                     ; save NEXT
0FC0                             ;     ld ix,editDef0              ; NEXT = editDef0
0FC0                             ;     jp lookupRef                ; convert letter into address
0FC0                             ; editDef0:
0FC0                             ;     ld e,(hl)                   ; de = (hl++)
0FC0                             ;     inc hl
0FC0                             ;     ld d,(hl)
0FC0                             ;     ld a,d                      ; de == 0 ?
0FC0                             ;     or e
0FC0                             ;     jr z,editDef4
0FC0                             ;     ld ix,editDef3              ; NEXT = editDef3
0FC0                             ;     ex de,hl
0FC0                             ;     ld a,(hl)
0FC0                             ;     cp "{"
0FC0                             ;     jr nz,editDef1
0FC0                             ;     jp editBlock0               ; convert letter into address
0FC0                             ; editDef1:
0FC0                             ;     cp "("
0FC0                             ;     jr nz,editDef2
0FC0                             ;     jp editBlock0               ; convert letter into address
0FC0                             ; editDef2:
0FC0                             ;     jp editFunc
0FC0                             ; editDef3:
0FC0                             ;     ld a," "                    ; write assign
0FC0                             ;     call writeChar
0FC0                             ;     pop hl                      ; a = ident
0FC0                             ;     ld a,l
0FC0                             ;     call writeChar
0FC0                             ;     ld a,"="                    ; write assign
0FC0                             ;     call writeChar
0FC0                             ;     ld ix,editDef4              ; NEXT = editDef4
0FC0                             ;     jp printTIB
0FC0                             ; editDef4:
0FC0                             ;     pop ix                      ; restore NEXT
0FC0                             ;     jp (ix)
0FC0                             ; writeChar:
0FC0                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FC0                             ;     ld (de),a                   ; write ident
0FC0                             ;     inc de
0FC0                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FC0                             ;     ret
0FC0                             ; ; printTIB
0FC0                             ; printTIB:
0FC0                             ;     ld hl,(vTIBPtr)
0FC0                             ;     ld de,TIB
0FC0                             ;     or a
0FC0                             ;     sbc hl,de
0FC0                             ;     jp printTIB2
0FC0                             ; printTIB1:
0FC0                             ;     ld a,(de)
0FC0                             ;     call putchar
0FC0                             ; printTIB2:
0FC0                             ;     ld a,l
0FC0                             ;     or h
0FC0                             ;     jr nz,printTIB1
0FC0                             ;     jp (ix)
0FC0                             ; editBlock:
0FC0                             ;     pop hl                      ; hl = block*
0FC0                             ; editBlock0:
0FC0                             ;     push ix                     ; save next
0FC0                             ;     push hl                     ; push block*
0FC0                             ;     push hl                     ; push block*
0FC0                             ;     ld ix,(editBlock2)
0FC0                             ;     jp blockLength
0FC0                             ; editBlock1:
0FC0                             ;     pop hl                      ; bc = length, (sp) = IP
0FC0                             ;     pop de                      ; de = block*
0FC0                             ;     ld a,l
0FC0                             ;     or h
0FC0                             ;     jr z,editBlock2
0FC0                             ;     push bc
0FC0                             ;     ld bc,hl
0FC0                             ;     ex de,hl                    ; hl = block*
0FC0                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FC0                             ;     ldir                        ; copy block to TIB
0FC0                             ;     ld (vTIBPtr),de              ; save TIB*
0FC0                             ;     pop bc
0FC0                             ; editBlock2:
0FC0                             ;     pop ix                      ; restore next
0FC0                             ;     jp (ix)
0FC0                             ; editFunc:
0FC0                             ;     jp (ix)
0FC0                             ; editArray:
0FC0                             ;     jp (ix)
0FC0                             ; editparseArgs:
0FC0                             ;     jp (ix)
0FC0                             ; ; blockLength
0FC0                             ; ; addr1 -- length
0FC0                             ; blockLength:
0FC0                             ;     pop hl                      ; block*
0FC0                             ;     push hl                     ; save block*
0FC0                             ;     inc hl                      ; skip first char
0FC0                             ;     ld d,1                      ; increase nesting
0FC0                             ; blockLength1:                   ; Skip to end of definition
0FC0                             ;     ld a,(hl)                   ; Get the next character
0FC0                             ;     inc hl                      ; Point to next character
0FC0                             ;     cp " " + 1                  ; ignore whitespace
0FC0                             ;     jr c,blockLength1
0FC0                             ;     cp ")"
0FC0                             ;     jr z,blockLength4
0FC0                             ;     cp "}"
0FC0                             ;     jr z,blockLength4
0FC0                             ;     cp "]"
0FC0                             ;     jr z,blockLength4
0FC0                             ;     cp "("
0FC0                             ;     jr z,blockLength2
0FC0                             ;     cp "{"
0FC0                             ;     jr z,blockLength2
0FC0                             ;     cp "["
0FC0                             ;     jr z,blockLength2
0FC0                             ;     cp "'"
0FC0                             ;     jr z,blockLength3
0FC0                             ;     cp "`"
0FC0                             ;     jr z,blockLength3
0FC0                             ;     cp DQ
0FC0                             ;     jr z,blockLength3
0FC0                             ;     jr blockLength1
0FC0                             ; blockLength2:
0FC0                             ;     inc d
0FC0                             ;     jr blockLength1
0FC0                             ; blockLength4:
0FC0                             ;     dec d
0FC0                             ;     jr nz, blockLength1         ; get the next element
0FC0                             ; blockLength3:
0FC0                             ;     ld a,$80
0FC0                             ;     xor d
0FC0                             ;     ld d,a
0FC0                             ;     jr nz, blockLength1
0FC0                             ;     pop hl                      ; hl = block*
0FC0                             ;     or a
0FC0                             ;     sbc hl,de
0FC0                             ;     push hl
0FC0                             ;     jp (ix)
0FC0                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FC0                             ; \a start of stack \#3 depth \b base \$ prompt
0FC0                             ; DW dStack               ; a vS0 start of datastack			
0FC0                             ; DW FALSE                ; b vBase16
0FC0                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FC0                             ; DW 0                    ; d
0FC0                             ; DW 65                   ; e vLastDef "A" last command u defined
0FC0                             ; DW 0                    ; f
0FC0                             ; DW page6                ; g 256 bytes limits
0FC0                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FC0                          ;*Macro unroll: FUNC f1, 1, "sL"
0FC0                F1:          
0FC0   CD FA 0A               CALL   go   
0FC3   00 00                  DW   NUL   
0FC5   CD 0F                  DW   f1M_2978S12   
0FC7   C9 0F                  DW   $+2   
0FC9   01                     DB   1   
0FCA   02 73 4C               .PSTR   "sL"   
0FCD                F1M_2978S12:      
0FCD   7B                     DB   "{"   
0FCE   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0FD8   5C 6B 74 7B            DB   "\\kt{"   
0FDC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0FE4   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0FEB   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0FF3   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0FFB   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
1002   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
1011   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
1019   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
1020   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
1034   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
103C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
1043   7D                     DB   "}"   
1044   7D                     DB   "}"   
1045   00                     DB   0   
1046                          ;*Macro unroll: FUNC f2, 0, ""
1046                F2:          
1046   CD FA 0A               CALL   go   
1049   00 00                  DW   NUL   
104B   51 10                  DW   f2M_2996S31   
104D   4F 10                  DW   $+2   
104F   00                     DB   0   
1050   00                     .PSTR   ""   
1051                F2M_2996S31:      
1051   00                     DB   0   
1052                          ;*Macro unroll: FUNC f3, 0, ""
1052                F3:          
1052   CD FA 0A               CALL   go   
1055   00 00                  DW   NUL   
1057   5D 10                  DW   f3M_2998S34   
1059   5B 10                  DW   $+2   
105B   00                     DB   0   
105C   00                     .PSTR   ""   
105D                F3M_2998S34:      
105D   00                     DB   0   
105E                          ;*Macro unroll: FUNC f4, 0, ""
105E                F4:          
105E   CD FA 0A               CALL   go   
1061   00 00                  DW   NUL   
1063   69 10                  DW   f4M_3000S37   
1065   67 10                  DW   $+2   
1067   00                     DB   0   
1068   00                     .PSTR   ""   
1069                F4M_3000S37:      
1069   00                     DB   0   
106A                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%i.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%i 1 + 10 *} /mp \\a{%i.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%i 1 + 10 *} /mp \\a{%i.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%i.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%i 3<}/ft \\a{%i.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%i+}/fd \\a{%i 24<}/ft \\a{%i.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                          ;*Macro unroll:  test "$1000 `hello there!` /si \\a{%a.c} /fe", $1000
1100   31 00 52               LD   SP,STACK   
1103   CD A2 0E               CALL   coldInit   
1106   CD 34 50               CALL   execStr   
1109   24 31 30 30 30 20 60 68 65 6C 6C 6F 20 74 68 65 72 65 21 60 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 DB   "$1000 `hello there!` /si \\a{%a.c} /fe",0   
112F   CD E4 0D               CALL   flushBuffer   
1132   E1                     POP   HL   
1133   E5                     PUSH   HL   
1134   11 00 10               LD   DE,$1000   
1137   B7                     OR   A   
1138   ED 52                  SBC   HL,DE   
113A   7D                     LD   A,L   
113B   B4                     OR   H   
113C   CA BC 11               JP   Z,expectM_3011S50   
113F   CD 6E 0E               CALL   printStr   
1142   43 6F 64 65 3A 20 24 31 30 30 30 20 60 68 65 6C 6C 6F 20 74 68 65 72 65 21 60 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 .CSTR   "Code: ","$1000 `hello there!` /si \\a{%a.c} /fe"   
116E   CD 6E 0E               CALL   printStr   
1171   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1180   21 00 10               LD   hl,$1000   
1183   E5                     PUSH   hl   
1184   E5                     PUSH   hl   
1185   CD 73 0F               CALL   run   
1188   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1190   CD E4 0D               CALL   flushBuffer   
1193   CD 6E 0E               CALL   printStr   
1196   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A3   E1                     POP   hl   
11A4   E5                     PUSH   hl   
11A5   E5                     PUSH   hl   
11A6   CD 73 0F               CALL   run   
11A9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11B8   CD E4 0D               CALL   flushBuffer   
11BB   76                     HALT      
11BC                EXPECTM_3011S50:      
11BC   E1                     POP   HL   
11BD   CD 6E 0E               CALL   printStr   
11C0   44 6F 6E 65 21 00      .CSTR   "Done!"   
11C6   76                     HALT      
11C7                             ; 
11C7                          ;*Macro unroll:  test "/f", false
11C7   31 00 52               LD   SP,STACK   
11CA   CD A2 0E               CALL   coldInit   
11CD   CD 34 50               CALL   execStr   
11D0   2F 66 00               DB   "/f",0   
11D3   CD E4 0D               CALL   flushBuffer   
11D6   E1                     POP   HL   
11D7   E5                     PUSH   HL   
11D8   11 00 00               LD   DE,false   
11DB   B7                     OR   A   
11DC   ED 52                  SBC   HL,DE   
11DE   7D                     LD   A,L   
11DF   B4                     OR   H   
11E0   CA 3D 12               JP   Z,expectM_3016S57   
11E3   CD 6E 0E               CALL   printStr   
11E6   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11EF   CD 6E 0E               CALL   printStr   
11F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1201   21 00 00               LD   hl,false   
1204   E5                     PUSH   hl   
1205   E5                     PUSH   hl   
1206   CD 73 0F               CALL   run   
1209   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1211   CD E4 0D               CALL   flushBuffer   
1214   CD 6E 0E               CALL   printStr   
1217   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1224   E1                     POP   hl   
1225   E5                     PUSH   hl   
1226   E5                     PUSH   hl   
1227   CD 73 0F               CALL   run   
122A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1239   CD E4 0D               CALL   flushBuffer   
123C   76                     HALT      
123D                EXPECTM_3016S57:      
123D   E1                     POP   HL   
123E                          ;*Macro unroll:  test "/t", true
123E   31 00 52               LD   SP,STACK   
1241   CD A2 0E               CALL   coldInit   
1244   CD 34 50               CALL   execStr   
1247   2F 74 00               DB   "/t",0   
124A   CD E4 0D               CALL   flushBuffer   
124D   E1                     POP   HL   
124E   E5                     PUSH   HL   
124F   11 FF FF               LD   DE,true   
1252   B7                     OR   A   
1253   ED 52                  SBC   HL,DE   
1255   7D                     LD   A,L   
1256   B4                     OR   H   
1257   CA B4 12               JP   Z,expectM_3017S58   
125A   CD 6E 0E               CALL   printStr   
125D   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1266   CD 6E 0E               CALL   printStr   
1269   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1278   21 FF FF               LD   hl,true   
127B   E5                     PUSH   hl   
127C   E5                     PUSH   hl   
127D   CD 73 0F               CALL   run   
1280   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1288   CD E4 0D               CALL   flushBuffer   
128B   CD 6E 0E               CALL   printStr   
128E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129B   E1                     POP   hl   
129C   E5                     PUSH   hl   
129D   E5                     PUSH   hl   
129E   CD 73 0F               CALL   run   
12A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12B0   CD E4 0D               CALL   flushBuffer   
12B3   76                     HALT      
12B4                EXPECTM_3017S58:      
12B4   E1                     POP   HL   
12B5                          ;*Macro unroll:  test "1", 1
12B5   31 00 52               LD   SP,STACK   
12B8   CD A2 0E               CALL   coldInit   
12BB   CD 34 50               CALL   execStr   
12BE   31 00                  DB   "1",0   
12C0   CD E4 0D               CALL   flushBuffer   
12C3   E1                     POP   HL   
12C4   E5                     PUSH   HL   
12C5   11 01 00               LD   DE,1   
12C8   B7                     OR   A   
12C9   ED 52                  SBC   HL,DE   
12CB   7D                     LD   A,L   
12CC   B4                     OR   H   
12CD   CA 29 13               JP   Z,expectM_3018S59   
12D0   CD 6E 0E               CALL   printStr   
12D3   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12DB   CD 6E 0E               CALL   printStr   
12DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12ED   21 01 00               LD   hl,1   
12F0   E5                     PUSH   hl   
12F1   E5                     PUSH   hl   
12F2   CD 73 0F               CALL   run   
12F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12FD   CD E4 0D               CALL   flushBuffer   
1300   CD 6E 0E               CALL   printStr   
1303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1310   E1                     POP   hl   
1311   E5                     PUSH   hl   
1312   E5                     PUSH   hl   
1313   CD 73 0F               CALL   run   
1316   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1325   CD E4 0D               CALL   flushBuffer   
1328   76                     HALT      
1329                EXPECTM_3018S59:      
1329   E1                     POP   HL   
132A                          ;*Macro unroll:  test "2", 2
132A   31 00 52               LD   SP,STACK   
132D   CD A2 0E               CALL   coldInit   
1330   CD 34 50               CALL   execStr   
1333   32 00                  DB   "2",0   
1335   CD E4 0D               CALL   flushBuffer   
1338   E1                     POP   HL   
1339   E5                     PUSH   HL   
133A   11 02 00               LD   DE,2   
133D   B7                     OR   A   
133E   ED 52                  SBC   HL,DE   
1340   7D                     LD   A,L   
1341   B4                     OR   H   
1342   CA 9E 13               JP   Z,expectM_3019S60   
1345   CD 6E 0E               CALL   printStr   
1348   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1350   CD 6E 0E               CALL   printStr   
1353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1362   21 02 00               LD   hl,2   
1365   E5                     PUSH   hl   
1366   E5                     PUSH   hl   
1367   CD 73 0F               CALL   run   
136A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1372   CD E4 0D               CALL   flushBuffer   
1375   CD 6E 0E               CALL   printStr   
1378   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1385   E1                     POP   hl   
1386   E5                     PUSH   hl   
1387   E5                     PUSH   hl   
1388   CD 73 0F               CALL   run   
138B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
139A   CD E4 0D               CALL   flushBuffer   
139D   76                     HALT      
139E                EXPECTM_3019S60:      
139E   E1                     POP   HL   
139F                          ;*Macro unroll:  test "1", 1
139F   31 00 52               LD   SP,STACK   
13A2   CD A2 0E               CALL   coldInit   
13A5   CD 34 50               CALL   execStr   
13A8   31 00                  DB   "1",0   
13AA   CD E4 0D               CALL   flushBuffer   
13AD   E1                     POP   HL   
13AE   E5                     PUSH   HL   
13AF   11 01 00               LD   DE,1   
13B2   B7                     OR   A   
13B3   ED 52                  SBC   HL,DE   
13B5   7D                     LD   A,L   
13B6   B4                     OR   H   
13B7   CA 13 14               JP   Z,expectM_3020S61   
13BA   CD 6E 0E               CALL   printStr   
13BD   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13C5   CD 6E 0E               CALL   printStr   
13C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D7   21 01 00               LD   hl,1   
13DA   E5                     PUSH   hl   
13DB   E5                     PUSH   hl   
13DC   CD 73 0F               CALL   run   
13DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E7   CD E4 0D               CALL   flushBuffer   
13EA   CD 6E 0E               CALL   printStr   
13ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FA   E1                     POP   hl   
13FB   E5                     PUSH   hl   
13FC   E5                     PUSH   hl   
13FD   CD 73 0F               CALL   run   
1400   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
140F   CD E4 0D               CALL   flushBuffer   
1412   76                     HALT      
1413                EXPECTM_3020S61:      
1413   E1                     POP   HL   
1414                          ;*Macro unroll:  test "0", 0
1414   31 00 52               LD   SP,STACK   
1417   CD A2 0E               CALL   coldInit   
141A   CD 34 50               CALL   execStr   
141D   30 00                  DB   "0",0   
141F   CD E4 0D               CALL   flushBuffer   
1422   E1                     POP   HL   
1423   E5                     PUSH   HL   
1424   11 00 00               LD   DE,0   
1427   B7                     OR   A   
1428   ED 52                  SBC   HL,DE   
142A   7D                     LD   A,L   
142B   B4                     OR   H   
142C   CA 88 14               JP   Z,expectM_3021S62   
142F   CD 6E 0E               CALL   printStr   
1432   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
143A   CD 6E 0E               CALL   printStr   
143D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144C   21 00 00               LD   hl,0   
144F   E5                     PUSH   hl   
1450   E5                     PUSH   hl   
1451   CD 73 0F               CALL   run   
1454   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
145C   CD E4 0D               CALL   flushBuffer   
145F   CD 6E 0E               CALL   printStr   
1462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146F   E1                     POP   hl   
1470   E5                     PUSH   hl   
1471   E5                     PUSH   hl   
1472   CD 73 0F               CALL   run   
1475   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1484   CD E4 0D               CALL   flushBuffer   
1487   76                     HALT      
1488                EXPECTM_3021S62:      
1488   E1                     POP   HL   
1489                          ;*Macro unroll:  test "10", 10
1489   31 00 52               LD   SP,STACK   
148C   CD A2 0E               CALL   coldInit   
148F   CD 34 50               CALL   execStr   
1492   31 30 00               DB   "10",0   
1495   CD E4 0D               CALL   flushBuffer   
1498   E1                     POP   HL   
1499   E5                     PUSH   HL   
149A   11 0A 00               LD   DE,10   
149D   B7                     OR   A   
149E   ED 52                  SBC   HL,DE   
14A0   7D                     LD   A,L   
14A1   B4                     OR   H   
14A2   CA FF 14               JP   Z,expectM_3022S63   
14A5   CD 6E 0E               CALL   printStr   
14A8   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
14B1   CD 6E 0E               CALL   printStr   
14B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C3   21 0A 00               LD   hl,10   
14C6   E5                     PUSH   hl   
14C7   E5                     PUSH   hl   
14C8   CD 73 0F               CALL   run   
14CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D3   CD E4 0D               CALL   flushBuffer   
14D6   CD 6E 0E               CALL   printStr   
14D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E6   E1                     POP   hl   
14E7   E5                     PUSH   hl   
14E8   E5                     PUSH   hl   
14E9   CD 73 0F               CALL   run   
14EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14FB   CD E4 0D               CALL   flushBuffer   
14FE   76                     HALT      
14FF                EXPECTM_3022S63:      
14FF   E1                     POP   HL   
1500                          ;*Macro unroll:  test "123", 123
1500   31 00 52               LD   SP,STACK   
1503   CD A2 0E               CALL   coldInit   
1506   CD 34 50               CALL   execStr   
1509   31 32 33 00            DB   "123",0   
150D   CD E4 0D               CALL   flushBuffer   
1510   E1                     POP   HL   
1511   E5                     PUSH   HL   
1512   11 7B 00               LD   DE,123   
1515   B7                     OR   A   
1516   ED 52                  SBC   HL,DE   
1518   7D                     LD   A,L   
1519   B4                     OR   H   
151A   CA 78 15               JP   Z,expectM_3023S64   
151D   CD 6E 0E               CALL   printStr   
1520   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
152A   CD 6E 0E               CALL   printStr   
152D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
153C   21 7B 00               LD   hl,123   
153F   E5                     PUSH   hl   
1540   E5                     PUSH   hl   
1541   CD 73 0F               CALL   run   
1544   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
154C   CD E4 0D               CALL   flushBuffer   
154F   CD 6E 0E               CALL   printStr   
1552   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
155F   E1                     POP   hl   
1560   E5                     PUSH   hl   
1561   E5                     PUSH   hl   
1562   CD 73 0F               CALL   run   
1565   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1574   CD E4 0D               CALL   flushBuffer   
1577   76                     HALT      
1578                EXPECTM_3023S64:      
1578   E1                     POP   HL   
1579                          ;*Macro unroll:  test "-1",-1
1579   31 00 52               LD   SP,STACK   
157C   CD A2 0E               CALL   coldInit   
157F   CD 34 50               CALL   execStr   
1582   2D 31 00               DB   "-1",0   
1585   CD E4 0D               CALL   flushBuffer   
1588   E1                     POP   HL   
1589   E5                     PUSH   HL   
158A   11 FF FF               LD   DE,-1   
158D   B7                     OR   A   
158E   ED 52                  SBC   HL,DE   
1590   7D                     LD   A,L   
1591   B4                     OR   H   
1592   CA EF 15               JP   Z,expectM_3024S65   
1595   CD 6E 0E               CALL   printStr   
1598   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
15A1   CD 6E 0E               CALL   printStr   
15A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15B3   21 FF FF               LD   hl,-1   
15B6   E5                     PUSH   hl   
15B7   E5                     PUSH   hl   
15B8   CD 73 0F               CALL   run   
15BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15C3   CD E4 0D               CALL   flushBuffer   
15C6   CD 6E 0E               CALL   printStr   
15C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15D6   E1                     POP   hl   
15D7   E5                     PUSH   hl   
15D8   E5                     PUSH   hl   
15D9   CD 73 0F               CALL   run   
15DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15EB   CD E4 0D               CALL   flushBuffer   
15EE   76                     HALT      
15EF                EXPECTM_3024S65:      
15EF   E1                     POP   HL   
15F0                          ;*Macro unroll:  test "''", 0
15F0   31 00 52               LD   SP,STACK   
15F3   CD A2 0E               CALL   coldInit   
15F6   CD 34 50               CALL   execStr   
15F9   27 27 00               DB   "''",0   
15FC   CD E4 0D               CALL   flushBuffer   
15FF   E1                     POP   HL   
1600   E5                     PUSH   HL   
1601   11 00 00               LD   DE,0   
1604   B7                     OR   A   
1605   ED 52                  SBC   HL,DE   
1607   7D                     LD   A,L   
1608   B4                     OR   H   
1609   CA 66 16               JP   Z,expectM_3025S66   
160C   CD 6E 0E               CALL   printStr   
160F   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1618   CD 6E 0E               CALL   printStr   
161B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
162A   21 00 00               LD   hl,0   
162D   E5                     PUSH   hl   
162E   E5                     PUSH   hl   
162F   CD 73 0F               CALL   run   
1632   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
163A   CD E4 0D               CALL   flushBuffer   
163D   CD 6E 0E               CALL   printStr   
1640   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164D   E1                     POP   hl   
164E   E5                     PUSH   hl   
164F   E5                     PUSH   hl   
1650   CD 73 0F               CALL   run   
1653   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1662   CD E4 0D               CALL   flushBuffer   
1665   76                     HALT      
1666                EXPECTM_3025S66:      
1666   E1                     POP   HL   
1667                          ;*Macro unroll:  test "'a'", $61
1667   31 00 52               LD   SP,STACK   
166A   CD A2 0E               CALL   coldInit   
166D   CD 34 50               CALL   execStr   
1670   27 61 27 00            DB   "'a'",0   
1674   CD E4 0D               CALL   flushBuffer   
1677   E1                     POP   HL   
1678   E5                     PUSH   HL   
1679   11 61 00               LD   DE,$61   
167C   B7                     OR   A   
167D   ED 52                  SBC   HL,DE   
167F   7D                     LD   A,L   
1680   B4                     OR   H   
1681   CA DF 16               JP   Z,expectM_3026S67   
1684   CD 6E 0E               CALL   printStr   
1687   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1691   CD 6E 0E               CALL   printStr   
1694   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A3   21 61 00               LD   hl,$61   
16A6   E5                     PUSH   hl   
16A7   E5                     PUSH   hl   
16A8   CD 73 0F               CALL   run   
16AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16B3   CD E4 0D               CALL   flushBuffer   
16B6   CD 6E 0E               CALL   printStr   
16B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C6   E1                     POP   hl   
16C7   E5                     PUSH   hl   
16C8   E5                     PUSH   hl   
16C9   CD 73 0F               CALL   run   
16CC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16DB   CD E4 0D               CALL   flushBuffer   
16DE   76                     HALT      
16DF                EXPECTM_3026S67:      
16DF   E1                     POP   HL   
16E0                          ;*Macro unroll:  test "'\\''", $27
16E0   31 00 52               LD   SP,STACK   
16E3   CD A2 0E               CALL   coldInit   
16E6   CD 34 50               CALL   execStr   
16E9   27 5C 27 27 00         DB   "'\\''",0   
16EE   CD E4 0D               CALL   flushBuffer   
16F1   E1                     POP   HL   
16F2   E5                     PUSH   HL   
16F3   11 27 00               LD   DE,$27   
16F6   B7                     OR   A   
16F7   ED 52                  SBC   HL,DE   
16F9   7D                     LD   A,L   
16FA   B4                     OR   H   
16FB   CA 5A 17               JP   Z,expectM_3027S68   
16FE   CD 6E 0E               CALL   printStr   
1701   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
170C   CD 6E 0E               CALL   printStr   
170F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
171E   21 27 00               LD   hl,$27   
1721   E5                     PUSH   hl   
1722   E5                     PUSH   hl   
1723   CD 73 0F               CALL   run   
1726   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
172E   CD E4 0D               CALL   flushBuffer   
1731   CD 6E 0E               CALL   printStr   
1734   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1741   E1                     POP   hl   
1742   E5                     PUSH   hl   
1743   E5                     PUSH   hl   
1744   CD 73 0F               CALL   run   
1747   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1756   CD E4 0D               CALL   flushBuffer   
1759   76                     HALT      
175A                EXPECTM_3027S68:      
175A   E1                     POP   HL   
175B                          ;*Macro unroll:  test "$10", $10
175B   31 00 52               LD   SP,STACK   
175E   CD A2 0E               CALL   coldInit   
1761   CD 34 50               CALL   execStr   
1764   24 31 30 00            DB   "$10",0   
1768   CD E4 0D               CALL   flushBuffer   
176B   E1                     POP   HL   
176C   E5                     PUSH   HL   
176D   11 10 00               LD   DE,$10   
1770   B7                     OR   A   
1771   ED 52                  SBC   HL,DE   
1773   7D                     LD   A,L   
1774   B4                     OR   H   
1775   CA D3 17               JP   Z,expectM_3028S69   
1778   CD 6E 0E               CALL   printStr   
177B   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1785   CD 6E 0E               CALL   printStr   
1788   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1797   21 10 00               LD   hl,$10   
179A   E5                     PUSH   hl   
179B   E5                     PUSH   hl   
179C   CD 73 0F               CALL   run   
179F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17A7   CD E4 0D               CALL   flushBuffer   
17AA   CD 6E 0E               CALL   printStr   
17AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BA   E1                     POP   hl   
17BB   E5                     PUSH   hl   
17BC   E5                     PUSH   hl   
17BD   CD 73 0F               CALL   run   
17C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17CF   CD E4 0D               CALL   flushBuffer   
17D2   76                     HALT      
17D3                EXPECTM_3028S69:      
17D3   E1                     POP   HL   
17D4                          ;*Macro unroll:  test "$FF", $FF
17D4   31 00 52               LD   SP,STACK   
17D7   CD A2 0E               CALL   coldInit   
17DA   CD 34 50               CALL   execStr   
17DD   24 46 46 00            DB   "$FF",0   
17E1   CD E4 0D               CALL   flushBuffer   
17E4   E1                     POP   HL   
17E5   E5                     PUSH   HL   
17E6   11 FF 00               LD   DE,$FF   
17E9   B7                     OR   A   
17EA   ED 52                  SBC   HL,DE   
17EC   7D                     LD   A,L   
17ED   B4                     OR   H   
17EE   CA 4C 18               JP   Z,expectM_3029S70   
17F1   CD 6E 0E               CALL   printStr   
17F4   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
17FE   CD 6E 0E               CALL   printStr   
1801   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1810   21 FF 00               LD   hl,$FF   
1813   E5                     PUSH   hl   
1814   E5                     PUSH   hl   
1815   CD 73 0F               CALL   run   
1818   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1820   CD E4 0D               CALL   flushBuffer   
1823   CD 6E 0E               CALL   printStr   
1826   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1833   E1                     POP   hl   
1834   E5                     PUSH   hl   
1835   E5                     PUSH   hl   
1836   CD 73 0F               CALL   run   
1839   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1848   CD E4 0D               CALL   flushBuffer   
184B   76                     HALT      
184C                EXPECTM_3029S70:      
184C   E1                     POP   HL   
184D                          ;*Macro unroll:  test "-1 2 +",1
184D   31 00 52               LD   SP,STACK   
1850   CD A2 0E               CALL   coldInit   
1853   CD 34 50               CALL   execStr   
1856   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
185D   CD E4 0D               CALL   flushBuffer   
1860   E1                     POP   HL   
1861   E5                     PUSH   HL   
1862   11 01 00               LD   DE,1   
1865   B7                     OR   A   
1866   ED 52                  SBC   HL,DE   
1868   7D                     LD   A,L   
1869   B4                     OR   H   
186A   CA CB 18               JP   Z,expectM_3030S71   
186D   CD 6E 0E               CALL   printStr   
1870   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
187D   CD 6E 0E               CALL   printStr   
1880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
188F   21 01 00               LD   hl,1   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 73 0F               CALL   run   
1897   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
189F   CD E4 0D               CALL   flushBuffer   
18A2   CD 6E 0E               CALL   printStr   
18A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B2   E1                     POP   hl   
18B3   E5                     PUSH   hl   
18B4   E5                     PUSH   hl   
18B5   CD 73 0F               CALL   run   
18B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18C7   CD E4 0D               CALL   flushBuffer   
18CA   76                     HALT      
18CB                EXPECTM_3030S71:      
18CB   E1                     POP   HL   
18CC                          ;*Macro unroll:  test "-1 1 +",0
18CC   31 00 52               LD   SP,STACK   
18CF   CD A2 0E               CALL   coldInit   
18D2   CD 34 50               CALL   execStr   
18D5   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
18DC   CD E4 0D               CALL   flushBuffer   
18DF   E1                     POP   HL   
18E0   E5                     PUSH   HL   
18E1   11 00 00               LD   DE,0   
18E4   B7                     OR   A   
18E5   ED 52                  SBC   HL,DE   
18E7   7D                     LD   A,L   
18E8   B4                     OR   H   
18E9   CA 4A 19               JP   Z,expectM_3031S72   
18EC   CD 6E 0E               CALL   printStr   
18EF   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
18FC   CD 6E 0E               CALL   printStr   
18FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
190E   21 00 00               LD   hl,0   
1911   E5                     PUSH   hl   
1912   E5                     PUSH   hl   
1913   CD 73 0F               CALL   run   
1916   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
191E   CD E4 0D               CALL   flushBuffer   
1921   CD 6E 0E               CALL   printStr   
1924   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1931   E1                     POP   hl   
1932   E5                     PUSH   hl   
1933   E5                     PUSH   hl   
1934   CD 73 0F               CALL   run   
1937   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1946   CD E4 0D               CALL   flushBuffer   
1949   76                     HALT      
194A                EXPECTM_3031S72:      
194A   E1                     POP   HL   
194B                          ;*Macro unroll:  test "1 2 +", 3
194B   31 00 52               LD   SP,STACK   
194E   CD A2 0E               CALL   coldInit   
1951   CD 34 50               CALL   execStr   
1954   31 20 32 20 2B 00      DB   "1 2 +",0   
195A   CD E4 0D               CALL   flushBuffer   
195D   E1                     POP   HL   
195E   E5                     PUSH   HL   
195F   11 03 00               LD   DE,3   
1962   B7                     OR   A   
1963   ED 52                  SBC   HL,DE   
1965   7D                     LD   A,L   
1966   B4                     OR   H   
1967   CA C7 19               JP   Z,expectM_3032S73   
196A   CD 6E 0E               CALL   printStr   
196D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1979   CD 6E 0E               CALL   printStr   
197C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
198B   21 03 00               LD   hl,3   
198E   E5                     PUSH   hl   
198F   E5                     PUSH   hl   
1990   CD 73 0F               CALL   run   
1993   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
199B   CD E4 0D               CALL   flushBuffer   
199E   CD 6E 0E               CALL   printStr   
19A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19AE   E1                     POP   hl   
19AF   E5                     PUSH   hl   
19B0   E5                     PUSH   hl   
19B1   CD 73 0F               CALL   run   
19B4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19C3   CD E4 0D               CALL   flushBuffer   
19C6   76                     HALT      
19C7                EXPECTM_3032S73:      
19C7   E1                     POP   HL   
19C8                          ;*Macro unroll:  test "4 1 2 +", 3
19C8   31 00 52               LD   SP,STACK   
19CB   CD A2 0E               CALL   coldInit   
19CE   CD 34 50               CALL   execStr   
19D1   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
19D9   CD E4 0D               CALL   flushBuffer   
19DC   E1                     POP   HL   
19DD   E5                     PUSH   HL   
19DE   11 03 00               LD   DE,3   
19E1   B7                     OR   A   
19E2   ED 52                  SBC   HL,DE   
19E4   7D                     LD   A,L   
19E5   B4                     OR   H   
19E6   CA 48 1A               JP   Z,expectM_3033S74   
19E9   CD 6E 0E               CALL   printStr   
19EC   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
19FA   CD 6E 0E               CALL   printStr   
19FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A0C   21 03 00               LD   hl,3   
1A0F   E5                     PUSH   hl   
1A10   E5                     PUSH   hl   
1A11   CD 73 0F               CALL   run   
1A14   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A1C   CD E4 0D               CALL   flushBuffer   
1A1F   CD 6E 0E               CALL   printStr   
1A22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A2F   E1                     POP   hl   
1A30   E5                     PUSH   hl   
1A31   E5                     PUSH   hl   
1A32   CD 73 0F               CALL   run   
1A35   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A44   CD E4 0D               CALL   flushBuffer   
1A47   76                     HALT      
1A48                EXPECTM_3033S74:      
1A48   E1                     POP   HL   
1A49                          ;*Macro unroll:  test "123 456 +", 123+456
1A49   31 00 52               LD   SP,STACK   
1A4C   CD A2 0E               CALL   coldInit   
1A4F   CD 34 50               CALL   execStr   
1A52   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1A5C   CD E4 0D               CALL   flushBuffer   
1A5F   E1                     POP   HL   
1A60   E5                     PUSH   HL   
1A61   11 43 02               LD   DE,123+456   
1A64   B7                     OR   A   
1A65   ED 52                  SBC   HL,DE   
1A67   7D                     LD   A,L   
1A68   B4                     OR   H   
1A69   CA CD 1A               JP   Z,expectM_3034S75   
1A6C   CD 6E 0E               CALL   printStr   
1A6F   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1A7F   CD 6E 0E               CALL   printStr   
1A82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A91   21 43 02               LD   hl,123+456   
1A94   E5                     PUSH   hl   
1A95   E5                     PUSH   hl   
1A96   CD 73 0F               CALL   run   
1A99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AA1   CD E4 0D               CALL   flushBuffer   
1AA4   CD 6E 0E               CALL   printStr   
1AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB4   E1                     POP   hl   
1AB5   E5                     PUSH   hl   
1AB6   E5                     PUSH   hl   
1AB7   CD 73 0F               CALL   run   
1ABA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AC9   CD E4 0D               CALL   flushBuffer   
1ACC   76                     HALT      
1ACD                EXPECTM_3034S75:      
1ACD   E1                     POP   HL   
1ACE                          ;*Macro unroll:  test "64 128 +", 64+128
1ACE   31 00 52               LD   SP,STACK   
1AD1   CD A2 0E               CALL   coldInit   
1AD4   CD 34 50               CALL   execStr   
1AD7   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1AE0   CD E4 0D               CALL   flushBuffer   
1AE3   E1                     POP   HL   
1AE4   E5                     PUSH   HL   
1AE5   11 C0 00               LD   DE,64+128   
1AE8   B7                     OR   A   
1AE9   ED 52                  SBC   HL,DE   
1AEB   7D                     LD   A,L   
1AEC   B4                     OR   H   
1AED   CA 50 1B               JP   Z,expectM_3035S76   
1AF0   CD 6E 0E               CALL   printStr   
1AF3   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1B02   CD 6E 0E               CALL   printStr   
1B05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B14   21 C0 00               LD   hl,64+128   
1B17   E5                     PUSH   hl   
1B18   E5                     PUSH   hl   
1B19   CD 73 0F               CALL   run   
1B1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B24   CD E4 0D               CALL   flushBuffer   
1B27   CD 6E 0E               CALL   printStr   
1B2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B37   E1                     POP   hl   
1B38   E5                     PUSH   hl   
1B39   E5                     PUSH   hl   
1B3A   CD 73 0F               CALL   run   
1B3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B4C   CD E4 0D               CALL   flushBuffer   
1B4F   76                     HALT      
1B50                EXPECTM_3035S76:      
1B50   E1                     POP   HL   
1B51                          ;*Macro unroll:  test "1 2 +", 3
1B51   31 00 52               LD   SP,STACK   
1B54   CD A2 0E               CALL   coldInit   
1B57   CD 34 50               CALL   execStr   
1B5A   31 20 32 20 2B 00      DB   "1 2 +",0   
1B60   CD E4 0D               CALL   flushBuffer   
1B63   E1                     POP   HL   
1B64   E5                     PUSH   HL   
1B65   11 03 00               LD   DE,3   
1B68   B7                     OR   A   
1B69   ED 52                  SBC   HL,DE   
1B6B   7D                     LD   A,L   
1B6C   B4                     OR   H   
1B6D   CA CD 1B               JP   Z,expectM_3036S77   
1B70   CD 6E 0E               CALL   printStr   
1B73   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1B7F   CD 6E 0E               CALL   printStr   
1B82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B91   21 03 00               LD   hl,3   
1B94   E5                     PUSH   hl   
1B95   E5                     PUSH   hl   
1B96   CD 73 0F               CALL   run   
1B99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BA1   CD E4 0D               CALL   flushBuffer   
1BA4   CD 6E 0E               CALL   printStr   
1BA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB4   E1                     POP   hl   
1BB5   E5                     PUSH   hl   
1BB6   E5                     PUSH   hl   
1BB7   CD 73 0F               CALL   run   
1BBA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BC9   CD E4 0D               CALL   flushBuffer   
1BCC   76                     HALT      
1BCD                EXPECTM_3036S77:      
1BCD   E1                     POP   HL   
1BCE                          ;*Macro unroll:  test "1a= a++ a",2
1BCE   31 00 52               LD   SP,STACK   
1BD1   CD A2 0E               CALL   coldInit   
1BD4   CD 34 50               CALL   execStr   
1BD7   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1BE1   CD E4 0D               CALL   flushBuffer   
1BE4   E1                     POP   HL   
1BE5   E5                     PUSH   HL   
1BE6   11 02 00               LD   DE,2   
1BE9   B7                     OR   A   
1BEA   ED 52                  SBC   HL,DE   
1BEC   7D                     LD   A,L   
1BED   B4                     OR   H   
1BEE   CA 52 1C               JP   Z,expectM_3037S78   
1BF1   CD 6E 0E               CALL   printStr   
1BF4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1C04   CD 6E 0E               CALL   printStr   
1C07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C16   21 02 00               LD   hl,2   
1C19   E5                     PUSH   hl   
1C1A   E5                     PUSH   hl   
1C1B   CD 73 0F               CALL   run   
1C1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C26   CD E4 0D               CALL   flushBuffer   
1C29   CD 6E 0E               CALL   printStr   
1C2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C39   E1                     POP   hl   
1C3A   E5                     PUSH   hl   
1C3B   E5                     PUSH   hl   
1C3C   CD 73 0F               CALL   run   
1C3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C4E   CD E4 0D               CALL   flushBuffer   
1C51   76                     HALT      
1C52                EXPECTM_3037S78:      
1C52   E1                     POP   HL   
1C53                          ;*Macro unroll:  test "-1 -1 -",0
1C53   31 00 52               LD   SP,STACK   
1C56   CD A2 0E               CALL   coldInit   
1C59   CD 34 50               CALL   execStr   
1C5C   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1C64   CD E4 0D               CALL   flushBuffer   
1C67   E1                     POP   HL   
1C68   E5                     PUSH   HL   
1C69   11 00 00               LD   DE,0   
1C6C   B7                     OR   A   
1C6D   ED 52                  SBC   HL,DE   
1C6F   7D                     LD   A,L   
1C70   B4                     OR   H   
1C71   CA D3 1C               JP   Z,expectM_3038S79   
1C74   CD 6E 0E               CALL   printStr   
1C77   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1C85   CD 6E 0E               CALL   printStr   
1C88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C97   21 00 00               LD   hl,0   
1C9A   E5                     PUSH   hl   
1C9B   E5                     PUSH   hl   
1C9C   CD 73 0F               CALL   run   
1C9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CA7   CD E4 0D               CALL   flushBuffer   
1CAA   CD 6E 0E               CALL   printStr   
1CAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CBA   E1                     POP   hl   
1CBB   E5                     PUSH   hl   
1CBC   E5                     PUSH   hl   
1CBD   CD 73 0F               CALL   run   
1CC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CCF   CD E4 0D               CALL   flushBuffer   
1CD2   76                     HALT      
1CD3                EXPECTM_3038S79:      
1CD3   E1                     POP   HL   
1CD4                          ;*Macro unroll:  test "5 3 -", 2
1CD4   31 00 52               LD   SP,STACK   
1CD7   CD A2 0E               CALL   coldInit   
1CDA   CD 34 50               CALL   execStr   
1CDD   35 20 33 20 2D 00      DB   "5 3 -",0   
1CE3   CD E4 0D               CALL   flushBuffer   
1CE6   E1                     POP   HL   
1CE7   E5                     PUSH   HL   
1CE8   11 02 00               LD   DE,2   
1CEB   B7                     OR   A   
1CEC   ED 52                  SBC   HL,DE   
1CEE   7D                     LD   A,L   
1CEF   B4                     OR   H   
1CF0   CA 50 1D               JP   Z,expectM_3039S80   
1CF3   CD 6E 0E               CALL   printStr   
1CF6   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1D02   CD 6E 0E               CALL   printStr   
1D05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D14   21 02 00               LD   hl,2   
1D17   E5                     PUSH   hl   
1D18   E5                     PUSH   hl   
1D19   CD 73 0F               CALL   run   
1D1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D24   CD E4 0D               CALL   flushBuffer   
1D27   CD 6E 0E               CALL   printStr   
1D2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D37   E1                     POP   hl   
1D38   E5                     PUSH   hl   
1D39   E5                     PUSH   hl   
1D3A   CD 73 0F               CALL   run   
1D3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D4C   CD E4 0D               CALL   flushBuffer   
1D4F   76                     HALT      
1D50                EXPECTM_3039S80:      
1D50   E1                     POP   HL   
1D51                          ;*Macro unroll:  test "2 1 -",1
1D51   31 00 52               LD   SP,STACK   
1D54   CD A2 0E               CALL   coldInit   
1D57   CD 34 50               CALL   execStr   
1D5A   32 20 31 20 2D 00      DB   "2 1 -",0   
1D60   CD E4 0D               CALL   flushBuffer   
1D63   E1                     POP   HL   
1D64   E5                     PUSH   HL   
1D65   11 01 00               LD   DE,1   
1D68   B7                     OR   A   
1D69   ED 52                  SBC   HL,DE   
1D6B   7D                     LD   A,L   
1D6C   B4                     OR   H   
1D6D   CA CD 1D               JP   Z,expectM_3040S81   
1D70   CD 6E 0E               CALL   printStr   
1D73   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1D7F   CD 6E 0E               CALL   printStr   
1D82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D91   21 01 00               LD   hl,1   
1D94   E5                     PUSH   hl   
1D95   E5                     PUSH   hl   
1D96   CD 73 0F               CALL   run   
1D99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA1   CD E4 0D               CALL   flushBuffer   
1DA4   CD 6E 0E               CALL   printStr   
1DA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB4   E1                     POP   hl   
1DB5   E5                     PUSH   hl   
1DB6   E5                     PUSH   hl   
1DB7   CD 73 0F               CALL   run   
1DBA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DC9   CD E4 0D               CALL   flushBuffer   
1DCC   76                     HALT      
1DCD                EXPECTM_3040S81:      
1DCD   E1                     POP   HL   
1DCE                          ;*Macro unroll:  test "3a= a-- a",2
1DCE   31 00 52               LD   SP,STACK   
1DD1   CD A2 0E               CALL   coldInit   
1DD4   CD 34 50               CALL   execStr   
1DD7   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1DE1   CD E4 0D               CALL   flushBuffer   
1DE4   E1                     POP   HL   
1DE5   E5                     PUSH   HL   
1DE6   11 02 00               LD   DE,2   
1DE9   B7                     OR   A   
1DEA   ED 52                  SBC   HL,DE   
1DEC   7D                     LD   A,L   
1DED   B4                     OR   H   
1DEE   CA 52 1E               JP   Z,expectM_3041S82   
1DF1   CD 6E 0E               CALL   printStr   
1DF4   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1E04   CD 6E 0E               CALL   printStr   
1E07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E16   21 02 00               LD   hl,2   
1E19   E5                     PUSH   hl   
1E1A   E5                     PUSH   hl   
1E1B   CD 73 0F               CALL   run   
1E1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E26   CD E4 0D               CALL   flushBuffer   
1E29   CD 6E 0E               CALL   printStr   
1E2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E39   E1                     POP   hl   
1E3A   E5                     PUSH   hl   
1E3B   E5                     PUSH   hl   
1E3C   CD 73 0F               CALL   run   
1E3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E4E   CD E4 0D               CALL   flushBuffer   
1E51   76                     HALT      
1E52                EXPECTM_3041S82:      
1E52   E1                     POP   HL   
1E53                          ;*Macro unroll:  test "3 5 &", 1
1E53   31 00 52               LD   SP,STACK   
1E56   CD A2 0E               CALL   coldInit   
1E59   CD 34 50               CALL   execStr   
1E5C   33 20 35 20 26 00      DB   "3 5 &",0   
1E62   CD E4 0D               CALL   flushBuffer   
1E65   E1                     POP   HL   
1E66   E5                     PUSH   HL   
1E67   11 01 00               LD   DE,1   
1E6A   B7                     OR   A   
1E6B   ED 52                  SBC   HL,DE   
1E6D   7D                     LD   A,L   
1E6E   B4                     OR   H   
1E6F   CA CF 1E               JP   Z,expectM_3042S83   
1E72   CD 6E 0E               CALL   printStr   
1E75   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1E81   CD 6E 0E               CALL   printStr   
1E84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E93   21 01 00               LD   hl,1   
1E96   E5                     PUSH   hl   
1E97   E5                     PUSH   hl   
1E98   CD 73 0F               CALL   run   
1E9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EA3   CD E4 0D               CALL   flushBuffer   
1EA6   CD 6E 0E               CALL   printStr   
1EA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB6   E1                     POP   hl   
1EB7   E5                     PUSH   hl   
1EB8   E5                     PUSH   hl   
1EB9   CD 73 0F               CALL   run   
1EBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ECB   CD E4 0D               CALL   flushBuffer   
1ECE   76                     HALT      
1ECF                EXPECTM_3042S83:      
1ECF   E1                     POP   HL   
1ED0                          ;*Macro unroll:  test "3 5 |", 7
1ED0   31 00 52               LD   SP,STACK   
1ED3   CD A2 0E               CALL   coldInit   
1ED6   CD 34 50               CALL   execStr   
1ED9   33 20 35 20 7C 00      DB   "3 5 |",0   
1EDF   CD E4 0D               CALL   flushBuffer   
1EE2   E1                     POP   HL   
1EE3   E5                     PUSH   HL   
1EE4   11 07 00               LD   DE,7   
1EE7   B7                     OR   A   
1EE8   ED 52                  SBC   HL,DE   
1EEA   7D                     LD   A,L   
1EEB   B4                     OR   H   
1EEC   CA 4C 1F               JP   Z,expectM_3043S84   
1EEF   CD 6E 0E               CALL   printStr   
1EF2   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1EFE   CD 6E 0E               CALL   printStr   
1F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F10   21 07 00               LD   hl,7   
1F13   E5                     PUSH   hl   
1F14   E5                     PUSH   hl   
1F15   CD 73 0F               CALL   run   
1F18   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F20   CD E4 0D               CALL   flushBuffer   
1F23   CD 6E 0E               CALL   printStr   
1F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F33   E1                     POP   hl   
1F34   E5                     PUSH   hl   
1F35   E5                     PUSH   hl   
1F36   CD 73 0F               CALL   run   
1F39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F48   CD E4 0D               CALL   flushBuffer   
1F4B   76                     HALT      
1F4C                EXPECTM_3043S84:      
1F4C   E1                     POP   HL   
1F4D                          ;*Macro unroll:  test "3 5 /x", 6
1F4D   31 00 52               LD   SP,STACK   
1F50   CD A2 0E               CALL   coldInit   
1F53   CD 34 50               CALL   execStr   
1F56   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1F5D   CD E4 0D               CALL   flushBuffer   
1F60   E1                     POP   HL   
1F61   E5                     PUSH   HL   
1F62   11 06 00               LD   DE,6   
1F65   B7                     OR   A   
1F66   ED 52                  SBC   HL,DE   
1F68   7D                     LD   A,L   
1F69   B4                     OR   H   
1F6A   CA CB 1F               JP   Z,expectM_3044S85   
1F6D   CD 6E 0E               CALL   printStr   
1F70   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1F7D   CD 6E 0E               CALL   printStr   
1F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8F   21 06 00               LD   hl,6   
1F92   E5                     PUSH   hl   
1F93   E5                     PUSH   hl   
1F94   CD 73 0F               CALL   run   
1F97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F9F   CD E4 0D               CALL   flushBuffer   
1FA2   CD 6E 0E               CALL   printStr   
1FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB2   E1                     POP   hl   
1FB3   E5                     PUSH   hl   
1FB4   E5                     PUSH   hl   
1FB5   CD 73 0F               CALL   run   
1FB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FC7   CD E4 0D               CALL   flushBuffer   
1FCA   76                     HALT      
1FCB                EXPECTM_3044S85:      
1FCB   E1                     POP   HL   
1FCC                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1FCC   31 00 52               LD   SP,STACK   
1FCF   CD A2 0E               CALL   coldInit   
1FD2   CD 34 50               CALL   execStr   
1FD5   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1FE4   CD E4 0D               CALL   flushBuffer   
1FE7   E1                     POP   HL   
1FE8   E5                     PUSH   HL   
1FE9   11 06 00               LD   DE,6   
1FEC   B7                     OR   A   
1FED   ED 52                  SBC   HL,DE   
1FEF   7D                     LD   A,L   
1FF0   B4                     OR   H   
1FF1   CA 5A 20               JP   Z,expectM_3045S86   
1FF4   CD 6E 0E               CALL   printStr   
1FF7   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
200C   CD 6E 0E               CALL   printStr   
200F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
201E   21 06 00               LD   hl,6   
2021   E5                     PUSH   hl   
2022   E5                     PUSH   hl   
2023   CD 73 0F               CALL   run   
2026   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
202E   CD E4 0D               CALL   flushBuffer   
2031   CD 6E 0E               CALL   printStr   
2034   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2041   E1                     POP   hl   
2042   E5                     PUSH   hl   
2043   E5                     PUSH   hl   
2044   CD 73 0F               CALL   run   
2047   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2056   CD E4 0D               CALL   flushBuffer   
2059   76                     HALT      
205A                EXPECTM_3045S86:      
205A   E1                     POP   HL   
205B                          ;*Macro unroll:  test "2 3 *", 6
205B   31 00 52               LD   SP,STACK   
205E   CD A2 0E               CALL   coldInit   
2061   CD 34 50               CALL   execStr   
2064   32 20 33 20 2A 00      DB   "2 3 *",0   
206A   CD E4 0D               CALL   flushBuffer   
206D   E1                     POP   HL   
206E   E5                     PUSH   HL   
206F   11 06 00               LD   DE,6   
2072   B7                     OR   A   
2073   ED 52                  SBC   HL,DE   
2075   7D                     LD   A,L   
2076   B4                     OR   H   
2077   CA D7 20               JP   Z,expectM_3046S87   
207A   CD 6E 0E               CALL   printStr   
207D   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2089   CD 6E 0E               CALL   printStr   
208C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
209B   21 06 00               LD   hl,6   
209E   E5                     PUSH   hl   
209F   E5                     PUSH   hl   
20A0   CD 73 0F               CALL   run   
20A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20AB   CD E4 0D               CALL   flushBuffer   
20AE   CD 6E 0E               CALL   printStr   
20B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BE   E1                     POP   hl   
20BF   E5                     PUSH   hl   
20C0   E5                     PUSH   hl   
20C1   CD 73 0F               CALL   run   
20C4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20D3   CD E4 0D               CALL   flushBuffer   
20D6   76                     HALT      
20D7                EXPECTM_3046S87:      
20D7   E1                     POP   HL   
20D8                          ;*Macro unroll:  test "1 2 3 + *", 5
20D8   31 00 52               LD   SP,STACK   
20DB   CD A2 0E               CALL   coldInit   
20DE   CD 34 50               CALL   execStr   
20E1   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
20EB   CD E4 0D               CALL   flushBuffer   
20EE   E1                     POP   HL   
20EF   E5                     PUSH   HL   
20F0   11 05 00               LD   DE,5   
20F3   B7                     OR   A   
20F4   ED 52                  SBC   HL,DE   
20F6   7D                     LD   A,L   
20F7   B4                     OR   H   
20F8   CA 5C 21               JP   Z,expectM_3047S88   
20FB   CD 6E 0E               CALL   printStr   
20FE   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
210E   CD 6E 0E               CALL   printStr   
2111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2120   21 05 00               LD   hl,5   
2123   E5                     PUSH   hl   
2124   E5                     PUSH   hl   
2125   CD 73 0F               CALL   run   
2128   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2130   CD E4 0D               CALL   flushBuffer   
2133   CD 6E 0E               CALL   printStr   
2136   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2143   E1                     POP   hl   
2144   E5                     PUSH   hl   
2145   E5                     PUSH   hl   
2146   CD 73 0F               CALL   run   
2149   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2158   CD E4 0D               CALL   flushBuffer   
215B   76                     HALT      
215C                EXPECTM_3047S88:      
215C   E1                     POP   HL   
215D                          ;*Macro unroll:  test "7 3 /", 2
215D   31 00 52               LD   SP,STACK   
2160   CD A2 0E               CALL   coldInit   
2163   CD 34 50               CALL   execStr   
2166   37 20 33 20 2F 00      DB   "7 3 /",0   
216C   CD E4 0D               CALL   flushBuffer   
216F   E1                     POP   HL   
2170   E5                     PUSH   HL   
2171   11 02 00               LD   DE,2   
2174   B7                     OR   A   
2175   ED 52                  SBC   HL,DE   
2177   7D                     LD   A,L   
2178   B4                     OR   H   
2179   CA D9 21               JP   Z,expectM_3048S89   
217C   CD 6E 0E               CALL   printStr   
217F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
218B   CD 6E 0E               CALL   printStr   
218E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
219D   21 02 00               LD   hl,2   
21A0   E5                     PUSH   hl   
21A1   E5                     PUSH   hl   
21A2   CD 73 0F               CALL   run   
21A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21AD   CD E4 0D               CALL   flushBuffer   
21B0   CD 6E 0E               CALL   printStr   
21B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21C0   E1                     POP   hl   
21C1   E5                     PUSH   hl   
21C2   E5                     PUSH   hl   
21C3   CD 73 0F               CALL   run   
21C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21D5   CD E4 0D               CALL   flushBuffer   
21D8   76                     HALT      
21D9                EXPECTM_3048S89:      
21D9   E1                     POP   HL   
21DA                          ;*Macro unroll:  test "100a= 1a+= a", 101
21DA   31 00 52               LD   SP,STACK   
21DD   CD A2 0E               CALL   coldInit   
21E0   CD 34 50               CALL   execStr   
21E3   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
21F0   CD E4 0D               CALL   flushBuffer   
21F3   E1                     POP   HL   
21F4   E5                     PUSH   HL   
21F5   11 65 00               LD   DE,101   
21F8   B7                     OR   A   
21F9   ED 52                  SBC   HL,DE   
21FB   7D                     LD   A,L   
21FC   B4                     OR   H   
21FD   CA 64 22               JP   Z,expectM_3049S90   
2200   CD 6E 0E               CALL   printStr   
2203   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2216   CD 6E 0E               CALL   printStr   
2219   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2228   21 65 00               LD   hl,101   
222B   E5                     PUSH   hl   
222C   E5                     PUSH   hl   
222D   CD 73 0F               CALL   run   
2230   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2238   CD E4 0D               CALL   flushBuffer   
223B   CD 6E 0E               CALL   printStr   
223E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
224B   E1                     POP   hl   
224C   E5                     PUSH   hl   
224D   E5                     PUSH   hl   
224E   CD 73 0F               CALL   run   
2251   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2260   CD E4 0D               CALL   flushBuffer   
2263   76                     HALT      
2264                EXPECTM_3049S90:      
2264   E1                     POP   HL   
2265                          ;*Macro unroll:  test "100a= a1-= a", 99
2265   31 00 52               LD   SP,STACK   
2268   CD A2 0E               CALL   coldInit   
226B   CD 34 50               CALL   execStr   
226E   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
227B   CD E4 0D               CALL   flushBuffer   
227E   E1                     POP   HL   
227F   E5                     PUSH   HL   
2280   11 63 00               LD   DE,99   
2283   B7                     OR   A   
2284   ED 52                  SBC   HL,DE   
2286   7D                     LD   A,L   
2287   B4                     OR   H   
2288   CA EF 22               JP   Z,expectM_3050S91   
228B   CD 6E 0E               CALL   printStr   
228E   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
22A1   CD 6E 0E               CALL   printStr   
22A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B3   21 63 00               LD   hl,99   
22B6   E5                     PUSH   hl   
22B7   E5                     PUSH   hl   
22B8   CD 73 0F               CALL   run   
22BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22C3   CD E4 0D               CALL   flushBuffer   
22C6   CD 6E 0E               CALL   printStr   
22C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22D6   E1                     POP   hl   
22D7   E5                     PUSH   hl   
22D8   E5                     PUSH   hl   
22D9   CD 73 0F               CALL   run   
22DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22EB   CD E4 0D               CALL   flushBuffer   
22EE   76                     HALT      
22EF                EXPECTM_3050S91:      
22EF   E1                     POP   HL   
22F0                          ;*Macro unroll:  test "100a= a2*= a", 200
22F0   31 00 52               LD   SP,STACK   
22F3   CD A2 0E               CALL   coldInit   
22F6   CD 34 50               CALL   execStr   
22F9   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2306   CD E4 0D               CALL   flushBuffer   
2309   E1                     POP   HL   
230A   E5                     PUSH   HL   
230B   11 C8 00               LD   DE,200   
230E   B7                     OR   A   
230F   ED 52                  SBC   HL,DE   
2311   7D                     LD   A,L   
2312   B4                     OR   H   
2313   CA 7A 23               JP   Z,expectM_3051S92   
2316   CD 6E 0E               CALL   printStr   
2319   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
232C   CD 6E 0E               CALL   printStr   
232F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233E   21 C8 00               LD   hl,200   
2341   E5                     PUSH   hl   
2342   E5                     PUSH   hl   
2343   CD 73 0F               CALL   run   
2346   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
234E   CD E4 0D               CALL   flushBuffer   
2351   CD 6E 0E               CALL   printStr   
2354   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2361   E1                     POP   hl   
2362   E5                     PUSH   hl   
2363   E5                     PUSH   hl   
2364   CD 73 0F               CALL   run   
2367   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2376   CD E4 0D               CALL   flushBuffer   
2379   76                     HALT      
237A                EXPECTM_3051S92:      
237A   E1                     POP   HL   
237B                          ;*Macro unroll:  test "100a= a2/= a", 50
237B   31 00 52               LD   SP,STACK   
237E   CD A2 0E               CALL   coldInit   
2381   CD 34 50               CALL   execStr   
2384   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2391   CD E4 0D               CALL   flushBuffer   
2394   E1                     POP   HL   
2395   E5                     PUSH   HL   
2396   11 32 00               LD   DE,50   
2399   B7                     OR   A   
239A   ED 52                  SBC   HL,DE   
239C   7D                     LD   A,L   
239D   B4                     OR   H   
239E   CA 05 24               JP   Z,expectM_3052S93   
23A1   CD 6E 0E               CALL   printStr   
23A4   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
23B7   CD 6E 0E               CALL   printStr   
23BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23C9   21 32 00               LD   hl,50   
23CC   E5                     PUSH   hl   
23CD   E5                     PUSH   hl   
23CE   CD 73 0F               CALL   run   
23D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23D9   CD E4 0D               CALL   flushBuffer   
23DC   CD 6E 0E               CALL   printStr   
23DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23EC   E1                     POP   hl   
23ED   E5                     PUSH   hl   
23EE   E5                     PUSH   hl   
23EF   CD 73 0F               CALL   run   
23F2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2401   CD E4 0D               CALL   flushBuffer   
2404   76                     HALT      
2405                EXPECTM_3052S93:      
2405   E1                     POP   HL   
2406                          ;*Macro unroll:  test "7 3 / /re", 1
2406   31 00 52               LD   SP,STACK   
2409   CD A2 0E               CALL   coldInit   
240C   CD 34 50               CALL   execStr   
240F   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2419   CD E4 0D               CALL   flushBuffer   
241C   E1                     POP   HL   
241D   E5                     PUSH   HL   
241E   11 01 00               LD   DE,1   
2421   B7                     OR   A   
2422   ED 52                  SBC   HL,DE   
2424   7D                     LD   A,L   
2425   B4                     OR   H   
2426   CA 8A 24               JP   Z,expectM_3053S94   
2429   CD 6E 0E               CALL   printStr   
242C   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
243C   CD 6E 0E               CALL   printStr   
243F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244E   21 01 00               LD   hl,1   
2451   E5                     PUSH   hl   
2452   E5                     PUSH   hl   
2453   CD 73 0F               CALL   run   
2456   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
245E   CD E4 0D               CALL   flushBuffer   
2461   CD 6E 0E               CALL   printStr   
2464   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2471   E1                     POP   hl   
2472   E5                     PUSH   hl   
2473   E5                     PUSH   hl   
2474   CD 73 0F               CALL   run   
2477   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2486   CD E4 0D               CALL   flushBuffer   
2489   76                     HALT      
248A                EXPECTM_3053S94:      
248A   E1                     POP   HL   
248B                          ;*Macro unroll:  test "7 3 /", 2
248B   31 00 52               LD   SP,STACK   
248E   CD A2 0E               CALL   coldInit   
2491   CD 34 50               CALL   execStr   
2494   37 20 33 20 2F 00      DB   "7 3 /",0   
249A   CD E4 0D               CALL   flushBuffer   
249D   E1                     POP   HL   
249E   E5                     PUSH   HL   
249F   11 02 00               LD   DE,2   
24A2   B7                     OR   A   
24A3   ED 52                  SBC   HL,DE   
24A5   7D                     LD   A,L   
24A6   B4                     OR   H   
24A7   CA 07 25               JP   Z,expectM_3054S95   
24AA   CD 6E 0E               CALL   printStr   
24AD   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
24B9   CD 6E 0E               CALL   printStr   
24BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24CB   21 02 00               LD   hl,2   
24CE   E5                     PUSH   hl   
24CF   E5                     PUSH   hl   
24D0   CD 73 0F               CALL   run   
24D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24DB   CD E4 0D               CALL   flushBuffer   
24DE   CD 6E 0E               CALL   printStr   
24E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24EE   E1                     POP   hl   
24EF   E5                     PUSH   hl   
24F0   E5                     PUSH   hl   
24F1   CD 73 0F               CALL   run   
24F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2503   CD E4 0D               CALL   flushBuffer   
2506   76                     HALT      
2507                EXPECTM_3054S95:      
2507   E1                     POP   HL   
2508                          ;*Macro unroll:  test "2 3 ==", FALSE
2508   31 00 52               LD   SP,STACK   
250B   CD A2 0E               CALL   coldInit   
250E   CD 34 50               CALL   execStr   
2511   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2518   CD E4 0D               CALL   flushBuffer   
251B   E1                     POP   HL   
251C   E5                     PUSH   HL   
251D   11 00 00               LD   DE,FALSE   
2520   B7                     OR   A   
2521   ED 52                  SBC   HL,DE   
2523   7D                     LD   A,L   
2524   B4                     OR   H   
2525   CA 86 25               JP   Z,expectM_3055S96   
2528   CD 6E 0E               CALL   printStr   
252B   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2538   CD 6E 0E               CALL   printStr   
253B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254A   21 00 00               LD   hl,FALSE   
254D   E5                     PUSH   hl   
254E   E5                     PUSH   hl   
254F   CD 73 0F               CALL   run   
2552   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
255A   CD E4 0D               CALL   flushBuffer   
255D   CD 6E 0E               CALL   printStr   
2560   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
256D   E1                     POP   hl   
256E   E5                     PUSH   hl   
256F   E5                     PUSH   hl   
2570   CD 73 0F               CALL   run   
2573   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2582   CD E4 0D               CALL   flushBuffer   
2585   76                     HALT      
2586                EXPECTM_3055S96:      
2586   E1                     POP   HL   
2587                          ;*Macro unroll:  test "3 3 ==", TRUE
2587   31 00 52               LD   SP,STACK   
258A   CD A2 0E               CALL   coldInit   
258D   CD 34 50               CALL   execStr   
2590   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2597   CD E4 0D               CALL   flushBuffer   
259A   E1                     POP   HL   
259B   E5                     PUSH   HL   
259C   11 FF FF               LD   DE,TRUE   
259F   B7                     OR   A   
25A0   ED 52                  SBC   HL,DE   
25A2   7D                     LD   A,L   
25A3   B4                     OR   H   
25A4   CA 05 26               JP   Z,expectM_3056S97   
25A7   CD 6E 0E               CALL   printStr   
25AA   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
25B7   CD 6E 0E               CALL   printStr   
25BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C9   21 FF FF               LD   hl,TRUE   
25CC   E5                     PUSH   hl   
25CD   E5                     PUSH   hl   
25CE   CD 73 0F               CALL   run   
25D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25D9   CD E4 0D               CALL   flushBuffer   
25DC   CD 6E 0E               CALL   printStr   
25DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25EC   E1                     POP   hl   
25ED   E5                     PUSH   hl   
25EE   E5                     PUSH   hl   
25EF   CD 73 0F               CALL   run   
25F2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2601   CD E4 0D               CALL   flushBuffer   
2604   76                     HALT      
2605                EXPECTM_3056S97:      
2605   E1                     POP   HL   
2606                          ;*Macro unroll:  test "1 2 <", TRUE
2606   31 00 52               LD   SP,STACK   
2609   CD A2 0E               CALL   coldInit   
260C   CD 34 50               CALL   execStr   
260F   31 20 32 20 3C 00      DB   "1 2 <",0   
2615   CD E4 0D               CALL   flushBuffer   
2618   E1                     POP   HL   
2619   E5                     PUSH   HL   
261A   11 FF FF               LD   DE,TRUE   
261D   B7                     OR   A   
261E   ED 52                  SBC   HL,DE   
2620   7D                     LD   A,L   
2621   B4                     OR   H   
2622   CA 82 26               JP   Z,expectM_3057S98   
2625   CD 6E 0E               CALL   printStr   
2628   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2634   CD 6E 0E               CALL   printStr   
2637   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2646   21 FF FF               LD   hl,TRUE   
2649   E5                     PUSH   hl   
264A   E5                     PUSH   hl   
264B   CD 73 0F               CALL   run   
264E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2656   CD E4 0D               CALL   flushBuffer   
2659   CD 6E 0E               CALL   printStr   
265C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2669   E1                     POP   hl   
266A   E5                     PUSH   hl   
266B   E5                     PUSH   hl   
266C   CD 73 0F               CALL   run   
266F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
267E   CD E4 0D               CALL   flushBuffer   
2681   76                     HALT      
2682                EXPECTM_3057S98:      
2682   E1                     POP   HL   
2683                          ;*Macro unroll:  test "2 1 <", FALSE
2683   31 00 52               LD   SP,STACK   
2686   CD A2 0E               CALL   coldInit   
2689   CD 34 50               CALL   execStr   
268C   32 20 31 20 3C 00      DB   "2 1 <",0   
2692   CD E4 0D               CALL   flushBuffer   
2695   E1                     POP   HL   
2696   E5                     PUSH   HL   
2697   11 00 00               LD   DE,FALSE   
269A   B7                     OR   A   
269B   ED 52                  SBC   HL,DE   
269D   7D                     LD   A,L   
269E   B4                     OR   H   
269F   CA FF 26               JP   Z,expectM_3058S99   
26A2   CD 6E 0E               CALL   printStr   
26A5   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
26B1   CD 6E 0E               CALL   printStr   
26B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C3   21 00 00               LD   hl,FALSE   
26C6   E5                     PUSH   hl   
26C7   E5                     PUSH   hl   
26C8   CD 73 0F               CALL   run   
26CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D3   CD E4 0D               CALL   flushBuffer   
26D6   CD 6E 0E               CALL   printStr   
26D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E6   E1                     POP   hl   
26E7   E5                     PUSH   hl   
26E8   E5                     PUSH   hl   
26E9   CD 73 0F               CALL   run   
26EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26FB   CD E4 0D               CALL   flushBuffer   
26FE   76                     HALT      
26FF                EXPECTM_3058S99:      
26FF   E1                     POP   HL   
2700                          ;*Macro unroll:  test "2 3 <", TRUE
2700   31 00 52               LD   SP,STACK   
2703   CD A2 0E               CALL   coldInit   
2706   CD 34 50               CALL   execStr   
2709   32 20 33 20 3C 00      DB   "2 3 <",0   
270F   CD E4 0D               CALL   flushBuffer   
2712   E1                     POP   HL   
2713   E5                     PUSH   HL   
2714   11 FF FF               LD   DE,TRUE   
2717   B7                     OR   A   
2718   ED 52                  SBC   HL,DE   
271A   7D                     LD   A,L   
271B   B4                     OR   H   
271C   CA 7C 27               JP   Z,expectM_3059S100   
271F   CD 6E 0E               CALL   printStr   
2722   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
272E   CD 6E 0E               CALL   printStr   
2731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2740   21 FF FF               LD   hl,TRUE   
2743   E5                     PUSH   hl   
2744   E5                     PUSH   hl   
2745   CD 73 0F               CALL   run   
2748   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2750   CD E4 0D               CALL   flushBuffer   
2753   CD 6E 0E               CALL   printStr   
2756   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2763   E1                     POP   hl   
2764   E5                     PUSH   hl   
2765   E5                     PUSH   hl   
2766   CD 73 0F               CALL   run   
2769   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2778   CD E4 0D               CALL   flushBuffer   
277B   76                     HALT      
277C                EXPECTM_3059S100:      
277C   E1                     POP   HL   
277D                          ;*Macro unroll:  test "3 3 <", FALSE
277D   31 00 52               LD   SP,STACK   
2780   CD A2 0E               CALL   coldInit   
2783   CD 34 50               CALL   execStr   
2786   33 20 33 20 3C 00      DB   "3 3 <",0   
278C   CD E4 0D               CALL   flushBuffer   
278F   E1                     POP   HL   
2790   E5                     PUSH   HL   
2791   11 00 00               LD   DE,FALSE   
2794   B7                     OR   A   
2795   ED 52                  SBC   HL,DE   
2797   7D                     LD   A,L   
2798   B4                     OR   H   
2799   CA F9 27               JP   Z,expectM_3060S101   
279C   CD 6E 0E               CALL   printStr   
279F   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
27AB   CD 6E 0E               CALL   printStr   
27AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BD   21 00 00               LD   hl,FALSE   
27C0   E5                     PUSH   hl   
27C1   E5                     PUSH   hl   
27C2   CD 73 0F               CALL   run   
27C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CD   CD E4 0D               CALL   flushBuffer   
27D0   CD 6E 0E               CALL   printStr   
27D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E0   E1                     POP   hl   
27E1   E5                     PUSH   hl   
27E2   E5                     PUSH   hl   
27E3   CD 73 0F               CALL   run   
27E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F5   CD E4 0D               CALL   flushBuffer   
27F8   76                     HALT      
27F9                EXPECTM_3060S101:      
27F9   E1                     POP   HL   
27FA                          ;*Macro unroll:  test "1 2 >", FALSE
27FA   31 00 52               LD   SP,STACK   
27FD   CD A2 0E               CALL   coldInit   
2800   CD 34 50               CALL   execStr   
2803   31 20 32 20 3E 00      DB   "1 2 >",0   
2809   CD E4 0D               CALL   flushBuffer   
280C   E1                     POP   HL   
280D   E5                     PUSH   HL   
280E   11 00 00               LD   DE,FALSE   
2811   B7                     OR   A   
2812   ED 52                  SBC   HL,DE   
2814   7D                     LD   A,L   
2815   B4                     OR   H   
2816   CA 76 28               JP   Z,expectM_3061S102   
2819   CD 6E 0E               CALL   printStr   
281C   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2828   CD 6E 0E               CALL   printStr   
282B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
283A   21 00 00               LD   hl,FALSE   
283D   E5                     PUSH   hl   
283E   E5                     PUSH   hl   
283F   CD 73 0F               CALL   run   
2842   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
284A   CD E4 0D               CALL   flushBuffer   
284D   CD 6E 0E               CALL   printStr   
2850   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
285D   E1                     POP   hl   
285E   E5                     PUSH   hl   
285F   E5                     PUSH   hl   
2860   CD 73 0F               CALL   run   
2863   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2872   CD E4 0D               CALL   flushBuffer   
2875   76                     HALT      
2876                EXPECTM_3061S102:      
2876   E1                     POP   HL   
2877                          ;*Macro unroll:  test "2 1 >", TRUE
2877   31 00 52               LD   SP,STACK   
287A   CD A2 0E               CALL   coldInit   
287D   CD 34 50               CALL   execStr   
2880   32 20 31 20 3E 00      DB   "2 1 >",0   
2886   CD E4 0D               CALL   flushBuffer   
2889   E1                     POP   HL   
288A   E5                     PUSH   HL   
288B   11 FF FF               LD   DE,TRUE   
288E   B7                     OR   A   
288F   ED 52                  SBC   HL,DE   
2891   7D                     LD   A,L   
2892   B4                     OR   H   
2893   CA F3 28               JP   Z,expectM_3062S103   
2896   CD 6E 0E               CALL   printStr   
2899   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
28A5   CD 6E 0E               CALL   printStr   
28A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B7   21 FF FF               LD   hl,TRUE   
28BA   E5                     PUSH   hl   
28BB   E5                     PUSH   hl   
28BC   CD 73 0F               CALL   run   
28BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28C7   CD E4 0D               CALL   flushBuffer   
28CA   CD 6E 0E               CALL   printStr   
28CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28DA   E1                     POP   hl   
28DB   E5                     PUSH   hl   
28DC   E5                     PUSH   hl   
28DD   CD 73 0F               CALL   run   
28E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28EF   CD E4 0D               CALL   flushBuffer   
28F2   76                     HALT      
28F3                EXPECTM_3062S103:      
28F3   E1                     POP   HL   
28F4                          ;*Macro unroll:  test "3 3 >", FALSE
28F4   31 00 52               LD   SP,STACK   
28F7   CD A2 0E               CALL   coldInit   
28FA   CD 34 50               CALL   execStr   
28FD   33 20 33 20 3E 00      DB   "3 3 >",0   
2903   CD E4 0D               CALL   flushBuffer   
2906   E1                     POP   HL   
2907   E5                     PUSH   HL   
2908   11 00 00               LD   DE,FALSE   
290B   B7                     OR   A   
290C   ED 52                  SBC   HL,DE   
290E   7D                     LD   A,L   
290F   B4                     OR   H   
2910   CA 70 29               JP   Z,expectM_3063S104   
2913   CD 6E 0E               CALL   printStr   
2916   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2922   CD 6E 0E               CALL   printStr   
2925   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2934   21 00 00               LD   hl,FALSE   
2937   E5                     PUSH   hl   
2938   E5                     PUSH   hl   
2939   CD 73 0F               CALL   run   
293C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2944   CD E4 0D               CALL   flushBuffer   
2947   CD 6E 0E               CALL   printStr   
294A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2957   E1                     POP   hl   
2958   E5                     PUSH   hl   
2959   E5                     PUSH   hl   
295A   CD 73 0F               CALL   run   
295D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
296C   CD E4 0D               CALL   flushBuffer   
296F   76                     HALT      
2970                EXPECTM_3063S104:      
2970   E1                     POP   HL   
2971                          ;*Macro unroll:  test "4 3 >", TRUE
2971   31 00 52               LD   SP,STACK   
2974   CD A2 0E               CALL   coldInit   
2977   CD 34 50               CALL   execStr   
297A   34 20 33 20 3E 00      DB   "4 3 >",0   
2980   CD E4 0D               CALL   flushBuffer   
2983   E1                     POP   HL   
2984   E5                     PUSH   HL   
2985   11 FF FF               LD   DE,TRUE   
2988   B7                     OR   A   
2989   ED 52                  SBC   HL,DE   
298B   7D                     LD   A,L   
298C   B4                     OR   H   
298D   CA ED 29               JP   Z,expectM_3064S105   
2990   CD 6E 0E               CALL   printStr   
2993   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
299F   CD 6E 0E               CALL   printStr   
29A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B1   21 FF FF               LD   hl,TRUE   
29B4   E5                     PUSH   hl   
29B5   E5                     PUSH   hl   
29B6   CD 73 0F               CALL   run   
29B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29C1   CD E4 0D               CALL   flushBuffer   
29C4   CD 6E 0E               CALL   printStr   
29C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D4   E1                     POP   hl   
29D5   E5                     PUSH   hl   
29D6   E5                     PUSH   hl   
29D7   CD 73 0F               CALL   run   
29DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29E9   CD E4 0D               CALL   flushBuffer   
29EC   76                     HALT      
29ED                EXPECTM_3064S105:      
29ED   E1                     POP   HL   
29EE                          ;*Macro unroll:  test "2 2 <=", TRUE
29EE   31 00 52               LD   SP,STACK   
29F1   CD A2 0E               CALL   coldInit   
29F4   CD 34 50               CALL   execStr   
29F7   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
29FE   CD E4 0D               CALL   flushBuffer   
2A01   E1                     POP   HL   
2A02   E5                     PUSH   HL   
2A03   11 FF FF               LD   DE,TRUE   
2A06   B7                     OR   A   
2A07   ED 52                  SBC   HL,DE   
2A09   7D                     LD   A,L   
2A0A   B4                     OR   H   
2A0B   CA 6C 2A               JP   Z,expectM_3065S106   
2A0E   CD 6E 0E               CALL   printStr   
2A11   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2A1E   CD 6E 0E               CALL   printStr   
2A21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A30   21 FF FF               LD   hl,TRUE   
2A33   E5                     PUSH   hl   
2A34   E5                     PUSH   hl   
2A35   CD 73 0F               CALL   run   
2A38   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A40   CD E4 0D               CALL   flushBuffer   
2A43   CD 6E 0E               CALL   printStr   
2A46   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A53   E1                     POP   hl   
2A54   E5                     PUSH   hl   
2A55   E5                     PUSH   hl   
2A56   CD 73 0F               CALL   run   
2A59   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A68   CD E4 0D               CALL   flushBuffer   
2A6B   76                     HALT      
2A6C                EXPECTM_3065S106:      
2A6C   E1                     POP   HL   
2A6D                          ;*Macro unroll:  test "2 2 >=", TRUE
2A6D   31 00 52               LD   SP,STACK   
2A70   CD A2 0E               CALL   coldInit   
2A73   CD 34 50               CALL   execStr   
2A76   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2A7D   CD E4 0D               CALL   flushBuffer   
2A80   E1                     POP   HL   
2A81   E5                     PUSH   HL   
2A82   11 FF FF               LD   DE,TRUE   
2A85   B7                     OR   A   
2A86   ED 52                  SBC   HL,DE   
2A88   7D                     LD   A,L   
2A89   B4                     OR   H   
2A8A   CA EB 2A               JP   Z,expectM_3066S107   
2A8D   CD 6E 0E               CALL   printStr   
2A90   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2A9D   CD 6E 0E               CALL   printStr   
2AA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AAF   21 FF FF               LD   hl,TRUE   
2AB2   E5                     PUSH   hl   
2AB3   E5                     PUSH   hl   
2AB4   CD 73 0F               CALL   run   
2AB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ABF   CD E4 0D               CALL   flushBuffer   
2AC2   CD 6E 0E               CALL   printStr   
2AC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD2   E1                     POP   hl   
2AD3   E5                     PUSH   hl   
2AD4   E5                     PUSH   hl   
2AD5   CD 73 0F               CALL   run   
2AD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AE7   CD E4 0D               CALL   flushBuffer   
2AEA   76                     HALT      
2AEB                EXPECTM_3066S107:      
2AEB   E1                     POP   HL   
2AEC                          ;*Macro unroll:  test "3 1 <<", 6
2AEC   31 00 52               LD   SP,STACK   
2AEF   CD A2 0E               CALL   coldInit   
2AF2   CD 34 50               CALL   execStr   
2AF5   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2AFC   CD E4 0D               CALL   flushBuffer   
2AFF   E1                     POP   HL   
2B00   E5                     PUSH   HL   
2B01   11 06 00               LD   DE,6   
2B04   B7                     OR   A   
2B05   ED 52                  SBC   HL,DE   
2B07   7D                     LD   A,L   
2B08   B4                     OR   H   
2B09   CA 6A 2B               JP   Z,expectM_3067S108   
2B0C   CD 6E 0E               CALL   printStr   
2B0F   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2B1C   CD 6E 0E               CALL   printStr   
2B1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B2E   21 06 00               LD   hl,6   
2B31   E5                     PUSH   hl   
2B32   E5                     PUSH   hl   
2B33   CD 73 0F               CALL   run   
2B36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B3E   CD E4 0D               CALL   flushBuffer   
2B41   CD 6E 0E               CALL   printStr   
2B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B51   E1                     POP   hl   
2B52   E5                     PUSH   hl   
2B53   E5                     PUSH   hl   
2B54   CD 73 0F               CALL   run   
2B57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B66   CD E4 0D               CALL   flushBuffer   
2B69   76                     HALT      
2B6A                EXPECTM_3067S108:      
2B6A   E1                     POP   HL   
2B6B                          ;*Macro unroll:  test "10 1 >>", 5
2B6B   31 00 52               LD   SP,STACK   
2B6E   CD A2 0E               CALL   coldInit   
2B71   CD 34 50               CALL   execStr   
2B74   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2B7C   CD E4 0D               CALL   flushBuffer   
2B7F   E1                     POP   HL   
2B80   E5                     PUSH   HL   
2B81   11 05 00               LD   DE,5   
2B84   B7                     OR   A   
2B85   ED 52                  SBC   HL,DE   
2B87   7D                     LD   A,L   
2B88   B4                     OR   H   
2B89   CA EB 2B               JP   Z,expectM_3068S109   
2B8C   CD 6E 0E               CALL   printStr   
2B8F   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2B9D   CD 6E 0E               CALL   printStr   
2BA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BAF   21 05 00               LD   hl,5   
2BB2   E5                     PUSH   hl   
2BB3   E5                     PUSH   hl   
2BB4   CD 73 0F               CALL   run   
2BB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BBF   CD E4 0D               CALL   flushBuffer   
2BC2   CD 6E 0E               CALL   printStr   
2BC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD2   E1                     POP   hl   
2BD3   E5                     PUSH   hl   
2BD4   E5                     PUSH   hl   
2BD5   CD 73 0F               CALL   run   
2BD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BE7   CD E4 0D               CALL   flushBuffer   
2BEA   76                     HALT      
2BEB                EXPECTM_3068S109:      
2BEB   E1                     POP   HL   
2BEC                          ;*Macro unroll:  test "1 x = x", 1
2BEC   31 00 52               LD   SP,STACK   
2BEF   CD A2 0E               CALL   coldInit   
2BF2   CD 34 50               CALL   execStr   
2BF5   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2BFD   CD E4 0D               CALL   flushBuffer   
2C00   E1                     POP   HL   
2C01   E5                     PUSH   HL   
2C02   11 01 00               LD   DE,1   
2C05   B7                     OR   A   
2C06   ED 52                  SBC   HL,DE   
2C08   7D                     LD   A,L   
2C09   B4                     OR   H   
2C0A   CA 6C 2C               JP   Z,expectM_3069S110   
2C0D   CD 6E 0E               CALL   printStr   
2C10   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2C1E   CD 6E 0E               CALL   printStr   
2C21   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C30   21 01 00               LD   hl,1   
2C33   E5                     PUSH   hl   
2C34   E5                     PUSH   hl   
2C35   CD 73 0F               CALL   run   
2C38   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C40   CD E4 0D               CALL   flushBuffer   
2C43   CD 6E 0E               CALL   printStr   
2C46   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C53   E1                     POP   hl   
2C54   E5                     PUSH   hl   
2C55   E5                     PUSH   hl   
2C56   CD 73 0F               CALL   run   
2C59   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C68   CD E4 0D               CALL   flushBuffer   
2C6B   76                     HALT      
2C6C                EXPECTM_3069S110:      
2C6C   E1                     POP   HL   
2C6D                          ;*Macro unroll:  test "1{}^", 1
2C6D   31 00 52               LD   SP,STACK   
2C70   CD A2 0E               CALL   coldInit   
2C73   CD 34 50               CALL   execStr   
2C76   31 7B 7D 5E 00         DB   "1{}^",0   
2C7B   CD E4 0D               CALL   flushBuffer   
2C7E   E1                     POP   HL   
2C7F   E5                     PUSH   HL   
2C80   11 01 00               LD   DE,1   
2C83   B7                     OR   A   
2C84   ED 52                  SBC   HL,DE   
2C86   7D                     LD   A,L   
2C87   B4                     OR   H   
2C88   CA E7 2C               JP   Z,expectM_3070S111   
2C8B   CD 6E 0E               CALL   printStr   
2C8E   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2C99   CD 6E 0E               CALL   printStr   
2C9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CAB   21 01 00               LD   hl,1   
2CAE   E5                     PUSH   hl   
2CAF   E5                     PUSH   hl   
2CB0   CD 73 0F               CALL   run   
2CB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CBB   CD E4 0D               CALL   flushBuffer   
2CBE   CD 6E 0E               CALL   printStr   
2CC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CCE   E1                     POP   hl   
2CCF   E5                     PUSH   hl   
2CD0   E5                     PUSH   hl   
2CD1   CD 73 0F               CALL   run   
2CD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CE3   CD E4 0D               CALL   flushBuffer   
2CE6   76                     HALT      
2CE7                EXPECTM_3070S111:      
2CE7   E1                     POP   HL   
2CE8                          ;*Macro unroll:  test "{1}^", 1
2CE8   31 00 52               LD   SP,STACK   
2CEB   CD A2 0E               CALL   coldInit   
2CEE   CD 34 50               CALL   execStr   
2CF1   7B 31 7D 5E 00         DB   "{1}^",0   
2CF6   CD E4 0D               CALL   flushBuffer   
2CF9   E1                     POP   HL   
2CFA   E5                     PUSH   HL   
2CFB   11 01 00               LD   DE,1   
2CFE   B7                     OR   A   
2CFF   ED 52                  SBC   HL,DE   
2D01   7D                     LD   A,L   
2D02   B4                     OR   H   
2D03   CA 62 2D               JP   Z,expectM_3071S112   
2D06   CD 6E 0E               CALL   printStr   
2D09   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2D14   CD 6E 0E               CALL   printStr   
2D17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D26   21 01 00               LD   hl,1   
2D29   E5                     PUSH   hl   
2D2A   E5                     PUSH   hl   
2D2B   CD 73 0F               CALL   run   
2D2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D36   CD E4 0D               CALL   flushBuffer   
2D39   CD 6E 0E               CALL   printStr   
2D3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D49   E1                     POP   hl   
2D4A   E5                     PUSH   hl   
2D4B   E5                     PUSH   hl   
2D4C   CD 73 0F               CALL   run   
2D4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D5E   CD E4 0D               CALL   flushBuffer   
2D61   76                     HALT      
2D62                EXPECTM_3071S112:      
2D62   E1                     POP   HL   
2D63                          ;*Macro unroll:  test "{{1}^}^", 1
2D63   31 00 52               LD   SP,STACK   
2D66   CD A2 0E               CALL   coldInit   
2D69   CD 34 50               CALL   execStr   
2D6C   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2D74   CD E4 0D               CALL   flushBuffer   
2D77   E1                     POP   HL   
2D78   E5                     PUSH   HL   
2D79   11 01 00               LD   DE,1   
2D7C   B7                     OR   A   
2D7D   ED 52                  SBC   HL,DE   
2D7F   7D                     LD   A,L   
2D80   B4                     OR   H   
2D81   CA E3 2D               JP   Z,expectM_3072S113   
2D84   CD 6E 0E               CALL   printStr   
2D87   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2D95   CD 6E 0E               CALL   printStr   
2D98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DA7   21 01 00               LD   hl,1   
2DAA   E5                     PUSH   hl   
2DAB   E5                     PUSH   hl   
2DAC   CD 73 0F               CALL   run   
2DAF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DB7   CD E4 0D               CALL   flushBuffer   
2DBA   CD 6E 0E               CALL   printStr   
2DBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DCA   E1                     POP   hl   
2DCB   E5                     PUSH   hl   
2DCC   E5                     PUSH   hl   
2DCD   CD 73 0F               CALL   run   
2DD0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DDF   CD E4 0D               CALL   flushBuffer   
2DE2   76                     HALT      
2DE3                EXPECTM_3072S113:      
2DE3   E1                     POP   HL   
2DE4                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2DE4   31 00 52               LD   SP,STACK   
2DE7   CD A2 0E               CALL   coldInit   
2DEA   CD 34 50               CALL   execStr   
2DED   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2DF8   CD E4 0D               CALL   flushBuffer   
2DFB   E1                     POP   HL   
2DFC   E5                     PUSH   HL   
2DFD   11 01 00               LD   DE,1   
2E00   B7                     OR   A   
2E01   ED 52                  SBC   HL,DE   
2E03   7D                     LD   A,L   
2E04   B4                     OR   H   
2E05   CA 6A 2E               JP   Z,expectM_3073S114   
2E08   CD 6E 0E               CALL   printStr   
2E0B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2E1C   CD 6E 0E               CALL   printStr   
2E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2E   21 01 00               LD   hl,1   
2E31   E5                     PUSH   hl   
2E32   E5                     PUSH   hl   
2E33   CD 73 0F               CALL   run   
2E36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E3E   CD E4 0D               CALL   flushBuffer   
2E41   CD 6E 0E               CALL   printStr   
2E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E51   E1                     POP   hl   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD 73 0F               CALL   run   
2E57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E66   CD E4 0D               CALL   flushBuffer   
2E69   76                     HALT      
2E6A                EXPECTM_3073S114:      
2E6A   E1                     POP   HL   
2E6B                          ;*Macro unroll:  test "5 /f{10} ?", 5
2E6B   31 00 52               LD   SP,STACK   
2E6E   CD A2 0E               CALL   coldInit   
2E71   CD 34 50               CALL   execStr   
2E74   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2E7F   CD E4 0D               CALL   flushBuffer   
2E82   E1                     POP   HL   
2E83   E5                     PUSH   HL   
2E84   11 05 00               LD   DE,5   
2E87   B7                     OR   A   
2E88   ED 52                  SBC   HL,DE   
2E8A   7D                     LD   A,L   
2E8B   B4                     OR   H   
2E8C   CA F1 2E               JP   Z,expectM_3074S115   
2E8F   CD 6E 0E               CALL   printStr   
2E92   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2EA3   CD 6E 0E               CALL   printStr   
2EA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB5   21 05 00               LD   hl,5   
2EB8   E5                     PUSH   hl   
2EB9   E5                     PUSH   hl   
2EBA   CD 73 0F               CALL   run   
2EBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EC5   CD E4 0D               CALL   flushBuffer   
2EC8   CD 6E 0E               CALL   printStr   
2ECB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED8   E1                     POP   hl   
2ED9   E5                     PUSH   hl   
2EDA   E5                     PUSH   hl   
2EDB   CD 73 0F               CALL   run   
2EDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EED   CD E4 0D               CALL   flushBuffer   
2EF0   76                     HALT      
2EF1                EXPECTM_3074S115:      
2EF1   E1                     POP   HL   
2EF2                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2EF2   31 00 52               LD   SP,STACK   
2EF5   CD A2 0E               CALL   coldInit   
2EF8   CD 34 50               CALL   execStr   
2EFB   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2F08   CD E4 0D               CALL   flushBuffer   
2F0B   E1                     POP   HL   
2F0C   E5                     PUSH   HL   
2F0D   11 0F 00               LD   DE,15   
2F10   B7                     OR   A   
2F11   ED 52                  SBC   HL,DE   
2F13   7D                     LD   A,L   
2F14   B4                     OR   H   
2F15   CA 7C 2F               JP   Z,expectM_3075S116   
2F18   CD 6E 0E               CALL   printStr   
2F1B   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2F2E   CD 6E 0E               CALL   printStr   
2F31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F40   21 0F 00               LD   hl,15   
2F43   E5                     PUSH   hl   
2F44   E5                     PUSH   hl   
2F45   CD 73 0F               CALL   run   
2F48   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F50   CD E4 0D               CALL   flushBuffer   
2F53   CD 6E 0E               CALL   printStr   
2F56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F63   E1                     POP   hl   
2F64   E5                     PUSH   hl   
2F65   E5                     PUSH   hl   
2F66   CD 73 0F               CALL   run   
2F69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F78   CD E4 0D               CALL   flushBuffer   
2F7B   76                     HALT      
2F7C                EXPECTM_3075S116:      
2F7C   E1                     POP   HL   
2F7D                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2F7D   31 00 52               LD   SP,STACK   
2F80   CD A2 0E               CALL   coldInit   
2F83   CD 34 50               CALL   execStr   
2F86   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2F98   CD E4 0D               CALL   flushBuffer   
2F9B   E1                     POP   HL   
2F9C   E5                     PUSH   HL   
2F9D   11 15 00               LD   DE,21   
2FA0   B7                     OR   A   
2FA1   ED 52                  SBC   HL,DE   
2FA3   7D                     LD   A,L   
2FA4   B4                     OR   H   
2FA5   CA 11 30               JP   Z,expectM_3076S117   
2FA8   CD 6E 0E               CALL   printStr   
2FAB   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2FC3   CD 6E 0E               CALL   printStr   
2FC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD5   21 15 00               LD   hl,21   
2FD8   E5                     PUSH   hl   
2FD9   E5                     PUSH   hl   
2FDA   CD 73 0F               CALL   run   
2FDD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FE5   CD E4 0D               CALL   flushBuffer   
2FE8   CD 6E 0E               CALL   printStr   
2FEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FF8   E1                     POP   hl   
2FF9   E5                     PUSH   hl   
2FFA   E5                     PUSH   hl   
2FFB   CD 73 0F               CALL   run   
2FFE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
300D   CD E4 0D               CALL   flushBuffer   
3010   76                     HALT      
3011                EXPECTM_3076S117:      
3011   E1                     POP   HL   
3012                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
3012   31 00 52               LD   SP,STACK   
3015   CD A2 0E               CALL   coldInit   
3018   CD 34 50               CALL   execStr   
301B   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
302D   CD E4 0D               CALL   flushBuffer   
3030   E1                     POP   HL   
3031   E5                     PUSH   HL   
3032   11 0B 00               LD   DE,11   
3035   B7                     OR   A   
3036   ED 52                  SBC   HL,DE   
3038   7D                     LD   A,L   
3039   B4                     OR   H   
303A   CA A6 30               JP   Z,expectM_3077S118   
303D   CD 6E 0E               CALL   printStr   
3040   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
3058   CD 6E 0E               CALL   printStr   
305B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
306A   21 0B 00               LD   hl,11   
306D   E5                     PUSH   hl   
306E   E5                     PUSH   hl   
306F   CD 73 0F               CALL   run   
3072   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
307A   CD E4 0D               CALL   flushBuffer   
307D   CD 6E 0E               CALL   printStr   
3080   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
308D   E1                     POP   hl   
308E   E5                     PUSH   hl   
308F   E5                     PUSH   hl   
3090   CD 73 0F               CALL   run   
3093   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30A2   CD E4 0D               CALL   flushBuffer   
30A5   76                     HALT      
30A6                EXPECTM_3077S118:      
30A6   E1                     POP   HL   
30A7                          ;*Macro unroll:  test "\\{2}^", 2
30A7   31 00 52               LD   SP,STACK   
30AA   CD A2 0E               CALL   coldInit   
30AD   CD 34 50               CALL   execStr   
30B0   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
30B6   CD E4 0D               CALL   flushBuffer   
30B9   E1                     POP   HL   
30BA   E5                     PUSH   HL   
30BB   11 02 00               LD   DE,2   
30BE   B7                     OR   A   
30BF   ED 52                  SBC   HL,DE   
30C1   7D                     LD   A,L   
30C2   B4                     OR   H   
30C3   CA 23 31               JP   Z,expectM_3078S119   
30C6   CD 6E 0E               CALL   printStr   
30C9   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
30D5   CD 6E 0E               CALL   printStr   
30D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E7   21 02 00               LD   hl,2   
30EA   E5                     PUSH   hl   
30EB   E5                     PUSH   hl   
30EC   CD 73 0F               CALL   run   
30EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F7   CD E4 0D               CALL   flushBuffer   
30FA   CD 6E 0E               CALL   printStr   
30FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310A   E1                     POP   hl   
310B   E5                     PUSH   hl   
310C   E5                     PUSH   hl   
310D   CD 73 0F               CALL   run   
3110   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
311F   CD E4 0D               CALL   flushBuffer   
3122   76                     HALT      
3123                EXPECTM_3078S119:      
3123   E1                     POP   HL   
3124                          ;*Macro unroll:  test "\\a{2}^", 2
3124   31 00 52               LD   SP,STACK   
3127   CD A2 0E               CALL   coldInit   
312A   CD 34 50               CALL   execStr   
312D   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3134   CD E4 0D               CALL   flushBuffer   
3137   E1                     POP   HL   
3138   E5                     PUSH   HL   
3139   11 02 00               LD   DE,2   
313C   B7                     OR   A   
313D   ED 52                  SBC   HL,DE   
313F   7D                     LD   A,L   
3140   B4                     OR   H   
3141   CA A2 31               JP   Z,expectM_3079S120   
3144   CD 6E 0E               CALL   printStr   
3147   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3154   CD 6E 0E               CALL   printStr   
3157   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3166   21 02 00               LD   hl,2   
3169   E5                     PUSH   hl   
316A   E5                     PUSH   hl   
316B   CD 73 0F               CALL   run   
316E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3176   CD E4 0D               CALL   flushBuffer   
3179   CD 6E 0E               CALL   printStr   
317C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3189   E1                     POP   hl   
318A   E5                     PUSH   hl   
318B   E5                     PUSH   hl   
318C   CD 73 0F               CALL   run   
318F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
319E   CD E4 0D               CALL   flushBuffer   
31A1   76                     HALT      
31A2                EXPECTM_3079S120:      
31A2   E1                     POP   HL   
31A3                          ;*Macro unroll:  test "5 \\a{%a}^", 5
31A3   31 00 52               LD   SP,STACK   
31A6   CD A2 0E               CALL   coldInit   
31A9   CD 34 50               CALL   execStr   
31AC   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
31B6   CD E4 0D               CALL   flushBuffer   
31B9   E1                     POP   HL   
31BA   E5                     PUSH   HL   
31BB   11 05 00               LD   DE,5   
31BE   B7                     OR   A   
31BF   ED 52                  SBC   HL,DE   
31C1   7D                     LD   A,L   
31C2   B4                     OR   H   
31C3   CA 27 32               JP   Z,expectM_3080S121   
31C6   CD 6E 0E               CALL   printStr   
31C9   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
31D9   CD 6E 0E               CALL   printStr   
31DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EB   21 05 00               LD   hl,5   
31EE   E5                     PUSH   hl   
31EF   E5                     PUSH   hl   
31F0   CD 73 0F               CALL   run   
31F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FB   CD E4 0D               CALL   flushBuffer   
31FE   CD 6E 0E               CALL   printStr   
3201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320E   E1                     POP   hl   
320F   E5                     PUSH   hl   
3210   E5                     PUSH   hl   
3211   CD 73 0F               CALL   run   
3214   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3223   CD E4 0D               CALL   flushBuffer   
3226   76                     HALT      
3227                EXPECTM_3080S121:      
3227   E1                     POP   HL   
3228                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3228   31 00 52               LD   SP,STACK   
322B   CD A2 0E               CALL   coldInit   
322E   CD 34 50               CALL   execStr   
3231   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
323D   CD E4 0D               CALL   flushBuffer   
3240   E1                     POP   HL   
3241   E5                     PUSH   HL   
3242   11 05 00               LD   DE,5   
3245   B7                     OR   A   
3246   ED 52                  SBC   HL,DE   
3248   7D                     LD   A,L   
3249   B4                     OR   H   
324A   CA B0 32               JP   Z,expectM_3081S122   
324D   CD 6E 0E               CALL   printStr   
3250   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3262   CD 6E 0E               CALL   printStr   
3265   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3274   21 05 00               LD   hl,5   
3277   E5                     PUSH   hl   
3278   E5                     PUSH   hl   
3279   CD 73 0F               CALL   run   
327C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3284   CD E4 0D               CALL   flushBuffer   
3287   CD 6E 0E               CALL   printStr   
328A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3297   E1                     POP   hl   
3298   E5                     PUSH   hl   
3299   E5                     PUSH   hl   
329A   CD 73 0F               CALL   run   
329D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32AC   CD E4 0D               CALL   flushBuffer   
32AF   76                     HALT      
32B0                EXPECTM_3081S122:      
32B0   E1                     POP   HL   
32B1                          ;*Macro unroll:  test "\\a{{2}^}^", 2
32B1   31 00 52               LD   SP,STACK   
32B4   CD A2 0E               CALL   coldInit   
32B7   CD 34 50               CALL   execStr   
32BA   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
32C4   CD E4 0D               CALL   flushBuffer   
32C7   E1                     POP   HL   
32C8   E5                     PUSH   HL   
32C9   11 02 00               LD   DE,2   
32CC   B7                     OR   A   
32CD   ED 52                  SBC   HL,DE   
32CF   7D                     LD   A,L   
32D0   B4                     OR   H   
32D1   CA 35 33               JP   Z,expectM_3082S123   
32D4   CD 6E 0E               CALL   printStr   
32D7   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
32E7   CD 6E 0E               CALL   printStr   
32EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32F9   21 02 00               LD   hl,2   
32FC   E5                     PUSH   hl   
32FD   E5                     PUSH   hl   
32FE   CD 73 0F               CALL   run   
3301   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3309   CD E4 0D               CALL   flushBuffer   
330C   CD 6E 0E               CALL   printStr   
330F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
331C   E1                     POP   hl   
331D   E5                     PUSH   hl   
331E   E5                     PUSH   hl   
331F   CD 73 0F               CALL   run   
3322   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3331   CD E4 0D               CALL   flushBuffer   
3334   76                     HALT      
3335                EXPECTM_3082S123:      
3335   E1                     POP   HL   
3336                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3336   31 00 52               LD   SP,STACK   
3339   CD A2 0E               CALL   coldInit   
333C   CD 34 50               CALL   execStr   
333F   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
334E   CD E4 0D               CALL   flushBuffer   
3351   E1                     POP   HL   
3352   E5                     PUSH   HL   
3353   11 05 00               LD   DE,5   
3356   B7                     OR   A   
3357   ED 52                  SBC   HL,DE   
3359   7D                     LD   A,L   
335A   B4                     OR   H   
335B   CA C4 33               JP   Z,expectM_3083S124   
335E   CD 6E 0E               CALL   printStr   
3361   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3376   CD 6E 0E               CALL   printStr   
3379   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3388   21 05 00               LD   hl,5   
338B   E5                     PUSH   hl   
338C   E5                     PUSH   hl   
338D   CD 73 0F               CALL   run   
3390   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3398   CD E4 0D               CALL   flushBuffer   
339B   CD 6E 0E               CALL   printStr   
339E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33AB   E1                     POP   hl   
33AC   E5                     PUSH   hl   
33AD   E5                     PUSH   hl   
33AE   CD 73 0F               CALL   run   
33B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33C0   CD E4 0D               CALL   flushBuffer   
33C3   76                     HALT      
33C4                EXPECTM_3083S124:      
33C4   E1                     POP   HL   
33C5                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
33C5   31 00 52               LD   SP,STACK   
33C8   CD A2 0E               CALL   coldInit   
33CB   CD 34 50               CALL   execStr   
33CE   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
33DE   CD E4 0D               CALL   flushBuffer   
33E1   E1                     POP   HL   
33E2   E5                     PUSH   HL   
33E3   11 01 00               LD   DE,1   
33E6   B7                     OR   A   
33E7   ED 52                  SBC   HL,DE   
33E9   7D                     LD   A,L   
33EA   B4                     OR   H   
33EB   CA 55 34               JP   Z,expectM_3084S125   
33EE   CD 6E 0E               CALL   printStr   
33F1   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3407   CD 6E 0E               CALL   printStr   
340A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3419   21 01 00               LD   hl,1   
341C   E5                     PUSH   hl   
341D   E5                     PUSH   hl   
341E   CD 73 0F               CALL   run   
3421   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3429   CD E4 0D               CALL   flushBuffer   
342C   CD 6E 0E               CALL   printStr   
342F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
343C   E1                     POP   hl   
343D   E5                     PUSH   hl   
343E   E5                     PUSH   hl   
343F   CD 73 0F               CALL   run   
3442   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3451   CD E4 0D               CALL   flushBuffer   
3454   76                     HALT      
3455                EXPECTM_3084S125:      
3455   E1                     POP   HL   
3456                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3456   31 00 52               LD   SP,STACK   
3459   CD A2 0E               CALL   coldInit   
345C   CD 34 50               CALL   execStr   
345F   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3472   CD E4 0D               CALL   flushBuffer   
3475   E1                     POP   HL   
3476   E5                     PUSH   HL   
3477   11 07 00               LD   DE,7   
347A   B7                     OR   A   
347B   ED 52                  SBC   HL,DE   
347D   7D                     LD   A,L   
347E   B4                     OR   H   
347F   CA EC 34               JP   Z,expectM_3085S126   
3482   CD 6E 0E               CALL   printStr   
3485   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
349E   CD 6E 0E               CALL   printStr   
34A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34B0   21 07 00               LD   hl,7   
34B3   E5                     PUSH   hl   
34B4   E5                     PUSH   hl   
34B5   CD 73 0F               CALL   run   
34B8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34C0   CD E4 0D               CALL   flushBuffer   
34C3   CD 6E 0E               CALL   printStr   
34C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34D3   E1                     POP   hl   
34D4   E5                     PUSH   hl   
34D5   E5                     PUSH   hl   
34D6   CD 73 0F               CALL   run   
34D9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34E8   CD E4 0D               CALL   flushBuffer   
34EB   76                     HALT      
34EC                EXPECTM_3085S126:      
34EC   E1                     POP   HL   
34ED                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
34ED   31 00 52               LD   SP,STACK   
34F0   CD A2 0E               CALL   coldInit   
34F3   CD 34 50               CALL   execStr   
34F6   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
350B   CD E4 0D               CALL   flushBuffer   
350E   E1                     POP   HL   
350F   E5                     PUSH   HL   
3510   11 06 00               LD   DE,6   
3513   B7                     OR   A   
3514   ED 52                  SBC   HL,DE   
3516   7D                     LD   A,L   
3517   B4                     OR   H   
3518   CA 87 35               JP   Z,expectM_3086S127   
351B   CD 6E 0E               CALL   printStr   
351E   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3539   CD 6E 0E               CALL   printStr   
353C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
354B   21 06 00               LD   hl,6   
354E   E5                     PUSH   hl   
354F   E5                     PUSH   hl   
3550   CD 73 0F               CALL   run   
3553   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
355B   CD E4 0D               CALL   flushBuffer   
355E   CD 6E 0E               CALL   printStr   
3561   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
356E   E1                     POP   hl   
356F   E5                     PUSH   hl   
3570   E5                     PUSH   hl   
3571   CD 73 0F               CALL   run   
3574   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3583   CD E4 0D               CALL   flushBuffer   
3586   76                     HALT      
3587                EXPECTM_3086S127:      
3587   E1                     POP   HL   
3588                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3588   31 00 52               LD   SP,STACK   
358B   CD A2 0E               CALL   coldInit   
358E   CD 34 50               CALL   execStr   
3591   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
359F   CD E4 0D               CALL   flushBuffer   
35A2   E1                     POP   HL   
35A3   E5                     PUSH   HL   
35A4   11 02 00               LD   DE,2   
35A7   B7                     OR   A   
35A8   ED 52                  SBC   HL,DE   
35AA   7D                     LD   A,L   
35AB   B4                     OR   H   
35AC   CA 14 36               JP   Z,expectM_3087S128   
35AF   CD 6E 0E               CALL   printStr   
35B2   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
35C6   CD 6E 0E               CALL   printStr   
35C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D8   21 02 00               LD   hl,2   
35DB   E5                     PUSH   hl   
35DC   E5                     PUSH   hl   
35DD   CD 73 0F               CALL   run   
35E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35E8   CD E4 0D               CALL   flushBuffer   
35EB   CD 6E 0E               CALL   printStr   
35EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35FB   E1                     POP   hl   
35FC   E5                     PUSH   hl   
35FD   E5                     PUSH   hl   
35FE   CD 73 0F               CALL   run   
3601   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3610   CD E4 0D               CALL   flushBuffer   
3613   76                     HALT      
3614                EXPECTM_3087S128:      
3614   E1                     POP   HL   
3615                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3615   31 00 52               LD   SP,STACK   
3618   CD A2 0E               CALL   coldInit   
361B   CD 34 50               CALL   execStr   
361E   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
362F   CD E4 0D               CALL   flushBuffer   
3632   E1                     POP   HL   
3633   E5                     PUSH   HL   
3634   11 01 00               LD   DE,1   
3637   B7                     OR   A   
3638   ED 52                  SBC   HL,DE   
363A   7D                     LD   A,L   
363B   B4                     OR   H   
363C   CA A7 36               JP   Z,expectM_3088S129   
363F   CD 6E 0E               CALL   printStr   
3642   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3659   CD 6E 0E               CALL   printStr   
365C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366B   21 01 00               LD   hl,1   
366E   E5                     PUSH   hl   
366F   E5                     PUSH   hl   
3670   CD 73 0F               CALL   run   
3673   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
367B   CD E4 0D               CALL   flushBuffer   
367E   CD 6E 0E               CALL   printStr   
3681   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
368E   E1                     POP   hl   
368F   E5                     PUSH   hl   
3690   E5                     PUSH   hl   
3691   CD 73 0F               CALL   run   
3694   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36A3   CD E4 0D               CALL   flushBuffer   
36A6   76                     HALT      
36A7                EXPECTM_3088S129:      
36A7   E1                     POP   HL   
36A8                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
36A8   31 00 52               LD   SP,STACK   
36AB   CD A2 0E               CALL   coldInit   
36AE   CD 34 50               CALL   execStr   
36B1   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
36C3   CD E4 0D               CALL   flushBuffer   
36C6   E1                     POP   HL   
36C7   E5                     PUSH   HL   
36C8   11 02 00               LD   DE,2   
36CB   B7                     OR   A   
36CC   ED 52                  SBC   HL,DE   
36CE   7D                     LD   A,L   
36CF   B4                     OR   H   
36D0   CA 3C 37               JP   Z,expectM_3089S130   
36D3   CD 6E 0E               CALL   printStr   
36D6   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
36EE   CD 6E 0E               CALL   printStr   
36F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3700   21 02 00               LD   hl,2   
3703   E5                     PUSH   hl   
3704   E5                     PUSH   hl   
3705   CD 73 0F               CALL   run   
3708   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3710   CD E4 0D               CALL   flushBuffer   
3713   CD 6E 0E               CALL   printStr   
3716   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3723   E1                     POP   hl   
3724   E5                     PUSH   hl   
3725   E5                     PUSH   hl   
3726   CD 73 0F               CALL   run   
3729   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3738   CD E4 0D               CALL   flushBuffer   
373B   76                     HALT      
373C                EXPECTM_3089S130:      
373C   E1                     POP   HL   
373D                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
373D   31 00 52               LD   SP,STACK   
3740   CD A2 0E               CALL   coldInit   
3743   CD 34 50               CALL   execStr   
3746   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3759   CD E4 0D               CALL   flushBuffer   
375C   E1                     POP   HL   
375D   E5                     PUSH   HL   
375E   11 02 00               LD   DE,2   
3761   B7                     OR   A   
3762   ED 52                  SBC   HL,DE   
3764   7D                     LD   A,L   
3765   B4                     OR   H   
3766   CA D3 37               JP   Z,expectM_3090S131   
3769   CD 6E 0E               CALL   printStr   
376C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3785   CD 6E 0E               CALL   printStr   
3788   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3797   21 02 00               LD   hl,2   
379A   E5                     PUSH   hl   
379B   E5                     PUSH   hl   
379C   CD 73 0F               CALL   run   
379F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37A7   CD E4 0D               CALL   flushBuffer   
37AA   CD 6E 0E               CALL   printStr   
37AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37BA   E1                     POP   hl   
37BB   E5                     PUSH   hl   
37BC   E5                     PUSH   hl   
37BD   CD 73 0F               CALL   run   
37C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37CF   CD E4 0D               CALL   flushBuffer   
37D2   76                     HALT      
37D3                EXPECTM_3090S131:      
37D3   E1                     POP   HL   
37D4                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
37D4   31 00 52               LD   SP,STACK   
37D7   CD A2 0E               CALL   coldInit   
37DA   CD 34 50               CALL   execStr   
37DD   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
37EF   CD E4 0D               CALL   flushBuffer   
37F2   E1                     POP   HL   
37F3   E5                     PUSH   HL   
37F4   11 02 00               LD   DE,2   
37F7   B7                     OR   A   
37F8   ED 52                  SBC   HL,DE   
37FA   7D                     LD   A,L   
37FB   B4                     OR   H   
37FC   CA 68 38               JP   Z,expectM_3091S132   
37FF   CD 6E 0E               CALL   printStr   
3802   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
381A   CD 6E 0E               CALL   printStr   
381D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
382C   21 02 00               LD   hl,2   
382F   E5                     PUSH   hl   
3830   E5                     PUSH   hl   
3831   CD 73 0F               CALL   run   
3834   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
383C   CD E4 0D               CALL   flushBuffer   
383F   CD 6E 0E               CALL   printStr   
3842   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
384F   E1                     POP   hl   
3850   E5                     PUSH   hl   
3851   E5                     PUSH   hl   
3852   CD 73 0F               CALL   run   
3855   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3864   CD E4 0D               CALL   flushBuffer   
3867   76                     HALT      
3868                EXPECTM_3091S132:      
3868   E1                     POP   HL   
3869                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3869   31 00 52               LD   SP,STACK   
386C   CD A2 0E               CALL   coldInit   
386F   CD 34 50               CALL   execStr   
3872   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
388B   CD E4 0D               CALL   flushBuffer   
388E   E1                     POP   HL   
388F   E5                     PUSH   HL   
3890   11 05 00               LD   DE,5   
3893   B7                     OR   A   
3894   ED 52                  SBC   HL,DE   
3896   7D                     LD   A,L   
3897   B4                     OR   H   
3898   CA 0B 39               JP   Z,expectM_3092S133   
389B   CD 6E 0E               CALL   printStr   
389E   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
38BD   CD 6E 0E               CALL   printStr   
38C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38CF   21 05 00               LD   hl,5   
38D2   E5                     PUSH   hl   
38D3   E5                     PUSH   hl   
38D4   CD 73 0F               CALL   run   
38D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38DF   CD E4 0D               CALL   flushBuffer   
38E2   CD 6E 0E               CALL   printStr   
38E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F2   E1                     POP   hl   
38F3   E5                     PUSH   hl   
38F4   E5                     PUSH   hl   
38F5   CD 73 0F               CALL   run   
38F8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3907   CD E4 0D               CALL   flushBuffer   
390A   76                     HALT      
390B                EXPECTM_3092S133:      
390B   E1                     POP   HL   
390C                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
390C   31 00 52               LD   SP,STACK   
390F   CD A2 0E               CALL   coldInit   
3912   CD 34 50               CALL   execStr   
3915   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3925   CD E4 0D               CALL   flushBuffer   
3928   E1                     POP   HL   
3929   E5                     PUSH   HL   
392A   11 02 00               LD   DE,2   
392D   B7                     OR   A   
392E   ED 52                  SBC   HL,DE   
3930   7D                     LD   A,L   
3931   B4                     OR   H   
3932   CA 9C 39               JP   Z,expectM_3093S134   
3935   CD 6E 0E               CALL   printStr   
3938   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
394E   CD 6E 0E               CALL   printStr   
3951   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3960   21 02 00               LD   hl,2   
3963   E5                     PUSH   hl   
3964   E5                     PUSH   hl   
3965   CD 73 0F               CALL   run   
3968   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3970   CD E4 0D               CALL   flushBuffer   
3973   CD 6E 0E               CALL   printStr   
3976   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3983   E1                     POP   hl   
3984   E5                     PUSH   hl   
3985   E5                     PUSH   hl   
3986   CD 73 0F               CALL   run   
3989   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3998   CD E4 0D               CALL   flushBuffer   
399B   76                     HALT      
399C                EXPECTM_3093S134:      
399C   E1                     POP   HL   
399D                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
399D   31 00 52               LD   SP,STACK   
39A0   CD A2 0E               CALL   coldInit   
39A3   CD 34 50               CALL   execStr   
39A6   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
39BD   CD E4 0D               CALL   flushBuffer   
39C0   E1                     POP   HL   
39C1   E5                     PUSH   HL   
39C2   11 64 00               LD   DE,100   
39C5   B7                     OR   A   
39C6   ED 52                  SBC   HL,DE   
39C8   7D                     LD   A,L   
39C9   B4                     OR   H   
39CA   CA 3B 3A               JP   Z,expectM_3094S135   
39CD   CD 6E 0E               CALL   printStr   
39D0   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
39ED   CD 6E 0E               CALL   printStr   
39F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39FF   21 64 00               LD   hl,100   
3A02   E5                     PUSH   hl   
3A03   E5                     PUSH   hl   
3A04   CD 73 0F               CALL   run   
3A07   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A0F   CD E4 0D               CALL   flushBuffer   
3A12   CD 6E 0E               CALL   printStr   
3A15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A22   E1                     POP   hl   
3A23   E5                     PUSH   hl   
3A24   E5                     PUSH   hl   
3A25   CD 73 0F               CALL   run   
3A28   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A37   CD E4 0D               CALL   flushBuffer   
3A3A   76                     HALT      
3A3B                EXPECTM_3094S135:      
3A3B   E1                     POP   HL   
3A3C                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3A3C   31 00 52               LD   SP,STACK   
3A3F   CD A2 0E               CALL   coldInit   
3A42   CD 34 50               CALL   execStr   
3A45   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3A5D   CD E4 0D               CALL   flushBuffer   
3A60   E1                     POP   HL   
3A61   E5                     PUSH   HL   
3A62   11 01 00               LD   DE,1   
3A65   B7                     OR   A   
3A66   ED 52                  SBC   HL,DE   
3A68   7D                     LD   A,L   
3A69   B4                     OR   H   
3A6A   CA DC 3A               JP   Z,expectM_3095S136   
3A6D   CD 6E 0E               CALL   printStr   
3A70   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3A8E   CD 6E 0E               CALL   printStr   
3A91   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA0   21 01 00               LD   hl,1   
3AA3   E5                     PUSH   hl   
3AA4   E5                     PUSH   hl   
3AA5   CD 73 0F               CALL   run   
3AA8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AB0   CD E4 0D               CALL   flushBuffer   
3AB3   CD 6E 0E               CALL   printStr   
3AB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC3   E1                     POP   hl   
3AC4   E5                     PUSH   hl   
3AC5   E5                     PUSH   hl   
3AC6   CD 73 0F               CALL   run   
3AC9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AD8   CD E4 0D               CALL   flushBuffer   
3ADB   76                     HALT      
3ADC                EXPECTM_3095S136:      
3ADC   E1                     POP   HL   
3ADD                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3ADD   31 00 52               LD   SP,STACK   
3AE0   CD A2 0E               CALL   coldInit   
3AE3   CD 34 50               CALL   execStr   
3AE6   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3AFF   CD E4 0D               CALL   flushBuffer   
3B02   E1                     POP   HL   
3B03   E5                     PUSH   HL   
3B04   11 02 00               LD   DE,2   
3B07   B7                     OR   A   
3B08   ED 52                  SBC   HL,DE   
3B0A   7D                     LD   A,L   
3B0B   B4                     OR   H   
3B0C   CA 7F 3B               JP   Z,expectM_3096S137   
3B0F   CD 6E 0E               CALL   printStr   
3B12   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3B31   CD 6E 0E               CALL   printStr   
3B34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B43   21 02 00               LD   hl,2   
3B46   E5                     PUSH   hl   
3B47   E5                     PUSH   hl   
3B48   CD 73 0F               CALL   run   
3B4B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B53   CD E4 0D               CALL   flushBuffer   
3B56   CD 6E 0E               CALL   printStr   
3B59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B66   E1                     POP   hl   
3B67   E5                     PUSH   hl   
3B68   E5                     PUSH   hl   
3B69   CD 73 0F               CALL   run   
3B6C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B7B   CD E4 0D               CALL   flushBuffer   
3B7E   76                     HALT      
3B7F                EXPECTM_3096S137:      
3B7F   E1                     POP   HL   
3B80                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3B80   31 00 52               LD   SP,STACK   
3B83   CD A2 0E               CALL   coldInit   
3B86   CD 34 50               CALL   execStr   
3B89   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3BA7   CD E4 0D               CALL   flushBuffer   
3BAA   E1                     POP   HL   
3BAB   E5                     PUSH   HL   
3BAC   11 0B 00               LD   DE,11   
3BAF   B7                     OR   A   
3BB0   ED 52                  SBC   HL,DE   
3BB2   7D                     LD   A,L   
3BB3   B4                     OR   H   
3BB4   CA 2C 3C               JP   Z,expectM_3097S138   
3BB7   CD 6E 0E               CALL   printStr   
3BBA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3BDE   CD 6E 0E               CALL   printStr   
3BE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BF0   21 0B 00               LD   hl,11   
3BF3   E5                     PUSH   hl   
3BF4   E5                     PUSH   hl   
3BF5   CD 73 0F               CALL   run   
3BF8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C00   CD E4 0D               CALL   flushBuffer   
3C03   CD 6E 0E               CALL   printStr   
3C06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C13   E1                     POP   hl   
3C14   E5                     PUSH   hl   
3C15   E5                     PUSH   hl   
3C16   CD 73 0F               CALL   run   
3C19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C28   CD E4 0D               CALL   flushBuffer   
3C2B   76                     HALT      
3C2C                EXPECTM_3097S138:      
3C2C   E1                     POP   HL   
3C2D                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3C2D   31 00 52               LD   SP,STACK   
3C30   CD A2 0E               CALL   coldInit   
3C33   CD 34 50               CALL   execStr   
3C36   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3C54   CD E4 0D               CALL   flushBuffer   
3C57   E1                     POP   HL   
3C58   E5                     PUSH   HL   
3C59   11 15 00               LD   DE,21   
3C5C   B7                     OR   A   
3C5D   ED 52                  SBC   HL,DE   
3C5F   7D                     LD   A,L   
3C60   B4                     OR   H   
3C61   CA D9 3C               JP   Z,expectM_3098S139   
3C64   CD 6E 0E               CALL   printStr   
3C67   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3C8B   CD 6E 0E               CALL   printStr   
3C8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C9D   21 15 00               LD   hl,21   
3CA0   E5                     PUSH   hl   
3CA1   E5                     PUSH   hl   
3CA2   CD 73 0F               CALL   run   
3CA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CAD   CD E4 0D               CALL   flushBuffer   
3CB0   CD 6E 0E               CALL   printStr   
3CB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CC0   E1                     POP   hl   
3CC1   E5                     PUSH   hl   
3CC2   E5                     PUSH   hl   
3CC3   CD 73 0F               CALL   run   
3CC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CD5   CD E4 0D               CALL   flushBuffer   
3CD8   76                     HALT      
3CD9                EXPECTM_3098S139:      
3CD9   E1                     POP   HL   
3CDA                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3CDA   31 00 52               LD   SP,STACK   
3CDD   CD A2 0E               CALL   coldInit   
3CE0   CD 34 50               CALL   execStr   
3CE3   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3CF1   CD E4 0D               CALL   flushBuffer   
3CF4   E1                     POP   HL   
3CF5   E5                     PUSH   HL   
3CF6   11 14 00               LD   DE,20   
3CF9   B7                     OR   A   
3CFA   ED 52                  SBC   HL,DE   
3CFC   7D                     LD   A,L   
3CFD   B4                     OR   H   
3CFE   CA 66 3D               JP   Z,expectM_3099S140   
3D01   CD 6E 0E               CALL   printStr   
3D04   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3D18   CD 6E 0E               CALL   printStr   
3D1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D2A   21 14 00               LD   hl,20   
3D2D   E5                     PUSH   hl   
3D2E   E5                     PUSH   hl   
3D2F   CD 73 0F               CALL   run   
3D32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D3A   CD E4 0D               CALL   flushBuffer   
3D3D   CD 6E 0E               CALL   printStr   
3D40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D4D   E1                     POP   hl   
3D4E   E5                     PUSH   hl   
3D4F   E5                     PUSH   hl   
3D50   CD 73 0F               CALL   run   
3D53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D62   CD E4 0D               CALL   flushBuffer   
3D65   76                     HALT      
3D66                EXPECTM_3099S140:      
3D66   E1                     POP   HL   
3D67                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3D67   31 00 52               LD   SP,STACK   
3D6A   CD A2 0E               CALL   coldInit   
3D6D   CD 34 50               CALL   execStr   
3D70   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3D82   CD E4 0D               CALL   flushBuffer   
3D85   E1                     POP   HL   
3D86   E5                     PUSH   HL   
3D87   11 04 00               LD   DE,4   
3D8A   B7                     OR   A   
3D8B   ED 52                  SBC   HL,DE   
3D8D   7D                     LD   A,L   
3D8E   B4                     OR   H   
3D8F   CA FB 3D               JP   Z,expectM_3100S141   
3D92   CD 6E 0E               CALL   printStr   
3D95   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3DAD   CD 6E 0E               CALL   printStr   
3DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DBF   21 04 00               LD   hl,4   
3DC2   E5                     PUSH   hl   
3DC3   E5                     PUSH   hl   
3DC4   CD 73 0F               CALL   run   
3DC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DCF   CD E4 0D               CALL   flushBuffer   
3DD2   CD 6E 0E               CALL   printStr   
3DD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DE2   E1                     POP   hl   
3DE3   E5                     PUSH   hl   
3DE4   E5                     PUSH   hl   
3DE5   CD 73 0F               CALL   run   
3DE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF7   CD E4 0D               CALL   flushBuffer   
3DFA   76                     HALT      
3DFB                EXPECTM_3100S141:      
3DFB   E1                     POP   HL   
3DFC                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3DFC   31 00 52               LD   SP,STACK   
3DFF   CD A2 0E               CALL   coldInit   
3E02   CD 34 50               CALL   execStr   
3E05   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3E13   CD E4 0D               CALL   flushBuffer   
3E16   E1                     POP   HL   
3E17   E5                     PUSH   HL   
3E18   11 02 00               LD   DE,2   
3E1B   B7                     OR   A   
3E1C   ED 52                  SBC   HL,DE   
3E1E   7D                     LD   A,L   
3E1F   B4                     OR   H   
3E20   CA 88 3E               JP   Z,expectM_3101S142   
3E23   CD 6E 0E               CALL   printStr   
3E26   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3E3A   CD 6E 0E               CALL   printStr   
3E3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4C   21 02 00               LD   hl,2   
3E4F   E5                     PUSH   hl   
3E50   E5                     PUSH   hl   
3E51   CD 73 0F               CALL   run   
3E54   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E5C   CD E4 0D               CALL   flushBuffer   
3E5F   CD 6E 0E               CALL   printStr   
3E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6F   E1                     POP   hl   
3E70   E5                     PUSH   hl   
3E71   E5                     PUSH   hl   
3E72   CD 73 0F               CALL   run   
3E75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E84   CD E4 0D               CALL   flushBuffer   
3E87   76                     HALT      
3E88                EXPECTM_3101S142:      
3E88   E1                     POP   HL   
3E89                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3E89   31 00 52               LD   SP,STACK   
3E8C   CD A2 0E               CALL   coldInit   
3E8F   CD 34 50               CALL   execStr   
3E92   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3EA6   CD E4 0D               CALL   flushBuffer   
3EA9   E1                     POP   HL   
3EAA   E5                     PUSH   HL   
3EAB   11 42 00               LD   DE,66   
3EAE   B7                     OR   A   
3EAF   ED 52                  SBC   HL,DE   
3EB1   7D                     LD   A,L   
3EB2   B4                     OR   H   
3EB3   CA 21 3F               JP   Z,expectM_3102S143   
3EB6   CD 6E 0E               CALL   printStr   
3EB9   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3ED3   CD 6E 0E               CALL   printStr   
3ED6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EE5   21 42 00               LD   hl,66   
3EE8   E5                     PUSH   hl   
3EE9   E5                     PUSH   hl   
3EEA   CD 73 0F               CALL   run   
3EED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EF5   CD E4 0D               CALL   flushBuffer   
3EF8   CD 6E 0E               CALL   printStr   
3EFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F08   E1                     POP   hl   
3F09   E5                     PUSH   hl   
3F0A   E5                     PUSH   hl   
3F0B   CD 73 0F               CALL   run   
3F0E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F1D   CD E4 0D               CALL   flushBuffer   
3F20   76                     HALT      
3F21                EXPECTM_3102S143:      
3F21   E1                     POP   HL   
3F22                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3F22   31 00 52               LD   SP,STACK   
3F25   CD A2 0E               CALL   coldInit   
3F28   CD 34 50               CALL   execStr   
3F2B   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3F3F   CD E4 0D               CALL   flushBuffer   
3F42   E1                     POP   HL   
3F43   E5                     PUSH   HL   
3F44   11 0A 00               LD   DE,10   
3F47   B7                     OR   A   
3F48   ED 52                  SBC   HL,DE   
3F4A   7D                     LD   A,L   
3F4B   B4                     OR   H   
3F4C   CA BA 3F               JP   Z,expectM_3103S144   
3F4F   CD 6E 0E               CALL   printStr   
3F52   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3F6C   CD 6E 0E               CALL   printStr   
3F6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F7E   21 0A 00               LD   hl,10   
3F81   E5                     PUSH   hl   
3F82   E5                     PUSH   hl   
3F83   CD 73 0F               CALL   run   
3F86   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F8E   CD E4 0D               CALL   flushBuffer   
3F91   CD 6E 0E               CALL   printStr   
3F94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA1   E1                     POP   hl   
3FA2   E5                     PUSH   hl   
3FA3   E5                     PUSH   hl   
3FA4   CD 73 0F               CALL   run   
3FA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FB6   CD E4 0D               CALL   flushBuffer   
3FB9   76                     HALT      
3FBA                EXPECTM_3103S144:      
3FBA   E1                     POP   HL   
3FBB                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3FBB   31 00 52               LD   SP,STACK   
3FBE   CD A2 0E               CALL   coldInit   
3FC1   CD 34 50               CALL   execStr   
3FC4   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3FDF   CD E4 0D               CALL   flushBuffer   
3FE2   E1                     POP   HL   
3FE3   E5                     PUSH   HL   
3FE4   11 0A 00               LD   DE,10   
3FE7   B7                     OR   A   
3FE8   ED 52                  SBC   HL,DE   
3FEA   7D                     LD   A,L   
3FEB   B4                     OR   H   
3FEC   CA 61 40               JP   Z,expectM_3104S145   
3FEF   CD 6E 0E               CALL   printStr   
3FF2   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
4013   CD 6E 0E               CALL   printStr   
4016   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4025   21 0A 00               LD   hl,10   
4028   E5                     PUSH   hl   
4029   E5                     PUSH   hl   
402A   CD 73 0F               CALL   run   
402D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4035   CD E4 0D               CALL   flushBuffer   
4038   CD 6E 0E               CALL   printStr   
403B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4048   E1                     POP   hl   
4049   E5                     PUSH   hl   
404A   E5                     PUSH   hl   
404B   CD 73 0F               CALL   run   
404E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
405D   CD E4 0D               CALL   flushBuffer   
4060   76                     HALT      
4061                EXPECTM_3104S145:      
4061   E1                     POP   HL   
4062                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
4062   31 00 52               LD   SP,STACK   
4065   CD A2 0E               CALL   coldInit   
4068   CD 34 50               CALL   execStr   
406B   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
408A   CD E4 0D               CALL   flushBuffer   
408D   E1                     POP   HL   
408E   E5                     PUSH   HL   
408F   11 0A 00               LD   DE,10   
4092   B7                     OR   A   
4093   ED 52                  SBC   HL,DE   
4095   7D                     LD   A,L   
4096   B4                     OR   H   
4097   CA 10 41               JP   Z,expectM_3105S146   
409A   CD 6E 0E               CALL   printStr   
409D   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
40C2   CD 6E 0E               CALL   printStr   
40C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D4   21 0A 00               LD   hl,10   
40D7   E5                     PUSH   hl   
40D8   E5                     PUSH   hl   
40D9   CD 73 0F               CALL   run   
40DC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40E4   CD E4 0D               CALL   flushBuffer   
40E7   CD 6E 0E               CALL   printStr   
40EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F7   E1                     POP   hl   
40F8   E5                     PUSH   hl   
40F9   E5                     PUSH   hl   
40FA   CD 73 0F               CALL   run   
40FD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
410C   CD E4 0D               CALL   flushBuffer   
410F   76                     HALT      
4110                EXPECTM_3105S146:      
4110   E1                     POP   HL   
4111                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
4111   31 00 52               LD   SP,STACK   
4114   CD A2 0E               CALL   coldInit   
4117   CD 34 50               CALL   execStr   
411A   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
4139   CD E4 0D               CALL   flushBuffer   
413C   E1                     POP   HL   
413D   E5                     PUSH   HL   
413E   11 14 00               LD   DE,20   
4141   B7                     OR   A   
4142   ED 52                  SBC   HL,DE   
4144   7D                     LD   A,L   
4145   B4                     OR   H   
4146   CA BF 41               JP   Z,expectM_3106S147   
4149   CD 6E 0E               CALL   printStr   
414C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
4171   CD 6E 0E               CALL   printStr   
4174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4183   21 14 00               LD   hl,20   
4186   E5                     PUSH   hl   
4187   E5                     PUSH   hl   
4188   CD 73 0F               CALL   run   
418B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4193   CD E4 0D               CALL   flushBuffer   
4196   CD 6E 0E               CALL   printStr   
4199   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A6   E1                     POP   hl   
41A7   E5                     PUSH   hl   
41A8   E5                     PUSH   hl   
41A9   CD 73 0F               CALL   run   
41AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41BB   CD E4 0D               CALL   flushBuffer   
41BE   76                     HALT      
41BF                EXPECTM_3106S147:      
41BF   E1                     POP   HL   
41C0                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
41C0   31 00 52               LD   SP,STACK   
41C3   CD A2 0E               CALL   coldInit   
41C6   CD 34 50               CALL   execStr   
41C9   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
41E1   CD E4 0D               CALL   flushBuffer   
41E4   E1                     POP   HL   
41E5   E5                     PUSH   HL   
41E6   11 06 00               LD   DE,6   
41E9   B7                     OR   A   
41EA   ED 52                  SBC   HL,DE   
41EC   7D                     LD   A,L   
41ED   B4                     OR   H   
41EE   CA 60 42               JP   Z,expectM_3107S148   
41F1   CD 6E 0E               CALL   printStr   
41F4   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
4212   CD 6E 0E               CALL   printStr   
4215   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4224   21 06 00               LD   hl,6   
4227   E5                     PUSH   hl   
4228   E5                     PUSH   hl   
4229   CD 73 0F               CALL   run   
422C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4234   CD E4 0D               CALL   flushBuffer   
4237   CD 6E 0E               CALL   printStr   
423A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4247   E1                     POP   hl   
4248   E5                     PUSH   hl   
4249   E5                     PUSH   hl   
424A   CD 73 0F               CALL   run   
424D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
425C   CD E4 0D               CALL   flushBuffer   
425F   76                     HALT      
4260                EXPECTM_3107S148:      
4260   E1                     POP   HL   
4261                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4261   31 00 52               LD   SP,STACK   
4264   CD A2 0E               CALL   coldInit   
4267   CD 34 50               CALL   execStr   
426A   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4285   CD E4 0D               CALL   flushBuffer   
4288   E1                     POP   HL   
4289   E5                     PUSH   HL   
428A   11 02 00               LD   DE,2   
428D   B7                     OR   A   
428E   ED 52                  SBC   HL,DE   
4290   7D                     LD   A,L   
4291   B4                     OR   H   
4292   CA 07 43               JP   Z,expectM_3108S149   
4295   CD 6E 0E               CALL   printStr   
4298   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
42B9   CD 6E 0E               CALL   printStr   
42BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CB   21 02 00               LD   hl,2   
42CE   E5                     PUSH   hl   
42CF   E5                     PUSH   hl   
42D0   CD 73 0F               CALL   run   
42D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42DB   CD E4 0D               CALL   flushBuffer   
42DE   CD 6E 0E               CALL   printStr   
42E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42EE   E1                     POP   hl   
42EF   E5                     PUSH   hl   
42F0   E5                     PUSH   hl   
42F1   CD 73 0F               CALL   run   
42F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4303   CD E4 0D               CALL   flushBuffer   
4306   76                     HALT      
4307                EXPECTM_3108S149:      
4307   E1                     POP   HL   
4308                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4308   31 00 52               LD   SP,STACK   
430B   CD A2 0E               CALL   coldInit   
430E   CD 34 50               CALL   execStr   
4311   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4337   CD E4 0D               CALL   flushBuffer   
433A   E1                     POP   HL   
433B   E5                     PUSH   HL   
433C   11 0A 00               LD   DE,10   
433F   B7                     OR   A   
4340   ED 52                  SBC   HL,DE   
4342   7D                     LD   A,L   
4343   B4                     OR   H   
4344   CA C4 43               JP   Z,expectM_3109S150   
4347   CD 6E 0E               CALL   printStr   
434A   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4376   CD 6E 0E               CALL   printStr   
4379   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4388   21 0A 00               LD   hl,10   
438B   E5                     PUSH   hl   
438C   E5                     PUSH   hl   
438D   CD 73 0F               CALL   run   
4390   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4398   CD E4 0D               CALL   flushBuffer   
439B   CD 6E 0E               CALL   printStr   
439E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AB   E1                     POP   hl   
43AC   E5                     PUSH   hl   
43AD   E5                     PUSH   hl   
43AE   CD 73 0F               CALL   run   
43B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43C0   CD E4 0D               CALL   flushBuffer   
43C3   76                     HALT      
43C4                EXPECTM_3109S150:      
43C4   E1                     POP   HL   
43C5                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
43C5   31 00 52               LD   SP,STACK   
43C8   CD A2 0E               CALL   coldInit   
43CB   CD 34 50               CALL   execStr   
43CE   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
43F9   CD E4 0D               CALL   flushBuffer   
43FC   E1                     POP   HL   
43FD   E5                     PUSH   HL   
43FE   11 06 00               LD   DE,6   
4401   B7                     OR   A   
4402   ED 52                  SBC   HL,DE   
4404   7D                     LD   A,L   
4405   B4                     OR   H   
4406   CA 8B 44               JP   Z,expectM_3110S151   
4409   CD 6E 0E               CALL   printStr   
440C   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
443D   CD 6E 0E               CALL   printStr   
4440   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
444F   21 06 00               LD   hl,6   
4452   E5                     PUSH   hl   
4453   E5                     PUSH   hl   
4454   CD 73 0F               CALL   run   
4457   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
445F   CD E4 0D               CALL   flushBuffer   
4462   CD 6E 0E               CALL   printStr   
4465   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4472   E1                     POP   hl   
4473   E5                     PUSH   hl   
4474   E5                     PUSH   hl   
4475   CD 73 0F               CALL   run   
4478   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4487   CD E4 0D               CALL   flushBuffer   
448A   76                     HALT      
448B                EXPECTM_3110S151:      
448B   E1                     POP   HL   
448C                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
448C   31 00 52               LD   SP,STACK   
448F   CD A2 0E               CALL   coldInit   
4492   CD 34 50               CALL   execStr   
4495   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
44A9   CD E4 0D               CALL   flushBuffer   
44AC   E1                     POP   HL   
44AD   E5                     PUSH   HL   
44AE   11 03 00               LD   DE,3   
44B1   B7                     OR   A   
44B2   ED 52                  SBC   HL,DE   
44B4   7D                     LD   A,L   
44B5   B4                     OR   H   
44B6   CA 24 45               JP   Z,expectM_3111S152   
44B9   CD 6E 0E               CALL   printStr   
44BC   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
44D6   CD 6E 0E               CALL   printStr   
44D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E8   21 03 00               LD   hl,3   
44EB   E5                     PUSH   hl   
44EC   E5                     PUSH   hl   
44ED   CD 73 0F               CALL   run   
44F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F8   CD E4 0D               CALL   flushBuffer   
44FB   CD 6E 0E               CALL   printStr   
44FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
450B   E1                     POP   hl   
450C   E5                     PUSH   hl   
450D   E5                     PUSH   hl   
450E   CD 73 0F               CALL   run   
4511   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4520   CD E4 0D               CALL   flushBuffer   
4523   76                     HALT      
4524                EXPECTM_3111S152:      
4524   E1                     POP   HL   
4525                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4525   31 00 52               LD   SP,STACK   
4528   CD A2 0E               CALL   coldInit   
452B   CD 34 50               CALL   execStr   
452E   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4542   CD E4 0D               CALL   flushBuffer   
4545   E1                     POP   HL   
4546   E5                     PUSH   HL   
4547   11 01 00               LD   DE,1   
454A   B7                     OR   A   
454B   ED 52                  SBC   HL,DE   
454D   7D                     LD   A,L   
454E   B4                     OR   H   
454F   CA BD 45               JP   Z,expectM_3112S153   
4552   CD 6E 0E               CALL   printStr   
4555   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
456F   CD 6E 0E               CALL   printStr   
4572   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4581   21 01 00               LD   hl,1   
4584   E5                     PUSH   hl   
4585   E5                     PUSH   hl   
4586   CD 73 0F               CALL   run   
4589   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4591   CD E4 0D               CALL   flushBuffer   
4594   CD 6E 0E               CALL   printStr   
4597   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45A4   E1                     POP   hl   
45A5   E5                     PUSH   hl   
45A6   E5                     PUSH   hl   
45A7   CD 73 0F               CALL   run   
45AA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45B9   CD E4 0D               CALL   flushBuffer   
45BC   76                     HALT      
45BD                EXPECTM_3112S153:      
45BD   E1                     POP   HL   
45BE                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
45BE   31 00 52               LD   SP,STACK   
45C1   CD A2 0E               CALL   coldInit   
45C4   CD 34 50               CALL   execStr   
45C7   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
45D3   CD E4 0D               CALL   flushBuffer   
45D6   E1                     POP   HL   
45D7   E5                     PUSH   HL   
45D8   11 00 00               LD   DE,NUL   
45DB   B7                     OR   A   
45DC   ED 52                  SBC   HL,DE   
45DE   7D                     LD   A,L   
45DF   B4                     OR   H   
45E0   CA 46 46               JP   Z,expectM_3113S154   
45E3   CD 6E 0E               CALL   printStr   
45E6   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
45F8   CD 6E 0E               CALL   printStr   
45FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
460A   21 00 00               LD   hl,NUL   
460D   E5                     PUSH   hl   
460E   E5                     PUSH   hl   
460F   CD 73 0F               CALL   run   
4612   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
461A   CD E4 0D               CALL   flushBuffer   
461D   CD 6E 0E               CALL   printStr   
4620   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
462D   E1                     POP   hl   
462E   E5                     PUSH   hl   
462F   E5                     PUSH   hl   
4630   CD 73 0F               CALL   run   
4633   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4642   CD E4 0D               CALL   flushBuffer   
4645   76                     HALT      
4646                EXPECTM_3113S154:      
4646   E1                     POP   HL   
4647                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4647   31 00 52               LD   SP,STACK   
464A   CD A2 0E               CALL   coldInit   
464D   CD 34 50               CALL   execStr   
4650   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
465C   CD E4 0D               CALL   flushBuffer   
465F   E1                     POP   HL   
4660   E5                     PUSH   HL   
4661   11 00 00               LD   DE,NUL   
4664   B7                     OR   A   
4665   ED 52                  SBC   HL,DE   
4667   7D                     LD   A,L   
4668   B4                     OR   H   
4669   CA CF 46               JP   Z,expectM_3114S155   
466C   CD 6E 0E               CALL   printStr   
466F   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4681   CD 6E 0E               CALL   printStr   
4684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4693   21 00 00               LD   hl,NUL   
4696   E5                     PUSH   hl   
4697   E5                     PUSH   hl   
4698   CD 73 0F               CALL   run   
469B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46A3   CD E4 0D               CALL   flushBuffer   
46A6   CD 6E 0E               CALL   printStr   
46A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46B6   E1                     POP   hl   
46B7   E5                     PUSH   hl   
46B8   E5                     PUSH   hl   
46B9   CD 73 0F               CALL   run   
46BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46CB   CD E4 0D               CALL   flushBuffer   
46CE   76                     HALT      
46CF                EXPECTM_3114S155:      
46CF   E1                     POP   HL   
46D0                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
46D0   31 00 52               LD   SP,STACK   
46D3   CD A2 0E               CALL   coldInit   
46D6   CD 34 50               CALL   execStr   
46D9   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
46E5   CD E4 0D               CALL   flushBuffer   
46E8   E1                     POP   HL   
46E9   E5                     PUSH   HL   
46EA   11 00 00               LD   DE,NUL   
46ED   B7                     OR   A   
46EE   ED 52                  SBC   HL,DE   
46F0   7D                     LD   A,L   
46F1   B4                     OR   H   
46F2   CA 58 47               JP   Z,expectM_3115S156   
46F5   CD 6E 0E               CALL   printStr   
46F8   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
470A   CD 6E 0E               CALL   printStr   
470D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
471C   21 00 00               LD   hl,NUL   
471F   E5                     PUSH   hl   
4720   E5                     PUSH   hl   
4721   CD 73 0F               CALL   run   
4724   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
472C   CD E4 0D               CALL   flushBuffer   
472F   CD 6E 0E               CALL   printStr   
4732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473F   E1                     POP   hl   
4740   E5                     PUSH   hl   
4741   E5                     PUSH   hl   
4742   CD 73 0F               CALL   run   
4745   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4754   CD E4 0D               CALL   flushBuffer   
4757   76                     HALT      
4758                EXPECTM_3115S156:      
4758   E1                     POP   HL   
4759                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4759   31 00 52               LD   SP,STACK   
475C   CD A2 0E               CALL   coldInit   
475F   CD 34 50               CALL   execStr   
4762   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
476E   CD E4 0D               CALL   flushBuffer   
4771   E1                     POP   HL   
4772   E5                     PUSH   HL   
4773   11 00 00               LD   DE,NUL   
4776   B7                     OR   A   
4777   ED 52                  SBC   HL,DE   
4779   7D                     LD   A,L   
477A   B4                     OR   H   
477B   CA E1 47               JP   Z,expectM_3116S157   
477E   CD 6E 0E               CALL   printStr   
4781   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4793   CD 6E 0E               CALL   printStr   
4796   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A5   21 00 00               LD   hl,NUL   
47A8   E5                     PUSH   hl   
47A9   E5                     PUSH   hl   
47AA   CD 73 0F               CALL   run   
47AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47B5   CD E4 0D               CALL   flushBuffer   
47B8   CD 6E 0E               CALL   printStr   
47BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47C8   E1                     POP   hl   
47C9   E5                     PUSH   hl   
47CA   E5                     PUSH   hl   
47CB   CD 73 0F               CALL   run   
47CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47DD   CD E4 0D               CALL   flushBuffer   
47E0   76                     HALT      
47E1                EXPECTM_3116S157:      
47E1   E1                     POP   HL   
47E2                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
47E2   31 00 52               LD   SP,STACK   
47E5   CD A2 0E               CALL   coldInit   
47E8   CD 34 50               CALL   execStr   
47EB   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
47F3   CD E4 0D               CALL   flushBuffer   
47F6   E1                     POP   HL   
47F7   E5                     PUSH   HL   
47F8   11 66 54               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
47FB   B7                     OR   A   
47FC   ED 52                  SBC   HL,DE   
47FE   7D                     LD   A,L   
47FF   B4                     OR   H   
4800   CA 62 48               JP   Z,expectM_3117S158   
4803   CD 6E 0E               CALL   printStr   
4806   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4814   CD 6E 0E               CALL   printStr   
4817   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4826   21 66 54               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4829   E5                     PUSH   hl   
482A   E5                     PUSH   hl   
482B   CD 73 0F               CALL   run   
482E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4836   CD E4 0D               CALL   flushBuffer   
4839   CD 6E 0E               CALL   printStr   
483C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4849   E1                     POP   hl   
484A   E5                     PUSH   hl   
484B   E5                     PUSH   hl   
484C   CD 73 0F               CALL   run   
484F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
485E   CD E4 0D               CALL   flushBuffer   
4861   76                     HALT      
4862                EXPECTM_3117S158:      
4862   E1                     POP   HL   
4863                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4863   31 00 52               LD   SP,STACK   
4866   CD A2 0E               CALL   coldInit   
4869   CD 34 50               CALL   execStr   
486C   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4874   CD E4 0D               CALL   flushBuffer   
4877   E1                     POP   HL   
4878   E5                     PUSH   HL   
4879   11 34 54               LD   DE,VARS + ("Z"-"A"+1)*2   
487C   B7                     OR   A   
487D   ED 52                  SBC   HL,DE   
487F   7D                     LD   A,L   
4880   B4                     OR   H   
4881   CA E3 48               JP   Z,expectM_3118S159   
4884   CD 6E 0E               CALL   printStr   
4887   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4895   CD 6E 0E               CALL   printStr   
4898   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48A7   21 34 54               LD   hl,VARS + ("Z"-"A"+1)*2   
48AA   E5                     PUSH   hl   
48AB   E5                     PUSH   hl   
48AC   CD 73 0F               CALL   run   
48AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48B7   CD E4 0D               CALL   flushBuffer   
48BA   CD 6E 0E               CALL   printStr   
48BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48CA   E1                     POP   hl   
48CB   E5                     PUSH   hl   
48CC   E5                     PUSH   hl   
48CD   CD 73 0F               CALL   run   
48D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48DF   CD E4 0D               CALL   flushBuffer   
48E2   76                     HALT      
48E3                EXPECTM_3118S159:      
48E3   E1                     POP   HL   
48E4                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
48E4   31 00 52               LD   SP,STACK   
48E7   CD A2 0E               CALL   coldInit   
48EA   CD 34 50               CALL   execStr   
48ED   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
48F5   CD E4 0D               CALL   flushBuffer   
48F8   E1                     POP   HL   
48F9   E5                     PUSH   HL   
48FA   11 32 54               LD   DE,VARS + ("Z"-"A")*2   
48FD   B7                     OR   A   
48FE   ED 52                  SBC   HL,DE   
4900   7D                     LD   A,L   
4901   B4                     OR   H   
4902   CA 64 49               JP   Z,expectM_3119S160   
4905   CD 6E 0E               CALL   printStr   
4908   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4916   CD 6E 0E               CALL   printStr   
4919   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4928   21 32 54               LD   hl,VARS + ("Z"-"A")*2   
492B   E5                     PUSH   hl   
492C   E5                     PUSH   hl   
492D   CD 73 0F               CALL   run   
4930   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4938   CD E4 0D               CALL   flushBuffer   
493B   CD 6E 0E               CALL   printStr   
493E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
494B   E1                     POP   hl   
494C   E5                     PUSH   hl   
494D   E5                     PUSH   hl   
494E   CD 73 0F               CALL   run   
4951   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4960   CD E4 0D               CALL   flushBuffer   
4963   76                     HALT      
4964                EXPECTM_3119S160:      
4964   E1                     POP   HL   
4965                          ;*Macro unroll:  test "'A' /ad", VARS
4965   31 00 52               LD   SP,STACK   
4968   CD A2 0E               CALL   coldInit   
496B   CD 34 50               CALL   execStr   
496E   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4976   CD E4 0D               CALL   flushBuffer   
4979   E1                     POP   HL   
497A   E5                     PUSH   HL   
497B   11 00 54               LD   DE,VARS   
497E   B7                     OR   A   
497F   ED 52                  SBC   HL,DE   
4981   7D                     LD   A,L   
4982   B4                     OR   H   
4983   CA E5 49               JP   Z,expectM_3120S161   
4986   CD 6E 0E               CALL   printStr   
4989   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4997   CD 6E 0E               CALL   printStr   
499A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49A9   21 00 54               LD   hl,VARS   
49AC   E5                     PUSH   hl   
49AD   E5                     PUSH   hl   
49AE   CD 73 0F               CALL   run   
49B1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49B9   CD E4 0D               CALL   flushBuffer   
49BC   CD 6E 0E               CALL   printStr   
49BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49CC   E1                     POP   hl   
49CD   E5                     PUSH   hl   
49CE   E5                     PUSH   hl   
49CF   CD 73 0F               CALL   run   
49D2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49E1   CD E4 0D               CALL   flushBuffer   
49E4   76                     HALT      
49E5                EXPECTM_3120S161:      
49E5   E1                     POP   HL   
49E6                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
49E6   31 00 52               LD   SP,STACK   
49E9   CD A2 0E               CALL   coldInit   
49EC   CD 34 50               CALL   execStr   
49EF   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
49FC   CD E4 0D               CALL   flushBuffer   
49FF   E1                     POP   HL   
4A00   E5                     PUSH   HL   
4A01   11 2D 00               LD   DE,$2D   
4A04   B7                     OR   A   
4A05   ED 52                  SBC   HL,DE   
4A07   7D                     LD   A,L   
4A08   B4                     OR   H   
4A09   CA 70 4A               JP   Z,expectM_3121S162   
4A0C   CD 6E 0E               CALL   printStr   
4A0F   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
4A22   CD 6E 0E               CALL   printStr   
4A25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A34   21 2D 00               LD   hl,$2D   
4A37   E5                     PUSH   hl   
4A38   E5                     PUSH   hl   
4A39   CD 73 0F               CALL   run   
4A3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A44   CD E4 0D               CALL   flushBuffer   
4A47   CD 6E 0E               CALL   printStr   
4A4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A57   E1                     POP   hl   
4A58   E5                     PUSH   hl   
4A59   E5                     PUSH   hl   
4A5A   CD 73 0F               CALL   run   
4A5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A6C   CD E4 0D               CALL   flushBuffer   
4A6F   76                     HALT      
4A70                EXPECTM_3121S162:      
4A70   E1                     POP   HL   
4A71                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
4A71   31 00 52               LD   SP,STACK   
4A74   CD A2 0E               CALL   coldInit   
4A77   CD 34 50               CALL   execStr   
4A7A   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
4A89   CD E4 0D               CALL   flushBuffer   
4A8C   E1                     POP   HL   
4A8D   E5                     PUSH   HL   
4A8E   11 41 00               LD   DE,65   
4A91   B7                     OR   A   
4A92   ED 52                  SBC   HL,DE   
4A94   7D                     LD   A,L   
4A95   B4                     OR   H   
4A96   CA FF 4A               JP   Z,expectM_3122S163   
4A99   CD 6E 0E               CALL   printStr   
4A9C   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
4AB1   CD 6E 0E               CALL   printStr   
4AB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AC3   21 41 00               LD   hl,65   
4AC6   E5                     PUSH   hl   
4AC7   E5                     PUSH   hl   
4AC8   CD 73 0F               CALL   run   
4ACB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AD3   CD E4 0D               CALL   flushBuffer   
4AD6   CD 6E 0E               CALL   printStr   
4AD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AE6   E1                     POP   hl   
4AE7   E5                     PUSH   hl   
4AE8   E5                     PUSH   hl   
4AE9   CD 73 0F               CALL   run   
4AEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AFB   CD E4 0D               CALL   flushBuffer   
4AFE   76                     HALT      
4AFF                EXPECTM_3122S163:      
4AFF   E1                     POP   HL   
4B00                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4B00   31 00 52               LD   SP,STACK   
4B03   CD A2 0E               CALL   coldInit   
4B06   CD 34 50               CALL   execStr   
4B09   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4B17   CD E4 0D               CALL   flushBuffer   
4B1A   E1                     POP   HL   
4B1B   E5                     PUSH   HL   
4B1C   11 32 00               LD   DE,$32   
4B1F   B7                     OR   A   
4B20   ED 52                  SBC   HL,DE   
4B22   7D                     LD   A,L   
4B23   B4                     OR   H   
4B24   CA 8C 4B               JP   Z,expectM_3123S164   
4B27   CD 6E 0E               CALL   printStr   
4B2A   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4B3E   CD 6E 0E               CALL   printStr   
4B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B50   21 32 00               LD   hl,$32   
4B53   E5                     PUSH   hl   
4B54   E5                     PUSH   hl   
4B55   CD 73 0F               CALL   run   
4B58   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B60   CD E4 0D               CALL   flushBuffer   
4B63   CD 6E 0E               CALL   printStr   
4B66   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B73   E1                     POP   hl   
4B74   E5                     PUSH   hl   
4B75   E5                     PUSH   hl   
4B76   CD 73 0F               CALL   run   
4B79   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B88   CD E4 0D               CALL   flushBuffer   
4B8B   76                     HALT      
4B8C                EXPECTM_3123S164:      
4B8C   E1                     POP   HL   
4B8D                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4B8D   31 00 52               LD   SP,STACK   
4B90   CD A2 0E               CALL   coldInit   
4B93   CD 34 50               CALL   execStr   
4B96   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4BA3   CD E4 0D               CALL   flushBuffer   
4BA6   E1                     POP   HL   
4BA7   E5                     PUSH   HL   
4BA8   11 01 00               LD   DE,1   
4BAB   B7                     OR   A   
4BAC   ED 52                  SBC   HL,DE   
4BAE   7D                     LD   A,L   
4BAF   B4                     OR   H   
4BB0   CA 17 4C               JP   Z,expectM_3124S165   
4BB3   CD 6E 0E               CALL   printStr   
4BB6   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4BC9   CD 6E 0E               CALL   printStr   
4BCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BDB   21 01 00               LD   hl,1   
4BDE   E5                     PUSH   hl   
4BDF   E5                     PUSH   hl   
4BE0   CD 73 0F               CALL   run   
4BE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4BEB   CD E4 0D               CALL   flushBuffer   
4BEE   CD 6E 0E               CALL   printStr   
4BF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BFE   E1                     POP   hl   
4BFF   E5                     PUSH   hl   
4C00   E5                     PUSH   hl   
4C01   CD 73 0F               CALL   run   
4C04   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C13   CD E4 0D               CALL   flushBuffer   
4C16   76                     HALT      
4C17                EXPECTM_3124S165:      
4C17   E1                     POP   HL   
4C18                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4C18   31 00 52               LD   SP,STACK   
4C1B   CD A2 0E               CALL   coldInit   
4C1E   CD 34 50               CALL   execStr   
4C21   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4C35   CD E4 0D               CALL   flushBuffer   
4C38   E1                     POP   HL   
4C39   E5                     PUSH   HL   
4C3A   11 03 00               LD   DE,3   
4C3D   B7                     OR   A   
4C3E   ED 52                  SBC   HL,DE   
4C40   7D                     LD   A,L   
4C41   B4                     OR   H   
4C42   CA B0 4C               JP   Z,expectM_3125S166   
4C45   CD 6E 0E               CALL   printStr   
4C48   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4C62   CD 6E 0E               CALL   printStr   
4C65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C74   21 03 00               LD   hl,3   
4C77   E5                     PUSH   hl   
4C78   E5                     PUSH   hl   
4C79   CD 73 0F               CALL   run   
4C7C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C84   CD E4 0D               CALL   flushBuffer   
4C87   CD 6E 0E               CALL   printStr   
4C8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C97   E1                     POP   hl   
4C98   E5                     PUSH   hl   
4C99   E5                     PUSH   hl   
4C9A   CD 73 0F               CALL   run   
4C9D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CAC   CD E4 0D               CALL   flushBuffer   
4CAF   76                     HALT      
4CB0                EXPECTM_3125S166:      
4CB0   E1                     POP   HL   
4CB1                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4CB1   31 00 52               LD   SP,STACK   
4CB4   CD A2 0E               CALL   coldInit   
4CB7   CD 34 50               CALL   execStr   
4CBA   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4CD1   CD E4 0D               CALL   flushBuffer   
4CD4   E1                     POP   HL   
4CD5   E5                     PUSH   HL   
4CD6   11 02 00               LD   DE,2   
4CD9   B7                     OR   A   
4CDA   ED 52                  SBC   HL,DE   
4CDC   7D                     LD   A,L   
4CDD   B4                     OR   H   
4CDE   CA 4F 4D               JP   Z,expectM_3126S167   
4CE1   CD 6E 0E               CALL   printStr   
4CE4   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4D01   CD 6E 0E               CALL   printStr   
4D04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D13   21 02 00               LD   hl,2   
4D16   E5                     PUSH   hl   
4D17   E5                     PUSH   hl   
4D18   CD 73 0F               CALL   run   
4D1B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D23   CD E4 0D               CALL   flushBuffer   
4D26   CD 6E 0E               CALL   printStr   
4D29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D36   E1                     POP   hl   
4D37   E5                     PUSH   hl   
4D38   E5                     PUSH   hl   
4D39   CD 73 0F               CALL   run   
4D3C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D4B   CD E4 0D               CALL   flushBuffer   
4D4E   76                     HALT      
4D4F                EXPECTM_3126S167:      
4D4F   E1                     POP   HL   
4D50                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4D50   31 00 52               LD   SP,STACK   
4D53   CD A2 0E               CALL   coldInit   
4D56   CD 34 50               CALL   execStr   
4D59   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4D7C   CD E4 0D               CALL   flushBuffer   
4D7F   E1                     POP   HL   
4D80   E5                     PUSH   HL   
4D81   11 01 00               LD   DE,1   
4D84   B7                     OR   A   
4D85   ED 52                  SBC   HL,DE   
4D87   7D                     LD   A,L   
4D88   B4                     OR   H   
4D89   CA 06 4E               JP   Z,expectM_3127S168   
4D8C   CD 6E 0E               CALL   printStr   
4D8F   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4DB8   CD 6E 0E               CALL   printStr   
4DBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DCA   21 01 00               LD   hl,1   
4DCD   E5                     PUSH   hl   
4DCE   E5                     PUSH   hl   
4DCF   CD 73 0F               CALL   run   
4DD2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DDA   CD E4 0D               CALL   flushBuffer   
4DDD   CD 6E 0E               CALL   printStr   
4DE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DED   E1                     POP   hl   
4DEE   E5                     PUSH   hl   
4DEF   E5                     PUSH   hl   
4DF0   CD 73 0F               CALL   run   
4DF3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E02   CD E4 0D               CALL   flushBuffer   
4E05   76                     HALT      
4E06                EXPECTM_3127S168:      
4E06   E1                     POP   HL   
4E07                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4E07   31 00 52               LD   SP,STACK   
4E0A   CD A2 0E               CALL   coldInit   
4E0D   CD 34 50               CALL   execStr   
4E10   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4E33   CD E4 0D               CALL   flushBuffer   
4E36   E1                     POP   HL   
4E37   E5                     PUSH   HL   
4E38   11 01 00               LD   DE,1   
4E3B   B7                     OR   A   
4E3C   ED 52                  SBC   HL,DE   
4E3E   7D                     LD   A,L   
4E3F   B4                     OR   H   
4E40   CA BD 4E               JP   Z,expectM_3128S169   
4E43   CD 6E 0E               CALL   printStr   
4E46   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4E6F   CD 6E 0E               CALL   printStr   
4E72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E81   21 01 00               LD   hl,1   
4E84   E5                     PUSH   hl   
4E85   E5                     PUSH   hl   
4E86   CD 73 0F               CALL   run   
4E89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E91   CD E4 0D               CALL   flushBuffer   
4E94   CD 6E 0E               CALL   printStr   
4E97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EA4   E1                     POP   hl   
4EA5   E5                     PUSH   hl   
4EA6   E5                     PUSH   hl   
4EA7   CD 73 0F               CALL   run   
4EAA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4EB9   CD E4 0D               CALL   flushBuffer   
4EBC   76                     HALT      
4EBD                EXPECTM_3128S169:      
4EBD   E1                     POP   HL   
4EBE                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4EBE   31 00 52               LD   SP,STACK   
4EC1   CD A2 0E               CALL   coldInit   
4EC4   CD 34 50               CALL   execStr   
4EC7   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4EF7   CD E4 0D               CALL   flushBuffer   
4EFA   E1                     POP   HL   
4EFB   E5                     PUSH   HL   
4EFC   11 02 00               LD   DE,2   
4EFF   B7                     OR   A   
4F00   ED 52                  SBC   HL,DE   
4F02   7D                     LD   A,L   
4F03   B4                     OR   H   
4F04   CA 8E 4F               JP   Z,expectM_3129S170   
4F07   CD 6E 0E               CALL   printStr   
4F0A   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4F40   CD 6E 0E               CALL   printStr   
4F43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F52   21 02 00               LD   hl,2   
4F55   E5                     PUSH   hl   
4F56   E5                     PUSH   hl   
4F57   CD 73 0F               CALL   run   
4F5A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F62   CD E4 0D               CALL   flushBuffer   
4F65   CD 6E 0E               CALL   printStr   
4F68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F75   E1                     POP   hl   
4F76   E5                     PUSH   hl   
4F77   E5                     PUSH   hl   
4F78   CD 73 0F               CALL   run   
4F7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F8A   CD E4 0D               CALL   flushBuffer   
4F8D   76                     HALT      
4F8E                EXPECTM_3129S170:      
4F8E   E1                     POP   HL   
4F8F                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4F8F   31 00 52               LD   SP,STACK   
4F92   CD A2 0E               CALL   coldInit   
4F95   CD 34 50               CALL   execStr   
4F98   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4FAD   CD E4 0D               CALL   flushBuffer   
4FB0   E1                     POP   HL   
4FB1   E5                     PUSH   HL   
4FB2   11 02 00               LD   DE,2   
4FB5   B7                     OR   A   
4FB6   ED 52                  SBC   HL,DE   
4FB8   7D                     LD   A,L   
4FB9   B4                     OR   H   
4FBA   CA 29 50               JP   Z,expectM_3130S171   
4FBD   CD 6E 0E               CALL   printStr   
4FC0   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4FDB   CD 6E 0E               CALL   printStr   
4FDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FED   21 02 00               LD   hl,2   
4FF0   E5                     PUSH   hl   
4FF1   E5                     PUSH   hl   
4FF2   CD 73 0F               CALL   run   
4FF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4FFD   CD E4 0D               CALL   flushBuffer   
5000   CD 6E 0E               CALL   printStr   
5003   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5010   E1                     POP   hl   
5011   E5                     PUSH   hl   
5012   E5                     PUSH   hl   
5013   CD 73 0F               CALL   run   
5016   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5025   CD E4 0D               CALL   flushBuffer   
5028   76                     HALT      
5029                EXPECTM_3130S171:      
5029   E1                     POP   HL   
502A                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
502A                             ; 
502A   CD 6E 0E               CALL   printStr   
502D   44 6F 6E 65 21 00      .CSTR   "Done!"   
5033   76                     HALT      
5034                             ; executes a null teminated string (null executes exit_)
5034                             ; the string should be immedaitely following the call
5034                EXECSTR:      ; create a root stack frame
5034   C1                     POP   bc   ; bc = code*
5035   0B                     DEC   bc   ; dec to prepare for next routine
5036   11 00 00               LD   de,0   
5039   D5                     PUSH   de   ; push fake IP
503A   D5                     PUSH   de   ; push null arg_list*
503B   D5                     PUSH   de   ; push null first_arg*
503C   D5                     PUSH   de   ; push fake BP
503D   DD E9                  JP   (ix)   
503F                STKSIZE:   EQU   $100   ; Stack size
503F                TIBSIZE:   EQU   $100   ; 256 bytes
503F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
503F                          ALIGN   $100   
5100                          DS   STKSIZE   
5200                STACK:       
5200                          ALIGN   $100   
5200                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5300                          ALIGN   $100   
5300                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5400                          ALIGN   $100   
5400                VARS:        
5400                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
54D0                RESTARTS:      
54D0                RST08:    DS   2   
54D2                RST10:    DS   2   
54D4                RST18:    DS   2   
54D6                RST20:    DS   2   
54D8                RST28:    DS   2   
54DA                RST30:    DS   2   ; 
54DC                BAUD:     DS   2   ; 
54DE                INTVEC:   DS   2   ; 
54E0                NMIVEC:   DS   2   ; 
54E2                GETCVEC:   DS   2   ; 
54E4                PUTCVEC:   DS   2   ; 
54E6                SYSVARS:      
54E6                             ; initialised sys variables (preserved)
54E6                VDATAWIDTH:   DS   2   ; 
54E8                VNUMBASE:   DS   2   ; 
54EA                VTIBPTR:   DS   2   ; 
54EC                VBUFPTR:   DS   2   ; 
54EE                VNEXT:    DS   2   ; 
54F0                VHEAPPTR:   DS   2   ; 
54F2                VRECUR:   DS   2   ; 
54F4                VDEFINE:   DS   2   ; 
54F6                             ; uninitialised sys variables (preserved)
54F6                VPOINTER:   DS   2   ; 
54F8                VREMAIN:   DS   2   ; 
54FA                VSAVEDIP:   DS   2   ; 
54FC                VSAVEDSP:   DS   2   ; 
54FE                VSAVEDNEXT:   DS   2   ; 
5500                VSAVEDBP:   DS   2   ; 
5502                             ; uninitialised sys variables (unpreserved)
5502                VTEMP1:   DS   2   ; 
5504                VTEMP2:   DS   2   ; 
5506                VTEMP3:   DS   2   ; 
5508                VLASTDEF:   DS   2   ; 
550A                TBPTR:    DS   2   ; reserved for tests
550C                TITLEBUF:   DS   20   
5520                HEAP:        
5520                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
5520                             ; db "{"
5520                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5520                             ; db    "\\kt{"
5520                             ; db      "0%t!=/qt"                  ; break if type != 0
5520                             ; db      "\\dt:a{"                   ; return talkback to receive data
5520                             ; db        "%L1#!/qt"                ; if not active don't send
5520                             ; db        "%L0# %a="                ; store current index in A
5520                             ; db        "%s %L0# +="              ; inc value of index by step
5520                             ; db        "1%t!=/qt"                ; break if type != 0
5520                             ; db        "%a %e <"                 ; ifte: in range?
5520                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
5520                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
5520                             ; db      "} 0 %k^"                   ; init sink
5520                             ; db    "}"
5520                             ; db "}"
5520                             ; db 0
5520                             ; FUNC map, 0, "sf"                   ; map
5520                             ; db "{"
5520                             ; db    "\\kt{"
5520                             ; db      "0%t!=/qt"                  ; break if type != 0
5520                             ; db      "\\dt{"                     ; call source with tb
5520                             ; db        "1%t=="                   ; ifte: type == 1 ?
5520                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5520                             ; db        "?? %t %k^"               ; ifte: send to sink
5520                             ; db      "} 0 %s^"
5520                             ; db    "}"
5520                             ; db "}"
5520                             ; db 0
5520                             ; ; /ft filter
5520                             ; ; src pred -- src1
5520                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5520                             ; db "{"
5520                             ; db    "[0]%T="
5520                             ; db    "\\kt{"                       ; return talkback to receive data
5520                             ; db      "\\dt{"                     ; call source with tb
5520                             ; db        "["
5520                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5520                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5520                             ; db          "{/t}"                  ; case 2: return true
5520                             ; db        "]%t#^"                   ; select on %t
5520                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5520                             ; db        "??"
5520                             ; db      "} 0 %s^"
5520                             ; db    "}"
5520                             ; db "}"
5520                             ; db 0
5520                             ; FUNC forEach, 1, "spT"
5520                             ; db "{"
5520                             ; db    "[0]%T="
5520                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5520                             ; db      "2%t==/qt"                    ; if type == 2 skip
5520                             ; db      "0%t=="                   ; ifte: type = 0 ?
5520                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5520                             ; db      "??"                      ; ifte:
5520                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5520                             ; db    "} 0 %s^"
5520                             ; db "}"
5520                             ; db 0
5520                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5520                             ; db "{"                                  ; reducer: \\da00bbLi4u
5520                             ; db    "[%i]%A="
5520                             ; db    "\\kt{"                         ; return talkback to receive data
5520                             ; db      "\\dt{"                         ; call source with tb
5520                             ; db        "1%t=="                       ; ifte: type == 1 ?
5520                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5520                             ; db        "?? %t %k^"                    ; ifte: send to sink
5520                             ; db      "} 0 %s^"
5520                             ; db    "}"
5520                             ; db "}"
5520                             ; db 0


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 173 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 174 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 198 IN MAIN.asm
AND:                0220 DEFINED AT LINE 199 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 212 IN MAIN.asm
OR:                 022B DEFINED AT LINE 213 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 226 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 227 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 232 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 245 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 271 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 278 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
GT_:                027B DEFINED AT LINE 284 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 292 IN MAIN.asm
LT1:                028F DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 340 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 344 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 346 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 348 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 350 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 352 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 354 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 356 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 357 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 359 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 361 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 363 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 365 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 367 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 369 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 371 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 373 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 375 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 377 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 379 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 381 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 383 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 385 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 387 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 389 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 391 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 400 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 435 IN MAIN.asm
COMMAND_B_:         0336 DEFINED AT LINE 448 IN MAIN.asm
COMMAND_I_:         0341 DEFINED AT LINE 457 IN MAIN.asm
COMMAND_M_:         034A DEFINED AT LINE 464 IN MAIN.asm
COMMAND_P_:         034D DEFINED AT LINE 467 IN MAIN.asm
COMMAND_Q_:         0356 DEFINED AT LINE 474 IN MAIN.asm
COMMAND_R_:         035F DEFINED AT LINE 481 IN MAIN.asm
COMMAND_S_:         0362 DEFINED AT LINE 484 IN MAIN.asm
COMMAND_V_:         0365 DEFINED AT LINE 487 IN MAIN.asm
COMMAND_NOP_:       0368 DEFINED AT LINE 490 IN MAIN.asm
DECIMAL_:           036A DEFINED AT LINE 493 IN MAIN.asm
DECIMAL1:           036D DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
DIV_:               0372 DEFINED AT LINE 499 IN MAIN.asm
ERROR1_:            0376 DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
HEXADECIMAL_:       037C DEFINED AT LINE 507 IN MAIN.asm
KEY_:               0382 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
OUTPUT_:            0385 DEFINED AT LINE 514 IN MAIN.asm
TRUE_:              0388 DEFINED AT LINE 517 IN MAIN.asm
WORDS_:             038B DEFINED AT LINE 520 IN MAIN.asm
XOR_:               038E DEFINED AT LINE 523 IN MAIN.asm
XOR1:               038F DEFINED AT LINE 525 IN MAIN.asm
ABSOLUTE_:          0399 DEFINED AT LINE 538 IN MAIN.asm
ADDROF_:            03A6 DEFINED AT LINE 551 IN MAIN.asm
ARRAYITER_:         03A9 DEFINED AT LINE 554 IN MAIN.asm
ARRAYSIZE_:         03AC DEFINED AT LINE 559 IN MAIN.asm
BREAK_:             03B4 DEFINED AT LINE 568 IN MAIN.asm
COLDSTART_:         03B7 DEFINED AT LINE 572 IN MAIN.asm
BYTES_:             03BA DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
BYTES1:             03BD DEFINED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
INPUT_:             03C2 DEFINED AT LINE 584 IN MAIN.asm
PRINTCHARS_:        03CD DEFINED AT LINE 597 IN MAIN.asm
QUIT_:              03D4 DEFINED AT LINE 605 IN MAIN.asm
QUIT1:              03DB DEFINED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
WORDS:              03DE DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
COMMAND_F_:         03E4 DEFINED AT LINE 619 IN MAIN.asm
COMMENT:            03E6 DEFINED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
COMMAND_F:          0400 DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
FOREACH_:           041B DEFINED AT LINE 661 IN MAIN.asm
FLUSH_:             041E DEFINED AT LINE 666 IN MAIN.asm
FILTER_:            0423 DEFINED AT LINE 670 IN MAIN.asm
FOLD_:              0426 DEFINED AT LINE 673 IN MAIN.asm
FUNCSRC_:           0429 DEFINED AT LINE 676 IN MAIN.asm
F1_:                042C DEFINED AT LINE 679 IN MAIN.asm
F2_:                042F DEFINED AT LINE 682 IN MAIN.asm
F3_:                0432 DEFINED AT LINE 685 IN MAIN.asm
F4_:                0435 DEFINED AT LINE 688 IN MAIN.asm
FZ_:                0438 DEFINED AT LINE 691 IN MAIN.asm
FALSE_:             043B DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
COMMAND_M:          043E DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
MAP_:               0447 DEFINED AT LINE 704 IN MAIN.asm
COMMAND_R:          044A DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
RECUR_:             0457 DEFINED AT LINE 718 IN MAIN.asm
REMAIN_:            045D DEFINED AT LINE 723 IN MAIN.asm
COMMAND_S:          0463 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
STRINGITER_:        046C DEFINED AT LINE 735 IN MAIN.asm
RANGESRC_:          046F DEFINED AT LINE 738 IN MAIN.asm
COMMAND_V:          0472 DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
CONSTBUFSTART_:     0485 DEFINED AT LINE 758 IN MAIN.asm
CONSTHEAPSTART_:    048A DEFINED AT LINE 762 IN MAIN.asm
CONSTTIBSTART_:     048F DEFINED AT LINE 766 IN MAIN.asm
VARBUFPTR_:         0494 DEFINED AT LINE 770 IN MAIN.asm
VARHEAPPTR_:        049D DEFINED AT LINE 775 IN MAIN.asm
VARTIBPTR_:         04A6 DEFINED AT LINE 780 IN MAIN.asm
VARIABLE:           04AF DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
CONSTANT:           04B2 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
DOT:                04B5 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
DOTNUMBER_:         04C4 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
DOTSTRING_:         04CF DEFINED AT LINE 815 IN MAIN.asm
DOTSTRING0:         04D6 DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
DOTSTRING1:         04DC DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
DOTCHAR_:           04E9 DEFINED AT LINE 834 IN MAIN.asm
DOTXCHARS_:         04EE DEFINED AT LINE 840 IN MAIN.asm
DOTXCHARS0:         04EF DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
DOTXCHARS1:         04F8 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
DOTXCHARS2:         0500 DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
RANGESRC:           050A DEFINED AT LINE 32
                    > USED AT LINE 739 IN MAIN.asm
RANGESRCM_1335S870: 0519 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0586 DEFINED AT LINE 32
                    > USED AT LINE 555 IN MAIN.asm
ARRAYITERM_1354S890: 0593 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0607 DEFINED AT LINE 32
                    > USED AT LINE 736 IN MAIN.asm
STRINGITERM_1373S910: 0614 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                068D DEFINED AT LINE 32
                    > USED AT LINE 705 IN MAIN.asm
MAPM_1393S932:      069A DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             06CF DEFINED AT LINE 32
                    > USED AT LINE 671 IN MAIN.asm
FILTERM_1407S947:   06DD DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               072D DEFINED AT LINE 32
                    > USED AT LINE 674 IN MAIN.asm
FOLDM_1426S967:     073C DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            077F DEFINED AT LINE 32
                    > USED AT LINE 662 IN MAIN.asm
FOREACHM_1440S982:  078D DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            07CB DEFINED AT LINE 32
                    > USED AT LINE 677 IN MAIN.asm
FUNCSRCM_1454S997:  07D7 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0804 DEFINED AT LINE 32
DOTARRAYM_1464S1008: 0812 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         084C DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
TILDE:              084C DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
COMMA:              084C DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
COLON:              084E DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
BACKSLASH:          085B DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
LAMBDA:             085B DEFINED AT LINE 1039 IN MAIN.asm
LAMBDA1:            0860 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
LAMBDA2:            0870 DEFINED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
DEFINESTART:        087C DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
SEMICOLON:          0885 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
DEFINEEND:          0885 DEFINED AT LINE 1066 IN MAIN.asm
DEFINEEND1:         0897 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
ADDROF:             0899 DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
ADDROF1:            08AD DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
ADDROF2:            08B8 DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
PERCENT:            08BA DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
ARG:                08BA DEFINED AT LINE 1108 IN MAIN.asm
ARG0:               08D6 DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
ARG0A:              08DF DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
ARG1:               08E4 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ARG1A:              08EC DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
LBRACK:             08EF DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
ARRAYSTART:         08EF DEFINED AT LINE 1150 IN MAIN.asm
RBRACK:             090B DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
ARRAYEND:           090B DEFINED AT LINE 1165 IN MAIN.asm
ARRAYEND1:          0927 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
ARRAYEND2:          0937 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
ARRAYEND3:          093C DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
HASH:               095B DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARRAYINDEX:         095B DEFINED AT LINE 1220 IN MAIN.asm
ARRAYINDEX0:        0963 DEFINED AT LINE 1226 IN MAIN.asm
ARRAYINDEX1:        0964 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
ARRAYINDEX2:        0970 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
ASSIGN:             0973 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            0975 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
ASSIGN1:            0979 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
ASSIGN2:            0982 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
LBRACE:             0984 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
RBRACE:             0989 DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
BLOCKEND:           0989 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
BLOCKEND1:          09BB DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
BLOCKEND2:          09C7 DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
BLOCKEND3:          09D9 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
BLOCKEND4:          09ED DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BREAK:              09F6 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BREAK1:             09FD DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
TICK:               0A10 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
CHAR:               0A10 DEFINED AT LINE 1343 IN MAIN.asm
CHAR1:              0A13 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
CHAR2:              0A1F DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
CHAR3:              0A22 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
DIV:                0A25 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
BUFFERDEC:          0A36 DEFINED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
BUFFERDEC0:         0A50 DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
BUFFERDEC1:         0A60 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
BUFFERDEC2:         0A80 DEFINED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
BUFFERDEC3:         0A82 DEFINED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
BUFFERDEC4:         0A92 DEFINED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
BUFFERDEC5:         0A93 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
BUFFERHEX:          0A9C DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
BUFFERHEX1:         0ABD DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
BUFFERHEX2:         0AC6 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
DIVIDE:             0AD4 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
DIVIDE1:            0AD9 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
DIVIDE2:            0AE6 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
DIVIDE3:            0AE7 DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
FZ:                 0AED DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
CARET:              0AFA DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
GO:                 0AFA DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0AFB DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
GO2:                0B01 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
GOBLOCK:            0B0C DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
GOBLOCK2:           0B31 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
GOBLOCK3:           0B3B DEFINED AT LINE 1556 IN MAIN.asm
GOFUNC:             0B3F DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
GOFUNC1:            0B58 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
GOFUNC2:            0B5E DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
GOFUNC3:            0B69 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
GOFUNC4:            0B81 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
GOFUNC5:            0B84 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
GOFUNC6:            0B87 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
GOFUNC7:            0B8A DEFINED AT LINE 1619 IN MAIN.asm
GOFUNC8:            0B8E DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
DOLLAR:             0B99 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
HEXNUM:             0B99 DEFINED AT LINE 1634 IN MAIN.asm
HEXNUM1:            0B9C DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
HEXNUM2:            0BA4 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
UPCASE:             0BB6 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LOWCASE:            0BBB DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
IDENT1:             0BC0 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
QUESTION:           0BCD DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
IF:                 0BCD DEFINED AT LINE 1677 IN MAIN.asm
IFTE:               0BD9 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
IFTE1:              0BDA DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
KEY:                0BE6 DEFINED AT LINE 1699 IN MAIN.asm
OUTPUT:             0BEF DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
STAR:               0BF8 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
MUL:                0BF8 DEFINED AT LINE 1718 IN MAIN.asm
MUL2:               0BFA DEFINED AT LINE 1721 IN MAIN.asm
MUL3:               0C02 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
NUM:                0C14 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NUM0:               0C1D DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
NUM1:               0C1E DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
NUM2:               0C36 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
NUM3:               0C41 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
RPAREN:             0C44 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SHIFTLEFT:          0C4C DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
SHIFTLEFT1:         0C54 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
SHIFTLEFT2:         0C55 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
SHIFTRIGHT:         0C5C DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        0C64 DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
SHIFTRIGHT2:        0C68 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
DQUOTE:             0C6F DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
STRING:             0C6F DEFINED AT LINE 1821 IN MAIN.asm
STRING1:            0C78 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
STRING2:            0C7B DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
STRING3:            0C84 DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
PRINTCHARS1:        0C97 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
PRINTCHARS2:        0C9D DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PARSEARGS:          0CA2 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
PARSEARGS1:         0CAC DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEARGS1A:        0CB4 DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
PARSEARGS2:         0CBC DEFINED AT LINE 1892 IN MAIN.asm
PARSEARGS3:         0CC4 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
PARSEARGS4:         0CC7 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PARSEARGS5:         0CCD DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
PARSEBLOCK:         0CD8 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
PARSEBLOCK1:        0CDC DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PARSEBLOCK2:        0D08 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PARSEBLOCK3:        0D0B DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PARSEBLOCK4:        0D13 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PARSEBLOCK5:        0D16 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEBLOCK6:        0D3E DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CREATEFUNC:         0D42 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
CREATEFUNC0:        0D61 DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
CREATEFUNC1:        0D79 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
CREATEFUNC2:        0D8C DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CREATEFUNC2A:       0DAB DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CREATEFUNC3:        0DBA DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CREATEFUNC4:        0DC5 DEFINED AT LINE 2087 IN MAIN.asm
CREATEFUNC5:        0DC6 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
FLUSHBUFFER:        0DE4 DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0DFB DEFINED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
COMMANDTABLE1:      0E05 DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
COMMANDTABLE2:      0E0A DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
JUMPTABLE:          0E0F DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
JUMPTABLE0:         0E11 DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
JUMPTABLE1:         0E1D DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
JUMPTABLE2:         0E20 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
PRTSTR0:            0E23 DEFINED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
PRTSTR:             0E27 DEFINED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
NESTING:            0E2C DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
NESTING0:           0E36 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
NESTING1A:          0E3D DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
NESTING1:           0E40 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
NESTING2:           0E4F DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
NESTING3:           0E51 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
NESTING4:           0E5C DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
PROMPT:             0E5E DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
CRLF:               0E67 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
PRINTSTR:           0E6E DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 51
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 176
INIT:               0E75 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
INIT1:              0E7D DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
WARMINIT:           0E85 DEFINED AT LINE 2259 IN MAIN.asm
COLDBOOT0:          0E98 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
COLDINIT:           0EA2 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EB3 DEFINED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
COLDSTART:          0EC0 DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
START:              0EC9 DEFINED AT LINE 2294 IN MAIN.asm
START1:             0ECF DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
INTERPRET:          0ED5 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
INTERPRET2:         0EE4 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
INTERPRET3:         0EEC DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
INTERPRET4:         0EF7 DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
INTERPRET5:         0EFC DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
INTERPRET5A:        0F1A DEFINED AT LINE 2371 IN MAIN.asm
INTERPRET6:         0F1C DEFINED AT LINE 2376 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
INTERPRET7:         0F2A DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
INTERPRET8:         0F3D DEFINED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
NEXT:               0F58 DEFINED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
NEXT1:              0F68 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
EXIT:               0F6F DEFINED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
RUN:                0F73 DEFINED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0F77 DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
BACKSPACE_:         0F8B DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
EDIT_:              0F9B DEFINED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
REEDIT_:            0FB3 DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
PRINTSTACK_:        0FB6 DEFINED AT LINE 2466 IN MAIN.asm
F1:                 0FC0 DEFINED AT LINE 32
                    > USED AT LINE 680 IN MAIN.asm
F1M_2978S12:        0FCD DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1046 DEFINED AT LINE 32
                    > USED AT LINE 683 IN MAIN.asm
F2M_2996S31:        1051 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1052 DEFINED AT LINE 32
                    > USED AT LINE 686 IN MAIN.asm
F3M_2998S34:        105D DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 105E DEFINED AT LINE 32
                    > USED AT LINE 689 IN MAIN.asm
F4M_3000S37:        1069 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 41
                    > USED AT LINE 8
EXPECTM_3011S50:    11BC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3016S57:    123D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3017S58:    12B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3018S59:    1329 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3019S60:    139E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3020S61:    1413 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3021S62:    1488 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3022S63:    14FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3023S64:    1578 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3024S65:    15EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3025S66:    1666 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3026S67:    16DF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3027S68:    175A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3028S69:    17D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3029S70:    184C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3030S71:    18CB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3031S72:    194A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3032S73:    19C7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3033S74:    1A48 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3034S75:    1ACD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3035S76:    1B50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3036S77:    1BCD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3037S78:    1C52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3038S79:    1CD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3039S80:    1D50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3040S81:    1DCD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3041S82:    1E52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3042S83:    1ECF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3043S84:    1F4C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3044S85:    1FCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3045S86:    205A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3046S87:    20D7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3047S88:    215C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3048S89:    21D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3049S90:    2264 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3050S91:    22EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3051S92:    237A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3052S93:    2405 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3053S94:    248A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3054S95:    2507 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3055S96:    2586 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3056S97:    2605 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3057S98:    2682 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3058S99:    26FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3059S100:   277C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3060S101:   27F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3061S102:   2876 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3062S103:   28F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3063S104:   2970 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3064S105:   29ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3065S106:   2A6C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3066S107:   2AEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3067S108:   2B6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3068S109:   2BEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3069S110:   2C6C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3070S111:   2CE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3071S112:   2D62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3072S113:   2DE3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3073S114:   2E6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3074S115:   2EF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3075S116:   2F7C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3076S117:   3011 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3077S118:   30A6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3078S119:   3123 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3079S120:   31A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3080S121:   3227 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3081S122:   32B0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3082S123:   3335 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3083S124:   33C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3084S125:   3455 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3085S126:   34EC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3086S127:   3587 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3087S128:   3614 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3088S129:   36A7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3089S130:   373C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3090S131:   37D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3091S132:   3868 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3092S133:   390B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3093S134:   399C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3094S135:   3A3B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3095S136:   3ADC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3096S137:   3B7F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3097S138:   3C2C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3098S139:   3CD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3099S140:   3D66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3100S141:   3DFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3101S142:   3E88 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3102S143:   3F21 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3103S144:   3FBA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3104S145:   4061 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3105S146:   4110 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3106S147:   41BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3107S148:   4260 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3108S149:   4307 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3109S150:   43C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3110S151:   448B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3111S152:   4524 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3112S153:   45BD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3113S154:   4646 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3114S155:   46CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3115S156:   4758 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3116S157:   47E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3117S158:   4862 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3118S159:   48E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3119S160:   4964 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3120S161:   49E5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3121S162:   4A70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3122S163:   4AFF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3123S164:   4B8C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3124S165:   4C17 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3125S166:   4CB0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3126S167:   4D4F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3127S168:   4E06 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3128S169:   4EBD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3129S170:   4F8E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3130S171:   5029 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5034 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5200 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5200 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
BUF:                5300 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
VARS:               5400 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           54D0 DEFINED AT LINE 18 IN ram.asm
RST08:              54D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              54D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              54D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              54D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              54D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              54DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               54DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             54DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             54E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            54E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            54E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            54E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2274 IN MAIN.asm
VDATAWIDTH:         54E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
VNUMBASE:           54E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
VTIBPTR:            54EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
VBUFPTR:            54EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
VNEXT:              54EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2286 IN MAIN.asm
VHEAPPTR:           54F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
VRECUR:             54F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
VDEFINE:            54F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
VPOINTER:           54F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
VREMAIN:            54F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
VSAVEDIP:           54FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
VSAVEDSP:           54FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
VSAVEDNEXT:         54FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
VSAVEDBP:           5500 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
VTEMP1:             5502 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
VTEMP2:             5504 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
VTEMP3:             5506 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
VLASTDEF:           5508 DEFINED AT LINE 60 IN ram.asm
TBPTR:              550A DEFINED AT LINE 61 IN ram.asm
TITLEBUF:           550C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
HEAP:               5520 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
