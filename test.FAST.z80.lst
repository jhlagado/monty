0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4E               LD   (RST08),HL   
0094   22 D2 4E               LD   (RST10),HL   
0097   22 D4 4E               LD   (RST18),HL   
009A   22 D6 4E               LD   (RST20),HL   
009D   22 D8 4E               LD   (RST28),HL   
00A0   22 DA 4E               LD   (RST30),HL   
00A3   22 DE 4E               LD   (INTVEC),HL   
00A6   22 E0 4E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4C                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4D                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   8C 0F                  DW   next   ; nNext
01E8   22 4F                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 4E            LD   de,(vPointer)   
0208   21 F8 4E               LD   hl,vPointer   
020B   C3 A5 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 6F 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 BC 04               JP   percent   
021C                RBRACE_:      
021C   C3 C2 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 2F 0C               JP   caret   
0228                COMMA_:      
0228   C3 ED 0A               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 ED 0A               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD 07 0D               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 4E               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 4E            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 AB 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 4E               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 4E               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 4E                  LD   h,msb(vars)   
02BA   22 F8 4E               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 4E               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 4E               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 4E               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 4E               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 30 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 30 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD CE 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 AB 0F               JP   error   
0416                LAMBDA2:      
0416   CD 07 0D               CALL   parseBlock   
0419   CD 75 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 4E            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
048F   C3 28 0B               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0495   23                     INC   hl   ; skip length field to start
0496   23                     INC   hl   
0497   E5                     PUSH   hl   ; save start of string
0498   0A                     LD   a,(bc)   
0499   5F                     LD   e,a   ; e = matching terminator
049A   03                     INC   bc   ; point to next char
049B   18 03                  JR   string2   
049D                STRING1:      
049D   77                     LD   (hl),a   
049E   23                     INC   hl   ; increase count
049F   03                     INC   bc   ; point to next char
04A0                STRING2:      
04A0   0A                     LD   a,(bc)   
04A1   BB                     CP   e   ; is it the string terminator
04A2   28 02                  JR   z,string3   
04A4   18 F7                  JR   string1   
04A6                STRING3:      
04A6   AF                     XOR   a   ; write NUL to terminate string
04A7   77                     LD   (hl),a   ; hl = end of string
04A8   23                     INC   hl   
04A9   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AC   22 EC 4E               LD   (vBufPtr),hl   
04AF   2B                     DEC   hl   ; hl = end of string without terminator
04B0   D1                     POP   de   ; de = start of string
04B1   D5                     PUSH   de   ; return start of string
04B2   B7                     OR   a   ; hl = length bytes, de = start of string
04B3   ED 52                  SBC   hl,de   
04B5   EB                     EX   de,hl   
04B6   2B                     DEC   hl   ; write length bytes to length field at start - 2
04B7   72                     LD   (hl),d   
04B8   2B                     DEC   hl   
04B9   73                     LD   (hl),e   
04BA   DD E9                  JP   (ix)   
04BC                             ; %a .. %z                      43
04BC                             ; -- value
04BC                             ; returns value of arg
04BC                PERCENT:      
04BC                ARG:         
04BC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04BF   FD 56 05               LD   d,(iy+5)   
04C2   EB                     EX   de,hl   
04C3   7D                     LD   a,l   ; arg_list* == null, skip
04C4   B4                     OR   h   
04C5   28 1A                  JR   z,arg0a   
04C7   23                     INC   hl   ; a = num_args, hl = arg_list*
04C8   7E                     LD   a,(hl)   
04C9   23                     INC   hl   
04CA   B7                     OR   a   
04CB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04CD   5F                     LD   e,a   ; e = a = num_args
04CE   03                     INC   bc   ; a = next char = dollar_name
04CF   0A                     LD   a,(bc)   
04D0   C5                     PUSH   bc   ; save IP
04D1   43                     LD   b,e   ; b = e = num_args
04D2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04D5   FD 56 03               LD   d,(iy+3)   
04D8                ARG0:        
04D8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04D9   1B                     DEC   de   
04DA   BE                     CP   (hl)   
04DB   28 09                  JR   z,arg1   
04DD   23                     INC   hl   ; hl = next arg_list*
04DE   10 F8                  DJNZ   arg0   
04E0   C1                     POP   bc   ; no match, restore IP
04E1                ARG0A:       
04E1   11 00 00               LD   de,0   ; return 0
04E4   18 08                  JR   arg1a   
04E6                ARG1:        
04E6   C1                     POP   bc   ; restore IP
04E7   EB                     EX   de,hl   ; hl = arg*
04E8   22 F8 4E               LD   (vPointer),hl   ; store arg* in setter
04EB   5E                     LD   e,(hl)   
04EC   23                     INC   hl   
04ED   56                     LD   d,(hl)   ; de = arg
04EE                ARG1A:       
04EE   D5                     PUSH   de   ; push arg
04EF   DD E9                  JP   (ix)   
04F1                             ;********************** PAGE 3,4 END *********************************************
04F1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 42 0E               CALL   xjumpTable   
0503   61                     DB   "a"   ; .a print array
0504   A5 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   BB 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   A6 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number
050D                             ; /bd buffer decimal
050D                             ; value --
050D                DOTNUMBER_:      
050D   3A E8 4E               LD   a,(vNumBase)   
0510   FE 10                  CP   16   
0512   CA 76 05               JP   z,dotHex   ; else falls through
0515   C3 18 05               JP   dotDec   
0518                             ; print decimal                 ; 70
0518                             ; value --
0518                DOTDEC:      
0518   ED 5B EC 4E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051C   D9                     EXX      
051D   E1                     POP   hl   ; hl = value
051E   CD 2D 05               CALL   dotDec0   
0521   D9                     EXX      ; de = buffer*' bc = IP
0522   3E 20                  LD   a," "   ; append space to buffer
0524   12                     LD   (de),a   
0525   13                     INC   de   ; string*++,
0526   ED 53 EC 4E            LD   (vBufPtr),de   ; update buffer* with buffer*'
052A   C3 28 0B               JP   dotNext   
052D                             ; hl = value
052D                             ; de' = buffer*
052D                             ; a, bc, de, hl destroyed
052D                DOTDEC0:      
052D   CB 7C                  BIT   7,h   
052F   28 0C                  JR   z,dotDec1   
0531   D9                     EXX      
0532   3E 2D                  LD   a,"-"   
0534   12                     LD   (de),a   
0535   13                     INC   de   
0536   D9                     EXX      
0537   AF                     XOR   a   
0538   95                     SUB   l   
0539   6F                     LD   l,a   
053A   9F                     SBC   a,a   
053B   94                     SUB   h   
053C   67                     LD   h,a   
053D                DOTDEC1:      
053D   0E 00                  LD   c,0   ; leading zeros flag = false
053F   11 F0 D8               LD   de,-10000   
0542   CD 5D 05               CALL   dotDec2   
0545   11 18 FC               LD   de,-1000   
0548   CD 5D 05               CALL   dotDec2   
054B   11 9C FF               LD   de,-100   
054E   CD 5D 05               CALL   dotDec2   
0551   1E F6                  LD   e,-10   
0553   CD 5D 05               CALL   dotDec2   
0556   0C                     INC   c   ; flag = true for at least digit
0557   1E FF                  LD   e,-1   
0559   CD 5D 05               CALL   dotDec2   
055C   C9                     RET      
055D                DOTDEC2:      
055D   06 2F                  LD   b,"0"-1   
055F                DOTDEC3:      
055F   04                     INC   b   
0560   19                     ADD   hl,de   
0561   38 FC                  JR   c,dotDec3   
0563   ED 52                  SBC   hl,de   
0565   3E 30                  LD   a,"0"   
0567   B8                     CP   b   
0568   20 05                  JR   nz,dotDec4   
056A   AF                     XOR   a   
056B   B1                     OR   c   
056C   C8                     RET   z   
056D   18 01                  JR   dotDec5   
056F                DOTDEC4:      
056F   0C                     INC   c   
0570                DOTDEC5:      
0570   78                     LD   a,b   
0571   D9                     EXX      
0572   12                     LD   (de),a   
0573   13                     INC   de   
0574   D9                     EXX      
0575   C9                     RET      
0576                             ; buffer hex                    37
0576                             ; value --
0576                DOTHEX:      
0576   E1                     POP   hl   ; hl = value
0577   ED 5B EC 4E            LD   de,(vBufPtr)   
057B   3E 24                  LD   a,"$"   ; # prefix
057D   12                     LD   (de),a   
057E   13                     INC   de   ; string*++,
057F   7C                     LD   a,h   
0580   CD 92 05               CALL   dotHex1   
0583   7D                     LD   a,l   
0584   CD 92 05               CALL   dotHex1   
0587   3E 20                  LD   a," "   ; append space to buffer
0589   12                     LD   (de),a   
058A   13                     INC   de   ; string*++,
058B   ED 53 EC 4E            LD   (vBufPtr),de   
058F   C3 28 0B               JP   dotNext   
0592                DOTHEX1:      
0592   F5                     PUSH   af   
0593   1F                     RRA      
0594   1F                     RRA      
0595   1F                     RRA      
0596   1F                     RRA      
0597   CD 9B 05               CALL   dotHex2   
059A   F1                     POP   af   
059B                DOTHEX2:      
059B   E6 0F                  AND   0x0F   
059D   C6 90                  ADD   a,0x90   
059F   27                     DAA      
05A0   CE 40                  ADC   a,0x40   
05A2   27                     DAA      
05A3   12                     LD   (de),a   
05A4   13                     INC   de   ; string*++,
05A5   C9                     RET      
05A6                             ; /bs buffered string
05A6                             ; string* --
05A6                DOTSTRING_:      
05A6   E1                     POP   hl   ; hl = string*
05A7   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
05AB   18 03                  JR   dotString1   
05AD                DOTSTRING0:      
05AD   12                     LD   (de),a   ; a -> buffer*
05AE   13                     INC   de   ; string*++,
05AF   23                     INC   hl   
05B0                DOTSTRING1:      
05B0   7E                     LD   a,(hl)   ; a <- string*
05B1   B7                     OR   a   ; if NUL exit loop
05B2   20 F9                  JR   nz,dotString0   
05B4   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*' in pointer
05B8   C3 28 0B               JP   dotNext   
05BB                             ; .c print char
05BB                             ; char --
05BB                DOTCHAR:      
05BB   E1                     POP   hl   ; a = char
05BC   7D                     LD   a,l   
05BD   ED 5B EC 4E            LD   de,(vBufPtr)   ; de = buffer*
05C1   12                     LD   (de),a   
05C2   13                     INC   de   
05C3   ED 53 EC 4E            LD   (vBufPtr),de   ; save buffer*'
05C7   C3 28 0B               JP   dotNext   
05CA                             ;********************** PAGE 5 END *********************************************
05CA                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA C6 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 1A 0E               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   35                     DB   lsb(command_b_)   
060D   97                     DB   lsb(command_nop_)   
060E   99                     DB   lsb(decimal_)   
060F   97                     DB   lsb(command_nop_)   
0610   FF                     DB   lsb(command_f_)   
0611   97                     DB   lsb(command_nop_)   
0612   AB                     DB   lsb(hexadecimal_)   
0613   40                     DB   lsb(command_i_)   
0614   97                     DB   lsb(command_nop_)   
0615   F4                     DB   lsb(key_)   
0616   97                     DB   lsb(command_nop_)   
0617   8B                     DB   lsb(command_m_)   
0618   97                     DB   lsb(command_nop_)   
0619   FD                     DB   lsb(output_)   
061A   49                     DB   lsb(command_p_)   
061B   50                     DB   lsb(command_q_)   
061C   8E                     DB   lsb(command_r_)   
061D   91                     DB   lsb(command_s_)   
061E   B1                     DB   lsb(true_)   
061F   97                     DB   lsb(command_nop_)   
0620   94                     DB   lsb(command_v_)   
0621   B4                     DB   lsb(words_)   
0622   E9                     DB   lsb(xor_)   
0623   97                     DB   lsb(command_nop_)   
0624   97                     DB   lsb(command_nop_)   
0625   A1                     DB   lsb(div_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   CD 2E 0E               CALL   jumpTable   
0629   62                     DB   "b"   ; /ab absolute
062A   59                     DB   lsb(absolute_)   
062B   64                     DB   "d"   ; /ad address of
062C   B7                     DB   lsb(addrOf_)   
062D   69                     DB   "i"   ; /ad address of
062E   BA                     DB   lsb(arrayIter_)   
062F   73                     DB   "s"   ; /as array size
0630   E1                     DB   lsb(arraySize_)   
0631   00                     DB   NUL   
0632   C3 A5 06               JP   error1_   
0635                COMMAND_B_:      
0635   CD 2E 0E               CALL   jumpTable   
0638   72                     DB   "r"   ; /br break
0639   66                     DB   lsb(break_)   
063A   79                     DB   "y"   ; /by cold boot
063B   BD                     DB   lsb(coldStart_)   
063C   00                     DB   NUL   
063D   C3 CF 06               JP   bytes_   ; /b bytes
0640                             ; 6
0640                COMMAND_I_:      
0640   CD 2E 0E               CALL   jumpTable   
0643   6E                     DB   "n"   ; /in input
0644   80                     DB   lsb(input_)   
0645   00                     DB   NUL   
0646   C3 A5 06               JP   error1_   
0649                             ; 4
0649                COMMAND_P_:      
0649   CD 2E 0E               CALL   jumpTable   
064C   00                     DB   NUL   
064D   C3 A5 06               JP   error1_   
0650                             ; 6
0650                COMMAND_Q_:      
0650   CD 2E 0E               CALL   jumpTable   
0653   74                     DB   "t"   ; /qt quit
0654   D7                     DB   lsb(quit_)   
0655   00                     DB   NUL   
0656   C3 A5 06               JP   error1_   
0659                             ; 14
0659                             ; /ab absolute
0659                             ; num -- num
0659                ABSOLUTE_:      
0659   E1                     POP   hl   
065A   CB 7C                  BIT   7,h   
065C   C8                     RET   z   
065D   AF                     XOR   a   
065E   95                     SUB   l   
065F   6F                     LD   l,a   
0660   9F                     SBC   a,a   
0661   94                     SUB   h   
0662   67                     LD   h,a   
0663   E5                     PUSH   hl   
0664   DD E9                  JP   (ix)   
0666                             ; 8
0666                             ; 13
0666                             ; /br break from loop
0666                             ; --
0666                BREAK_:      
0666                BREAK:       
0666   E1                     POP   hl   ; hl = condition, break if false
0667   7D                     LD   a,l   
0668   B4                     OR   h   
0669   28 02                  JR   z,break1   
066B   DD E9                  JP   (ix)   
066D                BREAK1:      
066D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
066F   FD 54                  LD   d,iyh   
0671   21 08 00               LD   hl,8   
0674   19                     ADD   hl,de   
0675   23                     INC   hl   
0676   23                     INC   hl   
0677   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
067A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
067D   C3 C2 0B               JP   blockEnd   
0680                             ; 11
0680                             ; Z80 port input
0680                             ; port -- value
0680                INPUT_:      
0680   E1                     POP   hl   
0681   59                     LD   e,c   ; save IP
0682   4D                     LD   c,l   
0683   ED 68                  IN   l,(c)   
0685   26 00                  LD   h,0   
0687   4B                     LD   c,e   ; restore IP
0688   E5                     PUSH   hl   
0689   DD E9                  JP   (ix)   
068B                             ; 2
068B                COMMAND_M_:      
068B   C3 21 07               JP   command_m   
068E                             ; 2
068E                COMMAND_R_:      
068E   C3 2A 07               JP   command_r   
0691                             ; 2
0691                COMMAND_S_:      
0691   C3 46 07               JP   command_s   
0694                             ; 2
0694                COMMAND_V_:      
0694   C3 37 07               JP   command_v   
0697                             ; 2
0697                COMMAND_NOP_:      
0697   DD E9                  JP   (ix)   
0699                             ; 5
0699                DECIMAL_:      
0699   21 0A 00               LD   hl,10   
069C                DECIMAL1:      
069C   22 E8 4E               LD   (vNumBase),hl   
069F   DD E9                  JP   (ix)   
06A1                             ; 3
06A1                DIV_:        
06A1   00                     DB   NUL   
06A2   C3 22 04               JP   div   
06A5                             ; 3
06A5                ERROR1_:      
06A5   21 01 00               LD   hl,1   ; error 1: unknown command
06A8   C3 AB 0F               JP   error   
06AB                             ; 3
06AB                HEXADECIMAL_:      
06AB   21 10 00               LD   hl,16   
06AE   C3 9C 06               JP   decimal1   
06B1                             ; 2
06B1                TRUE_:       
06B1   C3 9C 03               JP   true1   
06B4                             ; 2
06B4                WORDS_:      
06B4   C3 C0 06               JP   words   
06B7                             ; ; 2
06B7                ADDROF_:      
06B7   C3 4E 0B               JP   addrOf   
06BA                             ; 2
06BA                ARRAYITER_:      
06BA   C3 27 08               JP   arrayIter   
06BD                             ; 3
06BD                             ; /by
06BD                COLDSTART_:      
06BD   C3 F7 0E               JP   coldStart   
06C0                             ; 4
06C0                             ; /w
06C0                WORDS:       
06C0   21 02 00               LD   hl,2   
06C3   C3 D2 06               JP   bytes1   
06C6                             ; 8
06C6                             ; //
06C6                COMMENT:      
06C6   03                     INC   bc   ; point to next char
06C7   0A                     LD   a,(bc)   
06C8   FE 20                  CP   " "   ; terminate on any char less than SP
06CA   30 FA                  JR   nc,comment   
06CC   0B                     DEC   bc   
06CD   DD E9                  JP   (ix)   
06CF                             ; 6
06CF                             ; /b
06CF                BYTES_:      
06CF   21 01 00               LD   hl,1   
06D2                BYTES1:      
06D2   22 E6 4E               LD   (vDataWidth),hl   
06D5   DD E9                  JP   (ix)   
06D7                             ; 10
06D7                             ; /qt
06D7                             ; bool --
06D7                QUIT_:       
06D7   E1                     POP   hl   ; hl = condition, exit if true
06D8   7D                     LD   a,l   
06D9   B4                     OR   h   
06DA   20 02                  JR   nz,quit1   
06DC   DD E9                  JP   (ix)   
06DE                QUIT1:       
06DE   C3 C2 0B               JP   blockEnd   
06E1                             ; 10
06E1                             ; /as size of an array, num elements, ignores vDataWidth :-/
06E1                             ; array* -- num
06E1                ARRAYSIZE_:      
06E1   E1                     POP   hl   
06E2   2B                     DEC   hl   ; msb size
06E3   56                     LD   d,(hl)   
06E4   2B                     DEC   hl   ; lsb size
06E5   5E                     LD   e,(hl)   
06E6   D5                     PUSH   de   
06E7   DD E9                  JP   (ix)   
06E9                             ; 12
06E9                XOR_:        
06E9   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06EA                XOR1:        
06EA   E1                     POP   hl   
06EB   7B                     LD   a,e   
06EC   AD                     XOR   l   
06ED   6F                     LD   l,a   
06EE   7A                     LD   a,d   
06EF   AC                     XOR   h   
06F0   67                     LD   h,a   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; 2
06F4                             ; key_:
06F4                             ;     jr key
06F4                             ; /k                              6
06F4                KEY_:        
06F4                KEY:         
06F4   CD 81 00               CALL   getchar   
06F7   26 00                  LD   h,0   
06F9   6F                     LD   l,a   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                             ; 2
06FD                OUTPUT_:      
06FD   18 02                  JR   output   
06FF                             ; 2
06FF                COMMAND_F_:      
06FF   18 09                  JR   command_f   
0701                             ;********************** PAGE 6 END *********************************************
0701                             ; .align $100
0701                             ;********************** PAGE 7 BEGIN *********************************************
0701                             ; /o Z80 port output               9
0701                             ; value port --
0701                OUTPUT:      
0701   E1                     POP   hl   
0702   59                     LD   e,c   ; save IP
0703   4D                     LD   c,l   
0704   E1                     POP   hl   
0705   ED 69                  OUT   (c),l   
0707   4B                     LD   c,e   ; restore IP
0708   DD E9                  JP   (ix)   
070A                COMMAND_F:      
070A   CD 2E 0E               CALL   jumpTable   
070D   64                     DB   "d"   ; /fd fold
070E   5F                     DB   lsb(fold_)   
070F   65                     DB   "e"   ; /fe forEach
0710   59                     DB   lsb(forEach_)   
0711   73                     DB   "s"   ; /fs funcSrc
0712   62                     DB   lsb(funcSrc_)   
0713   74                     DB   "t"   ; /ft filter
0714   5C                     DB   lsb(filter_)   
0715   31                     DB   "1"   
0716   65                     DB   lsb(f1_)   
0717   32                     DB   "2"   
0718   68                     DB   lsb(f2_)   
0719   33                     DB   "3"   
071A   6B                     DB   lsb(f3_)   
071B   34                     DB   "4"   
071C   6E                     DB   lsb(f4_)   
071D   00                     DB   NUL   
071E   C3 71 07               JP   false_   
0721                COMMAND_M:      
0721   CD 2E 0E               CALL   jumpTable   
0724   70                     DB   "p"   ; /mp map
0725   74                     DB   lsb(map_)   
0726   00                     DB   NUL   
0727   C3 A5 06               JP   error1_   
072A                COMMAND_R:      
072A   CD 2E 0E               CALL   jumpTable   
072D   63                     DB   "c"   ; /rc tail call optimisation
072E   77                     DB   lsb(recur_)   
072F   65                     DB   "e"   ; /re remainder
0730   7D                     DB   lsb(remain_)   
0731   67                     DB   "g"   ; /rg range src
0732   86                     DB   lsb(rangeSrc_)   
0733   00                     DB   NUL   
0734   C3 A5 06               JP   error1_   
0737                COMMAND_V:      
0737   CD 2E 0E               CALL   jumpTable   
073A   68                     DB   "h"   
073B   93                     DB   lsb(varHeapPtr_)   
073C   74                     DB   "t"   
073D   9C                     DB   lsb(varTIBPtr_)   
073E   48                     DB   "H"   
073F   89                     DB   lsb(constHeapStart_)   
0740   54                     DB   "T"   
0741   8E                     DB   lsb(constTIBStart_)   
0742   00                     DB   NUL   
0743   C3 A5 06               JP   error1_   
0746                COMMAND_S:      
0746   CD 42 0E               CALL   xjumpTable   
0749   62                     DB   "b"   
074A   EF 0A                  DW   stringBegin   
074C   65                     DB   "e"   
074D   F7 0A                  DW   stringEnd   
074F   69                     DB   "i"   
0750   83 07                  DW   stringIter_   
0752   73                     DB   "s"   
0753   26 0B                  DW   stringSize   
0755   00                     DB   NUL   
0756   C3 A5 06               JP   error1_   
0759                FOREACH_:      
0759   C3 20 0A               JP   forEach   
075C                FILTER_:      
075C   C3 70 09               JP   filter   
075F                FOLD_:       
075F   C3 CE 09               JP   fold   
0762                FUNCSRC_:      
0762   C3 6C 0A               JP   funcSrc   
0765                F1_:         
0765   C3 F4 0F               JP   f1   
0768                F2_:         
0768   C3 3C 10               JP   f2   
076B                F3_:         
076B   C3 48 10               JP   f3   
076E                F4_:         
076E   C3 54 10               JP   f4   
0771                FALSE_:      
0771   C3 A2 03               JP   false1   
0774                MAP_:        
0774   C3 2E 09               JP   map   
0777                RECUR_:      
0777   E1                     POP   hl   
0778   22 F2 4E               LD   (vRecur),hl   
077B   DD E9                  JP   (ix)   
077D                REMAIN_:      
077D   2A FA 4E               LD   hl,(vRemain)   
0780   E5                     PUSH   hl   
0781   DD E9                  JP   (ix)   
0783                STRINGITER_:      
0783   C3 A8 08               JP   stringIter   
0786                RANGESRC_:      
0786   C3 AB 07               JP   rangeSrc   
0789                CONSTHEAPSTART_:      
0789   11 22 4F               LD   de,HEAP   
078C   18 1A                  JR   constant   
078E                CONSTTIBSTART_:      
078E   11 00 4C               LD   de,TIB   
0791   18 15                  JR   constant   
0793                VARHEAPPTR_:      
0793   ED 5B F0 4E            LD   de,(vHeapPtr)   
0797   21 F0 4E               LD   hl,vHeapPtr   
079A   18 09                  JR   variable   
079C                VARTIBPTR_:      
079C   ED 5B EA 4E            LD   de,(vTIBPtr)   
07A0   21 EA 4E               LD   hl,vTIBPtr   
07A3   18 00                  JR   variable   
07A5                VARIABLE:      
07A5   22 F8 4E               LD   (vPointer),hl   
07A8                CONSTANT:      
07A8   D5                     PUSH   de   
07A9   DD E9                  JP   (ix)   
07AB                             ;********************** PAGE 7 END *********************************************
07AB                             ;*******************************************************************
07AB                             ; Monty implementations
07AB                             ;*******************************************************************
07AB                             ; /rg rangeSrc
07AB                             ; begin end step -- src
07AB                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07AB                RANGESRC:      ; range source: begin, end, step, local: L
07AB   CD 2F 0C               CALL   go   
07AE   00 00                  DW   NUL   
07B0   BA 07                  DW   rangeSrcM_1884S1450   
07B2   B4 07                  DW   $+2   
07B4   01                     DB   1   
07B5   04 62 65 73 4C         .PSTR   "besL"   
07BA                RANGESRCM_1884S1450:      
07BA   7B                     DB   "{"   
07BB   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07C6   5C 6B 74 7B            DB   "\\kt{"   
07CA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07D2   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07D8   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07E0   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07E8   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07F2   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07FA   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0801   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0815   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
081D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0824   7D                     DB   "}"   
0825   7D                     DB   "}"   
0826   00                     DB   0   
0827                             ; /ai arrayIter
0827                             ; array* -- src
0827                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0827                ARRAYITER:      
0827   CD 2F 0C               CALL   go   
082A   00 00                  DW   NUL   
082C   34 08                  DW   arrayIterM_1903S1470   
082E   30 08                  DW   $+2   
0830   01                     DB   1   
0831   02 61 4C               .PSTR   "aL"   
0834                ARRAYITERM_1903S1470:      
0834   7B                     DB   "{"   
0835   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
0845   5C 6B 74 7B            DB   "\\kt{"   
0849   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0851   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0857   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
085F   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0867   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
086E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0876   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
087F   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0896   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
089E   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08A5   7D                     DB   "}"   
08A6   7D                     DB   "}"   
08A7   00                     DB   0   
08A8                             ; /si stringIter
08A8                             ; string* -- src
08A8                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08A8                STRINGITER:      
08A8   CD 2F 0C               CALL   go   
08AB   00 00                  DW   NUL   
08AD   B5 08                  DW   stringIterM_1922S1490   
08AF   B1 08                  DW   $+2   
08B1   01                     DB   1   
08B2   02 73 4C               .PSTR   "sL"   
08B5                STRINGITERM_1922S1490:      
08B5   7B                     DB   "{"   
08B6   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08C0   5C 6B 74 7B            DB   "\\kt{"   
08C4   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08CC   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08D3   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08DB   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08E3   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08EA   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
08F9   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0901   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0908   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
091C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0924   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
092B   7D                     DB   "}"   
092C   7D                     DB   "}"   
092D   00                     DB   0   
092E                             ; /mp map
092E                             ; src func -- src1
092E                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
092E                MAP:         ; map: source, function
092E   CD 2F 0C               CALL   go   
0931   00 00                  DW   NUL   
0933   3B 09                  DW   mapM_1942S1512   
0935   37 09                  DW   $+2   
0937   00                     DB   0   
0938   02 73 66               .PSTR   "sf"   
093B                MAPM_1942S1512:      
093B   7B                     DB   "{"   
093C   5C 6B 74 7B            DB   "\\kt{"   
0940   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0948   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
094C   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0951   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
095D   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0966   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096D   7D                     DB   "}"   
096E   7D                     DB   "}"   
096F   00                     DB   0   
0970                             ; /ft filter
0970                             ; src pred -- src1
0970                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0970                FILTER:      ; filter: source, predicate, local: T
0970   CD 2F 0C               CALL   go   
0973   00 00                  DW   NUL   
0975   7E 09                  DW   filterM_1956S1527   
0977   79 09                  DW   $+2   
0979   01                     DB   1   
097A   03 73 70 54            .PSTR   "spT"   
097E                FILTERM_1956S1527:      
097E   7B                     DB   "{"   
097F   5B 30 5D 25 54 3D      DB   "[0]%T="   
0985   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0989   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098D   5B                     DB   "["   
098E   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
099B   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09A3   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09A7   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09AC   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09C2   3F 3F                  DB   "??"   
09C4   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09CB   7D                     DB   "}"   
09CC   7D                     DB   "}"   
09CD   00                     DB   0   
09CE                             ; /fd fold
09CE                             ; reducer is a function like: \\da00bbLi4u
09CE                             ; src init reducer -- src1
09CE                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09CE                FOLD:        ; src, init, reducer
09CE   CD 2F 0C               CALL   go   
09D1   00 00                  DW   NUL   
09D3   DD 09                  DW   foldM_1975S1547   
09D5   D7 09                  DW   $+2   
09D7   01                     DB   1   
09D8   04 73 69 72 41         .PSTR   "sirA"   
09DD                FOLDM_1975S1547:      
09DD   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09DE   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09E5   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09ED   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09F2   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A0D   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A16   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A1D   7D                     DB   "}"   
0A1E   7D                     DB   "}"   
0A1F   00                     DB   0   
0A20                             ; /fe forEach
0A20                             ; src proc --
0A20                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A20                FOREACH:      ; forEach: source, procedure, local: T
0A20   CD 2F 0C               CALL   go   
0A23   00 00                  DW   NUL   
0A25   2E 0A                  DW   forEachM_1989S1562   
0A27   29 0A                  DW   $+2   
0A29   01                     DB   1   
0A2A   03 73 70 54            .PSTR   "spT"   
0A2E                FOREACHM_1989S1562:      
0A2E   7B                     DB   "{"   
0A2F   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A35   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A39   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A41   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A46   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A58   3F 3F                  DB   "??"   ; ifte:
0A5A   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A63   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A6A   7D                     DB   "}"   
0A6B   00                     DB   0   
0A6C                             ; ; /fs funcSrc
0A6C                             ; ; func -- src
0A6C                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A6C                FUNCSRC:      ; :f func or block
0A6C   CD 2F 0C               CALL   go   
0A6F   00 00                  DW   NUL   
0A71   78 0A                  DW   funcSrcM_2003S1577   
0A73   75 0A                  DW   $+2   
0A75   00                     DB   0   
0A76   01 66                  .PSTR   "f"   
0A78                FUNCSRCM_2003S1577:      
0A78   7B                     DB   "{"   
0A79   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A7D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A85   5C 64 74 7B            DB   "\\dt{"   
0A89   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A9B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AA2   7D                     DB   "}"   
0AA3   7D                     DB   "}"   
0AA4   00                     DB   0   
0AA5                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0AA5                DOTARRAY:      
0AA5   CD 2F 0C               CALL   go   
0AA8   00 00                  DW   NUL   
0AAA   B3 0A                  DW   dotArrayM_2013S1588   
0AAC   AE 0A                  DW   $+2   
0AAE   02                     DB   2   
0AAF   03 61 62 63            .PSTR   "abc"   
0AB3                DOTARRAYM_2013S1588:      
0AB3   7B                     DB   "{"   
0AB4   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AEB   7D                     DB   "}"   
0AEC   00                     DB   0   
0AED                             ;*******************************************************************
0AED                             ; unused opcodes (reserved)
0AED                             ;*******************************************************************
0AED                UNDERSCORE:      
0AED                COMMA:       
0AED   DD E9                  JP   (ix)   
0AEF                             ;*******************************************************************
0AEF                             ; implementations
0AEF                             ;*******************************************************************
0AEF                STRINGBEGIN:      
0AEF   21 FF FF               LD   hl,TRUE   ; string mode = true
0AF2   22 F6 4E               LD   (vStrMode),hl   
0AF5   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0AF7                STRINGEND:      
0AF7   21 00 00               LD   hl,FALSE   ; string mode = false
0AFA   22 F6 4E               LD   (vStrMode),hl   
0AFD   2A EC 4E               LD   hl,(vBufPtr)   ; append NUL to string
0B00   AF                     XOR   a   
0B01   77                     LD   (hl),a   
0B02   23                     INC   hl   ; hl = string_end*
0B03   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0B07   11 00 4D               LD   de,BUFFER   ; de = string*
0B0A   B7                     OR   a   ; bc = size
0B0B   ED 52                  SBC   hl,de   
0B0D   44 4D                  LD   bc,hl   
0B0F   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = hstring*
0B12   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0B13   D5                     PUSH   de   ; return hstring*
0B14   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0B16   ED 53 F0 4E            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0B1A   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0B1E                STRINGEND1:      
0B1E   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr
0B21   22 EC 4E               LD   (vBufPtr),hl   
0B24   DD E9                  JP   (ix)   
0B26                STRINGSIZE:      
0B26   DD E9                  JP   (ix)   
0B28                DOTNEXT:      
0B28   3A F6 4E               LD   a,(vStrMode)   ; if string mode then exit
0B2B   3C                     INC   a   
0B2C   20 02                  JR   nz,dotNext1   
0B2E   DD E9                  JP   (ix)   
0B30                DOTNEXT1:      
0B30   11 00 4D               LD   de,BUFFER   
0B33   2A EC 4E               LD   hl,(vBufPtr)   
0B36   B7                     OR   a   ; hl = count, de = vHeapPtr
0B37   ED 52                  SBC   hl,de   
0B39   C3 42 0B               JP   dotNext3   
0B3C                DOTNEXT2:      
0B3C   1A                     LD   a,(de)   ; print char at char*
0B3D   CD 85 00               CALL   putchar   
0B40   13                     INC   de   ; char*++
0B41   2B                     DEC   hl   ; count--
0B42                DOTNEXT3:      
0B42   7D                     LD   a,l   ; count == 0?
0B43   B4                     OR   h   
0B44   20 F6                  JR   nz,dotNext2   ; if not loop
0B46   21 00 4D               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B49   22 EC 4E               LD   (vBufPtr),hl   
0B4C   DD E9                  JP   (ix)   
0B4E                             ; /ad addrOf                    24
0B4E                             ; char -- addr
0B4E                ADDROF:      
0B4E   E1                     POP   hl   ; a = char
0B4F   7D                     LD   a,l   
0B50   FE 7B                  CP   "z"+1   ; if a > z then exit
0B52   30 19                  JR   nc,addrOf2   
0B54   D6 41                  SUB   "A"   ; a - 65
0B56   38 15                  JR   c,addrOf2   ; if < A then exit
0B58   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B5A   38 06                  JR   c,addrOf1   
0B5C   D6 06                  SUB   "a"-("Z"+1)   
0B5E   FE 1A                  CP   "Z"-"A"+1   
0B60   38 0B                  JR   c,addrOf2   ; if < a then exit
0B62                ADDROF1:      
0B62   87                     ADD   a,a   ; double a
0B63   21 00 4E               LD   hl,VARS   ; hl = VARS + a
0B66   85                     ADD   a,l   
0B67   6F                     LD   l,a   
0B68   3E 00                  LD   a,0   
0B6A   8C                     ADC   a,h   
0B6B   67                     LD   h,a   
0B6C   E5                     PUSH   hl   
0B6D                ADDROF2:      
0B6D   DD E9                  JP   (ix)   
0B6F                             ;                               51
0B6F                RBRACK:      
0B6F                ARRAYEND:      
0B6F   FD 54                  LD   d,iyh   ; de = BP
0B71   FD 5D                  LD   e,iyl   
0B73   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0B77   62 6B                  LD   hl,de   ; hl = de = BP
0B79   B7                     OR   a   
0B7A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B7C   CB 3C                  SRL   h   ; 
0B7E   CB 1D                  RR   l   
0B80   44 4D                  LD   bc,hl   ; bc = count
0B82   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B85   71                     LD   (hl),c   ; write num items in length word
0B86   23                     INC   hl   
0B87   70                     LD   (hl),b   
0B88   23                     INC   hl   ; hl = array[0], bc = count
0B89                             ; de = BP, hl = array[0], bc = count
0B89   18 15                  JR   arrayEnd3   
0B8B                ARRAYEND1:      
0B8B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B8E   77                     LD   (hl),a   ; write lsb of array item
0B8F   23                     INC   hl   ; move to msb of array item
0B90   3A E6 4E               LD   a,(vDataWidth)   ; vDataWidth=1?
0B93   3D                     DEC   a   
0B94   28 05                  JR   z,arrayEnd2   
0B96   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B99   77                     LD   (hl),a   ; write msb of array item
0B9A   23                     INC   hl   ; move to next word in array
0B9B                ARRAYEND2:      
0B9B   FD 2B                  DEC   iy   ; move to next word on stack
0B9D   FD 2B                  DEC   iy   
0B9F   0B                     DEC   bc   ; dec items count
0BA0                ARRAYEND3:      
0BA0   79                     LD   a,c   ; if not zero loop
0BA1   B0                     OR   b   
0BA2   20 E7                  JR   nz,arrayEnd1   
0BA4   EB                     EX   de,hl   ; de = end of array, hl = BP
0BA5   F9                     LD   sp,hl   ; sp = BP
0BA6   E1                     POP   hl   ; de = end of array, hl = old BP
0BA7   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0BA8   FD 62                  LD   iyh,d   
0BAA   FD 6B                  LD   iyl,e   
0BAC   D1                     POP   de   ; pop arg_list (discard)
0BAD   D1                     POP   de   ; pop first_arg* (discard)
0BAE   D1                     POP   de   ; pop IP (discard)
0BAF   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = array[-2]
0BB3   13                     INC   de   
0BB4   13                     INC   de   
0BB5   D5                     PUSH   de   ; return array[0]
0BB6   22 F0 4E               LD   (vHeapPtr),hl   ; move heap* to end of array
0BB9   22 EC 4E               LD   (vBufPtr),hl   
0BBC   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0BC0   DD E9                  JP   (ix)   
0BC2                             ;                               58
0BC2                RBRACE:      
0BC2                BLOCKEND:      
0BC2   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BC5   FD 56 01               LD   d,(iy+1)   
0BC8   ED 53 04 4F            LD   (vTemp1),de   
0BCC   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BCF   FD 56 07               LD   d,(iy+7)   
0BD2   ED 53 06 4F            LD   (vTemp2),de   
0BD6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BD9   FD 56 03               LD   d,(iy+3)   
0BDC   EB                     EX   de,hl   
0BDD   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BE0   FD 56 01               LD   d,(iy+1)   
0BE3   13                     INC   de   ; for carry flag <=
0BE4   B7                     OR   a   
0BE5   ED 52                  SBC   hl,de   
0BE7   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BE9   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BEB   FD 5D                  LD   e,iyl   
0BED   21 08 00               LD   hl,8   
0BF0   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BF1   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BF2   18 0C                  JR   blockEnd2   
0BF4                BLOCKEND1:      ; same scope
0BF4   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BF7   FD 56 03               LD   d,(iy+3)   
0BFA   EB                     EX   de,hl   
0BFB   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BFD   FD 5D                  LD   e,iyl   
0BFF   EB                     EX   de,hl   
0C00                BLOCKEND2:      
0C00   44 4D                  LD   bc,hl   ; bc = hl = BP
0C02   B7                     OR   a   ; hl = BP - SP = count
0C03   ED 72                  SBC   hl,sp   
0C05   7D                     LD   a,l   
0C06   B4                     OR   h   
0C07   28 09                  JR   z,blockEnd3   
0C09   C5                     PUSH   bc   ; bc = count, hl = BP
0C0A   44 4D                  LD   bc,hl   
0C0C   E1                     POP   hl   
0C0D   2B                     DEC   hl   ; hl = BP-1
0C0E   1B                     DEC   de   ; de = args*-1
0C0F   ED B8                  LDDR      
0C11   13                     INC   de   
0C12                BLOCKEND3:      
0C12   EB                     EX   de,hl   ; sp = de = new tos*
0C13   F9                     LD   sp,hl   
0C14   ED 4B 06 4F            LD   bc,(vTemp2)   
0C18   FD 2A 04 4F            LD   iy,(vTemp1)   
0C1C   ED 5B F2 4E            LD   de,(vRecur)   ; de = recur vector
0C20   7B                     LD   a,e   ; check for NUL
0C21   B2                     OR   d   
0C22   20 02                  JR   nz,blockEnd4   
0C24   DD E9                  JP   (ix)   
0C26                BLOCKEND4:      
0C26   21 00 00               LD   hl,0   ; clear recur vector
0C29   22 F2 4E               LD   (vRecur),hl   
0C2C   C3 30 0C               JP   go1   ; execute de
0C2F                             ; execute a block of code which ends with } 116
0C2F                             ; creates a root scope if BP == stack
0C2F                             ; else uses outer scope
0C2F                CARET:       
0C2F                GO:          
0C2F   D1                     POP   de   ; de = block*
0C30                GO1:         
0C30   7B                     LD   a,e   ; if block* == null, exit
0C31   B2                     OR   d   
0C32   20 02                  JR   nz,go2   
0C34   DD E9                  JP   (ix)   
0C36                GO2:         
0C36   1A                     LD   a,(de)   
0C37   FE 7B                  CP   "{"   
0C39   28 06                  JR   z,goBlock   
0C3B   FE 28                  CP   "("   
0C3D   C2 74 0C               JP   nz,goFunc   
0C40   D5                     PUSH   de   ; push de just before stack frame
0C41                GOBLOCK:      
0C41   ED 53 04 4F            LD   (vTemp1),de   ; save de
0C45   21 00 4C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C48   FD 54                  LD   d,iyh   
0C4A   FD 5D                  LD   e,iyl   
0C4C   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C4D   ED 52                  SBC   hl,de   
0C4F   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de
0C53   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C54   B4                     OR   h   
0C55   3E 00                  LD   a,0   
0C57   28 6A                  JR   z,goFunc8   
0C59   C5                     PUSH   bc   ; push IP
0C5A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C5D   FD 46 05               LD   b,(iy+5)   
0C60   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C63   FD 66 03               LD   h,(iy+3)   
0C66                GOBLOCK2:      
0C66   C5                     PUSH   bc   ; arg_list*
0C67   E5                     PUSH   hl   ; first_arg*
0C68   FD E5                  PUSH   iy   ; push BP
0C6A   FD 21 00 00            LD   iy,0   ; BP = SP
0C6E   FD 39                  ADD   iy,sp   
0C70                GOBLOCK3:      
0C70   42 4B                  LD   bc,de   ; bc = de = block*-1
0C72   DD E9                  JP   (ix)   
0C74                GOFUNC:      ; execute func
0C74   EB                     EX   de,hl   ; hl = func*
0C75   5E                     LD   e,(hl)   ; de = partial_array*
0C76   23                     INC   hl   
0C77   56                     LD   d,(hl)   
0C78   23                     INC   hl   
0C79   7B                     LD   a,e   ; if partial_array* == null skip
0C7A   B2                     OR   d   
0C7B   28 21                  JR   z,goFunc3   
0C7D   ED 43 04 4F            LD   (vTemp1),bc   
0C81   22 06 4F               LD   (vTemp2),hl   ; save bc,hl
0C84   EB                     EX   de,hl   ; hl = partial_array*
0C85   2B                     DEC   hl   ; bc = count
0C86   46                     LD   b,(hl)   
0C87   2B                     DEC   hl   
0C88   4E                     LD   c,(hl)   
0C89   23                     INC   hl   ; hl = array data*
0C8A   23                     INC   hl   
0C8B   18 06                  JR   goFunc2   ; push each item on stack
0C8D                GOFUNC1:      
0C8D   5E                     LD   e,(hl)   ; de = partial item
0C8E   23                     INC   hl   
0C8F   56                     LD   d,(hl)   
0C90   23                     INC   hl   
0C91   D5                     PUSH   de   ; push on stack
0C92   0B                     DEC   bc   
0C93                GOFUNC2:      
0C93   79                     LD   a,c   ; if count != 0 then loop
0C94   B0                     OR   b   
0C95   20 F6                  JR   nz,goFunc1   
0C97   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore bc
0C9B   2A 06 4F               LD   hl,(vTemp2)   ; restore hl
0C9E                GOFUNC3:      
0C9E   5E                     LD   e,(hl)   ; de = block*
0C9F   23                     INC   hl   
0CA0   56                     LD   d,(hl)   
0CA1   23                     INC   hl   
0CA2   ED 53 04 4F            LD   (vTemp1),de   ; save block*
0CA6   5E                     LD   e,(hl)   ; de = arg_list*
0CA7   23                     INC   hl   
0CA8   56                     LD   d,(hl)   
0CA9   23                     INC   hl   
0CAA   EB                     EX   de,hl   ; hl = arg_list*
0CAB   ED 5B 04 4F            LD   de,(vTemp1)   ; restore de = block*
0CAF   7D                     LD   a,l   ; if arg_list* == null a = 0
0CB0   B4                     OR   h   
0CB1   20 03                  JR   nz,goFunc4   
0CB3   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CB4   18 0D                  JR   goFunc8   
0CB6                GOFUNC4:      ; allocate locals
0CB6   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0CB7   18 03                  JR   goFunc6   
0CB9                GOFUNC5:      ; loop
0CB9   3B                     DEC   sp   
0CBA   3B                     DEC   sp   
0CBB   3D                     DEC   a   
0CBC                GOFUNC6:      
0CBC   B7                     OR   a   
0CBD   20 FA                  JR   nz,goFunc5   ; end loop
0CBF                GOFUNC7:      
0CBF   23                     INC   hl   ; a = num_args* x 2
0CC0   7E                     LD   a,(hl)   
0CC1   2B                     DEC   hl   
0CC2   87                     ADD   a,a   ; a *= 2
0CC3                GOFUNC8:      
0CC3   C5                     PUSH   bc   ; push IP
0CC4   44 4D                  LD   bc,hl   
0CC6   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CC9   85                     ADD   a,l   
0CCA   6F                     LD   l,a   
0CCB   39                     ADD   hl,sp   
0CCC   18 98                  JR   goBlock2   
0CCE                             ; 
0CCE                             ;*******************************************************************
0CCE                             ; general routines
0CCE                             ;*******************************************************************
0CCE                             ; arg_list - parses arg_list e.g. ab:c
0CCE                             ; -- arg_list*
0CCE                PARSEARGS:      
0CCE   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CD1   2A F0 4E               LD   hl,(vHeapPtr)   ; hl = heap*
0CD4   E5                     PUSH   hl   ; save start of arg_list
0CD5   23                     INC   hl   ; skip length fields to start of string
0CD6   23                     INC   hl   
0CD7   03                     INC   bc   ; point to next char
0CD8                PARSEARGS1:      
0CD8   0A                     LD   a,(bc)   
0CD9   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CDB   20 03                  JR   nz,parseArgs1a   
0CDD   14                     INC   d   ; non zero value local count acts as flag
0CDE   18 10                  JR   parseArgs3   
0CE0                PARSEARGS1A:      
0CE0   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CE2   38 0F                  JR   c,parseArgs4   
0CE4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CE6   30 0B                  JR   nc,parseArgs4   
0CE8                PARSEARGS2:      
0CE8   77                     LD   (hl),a   
0CE9   23                     INC   hl   
0CEA   1C                     INC   e   ; increase arg count
0CEB   AF                     XOR   a   
0CEC   B2                     OR   d   
0CED   28 01                  JR   z,parseArgs3   
0CEF   14                     INC   d   ; if d > 0 increase local count
0CF0                PARSEARGS3:      
0CF0   03                     INC   bc   ; point to next char
0CF1   18 E5                  JR   parseArgs1   
0CF3                PARSEARGS4:      
0CF3   0B                     DEC   bc   
0CF4   AF                     XOR   a   
0CF5   B2                     OR   d   
0CF6   28 01                  JR   z,parseArgs5   
0CF8   15                     DEC   d   ; remove initial inc
0CF9                PARSEARGS5:      
0CF9   23                     INC   hl   
0CFA   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CFD   22 EC 4E               LD   (vBufPtr),hl   
0D00   E1                     POP   hl   ; hl = start of arg_list
0D01   72                     LD   (hl),d   ; write number of locals at start - 1
0D02   23                     INC   hl   
0D03   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D04   2B                     DEC   hl   
0D05   E3                     EX   (sp),hl   
0D06   E9                     JP   (hl)   
0D07                             ; create block: parses block e.g. 00bbIC4uLi4g
0D07                             ; -- block*
0D07                PARSEBLOCK:      
0D07   C5                     PUSH   bc   ; return pointer to first { of block
0D08   03                     INC   bc   
0D09   16 01                  LD   d,1   ; nesting: count first parenthesis
0D0B                PARSEBLOCK1:      ; Skip to end of definition
0D0B   0A                     LD   a,(bc)   ; Get the next character
0D0C   03                     INC   bc   ; Point to next character
0D0D   FE 21                  CP   " " + 1   ; ignore whitespace
0D0F   38 FA                  JR   c,parseBlock1   
0D11   FE 29                  CP   ")"   
0D13   28 2D                  JR   z,parseBlock4   
0D15   FE 7D                  CP   "}"   
0D17   28 29                  JR   z,parseBlock4   
0D19   FE 5D                  CP   "]"   
0D1B   28 25                  JR   z,parseBlock4   
0D1D   FE 28                  CP   "("   
0D1F   28 16                  JR   z,parseBlock2   
0D21   FE 7B                  CP   "{"   
0D23   28 12                  JR   z,parseBlock2   
0D25   FE 5B                  CP   "["   
0D27   28 0E                  JR   z,parseBlock2   
0D29   FE 27                  CP   "'"   
0D2B   28 0D                  JR   z,parseBlock3   
0D2D   FE 60                  CP   "`"   
0D2F   28 09                  JR   z,parseBlock3   
0D31   FE 22                  CP   DQ   
0D33   28 05                  JR   z,parseBlock3   
0D35   18 D4                  JR   parseBlock1   
0D37                PARSEBLOCK2:      
0D37   14                     INC   d   
0D38   18 D1                  JR   parseBlock1   
0D3A                PARSEBLOCK3:      
0D3A   3E 80                  LD   a,$80   
0D3C   AA                     XOR   d   
0D3D   57                     LD   d,a   
0D3E   20 CB                  JR   nz,parseBlock1   
0D40   18 03                  JR   parseBlock5   
0D42                PARSEBLOCK4:      
0D42   15                     DEC   d   
0D43   20 C6                  JR   nz,parseBlock1   ; get the next element
0D45                PARSEBLOCK5:      
0D45   60 69                  LD   hl,bc   ; hl = IP
0D47   11 22 4F               LD   de,HEAP   ; is IP pointing to object in heap
0D4A   B7                     OR   a   ; IP - HEAP
0D4B   ED 52                  SBC   hl,de   
0D4D   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D4F   28 20                  JR   z,parseBlock6   
0D51   60 69                  LD   hl,bc   ; hl = IP
0D53   D1                     POP   de   ; de = block*
0D54   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D58   B7                     OR   a   ; bc = size
0D59   ED 52                  SBC   hl,de   
0D5B   44 4D                  LD   bc,hl   
0D5D   EB                     EX   de,hl   ; hl = block* de = heap*
0D5E   ED 5B F0 4E            LD   de,(vHeapPtr)   
0D62   D5                     PUSH   de   ; return hblock*
0D63   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D65   ED 53 F0 4E            LD   (vHeapPtr),de   ; heap* += size
0D69   ED 53 EC 4E            LD   (vBufPtr),de   
0D6D   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0D71                PARSEBLOCK6:      
0D71   0B                     DEC   bc   ; balanced, exit
0D72   E1                     POP   hl   ; hl = block*
0D73   E3                     EX   (sp),hl   ; return to caller
0D74   E9                     JP   (hl)   
0D75                             ; create function
0D75                             ; arg_list* block* -- func*
0D75                CREATEFUNC:      
0D75   E1                     POP   hl   ; save retrn address
0D76   22 08 4F               LD   (vTemp3),hl   
0D79   ED 43 04 4F            LD   (vTemp1),bc   ; save IP
0D7D   E1                     POP   hl   ; hl = block*
0D7E   22 06 4F               LD   (vTemp2),hl   ; save block*
0D81   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D84   FD 56 05               LD   d,(iy+5)   
0D87   7B                     LD   a,e   ; if arg_list == null then make a func
0D88   B2                     OR   d   
0D89   20 09                  JR   nz,createFunc0   
0D8B   21 00 00               LD   hl,0   ; partial_array = null
0D8E   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D92   18 65                  JR   createFunc5   
0D94                CREATEFUNC0:      
0D94   E1                     POP   hl   ; hl = inner_arg_list*
0D95   E5                     PUSH   hl   ; save inner_arg_list
0D96   ED 5B F0 4E            LD   de,(vHeapPtr)   ; de = compile*
0D9A   7E                     LD   a,(hl)   ; compile inner_num_locals
0D9B   4F                     LD   c,a   ; b = inner_num_locals
0D9C   12                     LD   (de),a   
0D9D   23                     INC   hl   
0D9E   13                     INC   de   
0D9F   7E                     LD   a,(hl)   ; compile inner_length
0DA0   12                     LD   (de),a   
0DA1   91                     SUB   c   ; a = inner_num args
0DA2   23                     INC   hl   
0DA3   13                     INC   de   
0DA4   B7                     OR   a   ; compile args if inner_length > 0
0DA5   28 05                  JR   z,createFunc1   
0DA7   4F                     LD   c,a   ; bc = a
0DA8   06 00                  LD   b,0   
0DAA   ED B0                  LDIR      
0DAC                CREATEFUNC1:      
0DAC   EB                     EX   de,hl   ; hl = outer_arg_list
0DAD   FD 5E 04               LD   e,(iy+4)   
0DB0   FD 56 05               LD   d,(iy+5)   
0DB3   EB                     EX   de,hl   
0DB4   23                     INC   hl   ; a = outer_length
0DB5   7E                     LD   a,(hl)   
0DB6   23                     INC   hl   
0DB7   B7                     OR   a   
0DB8   28 05                  JR   z,createFunc2   
0DBA   4F                     LD   c,a   
0DBB   06 00                  LD   b,0   
0DBD   ED B0                  LDIR      ; append outer_args
0DBF                CREATEFUNC2:      ; a = outer_length
0DBF   47                     LD   b,a   ; b = a = outer_length
0DC0   2A F0 4E               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DC3   23                     INC   hl   
0DC4   7E                     LD   a,(hl)   ; add outer_length to new length
0DC5   80                     ADD   a,b   
0DC6   77                     LD   (hl),a   
0DC7   2B                     DEC   hl   
0DC8   78                     LD   a,b   ; save outer_length in a'
0DC9   08                     EX   af,af'   
0DCA   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DCB   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DCC   B7                     OR   a   
0DCD   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DCF   4F                     LD   c,a   ; c = inner_num_locals
0DD0   06 00                  LD   b,0   ; bc = inner_num_locals
0DD2   23                     INC   hl   ; a = inner_length
0DD3   7E                     LD   a,(hl)   
0DD4   91                     SUB   c   ; a = inner_num_args
0DD5   23                     INC   hl   ; hl = inner_arg_chars
0DD6   85                     ADD   a,l   ; hl += a
0DD7   6F                     LD   l,a   
0DD8   3E 00                  LD   a,0   
0DDA   84                     ADD   a,h   
0DDB   67                     LD   h,a   
0DDC   ED B0                  LDIR      ; append inner_locals
0DDE                CREATEFUNC2A:      
0DDE   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DDF   12                     LD   (de),a   ; compile partial_array length field
0DE0   13                     INC   de   
0DE1   AF                     XOR   a   
0DE2   12                     LD   (de),a   
0DE3   13                     INC   de   
0DE4   D5                     PUSH   de   ; push partial_array*
0DE5   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DE6   FD 5E 02               LD   e,(iy+2)   
0DE9   FD 56 03               LD   d,(iy+3)   
0DEC   EB                     EX   de,hl   
0DED                CREATEFUNC3:      
0DED   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DEE   4E                     LD   c,(hl)   
0DEF   2B                     DEC   hl   
0DF0   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DF1   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DF2   13                     INC   de   
0DF3   79                     LD   a,c   
0DF4   12                     LD   (de),a   
0DF5   13                     INC   de   
0DF6   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DF8                CREATEFUNC4:      
0DF8   E1                     POP   hl   ; hl = partial_array*
0DF9                CREATEFUNC5:      
0DF9   C1                     POP   bc   ; bc = new_arg_list*
0DFA   D5                     PUSH   de   ; return new func*
0DFB   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DFC   73                     LD   (hl),e   ; compile partial_array* to func
0DFD   23                     INC   hl   
0DFE   72                     LD   (hl),d   
0DFF   23                     INC   hl   
0E00   ED 5B 06 4F            LD   de,(vTemp2)   ; de = block*
0E04   73                     LD   (hl),e   ; compile block* to func
0E05   23                     INC   hl   
0E06   72                     LD   (hl),d   
0E07   23                     INC   hl   
0E08   71                     LD   (hl),c   ; compile new_arg_list* to func
0E09   23                     INC   hl   
0E0A   70                     LD   (hl),b   
0E0B   23                     INC   hl   
0E0C   22 F0 4E               LD   (vHeapPtr),hl   ; bump heap ptr
0E0F   22 EC 4E               LD   (vBufPtr),hl   
0E12   ED 4B 04 4F            LD   bc,(vTemp1)   ; restore IP
0E16   2A 08 4F               LD   hl,(vTemp3)   ; jump to return address
0E19   E9                     JP   (hl)   
0E1A                             ; ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0E1A                             ; flushBuffer:
0E1A                             ;     push af
0E1A                             ;     push de
0E1A                             ;     push hl
0E1A                             ;     ld hl,(vBufPtr)
0E1A                             ;     ld de,BUF
0E1A                             ;     ld (vBufPtr),de
0E1A                             ;     or a
0E1A                             ;     sbc hl,de
0E1A                             ;     call printChars2
0E1A                             ;     pop hl
0E1A                             ;     pop de
0E1A                             ;     pop af
0E1A                             ;     ret
0E1A                             ; printChars1:
0E1A                             ;     ld a,(de)                           ; print char at char*
0E1A                             ;     call putchar
0E1A                             ;     inc de                              ; char*++
0E1A                             ;     dec hl                              ; count--
0E1A                             ; printChars2:
0E1A                             ;     ld a,l                              ; count == 0?
0E1A                             ;     or h
0E1A                             ;     ret z
0E1A                             ;     jr printChars1                      ; if not loop
0E1A                COMMANDTABLE:      
0E1A   03                     INC   bc   
0E1B   0A                     LD   a,(bc)   
0E1C   FE 7B                  CP   "z"+1   
0E1E   30 09                  JR   nc,commandTable2   
0E20   D6 61                  SUB   "a"   
0E22   38 05                  JR   c,commandTable2   
0E24                COMMANDTABLE1:      
0E24   E1                     POP   hl   
0E25   85                     ADD   a,l   
0E26   6F                     LD   l,a   
0E27   6E                     LD   l,(hl)   ; must have the same msb as the table
0E28   E9                     JP   (hl)   
0E29                COMMANDTABLE2:      
0E29   3E 1A                  LD   a,26   
0E2B   0B                     DEC   bc   
0E2C   18 F6                  JR   commandTable1   
0E2E                             ; followed by a table
0E2E                             ; db char
0E2E                             ; db lsb(addr)
0E2E                             ; the final item must have char == NUL
0E2E                JUMPTABLE:      
0E2E   E1                     POP   hl   
0E2F   03                     INC   bc   
0E30                JUMPTABLE0:      
0E30   AF                     XOR   a   
0E31   BE                     CP   (hl)   
0E32   28 0B                  JR   z,jumpTable2   
0E34   0A                     LD   a,(bc)   
0E35   BE                     CP   (hl)   
0E36   28 04                  JR   z,jumpTable1   
0E38   23                     INC   hl   
0E39   23                     INC   hl   
0E3A   18 F4                  JR   jumpTable0   
0E3C                JUMPTABLE1:      
0E3C   23                     INC   hl   
0E3D   6E                     LD   l,(hl)   ; must have the same msb as the table
0E3E   E9                     JP   (hl)   
0E3F                JUMPTABLE2:      
0E3F   0B                     DEC   bc   
0E40   23                     INC   hl   
0E41   E9                     JP   (hl)   
0E42                             ; followed by a table
0E42                             ; db char
0E42                             ; db lsb(addr)
0E42                             ; the final item must have char == NUL
0E42                XJUMPTABLE:      
0E42   E1                     POP   hl   
0E43   03                     INC   bc   
0E44                XJUMPTABLE0:      
0E44   AF                     XOR   a   
0E45   BE                     CP   (hl)   
0E46   28 0F                  JR   z,xjumpTable2   
0E48   0A                     LD   a,(bc)   
0E49   BE                     CP   (hl)   
0E4A   28 05                  JR   z,xjumpTable1   
0E4C   23                     INC   hl   
0E4D   23                     INC   hl   
0E4E   23                     INC   hl   
0E4F   18 F3                  JR   xjumpTable0   
0E51                XJUMPTABLE1:      
0E51   23                     INC   hl   
0E52   5E                     LD   e,(hl)   
0E53   23                     INC   hl   
0E54   56                     LD   d,(hl)   
0E55   EB                     EX   de,hl   
0E56   E9                     JP   (hl)   
0E57                XJUMPTABLE2:      
0E57   0B                     DEC   bc   
0E58   23                     INC   hl   
0E59   E9                     JP   (hl)   
0E5A                PRTSTR0:      
0E5A   CD 85 00               CALL   putchar   
0E5D   23                     INC   hl   
0E5E                PRTSTR:      
0E5E   7E                     LD   a,(hl)   
0E5F   B7                     OR   a   
0E60   20 F8                  JR   nz,prtstr0   
0E62   C9                     RET      
0E63                             ; **************************************************************************
0E63                             ; calculate nesting value
0E63                             ; a is char to be tested,
0E63                             ; e is the nesting value (initially 0)
0E63                             ; e is increased by ( and [
0E63                             ; e is decreased by ) and ]
0E63                             ; e has its bit 7 toggled by `
0E63                             ; limited to 127 levels
0E63                             ; **************************************************************************
0E63                NESTING:      
0E63   FE 22                  CP   DQ   ; quote char
0E65   28 06                  JR   z,nesting0   
0E67   FE 60                  CP   "`"   ; quote char
0E69   28 02                  JR   z,nesting0   
0E6B   18 0A                  JR   nesting1   
0E6D                NESTING0:      
0E6D   CB 7B                  BIT   7,e   
0E6F   28 03                  JR   z,nesting1a   
0E71   CB BB                  RES   7,e   
0E73   C9                     RET      
0E74                NESTING1A:      
0E74   CB FB                  SET   7,e   
0E76   C9                     RET      
0E77                NESTING1:      
0E77   CB 7B                  BIT   7,e   
0E79   C0                     RET   nz   
0E7A   FE 7B                  CP   "{"   
0E7C   28 08                  JR   z,nesting2   
0E7E   FE 5B                  CP   "["   
0E80   28 04                  JR   z,nesting2   
0E82   FE 28                  CP   "("   
0E84   20 02                  JR   nz,nesting3   
0E86                NESTING2:      
0E86   1C                     INC   e   
0E87   C9                     RET      
0E88                NESTING3:      
0E88   FE 7D                  CP   "}"   
0E8A   28 07                  JR   z,nesting4   
0E8C   FE 5D                  CP   "]"   
0E8E   28 03                  JR   z,nesting4   
0E90   FE 29                  CP   ")"   
0E92   C0                     RET   nz   
0E93                NESTING4:      
0E93   1D                     DEC   e   
0E94   C9                     RET      
0E95                PROMPT:      
0E95   CD A5 0E               CALL   printStr   
0E98   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E9D   C9                     RET      
0E9E                CRLF:        
0E9E   CD A5 0E               CALL   printStr   
0EA1   0D 0A 00               .CSTR   "\r\n"   
0EA4   C9                     RET      
0EA5                             ; prints a null teminated string
0EA5                             ; the string should be immediately following the call
0EA5                PRINTSTR:      
0EA5   E3                     EX   (sp),hl   ; swap			
0EA6   CD 5E 0E               CALL   prtstr   
0EA9   23                     INC   hl   ; inc past NUL
0EAA   E3                     EX   (sp),hl   ; put it back	
0EAB   C9                     RET      
0EAC                INIT:        
0EAC   21 F0 01               LD   hl,titleStr   
0EAF   11 0E 4F               LD   de,titleBuf   
0EB2   06 14                  LD   b,20   
0EB4                INIT1:       
0EB4   1A                     LD   a,(de)   
0EB5   BE                     CP   (hl)   
0EB6   20 17                  JR   nz,coldBoot0   
0EB8   13                     INC   de   
0EB9   23                     INC   hl   
0EBA   10 F8                  DJNZ   init1   
0EBC                WARMINIT:      
0EBC   ED 4B FC 4E            LD   bc,(vSavedIP)   ; restore IP
0EC0   ED 7B FE 4E            LD   sp,(vSavedSP)   ; restore SP
0EC4   DD 2A 00 4F            LD   ix,(vSavedNext)   ; restore Next
0EC8   FD 2A 02 4F            LD   iy,(vSavedBP)   ; restore BP
0ECC   C3 06 0F               JP   start1   
0ECF                COLDBOOT0:      
0ECF   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0ED2   11 0E 4F               LD   de,titleBuf   
0ED5   06 14                  LD   b,20   
0ED7   ED B0                  LDIR      
0ED9                COLDINIT:      
0ED9   21 DE 01               LD   hl,isysVars   
0EDC   11 E6 4E               LD   de,sysVars   
0EDF   01 12 00               LD   bc,9 * 2   
0EE2   ED B0                  LDIR      
0EE4   21 00 4E               LD   hl,vars   ; 52 vars LO HI
0EE7   06 34                  LD   b,26*2   
0EE9   AF                     XOR   a   
0EEA                COLDBOOT1:      
0EEA   77                     LD   (hl),a   
0EEB   23                     INC   hl   
0EEC   10 FC                  DJNZ   coldBoot1   
0EEE   DD 2A EE 4E            LD   ix,(vNext)   
0EF2   FD 21 00 4C            LD   iy,STACK   
0EF6   C9                     RET      
0EF7                COLDSTART:      
0EF7   31 00 4C               LD   sp,STACK   
0EFA   CD CF 0E               CALL   coldBoot0   
0EFD   C3 06 0F               JP   start1   
0F00                START:       
0F00   31 00 4C               LD   sp,STACK   ; start Monty
0F03   CD AC 0E               CALL   init   ; setups
0F06                START1:      
0F06   21 0E 4F               LD   hl,titleBuf   
0F09   CD 5E 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F0C                INTERPRET:      
0F0C   CD 95 0E               CALL   prompt   
0F0F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F12   21 00 4C               LD   hl,TIB   
0F15   22 EA 4E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F18                INTERPRET2:      ; calculate nesting
0F18   1E 00                  LD   e,0   ; initilize nesting value
0F1A   C5                     PUSH   bc   ; save offset into TIB,
0F1B                             ; bc is also the count of chars in TIB
0F1B   21 00 4C               LD   hl,TIB   ; hl is start of TIB
0F1E   18 0B                  JR   interpret4   
0F20                INTERPRET3:      
0F20   3E 33                  LD   a,"3"   
0F22   CD 85 00               CALL   putchar   
0F25   7E                     LD   a,(hl)   ; a = char in TIB
0F26   23                     INC   hl   ; inc pointer into TIB
0F27   0B                     DEC   bc   ; dec count of chars in TIB
0F28   CD 63 0E               CALL   nesting   ; update nesting value
0F2B                INTERPRET4:      
0F2B   79                     LD   a,c   ; is count zero?
0F2C   B0                     OR   b   
0F2D   20 F1                  JR   nz,interpret3   ; if not loop
0F2F   C1                     POP   bc   ; restore offset into TIB
0F30                INTERPRET5:      
0F30   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F33   FE 20                  CP   $20   ; compare to space
0F35   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F37   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F39                             ; ???? NEEDED?
0F39   28 36                  JR   z,interpret8   
0F3B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F3D   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F3F   FE 05                  CP   CTRL_E   
0F41   CA CF 0F               JP   z,edit_   
0F44   FE 08                  CP   CTRL_H   
0F46   CA BF 0F               JP   z,backSpace_   
0F49   FE 0A                  CP   CTRL_J   
0F4B   CA E7 0F               JP   z,reEdit_   
0F4E                             ; cp CTRL_S
0F4E                             ; jp z,printStack_
0F4E                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F4E                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F4E                             ; DB     lsb(list_)       ; FF  ^L 12
0F4E                             ; DB     lsb(printStack_) ; DLE ^P 16
0F4E                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F4E                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F4E                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F4E                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F4E                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F4E                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F4E                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F4E                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F4E                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F4E                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F4E                INTERPRET5A:      
0F4E                             ; ld (vTIBPtr),bc
0F4E                             ; ld bc,(vTIBPtr)
0F4E   18 C8                  JR   interpret2   
0F50                INTERPRET6:      
0F50   21 00 4C               LD   hl,TIB   
0F53   09                     ADD   hl,bc   
0F54   77                     LD   (hl),a   ; store the character in textbuf
0F55   03                     INC   bc   
0F56   CD 85 00               CALL   putchar   ; echo character to screen
0F59   CD 63 0E               CALL   nesting   
0F5C   18 D2                  JR   interpret5   ; wait for next character
0F5E                INTERPRET7:      
0F5E   21 00 4C               LD   hl,TIB   
0F61   09                     ADD   hl,bc   
0F62   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F64   23                     INC   hl   
0F65   36 0A                  LD   (hl),"\n"   
0F67   23                     INC   hl   
0F68   03                     INC   bc   
0F69   03                     INC   bc   
0F6A   CD 9E 0E               CALL   crlf   ; echo character to screen
0F6D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F6E   B7                     OR   a   
0F6F   20 BF                  JR   nz,interpret5   
0F71                INTERPRET8:      
0F71   21 00 4C               LD   hl,TIB   
0F74   09                     ADD   hl,bc   
0F75   22 EA 4E               LD   (vTIBPtr),hl   
0F78   01 00 4C               LD   bc,TIB   
0F7B   ED 43 FC 4E            LD   (vSavedIP),bc   ; save IP
0F7F   ED 73 FE 4E            LD   (vSavedSP),sp   ; save SP
0F83   DD 22 00 4F            LD   (vSavedNext),ix   ; save Next
0F87   FD 22 02 4F            LD   (vSavedBP),iy   ; save BP
0F8B   0B                     DEC   bc   
0F8C                NEXT:        
0F8C   03                     INC   bc   ; Increment the IP
0F8D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F8E   FE 20                  CP   " "   ; whitespace?
0F90   28 FA                  JR   z,next   ; space? ignore
0F92   38 08                  JR   c,next1   
0F94   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F96   6F                     LD   l,a   ; index into table
0F97   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F99   6E                     LD   l,(hl)   ; get low jump address
0F9A   24                     INC   h   ; Load h with page after opcodes
0F9B   E9                     JP   (hl)   ; Jump to routine
0F9C                NEXT1:       
0F9C   FE 00                  CP   NUL   ; end of input string?
0F9E   28 03                  JR   z,exit   
0FA0   C3 0C 0F               JP   interpret   ; no, other whitespace, macros?
0FA3                EXIT:        
0FA3   03                     INC   bc   
0FA4   60 69                  LD   hl,bc   
0FA6   E9                     JP   (hl)   
0FA7                RUN:         
0FA7   C1                     POP   bc   
0FA8   0B                     DEC   bc   
0FA9   DD E9                  JP   (ix)   
0FAB                ERROR:       
0FAB   E5                     PUSH   hl   
0FAC   CD A7 0F               CALL   run   
0FAF   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0FBC   C3 0C 0F               JP   interpret   
0FBF                BACKSPACE_:      
0FBF   79                     LD   a,c   
0FC0   B0                     OR   b   
0FC1   CA 18 0F               JP   z,interpret2   
0FC4   0B                     DEC   bc   
0FC5   CD A5 0E               CALL   printStr   
0FC8   08 20 08 00            .CSTR   "\b \b"   
0FCC   C3 18 0F               JP   interpret2   
0FCF                             ; edit
0FCF                EDIT_:       
0FCF   CD A7 0F               CALL   run   
0FD2   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FE4   C3 0C 0F               JP   interpret   
0FE7                REEDIT_:      
0FE7   C3 0C 0F               JP   interpret   
0FEA                PRINTSTACK_:      
0FEA   CD A7 0F               CALL   run   
0FED   2F 70 6B 00            .CSTR   "/pk"   
0FF1   C3 0C 0F               JP   interpret   
0FF4                             ; editDef:
0FF4                             ;     pop hl                      ; pop ret address
0FF4                             ;     ex (sp),hl                  ; swap with TOS
0FF4                             ;     push hl                     ; dup TOS
0FF4                             ;     ld a,l                      ; a = ident
0FF4                             ;     ld de,TIB                   ; de = start of TIB
0FF4                             ;     ld (vTIBPtr),de             ; update TIB*
0FF4                             ;     push ix                     ; save NEXT
0FF4                             ;     ld ix,editDef0              ; NEXT = editDef0
0FF4                             ;     jp lookupRef                ; convert letter into address
0FF4                             ; editDef0:
0FF4                             ;     ld e,(hl)                   ; de = (hl++)
0FF4                             ;     inc hl
0FF4                             ;     ld d,(hl)
0FF4                             ;     ld a,d                      ; de == 0 ?
0FF4                             ;     or e
0FF4                             ;     jr z,editDef4
0FF4                             ;     ld ix,editDef3              ; NEXT = editDef3
0FF4                             ;     ex de,hl
0FF4                             ;     ld a,(hl)
0FF4                             ;     cp "{"
0FF4                             ;     jr nz,editDef1
0FF4                             ;     jp editBlock0               ; convert letter into address
0FF4                             ; editDef1:
0FF4                             ;     cp "("
0FF4                             ;     jr nz,editDef2
0FF4                             ;     jp editBlock0               ; convert letter into address
0FF4                             ; editDef2:
0FF4                             ;     jp editFunc
0FF4                             ; editDef3:
0FF4                             ;     ld a," "                    ; write assign
0FF4                             ;     call writeChar
0FF4                             ;     pop hl                      ; a = ident
0FF4                             ;     ld a,l
0FF4                             ;     call writeChar
0FF4                             ;     ld a,"="                    ; write assign
0FF4                             ;     call writeChar
0FF4                             ;     ld ix,editDef4              ; NEXT = editDef4
0FF4                             ;     jp printTIB
0FF4                             ; editDef4:
0FF4                             ;     pop ix                      ; restore NEXT
0FF4                             ;     jp (ix)
0FF4                             ; writeChar:
0FF4                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FF4                             ;     ld (de),a                   ; write ident
0FF4                             ;     inc de
0FF4                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FF4                             ;     ret
0FF4                             ; ; printTIB
0FF4                             ; printTIB:
0FF4                             ;     ld hl,(vTIBPtr)
0FF4                             ;     ld de,TIB
0FF4                             ;     or a
0FF4                             ;     sbc hl,de
0FF4                             ;     jp printTIB2
0FF4                             ; printTIB1:
0FF4                             ;     ld a,(de)
0FF4                             ;     call putchar
0FF4                             ; printTIB2:
0FF4                             ;     ld a,l
0FF4                             ;     or h
0FF4                             ;     jr nz,printTIB1
0FF4                             ;     jp (ix)
0FF4                             ; editBlock:
0FF4                             ;     pop hl                      ; hl = block*
0FF4                             ; editBlock0:
0FF4                             ;     push ix                     ; save next
0FF4                             ;     push hl                     ; push block*
0FF4                             ;     push hl                     ; push block*
0FF4                             ;     ld ix,(editBlock2)
0FF4                             ;     jp blockLength
0FF4                             ; editBlock1:
0FF4                             ;     pop hl                      ; bc = length, (sp) = IP
0FF4                             ;     pop de                      ; de = block*
0FF4                             ;     ld a,l
0FF4                             ;     or h
0FF4                             ;     jr z,editBlock2
0FF4                             ;     push bc
0FF4                             ;     ld bc,hl
0FF4                             ;     ex de,hl                    ; hl = block*
0FF4                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FF4                             ;     ldir                        ; copy block to TIB
0FF4                             ;     ld (vTIBPtr),de              ; save TIB*
0FF4                             ;     pop bc
0FF4                             ; editBlock2:
0FF4                             ;     pop ix                      ; restore next
0FF4                             ;     jp (ix)
0FF4                             ; editFunc:
0FF4                             ;     jp (ix)
0FF4                             ; editArray:
0FF4                             ;     jp (ix)
0FF4                             ; editparseArgs:
0FF4                             ;     jp (ix)
0FF4                             ; ; blockLength
0FF4                             ; ; addr1 -- length
0FF4                             ; blockLength:
0FF4                             ;     pop hl                      ; block*
0FF4                             ;     push hl                     ; save block*
0FF4                             ;     inc hl                      ; skip first char
0FF4                             ;     ld d,1                      ; increase nesting
0FF4                             ; blockLength1:                   ; Skip to end of definition
0FF4                             ;     ld a,(hl)                   ; Get the next character
0FF4                             ;     inc hl                      ; Point to next character
0FF4                             ;     cp " " + 1                  ; ignore whitespace
0FF4                             ;     jr c,blockLength1
0FF4                             ;     cp ")"
0FF4                             ;     jr z,blockLength4
0FF4                             ;     cp "}"
0FF4                             ;     jr z,blockLength4
0FF4                             ;     cp "]"
0FF4                             ;     jr z,blockLength4
0FF4                             ;     cp "("
0FF4                             ;     jr z,blockLength2
0FF4                             ;     cp "{"
0FF4                             ;     jr z,blockLength2
0FF4                             ;     cp "["
0FF4                             ;     jr z,blockLength2
0FF4                             ;     cp "'"
0FF4                             ;     jr z,blockLength3
0FF4                             ;     cp "`"
0FF4                             ;     jr z,blockLength3
0FF4                             ;     cp DQ
0FF4                             ;     jr z,blockLength3
0FF4                             ;     jr blockLength1
0FF4                             ; blockLength2:
0FF4                             ;     inc d
0FF4                             ;     jr blockLength1
0FF4                             ; blockLength4:
0FF4                             ;     dec d
0FF4                             ;     jr nz, blockLength1         ; get the next element
0FF4                             ; blockLength3:
0FF4                             ;     ld a,$80
0FF4                             ;     xor d
0FF4                             ;     ld d,a
0FF4                             ;     jr nz, blockLength1
0FF4                             ;     pop hl                      ; hl = block*
0FF4                             ;     or a
0FF4                             ;     sbc hl,de
0FF4                             ;     push hl
0FF4                             ;     jp (ix)
0FF4                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FF4                             ; \a start of stack \#3 depth \b base \$ prompt
0FF4                             ; DW dStack               ; a vS0 start of datastack			
0FF4                             ; DW FALSE                ; b vBase16
0FF4                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FF4                             ; DW 0                    ; d
0FF4                             ; DW 65                   ; e vLastDef "A" last command u defined
0FF4                             ; DW 0                    ; f
0FF4                             ; DW page6                ; g 256 bytes limits
0FF4                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FF4                          ;*Macro unroll: FUNC f1, 2, "abc"
0FF4                F1:          
0FF4   CD 2F 0C               CALL   go   
0FF7   00 00                  DW   NUL   
0FF9   02 10                  DW   f1M_3071S12   
0FFB   FD 0F                  DW   $+2   
0FFD   02                     DB   2   
0FFE   03 61 62 63            .PSTR   "abc"   
1002                F1M_3071S12:      
1002   7B                     DB   "{"   
1003   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
103A   7D                     DB   "}"   
103B   00                     DB   0   
103C                          ;*Macro unroll: FUNC f2, 0, ""
103C                F2:          
103C   CD 2F 0C               CALL   go   
103F   00 00                  DW   NUL   
1041   47 10                  DW   f2M_3076S18   
1043   45 10                  DW   $+2   
1045   00                     DB   0   
1046   00                     .PSTR   ""   
1047                F2M_3076S18:      
1047   00                     DB   0   
1048                          ;*Macro unroll: FUNC f3, 0, ""
1048                F3:          
1048   CD 2F 0C               CALL   go   
104B   00 00                  DW   NUL   
104D   53 10                  DW   f3M_3078S21   
104F   51 10                  DW   $+2   
1051   00                     DB   0   
1052   00                     .PSTR   ""   
1053                F3M_3078S21:      
1053   00                     DB   0   
1054                          ;*Macro unroll: FUNC f4, 0, ""
1054                F4:          
1054   CD 2F 0C               CALL   go   
1057   00 00                  DW   NUL   
1059   5F 10                  DW   f4M_3080S24   
105B   5D 10                  DW   $+2   
105D   00                     DB   0   
105E   00                     .PSTR   ""   
105F                F4M_3080S24:      
105F   00                     DB   0   
1060                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "[1 2 3].a", 0
1100                          ;*Macro unroll:  test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100   31 00 4C               LD   SP,STACK   
1103   CD D9 0E               CALL   coldInit   
1106   CD 02 4A               CALL   execStr   
1109   2F 73 62 20 60 68 65 6C 6C 6F 3A 60 20 36 35 2E 63 20 31 2E 20 32 2E 20 33 2E 20 2F 73 65 20 2E 73 00 DB   "/sb `hello:` 65.c 1. 2. 3. /se .s",0   
112B   E1                     POP   HL   
112C   E5                     PUSH   HL   
112D   11 00 00               LD   DE,FALSE   
1130   B7                     OR   A   
1131   ED 52                  SBC   HL,DE   
1133   7D                     LD   A,L   
1134   B4                     OR   H   
1135   CA AB 11               JP   Z,expectM_3092S39   
1138   CD A5 0E               CALL   printStr   
113B   43 6F 64 65 3A 20 2F 73 62 20 60 68 65 6C 6C 6F 3A 60 20 36 35 2E 63 20 31 2E 20 32 2E 20 33 2E 20 2F 73 65 20 2E 73 00 .CSTR   "Code: ","/sb `hello:` 65.c 1. 2. 3. /se .s"   
1163   CD A5 0E               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 00 00               LD   hl,FALSE   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD A7 0F               CALL   run   
117D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1185   CD A5 0E               CALL   printStr   
1188   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1195   E1                     POP   hl   
1196   E5                     PUSH   hl   
1197   E5                     PUSH   hl   
1198   CD A7 0F               CALL   run   
119B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AA   76                     HALT      
11AB                EXPECTM_3092S39:      
11AB   E1                     POP   HL   
11AC                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
11AC   CD A5 0E               CALL   printStr   
11AF   44 6F 6E 65 21 00      .CSTR   "Done!"   
11B5   76                     HALT      
11B6                             ; 
11B6                          ;*Macro unroll:  test "/f", false
11B6   31 00 4C               LD   SP,STACK   
11B9   CD D9 0E               CALL   coldInit   
11BC   CD 02 4A               CALL   execStr   
11BF   2F 66 00               DB   "/f",0   
11C2   E1                     POP   HL   
11C3   E5                     PUSH   HL   
11C4   11 00 00               LD   DE,false   
11C7   B7                     OR   A   
11C8   ED 52                  SBC   HL,DE   
11CA   7D                     LD   A,L   
11CB   B4                     OR   H   
11CC   CA 23 12               JP   Z,expectM_3098S47   
11CF   CD A5 0E               CALL   printStr   
11D2   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11DB   CD A5 0E               CALL   printStr   
11DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11ED   21 00 00               LD   hl,false   
11F0   E5                     PUSH   hl   
11F1   E5                     PUSH   hl   
11F2   CD A7 0F               CALL   run   
11F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FD   CD A5 0E               CALL   printStr   
1200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120D   E1                     POP   hl   
120E   E5                     PUSH   hl   
120F   E5                     PUSH   hl   
1210   CD A7 0F               CALL   run   
1213   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1222   76                     HALT      
1223                EXPECTM_3098S47:      
1223   E1                     POP   HL   
1224                          ;*Macro unroll:  test "/t", true
1224   31 00 4C               LD   SP,STACK   
1227   CD D9 0E               CALL   coldInit   
122A   CD 02 4A               CALL   execStr   
122D   2F 74 00               DB   "/t",0   
1230   E1                     POP   HL   
1231   E5                     PUSH   HL   
1232   11 FF FF               LD   DE,true   
1235   B7                     OR   A   
1236   ED 52                  SBC   HL,DE   
1238   7D                     LD   A,L   
1239   B4                     OR   H   
123A   CA 91 12               JP   Z,expectM_3099S48   
123D   CD A5 0E               CALL   printStr   
1240   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1249   CD A5 0E               CALL   printStr   
124C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
125B   21 FF FF               LD   hl,true   
125E   E5                     PUSH   hl   
125F   E5                     PUSH   hl   
1260   CD A7 0F               CALL   run   
1263   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
126B   CD A5 0E               CALL   printStr   
126E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127B   E1                     POP   hl   
127C   E5                     PUSH   hl   
127D   E5                     PUSH   hl   
127E   CD A7 0F               CALL   run   
1281   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1290   76                     HALT      
1291                EXPECTM_3099S48:      
1291   E1                     POP   HL   
1292                          ;*Macro unroll:  test "1", 1
1292   31 00 4C               LD   SP,STACK   
1295   CD D9 0E               CALL   coldInit   
1298   CD 02 4A               CALL   execStr   
129B   31 00                  DB   "1",0   
129D   E1                     POP   HL   
129E   E5                     PUSH   HL   
129F   11 01 00               LD   DE,1   
12A2   B7                     OR   A   
12A3   ED 52                  SBC   HL,DE   
12A5   7D                     LD   A,L   
12A6   B4                     OR   H   
12A7   CA FD 12               JP   Z,expectM_3100S49   
12AA   CD A5 0E               CALL   printStr   
12AD   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12B5   CD A5 0E               CALL   printStr   
12B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C7   21 01 00               LD   hl,1   
12CA   E5                     PUSH   hl   
12CB   E5                     PUSH   hl   
12CC   CD A7 0F               CALL   run   
12CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12D7   CD A5 0E               CALL   printStr   
12DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12E7   E1                     POP   hl   
12E8   E5                     PUSH   hl   
12E9   E5                     PUSH   hl   
12EA   CD A7 0F               CALL   run   
12ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12FC   76                     HALT      
12FD                EXPECTM_3100S49:      
12FD   E1                     POP   HL   
12FE                          ;*Macro unroll:  test "2", 2
12FE   31 00 4C               LD   SP,STACK   
1301   CD D9 0E               CALL   coldInit   
1304   CD 02 4A               CALL   execStr   
1307   32 00                  DB   "2",0   
1309   E1                     POP   HL   
130A   E5                     PUSH   HL   
130B   11 02 00               LD   DE,2   
130E   B7                     OR   A   
130F   ED 52                  SBC   HL,DE   
1311   7D                     LD   A,L   
1312   B4                     OR   H   
1313   CA 69 13               JP   Z,expectM_3101S50   
1316   CD A5 0E               CALL   printStr   
1319   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1321   CD A5 0E               CALL   printStr   
1324   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1333   21 02 00               LD   hl,2   
1336   E5                     PUSH   hl   
1337   E5                     PUSH   hl   
1338   CD A7 0F               CALL   run   
133B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1343   CD A5 0E               CALL   printStr   
1346   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1353   E1                     POP   hl   
1354   E5                     PUSH   hl   
1355   E5                     PUSH   hl   
1356   CD A7 0F               CALL   run   
1359   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1368   76                     HALT      
1369                EXPECTM_3101S50:      
1369   E1                     POP   HL   
136A                          ;*Macro unroll:  test "1", 1
136A   31 00 4C               LD   SP,STACK   
136D   CD D9 0E               CALL   coldInit   
1370   CD 02 4A               CALL   execStr   
1373   31 00                  DB   "1",0   
1375   E1                     POP   HL   
1376   E5                     PUSH   HL   
1377   11 01 00               LD   DE,1   
137A   B7                     OR   A   
137B   ED 52                  SBC   HL,DE   
137D   7D                     LD   A,L   
137E   B4                     OR   H   
137F   CA D5 13               JP   Z,expectM_3102S51   
1382   CD A5 0E               CALL   printStr   
1385   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
138D   CD A5 0E               CALL   printStr   
1390   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
139F   21 01 00               LD   hl,1   
13A2   E5                     PUSH   hl   
13A3   E5                     PUSH   hl   
13A4   CD A7 0F               CALL   run   
13A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13AF   CD A5 0E               CALL   printStr   
13B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13BF   E1                     POP   hl   
13C0   E5                     PUSH   hl   
13C1   E5                     PUSH   hl   
13C2   CD A7 0F               CALL   run   
13C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13D4   76                     HALT      
13D5                EXPECTM_3102S51:      
13D5   E1                     POP   HL   
13D6                          ;*Macro unroll:  test "0", 0
13D6   31 00 4C               LD   SP,STACK   
13D9   CD D9 0E               CALL   coldInit   
13DC   CD 02 4A               CALL   execStr   
13DF   30 00                  DB   "0",0   
13E1   E1                     POP   HL   
13E2   E5                     PUSH   HL   
13E3   11 00 00               LD   DE,0   
13E6   B7                     OR   A   
13E7   ED 52                  SBC   HL,DE   
13E9   7D                     LD   A,L   
13EA   B4                     OR   H   
13EB   CA 41 14               JP   Z,expectM_3103S52   
13EE   CD A5 0E               CALL   printStr   
13F1   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13F9   CD A5 0E               CALL   printStr   
13FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
140B   21 00 00               LD   hl,0   
140E   E5                     PUSH   hl   
140F   E5                     PUSH   hl   
1410   CD A7 0F               CALL   run   
1413   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
141B   CD A5 0E               CALL   printStr   
141E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
142B   E1                     POP   hl   
142C   E5                     PUSH   hl   
142D   E5                     PUSH   hl   
142E   CD A7 0F               CALL   run   
1431   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1440   76                     HALT      
1441                EXPECTM_3103S52:      
1441   E1                     POP   HL   
1442                          ;*Macro unroll:  test "10", 10
1442   31 00 4C               LD   SP,STACK   
1445   CD D9 0E               CALL   coldInit   
1448   CD 02 4A               CALL   execStr   
144B   31 30 00               DB   "10",0   
144E   E1                     POP   HL   
144F   E5                     PUSH   HL   
1450   11 0A 00               LD   DE,10   
1453   B7                     OR   A   
1454   ED 52                  SBC   HL,DE   
1456   7D                     LD   A,L   
1457   B4                     OR   H   
1458   CA AF 14               JP   Z,expectM_3104S53   
145B   CD A5 0E               CALL   printStr   
145E   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1467   CD A5 0E               CALL   printStr   
146A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1479   21 0A 00               LD   hl,10   
147C   E5                     PUSH   hl   
147D   E5                     PUSH   hl   
147E   CD A7 0F               CALL   run   
1481   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1489   CD A5 0E               CALL   printStr   
148C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1499   E1                     POP   hl   
149A   E5                     PUSH   hl   
149B   E5                     PUSH   hl   
149C   CD A7 0F               CALL   run   
149F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14AE   76                     HALT      
14AF                EXPECTM_3104S53:      
14AF   E1                     POP   HL   
14B0                          ;*Macro unroll:  test "123", 123
14B0   31 00 4C               LD   SP,STACK   
14B3   CD D9 0E               CALL   coldInit   
14B6   CD 02 4A               CALL   execStr   
14B9   31 32 33 00            DB   "123",0   
14BD   E1                     POP   HL   
14BE   E5                     PUSH   HL   
14BF   11 7B 00               LD   DE,123   
14C2   B7                     OR   A   
14C3   ED 52                  SBC   HL,DE   
14C5   7D                     LD   A,L   
14C6   B4                     OR   H   
14C7   CA 1F 15               JP   Z,expectM_3105S54   
14CA   CD A5 0E               CALL   printStr   
14CD   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
14D7   CD A5 0E               CALL   printStr   
14DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E9   21 7B 00               LD   hl,123   
14EC   E5                     PUSH   hl   
14ED   E5                     PUSH   hl   
14EE   CD A7 0F               CALL   run   
14F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14F9   CD A5 0E               CALL   printStr   
14FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1509   E1                     POP   hl   
150A   E5                     PUSH   hl   
150B   E5                     PUSH   hl   
150C   CD A7 0F               CALL   run   
150F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
151E   76                     HALT      
151F                EXPECTM_3105S54:      
151F   E1                     POP   HL   
1520                          ;*Macro unroll:  test "-1",-1
1520   31 00 4C               LD   SP,STACK   
1523   CD D9 0E               CALL   coldInit   
1526   CD 02 4A               CALL   execStr   
1529   2D 31 00               DB   "-1",0   
152C   E1                     POP   HL   
152D   E5                     PUSH   HL   
152E   11 FF FF               LD   DE,-1   
1531   B7                     OR   A   
1532   ED 52                  SBC   HL,DE   
1534   7D                     LD   A,L   
1535   B4                     OR   H   
1536   CA 8D 15               JP   Z,expectM_3106S55   
1539   CD A5 0E               CALL   printStr   
153C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1545   CD A5 0E               CALL   printStr   
1548   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1557   21 FF FF               LD   hl,-1   
155A   E5                     PUSH   hl   
155B   E5                     PUSH   hl   
155C   CD A7 0F               CALL   run   
155F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1567   CD A5 0E               CALL   printStr   
156A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1577   E1                     POP   hl   
1578   E5                     PUSH   hl   
1579   E5                     PUSH   hl   
157A   CD A7 0F               CALL   run   
157D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
158C   76                     HALT      
158D                EXPECTM_3106S55:      
158D   E1                     POP   HL   
158E                          ;*Macro unroll:  test "~a", $61
158E   31 00 4C               LD   SP,STACK   
1591   CD D9 0E               CALL   coldInit   
1594   CD 02 4A               CALL   execStr   
1597   7E 61 00               DB   "~a",0   
159A   E1                     POP   HL   
159B   E5                     PUSH   HL   
159C   11 61 00               LD   DE,$61   
159F   B7                     OR   A   
15A0   ED 52                  SBC   HL,DE   
15A2   7D                     LD   A,L   
15A3   B4                     OR   H   
15A4   CA FB 15               JP   Z,expectM_3107S56   
15A7   CD A5 0E               CALL   printStr   
15AA   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
15B3   CD A5 0E               CALL   printStr   
15B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C5   21 61 00               LD   hl,$61   
15C8   E5                     PUSH   hl   
15C9   E5                     PUSH   hl   
15CA   CD A7 0F               CALL   run   
15CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D5   CD A5 0E               CALL   printStr   
15D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E5   E1                     POP   hl   
15E6   E5                     PUSH   hl   
15E7   E5                     PUSH   hl   
15E8   CD A7 0F               CALL   run   
15EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FA   76                     HALT      
15FB                EXPECTM_3107S56:      
15FB   E1                     POP   HL   
15FC                          ;*Macro unroll:  test "~~", $7e
15FC   31 00 4C               LD   SP,STACK   
15FF   CD D9 0E               CALL   coldInit   
1602   CD 02 4A               CALL   execStr   
1605   7E 7E 00               DB   "~~",0   
1608   E1                     POP   HL   
1609   E5                     PUSH   HL   
160A   11 7E 00               LD   DE,$7e   
160D   B7                     OR   A   
160E   ED 52                  SBC   HL,DE   
1610   7D                     LD   A,L   
1611   B4                     OR   H   
1612   CA 69 16               JP   Z,expectM_3108S57   
1615   CD A5 0E               CALL   printStr   
1618   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
1621   CD A5 0E               CALL   printStr   
1624   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1633   21 7E 00               LD   hl,$7e   
1636   E5                     PUSH   hl   
1637   E5                     PUSH   hl   
1638   CD A7 0F               CALL   run   
163B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1643   CD A5 0E               CALL   printStr   
1646   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1653   E1                     POP   hl   
1654   E5                     PUSH   hl   
1655   E5                     PUSH   hl   
1656   CD A7 0F               CALL   run   
1659   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1668   76                     HALT      
1669                EXPECTM_3108S57:      
1669   E1                     POP   HL   
166A                          ;*Macro unroll:  test "$10", $10
166A   31 00 4C               LD   SP,STACK   
166D   CD D9 0E               CALL   coldInit   
1670   CD 02 4A               CALL   execStr   
1673   24 31 30 00            DB   "$10",0   
1677   E1                     POP   HL   
1678   E5                     PUSH   HL   
1679   11 10 00               LD   DE,$10   
167C   B7                     OR   A   
167D   ED 52                  SBC   HL,DE   
167F   7D                     LD   A,L   
1680   B4                     OR   H   
1681   CA D9 16               JP   Z,expectM_3109S58   
1684   CD A5 0E               CALL   printStr   
1687   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1691   CD A5 0E               CALL   printStr   
1694   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A3   21 10 00               LD   hl,$10   
16A6   E5                     PUSH   hl   
16A7   E5                     PUSH   hl   
16A8   CD A7 0F               CALL   run   
16AB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16B3   CD A5 0E               CALL   printStr   
16B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C3   E1                     POP   hl   
16C4   E5                     PUSH   hl   
16C5   E5                     PUSH   hl   
16C6   CD A7 0F               CALL   run   
16C9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16D8   76                     HALT      
16D9                EXPECTM_3109S58:      
16D9   E1                     POP   HL   
16DA                          ;*Macro unroll:  test "$FF", $FF
16DA   31 00 4C               LD   SP,STACK   
16DD   CD D9 0E               CALL   coldInit   
16E0   CD 02 4A               CALL   execStr   
16E3   24 46 46 00            DB   "$FF",0   
16E7   E1                     POP   HL   
16E8   E5                     PUSH   HL   
16E9   11 FF 00               LD   DE,$FF   
16EC   B7                     OR   A   
16ED   ED 52                  SBC   HL,DE   
16EF   7D                     LD   A,L   
16F0   B4                     OR   H   
16F1   CA 49 17               JP   Z,expectM_3110S59   
16F4   CD A5 0E               CALL   printStr   
16F7   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1701   CD A5 0E               CALL   printStr   
1704   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1713   21 FF 00               LD   hl,$FF   
1716   E5                     PUSH   hl   
1717   E5                     PUSH   hl   
1718   CD A7 0F               CALL   run   
171B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1723   CD A5 0E               CALL   printStr   
1726   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1733   E1                     POP   hl   
1734   E5                     PUSH   hl   
1735   E5                     PUSH   hl   
1736   CD A7 0F               CALL   run   
1739   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1748   76                     HALT      
1749                EXPECTM_3110S59:      
1749   E1                     POP   HL   
174A                          ;*Macro unroll:  test "-1 2 +",1
174A   31 00 4C               LD   SP,STACK   
174D   CD D9 0E               CALL   coldInit   
1750   CD 02 4A               CALL   execStr   
1753   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
175A   E1                     POP   HL   
175B   E5                     PUSH   HL   
175C   11 01 00               LD   DE,1   
175F   B7                     OR   A   
1760   ED 52                  SBC   HL,DE   
1762   7D                     LD   A,L   
1763   B4                     OR   H   
1764   CA BF 17               JP   Z,expectM_3111S60   
1767   CD A5 0E               CALL   printStr   
176A   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1777   CD A5 0E               CALL   printStr   
177A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1789   21 01 00               LD   hl,1   
178C   E5                     PUSH   hl   
178D   E5                     PUSH   hl   
178E   CD A7 0F               CALL   run   
1791   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1799   CD A5 0E               CALL   printStr   
179C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17A9   E1                     POP   hl   
17AA   E5                     PUSH   hl   
17AB   E5                     PUSH   hl   
17AC   CD A7 0F               CALL   run   
17AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17BE   76                     HALT      
17BF                EXPECTM_3111S60:      
17BF   E1                     POP   HL   
17C0                          ;*Macro unroll:  test "-1 1 +",0
17C0   31 00 4C               LD   SP,STACK   
17C3   CD D9 0E               CALL   coldInit   
17C6   CD 02 4A               CALL   execStr   
17C9   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17D0   E1                     POP   HL   
17D1   E5                     PUSH   HL   
17D2   11 00 00               LD   DE,0   
17D5   B7                     OR   A   
17D6   ED 52                  SBC   HL,DE   
17D8   7D                     LD   A,L   
17D9   B4                     OR   H   
17DA   CA 35 18               JP   Z,expectM_3112S61   
17DD   CD A5 0E               CALL   printStr   
17E0   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17ED   CD A5 0E               CALL   printStr   
17F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17FF   21 00 00               LD   hl,0   
1802   E5                     PUSH   hl   
1803   E5                     PUSH   hl   
1804   CD A7 0F               CALL   run   
1807   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
180F   CD A5 0E               CALL   printStr   
1812   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
181F   E1                     POP   hl   
1820   E5                     PUSH   hl   
1821   E5                     PUSH   hl   
1822   CD A7 0F               CALL   run   
1825   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1834   76                     HALT      
1835                EXPECTM_3112S61:      
1835   E1                     POP   HL   
1836                          ;*Macro unroll:  test "1 2 +", 3
1836   31 00 4C               LD   SP,STACK   
1839   CD D9 0E               CALL   coldInit   
183C   CD 02 4A               CALL   execStr   
183F   31 20 32 20 2B 00      DB   "1 2 +",0   
1845   E1                     POP   HL   
1846   E5                     PUSH   HL   
1847   11 03 00               LD   DE,3   
184A   B7                     OR   A   
184B   ED 52                  SBC   HL,DE   
184D   7D                     LD   A,L   
184E   B4                     OR   H   
184F   CA A9 18               JP   Z,expectM_3113S62   
1852   CD A5 0E               CALL   printStr   
1855   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1861   CD A5 0E               CALL   printStr   
1864   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1873   21 03 00               LD   hl,3   
1876   E5                     PUSH   hl   
1877   E5                     PUSH   hl   
1878   CD A7 0F               CALL   run   
187B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1883   CD A5 0E               CALL   printStr   
1886   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1893   E1                     POP   hl   
1894   E5                     PUSH   hl   
1895   E5                     PUSH   hl   
1896   CD A7 0F               CALL   run   
1899   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18A8   76                     HALT      
18A9                EXPECTM_3113S62:      
18A9   E1                     POP   HL   
18AA                          ;*Macro unroll:  test "4 1 2 +", 3
18AA   31 00 4C               LD   SP,STACK   
18AD   CD D9 0E               CALL   coldInit   
18B0   CD 02 4A               CALL   execStr   
18B3   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18BB   E1                     POP   HL   
18BC   E5                     PUSH   HL   
18BD   11 03 00               LD   DE,3   
18C0   B7                     OR   A   
18C1   ED 52                  SBC   HL,DE   
18C3   7D                     LD   A,L   
18C4   B4                     OR   H   
18C5   CA 21 19               JP   Z,expectM_3114S63   
18C8   CD A5 0E               CALL   printStr   
18CB   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18D9   CD A5 0E               CALL   printStr   
18DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EB   21 03 00               LD   hl,3   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD A7 0F               CALL   run   
18F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18FB   CD A5 0E               CALL   printStr   
18FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190B   E1                     POP   hl   
190C   E5                     PUSH   hl   
190D   E5                     PUSH   hl   
190E   CD A7 0F               CALL   run   
1911   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1920   76                     HALT      
1921                EXPECTM_3114S63:      
1921   E1                     POP   HL   
1922                          ;*Macro unroll:  test "123 456 +", 123+456
1922   31 00 4C               LD   SP,STACK   
1925   CD D9 0E               CALL   coldInit   
1928   CD 02 4A               CALL   execStr   
192B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1935   E1                     POP   HL   
1936   E5                     PUSH   HL   
1937   11 43 02               LD   DE,123+456   
193A   B7                     OR   A   
193B   ED 52                  SBC   HL,DE   
193D   7D                     LD   A,L   
193E   B4                     OR   H   
193F   CA 9D 19               JP   Z,expectM_3115S64   
1942   CD A5 0E               CALL   printStr   
1945   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1955   CD A5 0E               CALL   printStr   
1958   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1967   21 43 02               LD   hl,123+456   
196A   E5                     PUSH   hl   
196B   E5                     PUSH   hl   
196C   CD A7 0F               CALL   run   
196F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1977   CD A5 0E               CALL   printStr   
197A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1987   E1                     POP   hl   
1988   E5                     PUSH   hl   
1989   E5                     PUSH   hl   
198A   CD A7 0F               CALL   run   
198D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
199C   76                     HALT      
199D                EXPECTM_3115S64:      
199D   E1                     POP   HL   
199E                          ;*Macro unroll:  test "64 128 +", 64+128
199E   31 00 4C               LD   SP,STACK   
19A1   CD D9 0E               CALL   coldInit   
19A4   CD 02 4A               CALL   execStr   
19A7   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19B0   E1                     POP   HL   
19B1   E5                     PUSH   HL   
19B2   11 C0 00               LD   DE,64+128   
19B5   B7                     OR   A   
19B6   ED 52                  SBC   HL,DE   
19B8   7D                     LD   A,L   
19B9   B4                     OR   H   
19BA   CA 17 1A               JP   Z,expectM_3116S65   
19BD   CD A5 0E               CALL   printStr   
19C0   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19CF   CD A5 0E               CALL   printStr   
19D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19E1   21 C0 00               LD   hl,64+128   
19E4   E5                     PUSH   hl   
19E5   E5                     PUSH   hl   
19E6   CD A7 0F               CALL   run   
19E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19F1   CD A5 0E               CALL   printStr   
19F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A01   E1                     POP   hl   
1A02   E5                     PUSH   hl   
1A03   E5                     PUSH   hl   
1A04   CD A7 0F               CALL   run   
1A07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A16   76                     HALT      
1A17                EXPECTM_3116S65:      
1A17   E1                     POP   HL   
1A18                          ;*Macro unroll:  test "1 2 +", 3
1A18   31 00 4C               LD   SP,STACK   
1A1B   CD D9 0E               CALL   coldInit   
1A1E   CD 02 4A               CALL   execStr   
1A21   31 20 32 20 2B 00      DB   "1 2 +",0   
1A27   E1                     POP   HL   
1A28   E5                     PUSH   HL   
1A29   11 03 00               LD   DE,3   
1A2C   B7                     OR   A   
1A2D   ED 52                  SBC   HL,DE   
1A2F   7D                     LD   A,L   
1A30   B4                     OR   H   
1A31   CA 8B 1A               JP   Z,expectM_3117S66   
1A34   CD A5 0E               CALL   printStr   
1A37   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A43   CD A5 0E               CALL   printStr   
1A46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A55   21 03 00               LD   hl,3   
1A58   E5                     PUSH   hl   
1A59   E5                     PUSH   hl   
1A5A   CD A7 0F               CALL   run   
1A5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A65   CD A5 0E               CALL   printStr   
1A68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A75   E1                     POP   hl   
1A76   E5                     PUSH   hl   
1A77   E5                     PUSH   hl   
1A78   CD A7 0F               CALL   run   
1A7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A8A   76                     HALT      
1A8B                EXPECTM_3117S66:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "1a= a++ a",2
1A8C   31 00 4C               LD   SP,STACK   
1A8F   CD D9 0E               CALL   coldInit   
1A92   CD 02 4A               CALL   execStr   
1A95   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A9F   E1                     POP   HL   
1AA0   E5                     PUSH   HL   
1AA1   11 02 00               LD   DE,2   
1AA4   B7                     OR   A   
1AA5   ED 52                  SBC   HL,DE   
1AA7   7D                     LD   A,L   
1AA8   B4                     OR   H   
1AA9   CA 07 1B               JP   Z,expectM_3118S67   
1AAC   CD A5 0E               CALL   printStr   
1AAF   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1ABF   CD A5 0E               CALL   printStr   
1AC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD1   21 02 00               LD   hl,2   
1AD4   E5                     PUSH   hl   
1AD5   E5                     PUSH   hl   
1AD6   CD A7 0F               CALL   run   
1AD9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AE1   CD A5 0E               CALL   printStr   
1AE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AF1   E1                     POP   hl   
1AF2   E5                     PUSH   hl   
1AF3   E5                     PUSH   hl   
1AF4   CD A7 0F               CALL   run   
1AF7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B06   76                     HALT      
1B07                EXPECTM_3118S67:      
1B07   E1                     POP   HL   
1B08                          ;*Macro unroll:  test "-1 -1 -",0
1B08   31 00 4C               LD   SP,STACK   
1B0B   CD D9 0E               CALL   coldInit   
1B0E   CD 02 4A               CALL   execStr   
1B11   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B19   E1                     POP   HL   
1B1A   E5                     PUSH   HL   
1B1B   11 00 00               LD   DE,0   
1B1E   B7                     OR   A   
1B1F   ED 52                  SBC   HL,DE   
1B21   7D                     LD   A,L   
1B22   B4                     OR   H   
1B23   CA 7F 1B               JP   Z,expectM_3119S68   
1B26   CD A5 0E               CALL   printStr   
1B29   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B37   CD A5 0E               CALL   printStr   
1B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B49   21 00 00               LD   hl,0   
1B4C   E5                     PUSH   hl   
1B4D   E5                     PUSH   hl   
1B4E   CD A7 0F               CALL   run   
1B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B59   CD A5 0E               CALL   printStr   
1B5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B69   E1                     POP   hl   
1B6A   E5                     PUSH   hl   
1B6B   E5                     PUSH   hl   
1B6C   CD A7 0F               CALL   run   
1B6F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B7E   76                     HALT      
1B7F                EXPECTM_3119S68:      
1B7F   E1                     POP   HL   
1B80                          ;*Macro unroll:  test "5 3 -", 2
1B80   31 00 4C               LD   SP,STACK   
1B83   CD D9 0E               CALL   coldInit   
1B86   CD 02 4A               CALL   execStr   
1B89   35 20 33 20 2D 00      DB   "5 3 -",0   
1B8F   E1                     POP   HL   
1B90   E5                     PUSH   HL   
1B91   11 02 00               LD   DE,2   
1B94   B7                     OR   A   
1B95   ED 52                  SBC   HL,DE   
1B97   7D                     LD   A,L   
1B98   B4                     OR   H   
1B99   CA F3 1B               JP   Z,expectM_3120S69   
1B9C   CD A5 0E               CALL   printStr   
1B9F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1BAB   CD A5 0E               CALL   printStr   
1BAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBD   21 02 00               LD   hl,2   
1BC0   E5                     PUSH   hl   
1BC1   E5                     PUSH   hl   
1BC2   CD A7 0F               CALL   run   
1BC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BCD   CD A5 0E               CALL   printStr   
1BD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BDD   E1                     POP   hl   
1BDE   E5                     PUSH   hl   
1BDF   E5                     PUSH   hl   
1BE0   CD A7 0F               CALL   run   
1BE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BF2   76                     HALT      
1BF3                EXPECTM_3120S69:      
1BF3   E1                     POP   HL   
1BF4                          ;*Macro unroll:  test "2 1 -",1
1BF4   31 00 4C               LD   SP,STACK   
1BF7   CD D9 0E               CALL   coldInit   
1BFA   CD 02 4A               CALL   execStr   
1BFD   32 20 31 20 2D 00      DB   "2 1 -",0   
1C03   E1                     POP   HL   
1C04   E5                     PUSH   HL   
1C05   11 01 00               LD   DE,1   
1C08   B7                     OR   A   
1C09   ED 52                  SBC   HL,DE   
1C0B   7D                     LD   A,L   
1C0C   B4                     OR   H   
1C0D   CA 67 1C               JP   Z,expectM_3121S70   
1C10   CD A5 0E               CALL   printStr   
1C13   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C1F   CD A5 0E               CALL   printStr   
1C22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C31   21 01 00               LD   hl,1   
1C34   E5                     PUSH   hl   
1C35   E5                     PUSH   hl   
1C36   CD A7 0F               CALL   run   
1C39   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C41   CD A5 0E               CALL   printStr   
1C44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C51   E1                     POP   hl   
1C52   E5                     PUSH   hl   
1C53   E5                     PUSH   hl   
1C54   CD A7 0F               CALL   run   
1C57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C66   76                     HALT      
1C67                EXPECTM_3121S70:      
1C67   E1                     POP   HL   
1C68                          ;*Macro unroll:  test "3a= a-- a",2
1C68   31 00 4C               LD   SP,STACK   
1C6B   CD D9 0E               CALL   coldInit   
1C6E   CD 02 4A               CALL   execStr   
1C71   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C7B   E1                     POP   HL   
1C7C   E5                     PUSH   HL   
1C7D   11 02 00               LD   DE,2   
1C80   B7                     OR   A   
1C81   ED 52                  SBC   HL,DE   
1C83   7D                     LD   A,L   
1C84   B4                     OR   H   
1C85   CA E3 1C               JP   Z,expectM_3122S71   
1C88   CD A5 0E               CALL   printStr   
1C8B   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C9B   CD A5 0E               CALL   printStr   
1C9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CAD   21 02 00               LD   hl,2   
1CB0   E5                     PUSH   hl   
1CB1   E5                     PUSH   hl   
1CB2   CD A7 0F               CALL   run   
1CB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CBD   CD A5 0E               CALL   printStr   
1CC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CCD   E1                     POP   hl   
1CCE   E5                     PUSH   hl   
1CCF   E5                     PUSH   hl   
1CD0   CD A7 0F               CALL   run   
1CD3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CE2   76                     HALT      
1CE3                EXPECTM_3122S71:      
1CE3   E1                     POP   HL   
1CE4                          ;*Macro unroll:  test "3 5 &", 1
1CE4   31 00 4C               LD   SP,STACK   
1CE7   CD D9 0E               CALL   coldInit   
1CEA   CD 02 4A               CALL   execStr   
1CED   33 20 35 20 26 00      DB   "3 5 &",0   
1CF3   E1                     POP   HL   
1CF4   E5                     PUSH   HL   
1CF5   11 01 00               LD   DE,1   
1CF8   B7                     OR   A   
1CF9   ED 52                  SBC   HL,DE   
1CFB   7D                     LD   A,L   
1CFC   B4                     OR   H   
1CFD   CA 57 1D               JP   Z,expectM_3123S72   
1D00   CD A5 0E               CALL   printStr   
1D03   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D0F   CD A5 0E               CALL   printStr   
1D12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D21   21 01 00               LD   hl,1   
1D24   E5                     PUSH   hl   
1D25   E5                     PUSH   hl   
1D26   CD A7 0F               CALL   run   
1D29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D31   CD A5 0E               CALL   printStr   
1D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D41   E1                     POP   hl   
1D42   E5                     PUSH   hl   
1D43   E5                     PUSH   hl   
1D44   CD A7 0F               CALL   run   
1D47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D56   76                     HALT      
1D57                EXPECTM_3123S72:      
1D57   E1                     POP   HL   
1D58                          ;*Macro unroll:  test "3 5 |", 7
1D58   31 00 4C               LD   SP,STACK   
1D5B   CD D9 0E               CALL   coldInit   
1D5E   CD 02 4A               CALL   execStr   
1D61   33 20 35 20 7C 00      DB   "3 5 |",0   
1D67   E1                     POP   HL   
1D68   E5                     PUSH   HL   
1D69   11 07 00               LD   DE,7   
1D6C   B7                     OR   A   
1D6D   ED 52                  SBC   HL,DE   
1D6F   7D                     LD   A,L   
1D70   B4                     OR   H   
1D71   CA CB 1D               JP   Z,expectM_3124S73   
1D74   CD A5 0E               CALL   printStr   
1D77   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D83   CD A5 0E               CALL   printStr   
1D86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D95   21 07 00               LD   hl,7   
1D98   E5                     PUSH   hl   
1D99   E5                     PUSH   hl   
1D9A   CD A7 0F               CALL   run   
1D9D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA5   CD A5 0E               CALL   printStr   
1DA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB5   E1                     POP   hl   
1DB6   E5                     PUSH   hl   
1DB7   E5                     PUSH   hl   
1DB8   CD A7 0F               CALL   run   
1DBB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DCA   76                     HALT      
1DCB                EXPECTM_3124S73:      
1DCB   E1                     POP   HL   
1DCC                          ;*Macro unroll:  test "3 5 /x", 6
1DCC   31 00 4C               LD   SP,STACK   
1DCF   CD D9 0E               CALL   coldInit   
1DD2   CD 02 4A               CALL   execStr   
1DD5   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DDC   E1                     POP   HL   
1DDD   E5                     PUSH   HL   
1DDE   11 06 00               LD   DE,6   
1DE1   B7                     OR   A   
1DE2   ED 52                  SBC   HL,DE   
1DE4   7D                     LD   A,L   
1DE5   B4                     OR   H   
1DE6   CA 41 1E               JP   Z,expectM_3125S74   
1DE9   CD A5 0E               CALL   printStr   
1DEC   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DF9   CD A5 0E               CALL   printStr   
1DFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E0B   21 06 00               LD   hl,6   
1E0E   E5                     PUSH   hl   
1E0F   E5                     PUSH   hl   
1E10   CD A7 0F               CALL   run   
1E13   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E1B   CD A5 0E               CALL   printStr   
1E1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E2B   E1                     POP   hl   
1E2C   E5                     PUSH   hl   
1E2D   E5                     PUSH   hl   
1E2E   CD A7 0F               CALL   run   
1E31   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E40   76                     HALT      
1E41                EXPECTM_3125S74:      
1E41   E1                     POP   HL   
1E42                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E42   31 00 4C               LD   SP,STACK   
1E45   CD D9 0E               CALL   coldInit   
1E48   CD 02 4A               CALL   execStr   
1E4B   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E5A   E1                     POP   HL   
1E5B   E5                     PUSH   HL   
1E5C   11 06 00               LD   DE,6   
1E5F   B7                     OR   A   
1E60   ED 52                  SBC   HL,DE   
1E62   7D                     LD   A,L   
1E63   B4                     OR   H   
1E64   CA C7 1E               JP   Z,expectM_3126S75   
1E67   CD A5 0E               CALL   printStr   
1E6A   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E7F   CD A5 0E               CALL   printStr   
1E82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E91   21 06 00               LD   hl,6   
1E94   E5                     PUSH   hl   
1E95   E5                     PUSH   hl   
1E96   CD A7 0F               CALL   run   
1E99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EA1   CD A5 0E               CALL   printStr   
1EA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB1   E1                     POP   hl   
1EB2   E5                     PUSH   hl   
1EB3   E5                     PUSH   hl   
1EB4   CD A7 0F               CALL   run   
1EB7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EC6   76                     HALT      
1EC7                EXPECTM_3126S75:      
1EC7   E1                     POP   HL   
1EC8                          ;*Macro unroll:  test "2 3 *", 6
1EC8   31 00 4C               LD   SP,STACK   
1ECB   CD D9 0E               CALL   coldInit   
1ECE   CD 02 4A               CALL   execStr   
1ED1   32 20 33 20 2A 00      DB   "2 3 *",0   
1ED7   E1                     POP   HL   
1ED8   E5                     PUSH   HL   
1ED9   11 06 00               LD   DE,6   
1EDC   B7                     OR   A   
1EDD   ED 52                  SBC   HL,DE   
1EDF   7D                     LD   A,L   
1EE0   B4                     OR   H   
1EE1   CA 3B 1F               JP   Z,expectM_3127S76   
1EE4   CD A5 0E               CALL   printStr   
1EE7   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1EF3   CD A5 0E               CALL   printStr   
1EF6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F05   21 06 00               LD   hl,6   
1F08   E5                     PUSH   hl   
1F09   E5                     PUSH   hl   
1F0A   CD A7 0F               CALL   run   
1F0D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F15   CD A5 0E               CALL   printStr   
1F18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F25   E1                     POP   hl   
1F26   E5                     PUSH   hl   
1F27   E5                     PUSH   hl   
1F28   CD A7 0F               CALL   run   
1F2B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F3A   76                     HALT      
1F3B                EXPECTM_3127S76:      
1F3B   E1                     POP   HL   
1F3C                          ;*Macro unroll:  test "1 2 3 + *", 5
1F3C   31 00 4C               LD   SP,STACK   
1F3F   CD D9 0E               CALL   coldInit   
1F42   CD 02 4A               CALL   execStr   
1F45   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F4F   E1                     POP   HL   
1F50   E5                     PUSH   HL   
1F51   11 05 00               LD   DE,5   
1F54   B7                     OR   A   
1F55   ED 52                  SBC   HL,DE   
1F57   7D                     LD   A,L   
1F58   B4                     OR   H   
1F59   CA B7 1F               JP   Z,expectM_3128S77   
1F5C   CD A5 0E               CALL   printStr   
1F5F   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F6F   CD A5 0E               CALL   printStr   
1F72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F81   21 05 00               LD   hl,5   
1F84   E5                     PUSH   hl   
1F85   E5                     PUSH   hl   
1F86   CD A7 0F               CALL   run   
1F89   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F91   CD A5 0E               CALL   printStr   
1F94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA1   E1                     POP   hl   
1FA2   E5                     PUSH   hl   
1FA3   E5                     PUSH   hl   
1FA4   CD A7 0F               CALL   run   
1FA7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FB6   76                     HALT      
1FB7                EXPECTM_3128S77:      
1FB7   E1                     POP   HL   
1FB8                          ;*Macro unroll:  test "7 3 /", 2
1FB8   31 00 4C               LD   SP,STACK   
1FBB   CD D9 0E               CALL   coldInit   
1FBE   CD 02 4A               CALL   execStr   
1FC1   37 20 33 20 2F 00      DB   "7 3 /",0   
1FC7   E1                     POP   HL   
1FC8   E5                     PUSH   HL   
1FC9   11 02 00               LD   DE,2   
1FCC   B7                     OR   A   
1FCD   ED 52                  SBC   HL,DE   
1FCF   7D                     LD   A,L   
1FD0   B4                     OR   H   
1FD1   CA 2B 20               JP   Z,expectM_3129S78   
1FD4   CD A5 0E               CALL   printStr   
1FD7   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FE3   CD A5 0E               CALL   printStr   
1FE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF5   21 02 00               LD   hl,2   
1FF8   E5                     PUSH   hl   
1FF9   E5                     PUSH   hl   
1FFA   CD A7 0F               CALL   run   
1FFD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2005   CD A5 0E               CALL   printStr   
2008   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2015   E1                     POP   hl   
2016   E5                     PUSH   hl   
2017   E5                     PUSH   hl   
2018   CD A7 0F               CALL   run   
201B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
202A   76                     HALT      
202B                EXPECTM_3129S78:      
202B   E1                     POP   HL   
202C                          ;*Macro unroll:  test "100a= 1a+= a", 101
202C   31 00 4C               LD   SP,STACK   
202F   CD D9 0E               CALL   coldInit   
2032   CD 02 4A               CALL   execStr   
2035   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2042   E1                     POP   HL   
2043   E5                     PUSH   HL   
2044   11 65 00               LD   DE,101   
2047   B7                     OR   A   
2048   ED 52                  SBC   HL,DE   
204A   7D                     LD   A,L   
204B   B4                     OR   H   
204C   CA AD 20               JP   Z,expectM_3130S79   
204F   CD A5 0E               CALL   printStr   
2052   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2065   CD A5 0E               CALL   printStr   
2068   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2077   21 65 00               LD   hl,101   
207A   E5                     PUSH   hl   
207B   E5                     PUSH   hl   
207C   CD A7 0F               CALL   run   
207F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2087   CD A5 0E               CALL   printStr   
208A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2097   E1                     POP   hl   
2098   E5                     PUSH   hl   
2099   E5                     PUSH   hl   
209A   CD A7 0F               CALL   run   
209D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20AC   76                     HALT      
20AD                EXPECTM_3130S79:      
20AD   E1                     POP   HL   
20AE                          ;*Macro unroll:  test "100a= a1-= a", 99
20AE   31 00 4C               LD   SP,STACK   
20B1   CD D9 0E               CALL   coldInit   
20B4   CD 02 4A               CALL   execStr   
20B7   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
20C4   E1                     POP   HL   
20C5   E5                     PUSH   HL   
20C6   11 63 00               LD   DE,99   
20C9   B7                     OR   A   
20CA   ED 52                  SBC   HL,DE   
20CC   7D                     LD   A,L   
20CD   B4                     OR   H   
20CE   CA 2F 21               JP   Z,expectM_3131S80   
20D1   CD A5 0E               CALL   printStr   
20D4   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20E7   CD A5 0E               CALL   printStr   
20EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20F9   21 63 00               LD   hl,99   
20FC   E5                     PUSH   hl   
20FD   E5                     PUSH   hl   
20FE   CD A7 0F               CALL   run   
2101   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2109   CD A5 0E               CALL   printStr   
210C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2119   E1                     POP   hl   
211A   E5                     PUSH   hl   
211B   E5                     PUSH   hl   
211C   CD A7 0F               CALL   run   
211F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
212E   76                     HALT      
212F                EXPECTM_3131S80:      
212F   E1                     POP   HL   
2130                          ;*Macro unroll:  test "100a= a2*= a", 200
2130   31 00 4C               LD   SP,STACK   
2133   CD D9 0E               CALL   coldInit   
2136   CD 02 4A               CALL   execStr   
2139   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2146   E1                     POP   HL   
2147   E5                     PUSH   HL   
2148   11 C8 00               LD   DE,200   
214B   B7                     OR   A   
214C   ED 52                  SBC   HL,DE   
214E   7D                     LD   A,L   
214F   B4                     OR   H   
2150   CA B1 21               JP   Z,expectM_3132S81   
2153   CD A5 0E               CALL   printStr   
2156   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2169   CD A5 0E               CALL   printStr   
216C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
217B   21 C8 00               LD   hl,200   
217E   E5                     PUSH   hl   
217F   E5                     PUSH   hl   
2180   CD A7 0F               CALL   run   
2183   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
218B   CD A5 0E               CALL   printStr   
218E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219B   E1                     POP   hl   
219C   E5                     PUSH   hl   
219D   E5                     PUSH   hl   
219E   CD A7 0F               CALL   run   
21A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21B0   76                     HALT      
21B1                EXPECTM_3132S81:      
21B1   E1                     POP   HL   
21B2                          ;*Macro unroll:  test "100a= a2/= a", 50
21B2   31 00 4C               LD   SP,STACK   
21B5   CD D9 0E               CALL   coldInit   
21B8   CD 02 4A               CALL   execStr   
21BB   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
21C8   E1                     POP   HL   
21C9   E5                     PUSH   HL   
21CA   11 32 00               LD   DE,50   
21CD   B7                     OR   A   
21CE   ED 52                  SBC   HL,DE   
21D0   7D                     LD   A,L   
21D1   B4                     OR   H   
21D2   CA 33 22               JP   Z,expectM_3133S82   
21D5   CD A5 0E               CALL   printStr   
21D8   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21EB   CD A5 0E               CALL   printStr   
21EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FD   21 32 00               LD   hl,50   
2200   E5                     PUSH   hl   
2201   E5                     PUSH   hl   
2202   CD A7 0F               CALL   run   
2205   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
220D   CD A5 0E               CALL   printStr   
2210   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221D   E1                     POP   hl   
221E   E5                     PUSH   hl   
221F   E5                     PUSH   hl   
2220   CD A7 0F               CALL   run   
2223   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2232   76                     HALT      
2233                EXPECTM_3133S82:      
2233   E1                     POP   HL   
2234                          ;*Macro unroll:  test "7 3 / /re", 1
2234   31 00 4C               LD   SP,STACK   
2237   CD D9 0E               CALL   coldInit   
223A   CD 02 4A               CALL   execStr   
223D   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2247   E1                     POP   HL   
2248   E5                     PUSH   HL   
2249   11 01 00               LD   DE,1   
224C   B7                     OR   A   
224D   ED 52                  SBC   HL,DE   
224F   7D                     LD   A,L   
2250   B4                     OR   H   
2251   CA AF 22               JP   Z,expectM_3134S83   
2254   CD A5 0E               CALL   printStr   
2257   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2267   CD A5 0E               CALL   printStr   
226A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2279   21 01 00               LD   hl,1   
227C   E5                     PUSH   hl   
227D   E5                     PUSH   hl   
227E   CD A7 0F               CALL   run   
2281   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2289   CD A5 0E               CALL   printStr   
228C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2299   E1                     POP   hl   
229A   E5                     PUSH   hl   
229B   E5                     PUSH   hl   
229C   CD A7 0F               CALL   run   
229F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22AE   76                     HALT      
22AF                EXPECTM_3134S83:      
22AF   E1                     POP   HL   
22B0                          ;*Macro unroll:  test "7 3 /", 2
22B0   31 00 4C               LD   SP,STACK   
22B3   CD D9 0E               CALL   coldInit   
22B6   CD 02 4A               CALL   execStr   
22B9   37 20 33 20 2F 00      DB   "7 3 /",0   
22BF   E1                     POP   HL   
22C0   E5                     PUSH   HL   
22C1   11 02 00               LD   DE,2   
22C4   B7                     OR   A   
22C5   ED 52                  SBC   HL,DE   
22C7   7D                     LD   A,L   
22C8   B4                     OR   H   
22C9   CA 23 23               JP   Z,expectM_3135S84   
22CC   CD A5 0E               CALL   printStr   
22CF   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22DB   CD A5 0E               CALL   printStr   
22DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22ED   21 02 00               LD   hl,2   
22F0   E5                     PUSH   hl   
22F1   E5                     PUSH   hl   
22F2   CD A7 0F               CALL   run   
22F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22FD   CD A5 0E               CALL   printStr   
2300   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
230D   E1                     POP   hl   
230E   E5                     PUSH   hl   
230F   E5                     PUSH   hl   
2310   CD A7 0F               CALL   run   
2313   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2322   76                     HALT      
2323                EXPECTM_3135S84:      
2323   E1                     POP   HL   
2324                          ;*Macro unroll:  test "2 3 ==", FALSE
2324   31 00 4C               LD   SP,STACK   
2327   CD D9 0E               CALL   coldInit   
232A   CD 02 4A               CALL   execStr   
232D   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2334   E1                     POP   HL   
2335   E5                     PUSH   HL   
2336   11 00 00               LD   DE,FALSE   
2339   B7                     OR   A   
233A   ED 52                  SBC   HL,DE   
233C   7D                     LD   A,L   
233D   B4                     OR   H   
233E   CA 99 23               JP   Z,expectM_3136S85   
2341   CD A5 0E               CALL   printStr   
2344   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2351   CD A5 0E               CALL   printStr   
2354   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2363   21 00 00               LD   hl,FALSE   
2366   E5                     PUSH   hl   
2367   E5                     PUSH   hl   
2368   CD A7 0F               CALL   run   
236B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2373   CD A5 0E               CALL   printStr   
2376   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2383   E1                     POP   hl   
2384   E5                     PUSH   hl   
2385   E5                     PUSH   hl   
2386   CD A7 0F               CALL   run   
2389   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2398   76                     HALT      
2399                EXPECTM_3136S85:      
2399   E1                     POP   HL   
239A                          ;*Macro unroll:  test "3 3 ==", TRUE
239A   31 00 4C               LD   SP,STACK   
239D   CD D9 0E               CALL   coldInit   
23A0   CD 02 4A               CALL   execStr   
23A3   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23AA   E1                     POP   HL   
23AB   E5                     PUSH   HL   
23AC   11 FF FF               LD   DE,TRUE   
23AF   B7                     OR   A   
23B0   ED 52                  SBC   HL,DE   
23B2   7D                     LD   A,L   
23B3   B4                     OR   H   
23B4   CA 0F 24               JP   Z,expectM_3137S86   
23B7   CD A5 0E               CALL   printStr   
23BA   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23C7   CD A5 0E               CALL   printStr   
23CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D9   21 FF FF               LD   hl,TRUE   
23DC   E5                     PUSH   hl   
23DD   E5                     PUSH   hl   
23DE   CD A7 0F               CALL   run   
23E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E9   CD A5 0E               CALL   printStr   
23EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F9   E1                     POP   hl   
23FA   E5                     PUSH   hl   
23FB   E5                     PUSH   hl   
23FC   CD A7 0F               CALL   run   
23FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
240E   76                     HALT      
240F                EXPECTM_3137S86:      
240F   E1                     POP   HL   
2410                          ;*Macro unroll:  test "1 2 <", TRUE
2410   31 00 4C               LD   SP,STACK   
2413   CD D9 0E               CALL   coldInit   
2416   CD 02 4A               CALL   execStr   
2419   31 20 32 20 3C 00      DB   "1 2 <",0   
241F   E1                     POP   HL   
2420   E5                     PUSH   HL   
2421   11 FF FF               LD   DE,TRUE   
2424   B7                     OR   A   
2425   ED 52                  SBC   HL,DE   
2427   7D                     LD   A,L   
2428   B4                     OR   H   
2429   CA 83 24               JP   Z,expectM_3138S87   
242C   CD A5 0E               CALL   printStr   
242F   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
243B   CD A5 0E               CALL   printStr   
243E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244D   21 FF FF               LD   hl,TRUE   
2450   E5                     PUSH   hl   
2451   E5                     PUSH   hl   
2452   CD A7 0F               CALL   run   
2455   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
245D   CD A5 0E               CALL   printStr   
2460   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246D   E1                     POP   hl   
246E   E5                     PUSH   hl   
246F   E5                     PUSH   hl   
2470   CD A7 0F               CALL   run   
2473   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2482   76                     HALT      
2483                EXPECTM_3138S87:      
2483   E1                     POP   HL   
2484                          ;*Macro unroll:  test "2 1 <", FALSE
2484   31 00 4C               LD   SP,STACK   
2487   CD D9 0E               CALL   coldInit   
248A   CD 02 4A               CALL   execStr   
248D   32 20 31 20 3C 00      DB   "2 1 <",0   
2493   E1                     POP   HL   
2494   E5                     PUSH   HL   
2495   11 00 00               LD   DE,FALSE   
2498   B7                     OR   A   
2499   ED 52                  SBC   HL,DE   
249B   7D                     LD   A,L   
249C   B4                     OR   H   
249D   CA F7 24               JP   Z,expectM_3139S88   
24A0   CD A5 0E               CALL   printStr   
24A3   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24AF   CD A5 0E               CALL   printStr   
24B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C1   21 00 00               LD   hl,FALSE   
24C4   E5                     PUSH   hl   
24C5   E5                     PUSH   hl   
24C6   CD A7 0F               CALL   run   
24C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24D1   CD A5 0E               CALL   printStr   
24D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E1   E1                     POP   hl   
24E2   E5                     PUSH   hl   
24E3   E5                     PUSH   hl   
24E4   CD A7 0F               CALL   run   
24E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F6   76                     HALT      
24F7                EXPECTM_3139S88:      
24F7   E1                     POP   HL   
24F8                          ;*Macro unroll:  test "2 3 <", TRUE
24F8   31 00 4C               LD   SP,STACK   
24FB   CD D9 0E               CALL   coldInit   
24FE   CD 02 4A               CALL   execStr   
2501   32 20 33 20 3C 00      DB   "2 3 <",0   
2507   E1                     POP   HL   
2508   E5                     PUSH   HL   
2509   11 FF FF               LD   DE,TRUE   
250C   B7                     OR   A   
250D   ED 52                  SBC   HL,DE   
250F   7D                     LD   A,L   
2510   B4                     OR   H   
2511   CA 6B 25               JP   Z,expectM_3140S89   
2514   CD A5 0E               CALL   printStr   
2517   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2523   CD A5 0E               CALL   printStr   
2526   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2535   21 FF FF               LD   hl,TRUE   
2538   E5                     PUSH   hl   
2539   E5                     PUSH   hl   
253A   CD A7 0F               CALL   run   
253D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2545   CD A5 0E               CALL   printStr   
2548   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2555   E1                     POP   hl   
2556   E5                     PUSH   hl   
2557   E5                     PUSH   hl   
2558   CD A7 0F               CALL   run   
255B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
256A   76                     HALT      
256B                EXPECTM_3140S89:      
256B   E1                     POP   HL   
256C                          ;*Macro unroll:  test "3 3 <", FALSE
256C   31 00 4C               LD   SP,STACK   
256F   CD D9 0E               CALL   coldInit   
2572   CD 02 4A               CALL   execStr   
2575   33 20 33 20 3C 00      DB   "3 3 <",0   
257B   E1                     POP   HL   
257C   E5                     PUSH   HL   
257D   11 00 00               LD   DE,FALSE   
2580   B7                     OR   A   
2581   ED 52                  SBC   HL,DE   
2583   7D                     LD   A,L   
2584   B4                     OR   H   
2585   CA DF 25               JP   Z,expectM_3141S90   
2588   CD A5 0E               CALL   printStr   
258B   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2597   CD A5 0E               CALL   printStr   
259A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25A9   21 00 00               LD   hl,FALSE   
25AC   E5                     PUSH   hl   
25AD   E5                     PUSH   hl   
25AE   CD A7 0F               CALL   run   
25B1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25B9   CD A5 0E               CALL   printStr   
25BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C9   E1                     POP   hl   
25CA   E5                     PUSH   hl   
25CB   E5                     PUSH   hl   
25CC   CD A7 0F               CALL   run   
25CF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25DE   76                     HALT      
25DF                EXPECTM_3141S90:      
25DF   E1                     POP   HL   
25E0                          ;*Macro unroll:  test "1 2 >", FALSE
25E0   31 00 4C               LD   SP,STACK   
25E3   CD D9 0E               CALL   coldInit   
25E6   CD 02 4A               CALL   execStr   
25E9   31 20 32 20 3E 00      DB   "1 2 >",0   
25EF   E1                     POP   HL   
25F0   E5                     PUSH   HL   
25F1   11 00 00               LD   DE,FALSE   
25F4   B7                     OR   A   
25F5   ED 52                  SBC   HL,DE   
25F7   7D                     LD   A,L   
25F8   B4                     OR   H   
25F9   CA 53 26               JP   Z,expectM_3142S91   
25FC   CD A5 0E               CALL   printStr   
25FF   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
260B   CD A5 0E               CALL   printStr   
260E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261D   21 00 00               LD   hl,FALSE   
2620   E5                     PUSH   hl   
2621   E5                     PUSH   hl   
2622   CD A7 0F               CALL   run   
2625   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
262D   CD A5 0E               CALL   printStr   
2630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
263D   E1                     POP   hl   
263E   E5                     PUSH   hl   
263F   E5                     PUSH   hl   
2640   CD A7 0F               CALL   run   
2643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2652   76                     HALT      
2653                EXPECTM_3142S91:      
2653   E1                     POP   HL   
2654                          ;*Macro unroll:  test "2 1 >", TRUE
2654   31 00 4C               LD   SP,STACK   
2657   CD D9 0E               CALL   coldInit   
265A   CD 02 4A               CALL   execStr   
265D   32 20 31 20 3E 00      DB   "2 1 >",0   
2663   E1                     POP   HL   
2664   E5                     PUSH   HL   
2665   11 FF FF               LD   DE,TRUE   
2668   B7                     OR   A   
2669   ED 52                  SBC   HL,DE   
266B   7D                     LD   A,L   
266C   B4                     OR   H   
266D   CA C7 26               JP   Z,expectM_3143S92   
2670   CD A5 0E               CALL   printStr   
2673   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
267F   CD A5 0E               CALL   printStr   
2682   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2691   21 FF FF               LD   hl,TRUE   
2694   E5                     PUSH   hl   
2695   E5                     PUSH   hl   
2696   CD A7 0F               CALL   run   
2699   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26A1   CD A5 0E               CALL   printStr   
26A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B1   E1                     POP   hl   
26B2   E5                     PUSH   hl   
26B3   E5                     PUSH   hl   
26B4   CD A7 0F               CALL   run   
26B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26C6   76                     HALT      
26C7                EXPECTM_3143S92:      
26C7   E1                     POP   HL   
26C8                          ;*Macro unroll:  test "3 3 >", FALSE
26C8   31 00 4C               LD   SP,STACK   
26CB   CD D9 0E               CALL   coldInit   
26CE   CD 02 4A               CALL   execStr   
26D1   33 20 33 20 3E 00      DB   "3 3 >",0   
26D7   E1                     POP   HL   
26D8   E5                     PUSH   HL   
26D9   11 00 00               LD   DE,FALSE   
26DC   B7                     OR   A   
26DD   ED 52                  SBC   HL,DE   
26DF   7D                     LD   A,L   
26E0   B4                     OR   H   
26E1   CA 3B 27               JP   Z,expectM_3144S93   
26E4   CD A5 0E               CALL   printStr   
26E7   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
26F3   CD A5 0E               CALL   printStr   
26F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2705   21 00 00               LD   hl,FALSE   
2708   E5                     PUSH   hl   
2709   E5                     PUSH   hl   
270A   CD A7 0F               CALL   run   
270D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2715   CD A5 0E               CALL   printStr   
2718   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2725   E1                     POP   hl   
2726   E5                     PUSH   hl   
2727   E5                     PUSH   hl   
2728   CD A7 0F               CALL   run   
272B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
273A   76                     HALT      
273B                EXPECTM_3144S93:      
273B   E1                     POP   HL   
273C                          ;*Macro unroll:  test "4 3 >", TRUE
273C   31 00 4C               LD   SP,STACK   
273F   CD D9 0E               CALL   coldInit   
2742   CD 02 4A               CALL   execStr   
2745   34 20 33 20 3E 00      DB   "4 3 >",0   
274B   E1                     POP   HL   
274C   E5                     PUSH   HL   
274D   11 FF FF               LD   DE,TRUE   
2750   B7                     OR   A   
2751   ED 52                  SBC   HL,DE   
2753   7D                     LD   A,L   
2754   B4                     OR   H   
2755   CA AF 27               JP   Z,expectM_3145S94   
2758   CD A5 0E               CALL   printStr   
275B   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2767   CD A5 0E               CALL   printStr   
276A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2779   21 FF FF               LD   hl,TRUE   
277C   E5                     PUSH   hl   
277D   E5                     PUSH   hl   
277E   CD A7 0F               CALL   run   
2781   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2789   CD A5 0E               CALL   printStr   
278C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2799   E1                     POP   hl   
279A   E5                     PUSH   hl   
279B   E5                     PUSH   hl   
279C   CD A7 0F               CALL   run   
279F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27AE   76                     HALT      
27AF                EXPECTM_3145S94:      
27AF   E1                     POP   HL   
27B0                          ;*Macro unroll:  test "2 2 <=", TRUE
27B0   31 00 4C               LD   SP,STACK   
27B3   CD D9 0E               CALL   coldInit   
27B6   CD 02 4A               CALL   execStr   
27B9   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
27C0   E1                     POP   HL   
27C1   E5                     PUSH   HL   
27C2   11 FF FF               LD   DE,TRUE   
27C5   B7                     OR   A   
27C6   ED 52                  SBC   HL,DE   
27C8   7D                     LD   A,L   
27C9   B4                     OR   H   
27CA   CA 25 28               JP   Z,expectM_3146S95   
27CD   CD A5 0E               CALL   printStr   
27D0   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
27DD   CD A5 0E               CALL   printStr   
27E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27EF   21 FF FF               LD   hl,TRUE   
27F2   E5                     PUSH   hl   
27F3   E5                     PUSH   hl   
27F4   CD A7 0F               CALL   run   
27F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27FF   CD A5 0E               CALL   printStr   
2802   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280F   E1                     POP   hl   
2810   E5                     PUSH   hl   
2811   E5                     PUSH   hl   
2812   CD A7 0F               CALL   run   
2815   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2824   76                     HALT      
2825                EXPECTM_3146S95:      
2825   E1                     POP   HL   
2826                          ;*Macro unroll:  test "2 2 >=", TRUE
2826   31 00 4C               LD   SP,STACK   
2829   CD D9 0E               CALL   coldInit   
282C   CD 02 4A               CALL   execStr   
282F   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2836   E1                     POP   HL   
2837   E5                     PUSH   HL   
2838   11 FF FF               LD   DE,TRUE   
283B   B7                     OR   A   
283C   ED 52                  SBC   HL,DE   
283E   7D                     LD   A,L   
283F   B4                     OR   H   
2840   CA 9B 28               JP   Z,expectM_3147S96   
2843   CD A5 0E               CALL   printStr   
2846   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2853   CD A5 0E               CALL   printStr   
2856   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2865   21 FF FF               LD   hl,TRUE   
2868   E5                     PUSH   hl   
2869   E5                     PUSH   hl   
286A   CD A7 0F               CALL   run   
286D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2875   CD A5 0E               CALL   printStr   
2878   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2885   E1                     POP   hl   
2886   E5                     PUSH   hl   
2887   E5                     PUSH   hl   
2888   CD A7 0F               CALL   run   
288B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
289A   76                     HALT      
289B                EXPECTM_3147S96:      
289B   E1                     POP   HL   
289C                          ;*Macro unroll:  test "3 1 <<", 6
289C   31 00 4C               LD   SP,STACK   
289F   CD D9 0E               CALL   coldInit   
28A2   CD 02 4A               CALL   execStr   
28A5   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
28AC   E1                     POP   HL   
28AD   E5                     PUSH   HL   
28AE   11 06 00               LD   DE,6   
28B1   B7                     OR   A   
28B2   ED 52                  SBC   HL,DE   
28B4   7D                     LD   A,L   
28B5   B4                     OR   H   
28B6   CA 11 29               JP   Z,expectM_3148S97   
28B9   CD A5 0E               CALL   printStr   
28BC   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
28C9   CD A5 0E               CALL   printStr   
28CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28DB   21 06 00               LD   hl,6   
28DE   E5                     PUSH   hl   
28DF   E5                     PUSH   hl   
28E0   CD A7 0F               CALL   run   
28E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28EB   CD A5 0E               CALL   printStr   
28EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FB   E1                     POP   hl   
28FC   E5                     PUSH   hl   
28FD   E5                     PUSH   hl   
28FE   CD A7 0F               CALL   run   
2901   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2910   76                     HALT      
2911                EXPECTM_3148S97:      
2911   E1                     POP   HL   
2912                          ;*Macro unroll:  test "10 1 >>", 5
2912   31 00 4C               LD   SP,STACK   
2915   CD D9 0E               CALL   coldInit   
2918   CD 02 4A               CALL   execStr   
291B   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2923   E1                     POP   HL   
2924   E5                     PUSH   HL   
2925   11 05 00               LD   DE,5   
2928   B7                     OR   A   
2929   ED 52                  SBC   HL,DE   
292B   7D                     LD   A,L   
292C   B4                     OR   H   
292D   CA 89 29               JP   Z,expectM_3149S98   
2930   CD A5 0E               CALL   printStr   
2933   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2941   CD A5 0E               CALL   printStr   
2944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2953   21 05 00               LD   hl,5   
2956   E5                     PUSH   hl   
2957   E5                     PUSH   hl   
2958   CD A7 0F               CALL   run   
295B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2963   CD A5 0E               CALL   printStr   
2966   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2973   E1                     POP   hl   
2974   E5                     PUSH   hl   
2975   E5                     PUSH   hl   
2976   CD A7 0F               CALL   run   
2979   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2988   76                     HALT      
2989                EXPECTM_3149S98:      
2989   E1                     POP   HL   
298A                          ;*Macro unroll:  test "1 x = x", 1
298A   31 00 4C               LD   SP,STACK   
298D   CD D9 0E               CALL   coldInit   
2990   CD 02 4A               CALL   execStr   
2993   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
299B   E1                     POP   HL   
299C   E5                     PUSH   HL   
299D   11 01 00               LD   DE,1   
29A0   B7                     OR   A   
29A1   ED 52                  SBC   HL,DE   
29A3   7D                     LD   A,L   
29A4   B4                     OR   H   
29A5   CA 01 2A               JP   Z,expectM_3150S99   
29A8   CD A5 0E               CALL   printStr   
29AB   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
29B9   CD A5 0E               CALL   printStr   
29BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29CB   21 01 00               LD   hl,1   
29CE   E5                     PUSH   hl   
29CF   E5                     PUSH   hl   
29D0   CD A7 0F               CALL   run   
29D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29DB   CD A5 0E               CALL   printStr   
29DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29EB   E1                     POP   hl   
29EC   E5                     PUSH   hl   
29ED   E5                     PUSH   hl   
29EE   CD A7 0F               CALL   run   
29F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A00   76                     HALT      
2A01                EXPECTM_3150S99:      
2A01   E1                     POP   HL   
2A02                          ;*Macro unroll:  test "1{}^", 1
2A02   31 00 4C               LD   SP,STACK   
2A05   CD D9 0E               CALL   coldInit   
2A08   CD 02 4A               CALL   execStr   
2A0B   31 7B 7D 5E 00         DB   "1{}^",0   
2A10   E1                     POP   HL   
2A11   E5                     PUSH   HL   
2A12   11 01 00               LD   DE,1   
2A15   B7                     OR   A   
2A16   ED 52                  SBC   HL,DE   
2A18   7D                     LD   A,L   
2A19   B4                     OR   H   
2A1A   CA 73 2A               JP   Z,expectM_3151S100   
2A1D   CD A5 0E               CALL   printStr   
2A20   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2A2B   CD A5 0E               CALL   printStr   
2A2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3D   21 01 00               LD   hl,1   
2A40   E5                     PUSH   hl   
2A41   E5                     PUSH   hl   
2A42   CD A7 0F               CALL   run   
2A45   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A4D   CD A5 0E               CALL   printStr   
2A50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5D   E1                     POP   hl   
2A5E   E5                     PUSH   hl   
2A5F   E5                     PUSH   hl   
2A60   CD A7 0F               CALL   run   
2A63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A72   76                     HALT      
2A73                EXPECTM_3151S100:      
2A73   E1                     POP   HL   
2A74                          ;*Macro unroll:  test "{1}^", 1
2A74   31 00 4C               LD   SP,STACK   
2A77   CD D9 0E               CALL   coldInit   
2A7A   CD 02 4A               CALL   execStr   
2A7D   7B 31 7D 5E 00         DB   "{1}^",0   
2A82   E1                     POP   HL   
2A83   E5                     PUSH   HL   
2A84   11 01 00               LD   DE,1   
2A87   B7                     OR   A   
2A88   ED 52                  SBC   HL,DE   
2A8A   7D                     LD   A,L   
2A8B   B4                     OR   H   
2A8C   CA E5 2A               JP   Z,expectM_3152S101   
2A8F   CD A5 0E               CALL   printStr   
2A92   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2A9D   CD A5 0E               CALL   printStr   
2AA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AAF   21 01 00               LD   hl,1   
2AB2   E5                     PUSH   hl   
2AB3   E5                     PUSH   hl   
2AB4   CD A7 0F               CALL   run   
2AB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ABF   CD A5 0E               CALL   printStr   
2AC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ACF   E1                     POP   hl   
2AD0   E5                     PUSH   hl   
2AD1   E5                     PUSH   hl   
2AD2   CD A7 0F               CALL   run   
2AD5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AE4   76                     HALT      
2AE5                EXPECTM_3152S101:      
2AE5   E1                     POP   HL   
2AE6                          ;*Macro unroll:  test "{{1}^}^", 1
2AE6   31 00 4C               LD   SP,STACK   
2AE9   CD D9 0E               CALL   coldInit   
2AEC   CD 02 4A               CALL   execStr   
2AEF   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2AF7   E1                     POP   HL   
2AF8   E5                     PUSH   HL   
2AF9   11 01 00               LD   DE,1   
2AFC   B7                     OR   A   
2AFD   ED 52                  SBC   HL,DE   
2AFF   7D                     LD   A,L   
2B00   B4                     OR   H   
2B01   CA 5D 2B               JP   Z,expectM_3153S102   
2B04   CD A5 0E               CALL   printStr   
2B07   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2B15   CD A5 0E               CALL   printStr   
2B18   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B27   21 01 00               LD   hl,1   
2B2A   E5                     PUSH   hl   
2B2B   E5                     PUSH   hl   
2B2C   CD A7 0F               CALL   run   
2B2F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B37   CD A5 0E               CALL   printStr   
2B3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B47   E1                     POP   hl   
2B48   E5                     PUSH   hl   
2B49   E5                     PUSH   hl   
2B4A   CD A7 0F               CALL   run   
2B4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B5C   76                     HALT      
2B5D                EXPECTM_3153S102:      
2B5D   E1                     POP   HL   
2B5E                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2B5E   31 00 4C               LD   SP,STACK   
2B61   CD D9 0E               CALL   coldInit   
2B64   CD 02 4A               CALL   execStr   
2B67   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2B72   E1                     POP   HL   
2B73   E5                     PUSH   HL   
2B74   11 01 00               LD   DE,1   
2B77   B7                     OR   A   
2B78   ED 52                  SBC   HL,DE   
2B7A   7D                     LD   A,L   
2B7B   B4                     OR   H   
2B7C   CA DB 2B               JP   Z,expectM_3154S103   
2B7F   CD A5 0E               CALL   printStr   
2B82   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2B93   CD A5 0E               CALL   printStr   
2B96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA5   21 01 00               LD   hl,1   
2BA8   E5                     PUSH   hl   
2BA9   E5                     PUSH   hl   
2BAA   CD A7 0F               CALL   run   
2BAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BB5   CD A5 0E               CALL   printStr   
2BB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC5   E1                     POP   hl   
2BC6   E5                     PUSH   hl   
2BC7   E5                     PUSH   hl   
2BC8   CD A7 0F               CALL   run   
2BCB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BDA   76                     HALT      
2BDB                EXPECTM_3154S103:      
2BDB   E1                     POP   HL   
2BDC                          ;*Macro unroll:  test "5 /f{10} ?", 5
2BDC   31 00 4C               LD   SP,STACK   
2BDF   CD D9 0E               CALL   coldInit   
2BE2   CD 02 4A               CALL   execStr   
2BE5   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2BF0   E1                     POP   HL   
2BF1   E5                     PUSH   HL   
2BF2   11 05 00               LD   DE,5   
2BF5   B7                     OR   A   
2BF6   ED 52                  SBC   HL,DE   
2BF8   7D                     LD   A,L   
2BF9   B4                     OR   H   
2BFA   CA 59 2C               JP   Z,expectM_3155S104   
2BFD   CD A5 0E               CALL   printStr   
2C00   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2C11   CD A5 0E               CALL   printStr   
2C14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C23   21 05 00               LD   hl,5   
2C26   E5                     PUSH   hl   
2C27   E5                     PUSH   hl   
2C28   CD A7 0F               CALL   run   
2C2B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C33   CD A5 0E               CALL   printStr   
2C36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C43   E1                     POP   hl   
2C44   E5                     PUSH   hl   
2C45   E5                     PUSH   hl   
2C46   CD A7 0F               CALL   run   
2C49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C58   76                     HALT      
2C59                EXPECTM_3155S104:      
2C59   E1                     POP   HL   
2C5A                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2C5A   31 00 4C               LD   SP,STACK   
2C5D   CD D9 0E               CALL   coldInit   
2C60   CD 02 4A               CALL   execStr   
2C63   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2C70   E1                     POP   HL   
2C71   E5                     PUSH   HL   
2C72   11 0F 00               LD   DE,15   
2C75   B7                     OR   A   
2C76   ED 52                  SBC   HL,DE   
2C78   7D                     LD   A,L   
2C79   B4                     OR   H   
2C7A   CA DB 2C               JP   Z,expectM_3156S105   
2C7D   CD A5 0E               CALL   printStr   
2C80   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2C93   CD A5 0E               CALL   printStr   
2C96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA5   21 0F 00               LD   hl,15   
2CA8   E5                     PUSH   hl   
2CA9   E5                     PUSH   hl   
2CAA   CD A7 0F               CALL   run   
2CAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CB5   CD A5 0E               CALL   printStr   
2CB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC5   E1                     POP   hl   
2CC6   E5                     PUSH   hl   
2CC7   E5                     PUSH   hl   
2CC8   CD A7 0F               CALL   run   
2CCB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CDA   76                     HALT      
2CDB                EXPECTM_3156S105:      
2CDB   E1                     POP   HL   
2CDC                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2CDC   31 00 4C               LD   SP,STACK   
2CDF   CD D9 0E               CALL   coldInit   
2CE2   CD 02 4A               CALL   execStr   
2CE5   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2CF7   E1                     POP   HL   
2CF8   E5                     PUSH   HL   
2CF9   11 15 00               LD   DE,21   
2CFC   B7                     OR   A   
2CFD   ED 52                  SBC   HL,DE   
2CFF   7D                     LD   A,L   
2D00   B4                     OR   H   
2D01   CA 67 2D               JP   Z,expectM_3157S106   
2D04   CD A5 0E               CALL   printStr   
2D07   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2D1F   CD A5 0E               CALL   printStr   
2D22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D31   21 15 00               LD   hl,21   
2D34   E5                     PUSH   hl   
2D35   E5                     PUSH   hl   
2D36   CD A7 0F               CALL   run   
2D39   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D41   CD A5 0E               CALL   printStr   
2D44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D51   E1                     POP   hl   
2D52   E5                     PUSH   hl   
2D53   E5                     PUSH   hl   
2D54   CD A7 0F               CALL   run   
2D57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D66   76                     HALT      
2D67                EXPECTM_3157S106:      
2D67   E1                     POP   HL   
2D68                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2D68   31 00 4C               LD   SP,STACK   
2D6B   CD D9 0E               CALL   coldInit   
2D6E   CD 02 4A               CALL   execStr   
2D71   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2D83   E1                     POP   HL   
2D84   E5                     PUSH   HL   
2D85   11 0B 00               LD   DE,11   
2D88   B7                     OR   A   
2D89   ED 52                  SBC   HL,DE   
2D8B   7D                     LD   A,L   
2D8C   B4                     OR   H   
2D8D   CA F3 2D               JP   Z,expectM_3158S107   
2D90   CD A5 0E               CALL   printStr   
2D93   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2DAB   CD A5 0E               CALL   printStr   
2DAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DBD   21 0B 00               LD   hl,11   
2DC0   E5                     PUSH   hl   
2DC1   E5                     PUSH   hl   
2DC2   CD A7 0F               CALL   run   
2DC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DCD   CD A5 0E               CALL   printStr   
2DD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DDD   E1                     POP   hl   
2DDE   E5                     PUSH   hl   
2DDF   E5                     PUSH   hl   
2DE0   CD A7 0F               CALL   run   
2DE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DF2   76                     HALT      
2DF3                EXPECTM_3158S107:      
2DF3   E1                     POP   HL   
2DF4                          ;*Macro unroll:  test "\\{2}^", 2
2DF4   31 00 4C               LD   SP,STACK   
2DF7   CD D9 0E               CALL   coldInit   
2DFA   CD 02 4A               CALL   execStr   
2DFD   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2E03   E1                     POP   HL   
2E04   E5                     PUSH   HL   
2E05   11 02 00               LD   DE,2   
2E08   B7                     OR   A   
2E09   ED 52                  SBC   HL,DE   
2E0B   7D                     LD   A,L   
2E0C   B4                     OR   H   
2E0D   CA 67 2E               JP   Z,expectM_3159S108   
2E10   CD A5 0E               CALL   printStr   
2E13   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2E1F   CD A5 0E               CALL   printStr   
2E22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E31   21 02 00               LD   hl,2   
2E34   E5                     PUSH   hl   
2E35   E5                     PUSH   hl   
2E36   CD A7 0F               CALL   run   
2E39   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E41   CD A5 0E               CALL   printStr   
2E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E51   E1                     POP   hl   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD A7 0F               CALL   run   
2E57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E66   76                     HALT      
2E67                EXPECTM_3159S108:      
2E67   E1                     POP   HL   
2E68                          ;*Macro unroll:  test "\\a{2}^", 2
2E68   31 00 4C               LD   SP,STACK   
2E6B   CD D9 0E               CALL   coldInit   
2E6E   CD 02 4A               CALL   execStr   
2E71   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2E78   E1                     POP   HL   
2E79   E5                     PUSH   HL   
2E7A   11 02 00               LD   DE,2   
2E7D   B7                     OR   A   
2E7E   ED 52                  SBC   HL,DE   
2E80   7D                     LD   A,L   
2E81   B4                     OR   H   
2E82   CA DD 2E               JP   Z,expectM_3160S109   
2E85   CD A5 0E               CALL   printStr   
2E88   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2E95   CD A5 0E               CALL   printStr   
2E98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EA7   21 02 00               LD   hl,2   
2EAA   E5                     PUSH   hl   
2EAB   E5                     PUSH   hl   
2EAC   CD A7 0F               CALL   run   
2EAF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EB7   CD A5 0E               CALL   printStr   
2EBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EC7   E1                     POP   hl   
2EC8   E5                     PUSH   hl   
2EC9   E5                     PUSH   hl   
2ECA   CD A7 0F               CALL   run   
2ECD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EDC   76                     HALT      
2EDD                EXPECTM_3160S109:      
2EDD   E1                     POP   HL   
2EDE                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2EDE   31 00 4C               LD   SP,STACK   
2EE1   CD D9 0E               CALL   coldInit   
2EE4   CD 02 4A               CALL   execStr   
2EE7   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2EF1   E1                     POP   HL   
2EF2   E5                     PUSH   HL   
2EF3   11 05 00               LD   DE,5   
2EF6   B7                     OR   A   
2EF7   ED 52                  SBC   HL,DE   
2EF9   7D                     LD   A,L   
2EFA   B4                     OR   H   
2EFB   CA 59 2F               JP   Z,expectM_3161S110   
2EFE   CD A5 0E               CALL   printStr   
2F01   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2F11   CD A5 0E               CALL   printStr   
2F14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F23   21 05 00               LD   hl,5   
2F26   E5                     PUSH   hl   
2F27   E5                     PUSH   hl   
2F28   CD A7 0F               CALL   run   
2F2B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F33   CD A5 0E               CALL   printStr   
2F36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F43   E1                     POP   hl   
2F44   E5                     PUSH   hl   
2F45   E5                     PUSH   hl   
2F46   CD A7 0F               CALL   run   
2F49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F58   76                     HALT      
2F59                EXPECTM_3161S110:      
2F59   E1                     POP   HL   
2F5A                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2F5A   31 00 4C               LD   SP,STACK   
2F5D   CD D9 0E               CALL   coldInit   
2F60   CD 02 4A               CALL   execStr   
2F63   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2F6F   E1                     POP   HL   
2F70   E5                     PUSH   HL   
2F71   11 05 00               LD   DE,5   
2F74   B7                     OR   A   
2F75   ED 52                  SBC   HL,DE   
2F77   7D                     LD   A,L   
2F78   B4                     OR   H   
2F79   CA D9 2F               JP   Z,expectM_3162S111   
2F7C   CD A5 0E               CALL   printStr   
2F7F   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2F91   CD A5 0E               CALL   printStr   
2F94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA3   21 05 00               LD   hl,5   
2FA6   E5                     PUSH   hl   
2FA7   E5                     PUSH   hl   
2FA8   CD A7 0F               CALL   run   
2FAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FB3   CD A5 0E               CALL   printStr   
2FB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC3   E1                     POP   hl   
2FC4   E5                     PUSH   hl   
2FC5   E5                     PUSH   hl   
2FC6   CD A7 0F               CALL   run   
2FC9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FD8   76                     HALT      
2FD9                EXPECTM_3162S111:      
2FD9   E1                     POP   HL   
2FDA                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2FDA   31 00 4C               LD   SP,STACK   
2FDD   CD D9 0E               CALL   coldInit   
2FE0   CD 02 4A               CALL   execStr   
2FE3   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2FED   E1                     POP   HL   
2FEE   E5                     PUSH   HL   
2FEF   11 02 00               LD   DE,2   
2FF2   B7                     OR   A   
2FF3   ED 52                  SBC   HL,DE   
2FF5   7D                     LD   A,L   
2FF6   B4                     OR   H   
2FF7   CA 55 30               JP   Z,expectM_3163S112   
2FFA   CD A5 0E               CALL   printStr   
2FFD   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
300D   CD A5 0E               CALL   printStr   
3010   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
301F   21 02 00               LD   hl,2   
3022   E5                     PUSH   hl   
3023   E5                     PUSH   hl   
3024   CD A7 0F               CALL   run   
3027   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
302F   CD A5 0E               CALL   printStr   
3032   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303F   E1                     POP   hl   
3040   E5                     PUSH   hl   
3041   E5                     PUSH   hl   
3042   CD A7 0F               CALL   run   
3045   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3054   76                     HALT      
3055                EXPECTM_3163S112:      
3055   E1                     POP   HL   
3056                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3056   31 00 4C               LD   SP,STACK   
3059   CD D9 0E               CALL   coldInit   
305C   CD 02 4A               CALL   execStr   
305F   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
306E   E1                     POP   HL   
306F   E5                     PUSH   HL   
3070   11 05 00               LD   DE,5   
3073   B7                     OR   A   
3074   ED 52                  SBC   HL,DE   
3076   7D                     LD   A,L   
3077   B4                     OR   H   
3078   CA DB 30               JP   Z,expectM_3164S113   
307B   CD A5 0E               CALL   printStr   
307E   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3093   CD A5 0E               CALL   printStr   
3096   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30A5   21 05 00               LD   hl,5   
30A8   E5                     PUSH   hl   
30A9   E5                     PUSH   hl   
30AA   CD A7 0F               CALL   run   
30AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30B5   CD A5 0E               CALL   printStr   
30B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C5   E1                     POP   hl   
30C6   E5                     PUSH   hl   
30C7   E5                     PUSH   hl   
30C8   CD A7 0F               CALL   run   
30CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30DA   76                     HALT      
30DB                EXPECTM_3164S113:      
30DB   E1                     POP   HL   
30DC                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
30DC   31 00 4C               LD   SP,STACK   
30DF   CD D9 0E               CALL   coldInit   
30E2   CD 02 4A               CALL   execStr   
30E5   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
30F5   E1                     POP   HL   
30F6   E5                     PUSH   HL   
30F7   11 01 00               LD   DE,1   
30FA   B7                     OR   A   
30FB   ED 52                  SBC   HL,DE   
30FD   7D                     LD   A,L   
30FE   B4                     OR   H   
30FF   CA 63 31               JP   Z,expectM_3165S114   
3102   CD A5 0E               CALL   printStr   
3105   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
311B   CD A5 0E               CALL   printStr   
311E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312D   21 01 00               LD   hl,1   
3130   E5                     PUSH   hl   
3131   E5                     PUSH   hl   
3132   CD A7 0F               CALL   run   
3135   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
313D   CD A5 0E               CALL   printStr   
3140   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314D   E1                     POP   hl   
314E   E5                     PUSH   hl   
314F   E5                     PUSH   hl   
3150   CD A7 0F               CALL   run   
3153   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3162   76                     HALT      
3163                EXPECTM_3165S114:      
3163   E1                     POP   HL   
3164                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3164   31 00 4C               LD   SP,STACK   
3167   CD D9 0E               CALL   coldInit   
316A   CD 02 4A               CALL   execStr   
316D   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3180   E1                     POP   HL   
3181   E5                     PUSH   HL   
3182   11 07 00               LD   DE,7   
3185   B7                     OR   A   
3186   ED 52                  SBC   HL,DE   
3188   7D                     LD   A,L   
3189   B4                     OR   H   
318A   CA F1 31               JP   Z,expectM_3166S115   
318D   CD A5 0E               CALL   printStr   
3190   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
31A9   CD A5 0E               CALL   printStr   
31AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31BB   21 07 00               LD   hl,7   
31BE   E5                     PUSH   hl   
31BF   E5                     PUSH   hl   
31C0   CD A7 0F               CALL   run   
31C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31CB   CD A5 0E               CALL   printStr   
31CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31DB   E1                     POP   hl   
31DC   E5                     PUSH   hl   
31DD   E5                     PUSH   hl   
31DE   CD A7 0F               CALL   run   
31E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31F0   76                     HALT      
31F1                EXPECTM_3166S115:      
31F1   E1                     POP   HL   
31F2                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
31F2   31 00 4C               LD   SP,STACK   
31F5   CD D9 0E               CALL   coldInit   
31F8   CD 02 4A               CALL   execStr   
31FB   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3210   E1                     POP   HL   
3211   E5                     PUSH   HL   
3212   11 06 00               LD   DE,6   
3215   B7                     OR   A   
3216   ED 52                  SBC   HL,DE   
3218   7D                     LD   A,L   
3219   B4                     OR   H   
321A   CA 83 32               JP   Z,expectM_3167S116   
321D   CD A5 0E               CALL   printStr   
3220   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
323B   CD A5 0E               CALL   printStr   
323E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
324D   21 06 00               LD   hl,6   
3250   E5                     PUSH   hl   
3251   E5                     PUSH   hl   
3252   CD A7 0F               CALL   run   
3255   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
325D   CD A5 0E               CALL   printStr   
3260   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
326D   E1                     POP   hl   
326E   E5                     PUSH   hl   
326F   E5                     PUSH   hl   
3270   CD A7 0F               CALL   run   
3273   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3282   76                     HALT      
3283                EXPECTM_3167S116:      
3283   E1                     POP   HL   
3284                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3284   31 00 4C               LD   SP,STACK   
3287   CD D9 0E               CALL   coldInit   
328A   CD 02 4A               CALL   execStr   
328D   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
329B   E1                     POP   HL   
329C   E5                     PUSH   HL   
329D   11 02 00               LD   DE,2   
32A0   B7                     OR   A   
32A1   ED 52                  SBC   HL,DE   
32A3   7D                     LD   A,L   
32A4   B4                     OR   H   
32A5   CA 07 33               JP   Z,expectM_3168S117   
32A8   CD A5 0E               CALL   printStr   
32AB   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
32BF   CD A5 0E               CALL   printStr   
32C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D1   21 02 00               LD   hl,2   
32D4   E5                     PUSH   hl   
32D5   E5                     PUSH   hl   
32D6   CD A7 0F               CALL   run   
32D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32E1   CD A5 0E               CALL   printStr   
32E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32F1   E1                     POP   hl   
32F2   E5                     PUSH   hl   
32F3   E5                     PUSH   hl   
32F4   CD A7 0F               CALL   run   
32F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3306   76                     HALT      
3307                EXPECTM_3168S117:      
3307   E1                     POP   HL   
3308                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3308   31 00 4C               LD   SP,STACK   
330B   CD D9 0E               CALL   coldInit   
330E   CD 02 4A               CALL   execStr   
3311   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3322   E1                     POP   HL   
3323   E5                     PUSH   HL   
3324   11 01 00               LD   DE,1   
3327   B7                     OR   A   
3328   ED 52                  SBC   HL,DE   
332A   7D                     LD   A,L   
332B   B4                     OR   H   
332C   CA 91 33               JP   Z,expectM_3169S118   
332F   CD A5 0E               CALL   printStr   
3332   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3349   CD A5 0E               CALL   printStr   
334C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
335B   21 01 00               LD   hl,1   
335E   E5                     PUSH   hl   
335F   E5                     PUSH   hl   
3360   CD A7 0F               CALL   run   
3363   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
336B   CD A5 0E               CALL   printStr   
336E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
337B   E1                     POP   hl   
337C   E5                     PUSH   hl   
337D   E5                     PUSH   hl   
337E   CD A7 0F               CALL   run   
3381   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3390   76                     HALT      
3391                EXPECTM_3169S118:      
3391   E1                     POP   HL   
3392                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3392   31 00 4C               LD   SP,STACK   
3395   CD D9 0E               CALL   coldInit   
3398   CD 02 4A               CALL   execStr   
339B   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
33AD   E1                     POP   HL   
33AE   E5                     PUSH   HL   
33AF   11 02 00               LD   DE,2   
33B2   B7                     OR   A   
33B3   ED 52                  SBC   HL,DE   
33B5   7D                     LD   A,L   
33B6   B4                     OR   H   
33B7   CA 1D 34               JP   Z,expectM_3170S119   
33BA   CD A5 0E               CALL   printStr   
33BD   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
33D5   CD A5 0E               CALL   printStr   
33D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33E7   21 02 00               LD   hl,2   
33EA   E5                     PUSH   hl   
33EB   E5                     PUSH   hl   
33EC   CD A7 0F               CALL   run   
33EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33F7   CD A5 0E               CALL   printStr   
33FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3407   E1                     POP   hl   
3408   E5                     PUSH   hl   
3409   E5                     PUSH   hl   
340A   CD A7 0F               CALL   run   
340D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
341C   76                     HALT      
341D                EXPECTM_3170S119:      
341D   E1                     POP   HL   
341E                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
341E   31 00 4C               LD   SP,STACK   
3421   CD D9 0E               CALL   coldInit   
3424   CD 02 4A               CALL   execStr   
3427   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
343A   E1                     POP   HL   
343B   E5                     PUSH   HL   
343C   11 02 00               LD   DE,2   
343F   B7                     OR   A   
3440   ED 52                  SBC   HL,DE   
3442   7D                     LD   A,L   
3443   B4                     OR   H   
3444   CA AB 34               JP   Z,expectM_3171S120   
3447   CD A5 0E               CALL   printStr   
344A   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3463   CD A5 0E               CALL   printStr   
3466   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3475   21 02 00               LD   hl,2   
3478   E5                     PUSH   hl   
3479   E5                     PUSH   hl   
347A   CD A7 0F               CALL   run   
347D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3485   CD A5 0E               CALL   printStr   
3488   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3495   E1                     POP   hl   
3496   E5                     PUSH   hl   
3497   E5                     PUSH   hl   
3498   CD A7 0F               CALL   run   
349B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34AA   76                     HALT      
34AB                EXPECTM_3171S120:      
34AB   E1                     POP   HL   
34AC                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
34AC   31 00 4C               LD   SP,STACK   
34AF   CD D9 0E               CALL   coldInit   
34B2   CD 02 4A               CALL   execStr   
34B5   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
34C7   E1                     POP   HL   
34C8   E5                     PUSH   HL   
34C9   11 02 00               LD   DE,2   
34CC   B7                     OR   A   
34CD   ED 52                  SBC   HL,DE   
34CF   7D                     LD   A,L   
34D0   B4                     OR   H   
34D1   CA 37 35               JP   Z,expectM_3172S121   
34D4   CD A5 0E               CALL   printStr   
34D7   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
34EF   CD A5 0E               CALL   printStr   
34F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3501   21 02 00               LD   hl,2   
3504   E5                     PUSH   hl   
3505   E5                     PUSH   hl   
3506   CD A7 0F               CALL   run   
3509   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3511   CD A5 0E               CALL   printStr   
3514   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3521   E1                     POP   hl   
3522   E5                     PUSH   hl   
3523   E5                     PUSH   hl   
3524   CD A7 0F               CALL   run   
3527   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3536   76                     HALT      
3537                EXPECTM_3172S121:      
3537   E1                     POP   HL   
3538                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3538   31 00 4C               LD   SP,STACK   
353B   CD D9 0E               CALL   coldInit   
353E   CD 02 4A               CALL   execStr   
3541   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
355A   E1                     POP   HL   
355B   E5                     PUSH   HL   
355C   11 05 00               LD   DE,5   
355F   B7                     OR   A   
3560   ED 52                  SBC   HL,DE   
3562   7D                     LD   A,L   
3563   B4                     OR   H   
3564   CA D1 35               JP   Z,expectM_3173S122   
3567   CD A5 0E               CALL   printStr   
356A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3589   CD A5 0E               CALL   printStr   
358C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
359B   21 05 00               LD   hl,5   
359E   E5                     PUSH   hl   
359F   E5                     PUSH   hl   
35A0   CD A7 0F               CALL   run   
35A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35AB   CD A5 0E               CALL   printStr   
35AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BB   E1                     POP   hl   
35BC   E5                     PUSH   hl   
35BD   E5                     PUSH   hl   
35BE   CD A7 0F               CALL   run   
35C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35D0   76                     HALT      
35D1                EXPECTM_3173S122:      
35D1   E1                     POP   HL   
35D2                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
35D2   31 00 4C               LD   SP,STACK   
35D5   CD D9 0E               CALL   coldInit   
35D8   CD 02 4A               CALL   execStr   
35DB   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
35EB   E1                     POP   HL   
35EC   E5                     PUSH   HL   
35ED   11 02 00               LD   DE,2   
35F0   B7                     OR   A   
35F1   ED 52                  SBC   HL,DE   
35F3   7D                     LD   A,L   
35F4   B4                     OR   H   
35F5   CA 59 36               JP   Z,expectM_3174S123   
35F8   CD A5 0E               CALL   printStr   
35FB   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3611   CD A5 0E               CALL   printStr   
3614   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3623   21 02 00               LD   hl,2   
3626   E5                     PUSH   hl   
3627   E5                     PUSH   hl   
3628   CD A7 0F               CALL   run   
362B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3633   CD A5 0E               CALL   printStr   
3636   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3643   E1                     POP   hl   
3644   E5                     PUSH   hl   
3645   E5                     PUSH   hl   
3646   CD A7 0F               CALL   run   
3649   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3658   76                     HALT      
3659                EXPECTM_3174S123:      
3659   E1                     POP   HL   
365A                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
365A   31 00 4C               LD   SP,STACK   
365D   CD D9 0E               CALL   coldInit   
3660   CD 02 4A               CALL   execStr   
3663   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
367A   E1                     POP   HL   
367B   E5                     PUSH   HL   
367C   11 64 00               LD   DE,100   
367F   B7                     OR   A   
3680   ED 52                  SBC   HL,DE   
3682   7D                     LD   A,L   
3683   B4                     OR   H   
3684   CA EF 36               JP   Z,expectM_3175S124   
3687   CD A5 0E               CALL   printStr   
368A   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
36A7   CD A5 0E               CALL   printStr   
36AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36B9   21 64 00               LD   hl,100   
36BC   E5                     PUSH   hl   
36BD   E5                     PUSH   hl   
36BE   CD A7 0F               CALL   run   
36C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36C9   CD A5 0E               CALL   printStr   
36CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D9   E1                     POP   hl   
36DA   E5                     PUSH   hl   
36DB   E5                     PUSH   hl   
36DC   CD A7 0F               CALL   run   
36DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36EE   76                     HALT      
36EF                EXPECTM_3175S124:      
36EF   E1                     POP   HL   
36F0                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
36F0   31 00 4C               LD   SP,STACK   
36F3   CD D9 0E               CALL   coldInit   
36F6   CD 02 4A               CALL   execStr   
36F9   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3711   E1                     POP   HL   
3712   E5                     PUSH   HL   
3713   11 01 00               LD   DE,1   
3716   B7                     OR   A   
3717   ED 52                  SBC   HL,DE   
3719   7D                     LD   A,L   
371A   B4                     OR   H   
371B   CA 87 37               JP   Z,expectM_3176S125   
371E   CD A5 0E               CALL   printStr   
3721   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
373F   CD A5 0E               CALL   printStr   
3742   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3751   21 01 00               LD   hl,1   
3754   E5                     PUSH   hl   
3755   E5                     PUSH   hl   
3756   CD A7 0F               CALL   run   
3759   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3761   CD A5 0E               CALL   printStr   
3764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3771   E1                     POP   hl   
3772   E5                     PUSH   hl   
3773   E5                     PUSH   hl   
3774   CD A7 0F               CALL   run   
3777   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3786   76                     HALT      
3787                EXPECTM_3176S125:      
3787   E1                     POP   HL   
3788                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3788   31 00 4C               LD   SP,STACK   
378B   CD D9 0E               CALL   coldInit   
378E   CD 02 4A               CALL   execStr   
3791   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
37AA   E1                     POP   HL   
37AB   E5                     PUSH   HL   
37AC   11 02 00               LD   DE,2   
37AF   B7                     OR   A   
37B0   ED 52                  SBC   HL,DE   
37B2   7D                     LD   A,L   
37B3   B4                     OR   H   
37B4   CA 21 38               JP   Z,expectM_3177S126   
37B7   CD A5 0E               CALL   printStr   
37BA   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
37D9   CD A5 0E               CALL   printStr   
37DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37EB   21 02 00               LD   hl,2   
37EE   E5                     PUSH   hl   
37EF   E5                     PUSH   hl   
37F0   CD A7 0F               CALL   run   
37F3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37FB   CD A5 0E               CALL   printStr   
37FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
380B   E1                     POP   hl   
380C   E5                     PUSH   hl   
380D   E5                     PUSH   hl   
380E   CD A7 0F               CALL   run   
3811   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3820   76                     HALT      
3821                EXPECTM_3177S126:      
3821   E1                     POP   HL   
3822                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3822   31 00 4C               LD   SP,STACK   
3825   CD D9 0E               CALL   coldInit   
3828   CD 02 4A               CALL   execStr   
382B   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3849   E1                     POP   HL   
384A   E5                     PUSH   HL   
384B   11 0B 00               LD   DE,11   
384E   B7                     OR   A   
384F   ED 52                  SBC   HL,DE   
3851   7D                     LD   A,L   
3852   B4                     OR   H   
3853   CA C5 38               JP   Z,expectM_3178S127   
3856   CD A5 0E               CALL   printStr   
3859   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
387D   CD A5 0E               CALL   printStr   
3880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
388F   21 0B 00               LD   hl,11   
3892   E5                     PUSH   hl   
3893   E5                     PUSH   hl   
3894   CD A7 0F               CALL   run   
3897   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
389F   CD A5 0E               CALL   printStr   
38A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AF   E1                     POP   hl   
38B0   E5                     PUSH   hl   
38B1   E5                     PUSH   hl   
38B2   CD A7 0F               CALL   run   
38B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38C4   76                     HALT      
38C5                EXPECTM_3178S127:      
38C5   E1                     POP   HL   
38C6                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
38C6   31 00 4C               LD   SP,STACK   
38C9   CD D9 0E               CALL   coldInit   
38CC   CD 02 4A               CALL   execStr   
38CF   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
38ED   E1                     POP   HL   
38EE   E5                     PUSH   HL   
38EF   11 15 00               LD   DE,21   
38F2   B7                     OR   A   
38F3   ED 52                  SBC   HL,DE   
38F5   7D                     LD   A,L   
38F6   B4                     OR   H   
38F7   CA 69 39               JP   Z,expectM_3179S128   
38FA   CD A5 0E               CALL   printStr   
38FD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3921   CD A5 0E               CALL   printStr   
3924   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3933   21 15 00               LD   hl,21   
3936   E5                     PUSH   hl   
3937   E5                     PUSH   hl   
3938   CD A7 0F               CALL   run   
393B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3943   CD A5 0E               CALL   printStr   
3946   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3953   E1                     POP   hl   
3954   E5                     PUSH   hl   
3955   E5                     PUSH   hl   
3956   CD A7 0F               CALL   run   
3959   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3968   76                     HALT      
3969                EXPECTM_3179S128:      
3969   E1                     POP   HL   
396A                          ;*Macro unroll:  test "[10 20 30] 1#", 20
396A   31 00 4C               LD   SP,STACK   
396D   CD D9 0E               CALL   coldInit   
3970   CD 02 4A               CALL   execStr   
3973   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3981   E1                     POP   HL   
3982   E5                     PUSH   HL   
3983   11 14 00               LD   DE,20   
3986   B7                     OR   A   
3987   ED 52                  SBC   HL,DE   
3989   7D                     LD   A,L   
398A   B4                     OR   H   
398B   CA ED 39               JP   Z,expectM_3180S129   
398E   CD A5 0E               CALL   printStr   
3991   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
39A5   CD A5 0E               CALL   printStr   
39A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B7   21 14 00               LD   hl,20   
39BA   E5                     PUSH   hl   
39BB   E5                     PUSH   hl   
39BC   CD A7 0F               CALL   run   
39BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39C7   CD A5 0E               CALL   printStr   
39CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39D7   E1                     POP   hl   
39D8   E5                     PUSH   hl   
39D9   E5                     PUSH   hl   
39DA   CD A7 0F               CALL   run   
39DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39EC   76                     HALT      
39ED                EXPECTM_3180S129:      
39ED   E1                     POP   HL   
39EE                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
39EE   31 00 4C               LD   SP,STACK   
39F1   CD D9 0E               CALL   coldInit   
39F4   CD 02 4A               CALL   execStr   
39F7   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3A09   E1                     POP   HL   
3A0A   E5                     PUSH   HL   
3A0B   11 04 00               LD   DE,4   
3A0E   B7                     OR   A   
3A0F   ED 52                  SBC   HL,DE   
3A11   7D                     LD   A,L   
3A12   B4                     OR   H   
3A13   CA 79 3A               JP   Z,expectM_3181S130   
3A16   CD A5 0E               CALL   printStr   
3A19   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3A31   CD A5 0E               CALL   printStr   
3A34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A43   21 04 00               LD   hl,4   
3A46   E5                     PUSH   hl   
3A47   E5                     PUSH   hl   
3A48   CD A7 0F               CALL   run   
3A4B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A53   CD A5 0E               CALL   printStr   
3A56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A63   E1                     POP   hl   
3A64   E5                     PUSH   hl   
3A65   E5                     PUSH   hl   
3A66   CD A7 0F               CALL   run   
3A69   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A78   76                     HALT      
3A79                EXPECTM_3181S130:      
3A79   E1                     POP   HL   
3A7A                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3A7A   31 00 4C               LD   SP,STACK   
3A7D   CD D9 0E               CALL   coldInit   
3A80   CD 02 4A               CALL   execStr   
3A83   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3A91   E1                     POP   HL   
3A92   E5                     PUSH   HL   
3A93   11 02 00               LD   DE,2   
3A96   B7                     OR   A   
3A97   ED 52                  SBC   HL,DE   
3A99   7D                     LD   A,L   
3A9A   B4                     OR   H   
3A9B   CA FD 3A               JP   Z,expectM_3182S131   
3A9E   CD A5 0E               CALL   printStr   
3AA1   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3AB5   CD A5 0E               CALL   printStr   
3AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AC7   21 02 00               LD   hl,2   
3ACA   E5                     PUSH   hl   
3ACB   E5                     PUSH   hl   
3ACC   CD A7 0F               CALL   run   
3ACF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AD7   CD A5 0E               CALL   printStr   
3ADA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AE7   E1                     POP   hl   
3AE8   E5                     PUSH   hl   
3AE9   E5                     PUSH   hl   
3AEA   CD A7 0F               CALL   run   
3AED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AFC   76                     HALT      
3AFD                EXPECTM_3182S131:      
3AFD   E1                     POP   HL   
3AFE                          ;*Macro unroll:  test "/b [~A ~B ~C] 1#", 66
3AFE   31 00 4C               LD   SP,STACK   
3B01   CD D9 0E               CALL   coldInit   
3B04   CD 02 4A               CALL   execStr   
3B07   2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/b [~A ~B ~C] 1#",0   
3B18   E1                     POP   HL   
3B19   E5                     PUSH   HL   
3B1A   11 42 00               LD   DE,66   
3B1D   B7                     OR   A   
3B1E   ED 52                  SBC   HL,DE   
3B20   7D                     LD   A,L   
3B21   B4                     OR   H   
3B22   CA 87 3B               JP   Z,expectM_3183S132   
3B25   CD A5 0E               CALL   printStr   
3B28   43 6F 64 65 3A 20 2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/b [~A ~B ~C] 1#"   
3B3F   CD A5 0E               CALL   printStr   
3B42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B51   21 42 00               LD   hl,66   
3B54   E5                     PUSH   hl   
3B55   E5                     PUSH   hl   
3B56   CD A7 0F               CALL   run   
3B59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B61   CD A5 0E               CALL   printStr   
3B64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B71   E1                     POP   hl   
3B72   E5                     PUSH   hl   
3B73   E5                     PUSH   hl   
3B74   CD A7 0F               CALL   run   
3B77   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B86   76                     HALT      
3B87                EXPECTM_3183S132:      
3B87   E1                     POP   HL   
3B88                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B88   31 00 4C               LD   SP,STACK   
3B8B   CD D9 0E               CALL   coldInit   
3B8E   CD 02 4A               CALL   execStr   
3B91   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3BA5   E1                     POP   HL   
3BA6   E5                     PUSH   HL   
3BA7   11 0A 00               LD   DE,10   
3BAA   B7                     OR   A   
3BAB   ED 52                  SBC   HL,DE   
3BAD   7D                     LD   A,L   
3BAE   B4                     OR   H   
3BAF   CA 17 3C               JP   Z,expectM_3184S133   
3BB2   CD A5 0E               CALL   printStr   
3BB5   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BCF   CD A5 0E               CALL   printStr   
3BD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BE1   21 0A 00               LD   hl,10   
3BE4   E5                     PUSH   hl   
3BE5   E5                     PUSH   hl   
3BE6   CD A7 0F               CALL   run   
3BE9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BF1   CD A5 0E               CALL   printStr   
3BF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C01   E1                     POP   hl   
3C02   E5                     PUSH   hl   
3C03   E5                     PUSH   hl   
3C04   CD A7 0F               CALL   run   
3C07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C16   76                     HALT      
3C17                EXPECTM_3184S133:      
3C17   E1                     POP   HL   
3C18                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3C18   31 00 4C               LD   SP,STACK   
3C1B   CD D9 0E               CALL   coldInit   
3C1E   CD 02 4A               CALL   execStr   
3C21   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3C3C   E1                     POP   HL   
3C3D   E5                     PUSH   HL   
3C3E   11 0A 00               LD   DE,10   
3C41   B7                     OR   A   
3C42   ED 52                  SBC   HL,DE   
3C44   7D                     LD   A,L   
3C45   B4                     OR   H   
3C46   CA B5 3C               JP   Z,expectM_3185S134   
3C49   CD A5 0E               CALL   printStr   
3C4C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3C6D   CD A5 0E               CALL   printStr   
3C70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C7F   21 0A 00               LD   hl,10   
3C82   E5                     PUSH   hl   
3C83   E5                     PUSH   hl   
3C84   CD A7 0F               CALL   run   
3C87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C8F   CD A5 0E               CALL   printStr   
3C92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C9F   E1                     POP   hl   
3CA0   E5                     PUSH   hl   
3CA1   E5                     PUSH   hl   
3CA2   CD A7 0F               CALL   run   
3CA5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CB4   76                     HALT      
3CB5                EXPECTM_3185S134:      
3CB5   E1                     POP   HL   
3CB6                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3CB6   31 00 4C               LD   SP,STACK   
3CB9   CD D9 0E               CALL   coldInit   
3CBC   CD 02 4A               CALL   execStr   
3CBF   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CDE   E1                     POP   HL   
3CDF   E5                     PUSH   HL   
3CE0   11 0A 00               LD   DE,10   
3CE3   B7                     OR   A   
3CE4   ED 52                  SBC   HL,DE   
3CE6   7D                     LD   A,L   
3CE7   B4                     OR   H   
3CE8   CA 5B 3D               JP   Z,expectM_3186S135   
3CEB   CD A5 0E               CALL   printStr   
3CEE   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D13   CD A5 0E               CALL   printStr   
3D16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D25   21 0A 00               LD   hl,10   
3D28   E5                     PUSH   hl   
3D29   E5                     PUSH   hl   
3D2A   CD A7 0F               CALL   run   
3D2D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D35   CD A5 0E               CALL   printStr   
3D38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D45   E1                     POP   hl   
3D46   E5                     PUSH   hl   
3D47   E5                     PUSH   hl   
3D48   CD A7 0F               CALL   run   
3D4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D5A   76                     HALT      
3D5B                EXPECTM_3186S135:      
3D5B   E1                     POP   HL   
3D5C                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3D5C   31 00 4C               LD   SP,STACK   
3D5F   CD D9 0E               CALL   coldInit   
3D62   CD 02 4A               CALL   execStr   
3D65   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3D84   E1                     POP   HL   
3D85   E5                     PUSH   HL   
3D86   11 14 00               LD   DE,20   
3D89   B7                     OR   A   
3D8A   ED 52                  SBC   HL,DE   
3D8C   7D                     LD   A,L   
3D8D   B4                     OR   H   
3D8E   CA 01 3E               JP   Z,expectM_3187S136   
3D91   CD A5 0E               CALL   printStr   
3D94   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3DB9   CD A5 0E               CALL   printStr   
3DBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCB   21 14 00               LD   hl,20   
3DCE   E5                     PUSH   hl   
3DCF   E5                     PUSH   hl   
3DD0   CD A7 0F               CALL   run   
3DD3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DDB   CD A5 0E               CALL   printStr   
3DDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DEB   E1                     POP   hl   
3DEC   E5                     PUSH   hl   
3DED   E5                     PUSH   hl   
3DEE   CD A7 0F               CALL   run   
3DF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E00   76                     HALT      
3E01                EXPECTM_3187S136:      
3E01   E1                     POP   HL   
3E02                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3E02   31 00 4C               LD   SP,STACK   
3E05   CD D9 0E               CALL   coldInit   
3E08   CD 02 4A               CALL   execStr   
3E0B   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3E23   E1                     POP   HL   
3E24   E5                     PUSH   HL   
3E25   11 06 00               LD   DE,6   
3E28   B7                     OR   A   
3E29   ED 52                  SBC   HL,DE   
3E2B   7D                     LD   A,L   
3E2C   B4                     OR   H   
3E2D   CA 99 3E               JP   Z,expectM_3188S137   
3E30   CD A5 0E               CALL   printStr   
3E33   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E51   CD A5 0E               CALL   printStr   
3E54   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E63   21 06 00               LD   hl,6   
3E66   E5                     PUSH   hl   
3E67   E5                     PUSH   hl   
3E68   CD A7 0F               CALL   run   
3E6B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E73   CD A5 0E               CALL   printStr   
3E76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E83   E1                     POP   hl   
3E84   E5                     PUSH   hl   
3E85   E5                     PUSH   hl   
3E86   CD A7 0F               CALL   run   
3E89   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E98   76                     HALT      
3E99                EXPECTM_3188S137:      
3E99   E1                     POP   HL   
3E9A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E9A   31 00 4C               LD   SP,STACK   
3E9D   CD D9 0E               CALL   coldInit   
3EA0   CD 02 4A               CALL   execStr   
3EA3   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3EBE   E1                     POP   HL   
3EBF   E5                     PUSH   HL   
3EC0   11 02 00               LD   DE,2   
3EC3   B7                     OR   A   
3EC4   ED 52                  SBC   HL,DE   
3EC6   7D                     LD   A,L   
3EC7   B4                     OR   H   
3EC8   CA 37 3F               JP   Z,expectM_3189S138   
3ECB   CD A5 0E               CALL   printStr   
3ECE   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EEF   CD A5 0E               CALL   printStr   
3EF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F01   21 02 00               LD   hl,2   
3F04   E5                     PUSH   hl   
3F05   E5                     PUSH   hl   
3F06   CD A7 0F               CALL   run   
3F09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F11   CD A5 0E               CALL   printStr   
3F14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F21   E1                     POP   hl   
3F22   E5                     PUSH   hl   
3F23   E5                     PUSH   hl   
3F24   CD A7 0F               CALL   run   
3F27   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F36   76                     HALT      
3F37                EXPECTM_3189S138:      
3F37   E1                     POP   HL   
3F38                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F38   31 00 4C               LD   SP,STACK   
3F3B   CD D9 0E               CALL   coldInit   
3F3E   CD 02 4A               CALL   execStr   
3F41   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F67   E1                     POP   HL   
3F68   E5                     PUSH   HL   
3F69   11 0A 00               LD   DE,10   
3F6C   B7                     OR   A   
3F6D   ED 52                  SBC   HL,DE   
3F6F   7D                     LD   A,L   
3F70   B4                     OR   H   
3F71   CA EB 3F               JP   Z,expectM_3190S139   
3F74   CD A5 0E               CALL   printStr   
3F77   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3FA3   CD A5 0E               CALL   printStr   
3FA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FB5   21 0A 00               LD   hl,10   
3FB8   E5                     PUSH   hl   
3FB9   E5                     PUSH   hl   
3FBA   CD A7 0F               CALL   run   
3FBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FC5   CD A5 0E               CALL   printStr   
3FC8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FD5   E1                     POP   hl   
3FD6   E5                     PUSH   hl   
3FD7   E5                     PUSH   hl   
3FD8   CD A7 0F               CALL   run   
3FDB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FEA   76                     HALT      
3FEB                EXPECTM_3190S139:      
3FEB   E1                     POP   HL   
3FEC                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FEC   31 00 4C               LD   SP,STACK   
3FEF   CD D9 0E               CALL   coldInit   
3FF2   CD 02 4A               CALL   execStr   
3FF5   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 06 00               LD   DE,6   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   CA A9 40               JP   Z,expectM_3191S140   
402D   CD A5 0E               CALL   printStr   
4030   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4061   CD A5 0E               CALL   printStr   
4064   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4073   21 06 00               LD   hl,6   
4076   E5                     PUSH   hl   
4077   E5                     PUSH   hl   
4078   CD A7 0F               CALL   run   
407B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4083   CD A5 0E               CALL   printStr   
4086   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4093   E1                     POP   hl   
4094   E5                     PUSH   hl   
4095   E5                     PUSH   hl   
4096   CD A7 0F               CALL   run   
4099   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40A8   76                     HALT      
40A9                EXPECTM_3191S140:      
40A9   E1                     POP   HL   
40AA                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
40AA   31 00 4C               LD   SP,STACK   
40AD   CD D9 0E               CALL   coldInit   
40B0   CD 02 4A               CALL   execStr   
40B3   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
40C7   E1                     POP   HL   
40C8   E5                     PUSH   HL   
40C9   11 03 00               LD   DE,3   
40CC   B7                     OR   A   
40CD   ED 52                  SBC   HL,DE   
40CF   7D                     LD   A,L   
40D0   B4                     OR   H   
40D1   CA 39 41               JP   Z,expectM_3192S141   
40D4   CD A5 0E               CALL   printStr   
40D7   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
40F1   CD A5 0E               CALL   printStr   
40F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4103   21 03 00               LD   hl,3   
4106   E5                     PUSH   hl   
4107   E5                     PUSH   hl   
4108   CD A7 0F               CALL   run   
410B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4113   CD A5 0E               CALL   printStr   
4116   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4123   E1                     POP   hl   
4124   E5                     PUSH   hl   
4125   E5                     PUSH   hl   
4126   CD A7 0F               CALL   run   
4129   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4138   76                     HALT      
4139                EXPECTM_3192S141:      
4139   E1                     POP   HL   
413A                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
413A   31 00 4C               LD   SP,STACK   
413D   CD D9 0E               CALL   coldInit   
4140   CD 02 4A               CALL   execStr   
4143   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4157   E1                     POP   HL   
4158   E5                     PUSH   HL   
4159   11 01 00               LD   DE,1   
415C   B7                     OR   A   
415D   ED 52                  SBC   HL,DE   
415F   7D                     LD   A,L   
4160   B4                     OR   H   
4161   CA C9 41               JP   Z,expectM_3193S142   
4164   CD A5 0E               CALL   printStr   
4167   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4181   CD A5 0E               CALL   printStr   
4184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4193   21 01 00               LD   hl,1   
4196   E5                     PUSH   hl   
4197   E5                     PUSH   hl   
4198   CD A7 0F               CALL   run   
419B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41A3   CD A5 0E               CALL   printStr   
41A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41B3   E1                     POP   hl   
41B4   E5                     PUSH   hl   
41B5   E5                     PUSH   hl   
41B6   CD A7 0F               CALL   run   
41B9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41C8   76                     HALT      
41C9                EXPECTM_3193S142:      
41C9   E1                     POP   HL   
41CA                          ;*Macro unroll:  test "~A 1 - /ad", NUL
41CA   31 00 4C               LD   SP,STACK   
41CD   CD D9 0E               CALL   coldInit   
41D0   CD 02 4A               CALL   execStr   
41D3   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
41DE   E1                     POP   HL   
41DF   E5                     PUSH   HL   
41E0   11 00 00               LD   DE,NUL   
41E3   B7                     OR   A   
41E4   ED 52                  SBC   HL,DE   
41E6   7D                     LD   A,L   
41E7   B4                     OR   H   
41E8   CA 47 42               JP   Z,expectM_3194S143   
41EB   CD A5 0E               CALL   printStr   
41EE   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
41FF   CD A5 0E               CALL   printStr   
4202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4211   21 00 00               LD   hl,NUL   
4214   E5                     PUSH   hl   
4215   E5                     PUSH   hl   
4216   CD A7 0F               CALL   run   
4219   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4221   CD A5 0E               CALL   printStr   
4224   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4231   E1                     POP   hl   
4232   E5                     PUSH   hl   
4233   E5                     PUSH   hl   
4234   CD A7 0F               CALL   run   
4237   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4246   76                     HALT      
4247                EXPECTM_3194S143:      
4247   E1                     POP   HL   
4248                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
4248   31 00 4C               LD   SP,STACK   
424B   CD D9 0E               CALL   coldInit   
424E   CD 02 4A               CALL   execStr   
4251   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
425C   E1                     POP   HL   
425D   E5                     PUSH   HL   
425E   11 00 00               LD   DE,NUL   
4261   B7                     OR   A   
4262   ED 52                  SBC   HL,DE   
4264   7D                     LD   A,L   
4265   B4                     OR   H   
4266   CA C5 42               JP   Z,expectM_3195S144   
4269   CD A5 0E               CALL   printStr   
426C   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
427D   CD A5 0E               CALL   printStr   
4280   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
428F   21 00 00               LD   hl,NUL   
4292   E5                     PUSH   hl   
4293   E5                     PUSH   hl   
4294   CD A7 0F               CALL   run   
4297   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
429F   CD A5 0E               CALL   printStr   
42A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AF   E1                     POP   hl   
42B0   E5                     PUSH   hl   
42B1   E5                     PUSH   hl   
42B2   CD A7 0F               CALL   run   
42B5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42C4   76                     HALT      
42C5                EXPECTM_3195S144:      
42C5   E1                     POP   HL   
42C6                          ;*Macro unroll:  test "~a 1 - /ad", NUL
42C6   31 00 4C               LD   SP,STACK   
42C9   CD D9 0E               CALL   coldInit   
42CC   CD 02 4A               CALL   execStr   
42CF   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
42DA   E1                     POP   HL   
42DB   E5                     PUSH   HL   
42DC   11 00 00               LD   DE,NUL   
42DF   B7                     OR   A   
42E0   ED 52                  SBC   HL,DE   
42E2   7D                     LD   A,L   
42E3   B4                     OR   H   
42E4   CA 43 43               JP   Z,expectM_3196S145   
42E7   CD A5 0E               CALL   printStr   
42EA   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
42FB   CD A5 0E               CALL   printStr   
42FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
430D   21 00 00               LD   hl,NUL   
4310   E5                     PUSH   hl   
4311   E5                     PUSH   hl   
4312   CD A7 0F               CALL   run   
4315   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
431D   CD A5 0E               CALL   printStr   
4320   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
432D   E1                     POP   hl   
432E   E5                     PUSH   hl   
432F   E5                     PUSH   hl   
4330   CD A7 0F               CALL   run   
4333   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4342   76                     HALT      
4343                EXPECTM_3196S145:      
4343   E1                     POP   HL   
4344                          ;*Macro unroll:  test "~z 1 + /ad", NUL
4344   31 00 4C               LD   SP,STACK   
4347   CD D9 0E               CALL   coldInit   
434A   CD 02 4A               CALL   execStr   
434D   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
4358   E1                     POP   HL   
4359   E5                     PUSH   HL   
435A   11 00 00               LD   DE,NUL   
435D   B7                     OR   A   
435E   ED 52                  SBC   HL,DE   
4360   7D                     LD   A,L   
4361   B4                     OR   H   
4362   CA C1 43               JP   Z,expectM_3197S146   
4365   CD A5 0E               CALL   printStr   
4368   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
4379   CD A5 0E               CALL   printStr   
437C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
438B   21 00 00               LD   hl,NUL   
438E   E5                     PUSH   hl   
438F   E5                     PUSH   hl   
4390   CD A7 0F               CALL   run   
4393   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
439B   CD A5 0E               CALL   printStr   
439E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AB   E1                     POP   hl   
43AC   E5                     PUSH   hl   
43AD   E5                     PUSH   hl   
43AE   CD A7 0F               CALL   run   
43B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43C0   76                     HALT      
43C1                EXPECTM_3197S146:      
43C1   E1                     POP   HL   
43C2                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
43C2   31 00 4C               LD   SP,STACK   
43C5   CD D9 0E               CALL   coldInit   
43C8   CD 02 4A               CALL   execStr   
43CB   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
43D2   E1                     POP   HL   
43D3   E5                     PUSH   HL   
43D4   11 66 4E               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43D7   B7                     OR   A   
43D8   ED 52                  SBC   HL,DE   
43DA   7D                     LD   A,L   
43DB   B4                     OR   H   
43DC   CA 37 44               JP   Z,expectM_3198S147   
43DF   CD A5 0E               CALL   printStr   
43E2   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
43EF   CD A5 0E               CALL   printStr   
43F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4401   21 66 4E               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4404   E5                     PUSH   hl   
4405   E5                     PUSH   hl   
4406   CD A7 0F               CALL   run   
4409   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4411   CD A5 0E               CALL   printStr   
4414   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4421   E1                     POP   hl   
4422   E5                     PUSH   hl   
4423   E5                     PUSH   hl   
4424   CD A7 0F               CALL   run   
4427   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4436   76                     HALT      
4437                EXPECTM_3198S147:      
4437   E1                     POP   HL   
4438                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
4438   31 00 4C               LD   SP,STACK   
443B   CD D9 0E               CALL   coldInit   
443E   CD 02 4A               CALL   execStr   
4441   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
4448   E1                     POP   HL   
4449   E5                     PUSH   HL   
444A   11 34 4E               LD   DE,VARS + ("Z"-"A"+1)*2   
444D   B7                     OR   A   
444E   ED 52                  SBC   HL,DE   
4450   7D                     LD   A,L   
4451   B4                     OR   H   
4452   CA AD 44               JP   Z,expectM_3199S148   
4455   CD A5 0E               CALL   printStr   
4458   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
4465   CD A5 0E               CALL   printStr   
4468   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4477   21 34 4E               LD   hl,VARS + ("Z"-"A"+1)*2   
447A   E5                     PUSH   hl   
447B   E5                     PUSH   hl   
447C   CD A7 0F               CALL   run   
447F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4487   CD A5 0E               CALL   printStr   
448A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4497   E1                     POP   hl   
4498   E5                     PUSH   hl   
4499   E5                     PUSH   hl   
449A   CD A7 0F               CALL   run   
449D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44AC   76                     HALT      
44AD                EXPECTM_3199S148:      
44AD   E1                     POP   HL   
44AE                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
44AE   31 00 4C               LD   SP,STACK   
44B1   CD D9 0E               CALL   coldInit   
44B4   CD 02 4A               CALL   execStr   
44B7   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
44BE   E1                     POP   HL   
44BF   E5                     PUSH   HL   
44C0   11 32 4E               LD   DE,VARS + ("Z"-"A")*2   
44C3   B7                     OR   A   
44C4   ED 52                  SBC   HL,DE   
44C6   7D                     LD   A,L   
44C7   B4                     OR   H   
44C8   CA 23 45               JP   Z,expectM_3200S149   
44CB   CD A5 0E               CALL   printStr   
44CE   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
44DB   CD A5 0E               CALL   printStr   
44DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44ED   21 32 4E               LD   hl,VARS + ("Z"-"A")*2   
44F0   E5                     PUSH   hl   
44F1   E5                     PUSH   hl   
44F2   CD A7 0F               CALL   run   
44F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44FD   CD A5 0E               CALL   printStr   
4500   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
450D   E1                     POP   hl   
450E   E5                     PUSH   hl   
450F   E5                     PUSH   hl   
4510   CD A7 0F               CALL   run   
4513   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4522   76                     HALT      
4523                EXPECTM_3200S149:      
4523   E1                     POP   HL   
4524                          ;*Macro unroll:  test "~A /ad", VARS
4524   31 00 4C               LD   SP,STACK   
4527   CD D9 0E               CALL   coldInit   
452A   CD 02 4A               CALL   execStr   
452D   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
4534   E1                     POP   HL   
4535   E5                     PUSH   HL   
4536   11 00 4E               LD   DE,VARS   
4539   B7                     OR   A   
453A   ED 52                  SBC   HL,DE   
453C   7D                     LD   A,L   
453D   B4                     OR   H   
453E   CA 99 45               JP   Z,expectM_3201S150   
4541   CD A5 0E               CALL   printStr   
4544   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
4551   CD A5 0E               CALL   printStr   
4554   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4563   21 00 4E               LD   hl,VARS   
4566   E5                     PUSH   hl   
4567   E5                     PUSH   hl   
4568   CD A7 0F               CALL   run   
456B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4573   CD A5 0E               CALL   printStr   
4576   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4583   E1                     POP   hl   
4584   E5                     PUSH   hl   
4585   E5                     PUSH   hl   
4586   CD A7 0F               CALL   run   
4589   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4598   76                     HALT      
4599                EXPECTM_3201S150:      
4599   E1                     POP   HL   
459A                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
459A   31 00 4C               LD   SP,STACK   
459D   CD D9 0E               CALL   coldInit   
45A0   CD 02 4A               CALL   execStr   
45A3   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
45B0   E1                     POP   HL   
45B1   E5                     PUSH   HL   
45B2   11 01 00               LD   DE,1   
45B5   B7                     OR   A   
45B6   ED 52                  SBC   HL,DE   
45B8   7D                     LD   A,L   
45B9   B4                     OR   H   
45BA   CA 1B 46               JP   Z,expectM_3202S151   
45BD   CD A5 0E               CALL   printStr   
45C0   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
45D3   CD A5 0E               CALL   printStr   
45D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E5   21 01 00               LD   hl,1   
45E8   E5                     PUSH   hl   
45E9   E5                     PUSH   hl   
45EA   CD A7 0F               CALL   run   
45ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F5   CD A5 0E               CALL   printStr   
45F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4605   E1                     POP   hl   
4606   E5                     PUSH   hl   
4607   E5                     PUSH   hl   
4608   CD A7 0F               CALL   run   
460B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
461A   76                     HALT      
461B                EXPECTM_3202S151:      
461B   E1                     POP   HL   
461C                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
461C   31 00 4C               LD   SP,STACK   
461F   CD D9 0E               CALL   coldInit   
4622   CD 02 4A               CALL   execStr   
4625   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4639   E1                     POP   HL   
463A   E5                     PUSH   HL   
463B   11 03 00               LD   DE,3   
463E   B7                     OR   A   
463F   ED 52                  SBC   HL,DE   
4641   7D                     LD   A,L   
4642   B4                     OR   H   
4643   CA AB 46               JP   Z,expectM_3203S152   
4646   CD A5 0E               CALL   printStr   
4649   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4663   CD A5 0E               CALL   printStr   
4666   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4675   21 03 00               LD   hl,3   
4678   E5                     PUSH   hl   
4679   E5                     PUSH   hl   
467A   CD A7 0F               CALL   run   
467D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4685   CD A5 0E               CALL   printStr   
4688   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4695   E1                     POP   hl   
4696   E5                     PUSH   hl   
4697   E5                     PUSH   hl   
4698   CD A7 0F               CALL   run   
469B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46AA   76                     HALT      
46AB                EXPECTM_3203S152:      
46AB   E1                     POP   HL   
46AC                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
46AC   31 00 4C               LD   SP,STACK   
46AF   CD D9 0E               CALL   coldInit   
46B2   CD 02 4A               CALL   execStr   
46B5   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
46CC   E1                     POP   HL   
46CD   E5                     PUSH   HL   
46CE   11 02 00               LD   DE,2   
46D1   B7                     OR   A   
46D2   ED 52                  SBC   HL,DE   
46D4   7D                     LD   A,L   
46D5   B4                     OR   H   
46D6   CA 41 47               JP   Z,expectM_3204S153   
46D9   CD A5 0E               CALL   printStr   
46DC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
46F9   CD A5 0E               CALL   printStr   
46FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
470B   21 02 00               LD   hl,2   
470E   E5                     PUSH   hl   
470F   E5                     PUSH   hl   
4710   CD A7 0F               CALL   run   
4713   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
471B   CD A5 0E               CALL   printStr   
471E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472B   E1                     POP   hl   
472C   E5                     PUSH   hl   
472D   E5                     PUSH   hl   
472E   CD A7 0F               CALL   run   
4731   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4740   76                     HALT      
4741                EXPECTM_3204S153:      
4741   E1                     POP   HL   
4742                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4742   31 00 4C               LD   SP,STACK   
4745   CD D9 0E               CALL   coldInit   
4748   CD 02 4A               CALL   execStr   
474B   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
476E   E1                     POP   HL   
476F   E5                     PUSH   HL   
4770   11 01 00               LD   DE,1   
4773   B7                     OR   A   
4774   ED 52                  SBC   HL,DE   
4776   7D                     LD   A,L   
4777   B4                     OR   H   
4778   CA EF 47               JP   Z,expectM_3205S154   
477B   CD A5 0E               CALL   printStr   
477E   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
47A7   CD A5 0E               CALL   printStr   
47AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47B9   21 01 00               LD   hl,1   
47BC   E5                     PUSH   hl   
47BD   E5                     PUSH   hl   
47BE   CD A7 0F               CALL   run   
47C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47C9   CD A5 0E               CALL   printStr   
47CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D9   E1                     POP   hl   
47DA   E5                     PUSH   hl   
47DB   E5                     PUSH   hl   
47DC   CD A7 0F               CALL   run   
47DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47EE   76                     HALT      
47EF                EXPECTM_3205S154:      
47EF   E1                     POP   HL   
47F0                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
47F0   31 00 4C               LD   SP,STACK   
47F3   CD D9 0E               CALL   coldInit   
47F6   CD 02 4A               CALL   execStr   
47F9   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
481C   E1                     POP   HL   
481D   E5                     PUSH   HL   
481E   11 01 00               LD   DE,1   
4821   B7                     OR   A   
4822   ED 52                  SBC   HL,DE   
4824   7D                     LD   A,L   
4825   B4                     OR   H   
4826   CA 9D 48               JP   Z,expectM_3206S155   
4829   CD A5 0E               CALL   printStr   
482C   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4855   CD A5 0E               CALL   printStr   
4858   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4867   21 01 00               LD   hl,1   
486A   E5                     PUSH   hl   
486B   E5                     PUSH   hl   
486C   CD A7 0F               CALL   run   
486F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4877   CD A5 0E               CALL   printStr   
487A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4887   E1                     POP   hl   
4888   E5                     PUSH   hl   
4889   E5                     PUSH   hl   
488A   CD A7 0F               CALL   run   
488D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
489C   76                     HALT      
489D                EXPECTM_3206S155:      
489D   E1                     POP   HL   
489E                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
489E   31 00 4C               LD   SP,STACK   
48A1   CD D9 0E               CALL   coldInit   
48A4   CD 02 4A               CALL   execStr   
48A7   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
48D7   E1                     POP   HL   
48D8   E5                     PUSH   HL   
48D9   11 02 00               LD   DE,2   
48DC   B7                     OR   A   
48DD   ED 52                  SBC   HL,DE   
48DF   7D                     LD   A,L   
48E0   B4                     OR   H   
48E1   CA 65 49               JP   Z,expectM_3207S156   
48E4   CD A5 0E               CALL   printStr   
48E7   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
491D   CD A5 0E               CALL   printStr   
4920   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
492F   21 02 00               LD   hl,2   
4932   E5                     PUSH   hl   
4933   E5                     PUSH   hl   
4934   CD A7 0F               CALL   run   
4937   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
493F   CD A5 0E               CALL   printStr   
4942   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
494F   E1                     POP   hl   
4950   E5                     PUSH   hl   
4951   E5                     PUSH   hl   
4952   CD A7 0F               CALL   run   
4955   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4964   76                     HALT      
4965                EXPECTM_3207S156:      
4965   E1                     POP   HL   
4966                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4966   31 00 4C               LD   SP,STACK   
4969   CD D9 0E               CALL   coldInit   
496C   CD 02 4A               CALL   execStr   
496F   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4984   E1                     POP   HL   
4985   E5                     PUSH   HL   
4986   11 02 00               LD   DE,2   
4989   B7                     OR   A   
498A   ED 52                  SBC   HL,DE   
498C   7D                     LD   A,L   
498D   B4                     OR   H   
498E   CA F7 49               JP   Z,expectM_3208S157   
4991   CD A5 0E               CALL   printStr   
4994   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
49AF   CD A5 0E               CALL   printStr   
49B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C1   21 02 00               LD   hl,2   
49C4   E5                     PUSH   hl   
49C5   E5                     PUSH   hl   
49C6   CD A7 0F               CALL   run   
49C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49D1   CD A5 0E               CALL   printStr   
49D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49E1   E1                     POP   hl   
49E2   E5                     PUSH   hl   
49E3   E5                     PUSH   hl   
49E4   CD A7 0F               CALL   run   
49E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49F6   76                     HALT      
49F7                EXPECTM_3208S157:      
49F7   E1                     POP   HL   
49F8                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
49F8                             ; 
49F8   CD A5 0E               CALL   printStr   
49FB   44 6F 6E 65 21 00      .CSTR   "Done!"   
4A01   76                     HALT      
4A02                             ; executes a null teminated string (null executes exit_)
4A02                             ; the string should be immedaitely following the call
4A02                EXECSTR:      ; create a root stack frame
4A02   C1                     POP   bc   ; bc = code*
4A03   0B                     DEC   bc   ; dec to prepare for next routine
4A04   11 00 00               LD   de,0   
4A07   D5                     PUSH   de   ; push fake IP
4A08   D5                     PUSH   de   ; push null arg_list*
4A09   D5                     PUSH   de   ; push null first_arg*
4A0A   D5                     PUSH   de   ; push fake BP
4A0B   DD E9                  JP   (ix)   
4A0D                STKSIZE:   EQU   $100   ; Stack size
4A0D                TIBSIZE:   EQU   $100   ; 256 bytes
4A0D                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4A0D                          ALIGN   $100   
4B00                          DS   STKSIZE   
4C00                STACK:       
4C00                          ALIGN   $100   
4C00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                VARS:        
4E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4ED0                RESTARTS:      
4ED0                RST08:    DS   2   
4ED2                RST10:    DS   2   
4ED4                RST18:    DS   2   
4ED6                RST20:    DS   2   
4ED8                RST28:    DS   2   
4EDA                RST30:    DS   2   ; 
4EDC                BAUD:     DS   2   ; 
4EDE                INTVEC:   DS   2   ; 
4EE0                NMIVEC:   DS   2   ; 
4EE2                GETCVEC:   DS   2   ; 
4EE4                PUTCVEC:   DS   2   ; 
4EE6                SYSVARS:      
4EE6                             ; initialised sys variables (preserved)
4EE6                VDATAWIDTH:   DS   2   ; 
4EE8                VNUMBASE:   DS   2   ; 
4EEA                VTIBPTR:   DS   2   ; 
4EEC                VBUFPTR:   DS   2   ; 
4EEE                VNEXT:    DS   2   ; 
4EF0                VHEAPPTR:   DS   2   ; 
4EF2                VRECUR:   DS   2   ; 
4EF4                VDEFINE:   DS   2   ; 
4EF6                VSTRMODE:   DS   2   ; 
4EF8                             ; uninitialised sys variables (preserved)
4EF8                VPOINTER:   DS   2   ; 
4EFA                VREMAIN:   DS   2   ; 
4EFC                VSAVEDIP:   DS   2   ; 
4EFE                VSAVEDSP:   DS   2   ; 
4F00                VSAVEDNEXT:   DS   2   ; 
4F02                VSAVEDBP:   DS   2   ; 
4F04                             ; uninitialised sys variables (unpreserved)
4F04                VTEMP1:   DS   2   ; 
4F06                VTEMP2:   DS   2   ; 
4F08                VTEMP3:   DS   2   ; 
4F0A                VLASTDEF:   DS   2   ; 
4F0C                TBPTR:    DS   2   ; reserved for tests
4F0E                TITLEBUF:   DS   20   
4F22                HEAP:        
4F22                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
4F22                             ; db "{"
4F22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4F22                             ; db        "%L1#!/qt"                ; if not active don't send
4F22                             ; db        "%L0# %a="                ; store current index in A
4F22                             ; db        "%s %L0# +="              ; inc value of index by step
4F22                             ; db        "1%t!=/qt"                ; break if type != 0
4F22                             ; db        "%a %e <"                 ; ifte: in range?
4F22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
4F22                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
4F22                             ; db      "} 0 %k^"                   ; init sink
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC map, 0, "sf"                   ; map
4F22                             ; db "{"
4F22                             ; db    "\\kt{"
4F22                             ; db      "0%t!=/qt"                  ; break if type != 0
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4F22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4F22                             ; db        "?? %t %k^"               ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; ; /ft filter
4F22                             ; ; src pred -- src1
4F22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\kt{"                       ; return talkback to receive data
4F22                             ; db      "\\dt{"                     ; call source with tb
4F22                             ; db        "["
4F22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4F22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4F22                             ; db          "{/t}"                  ; case 2: return true
4F22                             ; db        "]%t#^"                   ; select on %t
4F22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4F22                             ; db        "??"
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC forEach, 1, "spT"
4F22                             ; db "{"
4F22                             ; db    "[0]%T="
4F22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4F22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4F22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4F22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4F22                             ; db      "??"                      ; ifte:
4F22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4F22                             ; db    "} 0 %s^"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4F22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4F22                             ; db    "[%i]%A="
4F22                             ; db    "\\kt{"                         ; return talkback to receive data
4F22                             ; db      "\\dt{"                         ; call source with tb
4F22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4F22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4F22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4F22                             ; db      "} 0 %s^"
4F22                             ; db    "}"
4F22                             ; db "}"
4F22                             ; db 0
4F22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049D DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
STRING2:            04A0 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
STRING3:            04A6 DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
PERCENT:            04BC DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04BC DEFINED AT LINE 810 IN MAIN.asm
ARG0:               04D8 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
ARG0A:              04E1 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ARG1:               04E6 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
ARG1A:              04EE DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050D DEFINED AT LINE 869 IN MAIN.asm
DOTDEC:             0518 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
DOTDEC0:            052D DEFINED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
DOTDEC1:            053D DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
DOTDEC2:            055D DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
DOTDEC3:            055F DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
DOTDEC4:            056F DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
DOTDEC5:            0570 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
DOTHEX:             0576 DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTHEX1:            0592 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
DOTHEX2:            059B DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
DOTSTRING_:         05A6 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
DOTSTRING0:         05AD DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
DOTSTRING1:         05B0 DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
DOTCHAR:            05BB DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1013 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1049 IN MAIN.asm
COMMAND_B_:         0635 DEFINED AT LINE 1062 IN MAIN.asm
COMMAND_I_:         0640 DEFINED AT LINE 1072 IN MAIN.asm
COMMAND_P_:         0649 DEFINED AT LINE 1080 IN MAIN.asm
COMMAND_Q_:         0650 DEFINED AT LINE 1086 IN MAIN.asm
ABSOLUTE_:          0659 DEFINED AT LINE 1096 IN MAIN.asm
BREAK_:             0666 DEFINED AT LINE 1113 IN MAIN.asm
BREAK:              0666 DEFINED AT LINE 1114 IN MAIN.asm
BREAK1:             066D DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
INPUT_:             0680 DEFINED AT LINE 1134 IN MAIN.asm
COMMAND_M_:         068B DEFINED AT LINE 1145 IN MAIN.asm
COMMAND_R_:         068E DEFINED AT LINE 1149 IN MAIN.asm
COMMAND_S_:         0691 DEFINED AT LINE 1153 IN MAIN.asm
COMMAND_V_:         0694 DEFINED AT LINE 1157 IN MAIN.asm
COMMAND_NOP_:       0697 DEFINED AT LINE 1161 IN MAIN.asm
DECIMAL_:           0699 DEFINED AT LINE 1165 IN MAIN.asm
DECIMAL1:           069C DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
DIV_:               06A1 DEFINED AT LINE 1172 IN MAIN.asm
ERROR1_:            06A5 DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
HEXADECIMAL_:       06AB DEFINED AT LINE 1182 IN MAIN.asm
TRUE_:              06B1 DEFINED AT LINE 1187 IN MAIN.asm
WORDS_:             06B4 DEFINED AT LINE 1191 IN MAIN.asm
ADDROF_:            06B7 DEFINED AT LINE 1195 IN MAIN.asm
ARRAYITER_:         06BA DEFINED AT LINE 1199 IN MAIN.asm
COLDSTART_:         06BD DEFINED AT LINE 1204 IN MAIN.asm
WORDS:              06C0 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
COMMENT:            06C6 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BYTES_:             06CF DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
BYTES1:             06D2 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
QUIT_:              06D7 DEFINED AT LINE 1234 IN MAIN.asm
QUIT1:              06DE DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
ARRAYSIZE_:         06E1 DEFINED AT LINE 1246 IN MAIN.asm
XOR_:               06E9 DEFINED AT LINE 1256 IN MAIN.asm
XOR1:               06EA DEFINED AT LINE 1258 IN MAIN.asm
KEY_:               06F4 DEFINED AT LINE 1273 IN MAIN.asm
KEY:                06F4 DEFINED AT LINE 1274 IN MAIN.asm
OUTPUT_:            06FD DEFINED AT LINE 1283 IN MAIN.asm
COMMAND_F_:         06FF DEFINED AT LINE 1287 IN MAIN.asm
OUTPUT:             0701 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
COMMAND_F:          070A DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
COMMAND_M:          0721 DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
COMMAND_R:          072A DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
COMMAND_V:          0737 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
COMMAND_S:          0746 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
FOREACH_:           0759 DEFINED AT LINE 1371 IN MAIN.asm
FILTER_:            075C DEFINED AT LINE 1374 IN MAIN.asm
FOLD_:              075F DEFINED AT LINE 1377 IN MAIN.asm
FUNCSRC_:           0762 DEFINED AT LINE 1380 IN MAIN.asm
F1_:                0765 DEFINED AT LINE 1383 IN MAIN.asm
F2_:                0768 DEFINED AT LINE 1386 IN MAIN.asm
F3_:                076B DEFINED AT LINE 1389 IN MAIN.asm
F4_:                076E DEFINED AT LINE 1392 IN MAIN.asm
FALSE_:             0771 DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
MAP_:               0774 DEFINED AT LINE 1398 IN MAIN.asm
RECUR_:             0777 DEFINED AT LINE 1401 IN MAIN.asm
REMAIN_:            077D DEFINED AT LINE 1406 IN MAIN.asm
STRINGITER_:        0783 DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
RANGESRC_:          0786 DEFINED AT LINE 1414 IN MAIN.asm
CONSTHEAPSTART_:    0789 DEFINED AT LINE 1417 IN MAIN.asm
CONSTTIBSTART_:     078E DEFINED AT LINE 1421 IN MAIN.asm
VARHEAPPTR_:        0793 DEFINED AT LINE 1425 IN MAIN.asm
VARTIBPTR_:         079C DEFINED AT LINE 1430 IN MAIN.asm
VARIABLE:           07A5 DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
CONSTANT:           07A8 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
RANGESRC:           07AB DEFINED AT LINE 32
                    > USED AT LINE 1415 IN MAIN.asm
RANGESRCM_1884S1450: 07BA DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0827 DEFINED AT LINE 32
                    > USED AT LINE 1200 IN MAIN.asm
ARRAYITERM_1903S1470: 0834 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08A8 DEFINED AT LINE 32
                    > USED AT LINE 1412 IN MAIN.asm
STRINGITERM_1922S1490: 08B5 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                092E DEFINED AT LINE 32
                    > USED AT LINE 1399 IN MAIN.asm
MAPM_1942S1512:     093B DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0970 DEFINED AT LINE 32
                    > USED AT LINE 1375 IN MAIN.asm
FILTERM_1956S1527:  097E DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09CE DEFINED AT LINE 32
                    > USED AT LINE 1378 IN MAIN.asm
FOLDM_1975S1547:    09DD DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A20 DEFINED AT LINE 32
                    > USED AT LINE 1372 IN MAIN.asm
FOREACHM_1989S1562: 0A2E DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A6C DEFINED AT LINE 32
                    > USED AT LINE 1381 IN MAIN.asm
FUNCSRCM_2003S1577: 0A78 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0AA5 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
DOTARRAYM_2013S1588: 0AB3 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0AED DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0AED DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
STRINGBEGIN:        0AEF DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
STRINGEND:          0AF7 DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
STRINGEND1:         0B1E DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
STRINGSIZE:         0B26 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
DOTNEXT:            0B28 DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
DOTNEXT1:           0B30 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
DOTNEXT2:           0B3C DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
DOTNEXT3:           0B42 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
ADDROF:             0B4E DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
ADDROF1:            0B62 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
ADDROF2:            0B6D DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
RBRACK:             0B6F DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B6F DEFINED AT LINE 1690 IN MAIN.asm
ARRAYEND1:          0B8B DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
ARRAYEND2:          0B9B DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
ARRAYEND3:          0BA0 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
RBRACE:             0BC2 DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BC2 DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
BLOCKEND1:          0BF4 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
BLOCKEND2:          0C00 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
BLOCKEND3:          0C12 DEFINED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
BLOCKEND4:          0C26 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
CARET:              0C2F DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C2F DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C30 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
GO2:                0C36 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
GOBLOCK:            0C41 DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
GOBLOCK2:           0C66 DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
GOBLOCK3:           0C70 DEFINED AT LINE 1844 IN MAIN.asm
GOFUNC:             0C74 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
GOFUNC1:            0C8D DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
GOFUNC2:            0C93 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
GOFUNC3:            0C9E DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
GOFUNC4:            0CB6 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
GOFUNC5:            0CB9 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
GOFUNC6:            0CBC DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
GOFUNC7:            0CBF DEFINED AT LINE 1907 IN MAIN.asm
GOFUNC8:            0CC3 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
PARSEARGS:          0CCE DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CD8 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PARSEARGS1A:        0CE0 DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
PARSEARGS2:         0CE8 DEFINED AT LINE 1947 IN MAIN.asm
PARSEARGS3:         0CF0 DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
PARSEARGS4:         0CF3 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
PARSEARGS5:         0CF9 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PARSEBLOCK:         0D07 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D0B DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEBLOCK2:        0D37 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
PARSEBLOCK3:        0D3A DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
PARSEBLOCK4:        0D42 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
PARSEBLOCK5:        0D45 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
PARSEBLOCK6:        0D71 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
CREATEFUNC:         0D75 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D94 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
CREATEFUNC1:        0DAC DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
CREATEFUNC2:        0DBF DEFINED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
CREATEFUNC2A:       0DDE DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
CREATEFUNC3:        0DED DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
CREATEFUNC4:        0DF8 DEFINED AT LINE 2144 IN MAIN.asm
CREATEFUNC5:        0DF9 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
COMMANDTABLE:       0E1A DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
COMMANDTABLE1:      0E24 DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
COMMANDTABLE2:      0E29 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
JUMPTABLE:          0E2E DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
JUMPTABLE0:         0E30 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
JUMPTABLE1:         0E3C DEFINED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
JUMPTABLE2:         0E3F DEFINED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
XJUMPTABLE:         0E42 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
XJUMPTABLE0:        0E44 DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
XJUMPTABLE1:        0E51 DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
XJUMPTABLE2:        0E57 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
PRTSTR0:            0E5A DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
PRTSTR:             0E5E DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
NESTING:            0E63 DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
NESTING0:           0E6D DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
NESTING1A:          0E74 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
NESTING1:           0E77 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
NESTING2:           0E86 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
NESTING3:           0E88 DEFINED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
NESTING4:           0E93 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
PROMPT:             0E95 DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
CRLF:               0E9E DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
PRINTSTR:           0EA5 DEFINED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 41
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 162
INIT:               0EAC DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
INIT1:              0EB4 DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
WARMINIT:           0EBC DEFINED AT LINE 2358 IN MAIN.asm
COLDBOOT0:          0ECF DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
COLDINIT:           0ED9 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EEA DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
COLDSTART:          0EF7 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
START:              0F00 DEFINED AT LINE 2393 IN MAIN.asm
START1:             0F06 DEFINED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
INTERPRET:          0F0C DEFINED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
                    > USED AT LINE 2567 IN MAIN.asm
INTERPRET2:         0F18 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
INTERPRET3:         0F20 DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
INTERPRET4:         0F2B DEFINED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET5:         0F30 DEFINED AT LINE 2432 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
INTERPRET5A:        0F4E DEFINED AT LINE 2469 IN MAIN.asm
INTERPRET6:         0F50 DEFINED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
INTERPRET7:         0F5E DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
INTERPRET8:         0F71 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
NEXT:               0F8C DEFINED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
NEXT1:              0F9C DEFINED AT LINE 2524 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
EXIT:               0FA3 DEFINED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
RUN:                0FA7 DEFINED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FAB DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
BACKSPACE_:         0FBF DEFINED AT LINE 2546 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
EDIT_:              0FCF DEFINED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
REEDIT_:            0FE7 DEFINED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
PRINTSTACK_:        0FEA DEFINED AT LINE 2564 IN MAIN.asm
F1:                 0FF4 DEFINED AT LINE 32
                    > USED AT LINE 1384 IN MAIN.asm
F1M_3071S12:        1002 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 103C DEFINED AT LINE 32
                    > USED AT LINE 1387 IN MAIN.asm
F2M_3076S18:        1047 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1048 DEFINED AT LINE 32
                    > USED AT LINE 1390 IN MAIN.asm
F3M_3078S21:        1053 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1054 DEFINED AT LINE 32
                    > USED AT LINE 1393 IN MAIN.asm
F4M_3080S24:        105F DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 28
                    > USED AT LINE 8
EXPECTM_3092S39:    11AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S47:    1223 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S48:    1291 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S49:    12FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S50:    1369 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S51:    13D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S52:    1441 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S53:    14AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S54:    151F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S55:    158D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S56:    15FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S57:    1669 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S58:    16D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S59:    1749 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S60:    17BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S61:    1835 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S62:    18A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S63:    1921 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S64:    199D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S65:    1A17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S66:    1A8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S67:    1B07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S68:    1B7F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S69:    1BF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S70:    1C67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S71:    1CE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S72:    1D57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S73:    1DCB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S74:    1E41 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S75:    1EC7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S76:    1F3B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S77:    1FB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S78:    202B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S79:    20AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S80:    212F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S81:    21B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S82:    2233 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S83:    22AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S84:    2323 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S85:    2399 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S86:    240F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S87:    2483 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S88:    24F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S89:    256B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S90:    25DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S91:    2653 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S92:    26C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S93:    273B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S94:    27AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S95:    2825 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S96:    289B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S97:    2911 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S98:    2989 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S99:    2A01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S100:   2A73 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S101:   2AE5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S102:   2B5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S103:   2BDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S104:   2C59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S105:   2CDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S106:   2D67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S107:   2DF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S108:   2E67 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S109:   2EDD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S110:   2F59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S111:   2FD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S112:   3055 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S113:   30DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S114:   3163 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S115:   31F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S116:   3283 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S117:   3307 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S118:   3391 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S119:   341D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S120:   34AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S121:   3537 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S122:   35D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S123:   3659 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S124:   36EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S125:   3787 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S126:   3821 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S127:   38C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S128:   3969 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S129:   39ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S130:   3A79 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S131:   3AFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S132:   3B87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S133:   3C17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S134:   3CB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S135:   3D5B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S136:   3E01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S137:   3E99 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S138:   3F37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S139:   3FEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S140:   40A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S141:   4139 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S142:   41C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S143:   4247 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S144:   42C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S145:   4343 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S146:   43C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S147:   4437 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S148:   44AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S149:   4523 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S150:   4599 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S151:   461B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S152:   46AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S153:   4741 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S154:   47EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S155:   489D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S156:   4965 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S157:   49F7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4A02 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4C00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4C00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
BUFFER:             4D00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VARS:               4E00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4ED0 DEFINED AT LINE 18 IN ram.asm
RST08:              4ED0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4ED2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4ED4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4ED6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4ED8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4EDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4EDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4EDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4EE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4EE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4EE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4EE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2373 IN MAIN.asm
VDATAWIDTH:         4EE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
VNUMBASE:           4EE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
VTIBPTR:            4EEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
VBUFPTR:            4EEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
VNEXT:              4EEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2385 IN MAIN.asm
VHEAPPTR:           4EF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
VRECUR:             4EF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
VDEFINE:            4EF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           4EF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
VPOINTER:           4EF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
VREMAIN:            4EFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
VSAVEDIP:           4EFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
VSAVEDSP:           4EFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
VSAVEDNEXT:         4F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
VSAVEDBP:           4F02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
VTEMP1:             4F04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
VTEMP2:             4F06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
VTEMP3:             4F08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
VLASTDEF:           4F0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4F0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4F0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
HEAP:               4F22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
