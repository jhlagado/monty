0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 8B 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   16 0A                  DW   next   ; g nNext
0186   00 40                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ \
0220   85                     DB   lsb(nop_)   ; SP
0221   3C                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   44                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   85                     DB   lsb(nop_)   ; )
022A   39                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4D                     DB   lsb(comma_)   ; ,
022D   53                     DB   lsb(minus_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   41                     DB   lsb(num_)   ; 0
0231   41                     DB   lsb(num_)   ; 1
0232   41                     DB   lsb(num_)   ; 2
0233   41                     DB   lsb(num_)   ; 3
0234   41                     DB   lsb(num_)   ; 4
0235   41                     DB   lsb(num_)   ; 5
0236   41                     DB   lsb(num_)   ; 6
0237   41                     DB   lsb(num_)   ; 7
0238   41                     DB   lsb(num_)   ; 8
0239   41                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(colon_)   ; :
023B   24                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   85                     DB   lsb(nop_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4A                     DB   lsb(caret_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   47                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                ADDR_:       
0303   C3 A2 03               JP   addr   
0306                AND_:        
0306   C3 AE 03               JP   and   
0309                ARG_:        
0309   C3 D3 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 0A 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 3C 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 58 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 A6 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 CF 04               JP   block   
031B                BLOCKEND_:      
031B   C3 38 05               JP   blockEnd   
031E                CHAR_:       
031E   C3 8D 05               JP   char   
0321                COMMAND_:      
0321   C3 F1 07               JP   command   
0324                SEMICOLON_:      
0324   C3 6A 07               JP   semicolon   
0327                DOT_:        
0327   C3 C2 05               JP   dot   
032A                REMAIN_:      
032A   C3 64 07               JP   remain   
032D                COLON_:      
032D   C3 6E 08               JP   colon   
0330                IDENTU_:      
0330   C3 E8 06               JP   identU   
0333                IDENTL_:      
0333   C3 ED 06               JP   identL   
0336                IF_:         
0336   C3 FF 06               JP   if   
0339                MUL_:        
0339   C3 18 07               JP   mul   
033C                NOT_:        ; logical invert, any non zero value
033C   21 00 00               LD   hl,0   ; is considered true
033F   18 20                  JR   eq1   
0341                NUM_:        
0341   C3 34 07               JP   num   
0344                HEXNUM_:      
0344   C3 CB 06               JP   hexnum   
0347                OR_:         
0347   C3 B9 03               JP   or   
034A                CARET_:      
034A   C3 26 06               JP   caret   
034D                COMMA_:      
034D   E1                     POP   hl   
034E   DD E9                  JP   (ix)   
0350                STRING_:      
0350   C3 A9 07               JP   string   
0353                MINUS_:      
0353   C3 D1 07               JP   minus   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 BE 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 05 06               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 96 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 86 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 0D 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 12 06               JP   lessthan   
0382                DIV_:        
0382   C3 A4 05               JP   div   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                             ;*******************************************************************
0387                             ; word operators
0387                             ;*******************************************************************
0387                PLUS:        
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 06                  JR   nz,add1   
038D   E1                     POP   hl   
038E   E5                     PUSH   hl   ; return pre-incremented value
038F   23                     INC   hl   
0390   C3 C0 04               JP   assign0   
0393                ADD1:        
0393   0B                     DEC   bc   
0394   D1                     POP   de   ; second term
0395   E1                     POP   hl   ; first term
0396   19                     ADD   hl,de   
0397                ADD3:        
0397   03                     INC   bc   
0398   0A                     LD   a,(bc)   
0399   FE 3D                  CP   "="   ; += add to variable
039B   CA C0 04               JP   z,assign0   
039E   E5                     PUSH   hl   
039F   0B                     DEC   bc   
03A0   DD E9                  JP   (ix)   
03A2                             ; -- ptr
03A2                ADDR:        
03A2   2A F0 3D               LD   hl,(vPointer)   
03A5   E5                     PUSH   hl   
03A6   21 F0 3D               LD   hl,vPointer   
03A9   22 F0 3D               LD   (vPointer),hl   
03AC   DD E9                  JP   (ix)   
03AE                AND:         
03AE   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   A5                     AND   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   A4                     AND   h   
03B5                AND1:        
03B5   67                     LD   h,a   
03B6   C3 97 03               JP   add3   
03B9                OR:          
03B9   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BA   E1                     POP   hl   
03BB   7B                     LD   a,e   
03BC   B5                     OR   l   
03BD   6F                     LD   l,a   
03BE   7A                     LD   a,d   
03BF   B4                     OR   h   
03C0   18 F3                  JR   and1   
03C2                XOR:         
03C2   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C3                XOR1:        
03C3   E1                     POP   hl   
03C4   7B                     LD   a,e   
03C5   AD                     XOR   l   
03C6   6F                     LD   l,a   
03C7   7A                     LD   a,d   
03C8   AC                     XOR   h   
03C9   67                     LD   h,a   
03CA   E5                     PUSH   hl   
03CB   DD E9                  JP   (ix)   
03CD                INVERT:      ; Bitwise INVert the top member of the stack
03CD   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D0   C3 C3 03               JP   xor1   
03D3                             ; $a .. $z
03D3                             ; -- value
03D3                             ; returns value of arg
03D3                ARG:         
03D3   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D6   FD 56 05               LD   d,(iy+5)   
03D9   EB                     EX   de,hl   
03DA   7D                     LD   a,l   ; arg_list* == null, skip
03DB   B4                     OR   h   
03DC   28 1C                  JR   z,arg0a   
03DE   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DF   2B                     DEC   hl   
03E0   7E                     LD   a,(hl)   
03E1   23                     INC   hl   
03E2   23                     INC   hl   
03E3   B7                     OR   a   
03E4   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E6   5F                     LD   e,a   ; e = a = num_args
03E7   03                     INC   bc   ; a = next char = arg_name
03E8   0A                     LD   a,(bc)   
03E9   C5                     PUSH   bc   ; save IP
03EA   43                     LD   b,e   ; b = e = num_args
03EB   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EE   FD 56 03               LD   d,(iy+3)   
03F1                ARG0:        
03F1   1B                     DEC   de   ; a = arg_name, de = next arg*
03F2   1B                     DEC   de   
03F3   BE                     CP   (hl)   
03F4   28 09                  JR   z,arg1   
03F6   23                     INC   hl   ; hl = next arg_list*
03F7   10 F8                  DJNZ   arg0   
03F9   C1                     POP   bc   ; no match, restore IP
03FA                ARG0A:       
03FA   11 00 00               LD   de,0   ; return 0
03FD   18 08                  JR   arg1a   
03FF                ARG1:        
03FF   C1                     POP   bc   ; restore IP
0400   EB                     EX   de,hl   ; hl = arg*
0401   22 F0 3D               LD   (vPointer),hl   ; store arg* in setter
0404   5E                     LD   e,(hl)   
0405   23                     INC   hl   
0406   56                     LD   d,(hl)   ; de = arg
0407                ARG1A:       
0407   D5                     PUSH   de   ; push arg
0408   DD E9                  JP   (ix)   
040A                             ; arg_list - parses input (ab:c)
040A                             ; names after the : represent uninitialised locals
040A                             ; return values are the state of the stack after the block ends
040A                ARG_LIST:      
040A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040D   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
0410   23                     INC   hl   ; skip length field to start
0411   23                     INC   hl   
0412   E5                     PUSH   hl   ; save start of arg_list
0413   03                     INC   bc   ; point to next char
0414                ARG_LIST1:      
0414   0A                     LD   a,(bc)   
0415   FE 29                  CP   ")"   ; ) is the arg_list terminator
0417   28 12                  JR   z,arg_list4   
0419   FE 3A                  CP   ":"   
041B   20 03                  JR   nz,arg_list2   
041D   14                     INC   d   ; non zero value local count acts as flag
041E   20 08                  JR   nz,arg_list3   
0420                ARG_LIST2:      
0420   77                     LD   (hl),a   
0421   23                     INC   hl   
0422   1C                     INC   e   ; increase arg count
0423   AF                     XOR   a   
0424   B2                     OR   d   
0425   28 01                  JR   z,arg_list3   
0427   14                     INC   d   ; if d > 0 increase local count
0428                ARG_LIST3:      
0428   03                     INC   bc   ; point to next char
0429   18 E9                  JR   arg_list1   
042B                ARG_LIST4:      
042B   AF                     XOR   a   
042C   B2                     OR   d   
042D   28 01                  JR   z,arg_list5   
042F   15                     DEC   d   ; remove initial inc
0430                ARG_LIST5:      
0430   23                     INC   hl   
0431   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0434   E1                     POP   hl   ; hl = start of arg_list
0435   E5                     PUSH   hl   ; return start of string
0436   2B                     DEC   hl   ; write length bytes to length field at start - 2
0437   72                     LD   (hl),d   
0438   2B                     DEC   hl   
0439   73                     LD   (hl),e   
043A   DD E9                  JP   (ix)   
043C                ARRBEGIN:      
043C   11 00 00               LD   de,0   ; create stack frame
043F   D5                     PUSH   de   ; push null for IP
0440   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0443   FD 56 05               LD   d,(iy+5)   ; 
0446   D5                     PUSH   de   ; 
0447   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
044A   FD 56 03               LD   d,(iy+3)   ; 
044D   D5                     PUSH   de   ; 
044E   FD E5                  PUSH   iy   ; push BP
0450   FD 21 00 00            LD   iy,0   ; BP = SP
0454   FD 39                  ADD   iy,sp   
0456   DD E9                  JP   (ix)   
0458                ARREND:      
0458   FD 54                  LD   d,iyh   ; de = BP
045A   FD 5D                  LD   e,iyl   
045C   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
0460   62 6B                  LD   hl,de   ; hl = de = BP
0462   B7                     OR   a   
0463   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0465   CB 3C                  SRL   h   ; 
0467   CB 1D                  RR   l   
0469   44 4D                  LD   bc,hl   ; bc = count
046B   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
046E   71                     LD   (hl),c   ; write num items in length word
046F   23                     INC   hl   
0470   70                     LD   (hl),b   
0471   23                     INC   hl   ; hl = array[0], bc = count
0472                             ; de = BP, hl = array[0], bc = count
0472                ARREND1:      
0472   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0475   77                     LD   (hl),a   ; write lsb of array item
0476   23                     INC   hl   ; move to msb of array item
0477   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
047A   3D                     DEC   a   
047B   28 05                  JR   z,arrEnd2   
047D   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0480   77                     LD   (hl),a   ; write msb of array item
0481   23                     INC   hl   ; move to next word in array
0482                ARREND2:      
0482   FD 2B                  DEC   iy   ; move to next word on stack
0484   FD 2B                  DEC   iy   
0486   0B                     DEC   bc   ; dec items count
0487   79                     LD   a,c   ; if not zero loop
0488   B0                     OR   b   
0489   20 E7                  JR   nz,arrEnd1   
048B   EB                     EX   de,hl   ; de = end of array, hl = BP
048C   F9                     LD   sp,hl   ; sp = BP
048D   E1                     POP   hl   ; de = end of array, hl = old BP
048E   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048F   FD 62                  LD   iyh,d   
0491   FD 6B                  LD   iyl,e   
0493   D1                     POP   de   ; pop arg_list (discard)
0494   D1                     POP   de   ; pop first_arg* (discard)
0495   D1                     POP   de   ; pop IP (discard)
0496   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
049A   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
049D   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
04A1   13                     INC   de   ; de = array[0]
04A2   13                     INC   de   
04A3   D5                     PUSH   de   ; return array[0]
04A4   DD E9                  JP   (ix)   
04A6                             ; index of an array, based on vDataWidth
04A6                             ; array num -- value    ; also sets vPointer to address
04A6                ARRINDEX:      
04A6   E1                     POP   hl   ; hl = index
04A7   D1                     POP   de   ; de = array
04A8   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
04AB   3D                     DEC   a   
04AC   28 01                  JR   z,arrIndex1   
04AE                ARRINDEX0:      
04AE   29                     ADD   hl,hl   ; if data width = 2 then double
04AF                ARRINDEX1:      
04AF   19                     ADD   hl,de   ; add addr
04B0   22 F0 3D               LD   (vPointer),hl   ; store address in setter
04B3   16 00                  LD   d,0   
04B5   5E                     LD   e,(hl)   
04B6   B7                     OR   a   ; check data width again
04B7   28 02                  JR   z,arrIndex2   
04B9   23                     INC   hl   
04BA   56                     LD   d,(hl)   
04BB                ARRINDEX2:      
04BB   D5                     PUSH   de   
04BC   DD E9                  JP   (ix)   
04BE                             ; value _oldValue --            ; uses address in vPointer
04BE                ASSIGN:      
04BE   E1                     POP   hl   ; discard last accessed value
04BF   E1                     POP   hl   ; hl = new value
04C0                ASSIGN0:      
04C0   EB                     EX   de,hl   ; de = new value
04C1                ASSIGNX:      
04C1   2A F0 3D               LD   hl,(vPointer)   
04C4   73                     LD   (hl),e   
04C5   3A E6 3D               LD   a,(vDataWidth)   
04C8   3D                     DEC   a   ; is it byte?
04C9   28 02                  JR   z,assign1   
04CB   23                     INC   hl   
04CC   72                     LD   (hl),d   
04CD                ASSIGN1:      
04CD   DD E9                  JP   (ix)   
04CF                BLOCK:       
04CF   C5                     PUSH   bc   ; return pointer to first { of block
04D0   03                     INC   bc   
04D1   16 01                  LD   d,1   ; nesting: count first parenthesis
04D3                BLOCK1:      ; Skip to end of definition
04D3   0A                     LD   a,(bc)   ; Get the next character
04D4   03                     INC   bc   ; Point to next character
04D5   FE 21                  CP   " " + 1   ; ignore whitespace
04D7   38 FA                  JR   c,block1   
04D9   FE 29                  CP   ")"   
04DB   28 2D                  JR   z,block4   
04DD   FE 7D                  CP   "}"   
04DF   28 29                  JR   z,block4   
04E1   FE 5D                  CP   "]"   
04E3   28 25                  JR   z,block4   
04E5   FE 28                  CP   "("   
04E7   28 16                  JR   z,block2   
04E9   FE 7B                  CP   "{"   
04EB   28 12                  JR   z,block2   
04ED   FE 5B                  CP   "["   
04EF   28 0E                  JR   z,block2   
04F1   FE 27                  CP   "'"   
04F3   28 0D                  JR   z,block3   
04F5   FE 60                  CP   "`"   
04F7   28 09                  JR   z,block3   
04F9   FE 22                  CP   $22   
04FB   28 05                  JR   z,block3   
04FD   18 D4                  JR   block1   
04FF                BLOCK2:      
04FF   14                     INC   d   
0500   18 D1                  JR   block1   
0502                BLOCK3:      
0502   3E 80                  LD   a,$80   
0504   AA                     XOR   d   
0505   47                     LD   b,a   
0506   20 CB                  JR   nz,block1   
0508   18 03                  JR   block5   
050A                BLOCK4:      
050A   15                     DEC   d   
050B   20 C6                  JR   nz,block1   ; get the next element
050D                BLOCK5:      
050D   60 69                  LD   hl,bc   ; hl = IP
050F   11 00 40               LD   de,HEAP   ; is IP pointing to object in heap
0512   B7                     OR   a   ; IP - HEAP
0513   ED 52                  SBC   hl,de   
0515   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0517   28 1C                  JR   z,block6   
0519   60 69                  LD   hl,bc   ; hl = IP
051B   D1                     POP   de   ; de = block*
051C   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
0520   B7                     OR   a   ; bc = size
0521   ED 52                  SBC   hl,de   
0523   44 4D                  LD   bc,hl   
0525   EB                     EX   de,hl   ; hl = block* de = heap*
0526   ED 5B EC 3D            LD   de,(vHeapPtr)   
052A   D5                     PUSH   de   ; return hblock*
052B   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052D   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
0531   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0535                BLOCK6:      
0535   0B                     DEC   bc   ; balanced, exit
0536   DD E9                  JP   (ix)   
0538                BLOCKEND:      
0538   D9                     EXX      ; de" = oldBP bc" = oldIP
0539   FD 5E 00               LD   e,(iy+0)   
053C   FD 56 01               LD   d,(iy+1)   
053F   FD 4E 06               LD   c,(iy+6)   
0542   FD 46 07               LD   b,(iy+7)   
0545   D9                     EXX      
0546   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0549   FD 56 03               LD   d,(iy+3)   
054C   EB                     EX   de,hl   
054D   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0550   FD 56 01               LD   d,(iy+1)   
0553   13                     INC   de   ; for carry flag <=
0554   B7                     OR   a   
0555   ED 52                  SBC   hl,de   
0557   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0559   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055B   FD 5D                  LD   e,iyl   
055D   21 08 00               LD   hl,8   
0560   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0561   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0562   18 0C                  JR   blockEnd2   
0564                BLOCKEND1:      ; same scope
0564   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0567   FD 56 03               LD   d,(iy+3)   
056A   EB                     EX   de,hl   
056B   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056D   FD 5D                  LD   e,iyl   
056F   EB                     EX   de,hl   
0570                BLOCKEND2:      
0570   44 4D                  LD   bc,hl   ; bc = hl = BP
0572   B7                     OR   a   ; hl = BP - SP = count
0573   ED 72                  SBC   hl,sp   
0575   7D                     LD   a,l   
0576   B4                     OR   h   
0577   28 09                  JR   z,blockEnd3   
0579   C5                     PUSH   bc   ; bc = count, hl = BP
057A   44 4D                  LD   bc,hl   
057C   E1                     POP   hl   
057D   2B                     DEC   hl   ; hl = BP-1
057E   1B                     DEC   de   ; de = args*-1
057F   ED B8                  LDDR      
0581   13                     INC   de   
0582                BLOCKEND3:      
0582   EB                     EX   de,hl   ; hl = new tos
0583   F9                     LD   sp,hl   ; sp = new tos
0584   D9                     EXX      ; bc = IP, iy = oldBP
0585   D5                     PUSH   de   
0586   C5                     PUSH   bc   
0587   D9                     EXX      
0588   C1                     POP   bc   
0589   FD E1                  POP   iy   
058B   DD E9                  JP   (ix)   
058D                CHAR:        
058D   21 00 00               LD   hl,0   ; if "" is empty or null
0590                CHAR1:       
0590   03                     INC   bc   ; point to next char
0591   0A                     LD   a,(bc)   
0592   FE 27                  CP   "'"   ; ' is the terminator
0594   28 09                  JR   z,char3   
0596   FE 5C                  CP   $5c   ; \ is the escape
0598   20 02                  JR   nz,char2   
059A   03                     INC   bc   
059B   0A                     LD   a,(bc)   
059C                CHAR2:       
059C   6F                     LD   l,a   
059D   18 F1                  JR   char1   
059F                CHAR3:       
059F   E5                     PUSH   hl   
05A0   DD E9                  JP   (ix)   
05A2                COMMA:       
05A2   DD E9                  JP   (ix)   
05A4                DIV:         
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6   FE 5C                  CP   $5C   
05A8   CA 65 08               JP   z,comment   
05AB   FE 41                  CP   "A"   
05AD   D2 F1 07               JP   nc,command   
05B0   0B                     DEC   bc   
05B1   D1                     POP   de   
05B2   E1                     POP   hl   
05B3   C5                     PUSH   bc   ; preserve the IP
05B4   44 4D                  LD   bc,hl   
05B6   CD EC 05               CALL   divide   
05B9   EB                     EX   de,hl   
05BA   ED 53 F6 3D            LD   (vRemain),de   
05BE   C1                     POP   bc   
05BF   C3 97 03               JP   add3   
05C2                DOT:         
05C2   E1                     POP   hl   
05C3   03                     INC   bc   
05C4   0A                     LD   a,(bc)   
05C5   FE 68                  CP   "h"   
05C7   20 05                  JR   nz,dot1   
05C9   CD 1A 09               CALL   prthex   
05CC   18 17                  JR   dot4   
05CE                DOT1:        
05CE   FE 73                  CP   "s"   
05D0   20 05                  JR   nz,dot2   
05D2   CD 3D 09               CALL   prtstr   
05D5   18 0E                  JR   dot4   
05D7                DOT2:        
05D7   FE 63                  CP   "c"   
05D9   20 06                  JR   nz,dot3   
05DB   7D                     LD   a,l   
05DC   CD 85 00               CALL   putchar   
05DF   18 04                  JR   dot4   
05E1                DOT3:        
05E1   0B                     DEC   bc   
05E2   CD D2 08               CALL   prtdec   
05E5                DOT4:        
05E5   3E 20                  LD   a," "   
05E7   CD 85 00               CALL   putchar   
05EA   DD E9                  JP   (ix)   
05EC                             ; division subroutine.
05EC                             ; bc: divisor, de: dividend, hl: remainder
05EC                DIVIDE:      
05EC   21 00 00               LD   hl,0   ; zero the remainder
05EF   3E 10                  LD   a,16   ; loop counter
05F1                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05F1   CB 21                  SLA   c   
05F3   CB 10                  RL   b   
05F5   ED 6A                  ADC   hl,hl   
05F7   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05F9   38 03                  JR   c,divide2   
05FB   0C                     INC   c   
05FC   18 01                  JR   divide3   
05FE                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05FE   19                     ADD   hl,de   
05FF                DIVIDE3:      
05FF   3D                     DEC   a   
0600   20 EF                  JR   nz,divide1   
0602   50 59                  LD   de,bc   ; result from bc to de
0604   C9                     RET      
0605                             ; hl = value1, de = value2
0605                             ; hl = result
0605                EQUALS:      
0605   B7                     OR   a   ; reset the carry flag
0606   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0608   28 10                  JR   z,true1   
060A   C3 20 06               JP   false1   
060D                             ; hl = value1 de = value2
060D                             ; hl = result
060D                LESSTHANEQ:      
060D   B7                     OR   a   
060E   ED 52                  SBC   hl,de   
0610   18 05                  JR   lessthan1   
0612                             ; hl = value1 de = value2
0612                             ; hl = result
0612                LESSTHAN:      
0612   B7                     OR   a   
0613   ED 52                  SBC   hl,de   
0615   28 09                  JR   z,false1   
0617                LESSTHAN1:      
0617   FA 20 06               JP   m,false1   
061A                TRUE1:       
061A   21 FF FF               LD   hl,TRUE   
061D   E5                     PUSH   hl   
061E   DD E9                  JP   (ix)   
0620                NULL1:       
0620                FALSE1:      
0620   21 00 00               LD   hl,FALSE   
0623   E5                     PUSH   hl   
0624   DD E9                  JP   (ix)   
0626                             ; execute a block of code which ends with }
0626                             ; creates a root scope if BP == stack
0626                             ; else uses outer scope
0626                CARET:       
0626                GO:          
0626   D1                     POP   de   ; de = block*
0627                GO1:         
0627   7B                     LD   a,e   ; if block* == null, exit
0628   B2                     OR   d   
0629   20 02                  JR   nz,go2   
062B   DD E9                  JP   (ix)   
062D                GO2:         
062D   1A                     LD   a,(de)   
062E   FE 7B                  CP   "{"   
0630   C2 6F 06               JP   nz,goFunc   
0633                GOBLOCK:      
0633   13                     INC   de   
0634   1A                     LD   a,(de)   
0635   1B                     DEC   de   
0636   FE 3A                  CP   ":"   
0638   20 02                  JR   nz,goBlockX1   
063A   13                     INC   de   
063B   D5                     PUSH   de   
063C                GOBLOCKX1:      
063C   ED 53 F8 3D            LD   (vTemp1),de   ; save de
0640   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0643   FD 54                  LD   d,iyh   
0645   FD 5D                  LD   e,iyl   
0647   B7                     OR   a   ; if stack* == BP then this is the root_scope
0648   ED 52                  SBC   hl,de   
064A   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de
064E   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
064F   B4                     OR   h   
0650   3E 00                  LD   a,0   
0652   28 6C                  JR   z,goFunc8   
0654   C5                     PUSH   bc   ; push IP
0655   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0658   FD 46 05               LD   b,(iy+5)   
065B   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
065E   FD 66 03               LD   h,(iy+3)   
0661                GOBLOCK1:      
0661   C5                     PUSH   bc   ; arg_list*
0662   E5                     PUSH   hl   ; first_arg*
0663   FD E5                  PUSH   iy   ; push BP
0665   FD 21 00 00            LD   iy,0   ; BP = SP
0669   FD 39                  ADD   iy,sp   
066B   42 4B                  LD   bc,de   ; bc = de = block*-1
066D   DD E9                  JP   (ix)   
066F                GOFUNC:      ; execute function
066F   EB                     EX   de,hl   ; hl = func*
0670   5E                     LD   e,(hl)   ; de = partial_array*
0671   23                     INC   hl   
0672   56                     LD   d,(hl)   
0673   23                     INC   hl   
0674   7B                     LD   a,e   ; if partial_array* == null skip
0675   B2                     OR   d   
0676   28 21                  JR   z,goFunc3   
0678   ED 43 F8 3D            LD   (vTemp1),bc   
067C   22 FA 3D               LD   (vTemp2),hl   ; save bc,hl
067F   EB                     EX   de,hl   ; hl = partial_array*
0680   2B                     DEC   hl   ; bc = count
0681   46                     LD   b,(hl)   
0682   2B                     DEC   hl   
0683   4E                     LD   c,(hl)   
0684   23                     INC   hl   ; push each item on stack
0685   23                     INC   hl   
0686   18 06                  JR   goFunc2   
0688                GOFUNC1:      
0688   5E                     LD   e,(hl)   ; de = partial item
0689   23                     INC   hl   
068A   56                     LD   d,(hl)   
068B   23                     INC   hl   
068C   D5                     PUSH   de   ; push on stack
068D   0B                     DEC   bc   
068E                GOFUNC2:      
068E   79                     LD   a,c   ; if count != 0 then loop
068F   B0                     OR   b   
0690   20 F6                  JR   nz,goFunc1   
0692   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore bc
0696   2A FA 3D               LD   hl,(vTemp2)   ; restore hl
0699                GOFUNC3:      
0699   5E                     LD   e,(hl)   ; de = block*
069A   23                     INC   hl   
069B   56                     LD   d,(hl)   
069C   23                     INC   hl   
069D   ED 53 F8 3D            LD   (vTemp1),de   ; save block*
06A1   5E                     LD   e,(hl)   ; de = arg_list*
06A2   23                     INC   hl   
06A3   56                     LD   d,(hl)   
06A4   23                     INC   hl   
06A5   EB                     EX   de,hl   ; hl = arg_list*
06A6   ED 5B F8 3D            LD   de,(vTemp1)   ; restore de = block*
06AA   7D                     LD   a,l   ; if arg_list* == null a = 0
06AB   B4                     OR   h   
06AC   20 03                  JR   nz,goFunc4   
06AE   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06AF   18 0F                  JR   goFunc8   
06B1                GOFUNC4:      ; allocate locals
06B1   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06B2   7E                     LD   a,(hl)   
06B3   18 03                  JR   goFunc6   
06B5                GOFUNC5:      ; loop
06B5   3B                     DEC   sp   
06B6   3B                     DEC   sp   
06B7   3D                     DEC   a   
06B8                GOFUNC6:      
06B8   B7                     OR   a   
06B9   20 FA                  JR   nz,goFunc5   ; end loop
06BB                GOFUNC7:      
06BB   2B                     DEC   hl   ; a = num_args* x 2
06BC   7E                     LD   a,(hl)   
06BD   23                     INC   hl   
06BE   23                     INC   hl   
06BF   87                     ADD   a,a   ; a *= 2
06C0                GOFUNC8:      
06C0   C5                     PUSH   bc   ; push IP
06C1   44 4D                  LD   bc,hl   
06C3   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06C6   85                     ADD   a,l   
06C7   6F                     LD   l,a   
06C8   39                     ADD   hl,sp   
06C9   18 96                  JR   goBlock1   
06CB                HEXNUM:      
06CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
06CE                HEXNUM1:      
06CE   03                     INC   bc   
06CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
06D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
06D2   28 02                  JR   z,hexnum2   ; no a decimal
06D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
06D6                HEXNUM2:      
06D6   D6 30                  SUB   $30   ; form decimal digit
06D8   DA 56 07               JP   c,num2   
06DB   FE 10                  CP   $0F+1   
06DD   D2 56 07               JP   nc,num2   
06E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06E1   29                     ADD   hl,hl   ; 4X
06E2   29                     ADD   hl,hl   ; 8X
06E3   29                     ADD   hl,hl   ; 16X
06E4   85                     ADD   a,l   ; add into bottom of hl
06E5   6F                     LD   l,a   
06E6   18 E6                  JR   hexnum1   
06E8                IDENTU:      
06E8   0A                     LD   a,(bc)   ; a = identifier char
06E9   D6 41                  SUB   "A"   ; "A" = 0
06EB   18 05                  JR   ident1   
06ED                IDENTL:      
06ED   0A                     LD   a,(bc)   
06EE   D6 61                  SUB   "a"   
06F0   C6 1A                  ADD   a,26   
06F2                IDENT1:      
06F2   87                     ADD   a,a   ; l = a * 2
06F3   6F                     LD   l,a   
06F4   26 3D                  LD   h,msb(vars)   
06F6   22 F0 3D               LD   (vPointer),hl   ; store address in setter
06F9   5E                     LD   e,(hl)   
06FA   23                     INC   hl   
06FB   56                     LD   d,(hl)   
06FC   D5                     PUSH   de   
06FD   DD E9                  JP   (ix)   
06FF                             ; if
06FF                             ; condition then -- value
06FF                IF:          
06FF   03                     INC   bc   
0700   0A                     LD   a,(bc)   
0701   FE 3F                  CP   "?"   
0703   28 06                  JR   z,ifte   
0705   0B                     DEC   bc   
0706   11 00 00               LD   de,0   ; NUL pointer for else
0709   18 01                  JR   ifte1   
070B                             ; ifte
070B                             ; condition then else -- value
070B                IFTE:        
070B   D1                     POP   de   ; de = else
070C                IFTE1:       
070C   E1                     POP   hl   ; hl = then
070D   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
070E   7C                     LD   a,h   
070F   B5                     OR   l   
0710   E1                     POP   hl   ; hl = then
0711   CA 27 06               JP   z,go1   ; if z de = else
0714   EB                     EX   de,hl   ; condition = false, de = then
0715   C3 27 06               JP   go1   
0718                MUL:         
0718   D1                     POP   de   ; get first value
0719   E1                     POP   hl   
071A                MUL2:        
071A   C5                     PUSH   bc   ; Preserve the IP
071B   44 4D                  LD   bc,hl   ; bc = 2nd value
071D   21 00 00               LD   hl,0   
0720   3E 10                  LD   a,16   
0722                MUL3:        
0722   29                     ADD   hl,hl   
0723   CB 13                  RL   e   
0725   CB 12                  RL   d   
0727   30 04                  JR   nc,$+6   
0729   09                     ADD   hl,bc   
072A   30 01                  JR   nc,$+3   
072C   13                     INC   de   
072D   3D                     DEC   a   
072E   20 F2                  JR   nz,mul3   
0730   C1                     POP   bc   ; Restore the IP
0731   C3 97 03               JP   add3   
0734                NUM:         
0734   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0737   0A                     LD   a,(bc)   ; Get numeral or -
0738   FE 2D                  CP   "-"   
073A   20 01                  JR   nz,num0   
073C   03                     INC   bc   ; move to next char, no flags affected
073D                NUM0:        
073D   08                     EX   af,af'   ; save zero flag = 0 for later
073E                NUM1:        
073E   0A                     LD   a,(bc)   ; read digit
073F   D6 30                  SUB   "0"   ; less than 0?
0741   38 13                  JR   c,num2   ; not a digit, exit loop
0743   FE 0A                  CP   10   ; greater that 9?
0745   30 0F                  JR   nc,num2   ; not a digit, exit loop
0747   03                     INC   bc   ; inc IP
0748   54 5D                  LD   de,hl   ; multiply hl * 10
074A   29                     ADD   hl,hl   
074B   29                     ADD   hl,hl   
074C   19                     ADD   hl,de   
074D   29                     ADD   hl,hl   
074E   85                     ADD   a,l   ; add digit in a to hl
074F   6F                     LD   l,a   
0750   3E 00                  LD   a,0   
0752   8C                     ADC   a,h   
0753   67                     LD   h,a   
0754   18 E8                  JR   num1   
0756                NUM2:        
0756   0B                     DEC   bc   
0757   08                     EX   af,af'   ; restore zero flag
0758   20 07                  JR   nz,num3   
075A   EB                     EX   de,hl   ; negate the value of hl
075B   21 00 00               LD   hl,0   
075E   B7                     OR   a   ; jump to sub2
075F   ED 52                  SBC   hl,de   
0761                NUM3:        
0761   E5                     PUSH   hl   ; Put the number on the stack
0762   DD E9                  JP   (ix)   ; and process the next character
0764                REMAIN:      
0764   2A F6 3D               LD   hl,(vRemain)   
0767   E5                     PUSH   hl   
0768   DD E9                  JP   (ix)   
076A                             ; arg_list* block* -- ptr
076A                SEMICOLON:      
076A   D1                     POP   de   ; de = block* hl = heap*
076B   2A EC 3D               LD   hl,(vHeapPtr)   
076E   AF                     XOR   a   
076F   77                     LD   (hl),a   ; compile null partial_array*
0770   23                     INC   hl   
0771   77                     LD   (hl),a   
0772   23                     INC   hl   
0773   73                     LD   (hl),e   ; compile block*
0774   23                     INC   hl   
0775   72                     LD   (hl),d   
0776   23                     INC   hl   
0777   D1                     POP   de   ; de = block*
0778   73                     LD   (hl),e   ; compile arg_list*
0779   23                     INC   hl   
077A   72                     LD   (hl),d   
077B   23                     INC   hl   
077C   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
0780   D5                     PUSH   de   
0781   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
0784   DD E9                  JP   (ix)   
0786                             ; shiftLeft
0786                             ; value count -- value2          shift left count places
0786                SHIFTLEFT:      
0786   50 59                  LD   de,bc   ; save IP
0788   C1                     POP   bc   ; bc = count
0789   41                     LD   b,c   ; b = loop counter
078A   E1                     POP   hl   
078B   04                     INC   b   ; test for counter=0 case
078C   18 01                  JR   shiftLeft2   
078E                SHIFTLEFT1:      
078E   29                     ADD   hl,hl   ; left shift hl
078F                SHIFTLEFT2:      
078F   10 FD                  DJNZ   shiftLeft1   
0791   E5                     PUSH   hl   
0792   42 4B                  LD   bc,de   ; restore IP
0794   DD E9                  JP   (ix)   
0796                             ; shiftRight
0796                             ; value count -- value2          shift left count places
0796                SHIFTRIGHT:      
0796   50 59                  LD   de,bc   ; save IP
0798   C1                     POP   bc   ; bc = count
0799   41                     LD   b,c   ; b = loop counter
079A   E1                     POP   hl   
079B   04                     INC   b   ; test for counter=0 case
079C   18 04                  JR   shiftRight2   
079E                SHIFTRIGHT1:      
079E   CB 3C                  SRL   h   ; right shift hl
07A0   CB 1D                  RR   l   
07A2                SHIFTRIGHT2:      
07A2   10 FA                  DJNZ   shiftRight1   
07A4   E5                     PUSH   hl   
07A5   42 4B                  LD   bc,de   ; restore IP
07A7   DD E9                  JP   (ix)   
07A9                             ; string
07A9                             ; -- ptr                        ; points to start of string chars,
07A9                             ; length is stored at start - 2 bytes
07A9                STRING:      
07A9   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
07AC   23                     INC   hl   ; skip length field to start
07AD   23                     INC   hl   
07AE   E5                     PUSH   hl   ; save start of string
07AF   03                     INC   bc   ; point to next char
07B0   18 03                  JR   string2   
07B2                STRING1:      
07B2   77                     LD   (hl),a   
07B3   23                     INC   hl   ; increase count
07B4   03                     INC   bc   ; point to next char
07B5                STRING2:      
07B5   0A                     LD   a,(bc)   
07B6   FE 22                  CP   DQUOTE   ; " is the string terminator
07B8   20 F8                  JR   nz,string1   
07BA   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07BC   20 F4                  JR   nz,string1   
07BE   AF                     XOR   a   ; write NUL to terminate string
07BF   77                     LD   (hl),a   ; hl = end of string
07C0   23                     INC   hl   
07C1   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07C4   2B                     DEC   hl   ; hl = end of string without terminator
07C5   D1                     POP   de   ; de = start of string
07C6   D5                     PUSH   de   ; return start of string
07C7   B7                     OR   a   ; hl = length bytes, de = start of string
07C8   ED 52                  SBC   hl,de   
07CA   EB                     EX   de,hl   
07CB   2B                     DEC   hl   ; write length bytes to length field at start - 2
07CC   72                     LD   (hl),d   
07CD   2B                     DEC   hl   
07CE   73                     LD   (hl),e   
07CF   DD E9                  JP   (ix)   
07D1                MINUS:       ; negative sign or subtract
07D1   03                     INC   bc   ; check if sign of a number
07D2   0A                     LD   a,(bc)   
07D3   0B                     DEC   bc   
07D4   FE 30                  CP   "0"   
07D6   38 05                  JR   c,sub   
07D8   FE 3A                  CP   "9"+1   
07DA   DA 41 03               JP   c,num_   
07DD                SUB:         ; Subtract the value 2nd on stack from top of stack
07DD   03                     INC   bc   
07DE   FE 2D                  CP   "-"   
07E0   20 06                  JR   nz,sub1   
07E2   E1                     POP   hl   
07E3   E5                     PUSH   hl   ; return the preincremented value
07E4   2B                     DEC   hl   
07E5   C3 C0 04               JP   assign0   
07E8                SUB1:        
07E8   0B                     DEC   bc   
07E9   D1                     POP   de   
07EA   E1                     POP   hl   
07EB   B7                     OR   a   
07EC   ED 52                  SBC   hl,de   
07EE   C3 97 03               JP   add3   
07F1                             ;*******************************************************************
07F1                             ; commands
07F1                             ; a contains command letter
07F1                             ; bc points to command letter
07F1                             ;*******************************************************************
07F1                COMMAND:      
07F1   FE 61                  CP   "a"   ; \a absolute
07F3   CA 38 08               JP   z,abs1   
07F6   FE 62                  CP   "b"   ; \x break
07F8   CA 81 08               JP   z,break   
07FB   FE 63                  CP   "c"   ; \c chars
07FD   CA 9B 08               JP   z,chars   
0800   FE 70                  CP   "p"   ; \p partial
0802   CA 45 08               JP   z,partial   
0805   FE 66                  CP   "f"   ; \f false
0807   CA 20 06               JP   z,false1   
080A   FE 69                  CP   "i"   ; \i input
080C   CA A3 08               JP   z,input   
080F   FE 6B                  CP   "k"   ; \k key
0811   CA AE 08               JP   z,key   
0814   FE 6E                  CP   "n"   ; \n numbers
0816   CA CA 08               JP   z,numbers   
0819   FE 6F                  CP   "o"   ; \o output
081B   CA B7 08               JP   z,output   
081E   FE 73                  CP   "s"   ; \s select
0820   CA C0 08               JP   z,select   
0823   FE 74                  CP   "t"   ; \t true
0825   CA 1A 06               JP   z,true1   
0828   FE 76                  CP   "v"   ; \v invert
082A   CA CD 03               JP   z,invert   
082D   FE 78                  CP   "x"   ; \x xor
082F   CA C2 03               JP   z,xor   
0832                ERROR1:      
0832   21 01 00               LD   hl,1   ; error 1: unknown command
0835   C3 2F 0A               JP   error   
0838                ABS1:        
0838   E1                     POP   hl   
0839   CB 7C                  BIT   7,h   
083B   C8                     RET   z   
083C   AF                     XOR   a   
083D   95                     SUB   l   
083E   6F                     LD   l,a   
083F   9F                     SBC   a,a   
0840   94                     SUB   h   
0841   67                     LD   h,a   
0842   E5                     PUSH   hl   
0843   DD E9                  JP   (ix)   
0845                             ; partial
0845                             ; array* func* -- func1*
0845                PARTIAL:      
0845   E1                     POP   hl   ; h1 = func*
0846   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
084A   ED 43 F8 3D            LD   (vTemp1),bc   ; save IP
084E   01 06 00               LD   bc,6   ; bc = count
0851   ED B0                  LDIR      ; clone func
0853   ED 4B F8 3D            LD   bc,(vTemp1)   ; restore IP
0857   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
085A   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
085E   D1                     POP   de   ; de = array*
085F   E5                     PUSH   hl   ; return partial_array*
0860   73                     LD   (hl),e   ; compile array*
0861   23                     INC   hl   
0862   72                     LD   (hl),d   
0863   DD E9                  JP   (ix)   
0865                COMMENT:      
0865   03                     INC   bc   ; point to next char
0866   0A                     LD   a,(bc)   
0867   FE 20                  CP   " "   ; terminate on any char less than SP
0869   30 FA                  JR   nc,comment   
086B   0B                     DEC   bc   
086C   DD E9                  JP   (ix)   
086E                COLON:       
086E   03                     INC   bc   
086F   0A                     LD   a,(bc)   
0870   FE 7D                  CP   "}"   
0872   CA 79 08               JP   z,loopEnd   
0875   0B                     DEC   bc   
0876   C3 32 08               JP   error1   
0879                LOOPEND:      
0879   FD 4E 08               LD   c,(iy+8)   ; get block* just under stack frame
087C   FD 46 09               LD   b,(iy+9)   
087F   DD E9                  JP   (ix)   
0881                BREAK:       
0881   E1                     POP   hl   
0882   7D                     LD   a,l   
0883   B4                     OR   h   
0884   28 02                  JR   z,break1   
0886   DD E9                  JP   (ix)   
0888                BREAK1:      
0888   FD 5D                  LD   e,iyl   ; get block* just under stack frame
088A   FD 54                  LD   d,iyh   
088C   21 08 00               LD   hl,8   
088F   19                     ADD   hl,de   
0890   23                     INC   hl   
0891   23                     INC   hl   
0892   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0895   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0898   C3 38 05               JP   blockEnd   
089B                CHARS:       
089B   21 01 00               LD   hl,1   
089E                CHARS1:      
089E   22 E6 3D               LD   (vDataWidth),hl   
08A1   DD E9                  JP   (ix)   
08A3                             ; Z80 port input
08A3                             ; port -- value
08A3                INPUT:       
08A3   E1                     POP   hl   
08A4   59                     LD   e,c   ; save IP
08A5   4D                     LD   c,l   
08A6   ED 68                  IN   l,(c)   
08A8   26 00                  LD   h,0   
08AA   4B                     LD   c,e   ; restore IP
08AB   E5                     PUSH   hl   
08AC   DD E9                  JP   (ix)   
08AE                KEY:         
08AE   CD 81 00               CALL   getchar   
08B1   26 00                  LD   h,0   
08B3   6F                     LD   l,a   
08B4   E5                     PUSH   hl   
08B5   DD E9                  JP   (ix)   
08B7                             ; Z80 port output
08B7                             ; value port --
08B7                OUTPUT:      
08B7   E1                     POP   hl   
08B8   59                     LD   e,c   ; save IP
08B9   4D                     LD   c,l   
08BA   E1                     POP   hl   
08BB   ED 69                  OUT   (c),l   
08BD   4B                     LD   c,e   ; restore IP
08BE   DD E9                  JP   (ix)   
08C0                             ; select
08C0                             ; index array -- value
08C0                SELECT:      
08C0   D1                     POP   de   ; de = array
08C1   E1                     POP   hl   ; hl = index
08C2   29                     ADD   hl,hl   ; if data width = 2 then double
08C3   19                     ADD   hl,de   ; add addr
08C4   5E                     LD   e,(hl)   
08C5   23                     INC   hl   
08C6   56                     LD   d,(hl)   
08C7   C3 27 06               JP   go1   
08CA                NUMBERS:      
08CA   21 02 00               LD   hl,2   
08CD   C3 9E 08               JP   chars1   
08D0                             ; 
08D0                             ; 
08D0                             ; 
08D0                             ; 
08D0                FILTER:      
08D0                MAP:         
08D0                SCAN:        
08D0   DD E9                  JP   (ix)   
08D2                             ; print decimal
08D2                             ; hl = value
08D2                PRTDEC:      
08D2   CB 7C                  BIT   7,h   
08D4   28 0B                  JR   z,prtdec0   
08D6   3E 2D                  LD   a,"-"   
08D8   CD 85 00               CALL   putchar   
08DB   AF                     XOR   a   
08DC   95                     SUB   l   
08DD   6F                     LD   l,a   
08DE   9F                     SBC   a,a   
08DF   94                     SUB   h   
08E0   67                     LD   h,a   
08E1                PRTDEC0:      
08E1   C5                     PUSH   bc   
08E2   0E 00                  LD   c,0   ; leading zeros flag = false
08E4   11 F0 D8               LD   de,-10000   
08E7   CD 03 09               CALL   prtdec1   
08EA   11 18 FC               LD   de,-1000   
08ED   CD 03 09               CALL   prtdec1   
08F0   11 9C FF               LD   de,-100   
08F3   CD 03 09               CALL   prtdec1   
08F6   1E F6                  LD   e,-10   
08F8   CD 03 09               CALL   prtdec1   
08FB   0C                     INC   c   ; flag = true for at least digit
08FC   1E FF                  LD   e,-1   
08FE   CD 03 09               CALL   prtdec1   
0901   C1                     POP   bc   
0902   C9                     RET      
0903                PRTDEC1:      
0903   06 2F                  LD   b,"0"-1   
0905                PRTDEC2:      
0905   04                     INC   b   
0906   19                     ADD   hl,de   
0907   38 FC                  JR   c,prtdec2   
0909   ED 52                  SBC   hl,de   
090B   3E 30                  LD   a,"0"   
090D   B8                     CP   b   
090E   20 05                  JR   nz,prtdec3   
0910   AF                     XOR   a   
0911   B1                     OR   c   
0912   C8                     RET   z   
0913   18 01                  JR   prtdec4   
0915                PRTDEC3:      
0915   0C                     INC   c   
0916                PRTDEC4:      
0916   78                     LD   a,b   
0917   C3 85 00               JP   putchar   
091A                PRTHEX:      ; display hl as a 16-bit number in hex.
091A   C5                     PUSH   bc   ; preserve the IP
091B   7C                     LD   a,h   
091C   CD 25 09               CALL   prthex2   
091F   7D                     LD   a,l   
0920   CD 25 09               CALL   prthex2   
0923   C1                     POP   bc   
0924   C9                     RET      
0925                PRTHEX2:      
0925   4F                     LD   c,a   
0926   1F                     RRA      
0927   1F                     RRA      
0928   1F                     RRA      
0929   1F                     RRA      
092A   CD 2E 09               CALL   prthex3   
092D   79                     LD   a,c   
092E                PRTHEX3:      
092E   E6 0F                  AND   0x0F   
0930   C6 90                  ADD   a,0x90   
0932   27                     DAA      
0933   CE 40                  ADC   a,0x40   
0935   27                     DAA      
0936   C3 85 00               JP   putchar   
0939                PRTSTR0:      
0939   CD 85 00               CALL   putchar   
093C   23                     INC   hl   
093D                PRTSTR:      
093D   7E                     LD   a,(hl)   
093E   B7                     OR   a   
093F   20 F8                  JR   nz,prtstr0   
0941   C9                     RET      
0942                             ; **************************************************************************
0942                             ; calculate nesting value
0942                             ; a is char to be tested,
0942                             ; e is the nesting value (initially 0)
0942                             ; e is increased by ( and [
0942                             ; e is decreased by ) and ]
0942                             ; e has its bit 7 toggled by `
0942                             ; limited to 127 levels
0942                             ; **************************************************************************
0942                NESTING:      
0942   FE 22                  CP   DQUOTE   ; quote char
0944   28 06                  JR   z,nesting0   
0946   FE 60                  CP   "`"   ; quote char
0948   28 02                  JR   z,nesting0   
094A   18 0A                  JR   nesting1   
094C                NESTING0:      
094C   CB 7B                  BIT   7,e   
094E   28 03                  JR   z,nesting1a   
0950   CB BB                  RES   7,e   
0952   C9                     RET      
0953                NESTING1A:      
0953   CB FB                  SET   7,e   
0955   C9                     RET      
0956                NESTING1:      
0956   CB 7B                  BIT   7,e   
0958   C0                     RET   nz   
0959   FE 7B                  CP   "{"   
095B   28 08                  JR   z,nesting2   
095D   FE 5B                  CP   "["   
095F   28 04                  JR   z,nesting2   
0961   FE 28                  CP   "("   
0963   20 02                  JR   nz,nesting3   
0965                NESTING2:      
0965   1C                     INC   e   
0966   C9                     RET      
0967                NESTING3:      
0967   FE 7D                  CP   "}"   
0969   28 07                  JR   z,nesting4   
096B   FE 5D                  CP   "]"   
096D   28 03                  JR   z,nesting4   
096F   FE 29                  CP   ")"   
0971   C0                     RET   nz   
0972                NESTING4:      
0972   1D                     DEC   e   
0973   C9                     RET      
0974                PROMPT:      
0974   CD 84 09               CALL   printStr   
0977   0D 0A 3E 20 00         .CSTR   "\r\n> "   
097C   C9                     RET      
097D                CRLF:        
097D   CD 84 09               CALL   printStr   
0980   0D 0A 00               .CSTR   "\r\n"   
0983   C9                     RET      
0984                             ; prints a null teminated string
0984                             ; the string should be immedaitely following the call
0984                PRINTSTR:      
0984   E3                     EX   (sp),hl   ; swap			
0985   CD 3D 09               CALL   prtstr   
0988   23                     INC   hl   ; inc past NUL
0989   E3                     EX   (sp),hl   ; put it back	
098A   C9                     RET      
098B                INIT:        
098B   DD 2A EA 3D            LD   ix,(vNext)   
098F   FD 21 80 3C            LD   iy,STACK   
0993   21 80 01               LD   hl,isysVars   
0996   11 E6 3D               LD   de,sysVars   
0999   01 10 00               LD   bc,8 * 2   
099C   ED B0                  LDIR      
099E   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09A1   06 34                  LD   b,26*2   
09A3   AF                     XOR   a   
09A4                INIT0:       
09A4   77                     LD   (hl),a   
09A5   23                     INC   hl   
09A6   10 FC                  DJNZ   init0   
09A8   C9                     RET      
09A9                START:       
09A9   31 80 3C               LD   sp,STACK   ; start of monty
09AC   CD 8B 09               CALL   init   ; setups
09AF   CD 84 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09B2   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09BF                INTERPRET:      
09BF   CD 74 09               CALL   prompt   
09C2   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09C5   ED 43 E8 3D            LD   (vTIBPtr),bc   
09C9                INTERPRET2:      ; calc nesting (a macro might have changed it)
09C9   1E 00                  LD   e,0   ; initilize nesting value
09CB   C5                     PUSH   bc   ; save offset into TIB,
09CC                             ; bc is also the count of chars in TIB
09CC   21 00 3E               LD   hl,TIB   ; hl is start of TIB
09CF   18 06                  JR   interpret4   
09D1                INTERPRET3:      
09D1   7E                     LD   a,(hl)   ; a = char in TIB
09D2   23                     INC   hl   ; inc pointer into TIB
09D3   0B                     DEC   bc   ; dec count of chars in TIB
09D4   CD 42 09               CALL   nesting   ; update nesting value
09D7                INTERPRET4:      
09D7   79                     LD   a,c   ; is count zero?
09D8   B0                     OR   b   
09D9   20 F6                  JR   nz,interpret3   ; if not loop
09DB   C1                     POP   bc   ; restore offset into TIB
09DC                INTERPRET5:      
09DC   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09DF   FE 20                  CP   $20   ; compare to space
09E1   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09E3   FE 00                  CP   $0   ; is it end of string? NUL end of string
09E5                             ; ???? NEEDED?
09E5   28 27                  JR   z,interpret8   
09E7   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09E9   28 10                  JR   z,interpret7   ; if anything else its macro/control
09EB                             ; macro
09EB                             ;  ld (vTIBPtr),bc
09EB                             ;  ld hl,ctrlCodes
09EB                             ;  add a,l			            ; look up key of macros
09EB                             ;  ld l,a
09EB                             ;  ld e,(hl)
09EB                             ;  ld a,e
09EB                             ;  or a
09EB                             ;  jr z,macro1
09EB                             ;  ld d,msb(macros)
09EB                             ;  push de
09EB                             ;  call call		            ; monty exec_ operation and jump to it
09EB                             ;  db DC1,0
09EB                             ; macro1:
09EB                             ;  ld bc,(vTIBPtr)
09EB   18 DC                  JR   interpret2   
09ED                INTERPRET6:      
09ED   21 00 3E               LD   hl,TIB   
09F0   09                     ADD   hl,bc   
09F1   77                     LD   (hl),a   ; store the character in textbuf
09F2   03                     INC   bc   
09F3   CD 85 00               CALL   putchar   ; echo character to screen
09F6   CD 42 09               CALL   nesting   
09F9   18 E1                  JR   interpret5   ; wait for next character
09FB                INTERPRET7:      
09FB   21 00 3E               LD   hl,TIB   
09FE   09                     ADD   hl,bc   
09FF   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A01   23                     INC   hl   
0A02   36 0A                  LD   (hl),"\n"   
0A04   23                     INC   hl   
0A05   03                     INC   bc   
0A06   03                     INC   bc   
0A07   CD 7D 09               CALL   crlf   ; echo character to screen
0A0A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A0B   B7                     OR   a   
0A0C   20 CE                  JR   nz,interpret5   
0A0E                INTERPRET8:      
0A0E   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A12   01 00 3E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A15                             ; we pressed enter
0A15   0B                     DEC   bc   
0A16                NEXT:        
0A16   03                     INC   bc   ; Increment the IP
0A17   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A18   FE 20                  CP   " "   ; whitespace?
0A1A   28 FA                  JR   z,next   ; space? ignore
0A1C   38 07                  JR   c,next1   
0A1E   6F                     LD   l,a   ; index into table
0A1F   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A21   6E                     LD   l,(hl)   ; get low jump address
0A22   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A24   E9                     JP   (hl)   ; Jump to routine
0A25                NEXT1:       
0A25   FE 00                  CP   NUL   ; end of input string?
0A27   28 03                  JR   z,exit_   
0A29   C3 BF 09               JP   interpret   ; no, other whitespace, macros?
0A2C                EXIT_:       
0A2C   60 69                  LD   hl,bc   
0A2E   E9                     JP   (hl)   
0A2F                ERROR:       
0A2F   CD 84 09               CALL   printStr   
0A32   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A39   CD D2 08               CALL   prtdec   
0A3C   C3 BF 09               JP   interpret   
0A3F                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; test ":ab {$a $b +} ; x= 1 x^", 2
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/f", false
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 8B 09               CALL   init   
0B06   CD 82 3B               CALL   execStr   
0B09   2F 66 00               .CSTR   "/f"   
0B0C                          ;*Macro unroll:  expect "/f",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2122S43   
0B18   CD 84 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0B24   CD 84 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD D2 08               CALL   prtdec   
0B3C   CD 84 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD D2 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 84 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 1A 09               CALL   prthex   
0B5C   CD 84 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2122S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/t", true
0B66   31 80 3C               LD   SP,STACK   
0B69   CD 8B 09               CALL   init   
0B6C   CD 82 3B               CALL   execStr   
0B6F   2F 74 00               .CSTR   "/t"   
0B72                          ;*Macro unroll:  expect "/t",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2123S43   
0B7E   CD 84 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0B8A   CD 84 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD D2 08               CALL   prtdec   
0BA2   CD 84 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD D2 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 84 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 1A 09               CALL   prthex   
0BC2   CD 84 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2123S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3C               LD   SP,STACK   
0BCF   CD 8B 09               CALL   init   
0BD2   CD 82 3B               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2124S43   
0BE3   CD 84 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 84 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD D2 08               CALL   prtdec   
0C06   CD 84 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD D2 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 84 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 1A 09               CALL   prthex   
0C26   CD 84 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2124S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3C               LD   SP,STACK   
0C33   CD 8B 09               CALL   init   
0C36   CD 82 3B               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2125S43   
0C47   CD 84 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 84 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD D2 08               CALL   prtdec   
0C6A   CD 84 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD D2 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 84 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 1A 09               CALL   prthex   
0C8A   CD 84 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2125S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3C               LD   SP,STACK   
0C97   CD 8B 09               CALL   init   
0C9A   CD 82 3B               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2126S43   
0CAB   CD 84 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 84 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD D2 08               CALL   prtdec   
0CCE   CD 84 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD D2 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 84 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 1A 09               CALL   prthex   
0CEE   CD 84 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2126S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3C               LD   SP,STACK   
0CFB   CD 8B 09               CALL   init   
0CFE   CD 82 3B               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2127S43   
0D0F   CD 84 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 84 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD D2 08               CALL   prtdec   
0D32   CD 84 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD D2 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 84 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 1A 09               CALL   prthex   
0D52   CD 84 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2127S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3C               LD   SP,STACK   
0D5F   CD 8B 09               CALL   init   
0D62   CD 82 3B               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2128S43   
0D74   CD 84 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 84 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD D2 08               CALL   prtdec   
0D98   CD 84 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD D2 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 84 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 1A 09               CALL   prthex   
0DB8   CD 84 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2128S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3C               LD   SP,STACK   
0DC5   CD 8B 09               CALL   init   
0DC8   CD 82 3B               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2129S43   
0DDB   CD 84 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 84 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD D2 08               CALL   prtdec   
0E00   CD 84 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD D2 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 84 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 1A 09               CALL   prthex   
0E20   CD 84 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2129S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3C               LD   SP,STACK   
0E2D   CD 8B 09               CALL   init   
0E30   CD 82 3B               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2130S43   
0E42   CD 84 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 84 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD D2 08               CALL   prtdec   
0E66   CD 84 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD D2 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 84 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 1A 09               CALL   prthex   
0E86   CD 84 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2130S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3C               LD   SP,STACK   
0E93   CD 8B 09               CALL   init   
0E96   CD 82 3B               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2131S43   
0EA8   CD 84 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 84 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD D2 08               CALL   prtdec   
0ECC   CD 84 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD D2 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 84 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 1A 09               CALL   prthex   
0EEC   CD 84 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2131S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3C               LD   SP,STACK   
0EF9   CD 8B 09               CALL   init   
0EFC   CD 82 3B               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2132S43   
0F0F   CD 84 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 84 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD D2 08               CALL   prtdec   
0F34   CD 84 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD D2 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 84 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 1A 09               CALL   prthex   
0F54   CD 84 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2132S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3C               LD   SP,STACK   
0F61   CD 8B 09               CALL   init   
0F64   CD 82 3B               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2133S43   
0F78   CD 84 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 84 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD D2 08               CALL   prtdec   
0F9E   CD 84 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD D2 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 84 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 1A 09               CALL   prthex   
0FBE   CD 84 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2133S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3C               LD   SP,STACK   
0FCB   CD 8B 09               CALL   init   
0FCE   CD 82 3B               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2134S43   
0FE1   CD 84 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 84 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD D2 08               CALL   prtdec   
1006   CD 84 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD D2 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 84 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 1A 09               CALL   prthex   
1026   CD 84 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2134S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3C               LD   SP,STACK   
1033   CD 8B 09               CALL   init   
1036   CD 82 3B               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2135S43   
1049   CD 84 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 84 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD D2 08               CALL   prtdec   
106E   CD 84 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD D2 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 84 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 1A 09               CALL   prthex   
108E   CD 84 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2135S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3C               LD   SP,STACK   
109B   CD 8B 09               CALL   init   
109E   CD 82 3B               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2136S43   
10B4   CD 84 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 84 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD D2 08               CALL   prtdec   
10DC   CD 84 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD D2 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 84 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 1A 09               CALL   prthex   
10FC   CD 84 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2136S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3C               LD   SP,STACK   
1109   CD 8B 09               CALL   init   
110C   CD 82 3B               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2137S43   
1122   CD 84 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 84 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD D2 08               CALL   prtdec   
114A   CD 84 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD D2 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 84 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 1A 09               CALL   prthex   
116A   CD 84 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2137S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3C               LD   SP,STACK   
1177   CD 8B 09               CALL   init   
117A   CD 82 3B               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2138S43   
118F   CD 84 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 84 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD D2 08               CALL   prtdec   
11B6   CD 84 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD D2 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 84 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 1A 09               CALL   prthex   
11D6   CD 84 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2138S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3C               LD   SP,STACK   
11E3   CD 8B 09               CALL   init   
11E6   CD 82 3B               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2139S43   
11FD   CD 84 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 84 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD D2 08               CALL   prtdec   
1226   CD 84 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD D2 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 84 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 1A 09               CALL   prthex   
1246   CD 84 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2139S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3C               LD   SP,STACK   
1253   CD 8B 09               CALL   init   
1256   CD 82 3B               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2140S43   
126F   CD 84 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 84 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD D2 08               CALL   prtdec   
129A   CD 84 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD D2 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 84 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 1A 09               CALL   prthex   
12BA   CD 84 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2140S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3C               LD   SP,STACK   
12C7   CD 8B 09               CALL   init   
12CA   CD 82 3B               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2141S43   
12E2   CD 84 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 84 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD D2 08               CALL   prtdec   
130C   CD 84 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD D2 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 84 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 1A 09               CALL   prthex   
132C   CD 84 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2141S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3C               LD   SP,STACK   
1339   CD 8B 09               CALL   init   
133C   CD 82 3B               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2142S43   
1351   CD 84 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 84 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD D2 08               CALL   prtdec   
1378   CD 84 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD D2 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 84 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 1A 09               CALL   prthex   
1398   CD 84 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2142S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1 a= a++ a",2
13A2   31 80 3C               LD   SP,STACK   
13A5   CD 8B 09               CALL   init   
13A8   CD 82 3B               CALL   execStr   
13AB   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
13B6                          ;*Macro unroll:  expect "1 a= a++ a",2
13B6   E1                     POP   HL   
13B7   E5                     PUSH   HL   
13B8   11 02 00               LD   DE,2   
13BB   B7                     OR   A   
13BC   ED 52                  SBC   HL,DE   
13BE   7D                     LD   A,L   
13BF   B4                     OR   H   
13C0   28 55                  JR   Z,expectM_0_2143S43   
13C2   CD 84 09               CALL   printStr   
13C5   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
13D6   CD 84 09               CALL   printStr   
13D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E8   21 02 00               LD   HL,2   
13EB   CD D2 08               CALL   prtdec   
13EE   CD 84 09               CALL   printStr   
13F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FE   E1                     POP   hl   
13FF   E5                     PUSH   hl   
1400   CD D2 08               CALL   prtdec   
1403   E1                     POP   hl   
1404   CD 84 09               CALL   printStr   
1407   20 28 23 00            .CSTR   " (#"   
140B   CD 1A 09               CALL   prthex   
140E   CD 84 09               CALL   printStr   
1411   29 0D 0A 00            .CSTR   ")\r\n"   
1415   76                     HALT      
1416   00                     .CSTR      
1417                EXPECTM_0_2143S43:      
1417   E1                     POP   HL   
1418                          ;*Macro unroll:  test "1 a= 2 a += a",3
1418   31 80 3C               LD   SP,STACK   
141B   CD 8B 09               CALL   init   
141E   CD 82 3B               CALL   execStr   
1421   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
142F                          ;*Macro unroll:  expect "1 a= 2 a += a",3
142F   E1                     POP   HL   
1430   E5                     PUSH   HL   
1431   11 03 00               LD   DE,3   
1434   B7                     OR   A   
1435   ED 52                  SBC   HL,DE   
1437   7D                     LD   A,L   
1438   B4                     OR   H   
1439   28 58                  JR   Z,expectM_0_2144S43   
143B   CD 84 09               CALL   printStr   
143E   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
1452   CD 84 09               CALL   printStr   
1455   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1464   21 03 00               LD   HL,3   
1467   CD D2 08               CALL   prtdec   
146A   CD 84 09               CALL   printStr   
146D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
147A   E1                     POP   hl   
147B   E5                     PUSH   hl   
147C   CD D2 08               CALL   prtdec   
147F   E1                     POP   hl   
1480   CD 84 09               CALL   printStr   
1483   20 28 23 00            .CSTR   " (#"   
1487   CD 1A 09               CALL   prthex   
148A   CD 84 09               CALL   printStr   
148D   29 0D 0A 00            .CSTR   ")\r\n"   
1491   76                     HALT      
1492   00                     .CSTR      
1493                EXPECTM_0_2144S43:      
1493   E1                     POP   HL   
1494                          ;*Macro unroll:  test "-1 -1 -",0
1494   31 80 3C               LD   SP,STACK   
1497   CD 8B 09               CALL   init   
149A   CD 82 3B               CALL   execStr   
149D   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
14A5                          ;*Macro unroll:  expect "-1 -1 -",0
14A5   E1                     POP   HL   
14A6   E5                     PUSH   HL   
14A7   11 00 00               LD   DE,0   
14AA   B7                     OR   A   
14AB   ED 52                  SBC   HL,DE   
14AD   7D                     LD   A,L   
14AE   B4                     OR   H   
14AF   28 52                  JR   Z,expectM_0_2145S43   
14B1   CD 84 09               CALL   printStr   
14B4   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14C2   CD 84 09               CALL   printStr   
14C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14D4   21 00 00               LD   HL,0   
14D7   CD D2 08               CALL   prtdec   
14DA   CD 84 09               CALL   printStr   
14DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EA   E1                     POP   hl   
14EB   E5                     PUSH   hl   
14EC   CD D2 08               CALL   prtdec   
14EF   E1                     POP   hl   
14F0   CD 84 09               CALL   printStr   
14F3   20 28 23 00            .CSTR   " (#"   
14F7   CD 1A 09               CALL   prthex   
14FA   CD 84 09               CALL   printStr   
14FD   29 0D 0A 00            .CSTR   ")\r\n"   
1501   76                     HALT      
1502   00                     .CSTR      
1503                EXPECTM_0_2145S43:      
1503   E1                     POP   HL   
1504                          ;*Macro unroll:  test "5 3 -", 2
1504   31 80 3C               LD   SP,STACK   
1507   CD 8B 09               CALL   init   
150A   CD 82 3B               CALL   execStr   
150D   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1513                          ;*Macro unroll:  expect "5 3 -",2
1513   E1                     POP   HL   
1514   E5                     PUSH   HL   
1515   11 02 00               LD   DE,2   
1518   B7                     OR   A   
1519   ED 52                  SBC   HL,DE   
151B   7D                     LD   A,L   
151C   B4                     OR   H   
151D   28 50                  JR   Z,expectM_0_2146S43   
151F   CD 84 09               CALL   printStr   
1522   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
152E   CD 84 09               CALL   printStr   
1531   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1540   21 02 00               LD   HL,2   
1543   CD D2 08               CALL   prtdec   
1546   CD 84 09               CALL   printStr   
1549   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1556   E1                     POP   hl   
1557   E5                     PUSH   hl   
1558   CD D2 08               CALL   prtdec   
155B   E1                     POP   hl   
155C   CD 84 09               CALL   printStr   
155F   20 28 23 00            .CSTR   " (#"   
1563   CD 1A 09               CALL   prthex   
1566   CD 84 09               CALL   printStr   
1569   29 0D 0A 00            .CSTR   ")\r\n"   
156D   76                     HALT      
156E   00                     .CSTR      
156F                EXPECTM_0_2146S43:      
156F   E1                     POP   HL   
1570                          ;*Macro unroll:  test "2 1 -",1
1570   31 80 3C               LD   SP,STACK   
1573   CD 8B 09               CALL   init   
1576   CD 82 3B               CALL   execStr   
1579   32 20 31 20 2D 00      .CSTR   "2 1 -"   
157F                          ;*Macro unroll:  expect "2 1 -",1
157F   E1                     POP   HL   
1580   E5                     PUSH   HL   
1581   11 01 00               LD   DE,1   
1584   B7                     OR   A   
1585   ED 52                  SBC   HL,DE   
1587   7D                     LD   A,L   
1588   B4                     OR   H   
1589   28 50                  JR   Z,expectM_0_2147S43   
158B   CD 84 09               CALL   printStr   
158E   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
159A   CD 84 09               CALL   printStr   
159D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15AC   21 01 00               LD   HL,1   
15AF   CD D2 08               CALL   prtdec   
15B2   CD 84 09               CALL   printStr   
15B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C2   E1                     POP   hl   
15C3   E5                     PUSH   hl   
15C4   CD D2 08               CALL   prtdec   
15C7   E1                     POP   hl   
15C8   CD 84 09               CALL   printStr   
15CB   20 28 23 00            .CSTR   " (#"   
15CF   CD 1A 09               CALL   prthex   
15D2   CD 84 09               CALL   printStr   
15D5   29 0D 0A 00            .CSTR   ")\r\n"   
15D9   76                     HALT      
15DA   00                     .CSTR      
15DB                EXPECTM_0_2147S43:      
15DB   E1                     POP   HL   
15DC                          ;*Macro unroll:  test "3 a= a-- a",2
15DC   31 80 3C               LD   SP,STACK   
15DF   CD 8B 09               CALL   init   
15E2   CD 82 3B               CALL   execStr   
15E5   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
15F0                          ;*Macro unroll:  expect "3 a= a-- a",2
15F0   E1                     POP   HL   
15F1   E5                     PUSH   HL   
15F2   11 02 00               LD   DE,2   
15F5   B7                     OR   A   
15F6   ED 52                  SBC   HL,DE   
15F8   7D                     LD   A,L   
15F9   B4                     OR   H   
15FA   28 55                  JR   Z,expectM_0_2148S43   
15FC   CD 84 09               CALL   printStr   
15FF   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1610   CD 84 09               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 02 00               LD   HL,2   
1625   CD D2 08               CALL   prtdec   
1628   CD 84 09               CALL   printStr   
162B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1638   E1                     POP   hl   
1639   E5                     PUSH   hl   
163A   CD D2 08               CALL   prtdec   
163D   E1                     POP   hl   
163E   CD 84 09               CALL   printStr   
1641   20 28 23 00            .CSTR   " (#"   
1645   CD 1A 09               CALL   prthex   
1648   CD 84 09               CALL   printStr   
164B   29 0D 0A 00            .CSTR   ")\r\n"   
164F   76                     HALT      
1650   00                     .CSTR      
1651                EXPECTM_0_2148S43:      
1651   E1                     POP   HL   
1652                          ;*Macro unroll:  test "4 a= a 2 -= a",2
1652   31 80 3C               LD   SP,STACK   
1655   CD 8B 09               CALL   init   
1658   CD 82 3B               CALL   execStr   
165B   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
1669                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
1669   E1                     POP   HL   
166A   E5                     PUSH   HL   
166B   11 02 00               LD   DE,2   
166E   B7                     OR   A   
166F   ED 52                  SBC   HL,DE   
1671   7D                     LD   A,L   
1672   B4                     OR   H   
1673   28 58                  JR   Z,expectM_0_2149S43   
1675   CD 84 09               CALL   printStr   
1678   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
168C   CD 84 09               CALL   printStr   
168F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169E   21 02 00               LD   HL,2   
16A1   CD D2 08               CALL   prtdec   
16A4   CD 84 09               CALL   printStr   
16A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B4   E1                     POP   hl   
16B5   E5                     PUSH   hl   
16B6   CD D2 08               CALL   prtdec   
16B9   E1                     POP   hl   
16BA   CD 84 09               CALL   printStr   
16BD   20 28 23 00            .CSTR   " (#"   
16C1   CD 1A 09               CALL   prthex   
16C4   CD 84 09               CALL   printStr   
16C7   29 0D 0A 00            .CSTR   ")\r\n"   
16CB   76                     HALT      
16CC   00                     .CSTR      
16CD                EXPECTM_0_2149S43:      
16CD   E1                     POP   HL   
16CE                          ;*Macro unroll:  test "3 5 &", 1
16CE   31 80 3C               LD   SP,STACK   
16D1   CD 8B 09               CALL   init   
16D4   CD 82 3B               CALL   execStr   
16D7   33 20 35 20 26 00      .CSTR   "3 5 &"   
16DD                          ;*Macro unroll:  expect "3 5 &",1
16DD   E1                     POP   HL   
16DE   E5                     PUSH   HL   
16DF   11 01 00               LD   DE,1   
16E2   B7                     OR   A   
16E3   ED 52                  SBC   HL,DE   
16E5   7D                     LD   A,L   
16E6   B4                     OR   H   
16E7   28 50                  JR   Z,expectM_0_2150S43   
16E9   CD 84 09               CALL   printStr   
16EC   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16F8   CD 84 09               CALL   printStr   
16FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
170A   21 01 00               LD   HL,1   
170D   CD D2 08               CALL   prtdec   
1710   CD 84 09               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   CD D2 08               CALL   prtdec   
1725   E1                     POP   hl   
1726   CD 84 09               CALL   printStr   
1729   20 28 23 00            .CSTR   " (#"   
172D   CD 1A 09               CALL   prthex   
1730   CD 84 09               CALL   printStr   
1733   29 0D 0A 00            .CSTR   ")\r\n"   
1737   76                     HALT      
1738   00                     .CSTR      
1739                EXPECTM_0_2150S43:      
1739   E1                     POP   HL   
173A                          ;*Macro unroll:  test "3 a= 5 a &= a",1
173A   31 80 3C               LD   SP,STACK   
173D   CD 8B 09               CALL   init   
1740   CD 82 3B               CALL   execStr   
1743   33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3 a= 5 a &= a"   
1751                          ;*Macro unroll:  expect "3 a= 5 a &= a",1
1751   E1                     POP   HL   
1752   E5                     PUSH   HL   
1753   11 01 00               LD   DE,1   
1756   B7                     OR   A   
1757   ED 52                  SBC   HL,DE   
1759   7D                     LD   A,L   
175A   B4                     OR   H   
175B   28 58                  JR   Z,expectM_0_2151S43   
175D   CD 84 09               CALL   printStr   
1760   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a &= a"   
1774   CD 84 09               CALL   printStr   
1777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1786   21 01 00               LD   HL,1   
1789   CD D2 08               CALL   prtdec   
178C   CD 84 09               CALL   printStr   
178F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
179C   E1                     POP   hl   
179D   E5                     PUSH   hl   
179E   CD D2 08               CALL   prtdec   
17A1   E1                     POP   hl   
17A2   CD 84 09               CALL   printStr   
17A5   20 28 23 00            .CSTR   " (#"   
17A9   CD 1A 09               CALL   prthex   
17AC   CD 84 09               CALL   printStr   
17AF   29 0D 0A 00            .CSTR   ")\r\n"   
17B3   76                     HALT      
17B4   00                     .CSTR      
17B5                EXPECTM_0_2151S43:      
17B5   E1                     POP   HL   
17B6                          ;*Macro unroll:  test "3 5 |", 7
17B6   31 80 3C               LD   SP,STACK   
17B9   CD 8B 09               CALL   init   
17BC   CD 82 3B               CALL   execStr   
17BF   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17C5                          ;*Macro unroll:  expect "3 5 |",7
17C5   E1                     POP   HL   
17C6   E5                     PUSH   HL   
17C7   11 07 00               LD   DE,7   
17CA   B7                     OR   A   
17CB   ED 52                  SBC   HL,DE   
17CD   7D                     LD   A,L   
17CE   B4                     OR   H   
17CF   28 50                  JR   Z,expectM_0_2152S43   
17D1   CD 84 09               CALL   printStr   
17D4   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17E0   CD 84 09               CALL   printStr   
17E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F2   21 07 00               LD   HL,7   
17F5   CD D2 08               CALL   prtdec   
17F8   CD 84 09               CALL   printStr   
17FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1808   E1                     POP   hl   
1809   E5                     PUSH   hl   
180A   CD D2 08               CALL   prtdec   
180D   E1                     POP   hl   
180E   CD 84 09               CALL   printStr   
1811   20 28 23 00            .CSTR   " (#"   
1815   CD 1A 09               CALL   prthex   
1818   CD 84 09               CALL   printStr   
181B   29 0D 0A 00            .CSTR   ")\r\n"   
181F   76                     HALT      
1820   00                     .CSTR      
1821                EXPECTM_0_2152S43:      
1821   E1                     POP   HL   
1822                          ;*Macro unroll:  test "3 a= 5 a |= a",7
1822   31 80 3C               LD   SP,STACK   
1825   CD 8B 09               CALL   init   
1828   CD 82 3B               CALL   execStr   
182B   33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3 a= 5 a |= a"   
1839                          ;*Macro unroll:  expect "3 a= 5 a |= a",7
1839   E1                     POP   HL   
183A   E5                     PUSH   HL   
183B   11 07 00               LD   DE,7   
183E   B7                     OR   A   
183F   ED 52                  SBC   HL,DE   
1841   7D                     LD   A,L   
1842   B4                     OR   H   
1843   28 58                  JR   Z,expectM_0_2153S43   
1845   CD 84 09               CALL   printStr   
1848   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a |= a"   
185C   CD 84 09               CALL   printStr   
185F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186E   21 07 00               LD   HL,7   
1871   CD D2 08               CALL   prtdec   
1874   CD 84 09               CALL   printStr   
1877   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1884   E1                     POP   hl   
1885   E5                     PUSH   hl   
1886   CD D2 08               CALL   prtdec   
1889   E1                     POP   hl   
188A   CD 84 09               CALL   printStr   
188D   20 28 23 00            .CSTR   " (#"   
1891   CD 1A 09               CALL   prthex   
1894   CD 84 09               CALL   printStr   
1897   29 0D 0A 00            .CSTR   ")\r\n"   
189B   76                     HALT      
189C   00                     .CSTR      
189D                EXPECTM_0_2153S43:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "3 5 /x", 6
189E   31 80 3C               LD   SP,STACK   
18A1   CD 8B 09               CALL   init   
18A4   CD 82 3B               CALL   execStr   
18A7   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
18AE                          ;*Macro unroll:  expect "3 5 /x",6
18AE   E1                     POP   HL   
18AF   E5                     PUSH   HL   
18B0   11 06 00               LD   DE,6   
18B3   B7                     OR   A   
18B4   ED 52                  SBC   HL,DE   
18B6   7D                     LD   A,L   
18B7   B4                     OR   H   
18B8   28 51                  JR   Z,expectM_0_2154S43   
18BA   CD 84 09               CALL   printStr   
18BD   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
18CA   CD 84 09               CALL   printStr   
18CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DC   21 06 00               LD   HL,6   
18DF   CD D2 08               CALL   prtdec   
18E2   CD 84 09               CALL   printStr   
18E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F2   E1                     POP   hl   
18F3   E5                     PUSH   hl   
18F4   CD D2 08               CALL   prtdec   
18F7   E1                     POP   hl   
18F8   CD 84 09               CALL   printStr   
18FB   20 28 23 00            .CSTR   " (#"   
18FF   CD 1A 09               CALL   prthex   
1902   CD 84 09               CALL   printStr   
1905   29 0D 0A 00            .CSTR   ")\r\n"   
1909   76                     HALT      
190A   00                     .CSTR      
190B                EXPECTM_0_2154S43:      
190B   E1                     POP   HL   
190C                          ;*Macro unroll:  test "3 a= 5 a /x a= a",6
190C   31 80 3C               LD   SP,STACK   
190F   CD 8B 09               CALL   init   
1912   CD 82 3B               CALL   execStr   
1915   33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "3 a= 5 a /x a= a"   
1926                          ;*Macro unroll:  expect "3 a= 5 a /x a= a",6
1926   E1                     POP   HL   
1927   E5                     PUSH   HL   
1928   11 06 00               LD   DE,6   
192B   B7                     OR   A   
192C   ED 52                  SBC   HL,DE   
192E   7D                     LD   A,L   
192F   B4                     OR   H   
1930   28 5B                  JR   Z,expectM_0_2155S43   
1932   CD 84 09               CALL   printStr   
1935   43 6F 64 65 3A 20 33 20 61 3D 20 35 20 61 20 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3 a= 5 a /x a= a"   
194C   CD 84 09               CALL   printStr   
194F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195E   21 06 00               LD   HL,6   
1961   CD D2 08               CALL   prtdec   
1964   CD 84 09               CALL   printStr   
1967   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1974   E1                     POP   hl   
1975   E5                     PUSH   hl   
1976   CD D2 08               CALL   prtdec   
1979   E1                     POP   hl   
197A   CD 84 09               CALL   printStr   
197D   20 28 23 00            .CSTR   " (#"   
1981   CD 1A 09               CALL   prthex   
1984   CD 84 09               CALL   printStr   
1987   29 0D 0A 00            .CSTR   ")\r\n"   
198B   76                     HALT      
198C   00                     .CSTR      
198D                EXPECTM_0_2155S43:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "2 3 *", 6
198E   31 80 3C               LD   SP,STACK   
1991   CD 8B 09               CALL   init   
1994   CD 82 3B               CALL   execStr   
1997   32 20 33 20 2A 00      .CSTR   "2 3 *"   
199D                          ;*Macro unroll:  expect "2 3 *",6
199D   E1                     POP   HL   
199E   E5                     PUSH   HL   
199F   11 06 00               LD   DE,6   
19A2   B7                     OR   A   
19A3   ED 52                  SBC   HL,DE   
19A5   7D                     LD   A,L   
19A6   B4                     OR   H   
19A7   28 50                  JR   Z,expectM_0_2156S43   
19A9   CD 84 09               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19B8   CD 84 09               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 06 00               LD   HL,6   
19CD   CD D2 08               CALL   prtdec   
19D0   CD 84 09               CALL   printStr   
19D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E0   E1                     POP   hl   
19E1   E5                     PUSH   hl   
19E2   CD D2 08               CALL   prtdec   
19E5   E1                     POP   hl   
19E6   CD 84 09               CALL   printStr   
19E9   20 28 23 00            .CSTR   " (#"   
19ED   CD 1A 09               CALL   prthex   
19F0   CD 84 09               CALL   printStr   
19F3   29 0D 0A 00            .CSTR   ")\r\n"   
19F7   76                     HALT      
19F8   00                     .CSTR      
19F9                EXPECTM_0_2156S43:      
19F9   E1                     POP   HL   
19FA                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19FA   31 80 3C               LD   SP,STACK   
19FD   CD 8B 09               CALL   init   
1A00   CD 82 3B               CALL   execStr   
1A03   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1A11                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1A11   E1                     POP   HL   
1A12   E5                     PUSH   HL   
1A13   11 06 00               LD   DE,6   
1A16   B7                     OR   A   
1A17   ED 52                  SBC   HL,DE   
1A19   7D                     LD   A,L   
1A1A   B4                     OR   H   
1A1B   28 58                  JR   Z,expectM_0_2157S43   
1A1D   CD 84 09               CALL   printStr   
1A20   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A34   CD 84 09               CALL   printStr   
1A37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A46   21 06 00               LD   HL,6   
1A49   CD D2 08               CALL   prtdec   
1A4C   CD 84 09               CALL   printStr   
1A4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5C   E1                     POP   hl   
1A5D   E5                     PUSH   hl   
1A5E   CD D2 08               CALL   prtdec   
1A61   E1                     POP   hl   
1A62   CD 84 09               CALL   printStr   
1A65   20 28 23 00            .CSTR   " (#"   
1A69   CD 1A 09               CALL   prthex   
1A6C   CD 84 09               CALL   printStr   
1A6F   29 0D 0A 00            .CSTR   ")\r\n"   
1A73   76                     HALT      
1A74   00                     .CSTR      
1A75                EXPECTM_0_2157S43:      
1A75   E1                     POP   HL   
1A76                          ;*Macro unroll:  test "1 2 3 + *", 5
1A76   31 80 3C               LD   SP,STACK   
1A79   CD 8B 09               CALL   init   
1A7C   CD 82 3B               CALL   execStr   
1A7F   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A89                          ;*Macro unroll:  expect "1 2 3 + *",5
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 05 00               LD   DE,5   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   28 54                  JR   Z,expectM_0_2158S43   
1A95   CD 84 09               CALL   printStr   
1A98   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1AA8   CD 84 09               CALL   printStr   
1AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ABA   21 05 00               LD   HL,5   
1ABD   CD D2 08               CALL   prtdec   
1AC0   CD 84 09               CALL   printStr   
1AC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD0   E1                     POP   hl   
1AD1   E5                     PUSH   hl   
1AD2   CD D2 08               CALL   prtdec   
1AD5   E1                     POP   hl   
1AD6   CD 84 09               CALL   printStr   
1AD9   20 28 23 00            .CSTR   " (#"   
1ADD   CD 1A 09               CALL   prthex   
1AE0   CD 84 09               CALL   printStr   
1AE3   29 0D 0A 00            .CSTR   ")\r\n"   
1AE7   76                     HALT      
1AE8   00                     .CSTR      
1AE9                EXPECTM_0_2158S43:      
1AE9   E1                     POP   HL   
1AEA                          ;*Macro unroll:  test "7 3 /", 2
1AEA   31 80 3C               LD   SP,STACK   
1AED   CD 8B 09               CALL   init   
1AF0   CD 82 3B               CALL   execStr   
1AF3   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AF9                          ;*Macro unroll:  expect "7 3 /",2
1AF9   E1                     POP   HL   
1AFA   E5                     PUSH   HL   
1AFB   11 02 00               LD   DE,2   
1AFE   B7                     OR   A   
1AFF   ED 52                  SBC   HL,DE   
1B01   7D                     LD   A,L   
1B02   B4                     OR   H   
1B03   28 50                  JR   Z,expectM_0_2159S43   
1B05   CD 84 09               CALL   printStr   
1B08   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B14   CD 84 09               CALL   printStr   
1B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B26   21 02 00               LD   HL,2   
1B29   CD D2 08               CALL   prtdec   
1B2C   CD 84 09               CALL   printStr   
1B2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3C   E1                     POP   hl   
1B3D   E5                     PUSH   hl   
1B3E   CD D2 08               CALL   prtdec   
1B41   E1                     POP   hl   
1B42   CD 84 09               CALL   printStr   
1B45   20 28 23 00            .CSTR   " (#"   
1B49   CD 1A 09               CALL   prthex   
1B4C   CD 84 09               CALL   printStr   
1B4F   29 0D 0A 00            .CSTR   ")\r\n"   
1B53   76                     HALT      
1B54   00                     .CSTR      
1B55                EXPECTM_0_2159S43:      
1B55   E1                     POP   HL   
1B56                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B56   31 80 3C               LD   SP,STACK   
1B59   CD 8B 09               CALL   init   
1B5C   CD 82 3B               CALL   execStr   
1B5F   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B6D                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B6D   E1                     POP   HL   
1B6E   E5                     PUSH   HL   
1B6F   11 02 00               LD   DE,2   
1B72   B7                     OR   A   
1B73   ED 52                  SBC   HL,DE   
1B75   7D                     LD   A,L   
1B76   B4                     OR   H   
1B77   28 58                  JR   Z,expectM_0_2160S43   
1B79   CD 84 09               CALL   printStr   
1B7C   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B90   CD 84 09               CALL   printStr   
1B93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA2   21 02 00               LD   HL,2   
1BA5   CD D2 08               CALL   prtdec   
1BA8   CD 84 09               CALL   printStr   
1BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB8   E1                     POP   hl   
1BB9   E5                     PUSH   hl   
1BBA   CD D2 08               CALL   prtdec   
1BBD   E1                     POP   hl   
1BBE   CD 84 09               CALL   printStr   
1BC1   20 28 23 00            .CSTR   " (#"   
1BC5   CD 1A 09               CALL   prthex   
1BC8   CD 84 09               CALL   printStr   
1BCB   29 0D 0A 00            .CSTR   ")\r\n"   
1BCF   76                     HALT      
1BD0   00                     .CSTR      
1BD1                EXPECTM_0_2160S43:      
1BD1   E1                     POP   HL   
1BD2                          ;*Macro unroll:  test "7 3 / _", 1
1BD2   31 80 3C               LD   SP,STACK   
1BD5   CD 8B 09               CALL   init   
1BD8   CD 82 3B               CALL   execStr   
1BDB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BE3                          ;*Macro unroll:  expect "7 3 / _",1
1BE3   E1                     POP   HL   
1BE4   E5                     PUSH   HL   
1BE5   11 01 00               LD   DE,1   
1BE8   B7                     OR   A   
1BE9   ED 52                  SBC   HL,DE   
1BEB   7D                     LD   A,L   
1BEC   B4                     OR   H   
1BED   28 52                  JR   Z,expectM_0_2161S43   
1BEF   CD 84 09               CALL   printStr   
1BF2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C00   CD 84 09               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 01 00               LD   HL,1   
1C15   CD D2 08               CALL   prtdec   
1C18   CD 84 09               CALL   printStr   
1C1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C28   E1                     POP   hl   
1C29   E5                     PUSH   hl   
1C2A   CD D2 08               CALL   prtdec   
1C2D   E1                     POP   hl   
1C2E   CD 84 09               CALL   printStr   
1C31   20 28 23 00            .CSTR   " (#"   
1C35   CD 1A 09               CALL   prthex   
1C38   CD 84 09               CALL   printStr   
1C3B   29 0D 0A 00            .CSTR   ")\r\n"   
1C3F   76                     HALT      
1C40   00                     .CSTR      
1C41                EXPECTM_0_2161S43:      
1C41   E1                     POP   HL   
1C42                          ;*Macro unroll:  test "7 3 /", 2
1C42   31 80 3C               LD   SP,STACK   
1C45   CD 8B 09               CALL   init   
1C48   CD 82 3B               CALL   execStr   
1C4B   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C51                          ;*Macro unroll:  expect "7 3 /",2
1C51   E1                     POP   HL   
1C52   E5                     PUSH   HL   
1C53   11 02 00               LD   DE,2   
1C56   B7                     OR   A   
1C57   ED 52                  SBC   HL,DE   
1C59   7D                     LD   A,L   
1C5A   B4                     OR   H   
1C5B   28 50                  JR   Z,expectM_0_2162S43   
1C5D   CD 84 09               CALL   printStr   
1C60   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C6C   CD 84 09               CALL   printStr   
1C6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7E   21 02 00               LD   HL,2   
1C81   CD D2 08               CALL   prtdec   
1C84   CD 84 09               CALL   printStr   
1C87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C94   E1                     POP   hl   
1C95   E5                     PUSH   hl   
1C96   CD D2 08               CALL   prtdec   
1C99   E1                     POP   hl   
1C9A   CD 84 09               CALL   printStr   
1C9D   20 28 23 00            .CSTR   " (#"   
1CA1   CD 1A 09               CALL   prthex   
1CA4   CD 84 09               CALL   printStr   
1CA7   29 0D 0A 00            .CSTR   ")\r\n"   
1CAB   76                     HALT      
1CAC   00                     .CSTR      
1CAD                EXPECTM_0_2162S43:      
1CAD   E1                     POP   HL   
1CAE                          ;*Macro unroll:  test "2 3 ==", FALSE
1CAE   31 80 3C               LD   SP,STACK   
1CB1   CD 8B 09               CALL   init   
1CB4   CD 82 3B               CALL   execStr   
1CB7   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CBE                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CBE   E1                     POP   HL   
1CBF   E5                     PUSH   HL   
1CC0   11 00 00               LD   DE,FALSE   
1CC3   B7                     OR   A   
1CC4   ED 52                  SBC   HL,DE   
1CC6   7D                     LD   A,L   
1CC7   B4                     OR   H   
1CC8   28 51                  JR   Z,expectM_0_2163S43   
1CCA   CD 84 09               CALL   printStr   
1CCD   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CDA   CD 84 09               CALL   printStr   
1CDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEC   21 00 00               LD   HL,FALSE   
1CEF   CD D2 08               CALL   prtdec   
1CF2   CD 84 09               CALL   printStr   
1CF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D02   E1                     POP   hl   
1D03   E5                     PUSH   hl   
1D04   CD D2 08               CALL   prtdec   
1D07   E1                     POP   hl   
1D08   CD 84 09               CALL   printStr   
1D0B   20 28 23 00            .CSTR   " (#"   
1D0F   CD 1A 09               CALL   prthex   
1D12   CD 84 09               CALL   printStr   
1D15   29 0D 0A 00            .CSTR   ")\r\n"   
1D19   76                     HALT      
1D1A   00                     .CSTR      
1D1B                EXPECTM_0_2163S43:      
1D1B   E1                     POP   HL   
1D1C                          ;*Macro unroll:  test "3 3 ==", TRUE
1D1C   31 80 3C               LD   SP,STACK   
1D1F   CD 8B 09               CALL   init   
1D22   CD 82 3B               CALL   execStr   
1D25   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D2C                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D2C   E1                     POP   HL   
1D2D   E5                     PUSH   HL   
1D2E   11 FF FF               LD   DE,TRUE   
1D31   B7                     OR   A   
1D32   ED 52                  SBC   HL,DE   
1D34   7D                     LD   A,L   
1D35   B4                     OR   H   
1D36   28 51                  JR   Z,expectM_0_2164S43   
1D38   CD 84 09               CALL   printStr   
1D3B   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D48   CD 84 09               CALL   printStr   
1D4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5A   21 FF FF               LD   HL,TRUE   
1D5D   CD D2 08               CALL   prtdec   
1D60   CD 84 09               CALL   printStr   
1D63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D70   E1                     POP   hl   
1D71   E5                     PUSH   hl   
1D72   CD D2 08               CALL   prtdec   
1D75   E1                     POP   hl   
1D76   CD 84 09               CALL   printStr   
1D79   20 28 23 00            .CSTR   " (#"   
1D7D   CD 1A 09               CALL   prthex   
1D80   CD 84 09               CALL   printStr   
1D83   29 0D 0A 00            .CSTR   ")\r\n"   
1D87   76                     HALT      
1D88   00                     .CSTR      
1D89                EXPECTM_0_2164S43:      
1D89   E1                     POP   HL   
1D8A                          ;*Macro unroll:  test "1 2 <", TRUE
1D8A   31 80 3C               LD   SP,STACK   
1D8D   CD 8B 09               CALL   init   
1D90   CD 82 3B               CALL   execStr   
1D93   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D99                          ;*Macro unroll:  expect "1 2 <",TRUE
1D99   E1                     POP   HL   
1D9A   E5                     PUSH   HL   
1D9B   11 FF FF               LD   DE,TRUE   
1D9E   B7                     OR   A   
1D9F   ED 52                  SBC   HL,DE   
1DA1   7D                     LD   A,L   
1DA2   B4                     OR   H   
1DA3   28 50                  JR   Z,expectM_0_2165S43   
1DA5   CD 84 09               CALL   printStr   
1DA8   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DB4   CD 84 09               CALL   printStr   
1DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC6   21 FF FF               LD   HL,TRUE   
1DC9   CD D2 08               CALL   prtdec   
1DCC   CD 84 09               CALL   printStr   
1DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DDC   E1                     POP   hl   
1DDD   E5                     PUSH   hl   
1DDE   CD D2 08               CALL   prtdec   
1DE1   E1                     POP   hl   
1DE2   CD 84 09               CALL   printStr   
1DE5   20 28 23 00            .CSTR   " (#"   
1DE9   CD 1A 09               CALL   prthex   
1DEC   CD 84 09               CALL   printStr   
1DEF   29 0D 0A 00            .CSTR   ")\r\n"   
1DF3   76                     HALT      
1DF4   00                     .CSTR      
1DF5                EXPECTM_0_2165S43:      
1DF5   E1                     POP   HL   
1DF6                          ;*Macro unroll:  test "2 1 <", FALSE
1DF6   31 80 3C               LD   SP,STACK   
1DF9   CD 8B 09               CALL   init   
1DFC   CD 82 3B               CALL   execStr   
1DFF   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E05                          ;*Macro unroll:  expect "2 1 <",FALSE
1E05   E1                     POP   HL   
1E06   E5                     PUSH   HL   
1E07   11 00 00               LD   DE,FALSE   
1E0A   B7                     OR   A   
1E0B   ED 52                  SBC   HL,DE   
1E0D   7D                     LD   A,L   
1E0E   B4                     OR   H   
1E0F   28 50                  JR   Z,expectM_0_2166S43   
1E11   CD 84 09               CALL   printStr   
1E14   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E20   CD 84 09               CALL   printStr   
1E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E32   21 00 00               LD   HL,FALSE   
1E35   CD D2 08               CALL   prtdec   
1E38   CD 84 09               CALL   printStr   
1E3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E48   E1                     POP   hl   
1E49   E5                     PUSH   hl   
1E4A   CD D2 08               CALL   prtdec   
1E4D   E1                     POP   hl   
1E4E   CD 84 09               CALL   printStr   
1E51   20 28 23 00            .CSTR   " (#"   
1E55   CD 1A 09               CALL   prthex   
1E58   CD 84 09               CALL   printStr   
1E5B   29 0D 0A 00            .CSTR   ")\r\n"   
1E5F   76                     HALT      
1E60   00                     .CSTR      
1E61                EXPECTM_0_2166S43:      
1E61   E1                     POP   HL   
1E62                          ;*Macro unroll:  test "2 3 <", TRUE
1E62   31 80 3C               LD   SP,STACK   
1E65   CD 8B 09               CALL   init   
1E68   CD 82 3B               CALL   execStr   
1E6B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E71                          ;*Macro unroll:  expect "2 3 <",TRUE
1E71   E1                     POP   HL   
1E72   E5                     PUSH   HL   
1E73   11 FF FF               LD   DE,TRUE   
1E76   B7                     OR   A   
1E77   ED 52                  SBC   HL,DE   
1E79   7D                     LD   A,L   
1E7A   B4                     OR   H   
1E7B   28 50                  JR   Z,expectM_0_2167S43   
1E7D   CD 84 09               CALL   printStr   
1E80   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E8C   CD 84 09               CALL   printStr   
1E8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E9E   21 FF FF               LD   HL,TRUE   
1EA1   CD D2 08               CALL   prtdec   
1EA4   CD 84 09               CALL   printStr   
1EA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB4   E1                     POP   hl   
1EB5   E5                     PUSH   hl   
1EB6   CD D2 08               CALL   prtdec   
1EB9   E1                     POP   hl   
1EBA   CD 84 09               CALL   printStr   
1EBD   20 28 23 00            .CSTR   " (#"   
1EC1   CD 1A 09               CALL   prthex   
1EC4   CD 84 09               CALL   printStr   
1EC7   29 0D 0A 00            .CSTR   ")\r\n"   
1ECB   76                     HALT      
1ECC   00                     .CSTR      
1ECD                EXPECTM_0_2167S43:      
1ECD   E1                     POP   HL   
1ECE                          ;*Macro unroll:  test "3 3 <", FALSE
1ECE   31 80 3C               LD   SP,STACK   
1ED1   CD 8B 09               CALL   init   
1ED4   CD 82 3B               CALL   execStr   
1ED7   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1EDD                          ;*Macro unroll:  expect "3 3 <",FALSE
1EDD   E1                     POP   HL   
1EDE   E5                     PUSH   HL   
1EDF   11 00 00               LD   DE,FALSE   
1EE2   B7                     OR   A   
1EE3   ED 52                  SBC   HL,DE   
1EE5   7D                     LD   A,L   
1EE6   B4                     OR   H   
1EE7   28 50                  JR   Z,expectM_0_2168S43   
1EE9   CD 84 09               CALL   printStr   
1EEC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EF8   CD 84 09               CALL   printStr   
1EFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F0A   21 00 00               LD   HL,FALSE   
1F0D   CD D2 08               CALL   prtdec   
1F10   CD 84 09               CALL   printStr   
1F13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F20   E1                     POP   hl   
1F21   E5                     PUSH   hl   
1F22   CD D2 08               CALL   prtdec   
1F25   E1                     POP   hl   
1F26   CD 84 09               CALL   printStr   
1F29   20 28 23 00            .CSTR   " (#"   
1F2D   CD 1A 09               CALL   prthex   
1F30   CD 84 09               CALL   printStr   
1F33   29 0D 0A 00            .CSTR   ")\r\n"   
1F37   76                     HALT      
1F38   00                     .CSTR      
1F39                EXPECTM_0_2168S43:      
1F39   E1                     POP   HL   
1F3A                          ;*Macro unroll:  test "1 2 >", FALSE
1F3A   31 80 3C               LD   SP,STACK   
1F3D   CD 8B 09               CALL   init   
1F40   CD 82 3B               CALL   execStr   
1F43   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F49                          ;*Macro unroll:  expect "1 2 >",FALSE
1F49   E1                     POP   HL   
1F4A   E5                     PUSH   HL   
1F4B   11 00 00               LD   DE,FALSE   
1F4E   B7                     OR   A   
1F4F   ED 52                  SBC   HL,DE   
1F51   7D                     LD   A,L   
1F52   B4                     OR   H   
1F53   28 50                  JR   Z,expectM_0_2169S43   
1F55   CD 84 09               CALL   printStr   
1F58   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F64   CD 84 09               CALL   printStr   
1F67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F76   21 00 00               LD   HL,FALSE   
1F79   CD D2 08               CALL   prtdec   
1F7C   CD 84 09               CALL   printStr   
1F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F8C   E1                     POP   hl   
1F8D   E5                     PUSH   hl   
1F8E   CD D2 08               CALL   prtdec   
1F91   E1                     POP   hl   
1F92   CD 84 09               CALL   printStr   
1F95   20 28 23 00            .CSTR   " (#"   
1F99   CD 1A 09               CALL   prthex   
1F9C   CD 84 09               CALL   printStr   
1F9F   29 0D 0A 00            .CSTR   ")\r\n"   
1FA3   76                     HALT      
1FA4   00                     .CSTR      
1FA5                EXPECTM_0_2169S43:      
1FA5   E1                     POP   HL   
1FA6                          ;*Macro unroll:  test "2 1 >", TRUE
1FA6   31 80 3C               LD   SP,STACK   
1FA9   CD 8B 09               CALL   init   
1FAC   CD 82 3B               CALL   execStr   
1FAF   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FB5                          ;*Macro unroll:  expect "2 1 >",TRUE
1FB5   E1                     POP   HL   
1FB6   E5                     PUSH   HL   
1FB7   11 FF FF               LD   DE,TRUE   
1FBA   B7                     OR   A   
1FBB   ED 52                  SBC   HL,DE   
1FBD   7D                     LD   A,L   
1FBE   B4                     OR   H   
1FBF   28 50                  JR   Z,expectM_0_2170S43   
1FC1   CD 84 09               CALL   printStr   
1FC4   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FD0   CD 84 09               CALL   printStr   
1FD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FE2   21 FF FF               LD   HL,TRUE   
1FE5   CD D2 08               CALL   prtdec   
1FE8   CD 84 09               CALL   printStr   
1FEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF8   E1                     POP   hl   
1FF9   E5                     PUSH   hl   
1FFA   CD D2 08               CALL   prtdec   
1FFD   E1                     POP   hl   
1FFE   CD 84 09               CALL   printStr   
2001   20 28 23 00            .CSTR   " (#"   
2005   CD 1A 09               CALL   prthex   
2008   CD 84 09               CALL   printStr   
200B   29 0D 0A 00            .CSTR   ")\r\n"   
200F   76                     HALT      
2010   00                     .CSTR      
2011                EXPECTM_0_2170S43:      
2011   E1                     POP   HL   
2012                          ;*Macro unroll:  test "3 3 >", FALSE
2012   31 80 3C               LD   SP,STACK   
2015   CD 8B 09               CALL   init   
2018   CD 82 3B               CALL   execStr   
201B   33 20 33 20 3E 00      .CSTR   "3 3 >"   
2021                          ;*Macro unroll:  expect "3 3 >",FALSE
2021   E1                     POP   HL   
2022   E5                     PUSH   HL   
2023   11 00 00               LD   DE,FALSE   
2026   B7                     OR   A   
2027   ED 52                  SBC   HL,DE   
2029   7D                     LD   A,L   
202A   B4                     OR   H   
202B   28 50                  JR   Z,expectM_0_2171S43   
202D   CD 84 09               CALL   printStr   
2030   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
203C   CD 84 09               CALL   printStr   
203F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
204E   21 00 00               LD   HL,FALSE   
2051   CD D2 08               CALL   prtdec   
2054   CD 84 09               CALL   printStr   
2057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2064   E1                     POP   hl   
2065   E5                     PUSH   hl   
2066   CD D2 08               CALL   prtdec   
2069   E1                     POP   hl   
206A   CD 84 09               CALL   printStr   
206D   20 28 23 00            .CSTR   " (#"   
2071   CD 1A 09               CALL   prthex   
2074   CD 84 09               CALL   printStr   
2077   29 0D 0A 00            .CSTR   ")\r\n"   
207B   76                     HALT      
207C   00                     .CSTR      
207D                EXPECTM_0_2171S43:      
207D   E1                     POP   HL   
207E                          ;*Macro unroll:  test "4 3 >", TRUE
207E   31 80 3C               LD   SP,STACK   
2081   CD 8B 09               CALL   init   
2084   CD 82 3B               CALL   execStr   
2087   34 20 33 20 3E 00      .CSTR   "4 3 >"   
208D                          ;*Macro unroll:  expect "4 3 >",TRUE
208D   E1                     POP   HL   
208E   E5                     PUSH   HL   
208F   11 FF FF               LD   DE,TRUE   
2092   B7                     OR   A   
2093   ED 52                  SBC   HL,DE   
2095   7D                     LD   A,L   
2096   B4                     OR   H   
2097   28 50                  JR   Z,expectM_0_2172S43   
2099   CD 84 09               CALL   printStr   
209C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
20A8   CD 84 09               CALL   printStr   
20AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BA   21 FF FF               LD   HL,TRUE   
20BD   CD D2 08               CALL   prtdec   
20C0   CD 84 09               CALL   printStr   
20C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20D0   E1                     POP   hl   
20D1   E5                     PUSH   hl   
20D2   CD D2 08               CALL   prtdec   
20D5   E1                     POP   hl   
20D6   CD 84 09               CALL   printStr   
20D9   20 28 23 00            .CSTR   " (#"   
20DD   CD 1A 09               CALL   prthex   
20E0   CD 84 09               CALL   printStr   
20E3   29 0D 0A 00            .CSTR   ")\r\n"   
20E7   76                     HALT      
20E8   00                     .CSTR      
20E9                EXPECTM_0_2172S43:      
20E9   E1                     POP   HL   
20EA                          ;*Macro unroll:  test "2 2 <=", TRUE
20EA   31 80 3C               LD   SP,STACK   
20ED   CD 8B 09               CALL   init   
20F0   CD 82 3B               CALL   execStr   
20F3   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20FA                          ;*Macro unroll:  expect "2 2 <=",TRUE
20FA   E1                     POP   HL   
20FB   E5                     PUSH   HL   
20FC   11 FF FF               LD   DE,TRUE   
20FF   B7                     OR   A   
2100   ED 52                  SBC   HL,DE   
2102   7D                     LD   A,L   
2103   B4                     OR   H   
2104   28 51                  JR   Z,expectM_0_2173S43   
2106   CD 84 09               CALL   printStr   
2109   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2116   CD 84 09               CALL   printStr   
2119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2128   21 FF FF               LD   HL,TRUE   
212B   CD D2 08               CALL   prtdec   
212E   CD 84 09               CALL   printStr   
2131   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213E   E1                     POP   hl   
213F   E5                     PUSH   hl   
2140   CD D2 08               CALL   prtdec   
2143   E1                     POP   hl   
2144   CD 84 09               CALL   printStr   
2147   20 28 23 00            .CSTR   " (#"   
214B   CD 1A 09               CALL   prthex   
214E   CD 84 09               CALL   printStr   
2151   29 0D 0A 00            .CSTR   ")\r\n"   
2155   76                     HALT      
2156   00                     .CSTR      
2157                EXPECTM_0_2173S43:      
2157   E1                     POP   HL   
2158                          ;*Macro unroll:  test "2 2 >=", TRUE
2158   31 80 3C               LD   SP,STACK   
215B   CD 8B 09               CALL   init   
215E   CD 82 3B               CALL   execStr   
2161   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2168                          ;*Macro unroll:  expect "2 2 >=",TRUE
2168   E1                     POP   HL   
2169   E5                     PUSH   HL   
216A   11 FF FF               LD   DE,TRUE   
216D   B7                     OR   A   
216E   ED 52                  SBC   HL,DE   
2170   7D                     LD   A,L   
2171   B4                     OR   H   
2172   28 51                  JR   Z,expectM_0_2174S43   
2174   CD 84 09               CALL   printStr   
2177   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2184   CD 84 09               CALL   printStr   
2187   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2196   21 FF FF               LD   HL,TRUE   
2199   CD D2 08               CALL   prtdec   
219C   CD 84 09               CALL   printStr   
219F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AC   E1                     POP   hl   
21AD   E5                     PUSH   hl   
21AE   CD D2 08               CALL   prtdec   
21B1   E1                     POP   hl   
21B2   CD 84 09               CALL   printStr   
21B5   20 28 23 00            .CSTR   " (#"   
21B9   CD 1A 09               CALL   prthex   
21BC   CD 84 09               CALL   printStr   
21BF   29 0D 0A 00            .CSTR   ")\r\n"   
21C3   76                     HALT      
21C4   00                     .CSTR      
21C5                EXPECTM_0_2174S43:      
21C5   E1                     POP   HL   
21C6                          ;*Macro unroll:  test "3 1 <<", 6
21C6   31 80 3C               LD   SP,STACK   
21C9   CD 8B 09               CALL   init   
21CC   CD 82 3B               CALL   execStr   
21CF   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21D6                          ;*Macro unroll:  expect "3 1 <<",6
21D6   E1                     POP   HL   
21D7   E5                     PUSH   HL   
21D8   11 06 00               LD   DE,6   
21DB   B7                     OR   A   
21DC   ED 52                  SBC   HL,DE   
21DE   7D                     LD   A,L   
21DF   B4                     OR   H   
21E0   28 51                  JR   Z,expectM_0_2175S43   
21E2   CD 84 09               CALL   printStr   
21E5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21F2   CD 84 09               CALL   printStr   
21F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2204   21 06 00               LD   HL,6   
2207   CD D2 08               CALL   prtdec   
220A   CD 84 09               CALL   printStr   
220D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
221A   E1                     POP   hl   
221B   E5                     PUSH   hl   
221C   CD D2 08               CALL   prtdec   
221F   E1                     POP   hl   
2220   CD 84 09               CALL   printStr   
2223   20 28 23 00            .CSTR   " (#"   
2227   CD 1A 09               CALL   prthex   
222A   CD 84 09               CALL   printStr   
222D   29 0D 0A 00            .CSTR   ")\r\n"   
2231   76                     HALT      
2232   00                     .CSTR      
2233                EXPECTM_0_2175S43:      
2233   E1                     POP   HL   
2234                          ;*Macro unroll:  test "10 1 >>", 5
2234   31 80 3C               LD   SP,STACK   
2237   CD 8B 09               CALL   init   
223A   CD 82 3B               CALL   execStr   
223D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2245                          ;*Macro unroll:  expect "10 1 >>",5
2245   E1                     POP   HL   
2246   E5                     PUSH   HL   
2247   11 05 00               LD   DE,5   
224A   B7                     OR   A   
224B   ED 52                  SBC   HL,DE   
224D   7D                     LD   A,L   
224E   B4                     OR   H   
224F   28 52                  JR   Z,expectM_0_2176S43   
2251   CD 84 09               CALL   printStr   
2254   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2262   CD 84 09               CALL   printStr   
2265   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2274   21 05 00               LD   HL,5   
2277   CD D2 08               CALL   prtdec   
227A   CD 84 09               CALL   printStr   
227D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
228A   E1                     POP   hl   
228B   E5                     PUSH   hl   
228C   CD D2 08               CALL   prtdec   
228F   E1                     POP   hl   
2290   CD 84 09               CALL   printStr   
2293   20 28 23 00            .CSTR   " (#"   
2297   CD 1A 09               CALL   prthex   
229A   CD 84 09               CALL   printStr   
229D   29 0D 0A 00            .CSTR   ")\r\n"   
22A1   76                     HALT      
22A2   00                     .CSTR      
22A3                EXPECTM_0_2176S43:      
22A3   E1                     POP   HL   
22A4                          ;*Macro unroll:  test "1 x = x", 1
22A4   31 80 3C               LD   SP,STACK   
22A7   CD 8B 09               CALL   init   
22AA   CD 82 3B               CALL   execStr   
22AD   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22B5                          ;*Macro unroll:  expect "1 x = x",1
22B5   E1                     POP   HL   
22B6   E5                     PUSH   HL   
22B7   11 01 00               LD   DE,1   
22BA   B7                     OR   A   
22BB   ED 52                  SBC   HL,DE   
22BD   7D                     LD   A,L   
22BE   B4                     OR   H   
22BF   28 52                  JR   Z,expectM_0_2177S43   
22C1   CD 84 09               CALL   printStr   
22C4   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22D2   CD 84 09               CALL   printStr   
22D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E4   21 01 00               LD   HL,1   
22E7   CD D2 08               CALL   prtdec   
22EA   CD 84 09               CALL   printStr   
22ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FA   E1                     POP   hl   
22FB   E5                     PUSH   hl   
22FC   CD D2 08               CALL   prtdec   
22FF   E1                     POP   hl   
2300   CD 84 09               CALL   printStr   
2303   20 28 23 00            .CSTR   " (#"   
2307   CD 1A 09               CALL   prthex   
230A   CD 84 09               CALL   printStr   
230D   29 0D 0A 00            .CSTR   ")\r\n"   
2311   76                     HALT      
2312   00                     .CSTR      
2313                EXPECTM_0_2177S43:      
2313   E1                     POP   HL   
2314                          ;*Macro unroll:  test "1{}^", 1
2314   31 80 3C               LD   SP,STACK   
2317   CD 8B 09               CALL   init   
231A   CD 82 3B               CALL   execStr   
231D   31 7B 7D 5E 00         .CSTR   "1{}^"   
2322                          ;*Macro unroll:  expect "1{}^",1
2322   E1                     POP   HL   
2323   E5                     PUSH   HL   
2324   11 01 00               LD   DE,1   
2327   B7                     OR   A   
2328   ED 52                  SBC   HL,DE   
232A   7D                     LD   A,L   
232B   B4                     OR   H   
232C   28 4F                  JR   Z,expectM_0_2178S43   
232E   CD 84 09               CALL   printStr   
2331   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
233C   CD 84 09               CALL   printStr   
233F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234E   21 01 00               LD   HL,1   
2351   CD D2 08               CALL   prtdec   
2354   CD 84 09               CALL   printStr   
2357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2364   E1                     POP   hl   
2365   E5                     PUSH   hl   
2366   CD D2 08               CALL   prtdec   
2369   E1                     POP   hl   
236A   CD 84 09               CALL   printStr   
236D   20 28 23 00            .CSTR   " (#"   
2371   CD 1A 09               CALL   prthex   
2374   CD 84 09               CALL   printStr   
2377   29 0D 0A 00            .CSTR   ")\r\n"   
237B   76                     HALT      
237C   00                     .CSTR      
237D                EXPECTM_0_2178S43:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "{1}^", 1
237E   31 80 3C               LD   SP,STACK   
2381   CD 8B 09               CALL   init   
2384   CD 82 3B               CALL   execStr   
2387   7B 31 7D 5E 00         .CSTR   "{1}^"   
238C                          ;*Macro unroll:  expect "{1}^",1
238C   E1                     POP   HL   
238D   E5                     PUSH   HL   
238E   11 01 00               LD   DE,1   
2391   B7                     OR   A   
2392   ED 52                  SBC   HL,DE   
2394   7D                     LD   A,L   
2395   B4                     OR   H   
2396   28 4F                  JR   Z,expectM_0_2179S43   
2398   CD 84 09               CALL   printStr   
239B   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
23A6   CD 84 09               CALL   printStr   
23A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B8   21 01 00               LD   HL,1   
23BB   CD D2 08               CALL   prtdec   
23BE   CD 84 09               CALL   printStr   
23C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CE   E1                     POP   hl   
23CF   E5                     PUSH   hl   
23D0   CD D2 08               CALL   prtdec   
23D3   E1                     POP   hl   
23D4   CD 84 09               CALL   printStr   
23D7   20 28 23 00            .CSTR   " (#"   
23DB   CD 1A 09               CALL   prthex   
23DE   CD 84 09               CALL   printStr   
23E1   29 0D 0A 00            .CSTR   ")\r\n"   
23E5   76                     HALT      
23E6   00                     .CSTR      
23E7                EXPECTM_0_2179S43:      
23E7   E1                     POP   HL   
23E8                          ;*Macro unroll:  test "{{1}^}^", 1
23E8   31 80 3C               LD   SP,STACK   
23EB   CD 8B 09               CALL   init   
23EE   CD 82 3B               CALL   execStr   
23F1   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23F9                          ;*Macro unroll:  expect "{{1}^}^",1
23F9   E1                     POP   HL   
23FA   E5                     PUSH   HL   
23FB   11 01 00               LD   DE,1   
23FE   B7                     OR   A   
23FF   ED 52                  SBC   HL,DE   
2401   7D                     LD   A,L   
2402   B4                     OR   H   
2403   28 52                  JR   Z,expectM_0_2180S43   
2405   CD 84 09               CALL   printStr   
2408   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2416   CD 84 09               CALL   printStr   
2419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2428   21 01 00               LD   HL,1   
242B   CD D2 08               CALL   prtdec   
242E   CD 84 09               CALL   printStr   
2431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243E   E1                     POP   hl   
243F   E5                     PUSH   hl   
2440   CD D2 08               CALL   prtdec   
2443   E1                     POP   hl   
2444   CD 84 09               CALL   printStr   
2447   20 28 23 00            .CSTR   " (#"   
244B   CD 1A 09               CALL   prthex   
244E   CD 84 09               CALL   printStr   
2451   29 0D 0A 00            .CSTR   ")\r\n"   
2455   76                     HALT      
2456   00                     .CSTR      
2457                EXPECTM_0_2180S43:      
2457   E1                     POP   HL   
2458                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2458   31 80 3C               LD   SP,STACK   
245B   CD 8B 09               CALL   init   
245E   CD 82 3B               CALL   execStr   
2461   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
246C                          ;*Macro unroll:  expect "{{{1}^}^}^",1
246C   E1                     POP   HL   
246D   E5                     PUSH   HL   
246E   11 01 00               LD   DE,1   
2471   B7                     OR   A   
2472   ED 52                  SBC   HL,DE   
2474   7D                     LD   A,L   
2475   B4                     OR   H   
2476   28 55                  JR   Z,expectM_0_2181S43   
2478   CD 84 09               CALL   printStr   
247B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
248C   CD 84 09               CALL   printStr   
248F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249E   21 01 00               LD   HL,1   
24A1   CD D2 08               CALL   prtdec   
24A4   CD 84 09               CALL   printStr   
24A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B4   E1                     POP   hl   
24B5   E5                     PUSH   hl   
24B6   CD D2 08               CALL   prtdec   
24B9   E1                     POP   hl   
24BA   CD 84 09               CALL   printStr   
24BD   20 28 23 00            .CSTR   " (#"   
24C1   CD 1A 09               CALL   prthex   
24C4   CD 84 09               CALL   printStr   
24C7   29 0D 0A 00            .CSTR   ")\r\n"   
24CB   76                     HALT      
24CC   00                     .CSTR      
24CD                EXPECTM_0_2181S43:      
24CD   E1                     POP   HL   
24CE                          ;*Macro unroll:  test "5 /f {10} ?", 5
24CE   31 80 3C               LD   SP,STACK   
24D1   CD 8B 09               CALL   init   
24D4   CD 82 3B               CALL   execStr   
24D7   35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "5 /f {10} ?"   
24E3                          ;*Macro unroll:  expect "5 /f {10} ?",5
24E3   E1                     POP   HL   
24E4   E5                     PUSH   HL   
24E5   11 05 00               LD   DE,5   
24E8   B7                     OR   A   
24E9   ED 52                  SBC   HL,DE   
24EB   7D                     LD   A,L   
24EC   B4                     OR   H   
24ED   28 56                  JR   Z,expectM_0_2182S43   
24EF   CD 84 09               CALL   printStr   
24F2   43 6F 64 65 3A 20 35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f {10} ?"   
2504   CD 84 09               CALL   printStr   
2507   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2516   21 05 00               LD   HL,5   
2519   CD D2 08               CALL   prtdec   
251C   CD 84 09               CALL   printStr   
251F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
252C   E1                     POP   hl   
252D   E5                     PUSH   hl   
252E   CD D2 08               CALL   prtdec   
2531   E1                     POP   hl   
2532   CD 84 09               CALL   printStr   
2535   20 28 23 00            .CSTR   " (#"   
2539   CD 1A 09               CALL   prthex   
253C   CD 84 09               CALL   printStr   
253F   29 0D 0A 00            .CSTR   ")\r\n"   
2543   76                     HALT      
2544   00                     .CSTR      
2545                EXPECTM_0_2182S43:      
2545   E1                     POP   HL   
2546                          ;*Macro unroll:  test "5 /t {10} ? +", 15
2546   31 80 3C               LD   SP,STACK   
2549   CD 8B 09               CALL   init   
254C   CD 82 3B               CALL   execStr   
254F   35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t {10} ? +"   
255D                          ;*Macro unroll:  expect "5 /t {10} ? +",15
255D   E1                     POP   HL   
255E   E5                     PUSH   HL   
255F   11 0F 00               LD   DE,15   
2562   B7                     OR   A   
2563   ED 52                  SBC   HL,DE   
2565   7D                     LD   A,L   
2566   B4                     OR   H   
2567   28 58                  JR   Z,expectM_0_2183S43   
2569   CD 84 09               CALL   printStr   
256C   43 6F 64 65 3A 20 35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t {10} ? +"   
2580   CD 84 09               CALL   printStr   
2583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2592   21 0F 00               LD   HL,15   
2595   CD D2 08               CALL   prtdec   
2598   CD 84 09               CALL   printStr   
259B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A8   E1                     POP   hl   
25A9   E5                     PUSH   hl   
25AA   CD D2 08               CALL   prtdec   
25AD   E1                     POP   hl   
25AE   CD 84 09               CALL   printStr   
25B1   20 28 23 00            .CSTR   " (#"   
25B5   CD 1A 09               CALL   prthex   
25B8   CD 84 09               CALL   printStr   
25BB   29 0D 0A 00            .CSTR   ")\r\n"   
25BF   76                     HALT      
25C0   00                     .CSTR      
25C1                EXPECTM_0_2183S43:      
25C1   E1                     POP   HL   
25C2                          ;*Macro unroll:  test "1 /f {10} {20} ?? +", 21
25C2   31 80 3C               LD   SP,STACK   
25C5   CD 8B 09               CALL   init   
25C8   CD 82 3B               CALL   execStr   
25CB   31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f {10} {20} ?? +"   
25DF                          ;*Macro unroll:  expect "1 /f {10} {20} ?? +",21
25DF   E1                     POP   HL   
25E0   E5                     PUSH   HL   
25E1   11 15 00               LD   DE,21   
25E4   B7                     OR   A   
25E5   ED 52                  SBC   HL,DE   
25E7   7D                     LD   A,L   
25E8   B4                     OR   H   
25E9   28 5E                  JR   Z,expectM_0_2184S43   
25EB   CD 84 09               CALL   printStr   
25EE   43 6F 64 65 3A 20 31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f {10} {20} ?? +"   
2608   CD 84 09               CALL   printStr   
260B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
261A   21 15 00               LD   HL,21   
261D   CD D2 08               CALL   prtdec   
2620   CD 84 09               CALL   printStr   
2623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2630   E1                     POP   hl   
2631   E5                     PUSH   hl   
2632   CD D2 08               CALL   prtdec   
2635   E1                     POP   hl   
2636   CD 84 09               CALL   printStr   
2639   20 28 23 00            .CSTR   " (#"   
263D   CD 1A 09               CALL   prthex   
2640   CD 84 09               CALL   printStr   
2643   29 0D 0A 00            .CSTR   ")\r\n"   
2647   76                     HALT      
2648   00                     .CSTR      
2649                EXPECTM_0_2184S43:      
2649   E1                     POP   HL   
264A                          ;*Macro unroll:  test "1 /t {10} {20} ?? +", 11
264A   31 80 3C               LD   SP,STACK   
264D   CD 8B 09               CALL   init   
2650   CD 82 3B               CALL   execStr   
2653   31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t {10} {20} ?? +"   
2667                          ;*Macro unroll:  expect "1 /t {10} {20} ?? +",11
2667   E1                     POP   HL   
2668   E5                     PUSH   HL   
2669   11 0B 00               LD   DE,11   
266C   B7                     OR   A   
266D   ED 52                  SBC   HL,DE   
266F   7D                     LD   A,L   
2670   B4                     OR   H   
2671   28 5E                  JR   Z,expectM_0_2185S43   
2673   CD 84 09               CALL   printStr   
2676   43 6F 64 65 3A 20 31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t {10} {20} ?? +"   
2690   CD 84 09               CALL   printStr   
2693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26A2   21 0B 00               LD   HL,11   
26A5   CD D2 08               CALL   prtdec   
26A8   CD 84 09               CALL   printStr   
26AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B8   E1                     POP   hl   
26B9   E5                     PUSH   hl   
26BA   CD D2 08               CALL   prtdec   
26BD   E1                     POP   hl   
26BE   CD 84 09               CALL   printStr   
26C1   20 28 23 00            .CSTR   " (#"   
26C5   CD 1A 09               CALL   prthex   
26C8   CD 84 09               CALL   printStr   
26CB   29 0D 0A 00            .CSTR   ")\r\n"   
26CF   76                     HALT      
26D0   00                     .CSTR      
26D1                EXPECTM_0_2185S43:      
26D1   E1                     POP   HL   
26D2                          ;*Macro unroll:  test "() -2%", $0000
26D2   31 80 3C               LD   SP,STACK   
26D5   CD 8B 09               CALL   init   
26D8   CD 82 3B               CALL   execStr   
26DB   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
26E2                          ;*Macro unroll:  expect "() -2%",$0000
26E2   E1                     POP   HL   
26E3   E5                     PUSH   HL   
26E4   11 00 00               LD   DE,$0000   
26E7   B7                     OR   A   
26E8   ED 52                  SBC   HL,DE   
26EA   7D                     LD   A,L   
26EB   B4                     OR   H   
26EC   28 51                  JR   Z,expectM_0_2186S43   
26EE   CD 84 09               CALL   printStr   
26F1   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
26FE   CD 84 09               CALL   printStr   
2701   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2710   21 00 00               LD   HL,$0000   
2713   CD D2 08               CALL   prtdec   
2716   CD 84 09               CALL   printStr   
2719   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2726   E1                     POP   hl   
2727   E5                     PUSH   hl   
2728   CD D2 08               CALL   prtdec   
272B   E1                     POP   hl   
272C   CD 84 09               CALL   printStr   
272F   20 28 23 00            .CSTR   " (#"   
2733   CD 1A 09               CALL   prthex   
2736   CD 84 09               CALL   printStr   
2739   29 0D 0A 00            .CSTR   ")\r\n"   
273D   76                     HALT      
273E   00                     .CSTR      
273F                EXPECTM_0_2186S43:      
273F   E1                     POP   HL   
2740                          ;*Macro unroll:  test "(a) -1%", $0001
2740   31 80 3C               LD   SP,STACK   
2743   CD 8B 09               CALL   init   
2746   CD 82 3B               CALL   execStr   
2749   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2751                          ;*Macro unroll:  expect "(a) -1%",$0001
2751   E1                     POP   HL   
2752   E5                     PUSH   HL   
2753   11 01 00               LD   DE,$0001   
2756   B7                     OR   A   
2757   ED 52                  SBC   HL,DE   
2759   7D                     LD   A,L   
275A   B4                     OR   H   
275B   28 52                  JR   Z,expectM_0_2187S43   
275D   CD 84 09               CALL   printStr   
2760   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
276E   CD 84 09               CALL   printStr   
2771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2780   21 01 00               LD   HL,$0001   
2783   CD D2 08               CALL   prtdec   
2786   CD 84 09               CALL   printStr   
2789   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2796   E1                     POP   hl   
2797   E5                     PUSH   hl   
2798   CD D2 08               CALL   prtdec   
279B   E1                     POP   hl   
279C   CD 84 09               CALL   printStr   
279F   20 28 23 00            .CSTR   " (#"   
27A3   CD 1A 09               CALL   prthex   
27A6   CD 84 09               CALL   printStr   
27A9   29 0D 0A 00            .CSTR   ")\r\n"   
27AD   76                     HALT      
27AE   00                     .CSTR      
27AF                EXPECTM_0_2187S43:      
27AF   E1                     POP   HL   
27B0                          ;*Macro unroll:  test "(a:) -1%", $0001
27B0   31 80 3C               LD   SP,STACK   
27B3   CD 8B 09               CALL   init   
27B6   CD 82 3B               CALL   execStr   
27B9   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
27C2                          ;*Macro unroll:  expect "(a:) -1%",$0001
27C2   E1                     POP   HL   
27C3   E5                     PUSH   HL   
27C4   11 01 00               LD   DE,$0001   
27C7   B7                     OR   A   
27C8   ED 52                  SBC   HL,DE   
27CA   7D                     LD   A,L   
27CB   B4                     OR   H   
27CC   28 53                  JR   Z,expectM_0_2188S43   
27CE   CD 84 09               CALL   printStr   
27D1   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
27E0   CD 84 09               CALL   printStr   
27E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F2   21 01 00               LD   HL,$0001   
27F5   CD D2 08               CALL   prtdec   
27F8   CD 84 09               CALL   printStr   
27FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2808   E1                     POP   hl   
2809   E5                     PUSH   hl   
280A   CD D2 08               CALL   prtdec   
280D   E1                     POP   hl   
280E   CD 84 09               CALL   printStr   
2811   20 28 23 00            .CSTR   " (#"   
2815   CD 1A 09               CALL   prthex   
2818   CD 84 09               CALL   printStr   
281B   29 0D 0A 00            .CSTR   ")\r\n"   
281F   76                     HALT      
2820   00                     .CSTR      
2821                EXPECTM_0_2188S43:      
2821   E1                     POP   HL   
2822                          ;*Macro unroll:  test "(a:b) -1%", $0102
2822   31 80 3C               LD   SP,STACK   
2825   CD 8B 09               CALL   init   
2828   CD 82 3B               CALL   execStr   
282B   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
2835                          ;*Macro unroll:  expect "(a:b) -1%",$0102
2835   E1                     POP   HL   
2836   E5                     PUSH   HL   
2837   11 02 01               LD   DE,$0102   
283A   B7                     OR   A   
283B   ED 52                  SBC   HL,DE   
283D   7D                     LD   A,L   
283E   B4                     OR   H   
283F   28 54                  JR   Z,expectM_0_2189S43   
2841   CD 84 09               CALL   printStr   
2844   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
2854   CD 84 09               CALL   printStr   
2857   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2866   21 02 01               LD   HL,$0102   
2869   CD D2 08               CALL   prtdec   
286C   CD 84 09               CALL   printStr   
286F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287C   E1                     POP   hl   
287D   E5                     PUSH   hl   
287E   CD D2 08               CALL   prtdec   
2881   E1                     POP   hl   
2882   CD 84 09               CALL   printStr   
2885   20 28 23 00            .CSTR   " (#"   
2889   CD 1A 09               CALL   prthex   
288C   CD 84 09               CALL   printStr   
288F   29 0D 0A 00            .CSTR   ")\r\n"   
2893   76                     HALT      
2894   00                     .CSTR      
2895                EXPECTM_0_2189S43:      
2895   E1                     POP   HL   
2896                          ;*Macro unroll:  test "(:b) -1%", $0101
2896   31 80 3C               LD   SP,STACK   
2899   CD 8B 09               CALL   init   
289C   CD 82 3B               CALL   execStr   
289F   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
28A8                          ;*Macro unroll:  expect "(:b) -1%",$0101
28A8   E1                     POP   HL   
28A9   E5                     PUSH   HL   
28AA   11 01 01               LD   DE,$0101   
28AD   B7                     OR   A   
28AE   ED 52                  SBC   HL,DE   
28B0   7D                     LD   A,L   
28B1   B4                     OR   H   
28B2   28 53                  JR   Z,expectM_0_2190S43   
28B4   CD 84 09               CALL   printStr   
28B7   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
28C6   CD 84 09               CALL   printStr   
28C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28D8   21 01 01               LD   HL,$0101   
28DB   CD D2 08               CALL   prtdec   
28DE   CD 84 09               CALL   printStr   
28E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28EE   E1                     POP   hl   
28EF   E5                     PUSH   hl   
28F0   CD D2 08               CALL   prtdec   
28F3   E1                     POP   hl   
28F4   CD 84 09               CALL   printStr   
28F7   20 28 23 00            .CSTR   " (#"   
28FB   CD 1A 09               CALL   prthex   
28FE   CD 84 09               CALL   printStr   
2901   29 0D 0A 00            .CSTR   ")\r\n"   
2905   76                     HALT      
2906   00                     .CSTR      
2907                EXPECTM_0_2190S43:      
2907   E1                     POP   HL   
2908                          ;*Macro unroll:  test "() {2} ;^", 2
2908   31 80 3C               LD   SP,STACK   
290B   CD 8B 09               CALL   init   
290E   CD 82 3B               CALL   execStr   
2911   28 29 20 7B 32 7D 20 3B 5E 00 .CSTR   "() {2} ;^"   
291B                          ;*Macro unroll:  expect "() {2} ;^",2
291B   E1                     POP   HL   
291C   E5                     PUSH   HL   
291D   11 02 00               LD   DE,2   
2920   B7                     OR   A   
2921   ED 52                  SBC   HL,DE   
2923   7D                     LD   A,L   
2924   B4                     OR   H   
2925   28 54                  JR   Z,expectM_0_2191S43   
2927   CD 84 09               CALL   printStr   
292A   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 3B 5E 00 .CSTR   "Code: ","() {2} ;^"   
293A   CD 84 09               CALL   printStr   
293D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
294C   21 02 00               LD   HL,2   
294F   CD D2 08               CALL   prtdec   
2952   CD 84 09               CALL   printStr   
2955   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2962   E1                     POP   hl   
2963   E5                     PUSH   hl   
2964   CD D2 08               CALL   prtdec   
2967   E1                     POP   hl   
2968   CD 84 09               CALL   printStr   
296B   20 28 23 00            .CSTR   " (#"   
296F   CD 1A 09               CALL   prthex   
2972   CD 84 09               CALL   printStr   
2975   29 0D 0A 00            .CSTR   ")\r\n"   
2979   76                     HALT      
297A   00                     .CSTR      
297B                EXPECTM_0_2191S43:      
297B   E1                     POP   HL   
297C                          ;*Macro unroll:  test "(a) {2} ;^", 2
297C   31 80 3C               LD   SP,STACK   
297F   CD 8B 09               CALL   init   
2982   CD 82 3B               CALL   execStr   
2985   28 61 29 20 7B 32 7D 20 3B 5E 00 .CSTR   "(a) {2} ;^"   
2990                          ;*Macro unroll:  expect "(a) {2} ;^",2
2990   E1                     POP   HL   
2991   E5                     PUSH   HL   
2992   11 02 00               LD   DE,2   
2995   B7                     OR   A   
2996   ED 52                  SBC   HL,DE   
2998   7D                     LD   A,L   
2999   B4                     OR   H   
299A   28 55                  JR   Z,expectM_0_2192S43   
299C   CD 84 09               CALL   printStr   
299F   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 3B 5E 00 .CSTR   "Code: ","(a) {2} ;^"   
29B0   CD 84 09               CALL   printStr   
29B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29C2   21 02 00               LD   HL,2   
29C5   CD D2 08               CALL   prtdec   
29C8   CD 84 09               CALL   printStr   
29CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D8   E1                     POP   hl   
29D9   E5                     PUSH   hl   
29DA   CD D2 08               CALL   prtdec   
29DD   E1                     POP   hl   
29DE   CD 84 09               CALL   printStr   
29E1   20 28 23 00            .CSTR   " (#"   
29E5   CD 1A 09               CALL   prthex   
29E8   CD 84 09               CALL   printStr   
29EB   29 0D 0A 00            .CSTR   ")\r\n"   
29EF   76                     HALT      
29F0   00                     .CSTR      
29F1                EXPECTM_0_2192S43:      
29F1   E1                     POP   HL   
29F2                          ;*Macro unroll:  test "5 (a) {$a} ;^", 5
29F2   31 80 3C               LD   SP,STACK   
29F5   CD 8B 09               CALL   init   
29F8   CD 82 3B               CALL   execStr   
29FB   35 20 28 61 29 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "5 (a) {$a} ;^"   
2A09                          ;*Macro unroll:  expect "5 (a) {$a} ;^",5
2A09   E1                     POP   HL   
2A0A   E5                     PUSH   HL   
2A0B   11 05 00               LD   DE,5   
2A0E   B7                     OR   A   
2A0F   ED 52                  SBC   HL,DE   
2A11   7D                     LD   A,L   
2A12   B4                     OR   H   
2A13   28 58                  JR   Z,expectM_0_2193S43   
2A15   CD 84 09               CALL   printStr   
2A18   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "Code: ","5 (a) {$a} ;^"   
2A2C   CD 84 09               CALL   printStr   
2A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3E   21 05 00               LD   HL,5   
2A41   CD D2 08               CALL   prtdec   
2A44   CD 84 09               CALL   printStr   
2A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A54   E1                     POP   hl   
2A55   E5                     PUSH   hl   
2A56   CD D2 08               CALL   prtdec   
2A59   E1                     POP   hl   
2A5A   CD 84 09               CALL   printStr   
2A5D   20 28 23 00            .CSTR   " (#"   
2A61   CD 1A 09               CALL   prthex   
2A64   CD 84 09               CALL   printStr   
2A67   29 0D 0A 00            .CSTR   ")\r\n"   
2A6B   76                     HALT      
2A6C   00                     .CSTR      
2A6D                EXPECTM_0_2193S43:      
2A6D   E1                     POP   HL   
2A6E                          ;*Macro unroll:  test "5 (a:b) {$a} ;^", 5
2A6E   31 80 3C               LD   SP,STACK   
2A71   CD 8B 09               CALL   init   
2A74   CD 82 3B               CALL   execStr   
2A77   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "5 (a:b) {$a} ;^"   
2A87                          ;*Macro unroll:  expect "5 (a:b) {$a} ;^",5
2A87   E1                     POP   HL   
2A88   E5                     PUSH   HL   
2A89   11 05 00               LD   DE,5   
2A8C   B7                     OR   A   
2A8D   ED 52                  SBC   HL,DE   
2A8F   7D                     LD   A,L   
2A90   B4                     OR   H   
2A91   28 5A                  JR   Z,expectM_0_2194S43   
2A93   CD 84 09               CALL   printStr   
2A96   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 3B 5E 00 .CSTR   "Code: ","5 (a:b) {$a} ;^"   
2AAC   CD 84 09               CALL   printStr   
2AAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ABE   21 05 00               LD   HL,5   
2AC1   CD D2 08               CALL   prtdec   
2AC4   CD 84 09               CALL   printStr   
2AC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD4   E1                     POP   hl   
2AD5   E5                     PUSH   hl   
2AD6   CD D2 08               CALL   prtdec   
2AD9   E1                     POP   hl   
2ADA   CD 84 09               CALL   printStr   
2ADD   20 28 23 00            .CSTR   " (#"   
2AE1   CD 1A 09               CALL   prthex   
2AE4   CD 84 09               CALL   printStr   
2AE7   29 0D 0A 00            .CSTR   ")\r\n"   
2AEB   76                     HALT      
2AEC   00                     .CSTR      
2AED                EXPECTM_0_2194S43:      
2AED   E1                     POP   HL   
2AEE                          ;*Macro unroll:  test "(a) {{2}^} ;^", 2
2AEE   31 80 3C               LD   SP,STACK   
2AF1   CD 8B 09               CALL   init   
2AF4   CD 82 3B               CALL   execStr   
2AF7   28 61 29 20 7B 7B 32 7D 5E 7D 20 3B 5E 00 .CSTR   "(a) {{2}^} ;^"   
2B05                          ;*Macro unroll:  expect "(a) {{2}^} ;^",2
2B05   E1                     POP   HL   
2B06   E5                     PUSH   HL   
2B07   11 02 00               LD   DE,2   
2B0A   B7                     OR   A   
2B0B   ED 52                  SBC   HL,DE   
2B0D   7D                     LD   A,L   
2B0E   B4                     OR   H   
2B0F   28 58                  JR   Z,expectM_0_2195S43   
2B11   CD 84 09               CALL   printStr   
2B14   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","(a) {{2}^} ;^"   
2B28   CD 84 09               CALL   printStr   
2B2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B3A   21 02 00               LD   HL,2   
2B3D   CD D2 08               CALL   prtdec   
2B40   CD 84 09               CALL   printStr   
2B43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B50   E1                     POP   hl   
2B51   E5                     PUSH   hl   
2B52   CD D2 08               CALL   prtdec   
2B55   E1                     POP   hl   
2B56   CD 84 09               CALL   printStr   
2B59   20 28 23 00            .CSTR   " (#"   
2B5D   CD 1A 09               CALL   prthex   
2B60   CD 84 09               CALL   printStr   
2B63   29 0D 0A 00            .CSTR   ")\r\n"   
2B67   76                     HALT      
2B68   00                     .CSTR      
2B69                EXPECTM_0_2195S43:      
2B69   E1                     POP   HL   
2B6A                          ;*Macro unroll:  test "1 5 (a) {{$a}^} ;^", 5
2B6A   31 80 3C               LD   SP,STACK   
2B6D   CD 8B 09               CALL   init   
2B70   CD 82 3B               CALL   execStr   
2B73   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 (a) {{$a}^} ;^"   
2B86                          ;*Macro unroll:  expect "1 5 (a) {{$a}^} ;^",5
2B86   E1                     POP   HL   
2B87   E5                     PUSH   HL   
2B88   11 05 00               LD   DE,5   
2B8B   B7                     OR   A   
2B8C   ED 52                  SBC   HL,DE   
2B8E   7D                     LD   A,L   
2B8F   B4                     OR   H   
2B90   28 5D                  JR   Z,expectM_0_2196S43   
2B92   CD 84 09               CALL   printStr   
2B95   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 (a) {{$a}^} ;^"   
2BAE   CD 84 09               CALL   printStr   
2BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC0   21 05 00               LD   HL,5   
2BC3   CD D2 08               CALL   prtdec   
2BC6   CD 84 09               CALL   printStr   
2BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD6   E1                     POP   hl   
2BD7   E5                     PUSH   hl   
2BD8   CD D2 08               CALL   prtdec   
2BDB   E1                     POP   hl   
2BDC   CD 84 09               CALL   printStr   
2BDF   20 28 23 00            .CSTR   " (#"   
2BE3   CD 1A 09               CALL   prthex   
2BE6   CD 84 09               CALL   printStr   
2BE9   29 0D 0A 00            .CSTR   ")\r\n"   
2BED   76                     HALT      
2BEE   00                     .CSTR      
2BEF                EXPECTM_0_2196S43:      
2BEF   E1                     POP   HL   
2BF0                          ;*Macro unroll:  test "1 5 (ab) {{$a}^} ;^", 1
2BF0   31 80 3C               LD   SP,STACK   
2BF3   CD 8B 09               CALL   init   
2BF6   CD 82 3B               CALL   execStr   
2BF9   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 (ab) {{$a}^} ;^"   
2C0D                          ;*Macro unroll:  expect "1 5 (ab) {{$a}^} ;^",1
2C0D   E1                     POP   HL   
2C0E   E5                     PUSH   HL   
2C0F   11 01 00               LD   DE,1   
2C12   B7                     OR   A   
2C13   ED 52                  SBC   HL,DE   
2C15   7D                     LD   A,L   
2C16   B4                     OR   H   
2C17   28 5E                  JR   Z,expectM_0_2197S43   
2C19   CD 84 09               CALL   printStr   
2C1C   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 (ab) {{$a}^} ;^"   
2C36   CD 84 09               CALL   printStr   
2C39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C48   21 01 00               LD   HL,1   
2C4B   CD D2 08               CALL   prtdec   
2C4E   CD 84 09               CALL   printStr   
2C51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C5E   E1                     POP   hl   
2C5F   E5                     PUSH   hl   
2C60   CD D2 08               CALL   prtdec   
2C63   E1                     POP   hl   
2C64   CD 84 09               CALL   printStr   
2C67   20 28 23 00            .CSTR   " (#"   
2C6B   CD 1A 09               CALL   prthex   
2C6E   CD 84 09               CALL   printStr   
2C71   29 0D 0A 00            .CSTR   ")\r\n"   
2C75   76                     HALT      
2C76   00                     .CSTR      
2C77                EXPECTM_0_2197S43:      
2C77   E1                     POP   HL   
2C78                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}^} ;^", 7
2C78   31 80 3C               LD   SP,STACK   
2C7B   CD 8B 09               CALL   init   
2C7E   CD 82 3B               CALL   execStr   
2C81   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 (a) {{$a 2 +}^} ;^"   
2C98                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}^} ;^",7
2C98   E1                     POP   HL   
2C99   E5                     PUSH   HL   
2C9A   11 07 00               LD   DE,7   
2C9D   B7                     OR   A   
2C9E   ED 52                  SBC   HL,DE   
2CA0   7D                     LD   A,L   
2CA1   B4                     OR   H   
2CA2   28 61                  JR   Z,expectM_0_2198S43   
2CA4   CD 84 09               CALL   printStr   
2CA7   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}^} ;^"   
2CC4   CD 84 09               CALL   printStr   
2CC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CD6   21 07 00               LD   HL,7   
2CD9   CD D2 08               CALL   prtdec   
2CDC   CD 84 09               CALL   printStr   
2CDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CEC   E1                     POP   hl   
2CED   E5                     PUSH   hl   
2CEE   CD D2 08               CALL   prtdec   
2CF1   E1                     POP   hl   
2CF2   CD 84 09               CALL   printStr   
2CF5   20 28 23 00            .CSTR   " (#"   
2CF9   CD 1A 09               CALL   prthex   
2CFC   CD 84 09               CALL   printStr   
2CFF   29 0D 0A 00            .CSTR   ")\r\n"   
2D03   76                     HALT      
2D04   00                     .CSTR      
2D05                EXPECTM_0_2198S43:      
2D05   E1                     POP   HL   
2D06                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}^} ;^", 6
2D06   31 80 3C               LD   SP,STACK   
2D09   CD 8B 09               CALL   init   
2D0C   CD 82 3B               CALL   execStr   
2D0F   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "1 5 (ab) {{$a $b +}^} ;^"   
2D28                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}^} ;^",6
2D28   E1                     POP   HL   
2D29   E5                     PUSH   HL   
2D2A   11 06 00               LD   DE,6   
2D2D   B7                     OR   A   
2D2E   ED 52                  SBC   HL,DE   
2D30   7D                     LD   A,L   
2D31   B4                     OR   H   
2D32   28 63                  JR   Z,expectM_0_2199S43   
2D34   CD 84 09               CALL   printStr   
2D37   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 20 3B 5E 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}^} ;^"   
2D56   CD 84 09               CALL   printStr   
2D59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D68   21 06 00               LD   HL,6   
2D6B   CD D2 08               CALL   prtdec   
2D6E   CD 84 09               CALL   printStr   
2D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D7E   E1                     POP   hl   
2D7F   E5                     PUSH   hl   
2D80   CD D2 08               CALL   prtdec   
2D83   E1                     POP   hl   
2D84   CD 84 09               CALL   printStr   
2D87   20 28 23 00            .CSTR   " (#"   
2D8B   CD 1A 09               CALL   prthex   
2D8E   CD 84 09               CALL   printStr   
2D91   29 0D 0A 00            .CSTR   ")\r\n"   
2D95   76                     HALT      
2D96   00                     .CSTR      
2D97                EXPECTM_0_2199S43:      
2D97   E1                     POP   HL   
2D98                          ;*Macro unroll:  test "(a) {2} ; x= 1 x^", 2
2D98   31 80 3C               LD   SP,STACK   
2D9B   CD 8B 09               CALL   init   
2D9E   CD 82 3B               CALL   execStr   
2DA1   28 61 29 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "(a) {2} ; x= 1 x^"   
2DB3                          ;*Macro unroll:  expect "(a) {2} ; x= 1 x^",2
2DB3   E1                     POP   HL   
2DB4   E5                     PUSH   HL   
2DB5   11 02 00               LD   DE,2   
2DB8   B7                     OR   A   
2DB9   ED 52                  SBC   HL,DE   
2DBB   7D                     LD   A,L   
2DBC   B4                     OR   H   
2DBD   28 5C                  JR   Z,expectM_0_2200S43   
2DBF   CD 84 09               CALL   printStr   
2DC2   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","(a) {2} ; x= 1 x^"   
2DDA   CD 84 09               CALL   printStr   
2DDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEC   21 02 00               LD   HL,2   
2DEF   CD D2 08               CALL   prtdec   
2DF2   CD 84 09               CALL   printStr   
2DF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E02   E1                     POP   hl   
2E03   E5                     PUSH   hl   
2E04   CD D2 08               CALL   prtdec   
2E07   E1                     POP   hl   
2E08   CD 84 09               CALL   printStr   
2E0B   20 28 23 00            .CSTR   " (#"   
2E0F   CD 1A 09               CALL   prthex   
2E12   CD 84 09               CALL   printStr   
2E15   29 0D 0A 00            .CSTR   ")\r\n"   
2E19   76                     HALT      
2E1A   00                     .CSTR      
2E1B                EXPECTM_0_2200S43:      
2E1B   E1                     POP   HL   
2E1C                          ;*Macro unroll:  test "(a) {$a} ; x= 0 1 x^", 1
2E1C   31 80 3C               LD   SP,STACK   
2E1F   CD 8B 09               CALL   init   
2E22   CD 82 3B               CALL   execStr   
2E25   28 61 29 20 7B 24 61 7D 20 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "(a) {$a} ; x= 0 1 x^"   
2E3A                          ;*Macro unroll:  expect "(a) {$a} ; x= 0 1 x^",1
2E3A   E1                     POP   HL   
2E3B   E5                     PUSH   HL   
2E3C   11 01 00               LD   DE,1   
2E3F   B7                     OR   A   
2E40   ED 52                  SBC   HL,DE   
2E42   7D                     LD   A,L   
2E43   B4                     OR   H   
2E44   28 5F                  JR   Z,expectM_0_2201S43   
2E46   CD 84 09               CALL   printStr   
2E49   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","(a) {$a} ; x= 0 1 x^"   
2E64   CD 84 09               CALL   printStr   
2E67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E76   21 01 00               LD   HL,1   
2E79   CD D2 08               CALL   prtdec   
2E7C   CD 84 09               CALL   printStr   
2E7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E8C   E1                     POP   hl   
2E8D   E5                     PUSH   hl   
2E8E   CD D2 08               CALL   prtdec   
2E91   E1                     POP   hl   
2E92   CD 84 09               CALL   printStr   
2E95   20 28 23 00            .CSTR   " (#"   
2E99   CD 1A 09               CALL   prthex   
2E9C   CD 84 09               CALL   printStr   
2E9F   29 0D 0A 00            .CSTR   ")\r\n"   
2EA3   76                     HALT      
2EA4   00                     .CSTR      
2EA5                EXPECTM_0_2201S43:      
2EA5   E1                     POP   HL   
2EA6                          ;*Macro unroll:  test "(ab) {$b} ; x= 1 2 x^", 2
2EA6   31 80 3C               LD   SP,STACK   
2EA9   CD 8B 09               CALL   init   
2EAC   CD 82 3B               CALL   execStr   
2EAF   28 61 62 29 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(ab) {$b} ; x= 1 2 x^"   
2EC5                          ;*Macro unroll:  expect "(ab) {$b} ; x= 1 2 x^",2
2EC5   E1                     POP   HL   
2EC6   E5                     PUSH   HL   
2EC7   11 02 00               LD   DE,2   
2ECA   B7                     OR   A   
2ECB   ED 52                  SBC   HL,DE   
2ECD   7D                     LD   A,L   
2ECE   B4                     OR   H   
2ECF   28 60                  JR   Z,expectM_0_2202S43   
2ED1   CD 84 09               CALL   printStr   
2ED4   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(ab) {$b} ; x= 1 2 x^"   
2EF0   CD 84 09               CALL   printStr   
2EF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F02   21 02 00               LD   HL,2   
2F05   CD D2 08               CALL   prtdec   
2F08   CD 84 09               CALL   printStr   
2F0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F18   E1                     POP   hl   
2F19   E5                     PUSH   hl   
2F1A   CD D2 08               CALL   prtdec   
2F1D   E1                     POP   hl   
2F1E   CD 84 09               CALL   printStr   
2F21   20 28 23 00            .CSTR   " (#"   
2F25   CD 1A 09               CALL   prthex   
2F28   CD 84 09               CALL   printStr   
2F2B   29 0D 0A 00            .CSTR   ")\r\n"   
2F2F   76                     HALT      
2F30   00                     .CSTR      
2F31                EXPECTM_0_2202S43:      
2F31   E1                     POP   HL   
2F32                          ;*Macro unroll:  test "(a:b) {$a} ; x= 1 2 x^", 2
2F32   31 80 3C               LD   SP,STACK   
2F35   CD 8B 09               CALL   init   
2F38   CD 82 3B               CALL   execStr   
2F3B   28 61 3A 62 29 20 7B 24 61 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(a:b) {$a} ; x= 1 2 x^"   
2F52                          ;*Macro unroll:  expect "(a:b) {$a} ; x= 1 2 x^",2
2F52   E1                     POP   HL   
2F53   E5                     PUSH   HL   
2F54   11 02 00               LD   DE,2   
2F57   B7                     OR   A   
2F58   ED 52                  SBC   HL,DE   
2F5A   7D                     LD   A,L   
2F5B   B4                     OR   H   
2F5C   28 61                  JR   Z,expectM_0_2203S43   
2F5E   CD 84 09               CALL   printStr   
2F61   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {$a} ; x= 1 2 x^"   
2F7E   CD 84 09               CALL   printStr   
2F81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F90   21 02 00               LD   HL,2   
2F93   CD D2 08               CALL   prtdec   
2F96   CD 84 09               CALL   printStr   
2F99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FA6   E1                     POP   hl   
2FA7   E5                     PUSH   hl   
2FA8   CD D2 08               CALL   prtdec   
2FAB   E1                     POP   hl   
2FAC   CD 84 09               CALL   printStr   
2FAF   20 28 23 00            .CSTR   " (#"   
2FB3   CD 1A 09               CALL   prthex   
2FB6   CD 84 09               CALL   printStr   
2FB9   29 0D 0A 00            .CSTR   ")\r\n"   
2FBD   76                     HALT      
2FBE   00                     .CSTR      
2FBF                EXPECTM_0_2203S43:      
2FBF   E1                     POP   HL   
2FC0                          ;*Macro unroll:  test "(ab) {$b} ; x= 1 2 x^", 2
2FC0   31 80 3C               LD   SP,STACK   
2FC3   CD 8B 09               CALL   init   
2FC6   CD 82 3B               CALL   execStr   
2FC9   28 61 62 29 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "(ab) {$b} ; x= 1 2 x^"   
2FDF                          ;*Macro unroll:  expect "(ab) {$b} ; x= 1 2 x^",2
2FDF   E1                     POP   HL   
2FE0   E5                     PUSH   HL   
2FE1   11 02 00               LD   DE,2   
2FE4   B7                     OR   A   
2FE5   ED 52                  SBC   HL,DE   
2FE7   7D                     LD   A,L   
2FE8   B4                     OR   H   
2FE9   28 60                  JR   Z,expectM_0_2204S43   
2FEB   CD 84 09               CALL   printStr   
2FEE   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","(ab) {$b} ; x= 1 2 x^"   
300A   CD 84 09               CALL   printStr   
300D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
301C   21 02 00               LD   HL,2   
301F   CD D2 08               CALL   prtdec   
3022   CD 84 09               CALL   printStr   
3025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3032   E1                     POP   hl   
3033   E5                     PUSH   hl   
3034   CD D2 08               CALL   prtdec   
3037   E1                     POP   hl   
3038   CD 84 09               CALL   printStr   
303B   20 28 23 00            .CSTR   " (#"   
303F   CD 1A 09               CALL   prthex   
3042   CD 84 09               CALL   printStr   
3045   29 0D 0A 00            .CSTR   ")\r\n"   
3049   76                     HALT      
304A   00                     .CSTR      
304B                EXPECTM_0_2204S43:      
304B   E1                     POP   HL   
304C                          ;*Macro unroll:  test "(ab) {$b $a} ; x= 10 15 x^ -", 5
304C   31 80 3C               LD   SP,STACK   
304F   CD 8B 09               CALL   init   
3052   CD 82 3B               CALL   execStr   
3055   28 61 62 29 20 7B 24 62 20 24 61 7D 20 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "(ab) {$b $a} ; x= 10 15 x^ -"   
3072                          ;*Macro unroll:  expect "(ab) {$b $a} ; x= 10 15 x^ -",5
3072   E1                     POP   HL   
3073   E5                     PUSH   HL   
3074   11 05 00               LD   DE,5   
3077   B7                     OR   A   
3078   ED 52                  SBC   HL,DE   
307A   7D                     LD   A,L   
307B   B4                     OR   H   
307C   28 67                  JR   Z,expectM_0_2205S43   
307E   CD 84 09               CALL   printStr   
3081   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} ; x= 10 15 x^ -"   
30A4   CD 84 09               CALL   printStr   
30A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B6   21 05 00               LD   HL,5   
30B9   CD D2 08               CALL   prtdec   
30BC   CD 84 09               CALL   printStr   
30BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30CC   E1                     POP   hl   
30CD   E5                     PUSH   hl   
30CE   CD D2 08               CALL   prtdec   
30D1   E1                     POP   hl   
30D2   CD 84 09               CALL   printStr   
30D5   20 28 23 00            .CSTR   " (#"   
30D9   CD 1A 09               CALL   prthex   
30DC   CD 84 09               CALL   printStr   
30DF   29 0D 0A 00            .CSTR   ")\r\n"   
30E3   76                     HALT      
30E4   00                     .CSTR      
30E5                EXPECTM_0_2205S43:      
30E5   E1                     POP   HL   
30E6                          ;*Macro unroll:  test "(a:b) {2} ; x= 1 x^", 2
30E6   31 80 3C               LD   SP,STACK   
30E9   CD 8B 09               CALL   init   
30EC   CD 82 3B               CALL   execStr   
30EF   28 61 3A 62 29 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "(a:b) {2} ; x= 1 x^"   
3103                          ;*Macro unroll:  expect "(a:b) {2} ; x= 1 x^",2
3103   E1                     POP   HL   
3104   E5                     PUSH   HL   
3105   11 02 00               LD   DE,2   
3108   B7                     OR   A   
3109   ED 52                  SBC   HL,DE   
310B   7D                     LD   A,L   
310C   B4                     OR   H   
310D   28 5E                  JR   Z,expectM_0_2206S43   
310F   CD 84 09               CALL   printStr   
3112   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","(a:b) {2} ; x= 1 x^"   
312C   CD 84 09               CALL   printStr   
312F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
313E   21 02 00               LD   HL,2   
3141   CD D2 08               CALL   prtdec   
3144   CD 84 09               CALL   printStr   
3147   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3154   E1                     POP   hl   
3155   E5                     PUSH   hl   
3156   CD D2 08               CALL   prtdec   
3159   E1                     POP   hl   
315A   CD 84 09               CALL   printStr   
315D   20 28 23 00            .CSTR   " (#"   
3161   CD 1A 09               CALL   prthex   
3164   CD 84 09               CALL   printStr   
3167   29 0D 0A 00            .CSTR   ")\r\n"   
316B   76                     HALT      
316C   00                     .CSTR      
316D                EXPECTM_0_2206S43:      
316D   E1                     POP   HL   
316E                          ;*Macro unroll:  test "(:b) {100 $b= $b} ; x= x^", 100
316E   31 80 3C               LD   SP,STACK   
3171   CD 8B 09               CALL   init   
3174   CD 82 3B               CALL   execStr   
3177   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 78 5E 00 .CSTR   "(:b) {100 $b= $b} ; x= x^"   
3191                          ;*Macro unroll:  expect "(:b) {100 $b= $b} ; x= x^",100
3191   E1                     POP   HL   
3192   E5                     PUSH   HL   
3193   11 64 00               LD   DE,100   
3196   B7                     OR   A   
3197   ED 52                  SBC   HL,DE   
3199   7D                     LD   A,L   
319A   B4                     OR   H   
319B   28 64                  JR   Z,expectM_0_2207S43   
319D   CD 84 09               CALL   printStr   
31A0   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","(:b) {100 $b= $b} ; x= x^"   
31C0   CD 84 09               CALL   printStr   
31C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D2   21 64 00               LD   HL,100   
31D5   CD D2 08               CALL   prtdec   
31D8   CD 84 09               CALL   printStr   
31DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31E8   E1                     POP   hl   
31E9   E5                     PUSH   hl   
31EA   CD D2 08               CALL   prtdec   
31ED   E1                     POP   hl   
31EE   CD 84 09               CALL   printStr   
31F1   20 28 23 00            .CSTR   " (#"   
31F5   CD 1A 09               CALL   prthex   
31F8   CD 84 09               CALL   printStr   
31FB   29 0D 0A 00            .CSTR   ")\r\n"   
31FF   76                     HALT      
3200   00                     .CSTR      
3201                EXPECTM_0_2207S43:      
3201   E1                     POP   HL   
3202                          ;*Macro unroll:  test "(a:b) {1 $b= $b} ; x= 2 x^", 1
3202   31 80 3C               LD   SP,STACK   
3205   CD 8B 09               CALL   init   
3208   CD 82 3B               CALL   execStr   
320B   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "(a:b) {1 $b= $b} ; x= 2 x^"   
3226                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} ; x= 2 x^",1
3226   E1                     POP   HL   
3227   E5                     PUSH   HL   
3228   11 01 00               LD   DE,1   
322B   B7                     OR   A   
322C   ED 52                  SBC   HL,DE   
322E   7D                     LD   A,L   
322F   B4                     OR   H   
3230   28 65                  JR   Z,expectM_0_2208S43   
3232   CD 84 09               CALL   printStr   
3235   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {1 $b= $b} ; x= 2 x^"   
3256   CD 84 09               CALL   printStr   
3259   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3268   21 01 00               LD   HL,1   
326B   CD D2 08               CALL   prtdec   
326E   CD 84 09               CALL   printStr   
3271   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
327E   E1                     POP   hl   
327F   E5                     PUSH   hl   
3280   CD D2 08               CALL   prtdec   
3283   E1                     POP   hl   
3284   CD 84 09               CALL   printStr   
3287   20 28 23 00            .CSTR   " (#"   
328B   CD 1A 09               CALL   prthex   
328E   CD 84 09               CALL   printStr   
3291   29 0D 0A 00            .CSTR   ")\r\n"   
3295   76                     HALT      
3296   00                     .CSTR      
3297                EXPECTM_0_2208S43:      
3297   E1                     POP   HL   
3298                          ;*Macro unroll:  test "(a:b) {$a $b= $b} ; x= 2 x^", 2
3298   31 80 3C               LD   SP,STACK   
329B   CD 8B 09               CALL   init   
329E   CD 82 3B               CALL   execStr   
32A1   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "(a:b) {$a $b= $b} ; x= 2 x^"   
32BD                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} ; x= 2 x^",2
32BD   E1                     POP   HL   
32BE   E5                     PUSH   HL   
32BF   11 02 00               LD   DE,2   
32C2   B7                     OR   A   
32C3   ED 52                  SBC   HL,DE   
32C5   7D                     LD   A,L   
32C6   B4                     OR   H   
32C7   28 66                  JR   Z,expectM_0_2209S43   
32C9   CD 84 09               CALL   printStr   
32CC   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","(a:b) {$a $b= $b} ; x= 2 x^"   
32EE   CD 84 09               CALL   printStr   
32F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3300   21 02 00               LD   HL,2   
3303   CD D2 08               CALL   prtdec   
3306   CD 84 09               CALL   printStr   
3309   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3316   E1                     POP   hl   
3317   E5                     PUSH   hl   
3318   CD D2 08               CALL   prtdec   
331B   E1                     POP   hl   
331C   CD 84 09               CALL   printStr   
331F   20 28 23 00            .CSTR   " (#"   
3323   CD 1A 09               CALL   prthex   
3326   CD 84 09               CALL   printStr   
3329   29 0D 0A 00            .CSTR   ")\r\n"   
332D   76                     HALT      
332E   00                     .CSTR      
332F                EXPECTM_0_2209S43:      
332F   E1                     POP   HL   
3330                          ;*Macro unroll:  test "1 10 20 (ab) {/t {$a} {$b} ??} ;^ +", 11
3330   31 80 3C               LD   SP,STACK   
3333   CD 8B 09               CALL   init   
3336   CD 82 3B               CALL   execStr   
3339   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "1 10 20 (ab) {/t {$a} {$b} ??} ;^ +"   
335D                          ;*Macro unroll:  expect "1 10 20 (ab) {/t {$a} {$b} ??} ;^ +",11
335D   E1                     POP   HL   
335E   E5                     PUSH   HL   
335F   11 0B 00               LD   DE,11   
3362   B7                     OR   A   
3363   ED 52                  SBC   HL,DE   
3365   7D                     LD   A,L   
3366   B4                     OR   H   
3367   28 6E                  JR   Z,expectM_0_2210S43   
3369   CD 84 09               CALL   printStr   
336C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/t {$a} {$b} ??} ;^ +"   
3396   CD 84 09               CALL   printStr   
3399   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33A8   21 0B 00               LD   HL,11   
33AB   CD D2 08               CALL   prtdec   
33AE   CD 84 09               CALL   printStr   
33B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33BE   E1                     POP   hl   
33BF   E5                     PUSH   hl   
33C0   CD D2 08               CALL   prtdec   
33C3   E1                     POP   hl   
33C4   CD 84 09               CALL   printStr   
33C7   20 28 23 00            .CSTR   " (#"   
33CB   CD 1A 09               CALL   prthex   
33CE   CD 84 09               CALL   printStr   
33D1   29 0D 0A 00            .CSTR   ")\r\n"   
33D5   76                     HALT      
33D6   00                     .CSTR      
33D7                EXPECTM_0_2210S43:      
33D7   E1                     POP   HL   
33D8                          ;*Macro unroll:  test "1 10 20 (ab) {/f {$a} {$b} ??} ;^ +", 21
33D8   31 80 3C               LD   SP,STACK   
33DB   CD 8B 09               CALL   init   
33DE   CD 82 3B               CALL   execStr   
33E1   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "1 10 20 (ab) {/f {$a} {$b} ??} ;^ +"   
3405                          ;*Macro unroll:  expect "1 10 20 (ab) {/f {$a} {$b} ??} ;^ +",21
3405   E1                     POP   HL   
3406   E5                     PUSH   HL   
3407   11 15 00               LD   DE,21   
340A   B7                     OR   A   
340B   ED 52                  SBC   HL,DE   
340D   7D                     LD   A,L   
340E   B4                     OR   H   
340F   28 6E                  JR   Z,expectM_0_2211S43   
3411   CD 84 09               CALL   printStr   
3414   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {/f {$a} {$b} ??} ;^ +"   
343E   CD 84 09               CALL   printStr   
3441   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3450   21 15 00               LD   HL,21   
3453   CD D2 08               CALL   prtdec   
3456   CD 84 09               CALL   printStr   
3459   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3466   E1                     POP   hl   
3467   E5                     PUSH   hl   
3468   CD D2 08               CALL   prtdec   
346B   E1                     POP   hl   
346C   CD 84 09               CALL   printStr   
346F   20 28 23 00            .CSTR   " (#"   
3473   CD 1A 09               CALL   prthex   
3476   CD 84 09               CALL   printStr   
3479   29 0D 0A 00            .CSTR   ")\r\n"   
347D   76                     HALT      
347E   00                     .CSTR      
347F                EXPECTM_0_2211S43:      
347F   E1                     POP   HL   
3480                          ;*Macro unroll:  test "[10 20 30] 1%", 20
3480   31 80 3C               LD   SP,STACK   
3483   CD 8B 09               CALL   init   
3486   CD 82 3B               CALL   execStr   
3489   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3497                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3497   E1                     POP   HL   
3498   E5                     PUSH   HL   
3499   11 14 00               LD   DE,20   
349C   B7                     OR   A   
349D   ED 52                  SBC   HL,DE   
349F   7D                     LD   A,L   
34A0   B4                     OR   H   
34A1   28 58                  JR   Z,expectM_0_2212S43   
34A3   CD 84 09               CALL   printStr   
34A6   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
34BA   CD 84 09               CALL   printStr   
34BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34CC   21 14 00               LD   HL,20   
34CF   CD D2 08               CALL   prtdec   
34D2   CD 84 09               CALL   printStr   
34D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34E2   E1                     POP   hl   
34E3   E5                     PUSH   hl   
34E4   CD D2 08               CALL   prtdec   
34E7   E1                     POP   hl   
34E8   CD 84 09               CALL   printStr   
34EB   20 28 23 00            .CSTR   " (#"   
34EF   CD 1A 09               CALL   prthex   
34F2   CD 84 09               CALL   printStr   
34F5   29 0D 0A 00            .CSTR   ")\r\n"   
34F9   76                     HALT      
34FA   00                     .CSTR      
34FB                EXPECTM_0_2212S43:      
34FB   E1                     POP   HL   
34FC                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
34FC   31 80 3C               LD   SP,STACK   
34FF   CD 8B 09               CALL   init   
3502   CD 82 3B               CALL   execStr   
3505   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3513                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3513   E1                     POP   HL   
3514   E5                     PUSH   HL   
3515   11 02 00               LD   DE,2   
3518   B7                     OR   A   
3519   ED 52                  SBC   HL,DE   
351B   7D                     LD   A,L   
351C   B4                     OR   H   
351D   28 58                  JR   Z,expectM_0_2213S43   
351F   CD 84 09               CALL   printStr   
3522   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3536   CD 84 09               CALL   printStr   
3539   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3548   21 02 00               LD   HL,2   
354B   CD D2 08               CALL   prtdec   
354E   CD 84 09               CALL   printStr   
3551   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
355E   E1                     POP   hl   
355F   E5                     PUSH   hl   
3560   CD D2 08               CALL   prtdec   
3563   E1                     POP   hl   
3564   CD 84 09               CALL   printStr   
3567   20 28 23 00            .CSTR   " (#"   
356B   CD 1A 09               CALL   prthex   
356E   CD 84 09               CALL   printStr   
3571   29 0D 0A 00            .CSTR   ")\r\n"   
3575   76                     HALT      
3576   00                     .CSTR      
3577                EXPECTM_0_2213S43:      
3577   E1                     POP   HL   
3578                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3578   31 80 3C               LD   SP,STACK   
357B   CD 8B 09               CALL   init   
357E   CD 82 3B               CALL   execStr   
3581   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3595                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3595   E1                     POP   HL   
3596   E5                     PUSH   HL   
3597   11 42 00               LD   DE,66   
359A   B7                     OR   A   
359B   ED 52                  SBC   HL,DE   
359D   7D                     LD   A,L   
359E   B4                     OR   H   
359F   28 5E                  JR   Z,expectM_0_2214S43   
35A1   CD 84 09               CALL   printStr   
35A4   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
35BE   CD 84 09               CALL   printStr   
35C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D0   21 42 00               LD   HL,66   
35D3   CD D2 08               CALL   prtdec   
35D6   CD 84 09               CALL   printStr   
35D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35E6   E1                     POP   hl   
35E7   E5                     PUSH   hl   
35E8   CD D2 08               CALL   prtdec   
35EB   E1                     POP   hl   
35EC   CD 84 09               CALL   printStr   
35EF   20 28 23 00            .CSTR   " (#"   
35F3   CD 1A 09               CALL   prthex   
35F6   CD 84 09               CALL   printStr   
35F9   29 0D 0A 00            .CSTR   ")\r\n"   
35FD   76                     HALT      
35FE   00                     .CSTR      
35FF                EXPECTM_0_2214S43:      
35FF   E1                     POP   HL   
3600                          ;*Macro unroll:  test "0 [{10} {20} {30}] /s", 10
3600   31 80 3C               LD   SP,STACK   
3603   CD 8B 09               CALL   init   
3606   CD 82 3B               CALL   execStr   
3609   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "0 [{10} {20} {30}] /s"   
361F                          ;*Macro unroll:  expect "0 [{10} {20} {30}] /s",10
361F   E1                     POP   HL   
3620   E5                     PUSH   HL   
3621   11 0A 00               LD   DE,10   
3624   B7                     OR   A   
3625   ED 52                  SBC   HL,DE   
3627   7D                     LD   A,L   
3628   B4                     OR   H   
3629   28 60                  JR   Z,expectM_0_2215S43   
362B   CD 84 09               CALL   printStr   
362E   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 2F 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] /s"   
364A   CD 84 09               CALL   printStr   
364D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
365C   21 0A 00               LD   HL,10   
365F   CD D2 08               CALL   prtdec   
3662   CD 84 09               CALL   printStr   
3665   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3672   E1                     POP   hl   
3673   E5                     PUSH   hl   
3674   CD D2 08               CALL   prtdec   
3677   E1                     POP   hl   
3678   CD 84 09               CALL   printStr   
367B   20 28 23 00            .CSTR   " (#"   
367F   CD 1A 09               CALL   prthex   
3682   CD 84 09               CALL   printStr   
3685   29 0D 0A 00            .CSTR   ")\r\n"   
3689   76                     HALT      
368A   00                     .CSTR      
368B                EXPECTM_0_2215S43:      
368B   E1                     POP   HL   
368C                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] /s} ;^", 10
368C   31 80 3C               LD   SP,STACK   
368F   CD 8B 09               CALL   init   
3692   CD 82 3B               CALL   execStr   
3695   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] /s} ;^"   
36B8                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] /s} ;^",10
36B8   E1                     POP   HL   
36B9   E5                     PUSH   HL   
36BA   11 0A 00               LD   DE,10   
36BD   B7                     OR   A   
36BE   ED 52                  SBC   HL,DE   
36C0   7D                     LD   A,L   
36C1   B4                     OR   H   
36C2   28 6D                  JR   Z,expectM_0_2216S43   
36C4   CD 84 09               CALL   printStr   
36C7   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] /s} ;^"   
36F0   CD 84 09               CALL   printStr   
36F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3702   21 0A 00               LD   HL,10   
3705   CD D2 08               CALL   prtdec   
3708   CD 84 09               CALL   printStr   
370B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3718   E1                     POP   hl   
3719   E5                     PUSH   hl   
371A   CD D2 08               CALL   prtdec   
371D   E1                     POP   hl   
371E   CD 84 09               CALL   printStr   
3721   20 28 23 00            .CSTR   " (#"   
3725   CD 1A 09               CALL   prthex   
3728   CD 84 09               CALL   printStr   
372B   29 0D 0A 00            .CSTR   ")\r\n"   
372F   76                     HALT      
3730   00                     .CSTR      
3731                EXPECTM_0_2216S43:      
3731   E1                     POP   HL   
3732                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] /s} ;^", 10
3732   31 80 3C               LD   SP,STACK   
3735   CD 8B 09               CALL   init   
3738   CD 82 3B               CALL   execStr   
373B   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] /s} ;^"   
3760                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] /s} ;^",10
3760   E1                     POP   HL   
3761   E5                     PUSH   HL   
3762   11 0A 00               LD   DE,10   
3765   B7                     OR   A   
3766   ED 52                  SBC   HL,DE   
3768   7D                     LD   A,L   
3769   B4                     OR   H   
376A   28 6F                  JR   Z,expectM_0_2217S43   
376C   CD 84 09               CALL   printStr   
376F   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] /s} ;^"   
379A   CD 84 09               CALL   printStr   
379D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37AC   21 0A 00               LD   HL,10   
37AF   CD D2 08               CALL   prtdec   
37B2   CD 84 09               CALL   printStr   
37B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37C2   E1                     POP   hl   
37C3   E5                     PUSH   hl   
37C4   CD D2 08               CALL   prtdec   
37C7   E1                     POP   hl   
37C8   CD 84 09               CALL   printStr   
37CB   20 28 23 00            .CSTR   " (#"   
37CF   CD 1A 09               CALL   prthex   
37D2   CD 84 09               CALL   printStr   
37D5   29 0D 0A 00            .CSTR   ")\r\n"   
37D9   76                     HALT      
37DA   00                     .CSTR      
37DB                EXPECTM_0_2217S43:      
37DB   E1                     POP   HL   
37DC                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] /s} ;^", 20
37DC   31 80 3C               LD   SP,STACK   
37DF   CD 8B 09               CALL   init   
37E2   CD 82 3B               CALL   execStr   
37E5   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] /s} ;^"   
380A                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] /s} ;^",20
380A   E1                     POP   HL   
380B   E5                     PUSH   HL   
380C   11 14 00               LD   DE,20   
380F   B7                     OR   A   
3810   ED 52                  SBC   HL,DE   
3812   7D                     LD   A,L   
3813   B4                     OR   H   
3814   28 6F                  JR   Z,expectM_0_2218S43   
3816   CD 84 09               CALL   printStr   
3819   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 2F 73 7D 20 3B 5E 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] /s} ;^"   
3844   CD 84 09               CALL   printStr   
3847   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3856   21 14 00               LD   HL,20   
3859   CD D2 08               CALL   prtdec   
385C   CD 84 09               CALL   printStr   
385F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
386C   E1                     POP   hl   
386D   E5                     PUSH   hl   
386E   CD D2 08               CALL   prtdec   
3871   E1                     POP   hl   
3872   CD 84 09               CALL   printStr   
3875   20 28 23 00            .CSTR   " (#"   
3879   CD 1A 09               CALL   prthex   
387C   CD 84 09               CALL   printStr   
387F   29 0D 0A 00            .CSTR   ")\r\n"   
3883   76                     HALT      
3884   00                     .CSTR      
3885                EXPECTM_0_2218S43:      
3885   E1                     POP   HL   
3886                          ;*Macro unroll:  test "5 [4] (a) {$a} ; /p ^", 4
3886   31 80 3C               LD   SP,STACK   
3889   CD 8B 09               CALL   init   
388C   CD 82 3B               CALL   execStr   
388F   35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] (a) {$a} ; /p ^"   
38A5                          ;*Macro unroll:  expect "5 [4] (a) {$a} ; /p ^",4
38A5   E1                     POP   HL   
38A6   E5                     PUSH   HL   
38A7   11 04 00               LD   DE,4   
38AA   B7                     OR   A   
38AB   ED 52                  SBC   HL,DE   
38AD   7D                     LD   A,L   
38AE   B4                     OR   H   
38AF   28 60                  JR   Z,expectM_0_2219S43   
38B1   CD 84 09               CALL   printStr   
38B4   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 29 20 7B 24 61 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] (a) {$a} ; /p ^"   
38D0   CD 84 09               CALL   printStr   
38D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E2   21 04 00               LD   HL,4   
38E5   CD D2 08               CALL   prtdec   
38E8   CD 84 09               CALL   printStr   
38EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F8   E1                     POP   hl   
38F9   E5                     PUSH   hl   
38FA   CD D2 08               CALL   prtdec   
38FD   E1                     POP   hl   
38FE   CD 84 09               CALL   printStr   
3901   20 28 23 00            .CSTR   " (#"   
3905   CD 1A 09               CALL   prthex   
3908   CD 84 09               CALL   printStr   
390B   29 0D 0A 00            .CSTR   ")\r\n"   
390F   76                     HALT      
3910   00                     .CSTR      
3911                EXPECTM_0_2219S43:      
3911   E1                     POP   HL   
3912                          ;*Macro unroll:  test "5 [4] (ab) {$a $b +} ; /p ^", 9
3912   31 80 3C               LD   SP,STACK   
3915   CD 8B 09               CALL   init   
3918   CD 82 3B               CALL   execStr   
391B   35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] (ab) {$a $b +} ; /p ^"   
3937                          ;*Macro unroll:  expect "5 [4] (ab) {$a $b +} ; /p ^",9
3937   E1                     POP   HL   
3938   E5                     PUSH   HL   
3939   11 09 00               LD   DE,9   
393C   B7                     OR   A   
393D   ED 52                  SBC   HL,DE   
393F   7D                     LD   A,L   
3940   B4                     OR   H   
3941   28 66                  JR   Z,expectM_0_2220S43   
3943   CD 84 09               CALL   printStr   
3946   43 6F 64 65 3A 20 35 20 5B 34 5D 20 28 61 62 29 20 7B 24 61 20 24 62 20 2B 7D 20 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] (ab) {$a $b +} ; /p ^"   
3968   CD 84 09               CALL   printStr   
396B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
397A   21 09 00               LD   HL,9   
397D   CD D2 08               CALL   prtdec   
3980   CD 84 09               CALL   printStr   
3983   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3990   E1                     POP   hl   
3991   E5                     PUSH   hl   
3992   CD D2 08               CALL   prtdec   
3995   E1                     POP   hl   
3996   CD 84 09               CALL   printStr   
3999   20 28 23 00            .CSTR   " (#"   
399D   CD 1A 09               CALL   prthex   
39A0   CD 84 09               CALL   printStr   
39A3   29 0D 0A 00            .CSTR   ")\r\n"   
39A7   76                     HALT      
39A8   00                     .CSTR      
39A9                EXPECTM_0_2220S43:      
39A9   E1                     POP   HL   
39AA                          ;*Macro unroll:  test "3i= {: i/b i-- :}^ + +", 6
39AA   31 80 3C               LD   SP,STACK   
39AD   CD 8B 09               CALL   init   
39B0   CD 82 3B               CALL   execStr   
39B3   33 69 3D 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 5E 20 2B 20 2B 00 .CSTR   "3i= {: i/b i-- :}^ + +"   
39CA                          ;*Macro unroll:  expect "3i= {: i/b i-- :}^ + +",6
39CA   E1                     POP   HL   
39CB   E5                     PUSH   HL   
39CC   11 06 00               LD   DE,6   
39CF   B7                     OR   A   
39D0   ED 52                  SBC   HL,DE   
39D2   7D                     LD   A,L   
39D3   B4                     OR   H   
39D4   28 61                  JR   Z,expectM_0_2221S43   
39D6   CD 84 09               CALL   printStr   
39D9   43 6F 64 65 3A 20 33 69 3D 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= {: i/b i-- :}^ + +"   
39F6   CD 84 09               CALL   printStr   
39F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A08   21 06 00               LD   HL,6   
3A0B   CD D2 08               CALL   prtdec   
3A0E   CD 84 09               CALL   printStr   
3A11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A1E   E1                     POP   hl   
3A1F   E5                     PUSH   hl   
3A20   CD D2 08               CALL   prtdec   
3A23   E1                     POP   hl   
3A24   CD 84 09               CALL   printStr   
3A27   20 28 23 00            .CSTR   " (#"   
3A2B   CD 1A 09               CALL   prthex   
3A2E   CD 84 09               CALL   printStr   
3A31   29 0D 0A 00            .CSTR   ")\r\n"   
3A35   76                     HALT      
3A36   00                     .CSTR      
3A37                EXPECTM_0_2221S43:      
3A37   E1                     POP   HL   
3A38                          ;*Macro unroll:  test "3i= [ {: i/b i-- :}^ ] 1%", 2
3A38   31 80 3C               LD   SP,STACK   
3A3B   CD 8B 09               CALL   init   
3A3E   CD 82 3B               CALL   execStr   
3A41   33 69 3D 20 5B 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 5E 20 5D 20 31 25 00 .CSTR   "3i= [ {: i/b i-- :}^ ] 1%"   
3A5B                          ;*Macro unroll:  expect "3i= [ {: i/b i-- :}^ ] 1%",2
3A5B   E1                     POP   HL   
3A5C   E5                     PUSH   HL   
3A5D   11 02 00               LD   DE,2   
3A60   B7                     OR   A   
3A61   ED 52                  SBC   HL,DE   
3A63   7D                     LD   A,L   
3A64   B4                     OR   H   
3A65   28 64                  JR   Z,expectM_0_2222S43   
3A67   CD 84 09               CALL   printStr   
3A6A   43 6F 64 65 3A 20 33 69 3D 20 5B 20 7B 3A 20 69 2F 62 20 69 2D 2D 20 3A 7D 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ {: i/b i-- :}^ ] 1%"   
3A8A   CD 84 09               CALL   printStr   
3A8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A9C   21 02 00               LD   HL,2   
3A9F   CD D2 08               CALL   prtdec   
3AA2   CD 84 09               CALL   printStr   
3AA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB2   E1                     POP   hl   
3AB3   E5                     PUSH   hl   
3AB4   CD D2 08               CALL   prtdec   
3AB7   E1                     POP   hl   
3AB8   CD 84 09               CALL   printStr   
3ABB   20 28 23 00            .CSTR   " (#"   
3ABF   CD 1A 09               CALL   prthex   
3AC2   CD 84 09               CALL   printStr   
3AC5   29 0D 0A 00            .CSTR   ")\r\n"   
3AC9   76                     HALT      
3ACA   00                     .CSTR      
3ACB                EXPECTM_0_2222S43:      
3ACB   E1                     POP   HL   
3ACC                          ;*Macro unroll:  test "0 j= 4 i= {: i/b i j+= i--, :}^ j ", 10
3ACC   31 80 3C               LD   SP,STACK   
3ACF   CD 8B 09               CALL   init   
3AD2   CD 82 3B               CALL   execStr   
3AD5   30 20 6A 3D 20 34 20 69 3D 20 7B 3A 20 69 2F 62 20 69 20 6A 2B 3D 20 69 2D 2D 2C 20 3A 7D 5E 20 6A 20 00 .CSTR   "0 j= 4 i= {: i/b i j+= i--, :}^ j "   
3AF8                          ;*Macro unroll:  expect "0 j= 4 i= {: i/b i j+= i--, :}^ j ",10
3AF8   E1                     POP   HL   
3AF9   E5                     PUSH   HL   
3AFA   11 0A 00               LD   DE,10   
3AFD   B7                     OR   A   
3AFE   ED 52                  SBC   HL,DE   
3B00   7D                     LD   A,L   
3B01   B4                     OR   H   
3B02   28 6D                  JR   Z,expectM_0_2223S43   
3B04   CD 84 09               CALL   printStr   
3B07   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 3A 20 69 2F 62 20 69 20 6A 2B 3D 20 69 2D 2D 2C 20 3A 7D 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= {: i/b i j+= i--, :}^ j "   
3B30   CD 84 09               CALL   printStr   
3B33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B42   21 0A 00               LD   HL,10   
3B45   CD D2 08               CALL   prtdec   
3B48   CD 84 09               CALL   printStr   
3B4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B58   E1                     POP   hl   
3B59   E5                     PUSH   hl   
3B5A   CD D2 08               CALL   prtdec   
3B5D   E1                     POP   hl   
3B5E   CD 84 09               CALL   printStr   
3B61   20 28 23 00            .CSTR   " (#"   
3B65   CD 1A 09               CALL   prthex   
3B68   CD 84 09               CALL   printStr   
3B6B   29 0D 0A 00            .CSTR   ")\r\n"   
3B6F   76                     HALT      
3B70   00                     .CSTR      
3B71                EXPECTM_0_2223S43:      
3B71   E1                     POP   HL   
3B72                             ; 
3B72   CD 84 09               CALL   printStr   
3B75   44 6F 6E 65 21 00      .CSTR   "Done!"   
3B7B   76                     HALT      
3B7C                          ALIGN   2   
3B7C                PRINTER:      
3B7C   E1                     POP   hl   
3B7D   CD D2 08               CALL   prtdec   
3B80   DD E9                  JP   (ix)   
3B82                             ; executes a null teminated string (null executes exit_)
3B82                             ; the string should be immedaitely following the call
3B82                EXECSTR:      ; create a root stack frame
3B82   C1                     POP   bc   ; bc = code*
3B83   0B                     DEC   bc   ; dec to prepare for next routine
3B84   11 00 00               LD   de,0   
3B87   D5                     PUSH   de   ; push fake IP
3B88   D5                     PUSH   de   ; push null arg_list*
3B89   D5                     PUSH   de   ; push null first_arg*
3B8A   D5                     PUSH   de   ; push fake BP
3B8B   DD E9                  JP   (ix)   
3B8D                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables
3DEE                VBLOCKEND:   DS   2   ; 
3DF0                VPOINTER:   DS   2   ; 
3DF2                VHASHSTR:   DS   2   ; 
3DF4                VLASTDEF:   DS   2   ; 
3DF6                VREMAIN:   DS   2   ; 
3DF8                VTEMP1:   DS   2   ; 
3DFA                VTEMP2:   DS   2   ; 
3DFC                TBPTR:    DS   2   ; reserved for tests
3DFE                          ALIGN   $100   
3E00                TIB:      DS   TIBSIZE   
3F00                          ALIGN   $100   
3F00                PAD:      DS   $100   
4000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08D0 DEFINED AT LINE 1361 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1321 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 759 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1593 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 817 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1152 IN monty.asm
                    > USED AT LINE 1459 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1517 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
SEMICOLON_:         0324 DEFINED AT LINE 239 IN monty.asm
DOT_:               0327 DEFINED AT LINE 241 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 243 IN monty.asm
COLON_:             032D DEFINED AT LINE 245 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 247 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 249 IN monty.asm
IF_:                0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               0339 DEFINED AT LINE 253 IN monty.asm
NOT_:               033C DEFINED AT LINE 255 IN monty.asm
NUM_:               0341 DEFINED AT LINE 258 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
HEXNUM_:            0344 DEFINED AT LINE 260 IN monty.asm
OR_:                0347 DEFINED AT LINE 262 IN monty.asm
CARET_:             034A DEFINED AT LINE 264 IN monty.asm
COMMA_:             034D DEFINED AT LINE 266 IN monty.asm
STRING_:            0350 DEFINED AT LINE 269 IN monty.asm
MINUS_:             0353 DEFINED AT LINE 271 IN monty.asm
EQ_:                0356 DEFINED AT LINE 273 IN monty.asm
EQ0:                0360 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
EQ1:                0361 DEFINED AT LINE 282 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
GT_:                0365 DEFINED AT LINE 286 IN monty.asm
LT_:                0370 DEFINED AT LINE 295 IN monty.asm
LT1:                0379 DEFINED AT LINE 302 IN monty.asm
                    > USED AT LINE 293 IN monty.asm
DIV_:               0382 DEFINED AT LINE 308 IN monty.asm
NOP_:               0385 DEFINED AT LINE 310 IN monty.asm
PLUS:               0387 DEFINED AT LINE 317 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0393 DEFINED AT LINE 326 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
ADD3:               0397 DEFINED AT LINE 331 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
                    > USED AT LINE 1194 IN monty.asm
ADDR:               03A2 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03AE DEFINED AT LINE 347 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B5 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 367 IN monty.asm
OR:                 03B9 DEFINED AT LINE 359 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
XOR:                03C2 DEFINED AT LINE 369 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
XOR1:               03C3 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
INVERT:             03CD DEFINED AT LINE 381 IN monty.asm
                    > USED AT LINE 1225 IN monty.asm
ARG:                03D3 DEFINED AT LINE 388 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03F1 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 415 IN monty.asm
ARG0A:              03FA DEFINED AT LINE 417 IN monty.asm
                    > USED AT LINE 394 IN monty.asm
                    > USED AT LINE 401 IN monty.asm
ARG1:               03FF DEFINED AT LINE 420 IN monty.asm
                    > USED AT LINE 413 IN monty.asm
ARG1A:              0407 DEFINED AT LINE 427 IN monty.asm
                    > USED AT LINE 419 IN monty.asm
ARG_LIST:           040A DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          0414 DEFINED AT LINE 443 IN monty.asm
                    > USED AT LINE 461 IN monty.asm
ARG_LIST2:          0420 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 448 IN monty.asm
ARG_LIST3:          0428 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 450 IN monty.asm
                    > USED AT LINE 457 IN monty.asm
ARG_LIST4:          042B DEFINED AT LINE 462 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST5:          0430 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 465 IN monty.asm
ARRBEGIN:           043C DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0458 DEFINED AT LINE 492 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0472 DEFINED AT LINE 508 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
ARREND2:            0482 DEFINED AT LINE 518 IN monty.asm
                    > USED AT LINE 514 IN monty.asm
ARRINDEX:           04A6 DEFINED AT LINE 545 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04AE DEFINED AT LINE 551 IN monty.asm
ARRINDEX1:          04AF DEFINED AT LINE 553 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
ARRINDEX2:          04BB DEFINED AT LINE 562 IN monty.asm
                    > USED AT LINE 559 IN monty.asm
ASSIGN:             04BE DEFINED AT LINE 567 IN monty.asm
                    > USED AT LINE 279 IN monty.asm
ASSIGN0:            04C0 DEFINED AT LINE 570 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
                    > USED AT LINE 335 IN monty.asm
                    > USED AT LINE 1187 IN monty.asm
ASSIGNX:            04C1 DEFINED AT LINE 572 IN monty.asm
ASSIGN1:            04CD DEFINED AT LINE 580 IN monty.asm
                    > USED AT LINE 577 IN monty.asm
BLOCK:              04CF DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04D3 DEFINED AT LINE 587 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
BLOCK2:             04FF DEFINED AT LINE 614 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
BLOCK3:             0502 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
BLOCK4:             050A DEFINED AT LINE 623 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
BLOCK5:             050D DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
BLOCK6:             0535 DEFINED AT LINE 645 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
BLOCKEND:           0538 DEFINED AT LINE 649 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1299 IN monty.asm
BLOCKEND1:          0564 DEFINED AT LINE 671 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCKEND2:          0570 DEFINED AT LINE 678 IN monty.asm
                    > USED AT LINE 670 IN monty.asm
BLOCKEND3:          0582 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 684 IN monty.asm
CHAR:               058D DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0590 DEFINED AT LINE 705 IN monty.asm
                    > USED AT LINE 716 IN monty.asm
CHAR2:              059C DEFINED AT LINE 714 IN monty.asm
                    > USED AT LINE 711 IN monty.asm
CHAR3:              059F DEFINED AT LINE 717 IN monty.asm
                    > USED AT LINE 709 IN monty.asm
COMMA:              05A2 DEFINED AT LINE 721 IN monty.asm
DIV:                05A4 DEFINED AT LINE 724 IN monty.asm
                    > USED AT LINE 309 IN monty.asm
DOT:                05C2 DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
DOT1:               05CE DEFINED AT LINE 750 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
DOT2:               05D7 DEFINED AT LINE 755 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
DOT3:               05E1 DEFINED AT LINE 761 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
DOT4:               05E5 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
                    > USED AT LINE 754 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
DIVIDE:             05EC DEFINED AT LINE 772 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
DIVIDE1:            05F1 DEFINED AT LINE 775 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
DIVIDE2:            05FE DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DIVIDE3:            05FF DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
EQUALS:             0605 DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 284 IN monty.asm
LESSTHANEQ:         060D DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN:           0612 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
LESSTHAN1:          0617 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
TRUE1:              061A DEFINED AT LINE 816 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
NULL1:              0620 DEFINED AT LINE 820 IN monty.asm
FALSE1:             0620 DEFINED AT LINE 821 IN monty.asm
                    > USED AT LINE 797 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 1211 IN monty.asm
CARET:              0626 DEFINED AT LINE 829 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
GO:                 0626 DEFINED AT LINE 830 IN monty.asm
GO1:                0627 DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 1009 IN monty.asm
                    > USED AT LINE 1011 IN monty.asm
                    > USED AT LINE 1348 IN monty.asm
GO2:                062D DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
GOBLOCK:            0633 DEFINED AT LINE 841 IN monty.asm
GOBLOCKX1:          063C DEFINED AT LINE 849 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
GOBLOCK1:           0661 DEFINED AT LINE 866 IN monty.asm
                    > USED AT LINE 948 IN monty.asm
GOFUNC:             066F DEFINED AT LINE 875 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
GOFUNC1:            0688 DEFINED AT LINE 894 IN monty.asm
                    > USED AT LINE 904 IN monty.asm
GOFUNC2:            068E DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
GOFUNC3:            0699 DEFINED AT LINE 907 IN monty.asm
                    > USED AT LINE 883 IN monty.asm
GOFUNC4:            06B1 DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
GOFUNC5:            06B5 DEFINED AT LINE 928 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
GOFUNC6:            06B8 DEFINED AT LINE 932 IN monty.asm
                    > USED AT LINE 927 IN monty.asm
GOFUNC7:            06BB DEFINED AT LINE 935 IN monty.asm
GOFUNC8:            06C0 DEFINED AT LINE 941 IN monty.asm
                    > USED AT LINE 860 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
HEXNUM:             06CB DEFINED AT LINE 950 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
HEXNUM1:            06CE DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
HEXNUM2:            06D6 DEFINED AT LINE 958 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
IDENTU:             06E8 DEFINED AT LINE 970 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENTL:             06ED DEFINED AT LINE 974 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENT1:             06F2 DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 973 IN monty.asm
IF:                 06FF DEFINED AT LINE 991 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IFTE:               070B DEFINED AT LINE 1001 IN monty.asm
                    > USED AT LINE 995 IN monty.asm
IFTE1:              070C DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
MUL:                0718 DEFINED AT LINE 1014 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
MUL2:               071A DEFINED AT LINE 1017 IN monty.asm
MUL3:               0722 DEFINED AT LINE 1022 IN monty.asm
                    > USED AT LINE 1031 IN monty.asm
NUM:                0734 DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
NUM0:               073D DEFINED AT LINE 1041 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
NUM1:               073E DEFINED AT LINE 1043 IN monty.asm
                    > USED AT LINE 1060 IN monty.asm
NUM2:               0756 DEFINED AT LINE 1061 IN monty.asm
                    > USED AT LINE 960 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
                    > USED AT LINE 1046 IN monty.asm
                    > USED AT LINE 1048 IN monty.asm
NUM3:               0761 DEFINED AT LINE 1069 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
REMAIN:             0764 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
SEMICOLON:          076A DEFINED AT LINE 1079 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
SHIFTLEFT:          0786 DEFINED AT LINE 1103 IN monty.asm
                    > USED AT LINE 299 IN monty.asm
SHIFTLEFT1:         078E DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
SHIFTLEFT2:         078F DEFINED AT LINE 1112 IN monty.asm
                    > USED AT LINE 1109 IN monty.asm
SHIFTRIGHT:         0796 DEFINED AT LINE 1120 IN monty.asm
                    > USED AT LINE 290 IN monty.asm
SHIFTRIGHT1:        079E DEFINED AT LINE 1127 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
SHIFTRIGHT2:        07A2 DEFINED AT LINE 1130 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
STRING:             07A9 DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
STRING1:            07B2 DEFINED AT LINE 1146 IN monty.asm
                    > USED AT LINE 1153 IN monty.asm
                    > USED AT LINE 1155 IN monty.asm
STRING2:            07B5 DEFINED AT LINE 1150 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
MINUS:              07D1 DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
SUB:                07DD DEFINED AT LINE 1180 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
SUB1:               07E8 DEFINED AT LINE 1188 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
COMMAND:            07F1 DEFINED AT LINE 1201 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
ERROR1:             0832 DEFINED AT LINE 1228 IN monty.asm
                    > USED AT LINE 1277 IN monty.asm
ABS1:               0838 DEFINED AT LINE 1232 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
PARTIAL:            0845 DEFINED AT LINE 1247 IN monty.asm
                    > USED AT LINE 1209 IN monty.asm
COMMENT:            0865 DEFINED AT LINE 1263 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
                    > USED AT LINE 1267 IN monty.asm
COLON:              086E DEFINED AT LINE 1271 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
LOOPEND:            0879 DEFINED AT LINE 1279 IN monty.asm
                    > USED AT LINE 1275 IN monty.asm
BREAK:              0881 DEFINED AT LINE 1284 IN monty.asm
                    > USED AT LINE 1205 IN monty.asm
BREAK1:             0888 DEFINED AT LINE 1290 IN monty.asm
                    > USED AT LINE 1288 IN monty.asm
CHARS:              089B DEFINED AT LINE 1301 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
CHARS1:             089E DEFINED AT LINE 1303 IN monty.asm
                    > USED AT LINE 1352 IN monty.asm
INPUT:              08A3 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 1213 IN monty.asm
KEY:                08AE DEFINED AT LINE 1320 IN monty.asm
                    > USED AT LINE 1215 IN monty.asm
OUTPUT:             08B7 DEFINED AT LINE 1329 IN monty.asm
                    > USED AT LINE 1219 IN monty.asm
SELECT:             08C0 DEFINED AT LINE 1340 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
NUMBERS:            08CA DEFINED AT LINE 1350 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
FILTER:             08D0 DEFINED AT LINE 1359 IN monty.asm
MAP:                08D0 DEFINED AT LINE 1360 IN monty.asm
PRTDEC:             08D2 DEFINED AT LINE 1368 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 137
PRTDEC0:            08E1 DEFINED AT LINE 1379 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
PRTDEC1:            0903 DEFINED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1383 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1392 IN monty.asm
PRTDEC2:            0905 DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
PRTDEC3:            0915 DEFINED AT LINE 1409 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
PRTDEC4:            0916 DEFINED AT LINE 1411 IN monty.asm
                    > USED AT LINE 1408 IN monty.asm
PRTHEX:             091A DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0925 DEFINED AT LINE 1423 IN monty.asm
                    > USED AT LINE 1418 IN monty.asm
                    > USED AT LINE 1420 IN monty.asm
PRTHEX3:            092E DEFINED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1429 IN monty.asm
PRTSTR0:            0939 DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1445 IN monty.asm
PRTSTR:             093D DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
NESTING:            0942 DEFINED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
NESTING0:           094C DEFINED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
NESTING1A:          0953 DEFINED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
NESTING1:           0956 DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
NESTING2:           0965 DEFINED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
NESTING3:           0967 DEFINED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING4:           0972 DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
PROMPT:             0974 DEFINED AT LINE 1495 IN monty.asm
                    > USED AT LINE 1537 IN monty.asm
CRLF:               097D DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
PRINTSTR:           0984 DEFINED AT LINE 1507 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 130
INIT:               098B DEFINED AT LINE 1514 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1532 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09A4 DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1527 IN monty.asm
START:              09A9 DEFINED AT LINE 1530 IN monty.asm
INTERPRET:          09BF DEFINED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
INTERPRET2:         09C9 DEFINED AT LINE 1542 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET3:         09D1 DEFINED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
INTERPRET4:         09D7 DEFINED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1547 IN monty.asm
INTERPRET5:         09DC DEFINED AT LINE 1561 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
                    > USED AT LINE 1609 IN monty.asm
INTERPRET6:         09ED DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
INTERPRET7:         09FB DEFINED AT LINE 1597 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
INTERPRET8:         0A0E DEFINED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1567 IN monty.asm
NEXT:               0A16 DEFINED AT LINE 1617 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
NEXT1:              0A25 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1622 IN monty.asm
EXIT_:              0A2C DEFINED AT LINE 1632 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
ERROR:              0A2F DEFINED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1230 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2122S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  1417 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1493 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  1503 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  156F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  15DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  1651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  16CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  1739 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  17B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  1821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  189D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  190B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  198D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  19F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  1A75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  1AE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  1B55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  1BD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  1C41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  1CAD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  1D1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  1D89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  1DF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  1E61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  1ECD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  1F39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  1FA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  2011 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  207D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  20E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  2157 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  21C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  2233 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  22A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  2313 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  237D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  23E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  2457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  24CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2545 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  25C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  2649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  26D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  273F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  27AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  2821 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  2895 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2907 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  297B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  29F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  2A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  2AED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  2B69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  2BEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2C77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  2D05 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  2D97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  2E1B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  2EA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  2F31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2FBF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  304B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  30E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  316D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  3201 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  3297 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  332F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  33D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  347F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  34FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  3577 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  35FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  368B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  3731 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  37DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  3885 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  3911 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  39A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  3A37 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  3ACB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  3B71 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3B7C DEFINED AT LINE 135
EXECSTR:            3B82 DEFINED AT LINE 142
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 851 IN monty.asm
                    > USED AT LINE 1516 IN monty.asm
                    > USED AT LINE 1531 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1521 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1518 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 512 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
                    > USED AT LINE 575 IN monty.asm
                    > USED AT LINE 1304 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1515 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 438 IN monty.asm
                    > USED AT LINE 469 IN monty.asm
                    > USED AT LINE 502 IN monty.asm
                    > USED AT LINE 534 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 640 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1096 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1140 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
                    > USED AT LINE 1254 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
VBLOCKEND:          3DEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 342 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 423 IN monty.asm
                    > USED AT LINE 555 IN monty.asm
                    > USED AT LINE 573 IN monty.asm
                    > USED AT LINE 982 IN monty.asm
VHASHSTR:           3DF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3DF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3DF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 1074 IN monty.asm
VTEMP1:             3DF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 495 IN monty.asm
                    > USED AT LINE 536 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
                    > USED AT LINE 856 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
                    > USED AT LINE 905 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1253 IN monty.asm
VTEMP2:             3DFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 885 IN monty.asm
                    > USED AT LINE 906 IN monty.asm
TBPTR:              3DFC DEFINED AT LINE 43 IN ram.asm
TIB:                3E00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1546 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
                    > USED AT LINE 1613 IN monty.asm
PAD:                3F00 DEFINED AT LINE 49 IN ram.asm
HEAP:               4000 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
