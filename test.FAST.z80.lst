0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 46               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 46               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 46               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 46               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 46               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 46               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 46               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 46               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 46               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 46               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 45               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 46               LD   (RST08),HL   
0094   22 D2 46               LD   (RST10),HL   
0097   22 D4 46               LD   (RST18),HL   
009A   22 D6 46               LD   (RST20),HL   
009D   22 D8 46               LD   (RST28),HL   
00A0   22 DA 46               LD   (RST30),HL   
00A3   22 DE 46               LD   (INTVEC),HL   
00A6   22 E0 46               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 46               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 46               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 45               LD   SP,STACK   
00C6   CD D2 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 48                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 49                  DW   BUF   ; vBUFPtr pointer into BUF
0186   76 0C                  DW   next   ; nNext
0188   00 4B                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; opcode landing page
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 BF 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 B1 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 35 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 3A 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 4C 07               JP   question   
0336                STAR_:       
0336   C3 65 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 81 07               JP   num   
0341                HASH_:       
0341   C3 18 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 76 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 FE 07               JP   dblquote   
0350                MINUS_:      
0350   C3 26 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 52 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA EB 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 73 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA DB 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 5A 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 5F 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 B7 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; implementations
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 46            LD   de,(vPointer)   
03A0   21 F0 46               LD   hl,vPointer   
03A3   C3 DD 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 46               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 46            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 46               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 46               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EE 46            LD   de,(vHeapPtr)   ; de = array[-2]
045F   22 EE 46               LD   (vHeapPtr),hl   ; move heap* to end of array
0462   ED 4B FC 46            LD   bc,(vTemp1)   ; restore IP
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 46               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 F0 46               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A F0 46               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 46               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EE 46               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EE 46               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 4B               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FC 46            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EE 46            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EE 46            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FC 46            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FC 46            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FE 46            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FE 46            LD   bc,(vTemp2)   
058A   FD 2A FC 46            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA 91 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 45 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD 39 06               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F2 46            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   FE 68                  CP   "h"   
05D8   CA E9 05               JP   z,dotHex   
05DB   FE 73                  CP   "s"   
05DD   CA FD 05               JP   z,dotStr   
05E0   FE 63                  CP   "c"   
05E2   CA 11 06               JP   z,dotChar   
05E5   0B                     DEC   bc   
05E6   C3 25 06               JP   dotDec   
05E9                DOTHEX:      
05E9   CD 76 06               CALL   go   
05EC   00 00                  DW   NUL   ; closure
05EE   F2 05                  DW   dotHex_block   
05F0   58 0B                  DW   args1A0L   
05F2                DOTHEX_BLOCK:      
05F2   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
05FD                DOTSTR:      
05FD   CD 76 06               CALL   go   
0600   00 00                  DW   NUL   ; closure
0602   06 06                  DW   dotStr_block   
0604   58 0B                  DW   args1A0L   
0606                DOTSTR_BLOCK:      
0606   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0611                DOTCHAR:      
0611   CD 76 06               CALL   go   
0614   00 00                  DW   NUL   ; closure
0616   1A 06                  DW   dotChar_block   
0618   58 0B                  DW   args1A0L   
061A                DOTCHAR_BLOCK:      
061A   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0625                DOTDEC:      
0625   CD 76 06               CALL   go   
0628   00 00                  DW   NUL   ; closure
062A   2E 06                  DW   dotDec_block   
062C   58 0B                  DW   args1A0L   
062E                DOTDEC_BLOCK:      
062E   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0639                             ; division subroutine.
0639                             ; bc: divisor, de: dividend, hl: remainder
0639                DIVIDE:      
0639   21 00 00               LD   hl,0   ; zero the remainder
063C   3E 10                  LD   a,16   ; loop counter
063E                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
063E   CB 21                  SLA   c   
0640   CB 10                  RL   b   
0642   ED 6A                  ADC   hl,hl   
0644   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0646   38 03                  JR   c,divide2   
0648   0C                     INC   c   
0649   18 01                  JR   divide3   
064B                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
064B   19                     ADD   hl,de   
064C                DIVIDE3:      
064C   3D                     DEC   a   
064D   20 EF                  JR   nz,divide1   
064F   50 59                  LD   de,bc   ; result from bc to de
0651   C9                     RET      
0652                             ; hl = value1, de = value2
0652                             ; hl = result
0652                EQUALS:      
0652   B7                     OR   a   ; reset the carry flag
0653   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0655   28 10                  JR   z,true1   
0657   C3 6D 06               JP   false1   
065A                             ; hl = value1 de = value2
065A                             ; hl = result
065A                LESSTHANEQ:      
065A   B7                     OR   a   
065B   ED 52                  SBC   hl,de   
065D   18 05                  JR   lessthan1   
065F                             ; hl = value1 de = value2
065F                             ; hl = result
065F                LESSTHAN:      
065F   B7                     OR   a   
0660   ED 52                  SBC   hl,de   
0662   28 09                  JR   z,false1   
0664                LESSTHAN1:      
0664   FA 6D 06               JP   m,false1   
0667                TRUE1:       
0667   21 FF FF               LD   hl,TRUE   
066A   E5                     PUSH   hl   
066B   DD E9                  JP   (ix)   
066D                NULL1:       
066D                FALSE1:      
066D   21 00 00               LD   hl,FALSE   
0670   E5                     PUSH   hl   
0671   DD E9                  JP   (ix)   
0673                LPAREN:      
0673   C3 CB 04               JP   block   
0676                             ; execute a block of code which ends with }
0676                             ; creates a root scope if BP == stack
0676                             ; else uses outer scope
0676                CARET:       
0676                GO:          
0676   D1                     POP   de   ; de = block*
0677                GO1:         
0677   7B                     LD   a,e   ; if block* == null, exit
0678   B2                     OR   d   
0679   20 02                  JR   nz,go2   
067B   DD E9                  JP   (ix)   
067D                GO2:         
067D   1A                     LD   a,(de)   
067E   FE 7B                  CP   "{"   
0680   28 07                  JR   z,goBlock1   
0682   FE 28                  CP   "("   
0684   C2 BC 06               JP   nz,goFunc   
0687   13                     INC   de   ; de is the address to jump back to
0688   D5                     PUSH   de   ; push de just before stack frame
0689                GOBLOCK:      
0689                GOBLOCK1:      
0689   ED 53 FC 46            LD   (vTemp1),de   ; save de
068D   21 80 45               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0690   FD 54                  LD   d,iyh   
0692   FD 5D                  LD   e,iyl   
0694   B7                     OR   a   ; if stack* == BP then this is the root_scope
0695   ED 52                  SBC   hl,de   
0697   ED 5B FC 46            LD   de,(vTemp1)   ; restore de
069B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
069C   B4                     OR   h   
069D   3E 00                  LD   a,0   
069F   28 6C                  JR   z,goFunc8   
06A1   C5                     PUSH   bc   ; push IP
06A2   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06A5   FD 46 05               LD   b,(iy+5)   
06A8   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06AB   FD 66 03               LD   h,(iy+3)   
06AE                GOBLOCK2:      
06AE   C5                     PUSH   bc   ; arg_list*
06AF   E5                     PUSH   hl   ; first_arg*
06B0   FD E5                  PUSH   iy   ; push BP
06B2   FD 21 00 00            LD   iy,0   ; BP = SP
06B6   FD 39                  ADD   iy,sp   
06B8   42 4B                  LD   bc,de   ; bc = de = block*-1
06BA   DD E9                  JP   (ix)   
06BC                GOFUNC:      ; execute function
06BC   EB                     EX   de,hl   ; hl = func*
06BD   5E                     LD   e,(hl)   ; de = partial_array*
06BE   23                     INC   hl   
06BF   56                     LD   d,(hl)   
06C0   23                     INC   hl   
06C1   7B                     LD   a,e   ; if partial_array* == null skip
06C2   B2                     OR   d   
06C3   28 21                  JR   z,goFunc3   
06C5   ED 43 FC 46            LD   (vTemp1),bc   
06C9   22 FE 46               LD   (vTemp2),hl   ; save bc,hl
06CC   EB                     EX   de,hl   ; hl = partial_array*
06CD   2B                     DEC   hl   ; bc = count
06CE   46                     LD   b,(hl)   
06CF   2B                     DEC   hl   
06D0   4E                     LD   c,(hl)   
06D1   23                     INC   hl   ; push each item on stack
06D2   23                     INC   hl   
06D3   18 06                  JR   goFunc2   
06D5                GOFUNC1:      
06D5   5E                     LD   e,(hl)   ; de = partial item
06D6   23                     INC   hl   
06D7   56                     LD   d,(hl)   
06D8   23                     INC   hl   
06D9   D5                     PUSH   de   ; push on stack
06DA   0B                     DEC   bc   
06DB                GOFUNC2:      
06DB   79                     LD   a,c   ; if count != 0 then loop
06DC   B0                     OR   b   
06DD   20 F6                  JR   nz,goFunc1   
06DF   ED 4B FC 46            LD   bc,(vTemp1)   ; restore bc
06E3   2A FE 46               LD   hl,(vTemp2)   ; restore hl
06E6                GOFUNC3:      
06E6   5E                     LD   e,(hl)   ; de = block*
06E7   23                     INC   hl   
06E8   56                     LD   d,(hl)   
06E9   23                     INC   hl   
06EA   ED 53 FC 46            LD   (vTemp1),de   ; save block*
06EE   5E                     LD   e,(hl)   ; de = arg_list*
06EF   23                     INC   hl   
06F0   56                     LD   d,(hl)   
06F1   23                     INC   hl   
06F2   EB                     EX   de,hl   ; hl = arg_list*
06F3   ED 5B FC 46            LD   de,(vTemp1)   ; restore de = block*
06F7   7D                     LD   a,l   ; if arg_list* == null a = 0
06F8   B4                     OR   h   
06F9   20 03                  JR   nz,goFunc4   
06FB   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06FC   18 0F                  JR   goFunc8   
06FE                GOFUNC4:      ; allocate locals
06FE   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06FF   7E                     LD   a,(hl)   
0700   18 03                  JR   goFunc6   
0702                GOFUNC5:      ; loop
0702   3B                     DEC   sp   
0703   3B                     DEC   sp   
0704   3D                     DEC   a   
0705                GOFUNC6:      
0705   B7                     OR   a   
0706   20 FA                  JR   nz,goFunc5   ; end loop
0708                GOFUNC7:      
0708   2B                     DEC   hl   ; a = num_args* x 2
0709   7E                     LD   a,(hl)   
070A   23                     INC   hl   
070B   23                     INC   hl   
070C   87                     ADD   a,a   ; a *= 2
070D                GOFUNC8:      
070D   C5                     PUSH   bc   ; push IP
070E   44 4D                  LD   bc,hl   
0710   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0713   85                     ADD   a,l   
0714   6F                     LD   l,a   
0715   39                     ADD   hl,sp   
0716   18 96                  JR   goBlock2   
0718                HASH:        
0718                HEXNUM:      
0718   21 00 00               LD   hl,0   ; Clear hl to accept the number
071B                HEXNUM1:      
071B   03                     INC   bc   
071C   0A                     LD   a,(bc)   ; Get the character which is a numeral
071D   CB 77                  BIT   6,a   ; is it uppercase alpha?
071F   28 02                  JR   z,hexnum2   ; no a decimal
0721   D6 07                  SUB   7   ; sub 7  to make $a - $F
0723                HEXNUM2:      
0723   D6 30                  SUB   $30   ; form decimal digit
0725   DA A3 07               JP   c,num2   
0728   FE 10                  CP   $0F+1   
072A   D2 A3 07               JP   nc,num2   
072D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
072E   29                     ADD   hl,hl   ; 4X
072F   29                     ADD   hl,hl   ; 8X
0730   29                     ADD   hl,hl   ; 16X
0731   85                     ADD   a,l   ; add into bottom of hl
0732   6F                     LD   l,a   
0733   18 E6                  JR   hexnum1   
0735                UPCASE:      
0735   0A                     LD   a,(bc)   ; a = identifier char
0736   D6 41                  SUB   "A"   ; "A" = 0
0738   18 05                  JR   ident1   
073A                LOWCASE:      
073A   0A                     LD   a,(bc)   
073B   D6 61                  SUB   "a"   
073D   C6 1A                  ADD   a,26   
073F                IDENT1:      
073F   87                     ADD   a,a   ; l = a * 2
0740   6F                     LD   l,a   
0741   26 46                  LD   h,msb(vars)   
0743   22 F0 46               LD   (vPointer),hl   ; store address in setter
0746   5E                     LD   e,(hl)   
0747   23                     INC   hl   
0748   56                     LD   d,(hl)   
0749   D5                     PUSH   de   
074A   DD E9                  JP   (ix)   
074C                             ; if
074C                             ; condition then -- value
074C                QUESTION:      
074C                IF:          
074C   03                     INC   bc   
074D   0A                     LD   a,(bc)   
074E   FE 3F                  CP   "?"   
0750   28 06                  JR   z,ifte   
0752   0B                     DEC   bc   
0753   11 00 00               LD   de,NUL   ; NUL pointer for else
0756   18 01                  JR   ifte1   
0758                             ; ifte
0758                             ; condition then else -- value
0758                IFTE:        
0758   D1                     POP   de   ; de = else
0759                IFTE1:       
0759   E1                     POP   hl   ; hl = then
075A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
075B   7C                     LD   a,h   
075C   B5                     OR   l   
075D   E1                     POP   hl   ; hl = then
075E   CA 77 06               JP   z,go1   ; if z de = else
0761   EB                     EX   de,hl   ; condition = false, de = then
0762   C3 77 06               JP   go1   
0765                STAR:        
0765                MUL:         
0765   D1                     POP   de   ; get first value
0766   E1                     POP   hl   
0767                MUL2:        
0767   C5                     PUSH   bc   ; Preserve the IP
0768   44 4D                  LD   bc,hl   ; bc = 2nd value
076A   21 00 00               LD   hl,0   
076D   3E 10                  LD   a,16   
076F                MUL3:        
076F   29                     ADD   hl,hl   
0770   CB 13                  RL   e   
0772   CB 12                  RL   d   
0774   30 04                  JR   nc,$+6   
0776   09                     ADD   hl,bc   
0777   30 01                  JR   nc,$+3   
0779   13                     INC   de   
077A   3D                     DEC   a   
077B   20 F2                  JR   nz,mul3   
077D   C1                     POP   bc   ; Restore the IP
077E   C3 99 03               JP   add3   
0781                NUM:         
0781   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0784   0A                     LD   a,(bc)   ; Get numeral or -
0785   FE 2D                  CP   "-"   
0787   20 01                  JR   nz,num0   
0789   03                     INC   bc   ; move to next char, no flags affected
078A                NUM0:        
078A   08                     EX   af,af'   ; save zero flag = 0 for later
078B                NUM1:        
078B   0A                     LD   a,(bc)   ; read digit
078C   D6 30                  SUB   "0"   ; less than 0?
078E   38 13                  JR   c,num2   ; not a digit, exit loop
0790   FE 0A                  CP   10   ; greater that 9?
0792   30 0F                  JR   nc,num2   ; not a digit, exit loop
0794   03                     INC   bc   ; inc IP
0795   54 5D                  LD   de,hl   ; multiply hl * 10
0797   29                     ADD   hl,hl   
0798   29                     ADD   hl,hl   
0799   19                     ADD   hl,de   
079A   29                     ADD   hl,hl   
079B   85                     ADD   a,l   ; add digit in a to hl
079C   6F                     LD   l,a   
079D   3E 00                  LD   a,0   
079F   8C                     ADC   a,h   
07A0   67                     LD   h,a   
07A1   18 E8                  JR   num1   
07A3                NUM2:        
07A3   0B                     DEC   bc   
07A4   08                     EX   af,af'   ; restore zero flag
07A5   20 07                  JR   nz,num3   
07A7   EB                     EX   de,hl   ; negate the value of hl
07A8   21 00 00               LD   hl,0   
07AB   B7                     OR   a   ; jump to sub2
07AC   ED 52                  SBC   hl,de   
07AE                NUM3:        
07AE   E5                     PUSH   hl   ; Put the number on the stack
07AF   DD E9                  JP   (ix)   ; and process the next character
07B1                UNDERSCORE:      
07B1                REMAIN:      
07B1   2A F2 46               LD   hl,(vRemain)   
07B4   E5                     PUSH   hl   
07B5   DD E9                  JP   (ix)   
07B7                RPAREN:      
07B7   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07BA   FD 46 09               LD   b,(iy+9)   
07BD   DD E9                  JP   (ix)   
07BF                             ; arg_list* block* -- ptr
07BF                SEMICOLON:      
07BF   D1                     POP   de   ; de = block* hl = heap*
07C0   2A EE 46               LD   hl,(vHeapPtr)   
07C3   AF                     XOR   a   
07C4   77                     LD   (hl),a   ; compile null partial_array*
07C5   23                     INC   hl   
07C6   77                     LD   (hl),a   
07C7   23                     INC   hl   
07C8   73                     LD   (hl),e   ; compile block*
07C9   23                     INC   hl   
07CA   72                     LD   (hl),d   
07CB   23                     INC   hl   
07CC   D1                     POP   de   ; de = block*
07CD   73                     LD   (hl),e   ; compile arg_list*
07CE   23                     INC   hl   
07CF   72                     LD   (hl),d   
07D0   23                     INC   hl   
07D1   ED 5B EE 46            LD   de,(vHeapPtr)   ; return func*
07D5   D5                     PUSH   de   
07D6   22 EE 46               LD   (vHeapPtr),hl   ; heap* += 4
07D9   DD E9                  JP   (ix)   
07DB                             ; shiftLeft
07DB                             ; value count -- value2          shift left count places
07DB                SHIFTLEFT:      
07DB   50 59                  LD   de,bc   ; save IP
07DD   C1                     POP   bc   ; bc = count
07DE   41                     LD   b,c   ; b = loop counter
07DF   E1                     POP   hl   
07E0   04                     INC   b   ; test for counter=0 case
07E1   18 01                  JR   shiftLeft2   
07E3                SHIFTLEFT1:      
07E3   29                     ADD   hl,hl   ; left shift hl
07E4                SHIFTLEFT2:      
07E4   10 FD                  DJNZ   shiftLeft1   
07E6   E5                     PUSH   hl   
07E7   42 4B                  LD   bc,de   ; restore IP
07E9   DD E9                  JP   (ix)   
07EB                             ; shiftRight
07EB                             ; value count -- value2          shift left count places
07EB                SHIFTRIGHT:      
07EB   50 59                  LD   de,bc   ; save IP
07ED   C1                     POP   bc   ; bc = count
07EE   41                     LD   b,c   ; b = loop counter
07EF   E1                     POP   hl   
07F0   04                     INC   b   ; test for counter=0 case
07F1   18 04                  JR   shiftRight2   
07F3                SHIFTRIGHT1:      
07F3   CB 3C                  SRL   h   ; right shift hl
07F5   CB 1D                  RR   l   
07F7                SHIFTRIGHT2:      
07F7   10 FA                  DJNZ   shiftRight1   
07F9   E5                     PUSH   hl   
07FA   42 4B                  LD   bc,de   ; restore IP
07FC   DD E9                  JP   (ix)   
07FE                             ; string
07FE                             ; -- ptr                        ; points to start of string chars,
07FE                             ; length is stored at start - 2 bytes
07FE                DBLQUOTE:      
07FE                STRING:      
07FE   2A EE 46               LD   hl,(vHeapPtr)   ; hl = heap*
0801   23                     INC   hl   ; skip length field to start
0802   23                     INC   hl   
0803   E5                     PUSH   hl   ; save start of string
0804   03                     INC   bc   ; point to next char
0805   18 03                  JR   string2   
0807                STRING1:      
0807   77                     LD   (hl),a   
0808   23                     INC   hl   ; increase count
0809   03                     INC   bc   ; point to next char
080A                STRING2:      
080A   0A                     LD   a,(bc)   
080B   FE 22                  CP   DQUOTE   ; " is the string terminator
080D   28 04                  JR   z,string3   
080F   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0811   20 F4                  JR   nz,string1   
0813                STRING3:      
0813   AF                     XOR   a   ; write NUL to terminate string
0814   77                     LD   (hl),a   ; hl = end of string
0815   23                     INC   hl   
0816   22 EE 46               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0819   2B                     DEC   hl   ; hl = end of string without terminator
081A   D1                     POP   de   ; de = start of string
081B   D5                     PUSH   de   ; return start of string
081C   B7                     OR   a   ; hl = length bytes, de = start of string
081D   ED 52                  SBC   hl,de   
081F   EB                     EX   de,hl   
0820   2B                     DEC   hl   ; write length bytes to length field at start - 2
0821   72                     LD   (hl),d   
0822   2B                     DEC   hl   
0823   73                     LD   (hl),e   
0824   DD E9                  JP   (ix)   
0826                MINUS:       ; negative sign or subtract
0826   03                     INC   bc   ; check if sign of a number
0827   0A                     LD   a,(bc)   
0828   0B                     DEC   bc   
0829   FE 30                  CP   "0"   
082B   38 05                  JR   c,sub   
082D   FE 3A                  CP   "9"+1   
082F   DA 3E 03               JP   c,num_   
0832                SUB:         ; Subtract the value 2nd on stack from top of stack
0832   03                     INC   bc   
0833   FE 2D                  CP   "-"   
0835   20 05                  JR   nz,sub1   
0837   E1                     POP   hl   
0838   2B                     DEC   hl   
0839   C3 85 04               JP   assign0   
083C                SUB1:        
083C   0B                     DEC   bc   
083D   D1                     POP   de   
083E   E1                     POP   hl   
083F   B7                     OR   a   
0840   ED 52                  SBC   hl,de   
0842   C3 99 03               JP   add3   
0845                             ;*******************************************************************
0845                             ; commands
0845                             ; a contains command letter
0845                             ; bc points to command letter
0845                             ;*******************************************************************
0845                COMMAND:      
0845   FE 2F                  CP   "/"   ; // comment
0847   CA 91 08               JP   z,comment   
084A   FE 61                  CP   "a"   ; /ab absolute /ad address of
084C   28 4C                  JR   z,command_a   
084E   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0850                             ; /bd buf decimal /bp buf params
0850                             ; /bs buf string /br break
0850   CA D7 08               JP   z,command_b   
0853   FE 63                  CP   "c"   ; /c chars
0855   CA F2 0A               JP   z,chars   
0858   FE 66                  CP   "f"   ; /f false
085A   CA 6D 06               JP   z,false1   
085D   FE 69                  CP   "i"   ; /in input iv invert
085F   CA E3 0A               JP   z,command_i   
0862   FE 6B                  CP   "k"   ; /k key
0864   CA 05 0B               JP   z,key   
0867   FE 6E                  CP   "n"   ; /n numbers
0869   CA 17 0B               JP   z,numbers   
086C   FE 6F                  CP   "o"   ; /o output
086E   CA 0E 0B               JP   z,output   
0871   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0873   CA E3 09               JP   z,command_p   
0876   FE 74                  CP   "t"   ; /t true
0878   CA 67 06               JP   z,true1   
087B   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
087D   CA 90 0A               JP   z,command_v   
0880   FE 78                  CP   "x"   ; /x xor
0882   CA BA 03               JP   z,xor   
0885   FE 7A                  CP   "z"   ; /z
0887   CA 1F 0B               JP   z,zprt   
088A                ERROR1:      
088A   21 01 00               LD   hl,1   ; error 1: unknown command
088D   E5                     PUSH   hl   
088E   C3 94 0C               JP   error   
0891                COMMENT:      
0891   03                     INC   bc   ; point to next char
0892   0A                     LD   a,(bc)   
0893   FE 20                  CP   " "   ; terminate on any char less than SP
0895   30 FA                  JR   nc,comment   
0897   0B                     DEC   bc   
0898   DD E9                  JP   (ix)   
089A                COMMAND_A:      
089A   03                     INC   bc   
089B   0A                     LD   a,(bc)   
089C   FE 62                  CP   "b"   
089E   CA A9 08               JP   z,absolute   
08A1   FE 64                  CP   "d"   
08A3   CA B6 08               JP   z,addrOf   
08A6   C3 8A 08               JP   error1   
08A9                             ; /ab absolute
08A9                             ; num -- num
08A9                ABSOLUTE:      
08A9   E1                     POP   hl   
08AA   CB 7C                  BIT   7,h   
08AC   C8                     RET   z   
08AD   AF                     XOR   a   
08AE   95                     SUB   l   
08AF   6F                     LD   l,a   
08B0   9F                     SBC   a,a   
08B1   94                     SUB   h   
08B2   67                     LD   h,a   
08B3   E5                     PUSH   hl   
08B4   DD E9                  JP   (ix)   
08B6                             ; /ad addrOf
08B6                             ; char -- addr
08B6                ADDROF:      
08B6   E1                     POP   hl   ; a = char
08B7   7D                     LD   a,l   
08B8   FE 7B                  CP   "z"+1   ; if a > z then exit
08BA   30 19                  JR   nc,addrOf2   
08BC   D6 41                  SUB   "A"   ; a - 65
08BE   38 15                  JR   c,addrOf2   ; if < A then exit
08C0   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C2   38 06                  JR   c,addrOf1   
08C4   D6 06                  SUB   "a"-("Z"+1)   
08C6   FE 1A                  CP   "Z"-"A"+1   
08C8   38 0B                  JR   c,addrOf2   ; if < a then exit
08CA                ADDROF1:      
08CA   87                     ADD   a,a   ; double a
08CB   21 00 46               LD   hl,VARS   ; hl = VARS + a
08CE   85                     ADD   a,l   
08CF   6F                     LD   l,a   
08D0   3E 00                  LD   a,0   
08D2   8C                     ADC   a,h   
08D3   67                     LD   h,a   
08D4   E5                     PUSH   hl   
08D5                ADDROF2:      
08D5   DD E9                  JP   (ix)   
08D7                COMMAND_B:      
08D7   03                     INC   bc   
08D8   0A                     LD   a,(bc)   
08D9   FE 63                  CP   "c"   ; /bc buffer char
08DB   CA FA 08               JP   z,bufferChar   
08DE   FE 64                  CP   "d"   ; /bd buffer decimal
08E0   CA 09 09               JP   z,bufferDec   
08E3   FE 68                  CP   "h"   ; /bd buffer hexadecimal
08E5   CA 6A 09               JP   z,bufferHex   
08E8   FE 72                  CP   "r"   ; /br break
08EA   CA 99 09               JP   z,break   
08ED   FE 73                  CP   "s"   ; /bs buffer string
08EF   CA B3 09               JP   z,bufferString   
08F2   FE 78                  CP   "x"   ; /bx buffer x spaces
08F4   CA CF 09               JP   z,bufferXSpaces   
08F7   C3 8A 08               JP   error1   
08FA                             ; /bc buffer char
08FA                             ; char -- length
08FA                BUFFERCHAR:      
08FA   D1                     POP   de   ; e = char
08FB   2A EA 46               LD   hl,(vBufPtr)   ; hl = buffer*
08FE   73                     LD   (hl),e   ; e -> buffer*
08FF   23                     INC   hl   ; buffer*++
0900   22 EA 46               LD   (vBufPtr),hl   ; save buffer*' in pointer
0903   11 01 00               LD   de,1   ; return 1 byte
0906   D5                     PUSH   de   
0907   DD E9                  JP   (ix)   
0909                             ; /bd buffer decimal
0909                             ; value -- length               ; length can be used to rewind buffer*
0909                BUFFERDEC:      
0909   ED 5B EA 46            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
090D   D9                     EXX      
090E   E1                     POP   hl   ; hl = value
090F   CD 21 09               CALL   bufferDec0   
0912   D9                     EXX      ; de = buffer*' bc = IP
0913   2A EA 46               LD   hl,(vBufPtr)   ; hl = buffer*
0916   ED 53 EA 46            LD   (vBufPtr),de   ; update buffer* with buffer*'
091A   EB                     EX   de,hl   ; hl = length
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   E5                     PUSH   hl   ; return length
091F   DD E9                  JP   (ix)   
0921                             ; hl = value
0921                             ; de' = buffer*
0921                             ; a, bc, de, hl destroyed
0921                BUFFERDEC0:      
0921   CB 7C                  BIT   7,h   
0923   28 0C                  JR   z,bufferDec1   
0925   D9                     EXX      
0926   3E 2D                  LD   a,"-"   
0928   12                     LD   (de),a   
0929   13                     INC   de   
092A   D9                     EXX      
092B   AF                     XOR   a   
092C   95                     SUB   l   
092D   6F                     LD   l,a   
092E   9F                     SBC   a,a   
092F   94                     SUB   h   
0930   67                     LD   h,a   
0931                BUFFERDEC1:      
0931   0E 00                  LD   c,0   ; leading zeros flag = false
0933   11 F0 D8               LD   de,-10000   
0936   CD 51 09               CALL   bufferDec2   
0939   11 18 FC               LD   de,-1000   
093C   CD 51 09               CALL   bufferDec2   
093F   11 9C FF               LD   de,-100   
0942   CD 51 09               CALL   bufferDec2   
0945   1E F6                  LD   e,-10   
0947   CD 51 09               CALL   bufferDec2   
094A   0C                     INC   c   ; flag = true for at least digit
094B   1E FF                  LD   e,-1   
094D   CD 51 09               CALL   bufferDec2   
0950   C9                     RET      
0951                BUFFERDEC2:      
0951   06 2F                  LD   b,"0"-1   
0953                BUFFERDEC3:      
0953   04                     INC   b   
0954   19                     ADD   hl,de   
0955   38 FC                  JR   c,bufferDec3   
0957   ED 52                  SBC   hl,de   
0959   3E 30                  LD   a,"0"   
095B   B8                     CP   b   
095C   20 05                  JR   nz,bufferDec4   
095E   AF                     XOR   a   
095F   B1                     OR   c   
0960   C8                     RET   z   
0961   18 01                  JR   bufferDec5   
0963                BUFFERDEC4:      
0963   0C                     INC   c   
0964                BUFFERDEC5:      
0964   78                     LD   a,b   
0965   D9                     EXX      
0966   12                     LD   (de),a   
0967   13                     INC   de   
0968   D9                     EXX      
0969   C9                     RET      
096A                             ; /bh buffer hex
096A                             ; value -- length               ; length can be used to rewind buffer*
096A                BUFFERHEX:      
096A   E1                     POP   hl   ; hl = value
096B   ED 5B EA 46            LD   de,(vBufPtr)   
096F   7C                     LD   a,h   
0970   CD 85 09               CALL   bufferHex1   
0973   7D                     LD   a,l   
0974   CD 85 09               CALL   bufferHex1   
0977   EB                     EX   de,hl   
0978   ED 5B EA 46            LD   de,(vBufPtr)   
097C   22 EA 46               LD   (vBufPtr),hl   
097F   B7                     OR   a   
0980   ED 52                  SBC   hl,de   
0982   E5                     PUSH   hl   
0983   DD E9                  JP   (ix)   
0985                BUFFERHEX1:      
0985   F5                     PUSH   af   
0986   1F                     RRA      
0987   1F                     RRA      
0988   1F                     RRA      
0989   1F                     RRA      
098A   CD 8E 09               CALL   bufferHex2   
098D   F1                     POP   af   
098E                BUFFERHEX2:      
098E   E6 0F                  AND   0x0F   
0990   C6 90                  ADD   a,0x90   
0992   27                     DAA      
0993   CE 40                  ADC   a,0x40   
0995   27                     DAA      
0996   12                     LD   (de),a   
0997   13                     INC   de   
0998   C9                     RET      
0999                             ; /br break from loop
0999                             ; --
0999                BREAK:       
0999   E1                     POP   hl   
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   28 02                  JR   z,break1   
099E   DD E9                  JP   (ix)   
09A0                BREAK1:      
09A0   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09A2   FD 54                  LD   d,iyh   
09A4   21 08 00               LD   hl,8   
09A7   19                     ADD   hl,de   
09A8   23                     INC   hl   
09A9   23                     INC   hl   
09AA   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09AD   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09B0   C3 34 05               JP   blockEnd   
09B3                             ; /bs buffered string
09B3                             ; string* -- length
09B3                BUFFERSTRING:      
09B3   E1                     POP   hl   ; hl = string*
09B4   ED 5B EA 46            LD   de,(vBufPtr)   ; de = buffer*
09B8   18 03                  JR   bufferString1   
09BA                BUFFERSTRING0:      
09BA   12                     LD   (de),a   ; a -> buffer*
09BB   13                     INC   de   ; string*++ buffer++
09BC   23                     INC   hl   
09BD                BUFFERSTRING1:      
09BD   7E                     LD   a,(hl)   ; a <- string*
09BE   B7                     OR   a   ; if NUL exit loop
09BF   20 F9                  JR   nz,bufferString0   
09C1   2A EA 46               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09C4   ED 53 EA 46            LD   (vBufPtr),de   ; save buffer*' in pointer
09C8   EB                     EX   de,hl   ; hl = length
09C9   B7                     OR   a   
09CA   ED 52                  SBC   hl,de   
09CC   E5                     PUSH   hl   ; return length
09CD   DD E9                  JP   (ix)   
09CF                             ; /bx buffered x spaces
09CF                             ; length -- length
09CF                BUFFERXSPACES:      
09CF   D1                     POP   de   ; bc = length
09D0   D5                     PUSH   de   ; return length
09D1   2A EA 46               LD   hl,(vBufPtr)   ; hl = buffer*
09D4   18 04                  JR   bufferXSpaces2   
09D6                BUFFERXSPACES1:      
09D6   36 20                  LD   (hl)," "   
09D8   23                     INC   hl   
09D9   1B                     DEC   de   
09DA                BUFFERXSPACES2:      
09DA   7B                     LD   a,e   
09DB   B2                     OR   d   
09DC   20 F8                  JR   nz,bufferXSpaces1   
09DE   22 EA 46               LD   (vBufPtr),hl   ; save buffer*'
09E1   DD E9                  JP   (ix)   
09E3                COMMAND_P:      
09E3   03                     INC   bc   
09E4   0A                     LD   a,(bc)   
09E5   FE 61                  CP   "a"   
09E7   CA FC 09               JP   z,partial   
09EA   FE 63                  CP   "c"   
09EC   CA 1C 0A               JP   z,printChars   
09EF   FE 6B                  CP   "k"   
09F1   CA 2E 0A               JP   z,printStack   
09F4   FE 78                  CP   "x"   
09F6   CA 65 0A               JP   z,printX   
09F9   C3 8A 08               JP   error1   
09FC                             ; partial
09FC                             ; array* func* -- func1*
09FC                PARTIAL:      
09FC   E1                     POP   hl   ; h1 = func*
09FD   ED 5B EE 46            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A01   ED 43 FC 46            LD   (vTemp1),bc   ; save IP
0A05   01 06 00               LD   bc,6   ; bc = count
0A08   ED B0                  LDIR      ; clone func
0A0A   ED 4B FC 46            LD   bc,(vTemp1)   ; restore IP
0A0E   2A EE 46               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A11   ED 53 EE 46            LD   (vHeapPtr),de   ; heap* += 6
0A15   D1                     POP   de   ; de = array*
0A16   E5                     PUSH   hl   ; return partial_array*
0A17   73                     LD   (hl),e   ; compile array*
0A18   23                     INC   hl   
0A19   72                     LD   (hl),d   
0A1A   DD E9                  JP   (ix)   
0A1C                             ; printChars
0A1C                             ; char* len --
0A1C                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A1C                PRINTCHARS:      
0A1C   E1                     POP   hl   
0A1D   2B                     DEC   hl   
0A1E   D1                     POP   de   
0A1F   C3 24 0A               JP   printChars2   
0A22                PRINTCHARS1:      
0A22   13                     INC   de   
0A23   2B                     DEC   hl   
0A24                PRINTCHARS2:      
0A24   1A                     LD   a,(de)   
0A25   CD 85 00               CALL   putchar   
0A28   7D                     LD   a,l   
0A29   B4                     OR   h   
0A2A   20 F6                  JR   nz,printChars1   
0A2C   DD E9                  JP   (ix)   
0A2E                             ; /pk print stack
0A2E                             ; --
0A2E                PRINTSTACK:      
0A2E   ED 43 FC 46            LD   (vTemp1),bc   
0A32   CD CB 0B               CALL   printStr   
0A35   3D 3E 20 00            .CSTR   "=> "   
0A39   21 80 45               LD   hl,STACK   
0A3C   ED 72                  SBC   hl,sp   
0A3E   CB 3C                  SRL   h   
0A40   CB 1D                  RR   l   
0A42   44 4D                  LD   bc,hl   
0A44   21 80 45               LD   hl,STACK   
0A47   18 0F                  JR   printStack2   
0A49                PRINTSTACK1:      
0A49   0B                     DEC   bc   
0A4A   2B                     DEC   hl   
0A4B   56                     LD   d,(hl)   
0A4C   2B                     DEC   hl   
0A4D   5E                     LD   e,(hl)   
0A4E   EB                     EX   de,hl   
0A4F   CD 61 0B               CALL   prthex   
0A52   EB                     EX   de,hl   
0A53   3E 20                  LD   a," "   
0A55   CD 85 00               CALL   putchar   
0A58                PRINTSTACK2:      
0A58   79                     LD   a,c   
0A59   B0                     OR   b   
0A5A   20 ED                  JR   nz,printStack1   
0A5C   CD BB 0B               CALL   prompt   
0A5F   ED 4B FC 46            LD   bc,(vTemp1)   
0A63   DD E9                  JP   (ix)   
0A65                PRINTX:      
0A65   CD 76 06               CALL   go   
0A68   00 00                  DW   NUL   ; closure
0A6A   6E 0A                  DW   printX_block   
0A6C   58 0B                  DW   args1A0L   
0A6E                PRINTX_BLOCK:      
0A6E   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A90                COMMAND_V:      
0A90   03                     INC   bc   
0A91   0A                     LD   a,(bc)   
0A92   FE 62                  CP   "b"   
0A94   CA C2 0A               JP   z,varBufPtr   
0A97   FE 68                  CP   "h"   
0A99   CA CB 0A               JP   z,varHeapPtr   
0A9C   FE 74                  CP   "t"   
0A9E   CA D4 0A               JP   z,varTIBPtr   
0AA1   FE 42                  CP   "B"   
0AA3   CA B3 0A               JP   z,constBufStart   
0AA6   FE 48                  CP   "H"   
0AA8   CA B8 0A               JP   z,constHeapStart   
0AAB   FE 54                  CP   "T"   
0AAD   CA BD 0A               JP   z,constTIBStart   
0AB0   C3 8A 08               JP   error1   
0AB3                CONSTBUFSTART:      
0AB3   11 00 49               LD   de,BUF   
0AB6   18 28                  JR   constant   
0AB8                CONSTHEAPSTART:      
0AB8   11 00 4B               LD   de,HEAP   
0ABB   18 23                  JR   constant   
0ABD                CONSTTIBSTART:      
0ABD   11 00 48               LD   de,TIB   
0AC0   18 1E                  JR   constant   
0AC2                VARBUFPTR:      
0AC2   ED 5B EA 46            LD   de,(vBufPtr)   
0AC6   21 EA 46               LD   hl,vBufPtr   
0AC9   18 12                  JR   variable   
0ACB                VARHEAPPTR:      
0ACB   ED 5B EE 46            LD   de,(vHeapPtr)   
0ACF   21 EE 46               LD   hl,vHeapPtr   
0AD2   18 09                  JR   variable   
0AD4                VARTIBPTR:      
0AD4   ED 5B E8 46            LD   de,(vTIBPtr)   
0AD8   21 E8 46               LD   hl,vTIBPtr   
0ADB   18 00                  JR   variable   
0ADD                VARIABLE:      
0ADD   22 F0 46               LD   (vPointer),hl   
0AE0                CONSTANT:      
0AE0   D5                     PUSH   de   
0AE1   DD E9                  JP   (ix)   
0AE3                COMMAND_I:      
0AE3   03                     INC   bc   
0AE4   0A                     LD   a,(bc)   
0AE5   FE 6E                  CP   "n"   ; /in input
0AE7   CA FA 0A               JP   z,input   
0AEA   FE 76                  CP   "v"   ; /iv invert
0AEC   CA C5 03               JP   z,invert   
0AEF   C3 8A 08               JP   error1   
0AF2                CHARS:       
0AF2   21 01 00               LD   hl,1   
0AF5                CHARS1:      
0AF5   22 E6 46               LD   (vDataWidth),hl   
0AF8   DD E9                  JP   (ix)   
0AFA                             ; Z80 port input
0AFA                             ; port -- value
0AFA                INPUT:       
0AFA   E1                     POP   hl   
0AFB   59                     LD   e,c   ; save IP
0AFC   4D                     LD   c,l   
0AFD   ED 68                  IN   l,(c)   
0AFF   26 00                  LD   h,0   
0B01   4B                     LD   c,e   ; restore IP
0B02   E5                     PUSH   hl   
0B03   DD E9                  JP   (ix)   
0B05                KEY:         
0B05   CD 81 00               CALL   getchar   
0B08   26 00                  LD   h,0   
0B0A   6F                     LD   l,a   
0B0B   E5                     PUSH   hl   
0B0C   DD E9                  JP   (ix)   
0B0E                             ; Z80 port output
0B0E                             ; value port --
0B0E                OUTPUT:      
0B0E   E1                     POP   hl   
0B0F   59                     LD   e,c   ; save IP
0B10   4D                     LD   c,l   
0B11   E1                     POP   hl   
0B12   ED 69                  OUT   (c),l   
0B14   4B                     LD   c,e   ; restore IP
0B15   DD E9                  JP   (ix)   
0B17                NUMBERS:      
0B17   21 02 00               LD   hl,2   
0B1A   C3 F5 0A               JP   chars1   
0B1D                             ; 
0B1D                             ; 
0B1D                             ; 
0B1D                             ; 
0B1D                FILTER:      
0B1D                MAP:         
0B1D                SCAN:        
0B1D   DD E9                  JP   (ix)   
0B1F                ZPRT:        
0B1F   CD 76 06               CALL   go   
0B22   00 00                  DW   NUL   ; closure
0B24   2C 0B                  DW   zprt_block   
0B26   2A 0B                  DW   zprt_args   
0B28   02                     DB   2   ; num args + locals
0B29   01                     DB   1   ; num locals
0B2A                ZPRT_ARGS:      
0B2A   6E 73                  DB   "ns"   
0B2C                ZPRT_BLOCK:      
0B2C   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B53                             ;*******************************************************************
0B53                             ; reusable arglists
0B53                             ;*******************************************************************
0B53                ARGS0A1L_:      ; zero args one local
0B53   01                     DB   1   ; num args + locals
0B54   01                     DB   1   ; num locals
0B55                ARGS0A1L:      
0B55   61                     DB   "a"   
0B56                ARGS1A0L_:      ; one arg zero locals
0B56   01                     DB   1   ; num args + locals
0B57   00                     DB   0   ; num locals
0B58                ARGS1A0L:      
0B58   61                     DB   "a"   
0B59                ARGS1A1L_:      ; one arg one local
0B59   02                     DB   2   ; num args + locals
0B5A   01                     DB   1   ; num locals
0B5B                ARGS1A1L:      
0B5B   61 62                  DB   "ab"   
0B5D                ARGS2A0L_:      ; two args zero locals
0B5D   02                     DB   2   ; num args + locals
0B5E   00                     DB   0   ; num locals
0B5F                ARGS2A0L:      
0B5F   61 62                  DB   "ab"   
0B61                             ;*******************************************************************
0B61                             ; general routines
0B61                             ;*******************************************************************
0B61                             ; ; print decimal
0B61                             ; ; hl = value
0B61                             ; prtdec:
0B61                             ;     bit 7,h
0B61                             ;     jr z,prtdec0
0B61                             ;     ld a,"-"
0B61                             ;     call putchar
0B61                             ;     xor a
0B61                             ;     sub l
0B61                             ;     ld l,a
0B61                             ;     sbc a,a
0B61                             ;     sub h
0B61                             ;     ld h,a
0B61                             ; prtdec0:
0B61                             ;     push bc
0B61                             ;     ld c,0                      ; leading zeros flag = false
0B61                             ;     ld de,-10000
0B61                             ;     call prtdec1
0B61                             ;     ld de,-1000
0B61                             ;     call prtdec1
0B61                             ;     ld de,-100
0B61                             ;     call prtdec1
0B61                             ;     ld e,-10
0B61                             ;     call prtdec1
0B61                             ;     inc c                       ; flag = true for at least digit
0B61                             ;     ld e,-1
0B61                             ;     call prtdec1
0B61                             ;     pop bc
0B61                             ;     ret
0B61                             ; prtdec1:	
0B61                             ;     ld b,"0"-1
0B61                             ; prtdec2:	
0B61                             ;     inc b
0B61                             ;     add hl,de
0B61                             ;     jr c,prtdec2
0B61                             ;     sbc hl,de
0B61                             ;     ld a,"0"
0B61                             ;     cp b
0B61                             ;     jr nz,prtdec3
0B61                             ;     xor a
0B61                             ;     or c
0B61                             ;     ret z
0B61                             ;     jr prtdec4
0B61                             ; prtdec3:	
0B61                             ;     inc c
0B61                             ; prtdec4:	
0B61                             ;     ld a,b
0B61                             ;     jp putchar
0B61                PRTHEX:      ; display hl as a 16-bit number in hex.
0B61   C5                     PUSH   bc   ; preserve the IP
0B62   7C                     LD   a,h   
0B63   CD 6C 0B               CALL   prthex2   
0B66   7D                     LD   a,l   
0B67   CD 6C 0B               CALL   prthex2   
0B6A   C1                     POP   bc   
0B6B   C9                     RET      
0B6C                PRTHEX2:      
0B6C   4F                     LD   c,a   
0B6D   1F                     RRA      
0B6E   1F                     RRA      
0B6F   1F                     RRA      
0B70   1F                     RRA      
0B71   CD 75 0B               CALL   prthex3   
0B74   79                     LD   a,c   
0B75                PRTHEX3:      
0B75   E6 0F                  AND   0x0F   
0B77   C6 90                  ADD   a,0x90   
0B79   27                     DAA      
0B7A   CE 40                  ADC   a,0x40   
0B7C   27                     DAA      
0B7D   C3 85 00               JP   putchar   
0B80                PRTSTR0:      
0B80   CD 85 00               CALL   putchar   
0B83   23                     INC   hl   
0B84                PRTSTR:      
0B84   7E                     LD   a,(hl)   
0B85   B7                     OR   a   
0B86   20 F8                  JR   nz,prtstr0   
0B88   C9                     RET      
0B89                             ; **************************************************************************
0B89                             ; calculate nesting value
0B89                             ; a is char to be tested,
0B89                             ; e is the nesting value (initially 0)
0B89                             ; e is increased by ( and [
0B89                             ; e is decreased by ) and ]
0B89                             ; e has its bit 7 toggled by `
0B89                             ; limited to 127 levels
0B89                             ; **************************************************************************
0B89                NESTING:      
0B89   FE 22                  CP   DQUOTE   ; quote char
0B8B   28 06                  JR   z,nesting0   
0B8D   FE 60                  CP   "`"   ; quote char
0B8F   28 02                  JR   z,nesting0   
0B91   18 0A                  JR   nesting1   
0B93                NESTING0:      
0B93   CB 7B                  BIT   7,e   
0B95   28 03                  JR   z,nesting1a   
0B97   CB BB                  RES   7,e   
0B99   C9                     RET      
0B9A                NESTING1A:      
0B9A   CB FB                  SET   7,e   
0B9C   C9                     RET      
0B9D                NESTING1:      
0B9D   CB 7B                  BIT   7,e   
0B9F   C0                     RET   nz   
0BA0   FE 7B                  CP   "{"   
0BA2   28 08                  JR   z,nesting2   
0BA4   FE 5B                  CP   "["   
0BA6   28 04                  JR   z,nesting2   
0BA8   FE 28                  CP   "("   
0BAA   20 02                  JR   nz,nesting3   
0BAC                NESTING2:      
0BAC   1C                     INC   e   
0BAD   C9                     RET      
0BAE                NESTING3:      
0BAE   FE 7D                  CP   "}"   
0BB0   28 07                  JR   z,nesting4   
0BB2   FE 5D                  CP   "]"   
0BB4   28 03                  JR   z,nesting4   
0BB6   FE 29                  CP   ")"   
0BB8   C0                     RET   nz   
0BB9                NESTING4:      
0BB9   1D                     DEC   e   
0BBA   C9                     RET      
0BBB                PROMPT:      
0BBB   CD CB 0B               CALL   printStr   
0BBE   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BC3   C9                     RET      
0BC4                CRLF:        
0BC4   CD CB 0B               CALL   printStr   
0BC7   0D 0A 00               .CSTR   "\r\n"   
0BCA   C9                     RET      
0BCB                             ; prints a null teminated string
0BCB                             ; the string should be immediately following the call
0BCB                PRINTSTR:      
0BCB   E3                     EX   (sp),hl   ; swap			
0BCC   CD 84 0B               CALL   prtstr   
0BCF   23                     INC   hl   ; inc past NUL
0BD0   E3                     EX   (sp),hl   ; put it back	
0BD1   C9                     RET      
0BD2                INIT:        
0BD2   DD 2A EC 46            LD   ix,(vNext)   
0BD6   FD 21 80 45            LD   iy,STACK   
0BDA   21 80 01               LD   hl,isysVars   
0BDD   11 E6 46               LD   de,sysVars   
0BE0   01 10 00               LD   bc,8 * 2   
0BE3   ED B0                  LDIR      
0BE5   21 00 46               LD   hl,vars   ; 52 vars LO HI
0BE8   06 34                  LD   b,26*2   
0BEA   AF                     XOR   a   
0BEB                INIT0:       
0BEB   77                     LD   (hl),a   
0BEC   23                     INC   hl   
0BED   10 FC                  DJNZ   init0   
0BEF   C9                     RET      
0BF0                START:       
0BF0   31 80 45               LD   sp,STACK   ; start of monty
0BF3   CD D2 0B               CALL   init   ; setups
0BF6   CD CB 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BF9   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0C06                INTERPRET:      
0C06   CD BB 0B               CALL   prompt   
0C09   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C0C   21 00 48               LD   hl,TIB   
0C0F   22 E8 46               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C12                INTERPRET2:      ; calculate nesting
0C12   1E 00                  LD   e,0   ; initilize nesting value
0C14   C5                     PUSH   bc   ; save offset into TIB,
0C15                             ; bc is also the count of chars in TIB
0C15   21 00 48               LD   hl,TIB   ; hl is start of TIB
0C18   18 06                  JR   interpret4   
0C1A                INTERPRET3:      
0C1A   7E                     LD   a,(hl)   ; a = char in TIB
0C1B   23                     INC   hl   ; inc pointer into TIB
0C1C   0B                     DEC   bc   ; dec count of chars in TIB
0C1D   CD 89 0B               CALL   nesting   ; update nesting value
0C20                INTERPRET4:      
0C20   79                     LD   a,c   ; is count zero?
0C21   B0                     OR   b   
0C22   20 F6                  JR   nz,interpret3   ; if not loop
0C24   C1                     POP   bc   ; restore offset into TIB
0C25                INTERPRET5:      
0C25   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C28   FE 20                  CP   $20   ; compare to space
0C2A   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C2C   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C2E                             ; ???? NEEDED?
0C2E   28 3B                  JR   z,interpret8   
0C30   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C32   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C34   FE 05                  CP   CTRL_E   
0C36   CA B7 0C               JP   z,edit_   
0C39   FE 08                  CP   CTRL_H   
0C3B   CA A7 0C               JP   z,backSpace_   
0C3E   FE 0A                  CP   CTRL_J   
0C40   CA CF 0C               JP   z,reEdit_   
0C43   FE 13                  CP   CTRL_S   
0C45   CA D2 0C               JP   z,printStack_   
0C48                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C48                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C48                             ; DB     lsb(list_)       ; FF  ^L 12
0C48                             ; DB     lsb(printStack_) ; DLE ^P 16
0C48                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C48                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C48                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C48                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C48                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C48                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C48                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C48                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C48                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C48                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C48                INTERPRET5A:      
0C48                             ; ld (vTIBPtr),bc
0C48                             ; ld bc,(vTIBPtr)
0C48   18 C8                  JR   interpret2   
0C4A                INTERPRET6:      
0C4A   21 00 48               LD   hl,TIB   
0C4D   09                     ADD   hl,bc   
0C4E   77                     LD   (hl),a   ; store the character in textbuf
0C4F   03                     INC   bc   
0C50   CD 85 00               CALL   putchar   ; echo character to screen
0C53   CD 89 0B               CALL   nesting   
0C56   18 CD                  JR   interpret5   ; wait for next character
0C58                INTERPRET7:      
0C58   21 00 48               LD   hl,TIB   
0C5B   09                     ADD   hl,bc   
0C5C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C5E   23                     INC   hl   
0C5F   36 0A                  LD   (hl),"\n"   
0C61   23                     INC   hl   
0C62   03                     INC   bc   
0C63   03                     INC   bc   
0C64   CD C4 0B               CALL   crlf   ; echo character to screen
0C67   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C68   B7                     OR   a   
0C69   20 BA                  JR   nz,interpret5   
0C6B                INTERPRET8:      
0C6B   21 00 48               LD   hl,TIB   
0C6E   09                     ADD   hl,bc   
0C6F   22 E8 46               LD   (vTIBPtr),hl   
0C72   01 00 48               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C75                             ; we pressed enter
0C75   0B                     DEC   bc   
0C76                NEXT:        
0C76   03                     INC   bc   ; Increment the IP
0C77   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C78   FE 20                  CP   " "   ; whitespace?
0C7A   28 FA                  JR   z,next   ; space? ignore
0C7C   38 07                  JR   c,next1   
0C7E   6F                     LD   l,a   ; index into table
0C7F   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0C81   6E                     LD   l,(hl)   ; get low jump address
0C82   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C84   E9                     JP   (hl)   ; Jump to routine
0C85                NEXT1:       
0C85   FE 00                  CP   NUL   ; end of input string?
0C87   28 03                  JR   z,exit   
0C89   C3 06 0C               JP   interpret   ; no, other whitespace, macros?
0C8C                EXIT:        
0C8C   03                     INC   bc   
0C8D   60 69                  LD   hl,bc   
0C8F   E9                     JP   (hl)   
0C90                RUN:         
0C90   C1                     POP   bc   
0C91   0B                     DEC   bc   
0C92   DD E9                  JP   (ix)   
0C94                ERROR:       
0C94   CD 90 0C               CALL   run   
0C97   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CA4   C3 06 0C               JP   interpret   
0CA7                BACKSPACE_:      
0CA7   79                     LD   a,c   
0CA8   B0                     OR   b   
0CA9   CA 12 0C               JP   z,interpret2   
0CAC   0B                     DEC   bc   
0CAD   CD CB 0B               CALL   printStr   
0CB0   08 20 08 00            .CSTR   "\b \b"   
0CB4   C3 12 0C               JP   interpret2   
0CB7                             ; edit
0CB7                EDIT_:       
0CB7   CD 90 0C               CALL   run   
0CBA   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CCC   C3 06 0C               JP   interpret   
0CCF                REEDIT_:      
0CCF   C3 06 0C               JP   interpret   
0CD2                PRINTSTACK_:      
0CD2   CD 90 0C               CALL   run   
0CD5   2F 70 6B 00            .CSTR   "/pk"   
0CD9   C3 06 0C               JP   interpret   
0CDC                             ; editDef:
0CDC                             ;     pop hl                      ; pop ret address
0CDC                             ;     ex (sp),hl                  ; swap with TOS
0CDC                             ;     push hl                     ; dup TOS
0CDC                             ;     ld a,l                      ; a = ident
0CDC                             ;     ld de,TIB                   ; de = start of TIB
0CDC                             ;     ld (vTIBPtr),de             ; update TIB*
0CDC                             ;     push ix                     ; save NEXT
0CDC                             ;     ld ix,editDef0              ; NEXT = editDef0
0CDC                             ;     jp lookupRef                ; convert letter into address
0CDC                             ; editDef0:
0CDC                             ;     ld e,(hl)                   ; de = (hl++)
0CDC                             ;     inc hl
0CDC                             ;     ld d,(hl)
0CDC                             ;     ld a,d                      ; de == 0 ?
0CDC                             ;     or e
0CDC                             ;     jr z,editDef4
0CDC                             ;     ld ix,editDef3              ; NEXT = editDef3
0CDC                             ;     ex de,hl
0CDC                             ;     ld a,(hl)
0CDC                             ;     cp "{"
0CDC                             ;     jr nz,editDef1
0CDC                             ;     jp editBlock0               ; convert letter into address
0CDC                             ; editDef1:
0CDC                             ;     cp "("
0CDC                             ;     jr nz,editDef2
0CDC                             ;     jp editBlock0               ; convert letter into address
0CDC                             ; editDef2:
0CDC                             ;     jp editFunc
0CDC                             ; editDef3:
0CDC                             ;     ld a," "                    ; write assign
0CDC                             ;     call writeChar
0CDC                             ;     pop hl                      ; a = ident
0CDC                             ;     ld a,l
0CDC                             ;     call writeChar
0CDC                             ;     ld a,"="                    ; write assign
0CDC                             ;     call writeChar
0CDC                             ;     ld ix,editDef4              ; NEXT = editDef4
0CDC                             ;     jp printTIB
0CDC                             ; editDef4:
0CDC                             ;     pop ix                      ; restore NEXT
0CDC                             ;     jp (ix)
0CDC                             ; writeChar:
0CDC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CDC                             ;     ld (de),a                   ; write ident
0CDC                             ;     inc de
0CDC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CDC                             ;     ret
0CDC                             ; ; printTIB
0CDC                             ; printTIB:
0CDC                             ;     ld hl,(vTIBPtr)
0CDC                             ;     ld de,TIB
0CDC                             ;     or a
0CDC                             ;     sbc hl,de
0CDC                             ;     jp printTIB2
0CDC                             ; printTIB1:
0CDC                             ;     ld a,(de)
0CDC                             ;     call putchar
0CDC                             ; printTIB2:
0CDC                             ;     ld a,l
0CDC                             ;     or h
0CDC                             ;     jr nz,printTIB1
0CDC                             ;     jp (ix)
0CDC                             ; editBlock:
0CDC                             ;     pop hl                      ; hl = block*
0CDC                             ; editBlock0:
0CDC                             ;     push ix                     ; save next
0CDC                             ;     push hl                     ; push block*
0CDC                             ;     push hl                     ; push block*
0CDC                             ;     ld ix,(editBlock2)
0CDC                             ;     jp blockLength
0CDC                             ; editBlock1:
0CDC                             ;     pop hl                      ; bc = length, (sp) = IP
0CDC                             ;     pop de                      ; de = block*
0CDC                             ;     ld a,l
0CDC                             ;     or h
0CDC                             ;     jr z,editBlock2
0CDC                             ;     push bc
0CDC                             ;     ld bc,hl
0CDC                             ;     ex de,hl                    ; hl = block*
0CDC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CDC                             ;     ldir                        ; copy block to TIB
0CDC                             ;     ld (vTIBPtr),de              ; save TIB*
0CDC                             ;     pop bc
0CDC                             ; editBlock2:
0CDC                             ;     pop ix                      ; restore next
0CDC                             ;     jp (ix)
0CDC                             ; editFunc:
0CDC                             ;     jp (ix)
0CDC                             ; editArray:
0CDC                             ;     jp (ix)
0CDC                             ; editArglist:
0CDC                             ;     jp (ix)
0CDC                             ; ; blockLength
0CDC                             ; ; addr1 -- length
0CDC                             ; blockLength:
0CDC                             ;     pop hl                      ; block*
0CDC                             ;     push hl                     ; save block*
0CDC                             ;     inc hl                      ; skip first char
0CDC                             ;     ld d,1                      ; increase nesting
0CDC                             ; blockLength1:                   ; Skip to end of definition
0CDC                             ;     ld a,(hl)                   ; Get the next character
0CDC                             ;     inc hl                      ; Point to next character
0CDC                             ;     cp " " + 1                  ; ignore whitespace
0CDC                             ;     jr c,blockLength1
0CDC                             ;     cp ")"
0CDC                             ;     jr z,blockLength4
0CDC                             ;     cp "}"
0CDC                             ;     jr z,blockLength4
0CDC                             ;     cp "]"
0CDC                             ;     jr z,blockLength4
0CDC                             ;     cp "("
0CDC                             ;     jr z,blockLength2
0CDC                             ;     cp "{"
0CDC                             ;     jr z,blockLength2
0CDC                             ;     cp "["
0CDC                             ;     jr z,blockLength2
0CDC                             ;     cp "'"
0CDC                             ;     jr z,blockLength3
0CDC                             ;     cp "`"
0CDC                             ;     jr z,blockLength3
0CDC                             ;     cp DQUOTE
0CDC                             ;     jr z,blockLength3
0CDC                             ;     jr blockLength1
0CDC                             ; blockLength2:
0CDC                             ;     inc d
0CDC                             ;     jr blockLength1
0CDC                             ; blockLength4:
0CDC                             ;     dec d
0CDC                             ;     jr nz, blockLength1         ; get the next element
0CDC                             ; blockLength3:
0CDC                             ;     ld a,$80
0CDC                             ;     xor d
0CDC                             ;     ld d,a
0CDC                             ;     jr nz, blockLength1
0CDC                             ;     pop hl                      ; hl = block*
0CDC                             ;     or a
0CDC                             ;     sbc hl,de
0CDC                             ;     push hl
0CDC                             ;     jp (ix)
0CDC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CDC                             ; \a start of stack \#3 depth \b base \$ prompt
0CDC                             ; DW dStack               ; a vS0 start of datastack			
0CDC                             ; DW FALSE                ; b vBase16
0CDC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CDC                             ; DW 0                    ; d
0CDC                             ; DW 65                   ; e vLastDef "A" last command u defined
0CDC                             ; DW 0                    ; f
0CDC                             ; DW page6                ; g 256 bytes limits
0CDC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CDC                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "#1234", 2
0D00   31 80 45               LD   SP,STACK   
0D03   CD D2 0B               CALL   init   
0D06   CD 66 44               CALL   execStr   
0D09   23 31 32 33 34 00      .CSTR   "#1234"   
0D0F                          ;*Macro unroll:  expect "#1234",2
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 02 00               LD   DE,2   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 72 0D               JP   Z,expectM_0_2702S50   
0D1C   CD CB 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 23 31 32 33 34 00 .CSTR   "Code: ","#1234"   
0D2B   CD CB 0B               CALL   printStr   
0D2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3D   21 02 00               LD   hl,2   
0D40   E5                     PUSH   hl   
0D41   CD 90 0C               CALL   run   
0D44   2E 00                  .CSTR   "."   
0D46   CD CB 0B               CALL   printStr   
0D49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D56   E1                     POP   hl   
0D57   E5                     PUSH   hl   
0D58   E5                     PUSH   hl   
0D59   CD 90 0C               CALL   run   
0D5C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D70   76                     HALT      
0D71   00                     .CSTR      
0D72                EXPECTM_0_2702S50:      
0D72   E1                     POP   HL   
0D73                             ; call printStr
0D73                             ; .cstr "Done!"
0D73                             ; HALT
0D73                             ; 
0D73                          ;*Macro unroll:  test "/f", false
0D73   31 80 45               LD   SP,STACK   
0D76   CD D2 0B               CALL   init   
0D79   CD 66 44               CALL   execStr   
0D7C   2F 66 00               .CSTR   "/f"   
0D7F                          ;*Macro unroll:  expect "/f",false
0D7F   E1                     POP   HL   
0D80   E5                     PUSH   HL   
0D81   11 00 00               LD   DE,false   
0D84   B7                     OR   A   
0D85   ED 52                  SBC   HL,DE   
0D87   7D                     LD   A,L   
0D88   B4                     OR   H   
0D89   CA DF 0D               JP   Z,expectM_0_2707S50   
0D8C   CD CB 0B               CALL   printStr   
0D8F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D98   CD CB 0B               CALL   printStr   
0D9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DAA   21 00 00               LD   hl,false   
0DAD   E5                     PUSH   hl   
0DAE   CD 90 0C               CALL   run   
0DB1   2E 00                  .CSTR   "."   
0DB3   CD CB 0B               CALL   printStr   
0DB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DC3   E1                     POP   hl   
0DC4   E5                     PUSH   hl   
0DC5   E5                     PUSH   hl   
0DC6   CD 90 0C               CALL   run   
0DC9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DDD   76                     HALT      
0DDE   00                     .CSTR      
0DDF                EXPECTM_0_2707S50:      
0DDF   E1                     POP   HL   
0DE0                          ;*Macro unroll:  test "/t", true
0DE0   31 80 45               LD   SP,STACK   
0DE3   CD D2 0B               CALL   init   
0DE6   CD 66 44               CALL   execStr   
0DE9   2F 74 00               .CSTR   "/t"   
0DEC                          ;*Macro unroll:  expect "/t",true
0DEC   E1                     POP   HL   
0DED   E5                     PUSH   HL   
0DEE   11 FF FF               LD   DE,true   
0DF1   B7                     OR   A   
0DF2   ED 52                  SBC   HL,DE   
0DF4   7D                     LD   A,L   
0DF5   B4                     OR   H   
0DF6   CA 4C 0E               JP   Z,expectM_0_2708S50   
0DF9   CD CB 0B               CALL   printStr   
0DFC   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E05   CD CB 0B               CALL   printStr   
0E08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E17   21 FF FF               LD   hl,true   
0E1A   E5                     PUSH   hl   
0E1B   CD 90 0C               CALL   run   
0E1E   2E 00                  .CSTR   "."   
0E20   CD CB 0B               CALL   printStr   
0E23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E30   E1                     POP   hl   
0E31   E5                     PUSH   hl   
0E32   E5                     PUSH   hl   
0E33   CD 90 0C               CALL   run   
0E36   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E4A   76                     HALT      
0E4B   00                     .CSTR      
0E4C                EXPECTM_0_2708S50:      
0E4C   E1                     POP   HL   
0E4D                          ;*Macro unroll:  test "1", 1
0E4D   31 80 45               LD   SP,STACK   
0E50   CD D2 0B               CALL   init   
0E53   CD 66 44               CALL   execStr   
0E56   31 00                  .CSTR   "1"   
0E58                          ;*Macro unroll:  expect "1",1
0E58   E1                     POP   HL   
0E59   E5                     PUSH   HL   
0E5A   11 01 00               LD   DE,1   
0E5D   B7                     OR   A   
0E5E   ED 52                  SBC   HL,DE   
0E60   7D                     LD   A,L   
0E61   B4                     OR   H   
0E62   CA B7 0E               JP   Z,expectM_0_2709S50   
0E65   CD CB 0B               CALL   printStr   
0E68   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E70   CD CB 0B               CALL   printStr   
0E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E82   21 01 00               LD   hl,1   
0E85   E5                     PUSH   hl   
0E86   CD 90 0C               CALL   run   
0E89   2E 00                  .CSTR   "."   
0E8B   CD CB 0B               CALL   printStr   
0E8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E9B   E1                     POP   hl   
0E9C   E5                     PUSH   hl   
0E9D   E5                     PUSH   hl   
0E9E   CD 90 0C               CALL   run   
0EA1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0EB5   76                     HALT      
0EB6   00                     .CSTR      
0EB7                EXPECTM_0_2709S50:      
0EB7   E1                     POP   HL   
0EB8                          ;*Macro unroll:  test "2", 2
0EB8   31 80 45               LD   SP,STACK   
0EBB   CD D2 0B               CALL   init   
0EBE   CD 66 44               CALL   execStr   
0EC1   32 00                  .CSTR   "2"   
0EC3                          ;*Macro unroll:  expect "2",2
0EC3   E1                     POP   HL   
0EC4   E5                     PUSH   HL   
0EC5   11 02 00               LD   DE,2   
0EC8   B7                     OR   A   
0EC9   ED 52                  SBC   HL,DE   
0ECB   7D                     LD   A,L   
0ECC   B4                     OR   H   
0ECD   CA 22 0F               JP   Z,expectM_0_2710S50   
0ED0   CD CB 0B               CALL   printStr   
0ED3   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0EDB   CD CB 0B               CALL   printStr   
0EDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EED   21 02 00               LD   hl,2   
0EF0   E5                     PUSH   hl   
0EF1   CD 90 0C               CALL   run   
0EF4   2E 00                  .CSTR   "."   
0EF6   CD CB 0B               CALL   printStr   
0EF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F06   E1                     POP   hl   
0F07   E5                     PUSH   hl   
0F08   E5                     PUSH   hl   
0F09   CD 90 0C               CALL   run   
0F0C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F20   76                     HALT      
0F21   00                     .CSTR      
0F22                EXPECTM_0_2710S50:      
0F22   E1                     POP   HL   
0F23                          ;*Macro unroll:  test "1", 1
0F23   31 80 45               LD   SP,STACK   
0F26   CD D2 0B               CALL   init   
0F29   CD 66 44               CALL   execStr   
0F2C   31 00                  .CSTR   "1"   
0F2E                          ;*Macro unroll:  expect "1",1
0F2E   E1                     POP   HL   
0F2F   E5                     PUSH   HL   
0F30   11 01 00               LD   DE,1   
0F33   B7                     OR   A   
0F34   ED 52                  SBC   HL,DE   
0F36   7D                     LD   A,L   
0F37   B4                     OR   H   
0F38   CA 8D 0F               JP   Z,expectM_0_2711S50   
0F3B   CD CB 0B               CALL   printStr   
0F3E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F46   CD CB 0B               CALL   printStr   
0F49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F58   21 01 00               LD   hl,1   
0F5B   E5                     PUSH   hl   
0F5C   CD 90 0C               CALL   run   
0F5F   2E 00                  .CSTR   "."   
0F61   CD CB 0B               CALL   printStr   
0F64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F71   E1                     POP   hl   
0F72   E5                     PUSH   hl   
0F73   E5                     PUSH   hl   
0F74   CD 90 0C               CALL   run   
0F77   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F8B   76                     HALT      
0F8C   00                     .CSTR      
0F8D                EXPECTM_0_2711S50:      
0F8D   E1                     POP   HL   
0F8E                          ;*Macro unroll:  test "0", 0
0F8E   31 80 45               LD   SP,STACK   
0F91   CD D2 0B               CALL   init   
0F94   CD 66 44               CALL   execStr   
0F97   30 00                  .CSTR   "0"   
0F99                          ;*Macro unroll:  expect "0",0
0F99   E1                     POP   HL   
0F9A   E5                     PUSH   HL   
0F9B   11 00 00               LD   DE,0   
0F9E   B7                     OR   A   
0F9F   ED 52                  SBC   HL,DE   
0FA1   7D                     LD   A,L   
0FA2   B4                     OR   H   
0FA3   CA F8 0F               JP   Z,expectM_0_2712S50   
0FA6   CD CB 0B               CALL   printStr   
0FA9   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FB1   CD CB 0B               CALL   printStr   
0FB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FC3   21 00 00               LD   hl,0   
0FC6   E5                     PUSH   hl   
0FC7   CD 90 0C               CALL   run   
0FCA   2E 00                  .CSTR   "."   
0FCC   CD CB 0B               CALL   printStr   
0FCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FDC   E1                     POP   hl   
0FDD   E5                     PUSH   hl   
0FDE   E5                     PUSH   hl   
0FDF   CD 90 0C               CALL   run   
0FE2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FF6   76                     HALT      
0FF7   00                     .CSTR      
0FF8                EXPECTM_0_2712S50:      
0FF8   E1                     POP   HL   
0FF9                          ;*Macro unroll:  test "10", 10
0FF9   31 80 45               LD   SP,STACK   
0FFC   CD D2 0B               CALL   init   
0FFF   CD 66 44               CALL   execStr   
1002   31 30 00               .CSTR   "10"   
1005                          ;*Macro unroll:  expect "10",10
1005   E1                     POP   HL   
1006   E5                     PUSH   HL   
1007   11 0A 00               LD   DE,10   
100A   B7                     OR   A   
100B   ED 52                  SBC   HL,DE   
100D   7D                     LD   A,L   
100E   B4                     OR   H   
100F   CA 65 10               JP   Z,expectM_0_2713S50   
1012   CD CB 0B               CALL   printStr   
1015   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
101E   CD CB 0B               CALL   printStr   
1021   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1030   21 0A 00               LD   hl,10   
1033   E5                     PUSH   hl   
1034   CD 90 0C               CALL   run   
1037   2E 00                  .CSTR   "."   
1039   CD CB 0B               CALL   printStr   
103C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1049   E1                     POP   hl   
104A   E5                     PUSH   hl   
104B   E5                     PUSH   hl   
104C   CD 90 0C               CALL   run   
104F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1063   76                     HALT      
1064   00                     .CSTR      
1065                EXPECTM_0_2713S50:      
1065   E1                     POP   HL   
1066                          ;*Macro unroll:  test "123", 123
1066   31 80 45               LD   SP,STACK   
1069   CD D2 0B               CALL   init   
106C   CD 66 44               CALL   execStr   
106F   31 32 33 00            .CSTR   "123"   
1073                          ;*Macro unroll:  expect "123",123
1073   E1                     POP   HL   
1074   E5                     PUSH   HL   
1075   11 7B 00               LD   DE,123   
1078   B7                     OR   A   
1079   ED 52                  SBC   HL,DE   
107B   7D                     LD   A,L   
107C   B4                     OR   H   
107D   CA D4 10               JP   Z,expectM_0_2714S50   
1080   CD CB 0B               CALL   printStr   
1083   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
108D   CD CB 0B               CALL   printStr   
1090   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
109F   21 7B 00               LD   hl,123   
10A2   E5                     PUSH   hl   
10A3   CD 90 0C               CALL   run   
10A6   2E 00                  .CSTR   "."   
10A8   CD CB 0B               CALL   printStr   
10AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B8   E1                     POP   hl   
10B9   E5                     PUSH   hl   
10BA   E5                     PUSH   hl   
10BB   CD 90 0C               CALL   run   
10BE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10D2   76                     HALT      
10D3   00                     .CSTR      
10D4                EXPECTM_0_2714S50:      
10D4   E1                     POP   HL   
10D5                          ;*Macro unroll:  test "-1",-1
10D5   31 80 45               LD   SP,STACK   
10D8   CD D2 0B               CALL   init   
10DB   CD 66 44               CALL   execStr   
10DE   2D 31 00               .CSTR   "-1"   
10E1                          ;*Macro unroll:  expect "-1",-1
10E1   E1                     POP   HL   
10E2   E5                     PUSH   HL   
10E3   11 FF FF               LD   DE,-1   
10E6   B7                     OR   A   
10E7   ED 52                  SBC   HL,DE   
10E9   7D                     LD   A,L   
10EA   B4                     OR   H   
10EB   CA 41 11               JP   Z,expectM_0_2715S50   
10EE   CD CB 0B               CALL   printStr   
10F1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10FA   CD CB 0B               CALL   printStr   
10FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
110C   21 FF FF               LD   hl,-1   
110F   E5                     PUSH   hl   
1110   CD 90 0C               CALL   run   
1113   2E 00                  .CSTR   "."   
1115   CD CB 0B               CALL   printStr   
1118   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1125   E1                     POP   hl   
1126   E5                     PUSH   hl   
1127   E5                     PUSH   hl   
1128   CD 90 0C               CALL   run   
112B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
113F   76                     HALT      
1140   00                     .CSTR      
1141                EXPECTM_0_2715S50:      
1141   E1                     POP   HL   
1142                          ;*Macro unroll:  test "''", 0
1142   31 80 45               LD   SP,STACK   
1145   CD D2 0B               CALL   init   
1148   CD 66 44               CALL   execStr   
114B   27 27 00               .CSTR   "''"   
114E                          ;*Macro unroll:  expect "''",0
114E   E1                     POP   HL   
114F   E5                     PUSH   HL   
1150   11 00 00               LD   DE,0   
1153   B7                     OR   A   
1154   ED 52                  SBC   HL,DE   
1156   7D                     LD   A,L   
1157   B4                     OR   H   
1158   CA AE 11               JP   Z,expectM_0_2716S50   
115B   CD CB 0B               CALL   printStr   
115E   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1167   CD CB 0B               CALL   printStr   
116A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1179   21 00 00               LD   hl,0   
117C   E5                     PUSH   hl   
117D   CD 90 0C               CALL   run   
1180   2E 00                  .CSTR   "."   
1182   CD CB 0B               CALL   printStr   
1185   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1192   E1                     POP   hl   
1193   E5                     PUSH   hl   
1194   E5                     PUSH   hl   
1195   CD 90 0C               CALL   run   
1198   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11AC   76                     HALT      
11AD   00                     .CSTR      
11AE                EXPECTM_0_2716S50:      
11AE   E1                     POP   HL   
11AF                          ;*Macro unroll:  test "'a'", $61
11AF   31 80 45               LD   SP,STACK   
11B2   CD D2 0B               CALL   init   
11B5   CD 66 44               CALL   execStr   
11B8   27 61 27 00            .CSTR   "'a'"   
11BC                          ;*Macro unroll:  expect "'a'",$61
11BC   E1                     POP   HL   
11BD   E5                     PUSH   HL   
11BE   11 61 00               LD   DE,$61   
11C1   B7                     OR   A   
11C2   ED 52                  SBC   HL,DE   
11C4   7D                     LD   A,L   
11C5   B4                     OR   H   
11C6   CA 1D 12               JP   Z,expectM_0_2717S50   
11C9   CD CB 0B               CALL   printStr   
11CC   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
11D6   CD CB 0B               CALL   printStr   
11D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E8   21 61 00               LD   hl,$61   
11EB   E5                     PUSH   hl   
11EC   CD 90 0C               CALL   run   
11EF   2E 00                  .CSTR   "."   
11F1   CD CB 0B               CALL   printStr   
11F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1201   E1                     POP   hl   
1202   E5                     PUSH   hl   
1203   E5                     PUSH   hl   
1204   CD 90 0C               CALL   run   
1207   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
121B   76                     HALT      
121C   00                     .CSTR      
121D                EXPECTM_0_2717S50:      
121D   E1                     POP   HL   
121E                          ;*Macro unroll:  test "'\\''", $27
121E   31 80 45               LD   SP,STACK   
1221   CD D2 0B               CALL   init   
1224   CD 66 44               CALL   execStr   
1227   27 5C 27 27 00         .CSTR   "'\\''"   
122C                          ;*Macro unroll:  expect "'\\''",$27
122C   E1                     POP   HL   
122D   E5                     PUSH   HL   
122E   11 27 00               LD   DE,$27   
1231   B7                     OR   A   
1232   ED 52                  SBC   HL,DE   
1234   7D                     LD   A,L   
1235   B4                     OR   H   
1236   CA 8E 12               JP   Z,expectM_0_2718S50   
1239   CD CB 0B               CALL   printStr   
123C   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1247   CD CB 0B               CALL   printStr   
124A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1259   21 27 00               LD   hl,$27   
125C   E5                     PUSH   hl   
125D   CD 90 0C               CALL   run   
1260   2E 00                  .CSTR   "."   
1262   CD CB 0B               CALL   printStr   
1265   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1272   E1                     POP   hl   
1273   E5                     PUSH   hl   
1274   E5                     PUSH   hl   
1275   CD 90 0C               CALL   run   
1278   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
128C   76                     HALT      
128D   00                     .CSTR      
128E                EXPECTM_0_2718S50:      
128E   E1                     POP   HL   
128F                          ;*Macro unroll:  test "#10", $10
128F   31 80 45               LD   SP,STACK   
1292   CD D2 0B               CALL   init   
1295   CD 66 44               CALL   execStr   
1298   23 31 30 00            .CSTR   "#10"   
129C                          ;*Macro unroll:  expect "#10",$10
129C   E1                     POP   HL   
129D   E5                     PUSH   HL   
129E   11 10 00               LD   DE,$10   
12A1   B7                     OR   A   
12A2   ED 52                  SBC   HL,DE   
12A4   7D                     LD   A,L   
12A5   B4                     OR   H   
12A6   CA FD 12               JP   Z,expectM_0_2719S50   
12A9   CD CB 0B               CALL   printStr   
12AC   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
12B6   CD CB 0B               CALL   printStr   
12B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12C8   21 10 00               LD   hl,$10   
12CB   E5                     PUSH   hl   
12CC   CD 90 0C               CALL   run   
12CF   2E 00                  .CSTR   "."   
12D1   CD CB 0B               CALL   printStr   
12D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12E1   E1                     POP   hl   
12E2   E5                     PUSH   hl   
12E3   E5                     PUSH   hl   
12E4   CD 90 0C               CALL   run   
12E7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12FB   76                     HALT      
12FC   00                     .CSTR      
12FD                EXPECTM_0_2719S50:      
12FD   E1                     POP   HL   
12FE                          ;*Macro unroll:  test "#FF", $FF
12FE   31 80 45               LD   SP,STACK   
1301   CD D2 0B               CALL   init   
1304   CD 66 44               CALL   execStr   
1307   23 46 46 00            .CSTR   "#FF"   
130B                          ;*Macro unroll:  expect "#FF",$FF
130B   E1                     POP   HL   
130C   E5                     PUSH   HL   
130D   11 FF 00               LD   DE,$FF   
1310   B7                     OR   A   
1311   ED 52                  SBC   HL,DE   
1313   7D                     LD   A,L   
1314   B4                     OR   H   
1315   CA 6C 13               JP   Z,expectM_0_2720S50   
1318   CD CB 0B               CALL   printStr   
131B   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1325   CD CB 0B               CALL   printStr   
1328   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1337   21 FF 00               LD   hl,$FF   
133A   E5                     PUSH   hl   
133B   CD 90 0C               CALL   run   
133E   2E 00                  .CSTR   "."   
1340   CD CB 0B               CALL   printStr   
1343   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1350   E1                     POP   hl   
1351   E5                     PUSH   hl   
1352   E5                     PUSH   hl   
1353   CD 90 0C               CALL   run   
1356   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
136A   76                     HALT      
136B   00                     .CSTR      
136C                EXPECTM_0_2720S50:      
136C   E1                     POP   HL   
136D                          ;*Macro unroll:  test "-1 2 +",1
136D   31 80 45               LD   SP,STACK   
1370   CD D2 0B               CALL   init   
1373   CD 66 44               CALL   execStr   
1376   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
137D                          ;*Macro unroll:  expect "-1 2 +",1
137D   E1                     POP   HL   
137E   E5                     PUSH   HL   
137F   11 01 00               LD   DE,1   
1382   B7                     OR   A   
1383   ED 52                  SBC   HL,DE   
1385   7D                     LD   A,L   
1386   B4                     OR   H   
1387   CA E1 13               JP   Z,expectM_0_2721S50   
138A   CD CB 0B               CALL   printStr   
138D   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
139A   CD CB 0B               CALL   printStr   
139D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13AC   21 01 00               LD   hl,1   
13AF   E5                     PUSH   hl   
13B0   CD 90 0C               CALL   run   
13B3   2E 00                  .CSTR   "."   
13B5   CD CB 0B               CALL   printStr   
13B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C5   E1                     POP   hl   
13C6   E5                     PUSH   hl   
13C7   E5                     PUSH   hl   
13C8   CD 90 0C               CALL   run   
13CB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13DF   76                     HALT      
13E0   00                     .CSTR      
13E1                EXPECTM_0_2721S50:      
13E1   E1                     POP   HL   
13E2                          ;*Macro unroll:  test "-1 1 +",0
13E2   31 80 45               LD   SP,STACK   
13E5   CD D2 0B               CALL   init   
13E8   CD 66 44               CALL   execStr   
13EB   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
13F2                          ;*Macro unroll:  expect "-1 1 +",0
13F2   E1                     POP   HL   
13F3   E5                     PUSH   HL   
13F4   11 00 00               LD   DE,0   
13F7   B7                     OR   A   
13F8   ED 52                  SBC   HL,DE   
13FA   7D                     LD   A,L   
13FB   B4                     OR   H   
13FC   CA 56 14               JP   Z,expectM_0_2722S50   
13FF   CD CB 0B               CALL   printStr   
1402   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
140F   CD CB 0B               CALL   printStr   
1412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1421   21 00 00               LD   hl,0   
1424   E5                     PUSH   hl   
1425   CD 90 0C               CALL   run   
1428   2E 00                  .CSTR   "."   
142A   CD CB 0B               CALL   printStr   
142D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143A   E1                     POP   hl   
143B   E5                     PUSH   hl   
143C   E5                     PUSH   hl   
143D   CD 90 0C               CALL   run   
1440   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1454   76                     HALT      
1455   00                     .CSTR      
1456                EXPECTM_0_2722S50:      
1456   E1                     POP   HL   
1457                          ;*Macro unroll:  test "1 2 +", 3
1457   31 80 45               LD   SP,STACK   
145A   CD D2 0B               CALL   init   
145D   CD 66 44               CALL   execStr   
1460   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1466                          ;*Macro unroll:  expect "1 2 +",3
1466   E1                     POP   HL   
1467   E5                     PUSH   HL   
1468   11 03 00               LD   DE,3   
146B   B7                     OR   A   
146C   ED 52                  SBC   HL,DE   
146E   7D                     LD   A,L   
146F   B4                     OR   H   
1470   CA C9 14               JP   Z,expectM_0_2723S50   
1473   CD CB 0B               CALL   printStr   
1476   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1482   CD CB 0B               CALL   printStr   
1485   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1494   21 03 00               LD   hl,3   
1497   E5                     PUSH   hl   
1498   CD 90 0C               CALL   run   
149B   2E 00                  .CSTR   "."   
149D   CD CB 0B               CALL   printStr   
14A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14AD   E1                     POP   hl   
14AE   E5                     PUSH   hl   
14AF   E5                     PUSH   hl   
14B0   CD 90 0C               CALL   run   
14B3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14C7   76                     HALT      
14C8   00                     .CSTR      
14C9                EXPECTM_0_2723S50:      
14C9   E1                     POP   HL   
14CA                          ;*Macro unroll:  test "4 1 2 +", 3
14CA   31 80 45               LD   SP,STACK   
14CD   CD D2 0B               CALL   init   
14D0   CD 66 44               CALL   execStr   
14D3   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
14DB                          ;*Macro unroll:  expect "4 1 2 +",3
14DB   E1                     POP   HL   
14DC   E5                     PUSH   HL   
14DD   11 03 00               LD   DE,3   
14E0   B7                     OR   A   
14E1   ED 52                  SBC   HL,DE   
14E3   7D                     LD   A,L   
14E4   B4                     OR   H   
14E5   CA 40 15               JP   Z,expectM_0_2724S50   
14E8   CD CB 0B               CALL   printStr   
14EB   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
14F9   CD CB 0B               CALL   printStr   
14FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150B   21 03 00               LD   hl,3   
150E   E5                     PUSH   hl   
150F   CD 90 0C               CALL   run   
1512   2E 00                  .CSTR   "."   
1514   CD CB 0B               CALL   printStr   
1517   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1524   E1                     POP   hl   
1525   E5                     PUSH   hl   
1526   E5                     PUSH   hl   
1527   CD 90 0C               CALL   run   
152A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
153E   76                     HALT      
153F   00                     .CSTR      
1540                EXPECTM_0_2724S50:      
1540   E1                     POP   HL   
1541                          ;*Macro unroll:  test "123 456 +", 123+456
1541   31 80 45               LD   SP,STACK   
1544   CD D2 0B               CALL   init   
1547   CD 66 44               CALL   execStr   
154A   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1554                          ;*Macro unroll:  expect "123 456 +",123+456
1554   E1                     POP   HL   
1555   E5                     PUSH   HL   
1556   11 43 02               LD   DE,123+456   
1559   B7                     OR   A   
155A   ED 52                  SBC   HL,DE   
155C   7D                     LD   A,L   
155D   B4                     OR   H   
155E   CA BB 15               JP   Z,expectM_0_2725S50   
1561   CD CB 0B               CALL   printStr   
1564   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1574   CD CB 0B               CALL   printStr   
1577   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1586   21 43 02               LD   hl,123+456   
1589   E5                     PUSH   hl   
158A   CD 90 0C               CALL   run   
158D   2E 00                  .CSTR   "."   
158F   CD CB 0B               CALL   printStr   
1592   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
159F   E1                     POP   hl   
15A0   E5                     PUSH   hl   
15A1   E5                     PUSH   hl   
15A2   CD 90 0C               CALL   run   
15A5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15B9   76                     HALT      
15BA   00                     .CSTR      
15BB                EXPECTM_0_2725S50:      
15BB   E1                     POP   HL   
15BC                          ;*Macro unroll:  test "64 128 +", 64+128
15BC   31 80 45               LD   SP,STACK   
15BF   CD D2 0B               CALL   init   
15C2   CD 66 44               CALL   execStr   
15C5   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
15CE                          ;*Macro unroll:  expect "64 128 +",64+128
15CE   E1                     POP   HL   
15CF   E5                     PUSH   HL   
15D0   11 C0 00               LD   DE,64+128   
15D3   B7                     OR   A   
15D4   ED 52                  SBC   HL,DE   
15D6   7D                     LD   A,L   
15D7   B4                     OR   H   
15D8   CA 34 16               JP   Z,expectM_0_2726S50   
15DB   CD CB 0B               CALL   printStr   
15DE   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
15ED   CD CB 0B               CALL   printStr   
15F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15FF   21 C0 00               LD   hl,64+128   
1602   E5                     PUSH   hl   
1603   CD 90 0C               CALL   run   
1606   2E 00                  .CSTR   "."   
1608   CD CB 0B               CALL   printStr   
160B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1618   E1                     POP   hl   
1619   E5                     PUSH   hl   
161A   E5                     PUSH   hl   
161B   CD 90 0C               CALL   run   
161E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1632   76                     HALT      
1633   00                     .CSTR      
1634                EXPECTM_0_2726S50:      
1634   E1                     POP   HL   
1635                          ;*Macro unroll:  test "1 2 +", 3
1635   31 80 45               LD   SP,STACK   
1638   CD D2 0B               CALL   init   
163B   CD 66 44               CALL   execStr   
163E   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1644                          ;*Macro unroll:  expect "1 2 +",3
1644   E1                     POP   HL   
1645   E5                     PUSH   HL   
1646   11 03 00               LD   DE,3   
1649   B7                     OR   A   
164A   ED 52                  SBC   HL,DE   
164C   7D                     LD   A,L   
164D   B4                     OR   H   
164E   CA A7 16               JP   Z,expectM_0_2727S50   
1651   CD CB 0B               CALL   printStr   
1654   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1660   CD CB 0B               CALL   printStr   
1663   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1672   21 03 00               LD   hl,3   
1675   E5                     PUSH   hl   
1676   CD 90 0C               CALL   run   
1679   2E 00                  .CSTR   "."   
167B   CD CB 0B               CALL   printStr   
167E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
168B   E1                     POP   hl   
168C   E5                     PUSH   hl   
168D   E5                     PUSH   hl   
168E   CD 90 0C               CALL   run   
1691   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16A5   76                     HALT      
16A6   00                     .CSTR      
16A7                EXPECTM_0_2727S50:      
16A7   E1                     POP   HL   
16A8                          ;*Macro unroll:  test "1a= a++ a",2
16A8   31 80 45               LD   SP,STACK   
16AB   CD D2 0B               CALL   init   
16AE   CD 66 44               CALL   execStr   
16B1   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
16BB                          ;*Macro unroll:  expect "1a= a++ a",2
16BB   E1                     POP   HL   
16BC   E5                     PUSH   HL   
16BD   11 02 00               LD   DE,2   
16C0   B7                     OR   A   
16C1   ED 52                  SBC   HL,DE   
16C3   7D                     LD   A,L   
16C4   B4                     OR   H   
16C5   CA 22 17               JP   Z,expectM_0_2728S50   
16C8   CD CB 0B               CALL   printStr   
16CB   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
16DB   CD CB 0B               CALL   printStr   
16DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16ED   21 02 00               LD   hl,2   
16F0   E5                     PUSH   hl   
16F1   CD 90 0C               CALL   run   
16F4   2E 00                  .CSTR   "."   
16F6   CD CB 0B               CALL   printStr   
16F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1706   E1                     POP   hl   
1707   E5                     PUSH   hl   
1708   E5                     PUSH   hl   
1709   CD 90 0C               CALL   run   
170C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1720   76                     HALT      
1721   00                     .CSTR      
1722                EXPECTM_0_2728S50:      
1722   E1                     POP   HL   
1723                          ;*Macro unroll:  test "-1 -1 -",0
1723   31 80 45               LD   SP,STACK   
1726   CD D2 0B               CALL   init   
1729   CD 66 44               CALL   execStr   
172C   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1734                          ;*Macro unroll:  expect "-1 -1 -",0
1734   E1                     POP   HL   
1735   E5                     PUSH   HL   
1736   11 00 00               LD   DE,0   
1739   B7                     OR   A   
173A   ED 52                  SBC   HL,DE   
173C   7D                     LD   A,L   
173D   B4                     OR   H   
173E   CA 99 17               JP   Z,expectM_0_2729S50   
1741   CD CB 0B               CALL   printStr   
1744   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1752   CD CB 0B               CALL   printStr   
1755   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1764   21 00 00               LD   hl,0   
1767   E5                     PUSH   hl   
1768   CD 90 0C               CALL   run   
176B   2E 00                  .CSTR   "."   
176D   CD CB 0B               CALL   printStr   
1770   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177D   E1                     POP   hl   
177E   E5                     PUSH   hl   
177F   E5                     PUSH   hl   
1780   CD 90 0C               CALL   run   
1783   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1797   76                     HALT      
1798   00                     .CSTR      
1799                EXPECTM_0_2729S50:      
1799   E1                     POP   HL   
179A                          ;*Macro unroll:  test "5 3 -", 2
179A   31 80 45               LD   SP,STACK   
179D   CD D2 0B               CALL   init   
17A0   CD 66 44               CALL   execStr   
17A3   35 20 33 20 2D 00      .CSTR   "5 3 -"   
17A9                          ;*Macro unroll:  expect "5 3 -",2
17A9   E1                     POP   HL   
17AA   E5                     PUSH   HL   
17AB   11 02 00               LD   DE,2   
17AE   B7                     OR   A   
17AF   ED 52                  SBC   HL,DE   
17B1   7D                     LD   A,L   
17B2   B4                     OR   H   
17B3   CA 0C 18               JP   Z,expectM_0_2730S50   
17B6   CD CB 0B               CALL   printStr   
17B9   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
17C5   CD CB 0B               CALL   printStr   
17C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D7   21 02 00               LD   hl,2   
17DA   E5                     PUSH   hl   
17DB   CD 90 0C               CALL   run   
17DE   2E 00                  .CSTR   "."   
17E0   CD CB 0B               CALL   printStr   
17E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F0   E1                     POP   hl   
17F1   E5                     PUSH   hl   
17F2   E5                     PUSH   hl   
17F3   CD 90 0C               CALL   run   
17F6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
180A   76                     HALT      
180B   00                     .CSTR      
180C                EXPECTM_0_2730S50:      
180C   E1                     POP   HL   
180D                          ;*Macro unroll:  test "2 1 -",1
180D   31 80 45               LD   SP,STACK   
1810   CD D2 0B               CALL   init   
1813   CD 66 44               CALL   execStr   
1816   32 20 31 20 2D 00      .CSTR   "2 1 -"   
181C                          ;*Macro unroll:  expect "2 1 -",1
181C   E1                     POP   HL   
181D   E5                     PUSH   HL   
181E   11 01 00               LD   DE,1   
1821   B7                     OR   A   
1822   ED 52                  SBC   HL,DE   
1824   7D                     LD   A,L   
1825   B4                     OR   H   
1826   CA 7F 18               JP   Z,expectM_0_2731S50   
1829   CD CB 0B               CALL   printStr   
182C   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1838   CD CB 0B               CALL   printStr   
183B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184A   21 01 00               LD   hl,1   
184D   E5                     PUSH   hl   
184E   CD 90 0C               CALL   run   
1851   2E 00                  .CSTR   "."   
1853   CD CB 0B               CALL   printStr   
1856   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1863   E1                     POP   hl   
1864   E5                     PUSH   hl   
1865   E5                     PUSH   hl   
1866   CD 90 0C               CALL   run   
1869   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
187D   76                     HALT      
187E   00                     .CSTR      
187F                EXPECTM_0_2731S50:      
187F   E1                     POP   HL   
1880                          ;*Macro unroll:  test "3a= a-- a",2
1880   31 80 45               LD   SP,STACK   
1883   CD D2 0B               CALL   init   
1886   CD 66 44               CALL   execStr   
1889   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
1893                          ;*Macro unroll:  expect "3a= a-- a",2
1893   E1                     POP   HL   
1894   E5                     PUSH   HL   
1895   11 02 00               LD   DE,2   
1898   B7                     OR   A   
1899   ED 52                  SBC   HL,DE   
189B   7D                     LD   A,L   
189C   B4                     OR   H   
189D   CA FA 18               JP   Z,expectM_0_2732S50   
18A0   CD CB 0B               CALL   printStr   
18A3   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
18B3   CD CB 0B               CALL   printStr   
18B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18C5   21 02 00               LD   hl,2   
18C8   E5                     PUSH   hl   
18C9   CD 90 0C               CALL   run   
18CC   2E 00                  .CSTR   "."   
18CE   CD CB 0B               CALL   printStr   
18D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18DE   E1                     POP   hl   
18DF   E5                     PUSH   hl   
18E0   E5                     PUSH   hl   
18E1   CD 90 0C               CALL   run   
18E4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
18F8   76                     HALT      
18F9   00                     .CSTR      
18FA                EXPECTM_0_2732S50:      
18FA   E1                     POP   HL   
18FB                          ;*Macro unroll:  test "3 5 &", 1
18FB   31 80 45               LD   SP,STACK   
18FE   CD D2 0B               CALL   init   
1901   CD 66 44               CALL   execStr   
1904   33 20 35 20 26 00      .CSTR   "3 5 &"   
190A                          ;*Macro unroll:  expect "3 5 &",1
190A   E1                     POP   HL   
190B   E5                     PUSH   HL   
190C   11 01 00               LD   DE,1   
190F   B7                     OR   A   
1910   ED 52                  SBC   HL,DE   
1912   7D                     LD   A,L   
1913   B4                     OR   H   
1914   CA 6D 19               JP   Z,expectM_0_2733S50   
1917   CD CB 0B               CALL   printStr   
191A   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1926   CD CB 0B               CALL   printStr   
1929   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1938   21 01 00               LD   hl,1   
193B   E5                     PUSH   hl   
193C   CD 90 0C               CALL   run   
193F   2E 00                  .CSTR   "."   
1941   CD CB 0B               CALL   printStr   
1944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1951   E1                     POP   hl   
1952   E5                     PUSH   hl   
1953   E5                     PUSH   hl   
1954   CD 90 0C               CALL   run   
1957   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
196B   76                     HALT      
196C   00                     .CSTR      
196D                EXPECTM_0_2733S50:      
196D   E1                     POP   HL   
196E                          ;*Macro unroll:  test "3 5 |", 7
196E   31 80 45               LD   SP,STACK   
1971   CD D2 0B               CALL   init   
1974   CD 66 44               CALL   execStr   
1977   33 20 35 20 7C 00      .CSTR   "3 5 |"   
197D                          ;*Macro unroll:  expect "3 5 |",7
197D   E1                     POP   HL   
197E   E5                     PUSH   HL   
197F   11 07 00               LD   DE,7   
1982   B7                     OR   A   
1983   ED 52                  SBC   HL,DE   
1985   7D                     LD   A,L   
1986   B4                     OR   H   
1987   CA E0 19               JP   Z,expectM_0_2734S50   
198A   CD CB 0B               CALL   printStr   
198D   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1999   CD CB 0B               CALL   printStr   
199C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AB   21 07 00               LD   hl,7   
19AE   E5                     PUSH   hl   
19AF   CD 90 0C               CALL   run   
19B2   2E 00                  .CSTR   "."   
19B4   CD CB 0B               CALL   printStr   
19B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C4   E1                     POP   hl   
19C5   E5                     PUSH   hl   
19C6   E5                     PUSH   hl   
19C7   CD 90 0C               CALL   run   
19CA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19DE   76                     HALT      
19DF   00                     .CSTR      
19E0                EXPECTM_0_2734S50:      
19E0   E1                     POP   HL   
19E1                          ;*Macro unroll:  test "3 5 /x", 6
19E1   31 80 45               LD   SP,STACK   
19E4   CD D2 0B               CALL   init   
19E7   CD 66 44               CALL   execStr   
19EA   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
19F1                          ;*Macro unroll:  expect "3 5 /x",6
19F1   E1                     POP   HL   
19F2   E5                     PUSH   HL   
19F3   11 06 00               LD   DE,6   
19F6   B7                     OR   A   
19F7   ED 52                  SBC   HL,DE   
19F9   7D                     LD   A,L   
19FA   B4                     OR   H   
19FB   CA 55 1A               JP   Z,expectM_0_2735S50   
19FE   CD CB 0B               CALL   printStr   
1A01   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1A0E   CD CB 0B               CALL   printStr   
1A11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A20   21 06 00               LD   hl,6   
1A23   E5                     PUSH   hl   
1A24   CD 90 0C               CALL   run   
1A27   2E 00                  .CSTR   "."   
1A29   CD CB 0B               CALL   printStr   
1A2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A39   E1                     POP   hl   
1A3A   E5                     PUSH   hl   
1A3B   E5                     PUSH   hl   
1A3C   CD 90 0C               CALL   run   
1A3F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A53   76                     HALT      
1A54   00                     .CSTR      
1A55                EXPECTM_0_2735S50:      
1A55   E1                     POP   HL   
1A56                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1A56   31 80 45               LD   SP,STACK   
1A59   CD D2 0B               CALL   init   
1A5C   CD 66 44               CALL   execStr   
1A5F   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1A6E                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1A6E   E1                     POP   HL   
1A6F   E5                     PUSH   HL   
1A70   11 06 00               LD   DE,6   
1A73   B7                     OR   A   
1A74   ED 52                  SBC   HL,DE   
1A76   7D                     LD   A,L   
1A77   B4                     OR   H   
1A78   CA DA 1A               JP   Z,expectM_0_2736S50   
1A7B   CD CB 0B               CALL   printStr   
1A7E   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1A93   CD CB 0B               CALL   printStr   
1A96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA5   21 06 00               LD   hl,6   
1AA8   E5                     PUSH   hl   
1AA9   CD 90 0C               CALL   run   
1AAC   2E 00                  .CSTR   "."   
1AAE   CD CB 0B               CALL   printStr   
1AB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABE   E1                     POP   hl   
1ABF   E5                     PUSH   hl   
1AC0   E5                     PUSH   hl   
1AC1   CD 90 0C               CALL   run   
1AC4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1AD8   76                     HALT      
1AD9   00                     .CSTR      
1ADA                EXPECTM_0_2736S50:      
1ADA   E1                     POP   HL   
1ADB                          ;*Macro unroll:  test "2 3 *", 6
1ADB   31 80 45               LD   SP,STACK   
1ADE   CD D2 0B               CALL   init   
1AE1   CD 66 44               CALL   execStr   
1AE4   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1AEA                          ;*Macro unroll:  expect "2 3 *",6
1AEA   E1                     POP   HL   
1AEB   E5                     PUSH   HL   
1AEC   11 06 00               LD   DE,6   
1AEF   B7                     OR   A   
1AF0   ED 52                  SBC   HL,DE   
1AF2   7D                     LD   A,L   
1AF3   B4                     OR   H   
1AF4   CA 4D 1B               JP   Z,expectM_0_2737S50   
1AF7   CD CB 0B               CALL   printStr   
1AFA   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1B06   CD CB 0B               CALL   printStr   
1B09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B18   21 06 00               LD   hl,6   
1B1B   E5                     PUSH   hl   
1B1C   CD 90 0C               CALL   run   
1B1F   2E 00                  .CSTR   "."   
1B21   CD CB 0B               CALL   printStr   
1B24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B31   E1                     POP   hl   
1B32   E5                     PUSH   hl   
1B33   E5                     PUSH   hl   
1B34   CD 90 0C               CALL   run   
1B37   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B4B   76                     HALT      
1B4C   00                     .CSTR      
1B4D                EXPECTM_0_2737S50:      
1B4D   E1                     POP   HL   
1B4E                          ;*Macro unroll:  test "1 2 3 + *", 5
1B4E   31 80 45               LD   SP,STACK   
1B51   CD D2 0B               CALL   init   
1B54   CD 66 44               CALL   execStr   
1B57   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B61                          ;*Macro unroll:  expect "1 2 3 + *",5
1B61   E1                     POP   HL   
1B62   E5                     PUSH   HL   
1B63   11 05 00               LD   DE,5   
1B66   B7                     OR   A   
1B67   ED 52                  SBC   HL,DE   
1B69   7D                     LD   A,L   
1B6A   B4                     OR   H   
1B6B   CA C8 1B               JP   Z,expectM_0_2738S50   
1B6E   CD CB 0B               CALL   printStr   
1B71   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B81   CD CB 0B               CALL   printStr   
1B84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B93   21 05 00               LD   hl,5   
1B96   E5                     PUSH   hl   
1B97   CD 90 0C               CALL   run   
1B9A   2E 00                  .CSTR   "."   
1B9C   CD CB 0B               CALL   printStr   
1B9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAC   E1                     POP   hl   
1BAD   E5                     PUSH   hl   
1BAE   E5                     PUSH   hl   
1BAF   CD 90 0C               CALL   run   
1BB2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BC6   76                     HALT      
1BC7   00                     .CSTR      
1BC8                EXPECTM_0_2738S50:      
1BC8   E1                     POP   HL   
1BC9                          ;*Macro unroll:  test "7 3 /", 2
1BC9   31 80 45               LD   SP,STACK   
1BCC   CD D2 0B               CALL   init   
1BCF   CD 66 44               CALL   execStr   
1BD2   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1BD8                          ;*Macro unroll:  expect "7 3 /",2
1BD8   E1                     POP   HL   
1BD9   E5                     PUSH   HL   
1BDA   11 02 00               LD   DE,2   
1BDD   B7                     OR   A   
1BDE   ED 52                  SBC   HL,DE   
1BE0   7D                     LD   A,L   
1BE1   B4                     OR   H   
1BE2   CA 3B 1C               JP   Z,expectM_0_2739S50   
1BE5   CD CB 0B               CALL   printStr   
1BE8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1BF4   CD CB 0B               CALL   printStr   
1BF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C06   21 02 00               LD   hl,2   
1C09   E5                     PUSH   hl   
1C0A   CD 90 0C               CALL   run   
1C0D   2E 00                  .CSTR   "."   
1C0F   CD CB 0B               CALL   printStr   
1C12   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C1F   E1                     POP   hl   
1C20   E5                     PUSH   hl   
1C21   E5                     PUSH   hl   
1C22   CD 90 0C               CALL   run   
1C25   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C39   76                     HALT      
1C3A   00                     .CSTR      
1C3B                EXPECTM_0_2739S50:      
1C3B   E1                     POP   HL   
1C3C                          ;*Macro unroll:  test "7 3 / _", 1
1C3C   31 80 45               LD   SP,STACK   
1C3F   CD D2 0B               CALL   init   
1C42   CD 66 44               CALL   execStr   
1C45   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1C4D                          ;*Macro unroll:  expect "7 3 / _",1
1C4D   E1                     POP   HL   
1C4E   E5                     PUSH   HL   
1C4F   11 01 00               LD   DE,1   
1C52   B7                     OR   A   
1C53   ED 52                  SBC   HL,DE   
1C55   7D                     LD   A,L   
1C56   B4                     OR   H   
1C57   CA B2 1C               JP   Z,expectM_0_2740S50   
1C5A   CD CB 0B               CALL   printStr   
1C5D   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1C6B   CD CB 0B               CALL   printStr   
1C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7D   21 01 00               LD   hl,1   
1C80   E5                     PUSH   hl   
1C81   CD 90 0C               CALL   run   
1C84   2E 00                  .CSTR   "."   
1C86   CD CB 0B               CALL   printStr   
1C89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C96   E1                     POP   hl   
1C97   E5                     PUSH   hl   
1C98   E5                     PUSH   hl   
1C99   CD 90 0C               CALL   run   
1C9C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CB0   76                     HALT      
1CB1   00                     .CSTR      
1CB2                EXPECTM_0_2740S50:      
1CB2   E1                     POP   HL   
1CB3                          ;*Macro unroll:  test "7 3 /", 2
1CB3   31 80 45               LD   SP,STACK   
1CB6   CD D2 0B               CALL   init   
1CB9   CD 66 44               CALL   execStr   
1CBC   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CC2                          ;*Macro unroll:  expect "7 3 /",2
1CC2   E1                     POP   HL   
1CC3   E5                     PUSH   HL   
1CC4   11 02 00               LD   DE,2   
1CC7   B7                     OR   A   
1CC8   ED 52                  SBC   HL,DE   
1CCA   7D                     LD   A,L   
1CCB   B4                     OR   H   
1CCC   CA 25 1D               JP   Z,expectM_0_2741S50   
1CCF   CD CB 0B               CALL   printStr   
1CD2   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CDE   CD CB 0B               CALL   printStr   
1CE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF0   21 02 00               LD   hl,2   
1CF3   E5                     PUSH   hl   
1CF4   CD 90 0C               CALL   run   
1CF7   2E 00                  .CSTR   "."   
1CF9   CD CB 0B               CALL   printStr   
1CFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D09   E1                     POP   hl   
1D0A   E5                     PUSH   hl   
1D0B   E5                     PUSH   hl   
1D0C   CD 90 0C               CALL   run   
1D0F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D23   76                     HALT      
1D24   00                     .CSTR      
1D25                EXPECTM_0_2741S50:      
1D25   E1                     POP   HL   
1D26                          ;*Macro unroll:  test "2 3 ==", FALSE
1D26   31 80 45               LD   SP,STACK   
1D29   CD D2 0B               CALL   init   
1D2C   CD 66 44               CALL   execStr   
1D2F   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1D36                          ;*Macro unroll:  expect "2 3 ==",FALSE
1D36   E1                     POP   HL   
1D37   E5                     PUSH   HL   
1D38   11 00 00               LD   DE,FALSE   
1D3B   B7                     OR   A   
1D3C   ED 52                  SBC   HL,DE   
1D3E   7D                     LD   A,L   
1D3F   B4                     OR   H   
1D40   CA 9A 1D               JP   Z,expectM_0_2742S50   
1D43   CD CB 0B               CALL   printStr   
1D46   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1D53   CD CB 0B               CALL   printStr   
1D56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D65   21 00 00               LD   hl,FALSE   
1D68   E5                     PUSH   hl   
1D69   CD 90 0C               CALL   run   
1D6C   2E 00                  .CSTR   "."   
1D6E   CD CB 0B               CALL   printStr   
1D71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7E   E1                     POP   hl   
1D7F   E5                     PUSH   hl   
1D80   E5                     PUSH   hl   
1D81   CD 90 0C               CALL   run   
1D84   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D98   76                     HALT      
1D99   00                     .CSTR      
1D9A                EXPECTM_0_2742S50:      
1D9A   E1                     POP   HL   
1D9B                          ;*Macro unroll:  test "3 3 ==", TRUE
1D9B   31 80 45               LD   SP,STACK   
1D9E   CD D2 0B               CALL   init   
1DA1   CD 66 44               CALL   execStr   
1DA4   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1DAB                          ;*Macro unroll:  expect "3 3 ==",TRUE
1DAB   E1                     POP   HL   
1DAC   E5                     PUSH   HL   
1DAD   11 FF FF               LD   DE,TRUE   
1DB0   B7                     OR   A   
1DB1   ED 52                  SBC   HL,DE   
1DB3   7D                     LD   A,L   
1DB4   B4                     OR   H   
1DB5   CA 0F 1E               JP   Z,expectM_0_2743S50   
1DB8   CD CB 0B               CALL   printStr   
1DBB   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1DC8   CD CB 0B               CALL   printStr   
1DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDA   21 FF FF               LD   hl,TRUE   
1DDD   E5                     PUSH   hl   
1DDE   CD 90 0C               CALL   run   
1DE1   2E 00                  .CSTR   "."   
1DE3   CD CB 0B               CALL   printStr   
1DE6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF3   E1                     POP   hl   
1DF4   E5                     PUSH   hl   
1DF5   E5                     PUSH   hl   
1DF6   CD 90 0C               CALL   run   
1DF9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E0D   76                     HALT      
1E0E   00                     .CSTR      
1E0F                EXPECTM_0_2743S50:      
1E0F   E1                     POP   HL   
1E10                          ;*Macro unroll:  test "1 2 <", TRUE
1E10   31 80 45               LD   SP,STACK   
1E13   CD D2 0B               CALL   init   
1E16   CD 66 44               CALL   execStr   
1E19   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E1F                          ;*Macro unroll:  expect "1 2 <",TRUE
1E1F   E1                     POP   HL   
1E20   E5                     PUSH   HL   
1E21   11 FF FF               LD   DE,TRUE   
1E24   B7                     OR   A   
1E25   ED 52                  SBC   HL,DE   
1E27   7D                     LD   A,L   
1E28   B4                     OR   H   
1E29   CA 82 1E               JP   Z,expectM_0_2744S50   
1E2C   CD CB 0B               CALL   printStr   
1E2F   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1E3B   CD CB 0B               CALL   printStr   
1E3E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4D   21 FF FF               LD   hl,TRUE   
1E50   E5                     PUSH   hl   
1E51   CD 90 0C               CALL   run   
1E54   2E 00                  .CSTR   "."   
1E56   CD CB 0B               CALL   printStr   
1E59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E66   E1                     POP   hl   
1E67   E5                     PUSH   hl   
1E68   E5                     PUSH   hl   
1E69   CD 90 0C               CALL   run   
1E6C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E80   76                     HALT      
1E81   00                     .CSTR      
1E82                EXPECTM_0_2744S50:      
1E82   E1                     POP   HL   
1E83                          ;*Macro unroll:  test "2 1 <", FALSE
1E83   31 80 45               LD   SP,STACK   
1E86   CD D2 0B               CALL   init   
1E89   CD 66 44               CALL   execStr   
1E8C   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1E92                          ;*Macro unroll:  expect "2 1 <",FALSE
1E92   E1                     POP   HL   
1E93   E5                     PUSH   HL   
1E94   11 00 00               LD   DE,FALSE   
1E97   B7                     OR   A   
1E98   ED 52                  SBC   HL,DE   
1E9A   7D                     LD   A,L   
1E9B   B4                     OR   H   
1E9C   CA F5 1E               JP   Z,expectM_0_2745S50   
1E9F   CD CB 0B               CALL   printStr   
1EA2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1EAE   CD CB 0B               CALL   printStr   
1EB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EC0   21 00 00               LD   hl,FALSE   
1EC3   E5                     PUSH   hl   
1EC4   CD 90 0C               CALL   run   
1EC7   2E 00                  .CSTR   "."   
1EC9   CD CB 0B               CALL   printStr   
1ECC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED9   E1                     POP   hl   
1EDA   E5                     PUSH   hl   
1EDB   E5                     PUSH   hl   
1EDC   CD 90 0C               CALL   run   
1EDF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EF3   76                     HALT      
1EF4   00                     .CSTR      
1EF5                EXPECTM_0_2745S50:      
1EF5   E1                     POP   HL   
1EF6                          ;*Macro unroll:  test "2 3 <", TRUE
1EF6   31 80 45               LD   SP,STACK   
1EF9   CD D2 0B               CALL   init   
1EFC   CD 66 44               CALL   execStr   
1EFF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F05                          ;*Macro unroll:  expect "2 3 <",TRUE
1F05   E1                     POP   HL   
1F06   E5                     PUSH   HL   
1F07   11 FF FF               LD   DE,TRUE   
1F0A   B7                     OR   A   
1F0B   ED 52                  SBC   HL,DE   
1F0D   7D                     LD   A,L   
1F0E   B4                     OR   H   
1F0F   CA 68 1F               JP   Z,expectM_0_2746S50   
1F12   CD CB 0B               CALL   printStr   
1F15   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F21   CD CB 0B               CALL   printStr   
1F24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F33   21 FF FF               LD   hl,TRUE   
1F36   E5                     PUSH   hl   
1F37   CD 90 0C               CALL   run   
1F3A   2E 00                  .CSTR   "."   
1F3C   CD CB 0B               CALL   printStr   
1F3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4C   E1                     POP   hl   
1F4D   E5                     PUSH   hl   
1F4E   E5                     PUSH   hl   
1F4F   CD 90 0C               CALL   run   
1F52   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F66   76                     HALT      
1F67   00                     .CSTR      
1F68                EXPECTM_0_2746S50:      
1F68   E1                     POP   HL   
1F69                          ;*Macro unroll:  test "3 3 <", FALSE
1F69   31 80 45               LD   SP,STACK   
1F6C   CD D2 0B               CALL   init   
1F6F   CD 66 44               CALL   execStr   
1F72   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1F78                          ;*Macro unroll:  expect "3 3 <",FALSE
1F78   E1                     POP   HL   
1F79   E5                     PUSH   HL   
1F7A   11 00 00               LD   DE,FALSE   
1F7D   B7                     OR   A   
1F7E   ED 52                  SBC   HL,DE   
1F80   7D                     LD   A,L   
1F81   B4                     OR   H   
1F82   CA DB 1F               JP   Z,expectM_0_2747S50   
1F85   CD CB 0B               CALL   printStr   
1F88   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1F94   CD CB 0B               CALL   printStr   
1F97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA6   21 00 00               LD   hl,FALSE   
1FA9   E5                     PUSH   hl   
1FAA   CD 90 0C               CALL   run   
1FAD   2E 00                  .CSTR   "."   
1FAF   CD CB 0B               CALL   printStr   
1FB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FBF   E1                     POP   hl   
1FC0   E5                     PUSH   hl   
1FC1   E5                     PUSH   hl   
1FC2   CD 90 0C               CALL   run   
1FC5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FD9   76                     HALT      
1FDA   00                     .CSTR      
1FDB                EXPECTM_0_2747S50:      
1FDB   E1                     POP   HL   
1FDC                          ;*Macro unroll:  test "1 2 >", FALSE
1FDC   31 80 45               LD   SP,STACK   
1FDF   CD D2 0B               CALL   init   
1FE2   CD 66 44               CALL   execStr   
1FE5   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1FEB                          ;*Macro unroll:  expect "1 2 >",FALSE
1FEB   E1                     POP   HL   
1FEC   E5                     PUSH   HL   
1FED   11 00 00               LD   DE,FALSE   
1FF0   B7                     OR   A   
1FF1   ED 52                  SBC   HL,DE   
1FF3   7D                     LD   A,L   
1FF4   B4                     OR   H   
1FF5   CA 4E 20               JP   Z,expectM_0_2748S50   
1FF8   CD CB 0B               CALL   printStr   
1FFB   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2007   CD CB 0B               CALL   printStr   
200A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2019   21 00 00               LD   hl,FALSE   
201C   E5                     PUSH   hl   
201D   CD 90 0C               CALL   run   
2020   2E 00                  .CSTR   "."   
2022   CD CB 0B               CALL   printStr   
2025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2032   E1                     POP   hl   
2033   E5                     PUSH   hl   
2034   E5                     PUSH   hl   
2035   CD 90 0C               CALL   run   
2038   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
204C   76                     HALT      
204D   00                     .CSTR      
204E                EXPECTM_0_2748S50:      
204E   E1                     POP   HL   
204F                          ;*Macro unroll:  test "2 1 >", TRUE
204F   31 80 45               LD   SP,STACK   
2052   CD D2 0B               CALL   init   
2055   CD 66 44               CALL   execStr   
2058   32 20 31 20 3E 00      .CSTR   "2 1 >"   
205E                          ;*Macro unroll:  expect "2 1 >",TRUE
205E   E1                     POP   HL   
205F   E5                     PUSH   HL   
2060   11 FF FF               LD   DE,TRUE   
2063   B7                     OR   A   
2064   ED 52                  SBC   HL,DE   
2066   7D                     LD   A,L   
2067   B4                     OR   H   
2068   CA C1 20               JP   Z,expectM_0_2749S50   
206B   CD CB 0B               CALL   printStr   
206E   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
207A   CD CB 0B               CALL   printStr   
207D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
208C   21 FF FF               LD   hl,TRUE   
208F   E5                     PUSH   hl   
2090   CD 90 0C               CALL   run   
2093   2E 00                  .CSTR   "."   
2095   CD CB 0B               CALL   printStr   
2098   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20A5   E1                     POP   hl   
20A6   E5                     PUSH   hl   
20A7   E5                     PUSH   hl   
20A8   CD 90 0C               CALL   run   
20AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20BF   76                     HALT      
20C0   00                     .CSTR      
20C1                EXPECTM_0_2749S50:      
20C1   E1                     POP   HL   
20C2                          ;*Macro unroll:  test "3 3 >", FALSE
20C2   31 80 45               LD   SP,STACK   
20C5   CD D2 0B               CALL   init   
20C8   CD 66 44               CALL   execStr   
20CB   33 20 33 20 3E 00      .CSTR   "3 3 >"   
20D1                          ;*Macro unroll:  expect "3 3 >",FALSE
20D1   E1                     POP   HL   
20D2   E5                     PUSH   HL   
20D3   11 00 00               LD   DE,FALSE   
20D6   B7                     OR   A   
20D7   ED 52                  SBC   HL,DE   
20D9   7D                     LD   A,L   
20DA   B4                     OR   H   
20DB   CA 34 21               JP   Z,expectM_0_2750S50   
20DE   CD CB 0B               CALL   printStr   
20E1   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
20ED   CD CB 0B               CALL   printStr   
20F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20FF   21 00 00               LD   hl,FALSE   
2102   E5                     PUSH   hl   
2103   CD 90 0C               CALL   run   
2106   2E 00                  .CSTR   "."   
2108   CD CB 0B               CALL   printStr   
210B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2118   E1                     POP   hl   
2119   E5                     PUSH   hl   
211A   E5                     PUSH   hl   
211B   CD 90 0C               CALL   run   
211E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2132   76                     HALT      
2133   00                     .CSTR      
2134                EXPECTM_0_2750S50:      
2134   E1                     POP   HL   
2135                          ;*Macro unroll:  test "4 3 >", TRUE
2135   31 80 45               LD   SP,STACK   
2138   CD D2 0B               CALL   init   
213B   CD 66 44               CALL   execStr   
213E   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2144                          ;*Macro unroll:  expect "4 3 >",TRUE
2144   E1                     POP   HL   
2145   E5                     PUSH   HL   
2146   11 FF FF               LD   DE,TRUE   
2149   B7                     OR   A   
214A   ED 52                  SBC   HL,DE   
214C   7D                     LD   A,L   
214D   B4                     OR   H   
214E   CA A7 21               JP   Z,expectM_0_2751S50   
2151   CD CB 0B               CALL   printStr   
2154   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2160   CD CB 0B               CALL   printStr   
2163   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2172   21 FF FF               LD   hl,TRUE   
2175   E5                     PUSH   hl   
2176   CD 90 0C               CALL   run   
2179   2E 00                  .CSTR   "."   
217B   CD CB 0B               CALL   printStr   
217E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
218B   E1                     POP   hl   
218C   E5                     PUSH   hl   
218D   E5                     PUSH   hl   
218E   CD 90 0C               CALL   run   
2191   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21A5   76                     HALT      
21A6   00                     .CSTR      
21A7                EXPECTM_0_2751S50:      
21A7   E1                     POP   HL   
21A8                          ;*Macro unroll:  test "2 2 <=", TRUE
21A8   31 80 45               LD   SP,STACK   
21AB   CD D2 0B               CALL   init   
21AE   CD 66 44               CALL   execStr   
21B1   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
21B8                          ;*Macro unroll:  expect "2 2 <=",TRUE
21B8   E1                     POP   HL   
21B9   E5                     PUSH   HL   
21BA   11 FF FF               LD   DE,TRUE   
21BD   B7                     OR   A   
21BE   ED 52                  SBC   HL,DE   
21C0   7D                     LD   A,L   
21C1   B4                     OR   H   
21C2   CA 1C 22               JP   Z,expectM_0_2752S50   
21C5   CD CB 0B               CALL   printStr   
21C8   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
21D5   CD CB 0B               CALL   printStr   
21D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21E7   21 FF FF               LD   hl,TRUE   
21EA   E5                     PUSH   hl   
21EB   CD 90 0C               CALL   run   
21EE   2E 00                  .CSTR   "."   
21F0   CD CB 0B               CALL   printStr   
21F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2200   E1                     POP   hl   
2201   E5                     PUSH   hl   
2202   E5                     PUSH   hl   
2203   CD 90 0C               CALL   run   
2206   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
221A   76                     HALT      
221B   00                     .CSTR      
221C                EXPECTM_0_2752S50:      
221C   E1                     POP   HL   
221D                          ;*Macro unroll:  test "2 2 >=", TRUE
221D   31 80 45               LD   SP,STACK   
2220   CD D2 0B               CALL   init   
2223   CD 66 44               CALL   execStr   
2226   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
222D                          ;*Macro unroll:  expect "2 2 >=",TRUE
222D   E1                     POP   HL   
222E   E5                     PUSH   HL   
222F   11 FF FF               LD   DE,TRUE   
2232   B7                     OR   A   
2233   ED 52                  SBC   HL,DE   
2235   7D                     LD   A,L   
2236   B4                     OR   H   
2237   CA 91 22               JP   Z,expectM_0_2753S50   
223A   CD CB 0B               CALL   printStr   
223D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
224A   CD CB 0B               CALL   printStr   
224D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225C   21 FF FF               LD   hl,TRUE   
225F   E5                     PUSH   hl   
2260   CD 90 0C               CALL   run   
2263   2E 00                  .CSTR   "."   
2265   CD CB 0B               CALL   printStr   
2268   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2275   E1                     POP   hl   
2276   E5                     PUSH   hl   
2277   E5                     PUSH   hl   
2278   CD 90 0C               CALL   run   
227B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
228F   76                     HALT      
2290   00                     .CSTR      
2291                EXPECTM_0_2753S50:      
2291   E1                     POP   HL   
2292                          ;*Macro unroll:  test "3 1 <<", 6
2292   31 80 45               LD   SP,STACK   
2295   CD D2 0B               CALL   init   
2298   CD 66 44               CALL   execStr   
229B   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
22A2                          ;*Macro unroll:  expect "3 1 <<",6
22A2   E1                     POP   HL   
22A3   E5                     PUSH   HL   
22A4   11 06 00               LD   DE,6   
22A7   B7                     OR   A   
22A8   ED 52                  SBC   HL,DE   
22AA   7D                     LD   A,L   
22AB   B4                     OR   H   
22AC   CA 06 23               JP   Z,expectM_0_2754S50   
22AF   CD CB 0B               CALL   printStr   
22B2   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
22BF   CD CB 0B               CALL   printStr   
22C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D1   21 06 00               LD   hl,6   
22D4   E5                     PUSH   hl   
22D5   CD 90 0C               CALL   run   
22D8   2E 00                  .CSTR   "."   
22DA   CD CB 0B               CALL   printStr   
22DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EA   E1                     POP   hl   
22EB   E5                     PUSH   hl   
22EC   E5                     PUSH   hl   
22ED   CD 90 0C               CALL   run   
22F0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2304   76                     HALT      
2305   00                     .CSTR      
2306                EXPECTM_0_2754S50:      
2306   E1                     POP   HL   
2307                          ;*Macro unroll:  test "10 1 >>", 5
2307   31 80 45               LD   SP,STACK   
230A   CD D2 0B               CALL   init   
230D   CD 66 44               CALL   execStr   
2310   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2318                          ;*Macro unroll:  expect "10 1 >>",5
2318   E1                     POP   HL   
2319   E5                     PUSH   HL   
231A   11 05 00               LD   DE,5   
231D   B7                     OR   A   
231E   ED 52                  SBC   HL,DE   
2320   7D                     LD   A,L   
2321   B4                     OR   H   
2322   CA 7D 23               JP   Z,expectM_0_2755S50   
2325   CD CB 0B               CALL   printStr   
2328   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2336   CD CB 0B               CALL   printStr   
2339   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2348   21 05 00               LD   hl,5   
234B   E5                     PUSH   hl   
234C   CD 90 0C               CALL   run   
234F   2E 00                  .CSTR   "."   
2351   CD CB 0B               CALL   printStr   
2354   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2361   E1                     POP   hl   
2362   E5                     PUSH   hl   
2363   E5                     PUSH   hl   
2364   CD 90 0C               CALL   run   
2367   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
237B   76                     HALT      
237C   00                     .CSTR      
237D                EXPECTM_0_2755S50:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "1 x = x", 1
237E   31 80 45               LD   SP,STACK   
2381   CD D2 0B               CALL   init   
2384   CD 66 44               CALL   execStr   
2387   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
238F                          ;*Macro unroll:  expect "1 x = x",1
238F   E1                     POP   HL   
2390   E5                     PUSH   HL   
2391   11 01 00               LD   DE,1   
2394   B7                     OR   A   
2395   ED 52                  SBC   HL,DE   
2397   7D                     LD   A,L   
2398   B4                     OR   H   
2399   CA F4 23               JP   Z,expectM_0_2756S50   
239C   CD CB 0B               CALL   printStr   
239F   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
23AD   CD CB 0B               CALL   printStr   
23B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BF   21 01 00               LD   hl,1   
23C2   E5                     PUSH   hl   
23C3   CD 90 0C               CALL   run   
23C6   2E 00                  .CSTR   "."   
23C8   CD CB 0B               CALL   printStr   
23CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D8   E1                     POP   hl   
23D9   E5                     PUSH   hl   
23DA   E5                     PUSH   hl   
23DB   CD 90 0C               CALL   run   
23DE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23F2   76                     HALT      
23F3   00                     .CSTR      
23F4                EXPECTM_0_2756S50:      
23F4   E1                     POP   HL   
23F5                          ;*Macro unroll:  test "1{}^", 1
23F5   31 80 45               LD   SP,STACK   
23F8   CD D2 0B               CALL   init   
23FB   CD 66 44               CALL   execStr   
23FE   31 7B 7D 5E 00         .CSTR   "1{}^"   
2403                          ;*Macro unroll:  expect "1{}^",1
2403   E1                     POP   HL   
2404   E5                     PUSH   HL   
2405   11 01 00               LD   DE,1   
2408   B7                     OR   A   
2409   ED 52                  SBC   HL,DE   
240B   7D                     LD   A,L   
240C   B4                     OR   H   
240D   CA 65 24               JP   Z,expectM_0_2757S50   
2410   CD CB 0B               CALL   printStr   
2413   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
241E   CD CB 0B               CALL   printStr   
2421   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2430   21 01 00               LD   hl,1   
2433   E5                     PUSH   hl   
2434   CD 90 0C               CALL   run   
2437   2E 00                  .CSTR   "."   
2439   CD CB 0B               CALL   printStr   
243C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2449   E1                     POP   hl   
244A   E5                     PUSH   hl   
244B   E5                     PUSH   hl   
244C   CD 90 0C               CALL   run   
244F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2463   76                     HALT      
2464   00                     .CSTR      
2465                EXPECTM_0_2757S50:      
2465   E1                     POP   HL   
2466                          ;*Macro unroll:  test "{1}^", 1
2466   31 80 45               LD   SP,STACK   
2469   CD D2 0B               CALL   init   
246C   CD 66 44               CALL   execStr   
246F   7B 31 7D 5E 00         .CSTR   "{1}^"   
2474                          ;*Macro unroll:  expect "{1}^",1
2474   E1                     POP   HL   
2475   E5                     PUSH   HL   
2476   11 01 00               LD   DE,1   
2479   B7                     OR   A   
247A   ED 52                  SBC   HL,DE   
247C   7D                     LD   A,L   
247D   B4                     OR   H   
247E   CA D6 24               JP   Z,expectM_0_2758S50   
2481   CD CB 0B               CALL   printStr   
2484   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
248F   CD CB 0B               CALL   printStr   
2492   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A1   21 01 00               LD   hl,1   
24A4   E5                     PUSH   hl   
24A5   CD 90 0C               CALL   run   
24A8   2E 00                  .CSTR   "."   
24AA   CD CB 0B               CALL   printStr   
24AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24BA   E1                     POP   hl   
24BB   E5                     PUSH   hl   
24BC   E5                     PUSH   hl   
24BD   CD 90 0C               CALL   run   
24C0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24D4   76                     HALT      
24D5   00                     .CSTR      
24D6                EXPECTM_0_2758S50:      
24D6   E1                     POP   HL   
24D7                          ;*Macro unroll:  test "{{1}^}^", 1
24D7   31 80 45               LD   SP,STACK   
24DA   CD D2 0B               CALL   init   
24DD   CD 66 44               CALL   execStr   
24E0   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
24E8                          ;*Macro unroll:  expect "{{1}^}^",1
24E8   E1                     POP   HL   
24E9   E5                     PUSH   HL   
24EA   11 01 00               LD   DE,1   
24ED   B7                     OR   A   
24EE   ED 52                  SBC   HL,DE   
24F0   7D                     LD   A,L   
24F1   B4                     OR   H   
24F2   CA 4D 25               JP   Z,expectM_0_2759S50   
24F5   CD CB 0B               CALL   printStr   
24F8   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2506   CD CB 0B               CALL   printStr   
2509   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2518   21 01 00               LD   hl,1   
251B   E5                     PUSH   hl   
251C   CD 90 0C               CALL   run   
251F   2E 00                  .CSTR   "."   
2521   CD CB 0B               CALL   printStr   
2524   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2531   E1                     POP   hl   
2532   E5                     PUSH   hl   
2533   E5                     PUSH   hl   
2534   CD 90 0C               CALL   run   
2537   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
254B   76                     HALT      
254C   00                     .CSTR      
254D                EXPECTM_0_2759S50:      
254D   E1                     POP   HL   
254E                          ;*Macro unroll:  test "{{{1}^}^}^", 1
254E   31 80 45               LD   SP,STACK   
2551   CD D2 0B               CALL   init   
2554   CD 66 44               CALL   execStr   
2557   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2562                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2562   E1                     POP   HL   
2563   E5                     PUSH   HL   
2564   11 01 00               LD   DE,1   
2567   B7                     OR   A   
2568   ED 52                  SBC   HL,DE   
256A   7D                     LD   A,L   
256B   B4                     OR   H   
256C   CA CA 25               JP   Z,expectM_0_2760S50   
256F   CD CB 0B               CALL   printStr   
2572   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2583   CD CB 0B               CALL   printStr   
2586   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2595   21 01 00               LD   hl,1   
2598   E5                     PUSH   hl   
2599   CD 90 0C               CALL   run   
259C   2E 00                  .CSTR   "."   
259E   CD CB 0B               CALL   printStr   
25A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25AE   E1                     POP   hl   
25AF   E5                     PUSH   hl   
25B0   E5                     PUSH   hl   
25B1   CD 90 0C               CALL   run   
25B4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25C8   76                     HALT      
25C9   00                     .CSTR      
25CA                EXPECTM_0_2760S50:      
25CA   E1                     POP   HL   
25CB                          ;*Macro unroll:  test "5 /f{10} ?", 5
25CB   31 80 45               LD   SP,STACK   
25CE   CD D2 0B               CALL   init   
25D1   CD 66 44               CALL   execStr   
25D4   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
25DF                          ;*Macro unroll:  expect "5 /f{10} ?",5
25DF   E1                     POP   HL   
25E0   E5                     PUSH   HL   
25E1   11 05 00               LD   DE,5   
25E4   B7                     OR   A   
25E5   ED 52                  SBC   HL,DE   
25E7   7D                     LD   A,L   
25E8   B4                     OR   H   
25E9   CA 47 26               JP   Z,expectM_0_2761S50   
25EC   CD CB 0B               CALL   printStr   
25EF   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2600   CD CB 0B               CALL   printStr   
2603   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2612   21 05 00               LD   hl,5   
2615   E5                     PUSH   hl   
2616   CD 90 0C               CALL   run   
2619   2E 00                  .CSTR   "."   
261B   CD CB 0B               CALL   printStr   
261E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
262B   E1                     POP   hl   
262C   E5                     PUSH   hl   
262D   E5                     PUSH   hl   
262E   CD 90 0C               CALL   run   
2631   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2645   76                     HALT      
2646   00                     .CSTR      
2647                EXPECTM_0_2761S50:      
2647   E1                     POP   HL   
2648                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2648   31 80 45               LD   SP,STACK   
264B   CD D2 0B               CALL   init   
264E   CD 66 44               CALL   execStr   
2651   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
265E                          ;*Macro unroll:  expect "5 /t{10} ? +",15
265E   E1                     POP   HL   
265F   E5                     PUSH   HL   
2660   11 0F 00               LD   DE,15   
2663   B7                     OR   A   
2664   ED 52                  SBC   HL,DE   
2666   7D                     LD   A,L   
2667   B4                     OR   H   
2668   CA C8 26               JP   Z,expectM_0_2762S50   
266B   CD CB 0B               CALL   printStr   
266E   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2681   CD CB 0B               CALL   printStr   
2684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2693   21 0F 00               LD   hl,15   
2696   E5                     PUSH   hl   
2697   CD 90 0C               CALL   run   
269A   2E 00                  .CSTR   "."   
269C   CD CB 0B               CALL   printStr   
269F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26AC   E1                     POP   hl   
26AD   E5                     PUSH   hl   
26AE   E5                     PUSH   hl   
26AF   CD 90 0C               CALL   run   
26B2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26C6   76                     HALT      
26C7   00                     .CSTR      
26C8                EXPECTM_0_2762S50:      
26C8   E1                     POP   HL   
26C9                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
26C9   31 80 45               LD   SP,STACK   
26CC   CD D2 0B               CALL   init   
26CF   CD 66 44               CALL   execStr   
26D2   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
26E4                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
26E4   E1                     POP   HL   
26E5   E5                     PUSH   HL   
26E6   11 15 00               LD   DE,21   
26E9   B7                     OR   A   
26EA   ED 52                  SBC   HL,DE   
26EC   7D                     LD   A,L   
26ED   B4                     OR   H   
26EE   CA 53 27               JP   Z,expectM_0_2763S50   
26F1   CD CB 0B               CALL   printStr   
26F4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
270C   CD CB 0B               CALL   printStr   
270F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
271E   21 15 00               LD   hl,21   
2721   E5                     PUSH   hl   
2722   CD 90 0C               CALL   run   
2725   2E 00                  .CSTR   "."   
2727   CD CB 0B               CALL   printStr   
272A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2737   E1                     POP   hl   
2738   E5                     PUSH   hl   
2739   E5                     PUSH   hl   
273A   CD 90 0C               CALL   run   
273D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2751   76                     HALT      
2752   00                     .CSTR      
2753                EXPECTM_0_2763S50:      
2753   E1                     POP   HL   
2754                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2754   31 80 45               LD   SP,STACK   
2757   CD D2 0B               CALL   init   
275A   CD 66 44               CALL   execStr   
275D   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
276F                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
276F   E1                     POP   HL   
2770   E5                     PUSH   HL   
2771   11 0B 00               LD   DE,11   
2774   B7                     OR   A   
2775   ED 52                  SBC   HL,DE   
2777   7D                     LD   A,L   
2778   B4                     OR   H   
2779   CA DE 27               JP   Z,expectM_0_2764S50   
277C   CD CB 0B               CALL   printStr   
277F   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2797   CD CB 0B               CALL   printStr   
279A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27A9   21 0B 00               LD   hl,11   
27AC   E5                     PUSH   hl   
27AD   CD 90 0C               CALL   run   
27B0   2E 00                  .CSTR   "."   
27B2   CD CB 0B               CALL   printStr   
27B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27C2   E1                     POP   hl   
27C3   E5                     PUSH   hl   
27C4   E5                     PUSH   hl   
27C5   CD 90 0C               CALL   run   
27C8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27DC   76                     HALT      
27DD   00                     .CSTR      
27DE                EXPECTM_0_2764S50:      
27DE   E1                     POP   HL   
27DF                          ;*Macro unroll:  test ": -2%", $0000
27DF   31 80 45               LD   SP,STACK   
27E2   CD D2 0B               CALL   init   
27E5   CD 66 44               CALL   execStr   
27E8   3A 20 2D 32 25 00      .CSTR   ": -2%"   
27EE                          ;*Macro unroll:  expect ": -2%",$0000
27EE   E1                     POP   HL   
27EF   E5                     PUSH   HL   
27F0   11 00 00               LD   DE,$0000   
27F3   B7                     OR   A   
27F4   ED 52                  SBC   HL,DE   
27F6   7D                     LD   A,L   
27F7   B4                     OR   H   
27F8   CA 51 28               JP   Z,expectM_0_2765S50   
27FB   CD CB 0B               CALL   printStr   
27FE   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
280A   CD CB 0B               CALL   printStr   
280D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
281C   21 00 00               LD   hl,$0000   
281F   E5                     PUSH   hl   
2820   CD 90 0C               CALL   run   
2823   2E 00                  .CSTR   "."   
2825   CD CB 0B               CALL   printStr   
2828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2835   E1                     POP   hl   
2836   E5                     PUSH   hl   
2837   E5                     PUSH   hl   
2838   CD 90 0C               CALL   run   
283B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
284F   76                     HALT      
2850   00                     .CSTR      
2851                EXPECTM_0_2765S50:      
2851   E1                     POP   HL   
2852                          ;*Macro unroll:  test ":a -1%", $0001
2852   31 80 45               LD   SP,STACK   
2855   CD D2 0B               CALL   init   
2858   CD 66 44               CALL   execStr   
285B   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
2862                          ;*Macro unroll:  expect ":a -1%",$0001
2862   E1                     POP   HL   
2863   E5                     PUSH   HL   
2864   11 01 00               LD   DE,$0001   
2867   B7                     OR   A   
2868   ED 52                  SBC   HL,DE   
286A   7D                     LD   A,L   
286B   B4                     OR   H   
286C   CA C6 28               JP   Z,expectM_0_2766S50   
286F   CD CB 0B               CALL   printStr   
2872   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
287F   CD CB 0B               CALL   printStr   
2882   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2891   21 01 00               LD   hl,$0001   
2894   E5                     PUSH   hl   
2895   CD 90 0C               CALL   run   
2898   2E 00                  .CSTR   "."   
289A   CD CB 0B               CALL   printStr   
289D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AA   E1                     POP   hl   
28AB   E5                     PUSH   hl   
28AC   E5                     PUSH   hl   
28AD   CD 90 0C               CALL   run   
28B0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28C4   76                     HALT      
28C5   00                     .CSTR      
28C6                EXPECTM_0_2766S50:      
28C6   E1                     POP   HL   
28C7                          ;*Macro unroll:  test ":a: -1%", $0001
28C7   31 80 45               LD   SP,STACK   
28CA   CD D2 0B               CALL   init   
28CD   CD 66 44               CALL   execStr   
28D0   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
28D8                          ;*Macro unroll:  expect ":a: -1%",$0001
28D8   E1                     POP   HL   
28D9   E5                     PUSH   HL   
28DA   11 01 00               LD   DE,$0001   
28DD   B7                     OR   A   
28DE   ED 52                  SBC   HL,DE   
28E0   7D                     LD   A,L   
28E1   B4                     OR   H   
28E2   CA 3D 29               JP   Z,expectM_0_2767S50   
28E5   CD CB 0B               CALL   printStr   
28E8   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
28F6   CD CB 0B               CALL   printStr   
28F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2908   21 01 00               LD   hl,$0001   
290B   E5                     PUSH   hl   
290C   CD 90 0C               CALL   run   
290F   2E 00                  .CSTR   "."   
2911   CD CB 0B               CALL   printStr   
2914   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2921   E1                     POP   hl   
2922   E5                     PUSH   hl   
2923   E5                     PUSH   hl   
2924   CD 90 0C               CALL   run   
2927   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
293B   76                     HALT      
293C   00                     .CSTR      
293D                EXPECTM_0_2767S50:      
293D   E1                     POP   HL   
293E                          ;*Macro unroll:  test ":a:b -1%", $0102
293E   31 80 45               LD   SP,STACK   
2941   CD D2 0B               CALL   init   
2944   CD 66 44               CALL   execStr   
2947   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2950                          ;*Macro unroll:  expect ":a:b -1%",$0102
2950   E1                     POP   HL   
2951   E5                     PUSH   HL   
2952   11 02 01               LD   DE,$0102   
2955   B7                     OR   A   
2956   ED 52                  SBC   HL,DE   
2958   7D                     LD   A,L   
2959   B4                     OR   H   
295A   CA B6 29               JP   Z,expectM_0_2768S50   
295D   CD CB 0B               CALL   printStr   
2960   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
296F   CD CB 0B               CALL   printStr   
2972   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2981   21 02 01               LD   hl,$0102   
2984   E5                     PUSH   hl   
2985   CD 90 0C               CALL   run   
2988   2E 00                  .CSTR   "."   
298A   CD CB 0B               CALL   printStr   
298D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299A   E1                     POP   hl   
299B   E5                     PUSH   hl   
299C   E5                     PUSH   hl   
299D   CD 90 0C               CALL   run   
29A0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29B4   76                     HALT      
29B5   00                     .CSTR      
29B6                EXPECTM_0_2768S50:      
29B6   E1                     POP   HL   
29B7                          ;*Macro unroll:  test "::b -1%", $0101
29B7   31 80 45               LD   SP,STACK   
29BA   CD D2 0B               CALL   init   
29BD   CD 66 44               CALL   execStr   
29C0   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
29C8                          ;*Macro unroll:  expect "::b -1%",$0101
29C8   E1                     POP   HL   
29C9   E5                     PUSH   HL   
29CA   11 01 01               LD   DE,$0101   
29CD   B7                     OR   A   
29CE   ED 52                  SBC   HL,DE   
29D0   7D                     LD   A,L   
29D1   B4                     OR   H   
29D2   CA 2D 2A               JP   Z,expectM_0_2769S50   
29D5   CD CB 0B               CALL   printStr   
29D8   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
29E6   CD CB 0B               CALL   printStr   
29E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F8   21 01 01               LD   hl,$0101   
29FB   E5                     PUSH   hl   
29FC   CD 90 0C               CALL   run   
29FF   2E 00                  .CSTR   "."   
2A01   CD CB 0B               CALL   printStr   
2A04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A11   E1                     POP   hl   
2A12   E5                     PUSH   hl   
2A13   E5                     PUSH   hl   
2A14   CD 90 0C               CALL   run   
2A17   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A2B   76                     HALT      
2A2C   00                     .CSTR      
2A2D                EXPECTM_0_2769S50:      
2A2D   E1                     POP   HL   
2A2E                          ;*Macro unroll:  test ":{2};^", 2
2A2E   31 80 45               LD   SP,STACK   
2A31   CD D2 0B               CALL   init   
2A34   CD 66 44               CALL   execStr   
2A37   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2A3E                          ;*Macro unroll:  expect ":{2};^",2
2A3E   E1                     POP   HL   
2A3F   E5                     PUSH   HL   
2A40   11 02 00               LD   DE,2   
2A43   B7                     OR   A   
2A44   ED 52                  SBC   HL,DE   
2A46   7D                     LD   A,L   
2A47   B4                     OR   H   
2A48   CA A2 2A               JP   Z,expectM_0_2770S50   
2A4B   CD CB 0B               CALL   printStr   
2A4E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2A5B   CD CB 0B               CALL   printStr   
2A5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6D   21 02 00               LD   hl,2   
2A70   E5                     PUSH   hl   
2A71   CD 90 0C               CALL   run   
2A74   2E 00                  .CSTR   "."   
2A76   CD CB 0B               CALL   printStr   
2A79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A86   E1                     POP   hl   
2A87   E5                     PUSH   hl   
2A88   E5                     PUSH   hl   
2A89   CD 90 0C               CALL   run   
2A8C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AA0   76                     HALT      
2AA1   00                     .CSTR      
2AA2                EXPECTM_0_2770S50:      
2AA2   E1                     POP   HL   
2AA3                          ;*Macro unroll:  test ":a{2};^", 2
2AA3   31 80 45               LD   SP,STACK   
2AA6   CD D2 0B               CALL   init   
2AA9   CD 66 44               CALL   execStr   
2AAC   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2AB4                          ;*Macro unroll:  expect ":a{2};^",2
2AB4   E1                     POP   HL   
2AB5   E5                     PUSH   HL   
2AB6   11 02 00               LD   DE,2   
2AB9   B7                     OR   A   
2ABA   ED 52                  SBC   HL,DE   
2ABC   7D                     LD   A,L   
2ABD   B4                     OR   H   
2ABE   CA 19 2B               JP   Z,expectM_0_2771S50   
2AC1   CD CB 0B               CALL   printStr   
2AC4   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2AD2   CD CB 0B               CALL   printStr   
2AD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AE4   21 02 00               LD   hl,2   
2AE7   E5                     PUSH   hl   
2AE8   CD 90 0C               CALL   run   
2AEB   2E 00                  .CSTR   "."   
2AED   CD CB 0B               CALL   printStr   
2AF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AFD   E1                     POP   hl   
2AFE   E5                     PUSH   hl   
2AFF   E5                     PUSH   hl   
2B00   CD 90 0C               CALL   run   
2B03   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B17   76                     HALT      
2B18   00                     .CSTR      
2B19                EXPECTM_0_2771S50:      
2B19   E1                     POP   HL   
2B1A                          ;*Macro unroll:  test "5 :a{$a};^", 5
2B1A   31 80 45               LD   SP,STACK   
2B1D   CD D2 0B               CALL   init   
2B20   CD 66 44               CALL   execStr   
2B23   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2B2E                          ;*Macro unroll:  expect "5 :a{$a};^",5
2B2E   E1                     POP   HL   
2B2F   E5                     PUSH   HL   
2B30   11 05 00               LD   DE,5   
2B33   B7                     OR   A   
2B34   ED 52                  SBC   HL,DE   
2B36   7D                     LD   A,L   
2B37   B4                     OR   H   
2B38   CA 96 2B               JP   Z,expectM_0_2772S50   
2B3B   CD CB 0B               CALL   printStr   
2B3E   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2B4F   CD CB 0B               CALL   printStr   
2B52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B61   21 05 00               LD   hl,5   
2B64   E5                     PUSH   hl   
2B65   CD 90 0C               CALL   run   
2B68   2E 00                  .CSTR   "."   
2B6A   CD CB 0B               CALL   printStr   
2B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B7A   E1                     POP   hl   
2B7B   E5                     PUSH   hl   
2B7C   E5                     PUSH   hl   
2B7D   CD 90 0C               CALL   run   
2B80   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B94   76                     HALT      
2B95   00                     .CSTR      
2B96                EXPECTM_0_2772S50:      
2B96   E1                     POP   HL   
2B97                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2B97   31 80 45               LD   SP,STACK   
2B9A   CD D2 0B               CALL   init   
2B9D   CD 66 44               CALL   execStr   
2BA0   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2BAD                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2BAD   E1                     POP   HL   
2BAE   E5                     PUSH   HL   
2BAF   11 05 00               LD   DE,5   
2BB2   B7                     OR   A   
2BB3   ED 52                  SBC   HL,DE   
2BB5   7D                     LD   A,L   
2BB6   B4                     OR   H   
2BB7   CA 17 2C               JP   Z,expectM_0_2773S50   
2BBA   CD CB 0B               CALL   printStr   
2BBD   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2BD0   CD CB 0B               CALL   printStr   
2BD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BE2   21 05 00               LD   hl,5   
2BE5   E5                     PUSH   hl   
2BE6   CD 90 0C               CALL   run   
2BE9   2E 00                  .CSTR   "."   
2BEB   CD CB 0B               CALL   printStr   
2BEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BFB   E1                     POP   hl   
2BFC   E5                     PUSH   hl   
2BFD   E5                     PUSH   hl   
2BFE   CD 90 0C               CALL   run   
2C01   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C15   76                     HALT      
2C16   00                     .CSTR      
2C17                EXPECTM_0_2773S50:      
2C17   E1                     POP   HL   
2C18                          ;*Macro unroll:  test ":a{{2}^};^", 2
2C18   31 80 45               LD   SP,STACK   
2C1B   CD D2 0B               CALL   init   
2C1E   CD 66 44               CALL   execStr   
2C21   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2C2C                          ;*Macro unroll:  expect ":a{{2}^};^",2
2C2C   E1                     POP   HL   
2C2D   E5                     PUSH   HL   
2C2E   11 02 00               LD   DE,2   
2C31   B7                     OR   A   
2C32   ED 52                  SBC   HL,DE   
2C34   7D                     LD   A,L   
2C35   B4                     OR   H   
2C36   CA 94 2C               JP   Z,expectM_0_2774S50   
2C39   CD CB 0B               CALL   printStr   
2C3C   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2C4D   CD CB 0B               CALL   printStr   
2C50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C5F   21 02 00               LD   hl,2   
2C62   E5                     PUSH   hl   
2C63   CD 90 0C               CALL   run   
2C66   2E 00                  .CSTR   "."   
2C68   CD CB 0B               CALL   printStr   
2C6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C78   E1                     POP   hl   
2C79   E5                     PUSH   hl   
2C7A   E5                     PUSH   hl   
2C7B   CD 90 0C               CALL   run   
2C7E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C92   76                     HALT      
2C93   00                     .CSTR      
2C94                EXPECTM_0_2774S50:      
2C94   E1                     POP   HL   
2C95                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2C95   31 80 45               LD   SP,STACK   
2C98   CD D2 0B               CALL   init   
2C9B   CD 66 44               CALL   execStr   
2C9E   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2CAE                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2CAE   E1                     POP   HL   
2CAF   E5                     PUSH   HL   
2CB0   11 05 00               LD   DE,5   
2CB3   B7                     OR   A   
2CB4   ED 52                  SBC   HL,DE   
2CB6   7D                     LD   A,L   
2CB7   B4                     OR   H   
2CB8   CA 1B 2D               JP   Z,expectM_0_2775S50   
2CBB   CD CB 0B               CALL   printStr   
2CBE   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2CD4   CD CB 0B               CALL   printStr   
2CD7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CE6   21 05 00               LD   hl,5   
2CE9   E5                     PUSH   hl   
2CEA   CD 90 0C               CALL   run   
2CED   2E 00                  .CSTR   "."   
2CEF   CD CB 0B               CALL   printStr   
2CF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CFF   E1                     POP   hl   
2D00   E5                     PUSH   hl   
2D01   E5                     PUSH   hl   
2D02   CD 90 0C               CALL   run   
2D05   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D19   76                     HALT      
2D1A   00                     .CSTR      
2D1B                EXPECTM_0_2775S50:      
2D1B   E1                     POP   HL   
2D1C                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2D1C   31 80 45               LD   SP,STACK   
2D1F   CD D2 0B               CALL   init   
2D22   CD 66 44               CALL   execStr   
2D25   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2D36                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2D36   E1                     POP   HL   
2D37   E5                     PUSH   HL   
2D38   11 01 00               LD   DE,1   
2D3B   B7                     OR   A   
2D3C   ED 52                  SBC   HL,DE   
2D3E   7D                     LD   A,L   
2D3F   B4                     OR   H   
2D40   CA A4 2D               JP   Z,expectM_0_2776S50   
2D43   CD CB 0B               CALL   printStr   
2D46   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2D5D   CD CB 0B               CALL   printStr   
2D60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D6F   21 01 00               LD   hl,1   
2D72   E5                     PUSH   hl   
2D73   CD 90 0C               CALL   run   
2D76   2E 00                  .CSTR   "."   
2D78   CD CB 0B               CALL   printStr   
2D7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D88   E1                     POP   hl   
2D89   E5                     PUSH   hl   
2D8A   E5                     PUSH   hl   
2D8B   CD 90 0C               CALL   run   
2D8E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DA2   76                     HALT      
2DA3   00                     .CSTR      
2DA4                EXPECTM_0_2776S50:      
2DA4   E1                     POP   HL   
2DA5                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2DA5   31 80 45               LD   SP,STACK   
2DA8   CD D2 0B               CALL   init   
2DAB   CD 66 44               CALL   execStr   
2DAE   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2DC2                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2DC2   E1                     POP   HL   
2DC3   E5                     PUSH   HL   
2DC4   11 07 00               LD   DE,7   
2DC7   B7                     OR   A   
2DC8   ED 52                  SBC   HL,DE   
2DCA   7D                     LD   A,L   
2DCB   B4                     OR   H   
2DCC   CA 33 2E               JP   Z,expectM_0_2777S50   
2DCF   CD CB 0B               CALL   printStr   
2DD2   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2DEC   CD CB 0B               CALL   printStr   
2DEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFE   21 07 00               LD   hl,7   
2E01   E5                     PUSH   hl   
2E02   CD 90 0C               CALL   run   
2E05   2E 00                  .CSTR   "."   
2E07   CD CB 0B               CALL   printStr   
2E0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E17   E1                     POP   hl   
2E18   E5                     PUSH   hl   
2E19   E5                     PUSH   hl   
2E1A   CD 90 0C               CALL   run   
2E1D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E31   76                     HALT      
2E32   00                     .CSTR      
2E33                EXPECTM_0_2777S50:      
2E33   E1                     POP   HL   
2E34                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2E34   31 80 45               LD   SP,STACK   
2E37   CD D2 0B               CALL   init   
2E3A   CD 66 44               CALL   execStr   
2E3D   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2E53                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2E53   E1                     POP   HL   
2E54   E5                     PUSH   HL   
2E55   11 06 00               LD   DE,6   
2E58   B7                     OR   A   
2E59   ED 52                  SBC   HL,DE   
2E5B   7D                     LD   A,L   
2E5C   B4                     OR   H   
2E5D   CA C6 2E               JP   Z,expectM_0_2778S50   
2E60   CD CB 0B               CALL   printStr   
2E63   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2E7F   CD CB 0B               CALL   printStr   
2E82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E91   21 06 00               LD   hl,6   
2E94   E5                     PUSH   hl   
2E95   CD 90 0C               CALL   run   
2E98   2E 00                  .CSTR   "."   
2E9A   CD CB 0B               CALL   printStr   
2E9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EAA   E1                     POP   hl   
2EAB   E5                     PUSH   hl   
2EAC   E5                     PUSH   hl   
2EAD   CD 90 0C               CALL   run   
2EB0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2EC4   76                     HALT      
2EC5   00                     .CSTR      
2EC6                EXPECTM_0_2778S50:      
2EC6   E1                     POP   HL   
2EC7                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2EC7   31 80 45               LD   SP,STACK   
2ECA   CD D2 0B               CALL   init   
2ECD   CD 66 44               CALL   execStr   
2ED0   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2EDF                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2EDF   E1                     POP   HL   
2EE0   E5                     PUSH   HL   
2EE1   11 02 00               LD   DE,2   
2EE4   B7                     OR   A   
2EE5   ED 52                  SBC   HL,DE   
2EE7   7D                     LD   A,L   
2EE8   B4                     OR   H   
2EE9   CA 4B 2F               JP   Z,expectM_0_2779S50   
2EEC   CD CB 0B               CALL   printStr   
2EEF   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2F04   CD CB 0B               CALL   printStr   
2F07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F16   21 02 00               LD   hl,2   
2F19   E5                     PUSH   hl   
2F1A   CD 90 0C               CALL   run   
2F1D   2E 00                  .CSTR   "."   
2F1F   CD CB 0B               CALL   printStr   
2F22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F2F   E1                     POP   hl   
2F30   E5                     PUSH   hl   
2F31   E5                     PUSH   hl   
2F32   CD 90 0C               CALL   run   
2F35   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F49   76                     HALT      
2F4A   00                     .CSTR      
2F4B                EXPECTM_0_2779S50:      
2F4B   E1                     POP   HL   
2F4C                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2F4C   31 80 45               LD   SP,STACK   
2F4F   CD D2 0B               CALL   init   
2F52   CD 66 44               CALL   execStr   
2F55   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2F67                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2F67   E1                     POP   HL   
2F68   E5                     PUSH   HL   
2F69   11 01 00               LD   DE,1   
2F6C   B7                     OR   A   
2F6D   ED 52                  SBC   HL,DE   
2F6F   7D                     LD   A,L   
2F70   B4                     OR   H   
2F71   CA D6 2F               JP   Z,expectM_0_2780S50   
2F74   CD CB 0B               CALL   printStr   
2F77   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2F8F   CD CB 0B               CALL   printStr   
2F92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA1   21 01 00               LD   hl,1   
2FA4   E5                     PUSH   hl   
2FA5   CD 90 0C               CALL   run   
2FA8   2E 00                  .CSTR   "."   
2FAA   CD CB 0B               CALL   printStr   
2FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBA   E1                     POP   hl   
2FBB   E5                     PUSH   hl   
2FBC   E5                     PUSH   hl   
2FBD   CD 90 0C               CALL   run   
2FC0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FD4   76                     HALT      
2FD5   00                     .CSTR      
2FD6                EXPECTM_0_2780S50:      
2FD6   E1                     POP   HL   
2FD7                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2FD7   31 80 45               LD   SP,STACK   
2FDA   CD D2 0B               CALL   init   
2FDD   CD 66 44               CALL   execStr   
2FE0   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2FF3                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2FF3   E1                     POP   HL   
2FF4   E5                     PUSH   HL   
2FF5   11 02 00               LD   DE,2   
2FF8   B7                     OR   A   
2FF9   ED 52                  SBC   HL,DE   
2FFB   7D                     LD   A,L   
2FFC   B4                     OR   H   
2FFD   CA 63 30               JP   Z,expectM_0_2781S50   
3000   CD CB 0B               CALL   printStr   
3003   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
301C   CD CB 0B               CALL   printStr   
301F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
302E   21 02 00               LD   hl,2   
3031   E5                     PUSH   hl   
3032   CD 90 0C               CALL   run   
3035   2E 00                  .CSTR   "."   
3037   CD CB 0B               CALL   printStr   
303A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3047   E1                     POP   hl   
3048   E5                     PUSH   hl   
3049   E5                     PUSH   hl   
304A   CD 90 0C               CALL   run   
304D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3061   76                     HALT      
3062   00                     .CSTR      
3063                EXPECTM_0_2781S50:      
3063   E1                     POP   HL   
3064                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
3064   31 80 45               LD   SP,STACK   
3067   CD D2 0B               CALL   init   
306A   CD 66 44               CALL   execStr   
306D   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
3081                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
3081   E1                     POP   HL   
3082   E5                     PUSH   HL   
3083   11 02 00               LD   DE,2   
3086   B7                     OR   A   
3087   ED 52                  SBC   HL,DE   
3089   7D                     LD   A,L   
308A   B4                     OR   H   
308B   CA F2 30               JP   Z,expectM_0_2782S50   
308E   CD CB 0B               CALL   printStr   
3091   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
30AB   CD CB 0B               CALL   printStr   
30AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BD   21 02 00               LD   hl,2   
30C0   E5                     PUSH   hl   
30C1   CD 90 0C               CALL   run   
30C4   2E 00                  .CSTR   "."   
30C6   CD CB 0B               CALL   printStr   
30C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D6   E1                     POP   hl   
30D7   E5                     PUSH   hl   
30D8   E5                     PUSH   hl   
30D9   CD 90 0C               CALL   run   
30DC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
30F0   76                     HALT      
30F1   00                     .CSTR      
30F2                EXPECTM_0_2782S50:      
30F2   E1                     POP   HL   
30F3                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
30F3   31 80 45               LD   SP,STACK   
30F6   CD D2 0B               CALL   init   
30F9   CD 66 44               CALL   execStr   
30FC   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
310F                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
310F   E1                     POP   HL   
3110   E5                     PUSH   HL   
3111   11 02 00               LD   DE,2   
3114   B7                     OR   A   
3115   ED 52                  SBC   HL,DE   
3117   7D                     LD   A,L   
3118   B4                     OR   H   
3119   CA 7F 31               JP   Z,expectM_0_2783S50   
311C   CD CB 0B               CALL   printStr   
311F   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
3138   CD CB 0B               CALL   printStr   
313B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
314A   21 02 00               LD   hl,2   
314D   E5                     PUSH   hl   
314E   CD 90 0C               CALL   run   
3151   2E 00                  .CSTR   "."   
3153   CD CB 0B               CALL   printStr   
3156   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3163   E1                     POP   hl   
3164   E5                     PUSH   hl   
3165   E5                     PUSH   hl   
3166   CD 90 0C               CALL   run   
3169   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
317D   76                     HALT      
317E   00                     .CSTR      
317F                EXPECTM_0_2783S50:      
317F   E1                     POP   HL   
3180                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3180   31 80 45               LD   SP,STACK   
3183   CD D2 0B               CALL   init   
3186   CD 66 44               CALL   execStr   
3189   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
31A3                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
31A3   E1                     POP   HL   
31A4   E5                     PUSH   HL   
31A5   11 05 00               LD   DE,5   
31A8   B7                     OR   A   
31A9   ED 52                  SBC   HL,DE   
31AB   7D                     LD   A,L   
31AC   B4                     OR   H   
31AD   CA 1A 32               JP   Z,expectM_0_2784S50   
31B0   CD CB 0B               CALL   printStr   
31B3   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
31D3   CD CB 0B               CALL   printStr   
31D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E5   21 05 00               LD   hl,5   
31E8   E5                     PUSH   hl   
31E9   CD 90 0C               CALL   run   
31EC   2E 00                  .CSTR   "."   
31EE   CD CB 0B               CALL   printStr   
31F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31FE   E1                     POP   hl   
31FF   E5                     PUSH   hl   
3200   E5                     PUSH   hl   
3201   CD 90 0C               CALL   run   
3204   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3218   76                     HALT      
3219   00                     .CSTR      
321A                EXPECTM_0_2784S50:      
321A   E1                     POP   HL   
321B                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
321B   31 80 45               LD   SP,STACK   
321E   CD D2 0B               CALL   init   
3221   CD 66 44               CALL   execStr   
3224   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
3235                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3235   E1                     POP   HL   
3236   E5                     PUSH   HL   
3237   11 02 00               LD   DE,2   
323A   B7                     OR   A   
323B   ED 52                  SBC   HL,DE   
323D   7D                     LD   A,L   
323E   B4                     OR   H   
323F   CA A3 32               JP   Z,expectM_0_2785S50   
3242   CD CB 0B               CALL   printStr   
3245   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
325C   CD CB 0B               CALL   printStr   
325F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
326E   21 02 00               LD   hl,2   
3271   E5                     PUSH   hl   
3272   CD 90 0C               CALL   run   
3275   2E 00                  .CSTR   "."   
3277   CD CB 0B               CALL   printStr   
327A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3287   E1                     POP   hl   
3288   E5                     PUSH   hl   
3289   E5                     PUSH   hl   
328A   CD 90 0C               CALL   run   
328D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32A1   76                     HALT      
32A2   00                     .CSTR      
32A3                EXPECTM_0_2785S50:      
32A3   E1                     POP   HL   
32A4                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
32A4   31 80 45               LD   SP,STACK   
32A7   CD D2 0B               CALL   init   
32AA   CD 66 44               CALL   execStr   
32AD   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
32C4                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
32C4   E1                     POP   HL   
32C5   E5                     PUSH   HL   
32C6   11 64 00               LD   DE,100   
32C9   B7                     OR   A   
32CA   ED 52                  SBC   HL,DE   
32CC   7D                     LD   A,L   
32CD   B4                     OR   H   
32CE   CA 38 33               JP   Z,expectM_0_2786S50   
32D1   CD CB 0B               CALL   printStr   
32D4   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
32F1   CD CB 0B               CALL   printStr   
32F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3303   21 64 00               LD   hl,100   
3306   E5                     PUSH   hl   
3307   CD 90 0C               CALL   run   
330A   2E 00                  .CSTR   "."   
330C   CD CB 0B               CALL   printStr   
330F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
331C   E1                     POP   hl   
331D   E5                     PUSH   hl   
331E   E5                     PUSH   hl   
331F   CD 90 0C               CALL   run   
3322   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3336   76                     HALT      
3337   00                     .CSTR      
3338                EXPECTM_0_2786S50:      
3338   E1                     POP   HL   
3339                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3339   31 80 45               LD   SP,STACK   
333C   CD D2 0B               CALL   init   
333F   CD 66 44               CALL   execStr   
3342   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
335A                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
335A   E1                     POP   HL   
335B   E5                     PUSH   HL   
335C   11 01 00               LD   DE,1   
335F   B7                     OR   A   
3360   ED 52                  SBC   HL,DE   
3362   7D                     LD   A,L   
3363   B4                     OR   H   
3364   CA CF 33               JP   Z,expectM_0_2787S50   
3367   CD CB 0B               CALL   printStr   
336A   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3388   CD CB 0B               CALL   printStr   
338B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
339A   21 01 00               LD   hl,1   
339D   E5                     PUSH   hl   
339E   CD 90 0C               CALL   run   
33A1   2E 00                  .CSTR   "."   
33A3   CD CB 0B               CALL   printStr   
33A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33B3   E1                     POP   hl   
33B4   E5                     PUSH   hl   
33B5   E5                     PUSH   hl   
33B6   CD 90 0C               CALL   run   
33B9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33CD   76                     HALT      
33CE   00                     .CSTR      
33CF                EXPECTM_0_2787S50:      
33CF   E1                     POP   HL   
33D0                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
33D0   31 80 45               LD   SP,STACK   
33D3   CD D2 0B               CALL   init   
33D6   CD 66 44               CALL   execStr   
33D9   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
33F2                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
33F2   E1                     POP   HL   
33F3   E5                     PUSH   HL   
33F4   11 02 00               LD   DE,2   
33F7   B7                     OR   A   
33F8   ED 52                  SBC   HL,DE   
33FA   7D                     LD   A,L   
33FB   B4                     OR   H   
33FC   CA 68 34               JP   Z,expectM_0_2788S50   
33FF   CD CB 0B               CALL   printStr   
3402   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3421   CD CB 0B               CALL   printStr   
3424   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3433   21 02 00               LD   hl,2   
3436   E5                     PUSH   hl   
3437   CD 90 0C               CALL   run   
343A   2E 00                  .CSTR   "."   
343C   CD CB 0B               CALL   printStr   
343F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
344C   E1                     POP   hl   
344D   E5                     PUSH   hl   
344E   E5                     PUSH   hl   
344F   CD 90 0C               CALL   run   
3452   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3466   76                     HALT      
3467   00                     .CSTR      
3468                EXPECTM_0_2788S50:      
3468   E1                     POP   HL   
3469                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
3469   31 80 45               LD   SP,STACK   
346C   CD D2 0B               CALL   init   
346F   CD 66 44               CALL   execStr   
3472   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3491                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
3491   E1                     POP   HL   
3492   E5                     PUSH   HL   
3493   11 0B 00               LD   DE,11   
3496   B7                     OR   A   
3497   ED 52                  SBC   HL,DE   
3499   7D                     LD   A,L   
349A   B4                     OR   H   
349B   CA 0D 35               JP   Z,expectM_0_2789S50   
349E   CD CB 0B               CALL   printStr   
34A1   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
34C6   CD CB 0B               CALL   printStr   
34C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34D8   21 0B 00               LD   hl,11   
34DB   E5                     PUSH   hl   
34DC   CD 90 0C               CALL   run   
34DF   2E 00                  .CSTR   "."   
34E1   CD CB 0B               CALL   printStr   
34E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34F1   E1                     POP   hl   
34F2   E5                     PUSH   hl   
34F3   E5                     PUSH   hl   
34F4   CD 90 0C               CALL   run   
34F7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
350B   76                     HALT      
350C   00                     .CSTR      
350D                EXPECTM_0_2789S50:      
350D   E1                     POP   HL   
350E                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
350E   31 80 45               LD   SP,STACK   
3511   CD D2 0B               CALL   init   
3514   CD 66 44               CALL   execStr   
3517   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3536                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
3536   E1                     POP   HL   
3537   E5                     PUSH   HL   
3538   11 15 00               LD   DE,21   
353B   B7                     OR   A   
353C   ED 52                  SBC   HL,DE   
353E   7D                     LD   A,L   
353F   B4                     OR   H   
3540   CA B2 35               JP   Z,expectM_0_2790S50   
3543   CD CB 0B               CALL   printStr   
3546   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
356B   CD CB 0B               CALL   printStr   
356E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
357D   21 15 00               LD   hl,21   
3580   E5                     PUSH   hl   
3581   CD 90 0C               CALL   run   
3584   2E 00                  .CSTR   "."   
3586   CD CB 0B               CALL   printStr   
3589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3596   E1                     POP   hl   
3597   E5                     PUSH   hl   
3598   E5                     PUSH   hl   
3599   CD 90 0C               CALL   run   
359C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35B0   76                     HALT      
35B1   00                     .CSTR      
35B2                EXPECTM_0_2790S50:      
35B2   E1                     POP   HL   
35B3                          ;*Macro unroll:  test "[10 20 30] 1%", 20
35B3   31 80 45               LD   SP,STACK   
35B6   CD D2 0B               CALL   init   
35B9   CD 66 44               CALL   execStr   
35BC   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
35CA                          ;*Macro unroll:  expect "[10 20 30] 1%",20
35CA   E1                     POP   HL   
35CB   E5                     PUSH   HL   
35CC   11 14 00               LD   DE,20   
35CF   B7                     OR   A   
35D0   ED 52                  SBC   HL,DE   
35D2   7D                     LD   A,L   
35D3   B4                     OR   H   
35D4   CA 35 36               JP   Z,expectM_0_2791S50   
35D7   CD CB 0B               CALL   printStr   
35DA   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
35EE   CD CB 0B               CALL   printStr   
35F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3600   21 14 00               LD   hl,20   
3603   E5                     PUSH   hl   
3604   CD 90 0C               CALL   run   
3607   2E 00                  .CSTR   "."   
3609   CD CB 0B               CALL   printStr   
360C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3619   E1                     POP   hl   
361A   E5                     PUSH   hl   
361B   E5                     PUSH   hl   
361C   CD 90 0C               CALL   run   
361F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3633   76                     HALT      
3634   00                     .CSTR      
3635                EXPECTM_0_2791S50:      
3635   E1                     POP   HL   
3636                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3636   31 80 45               LD   SP,STACK   
3639   CD D2 0B               CALL   init   
363C   CD 66 44               CALL   execStr   
363F   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
364D                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
364D   E1                     POP   HL   
364E   E5                     PUSH   HL   
364F   11 02 00               LD   DE,2   
3652   B7                     OR   A   
3653   ED 52                  SBC   HL,DE   
3655   7D                     LD   A,L   
3656   B4                     OR   H   
3657   CA B8 36               JP   Z,expectM_0_2792S50   
365A   CD CB 0B               CALL   printStr   
365D   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3671   CD CB 0B               CALL   printStr   
3674   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3683   21 02 00               LD   hl,2   
3686   E5                     PUSH   hl   
3687   CD 90 0C               CALL   run   
368A   2E 00                  .CSTR   "."   
368C   CD CB 0B               CALL   printStr   
368F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
369C   E1                     POP   hl   
369D   E5                     PUSH   hl   
369E   E5                     PUSH   hl   
369F   CD 90 0C               CALL   run   
36A2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
36B6   76                     HALT      
36B7   00                     .CSTR      
36B8                EXPECTM_0_2792S50:      
36B8   E1                     POP   HL   
36B9                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
36B9   31 80 45               LD   SP,STACK   
36BC   CD D2 0B               CALL   init   
36BF   CD 66 44               CALL   execStr   
36C2   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
36D6                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
36D6   E1                     POP   HL   
36D7   E5                     PUSH   HL   
36D8   11 42 00               LD   DE,66   
36DB   B7                     OR   A   
36DC   ED 52                  SBC   HL,DE   
36DE   7D                     LD   A,L   
36DF   B4                     OR   H   
36E0   CA 47 37               JP   Z,expectM_0_2793S50   
36E3   CD CB 0B               CALL   printStr   
36E6   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3700   CD CB 0B               CALL   printStr   
3703   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3712   21 42 00               LD   hl,66   
3715   E5                     PUSH   hl   
3716   CD 90 0C               CALL   run   
3719   2E 00                  .CSTR   "."   
371B   CD CB 0B               CALL   printStr   
371E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
372B   E1                     POP   hl   
372C   E5                     PUSH   hl   
372D   E5                     PUSH   hl   
372E   CD 90 0C               CALL   run   
3731   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3745   76                     HALT      
3746   00                     .CSTR      
3747                EXPECTM_0_2793S50:      
3747   E1                     POP   HL   
3748                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3748   31 80 45               LD   SP,STACK   
374B   CD D2 0B               CALL   init   
374E   CD 66 44               CALL   execStr   
3751   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3765                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3765   E1                     POP   HL   
3766   E5                     PUSH   HL   
3767   11 0A 00               LD   DE,10   
376A   B7                     OR   A   
376B   ED 52                  SBC   HL,DE   
376D   7D                     LD   A,L   
376E   B4                     OR   H   
376F   CA D6 37               JP   Z,expectM_0_2794S50   
3772   CD CB 0B               CALL   printStr   
3775   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
378F   CD CB 0B               CALL   printStr   
3792   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37A1   21 0A 00               LD   hl,10   
37A4   E5                     PUSH   hl   
37A5   CD 90 0C               CALL   run   
37A8   2E 00                  .CSTR   "."   
37AA   CD CB 0B               CALL   printStr   
37AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37BA   E1                     POP   hl   
37BB   E5                     PUSH   hl   
37BC   E5                     PUSH   hl   
37BD   CD 90 0C               CALL   run   
37C0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37D4   76                     HALT      
37D5   00                     .CSTR      
37D6                EXPECTM_0_2794S50:      
37D6   E1                     POP   HL   
37D7                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
37D7   31 80 45               LD   SP,STACK   
37DA   CD D2 0B               CALL   init   
37DD   CD 66 44               CALL   execStr   
37E0   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
37FC                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
37FC   E1                     POP   HL   
37FD   E5                     PUSH   HL   
37FE   11 0A 00               LD   DE,10   
3801   B7                     OR   A   
3802   ED 52                  SBC   HL,DE   
3804   7D                     LD   A,L   
3805   B4                     OR   H   
3806   CA 75 38               JP   Z,expectM_0_2795S50   
3809   CD CB 0B               CALL   printStr   
380C   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
382E   CD CB 0B               CALL   printStr   
3831   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3840   21 0A 00               LD   hl,10   
3843   E5                     PUSH   hl   
3844   CD 90 0C               CALL   run   
3847   2E 00                  .CSTR   "."   
3849   CD CB 0B               CALL   printStr   
384C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3859   E1                     POP   hl   
385A   E5                     PUSH   hl   
385B   E5                     PUSH   hl   
385C   CD 90 0C               CALL   run   
385F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3873   76                     HALT      
3874   00                     .CSTR      
3875                EXPECTM_0_2795S50:      
3875   E1                     POP   HL   
3876                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3876   31 80 45               LD   SP,STACK   
3879   CD D2 0B               CALL   init   
387C   CD 66 44               CALL   execStr   
387F   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
389F                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
389F   E1                     POP   HL   
38A0   E5                     PUSH   HL   
38A1   11 0A 00               LD   DE,10   
38A4   B7                     OR   A   
38A5   ED 52                  SBC   HL,DE   
38A7   7D                     LD   A,L   
38A8   B4                     OR   H   
38A9   CA 1C 39               JP   Z,expectM_0_2796S50   
38AC   CD CB 0B               CALL   printStr   
38AF   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
38D5   CD CB 0B               CALL   printStr   
38D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E7   21 0A 00               LD   hl,10   
38EA   E5                     PUSH   hl   
38EB   CD 90 0C               CALL   run   
38EE   2E 00                  .CSTR   "."   
38F0   CD CB 0B               CALL   printStr   
38F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3900   E1                     POP   hl   
3901   E5                     PUSH   hl   
3902   E5                     PUSH   hl   
3903   CD 90 0C               CALL   run   
3906   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
391A   76                     HALT      
391B   00                     .CSTR      
391C                EXPECTM_0_2796S50:      
391C   E1                     POP   HL   
391D                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
391D   31 80 45               LD   SP,STACK   
3920   CD D2 0B               CALL   init   
3923   CD 66 44               CALL   execStr   
3926   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3946                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3946   E1                     POP   HL   
3947   E5                     PUSH   HL   
3948   11 14 00               LD   DE,20   
394B   B7                     OR   A   
394C   ED 52                  SBC   HL,DE   
394E   7D                     LD   A,L   
394F   B4                     OR   H   
3950   CA C3 39               JP   Z,expectM_0_2797S50   
3953   CD CB 0B               CALL   printStr   
3956   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
397C   CD CB 0B               CALL   printStr   
397F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
398E   21 14 00               LD   hl,20   
3991   E5                     PUSH   hl   
3992   CD 90 0C               CALL   run   
3995   2E 00                  .CSTR   "."   
3997   CD CB 0B               CALL   printStr   
399A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A7   E1                     POP   hl   
39A8   E5                     PUSH   hl   
39A9   E5                     PUSH   hl   
39AA   CD 90 0C               CALL   run   
39AD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39C1   76                     HALT      
39C2   00                     .CSTR      
39C3                EXPECTM_0_2797S50:      
39C3   E1                     POP   HL   
39C4                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
39C4   31 80 45               LD   SP,STACK   
39C7   CD D2 0B               CALL   init   
39CA   CD 66 44               CALL   execStr   
39CD   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
39E1                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
39E1   E1                     POP   HL   
39E2   E5                     PUSH   HL   
39E3   11 04 00               LD   DE,4   
39E6   B7                     OR   A   
39E7   ED 52                  SBC   HL,DE   
39E9   7D                     LD   A,L   
39EA   B4                     OR   H   
39EB   CA 52 3A               JP   Z,expectM_0_2798S50   
39EE   CD CB 0B               CALL   printStr   
39F1   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3A0B   CD CB 0B               CALL   printStr   
3A0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A1D   21 04 00               LD   hl,4   
3A20   E5                     PUSH   hl   
3A21   CD 90 0C               CALL   run   
3A24   2E 00                  .CSTR   "."   
3A26   CD CB 0B               CALL   printStr   
3A29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A36   E1                     POP   hl   
3A37   E5                     PUSH   hl   
3A38   E5                     PUSH   hl   
3A39   CD 90 0C               CALL   run   
3A3C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A50   76                     HALT      
3A51   00                     .CSTR      
3A52                EXPECTM_0_2798S50:      
3A52   E1                     POP   HL   
3A53                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3A53   31 80 45               LD   SP,STACK   
3A56   CD D2 0B               CALL   init   
3A59   CD 66 44               CALL   execStr   
3A5C   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3A76                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3A76   E1                     POP   HL   
3A77   E5                     PUSH   HL   
3A78   11 09 00               LD   DE,9   
3A7B   B7                     OR   A   
3A7C   ED 52                  SBC   HL,DE   
3A7E   7D                     LD   A,L   
3A7F   B4                     OR   H   
3A80   CA ED 3A               JP   Z,expectM_0_2799S50   
3A83   CD CB 0B               CALL   printStr   
3A86   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3AA6   CD CB 0B               CALL   printStr   
3AA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AB8   21 09 00               LD   hl,9   
3ABB   E5                     PUSH   hl   
3ABC   CD 90 0C               CALL   run   
3ABF   2E 00                  .CSTR   "."   
3AC1   CD CB 0B               CALL   printStr   
3AC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AD1   E1                     POP   hl   
3AD2   E5                     PUSH   hl   
3AD3   E5                     PUSH   hl   
3AD4   CD 90 0C               CALL   run   
3AD7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3AEB   76                     HALT      
3AEC   00                     .CSTR      
3AED                EXPECTM_0_2799S50:      
3AED   E1                     POP   HL   
3AEE                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3AEE   31 80 45               LD   SP,STACK   
3AF1   CD D2 0B               CALL   init   
3AF4   CD 66 44               CALL   execStr   
3AF7   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3B0F                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3B0F   E1                     POP   HL   
3B10   E5                     PUSH   HL   
3B11   11 06 00               LD   DE,6   
3B14   B7                     OR   A   
3B15   ED 52                  SBC   HL,DE   
3B17   7D                     LD   A,L   
3B18   B4                     OR   H   
3B19   CA 84 3B               JP   Z,expectM_0_2800S50   
3B1C   CD CB 0B               CALL   printStr   
3B1F   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3B3D   CD CB 0B               CALL   printStr   
3B40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B4F   21 06 00               LD   hl,6   
3B52   E5                     PUSH   hl   
3B53   CD 90 0C               CALL   run   
3B56   2E 00                  .CSTR   "."   
3B58   CD CB 0B               CALL   printStr   
3B5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B68   E1                     POP   hl   
3B69   E5                     PUSH   hl   
3B6A   E5                     PUSH   hl   
3B6B   CD 90 0C               CALL   run   
3B6E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B82   76                     HALT      
3B83   00                     .CSTR      
3B84                EXPECTM_0_2800S50:      
3B84   E1                     POP   HL   
3B85                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3B85   31 80 45               LD   SP,STACK   
3B88   CD D2 0B               CALL   init   
3B8B   CD 66 44               CALL   execStr   
3B8E   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3BA9                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3BA9   E1                     POP   HL   
3BAA   E5                     PUSH   HL   
3BAB   11 02 00               LD   DE,2   
3BAE   B7                     OR   A   
3BAF   ED 52                  SBC   HL,DE   
3BB1   7D                     LD   A,L   
3BB2   B4                     OR   H   
3BB3   CA 21 3C               JP   Z,expectM_0_2801S50   
3BB6   CD CB 0B               CALL   printStr   
3BB9   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3BDA   CD CB 0B               CALL   printStr   
3BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BEC   21 02 00               LD   hl,2   
3BEF   E5                     PUSH   hl   
3BF0   CD 90 0C               CALL   run   
3BF3   2E 00                  .CSTR   "."   
3BF5   CD CB 0B               CALL   printStr   
3BF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C05   E1                     POP   hl   
3C06   E5                     PUSH   hl   
3C07   E5                     PUSH   hl   
3C08   CD 90 0C               CALL   run   
3C0B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C1F   76                     HALT      
3C20   00                     .CSTR      
3C21                EXPECTM_0_2801S50:      
3C21   E1                     POP   HL   
3C22                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3C22   31 80 45               LD   SP,STACK   
3C25   CD D2 0B               CALL   init   
3C28   CD 66 44               CALL   execStr   
3C2B   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3C51                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3C51   E1                     POP   HL   
3C52   E5                     PUSH   HL   
3C53   11 0A 00               LD   DE,10   
3C56   B7                     OR   A   
3C57   ED 52                  SBC   HL,DE   
3C59   7D                     LD   A,L   
3C5A   B4                     OR   H   
3C5B   CA D4 3C               JP   Z,expectM_0_2802S50   
3C5E   CD CB 0B               CALL   printStr   
3C61   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3C8D   CD CB 0B               CALL   printStr   
3C90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C9F   21 0A 00               LD   hl,10   
3CA2   E5                     PUSH   hl   
3CA3   CD 90 0C               CALL   run   
3CA6   2E 00                  .CSTR   "."   
3CA8   CD CB 0B               CALL   printStr   
3CAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CB8   E1                     POP   hl   
3CB9   E5                     PUSH   hl   
3CBA   E5                     PUSH   hl   
3CBB   CD 90 0C               CALL   run   
3CBE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3CD2   76                     HALT      
3CD3   00                     .CSTR      
3CD4                EXPECTM_0_2802S50:      
3CD4   E1                     POP   HL   
3CD5                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3CD5   31 80 45               LD   SP,STACK   
3CD8   CD D2 0B               CALL   init   
3CDB   CD 66 44               CALL   execStr   
3CDE   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3CEA                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3CEA   E1                     POP   HL   
3CEB   E5                     PUSH   HL   
3CEC   11 00 00               LD   DE,NUL   
3CEF   B7                     OR   A   
3CF0   ED 52                  SBC   HL,DE   
3CF2   7D                     LD   A,L   
3CF3   B4                     OR   H   
3CF4   CA 53 3D               JP   Z,expectM_0_2803S50   
3CF7   CD CB 0B               CALL   printStr   
3CFA   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3D0C   CD CB 0B               CALL   printStr   
3D0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D1E   21 00 00               LD   hl,NUL   
3D21   E5                     PUSH   hl   
3D22   CD 90 0C               CALL   run   
3D25   2E 00                  .CSTR   "."   
3D27   CD CB 0B               CALL   printStr   
3D2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D37   E1                     POP   hl   
3D38   E5                     PUSH   hl   
3D39   E5                     PUSH   hl   
3D3A   CD 90 0C               CALL   run   
3D3D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D51   76                     HALT      
3D52   00                     .CSTR      
3D53                EXPECTM_0_2803S50:      
3D53   E1                     POP   HL   
3D54                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3D54   31 80 45               LD   SP,STACK   
3D57   CD D2 0B               CALL   init   
3D5A   CD 66 44               CALL   execStr   
3D5D   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3D69                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3D69   E1                     POP   HL   
3D6A   E5                     PUSH   HL   
3D6B   11 00 00               LD   DE,NUL   
3D6E   B7                     OR   A   
3D6F   ED 52                  SBC   HL,DE   
3D71   7D                     LD   A,L   
3D72   B4                     OR   H   
3D73   CA D2 3D               JP   Z,expectM_0_2804S50   
3D76   CD CB 0B               CALL   printStr   
3D79   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3D8B   CD CB 0B               CALL   printStr   
3D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D9D   21 00 00               LD   hl,NUL   
3DA0   E5                     PUSH   hl   
3DA1   CD 90 0C               CALL   run   
3DA4   2E 00                  .CSTR   "."   
3DA6   CD CB 0B               CALL   printStr   
3DA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DB6   E1                     POP   hl   
3DB7   E5                     PUSH   hl   
3DB8   E5                     PUSH   hl   
3DB9   CD 90 0C               CALL   run   
3DBC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DD0   76                     HALT      
3DD1   00                     .CSTR      
3DD2                EXPECTM_0_2804S50:      
3DD2   E1                     POP   HL   
3DD3                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3DD3   31 80 45               LD   SP,STACK   
3DD6   CD D2 0B               CALL   init   
3DD9   CD 66 44               CALL   execStr   
3DDC   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3DE8                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3DE8   E1                     POP   HL   
3DE9   E5                     PUSH   HL   
3DEA   11 00 00               LD   DE,NUL   
3DED   B7                     OR   A   
3DEE   ED 52                  SBC   HL,DE   
3DF0   7D                     LD   A,L   
3DF1   B4                     OR   H   
3DF2   CA 51 3E               JP   Z,expectM_0_2805S50   
3DF5   CD CB 0B               CALL   printStr   
3DF8   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3E0A   CD CB 0B               CALL   printStr   
3E0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E1C   21 00 00               LD   hl,NUL   
3E1F   E5                     PUSH   hl   
3E20   CD 90 0C               CALL   run   
3E23   2E 00                  .CSTR   "."   
3E25   CD CB 0B               CALL   printStr   
3E28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E35   E1                     POP   hl   
3E36   E5                     PUSH   hl   
3E37   E5                     PUSH   hl   
3E38   CD 90 0C               CALL   run   
3E3B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E4F   76                     HALT      
3E50   00                     .CSTR      
3E51                EXPECTM_0_2805S50:      
3E51   E1                     POP   HL   
3E52                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3E52   31 80 45               LD   SP,STACK   
3E55   CD D2 0B               CALL   init   
3E58   CD 66 44               CALL   execStr   
3E5B   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3E67                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3E67   E1                     POP   HL   
3E68   E5                     PUSH   HL   
3E69   11 00 00               LD   DE,NUL   
3E6C   B7                     OR   A   
3E6D   ED 52                  SBC   HL,DE   
3E6F   7D                     LD   A,L   
3E70   B4                     OR   H   
3E71   CA D0 3E               JP   Z,expectM_0_2806S50   
3E74   CD CB 0B               CALL   printStr   
3E77   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3E89   CD CB 0B               CALL   printStr   
3E8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E9B   21 00 00               LD   hl,NUL   
3E9E   E5                     PUSH   hl   
3E9F   CD 90 0C               CALL   run   
3EA2   2E 00                  .CSTR   "."   
3EA4   CD CB 0B               CALL   printStr   
3EA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EB4   E1                     POP   hl   
3EB5   E5                     PUSH   hl   
3EB6   E5                     PUSH   hl   
3EB7   CD 90 0C               CALL   run   
3EBA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3ECE   76                     HALT      
3ECF   00                     .CSTR      
3ED0                EXPECTM_0_2806S50:      
3ED0   E1                     POP   HL   
3ED1                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3ED1   31 80 45               LD   SP,STACK   
3ED4   CD D2 0B               CALL   init   
3ED7   CD 66 44               CALL   execStr   
3EDA   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3EE2                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3EE2   E1                     POP   HL   
3EE3   E5                     PUSH   HL   
3EE4   11 66 46               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3EE7   B7                     OR   A   
3EE8   ED 52                  SBC   HL,DE   
3EEA   7D                     LD   A,L   
3EEB   B4                     OR   H   
3EEC   CA 47 3F               JP   Z,expectM_0_2807S50   
3EEF   CD CB 0B               CALL   printStr   
3EF2   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3F00   CD CB 0B               CALL   printStr   
3F03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F12   21 66 46               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3F15   E5                     PUSH   hl   
3F16   CD 90 0C               CALL   run   
3F19   2E 00                  .CSTR   "."   
3F1B   CD CB 0B               CALL   printStr   
3F1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F2B   E1                     POP   hl   
3F2C   E5                     PUSH   hl   
3F2D   E5                     PUSH   hl   
3F2E   CD 90 0C               CALL   run   
3F31   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F45   76                     HALT      
3F46   00                     .CSTR      
3F47                EXPECTM_0_2807S50:      
3F47   E1                     POP   HL   
3F48                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3F48   31 80 45               LD   SP,STACK   
3F4B   CD D2 0B               CALL   init   
3F4E   CD 66 44               CALL   execStr   
3F51   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3F59                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3F59   E1                     POP   HL   
3F5A   E5                     PUSH   HL   
3F5B   11 34 46               LD   DE,VARS + ("Z"-"A"+1)*2   
3F5E   B7                     OR   A   
3F5F   ED 52                  SBC   HL,DE   
3F61   7D                     LD   A,L   
3F62   B4                     OR   H   
3F63   CA BE 3F               JP   Z,expectM_0_2808S50   
3F66   CD CB 0B               CALL   printStr   
3F69   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3F77   CD CB 0B               CALL   printStr   
3F7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F89   21 34 46               LD   hl,VARS + ("Z"-"A"+1)*2   
3F8C   E5                     PUSH   hl   
3F8D   CD 90 0C               CALL   run   
3F90   2E 00                  .CSTR   "."   
3F92   CD CB 0B               CALL   printStr   
3F95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA2   E1                     POP   hl   
3FA3   E5                     PUSH   hl   
3FA4   E5                     PUSH   hl   
3FA5   CD 90 0C               CALL   run   
3FA8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FBC   76                     HALT      
3FBD   00                     .CSTR      
3FBE                EXPECTM_0_2808S50:      
3FBE   E1                     POP   HL   
3FBF                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3FBF   31 80 45               LD   SP,STACK   
3FC2   CD D2 0B               CALL   init   
3FC5   CD 66 44               CALL   execStr   
3FC8   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3FD0                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3FD0   E1                     POP   HL   
3FD1   E5                     PUSH   HL   
3FD2   11 32 46               LD   DE,VARS + ("Z"-"A")*2   
3FD5   B7                     OR   A   
3FD6   ED 52                  SBC   HL,DE   
3FD8   7D                     LD   A,L   
3FD9   B4                     OR   H   
3FDA   CA 35 40               JP   Z,expectM_0_2809S50   
3FDD   CD CB 0B               CALL   printStr   
3FE0   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
3FEE   CD CB 0B               CALL   printStr   
3FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4000   21 32 46               LD   hl,VARS + ("Z"-"A")*2   
4003   E5                     PUSH   hl   
4004   CD 90 0C               CALL   run   
4007   2E 00                  .CSTR   "."   
4009   CD CB 0B               CALL   printStr   
400C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4019   E1                     POP   hl   
401A   E5                     PUSH   hl   
401B   E5                     PUSH   hl   
401C   CD 90 0C               CALL   run   
401F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4033   76                     HALT      
4034   00                     .CSTR      
4035                EXPECTM_0_2809S50:      
4035   E1                     POP   HL   
4036                          ;*Macro unroll:  test "'A' /ad", VARS
4036   31 80 45               LD   SP,STACK   
4039   CD D2 0B               CALL   init   
403C   CD 66 44               CALL   execStr   
403F   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4047                          ;*Macro unroll:  expect "'A' /ad",VARS
4047   E1                     POP   HL   
4048   E5                     PUSH   HL   
4049   11 00 46               LD   DE,VARS   
404C   B7                     OR   A   
404D   ED 52                  SBC   HL,DE   
404F   7D                     LD   A,L   
4050   B4                     OR   H   
4051   CA AC 40               JP   Z,expectM_0_2810S50   
4054   CD CB 0B               CALL   printStr   
4057   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4065   CD CB 0B               CALL   printStr   
4068   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4077   21 00 46               LD   hl,VARS   
407A   E5                     PUSH   hl   
407B   CD 90 0C               CALL   run   
407E   2E 00                  .CSTR   "."   
4080   CD CB 0B               CALL   printStr   
4083   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4090   E1                     POP   hl   
4091   E5                     PUSH   hl   
4092   E5                     PUSH   hl   
4093   CD 90 0C               CALL   run   
4096   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40AA   76                     HALT      
40AB   00                     .CSTR      
40AC                EXPECTM_0_2810S50:      
40AC   E1                     POP   HL   
40AD                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
40AD   31 80 45               LD   SP,STACK   
40B0   CD D2 0B               CALL   init   
40B3   CD 66 44               CALL   execStr   
40B6   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
40C5                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
40C5   E1                     POP   HL   
40C6   E5                     PUSH   HL   
40C7   11 2D 00               LD   DE,$2D   
40CA   B7                     OR   A   
40CB   ED 52                  SBC   HL,DE   
40CD   7D                     LD   A,L   
40CE   B4                     OR   H   
40CF   CA 31 41               JP   Z,expectM_0_2811S50   
40D2   CD CB 0B               CALL   printStr   
40D5   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
40EA   CD CB 0B               CALL   printStr   
40ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FC   21 2D 00               LD   hl,$2D   
40FF   E5                     PUSH   hl   
4100   CD 90 0C               CALL   run   
4103   2E 00                  .CSTR   "."   
4105   CD CB 0B               CALL   printStr   
4108   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4115   E1                     POP   hl   
4116   E5                     PUSH   hl   
4117   E5                     PUSH   hl   
4118   CD 90 0C               CALL   run   
411B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
412F   76                     HALT      
4130   00                     .CSTR      
4131                EXPECTM_0_2811S50:      
4131   E1                     POP   HL   
4132                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
4132   31 80 45               LD   SP,STACK   
4135   CD D2 0B               CALL   init   
4138   CD 66 44               CALL   execStr   
413B   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
414B                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
414B   E1                     POP   HL   
414C   E5                     PUSH   HL   
414D   11 41 00               LD   DE,65   
4150   B7                     OR   A   
4151   ED 52                  SBC   HL,DE   
4153   7D                     LD   A,L   
4154   B4                     OR   H   
4155   CA B8 41               JP   Z,expectM_0_2812S50   
4158   CD CB 0B               CALL   printStr   
415B   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
4171   CD CB 0B               CALL   printStr   
4174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4183   21 41 00               LD   hl,65   
4186   E5                     PUSH   hl   
4187   CD 90 0C               CALL   run   
418A   2E 00                  .CSTR   "."   
418C   CD CB 0B               CALL   printStr   
418F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
419C   E1                     POP   hl   
419D   E5                     PUSH   hl   
419E   E5                     PUSH   hl   
419F   CD 90 0C               CALL   run   
41A2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41B6   76                     HALT      
41B7   00                     .CSTR      
41B8                EXPECTM_0_2812S50:      
41B8   E1                     POP   HL   
41B9                          ;*Macro unroll:  test "123 /bd", 3
41B9   31 80 45               LD   SP,STACK   
41BC   CD D2 0B               CALL   init   
41BF   CD 66 44               CALL   execStr   
41C2   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
41CA                          ;*Macro unroll:  expect "123 /bd",3
41CA   E1                     POP   HL   
41CB   E5                     PUSH   HL   
41CC   11 03 00               LD   DE,3   
41CF   B7                     OR   A   
41D0   ED 52                  SBC   HL,DE   
41D2   7D                     LD   A,L   
41D3   B4                     OR   H   
41D4   CA 2F 42               JP   Z,expectM_0_2813S50   
41D7   CD CB 0B               CALL   printStr   
41DA   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
41E8   CD CB 0B               CALL   printStr   
41EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41FA   21 03 00               LD   hl,3   
41FD   E5                     PUSH   hl   
41FE   CD 90 0C               CALL   run   
4201   2E 00                  .CSTR   "."   
4203   CD CB 0B               CALL   printStr   
4206   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4213   E1                     POP   hl   
4214   E5                     PUSH   hl   
4215   E5                     PUSH   hl   
4216   CD 90 0C               CALL   run   
4219   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
422D   76                     HALT      
422E   00                     .CSTR      
422F                EXPECTM_0_2813S50:      
422F   E1                     POP   HL   
4230                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
4230   31 80 45               LD   SP,STACK   
4233   CD D2 0B               CALL   init   
4236   CD 66 44               CALL   execStr   
4239   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
4249                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
4249   E1                     POP   HL   
424A   E5                     PUSH   HL   
424B   11 32 00               LD   DE,$32   
424E   B7                     OR   A   
424F   ED 52                  SBC   HL,DE   
4251   7D                     LD   A,L   
4252   B4                     OR   H   
4253   CA B6 42               JP   Z,expectM_0_2814S50   
4256   CD CB 0B               CALL   printStr   
4259   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
426F   CD CB 0B               CALL   printStr   
4272   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4281   21 32 00               LD   hl,$32   
4284   E5                     PUSH   hl   
4285   CD 90 0C               CALL   run   
4288   2E 00                  .CSTR   "."   
428A   CD CB 0B               CALL   printStr   
428D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
429A   E1                     POP   hl   
429B   E5                     PUSH   hl   
429C   E5                     PUSH   hl   
429D   CD 90 0C               CALL   run   
42A0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42B4   76                     HALT      
42B5   00                     .CSTR      
42B6                EXPECTM_0_2814S50:      
42B6   E1                     POP   HL   
42B7                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
42B7   31 80 45               LD   SP,STACK   
42BA   CD D2 0B               CALL   init   
42BD   CD 66 44               CALL   execStr   
42C0   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
42DC                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
42DC   E1                     POP   HL   
42DD   E5                     PUSH   HL   
42DE   11 09 00               LD   DE,9   
42E1   B7                     OR   A   
42E2   ED 52                  SBC   HL,DE   
42E4   7D                     LD   A,L   
42E5   B4                     OR   H   
42E6   CA 55 43               JP   Z,expectM_0_2815S50   
42E9   CD CB 0B               CALL   printStr   
42EC   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
430E   CD CB 0B               CALL   printStr   
4311   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4320   21 09 00               LD   hl,9   
4323   E5                     PUSH   hl   
4324   CD 90 0C               CALL   run   
4327   2E 00                  .CSTR   "."   
4329   CD CB 0B               CALL   printStr   
432C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4339   E1                     POP   hl   
433A   E5                     PUSH   hl   
433B   E5                     PUSH   hl   
433C   CD 90 0C               CALL   run   
433F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4353   76                     HALT      
4354   00                     .CSTR      
4355                EXPECTM_0_2815S50:      
4355   E1                     POP   HL   
4356                          ;*Macro unroll:  test "#4321 /bh", 4
4356   31 80 45               LD   SP,STACK   
4359   CD D2 0B               CALL   init   
435C   CD 66 44               CALL   execStr   
435F   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
4369                          ;*Macro unroll:  expect "#4321 /bh",4
4369   E1                     POP   HL   
436A   E5                     PUSH   HL   
436B   11 04 00               LD   DE,4   
436E   B7                     OR   A   
436F   ED 52                  SBC   HL,DE   
4371   7D                     LD   A,L   
4372   B4                     OR   H   
4373   CA D0 43               JP   Z,expectM_0_2816S50   
4376   CD CB 0B               CALL   printStr   
4379   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
4389   CD CB 0B               CALL   printStr   
438C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
439B   21 04 00               LD   hl,4   
439E   E5                     PUSH   hl   
439F   CD 90 0C               CALL   run   
43A2   2E 00                  .CSTR   "."   
43A4   CD CB 0B               CALL   printStr   
43A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43B4   E1                     POP   hl   
43B5   E5                     PUSH   hl   
43B6   E5                     PUSH   hl   
43B7   CD 90 0C               CALL   run   
43BA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43CE   76                     HALT      
43CF   00                     .CSTR      
43D0                EXPECTM_0_2816S50:      
43D0   E1                     POP   HL   
43D1                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
43D1   31 80 45               LD   SP,STACK   
43D4   CD D2 0B               CALL   init   
43D7   CD 66 44               CALL   execStr   
43DA   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
43EC                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
43EC   E1                     POP   HL   
43ED   E5                     PUSH   HL   
43EE   11 34 00               LD   DE,$34   
43F1   B7                     OR   A   
43F2   ED 52                  SBC   HL,DE   
43F4   7D                     LD   A,L   
43F5   B4                     OR   H   
43F6   CA 5B 44               JP   Z,expectM_0_2817S50   
43F9   CD CB 0B               CALL   printStr   
43FC   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
4414   CD CB 0B               CALL   printStr   
4417   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4426   21 34 00               LD   hl,$34   
4429   E5                     PUSH   hl   
442A   CD 90 0C               CALL   run   
442D   2E 00                  .CSTR   "."   
442F   CD CB 0B               CALL   printStr   
4432   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
443F   E1                     POP   hl   
4440   E5                     PUSH   hl   
4441   E5                     PUSH   hl   
4442   CD 90 0C               CALL   run   
4445   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4459   76                     HALT      
445A   00                     .CSTR      
445B                EXPECTM_0_2817S50:      
445B   E1                     POP   HL   
445C                             ; 
445C   CD CB 0B               CALL   printStr   
445F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4465   76                     HALT      
4466                          ALIGN   2   
4466                             ; printer:
4466                             ;     pop hl
4466                             ;     call prtdec
4466                             ;     jp (ix)
4466                             ; executes a null teminated string (null executes exit_)
4466                             ; the string should be immedaitely following the call
4466                EXECSTR:      ; create a root stack frame
4466   C1                     POP   bc   ; bc = code*
4467   0B                     DEC   bc   ; dec to prepare for next routine
4468   11 00 00               LD   de,0   
446B   D5                     PUSH   de   ; push fake IP
446C   D5                     PUSH   de   ; push null arg_list*
446D   D5                     PUSH   de   ; push null first_arg*
446E   D5                     PUSH   de   ; push fake BP
446F   DD E9                  JP   (ix)   
4471                          ALIGN   $100   
4500                             ; .org RAMSTART
4500                          DS   DSIZE   
4580                STACK:       
4580                          ALIGN   $100   
4600                VARS:        
4600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
46D0                RESTARTS:      
46D0                RST08:    DS   2   
46D2                RST10:    DS   2   
46D4                RST18:    DS   2   
46D6                RST20:    DS   2   
46D8                RST28:    DS   2   
46DA                RST30:    DS   2   ; 
46DC                BAUD:     DS   2   ; 
46DE                INTVEC:   DS   2   ; 
46E0                NMIVEC:   DS   2   ; 
46E2                GETCVEC:   DS   2   ; 
46E4                PUTCVEC:   DS   2   ; 
46E6                SYSVARS:      
46E6                             ; initialised sys variables (preserved)
46E6                VDATAWIDTH:   DS   2   ; 
46E8                VTIBPTR:   DS   2   ; 
46EA                VBUFPTR:   DS   2   ; 
46EC                VNEXT:    DS   2   ; 
46EE                VHEAPPTR:   DS   2   ; 
46F0                             ; uninitialised sys variables (preserved)
46F0                VPOINTER:   DS   2   ; 
46F2                VREMAIN:   DS   2   ; 
46F4                VSAVEDIP:   DS   2   ; 
46F6                VSAVEDSP:   DS   2   ; 
46F8                VSAVEDBP:   DS   2   ; 
46FA                VCHECKSUM:   DS   2   ; 
46FC                             ; uninitialised sys variables (unpreserved)
46FC                VTEMP1:   DS   2   ; 
46FE                VTEMP2:   DS   2   ; 
4700                VLASTDEF:   DS   2   ; 
4702                VHASHSTR:   DS   2   ; 
4704                TBPTR:    DS   2   ; reserved for tests
4706                          ALIGN   $100   
4800                TIB:      DS   TIBSIZE   
4900                BUF:      DS   BUFSIZE   
4A00                          ALIGN   $100   
4A00                PAD:      DS   $100   
4B00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 59 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B1D DEFINED AT LINE 1741 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 32 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 64 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 114 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 217 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 219 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 221 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 223 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 225 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 227 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 229 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 231 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 233 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 235 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 237 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 239 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 241 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 243 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 245 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 247 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 249 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 251 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 253 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 255 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 257 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 262 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 264 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 266 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 268 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 270 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 272 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 274 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 287 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 295 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 297 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 309 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 311 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 313 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADD:                038A DEFINED AT LINE 320 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
AT:                 039C DEFINED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 345 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 351 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 365 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 395 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 439 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 454 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 513 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 534 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 550 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 568 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 715 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 739 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
DOTHEX:             05E9 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DOTHEX_BLOCK:       05F2 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DOTSTR:             05FD DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
DOTSTR_BLOCK:       0606 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
DOTCHAR:            0611 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DOTCHAR_BLOCK:      061A DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
DOTDEC:             0625 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DOTDEC_BLOCK:       062E DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
DIVIDE:             0639 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DIVIDE1:            063E DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
DIVIDE2:            064B DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DIVIDE3:            064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
EQUALS:             0652 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
LESSTHANEQ:         065A DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN:           065F DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
LESSTHAN1:          0664 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
TRUE1:              0667 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
NULL1:              066D DEFINED AT LINE 864 IN MAIN.asm
FALSE1:             066D DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
LPAREN:             0673 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
CARET:              0676 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
GO:                 0676 DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
GO1:                0677 DEFINED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
GO2:                067D DEFINED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOBLOCK:            0689 DEFINED AT LINE 892 IN MAIN.asm
GOBLOCK1:           0689 DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
GOBLOCK2:           06AE DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
GOFUNC:             06BC DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
GOFUNC1:            06D5 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC2:            06DB DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOFUNC3:            06E6 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOFUNC4:            06FE DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
GOFUNC5:            0702 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
GOFUNC6:            0705 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
GOFUNC7:            0708 DEFINED AT LINE 979 IN MAIN.asm
GOFUNC8:            070D DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HASH:               0718 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
HEXNUM:             0718 DEFINED AT LINE 995 IN MAIN.asm
HEXNUM1:            071B DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
HEXNUM2:            0723 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
UPCASE:             0735 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LOWCASE:            073A DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IDENT1:             073F DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
QUESTION:           074C DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
IF:                 074C DEFINED AT LINE 1037 IN MAIN.asm
IFTE:               0758 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
IFTE1:              0759 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
STAR:               0765 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
MUL:                0765 DEFINED AT LINE 1060 IN MAIN.asm
MUL2:               0767 DEFINED AT LINE 1063 IN MAIN.asm
MUL3:               076F DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
NUM:                0781 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NUM0:               078A DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
NUM1:               078B DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
NUM2:               07A3 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
NUM3:               07AE DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
UNDERSCORE:         07B1 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
REMAIN:             07B1 DEFINED AT LINE 1120 IN MAIN.asm
RPAREN:             07B7 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
SEMICOLON:          07BF DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT:          07DB DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
SHIFTLEFT1:         07E3 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTLEFT2:         07E4 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
SHIFTRIGHT:         07EB DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SHIFTRIGHT1:        07F3 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
SHIFTRIGHT2:        07F7 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
DBLQUOTE:           07FE DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
STRING:             07FE DEFINED AT LINE 1192 IN MAIN.asm
STRING1:            0807 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
STRING2:            080A DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRING3:            0813 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
MINUS:              0826 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
SUB:                0832 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
SUB1:               083C DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
COMMAND:            0845 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
ERROR1:             088A DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
COMMENT:            0891 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
COMMAND_A:          089A DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
ABSOLUTE:           08A9 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
ADDROF:             08B6 DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ADDROF1:            08CA DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
ADDROF2:            08D5 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
COMMAND_B:          08D7 DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERCHAR:         08FA DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERDEC:          0909 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC0:         0921 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
BUFFERDEC1:         0931 DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERDEC2:         0951 DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
BUFFERDEC3:         0953 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
BUFFERDEC4:         0963 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
BUFFERDEC5:         0964 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERHEX:          096A DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
BUFFERHEX1:         0985 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
BUFFERHEX2:         098E DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
BREAK:              0999 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BREAK1:             09A0 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
BUFFERSTRING:       09B3 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BUFFERSTRING0:      09BA DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
BUFFERSTRING1:      09BD DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
BUFFERXSPACES:      09CF DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERXSPACES1:     09D6 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
BUFFERXSPACES2:     09DA DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
COMMAND_P:          09E3 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
PARTIAL:            09FC DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS:         0A1C DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PRINTCHARS1:        0A22 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
PRINTCHARS2:        0A24 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
PRINTSTACK:         0A2E DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
PRINTSTACK1:        0A49 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
PRINTSTACK2:        0A58 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
PRINTX:             0A65 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
PRINTX_BLOCK:       0A6E DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
COMMAND_V:          0A90 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
CONSTBUFSTART:      0AB3 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
CONSTHEAPSTART:     0AB8 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
CONSTTIBSTART:      0ABD DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
VARBUFPTR:          0AC2 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
VARHEAPPTR:         0ACB DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
VARTIBPTR:          0AD4 DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
VARIABLE:           0ADD DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
CONSTANT:           0AE0 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
COMMAND_I:          0AE3 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
CHARS:              0AF2 DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
CHARS1:             0AF5 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
INPUT:              0AFA DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
KEY:                0B05 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
OUTPUT:             0B0E DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
NUMBERS:            0B17 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
FILTER:             0B1D DEFINED AT LINE 1739 IN MAIN.asm
MAP:                0B1D DEFINED AT LINE 1740 IN MAIN.asm
ZPRT:               0B1F DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
ZPRT_ARGS:          0B2A DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
ZPRT_BLOCK:         0B2C DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
ARGS0A1L_:          0B53 DEFINED AT LINE 1759 IN MAIN.asm
ARGS0A1L:           0B55 DEFINED AT LINE 1762 IN MAIN.asm
ARGS1A0L_:          0B56 DEFINED AT LINE 1765 IN MAIN.asm
ARGS1A0L:           0B58 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
ARGS1A1L_:          0B59 DEFINED AT LINE 1771 IN MAIN.asm
ARGS1A1L:           0B5B DEFINED AT LINE 1774 IN MAIN.asm
ARGS2A0L_:          0B5D DEFINED AT LINE 1777 IN MAIN.asm
ARGS2A0L:           0B5F DEFINED AT LINE 1780 IN MAIN.asm
PRTHEX:             0B61 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
PRTHEX2:            0B6C DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
PRTHEX3:            0B75 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
PRTSTR0:            0B80 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
PRTSTR:             0B84 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
NESTING:            0B89 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NESTING0:           0B93 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
NESTING1A:          0B9A DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
NESTING1:           0B9D DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
NESTING2:           0BAC DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
NESTING3:           0BAE DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
NESTING4:           0BB9 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PROMPT:             0BBB DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
CRLF:               0BC4 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
PRINTSTR:           0BCB DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 140
INIT:               0BD2 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0BEB DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
START:              0BF0 DEFINED AT LINE 1951 IN MAIN.asm
INTERPRET:          0C06 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
INTERPRET2:         0C12 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
INTERPRET3:         0C1A DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
INTERPRET4:         0C20 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
INTERPRET5:         0C25 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
INTERPRET5A:        0C48 DEFINED AT LINE 2019 IN MAIN.asm
INTERPRET6:         0C4A DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
INTERPRET7:         0C58 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
INTERPRET8:         0C6B DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
NEXT:               0C76 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
NEXT1:              0C85 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
EXIT:               0C8C DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
RUN:                0C90 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C94 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
BACKSPACE_:         0CA7 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
EDIT_:              0CB7 DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
REEDIT_:            0CCF DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
PRINTSTACK_:        0CD2 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2702S50:  0D72 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2707S50:  0DDF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2708S50:  0E4C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2709S50:  0EB7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2710S50:  0F22 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2711S50:  0F8D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2712S50:  0FF8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2713S50:  1065 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2714S50:  10D4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2715S50:  1141 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2716S50:  11AE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2717S50:  121D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2718S50:  128E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2719S50:  12FD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2720S50:  136C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2721S50:  13E1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2722S50:  1456 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2723S50:  14C9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2724S50:  1540 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2725S50:  15BB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2726S50:  1634 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2727S50:  16A7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2728S50:  1722 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2729S50:  1799 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2730S50:  180C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2731S50:  187F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2732S50:  18FA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2733S50:  196D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2734S50:  19E0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2735S50:  1A55 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2736S50:  1ADA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2737S50:  1B4D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2738S50:  1BC8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2739S50:  1C3B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2740S50:  1CB2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2741S50:  1D25 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2742S50:  1D9A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2743S50:  1E0F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2744S50:  1E82 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2745S50:  1EF5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2746S50:  1F68 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2747S50:  1FDB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2748S50:  204E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2749S50:  20C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2750S50:  2134 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2751S50:  21A7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2752S50:  221C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2753S50:  2291 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2754S50:  2306 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2755S50:  237D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2756S50:  23F4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2757S50:  2465 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2758S50:  24D6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2759S50:  254D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2760S50:  25CA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2761S50:  2647 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2762S50:  26C8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2763S50:  2753 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2764S50:  27DE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2765S50:  2851 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2766S50:  28C6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2767S50:  293D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2768S50:  29B6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2769S50:  2A2D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2770S50:  2AA2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2771S50:  2B19 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2772S50:  2B96 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2773S50:  2C17 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2774S50:  2C94 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2775S50:  2D1B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2776S50:  2DA4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2777S50:  2E33 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2778S50:  2EC6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2779S50:  2F4B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2780S50:  2FD6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2781S50:  3063 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2782S50:  30F2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2783S50:  317F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2784S50:  321A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2785S50:  32A3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2786S50:  3338 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2787S50:  33CF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2788S50:  3468 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2789S50:  350D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2790S50:  35B2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2791S50:  3635 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2792S50:  36B8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2793S50:  3747 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2794S50:  37D6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2795S50:  3875 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2796S50:  391C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2797S50:  39C3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2798S50:  3A52 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2799S50:  3AED DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2800S50:  3B84 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2801S50:  3C21 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2802S50:  3CD4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2803S50:  3D53 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2804S50:  3DD2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2805S50:  3E51 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2806S50:  3ED0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2807S50:  3F47 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2808S50:  3FBE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2809S50:  4035 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2810S50:  40AC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2811S50:  4131 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2812S50:  41B8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2813S50:  422F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2814S50:  42B6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2815S50:  4355 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2816S50:  43D0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2817S50:  445B DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            4466 DEFINED AT LINE 152
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4580 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4600 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           46D0 DEFINED AT LINE 11 IN ram.asm
RST08:              46D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              46D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              46D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              46D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              46D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              46DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               46DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             46DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             46E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            46E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            46E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            46E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1939 IN MAIN.asm
VDATAWIDTH:         46E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
VTIBPTR:            46E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
VBUFPTR:            46EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
VNEXT:              46EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1936 IN MAIN.asm
VHEAPPTR:           46EE DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VPOINTER:           46F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
VREMAIN:            46F2 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
VSAVEDIP:           46F4 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           46F6 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           46F8 DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          46FA DEFINED AT LINE 43 IN ram.asm
VTEMP1:             46FC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
VTEMP2:             46FE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VLASTDEF:           4700 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4702 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4704 DEFINED AT LINE 51 IN ram.asm
TIB:                4800 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
BUF:                4900 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
PAD:                4A00 DEFINED AT LINE 58 IN ram.asm
HEAP:               4B00 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
