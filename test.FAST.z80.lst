0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 42               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 42               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 42               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 42               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 42               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 42               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 42               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 42               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 42               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 42               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 41               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 42               LD   (RST08),HL   
0094   22 D2 42               LD   (RST10),HL   
0097   22 D4 42               LD   (RST18),HL   
009A   22 D6 42               LD   (RST20),HL   
009D   22 D8 42               LD   (RST28),HL   
00A0   22 DA 42               LD   (RST30),HL   
00A3   22 DE 42               LD   (INTVEC),HL   
00A6   22 E0 42               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 42               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 42               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 41               LD   SP,STACK   
00C6   CD C6 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 44                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 45                  DW   BUF   ; vBUFPtr pointer into BUF
0186   6A 0C                  DW   next   ; nNext
0188   00 47                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 B1 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 A3 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 27 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 2C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 3E 07               JP   question   
0336                STAR_:       
0336   C3 57 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 73 07               JP   num   
0341                HASH_:       
0341   C3 0A 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 68 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 F0 07               JP   dblquote   
0350                MINUS_:      
0350   C3 18 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 44 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA DD 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 65 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA CD 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 4C 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 51 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 A9 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 42            LD   de,(vPointer)   
03A0   21 F0 42               LD   hl,vPointer   
03A3   C3 AE 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 42               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 42            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 42               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 42               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EE 42            LD   de,(vHeapPtr)   ; de = array[-2]
045F   22 EE 42               LD   (vHeapPtr),hl   ; move heap* to end of array
0462   ED 4B FC 42            LD   bc,(vTemp1)   ; restore IP
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 42               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 F0 42               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A F0 42               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 42               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EE 42               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EE 42               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 47               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FC 42            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EE 42            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EE 42            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FC 42            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FC 42            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FE 42            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FE 42            LD   bc,(vTemp2)   
058A   FD 2A FC 42            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA F5 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 37 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD 2B 06               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F2 42            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   E1                     POP   hl   
05D7   FE 68                  CP   "h"   
05D9   20 05                  JR   nz,dot1   
05DB   CD 55 0B               CALL   prthex   
05DE   18 16                  JR   dot5   
05E0                DOT1:        
05E0   FE 73                  CP   "s"   
05E2   20 05                  JR   nz,dot2   
05E4   CD 78 0B               CALL   prtstr   
05E7   18 0D                  JR   dot5   
05E9                DOT2:        
05E9   FE 63                  CP   "c"   
05EB   20 04                  JR   nz,dot3   
05ED                             ; ld a,l
05ED                             ; call putchar
05ED                             ; jr dot5
05ED   E5                     PUSH   hl   
05EE   C3 FD 05               JP   dotChar   
05F1                DOT3:        
05F1   0B                     DEC   bc   
05F2   E5                     PUSH   hl   
05F3   C3 14 06               JP   dotDec   
05F6                DOT5:        
05F6   3E 20                  LD   a," "   
05F8   CD 85 00               CALL   putchar   
05FB   DD E9                  JP   (ix)   
05FD                DOTCHAR:      
05FD   CD 68 06               CALL   go   
0600   00 00                  DW   NUL   ; closure
0602   09 06                  DW   dotChar_block   
0604   08 06                  DW   dotChar_args   
0606   01                     DB   1   ; num args + locals
0607   00                     DB   0   ; num locals
0608                DOTCHAR_ARGS:      
0608   63                     DB   "c"   
0609                DOTCHAR_BLOCK:      
0609   7B 24 63 2F 62 63 2F 70 78 7D 00 .CSTR   "{$c/bc/px}"   ; block
0614                DOTDEC:      
0614   CD 68 06               CALL   go   
0617   00 00                  DW   NUL   ; closure
0619   20 06                  DW   dotDec_block   
061B   1F 06                  DW   dotDec_args   
061D   01                     DB   1   ; num args + locals
061E   00                     DB   0   ; num locals
061F                DOTDEC_ARGS:      
061F   6E                     DB   "n"   
0620                DOTDEC_BLOCK:      
0620   7B 24 6E 2F 62 64 2F 70 78 7D 00 .CSTR   "{$n/bd/px}"   ; block
062B                             ; division subroutine.
062B                             ; bc: divisor, de: dividend, hl: remainder
062B                DIVIDE:      
062B   21 00 00               LD   hl,0   ; zero the remainder
062E   3E 10                  LD   a,16   ; loop counter
0630                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0630   CB 21                  SLA   c   
0632   CB 10                  RL   b   
0634   ED 6A                  ADC   hl,hl   
0636   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0638   38 03                  JR   c,divide2   
063A   0C                     INC   c   
063B   18 01                  JR   divide3   
063D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
063D   19                     ADD   hl,de   
063E                DIVIDE3:      
063E   3D                     DEC   a   
063F   20 EF                  JR   nz,divide1   
0641   50 59                  LD   de,bc   ; result from bc to de
0643   C9                     RET      
0644                             ; hl = value1, de = value2
0644                             ; hl = result
0644                EQUALS:      
0644   B7                     OR   a   ; reset the carry flag
0645   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0647   28 10                  JR   z,true1   
0649   C3 5F 06               JP   false1   
064C                             ; hl = value1 de = value2
064C                             ; hl = result
064C                LESSTHANEQ:      
064C   B7                     OR   a   
064D   ED 52                  SBC   hl,de   
064F   18 05                  JR   lessthan1   
0651                             ; hl = value1 de = value2
0651                             ; hl = result
0651                LESSTHAN:      
0651   B7                     OR   a   
0652   ED 52                  SBC   hl,de   
0654   28 09                  JR   z,false1   
0656                LESSTHAN1:      
0656   FA 5F 06               JP   m,false1   
0659                TRUE1:       
0659   21 FF FF               LD   hl,TRUE   
065C   E5                     PUSH   hl   
065D   DD E9                  JP   (ix)   
065F                NULL1:       
065F                FALSE1:      
065F   21 00 00               LD   hl,FALSE   
0662   E5                     PUSH   hl   
0663   DD E9                  JP   (ix)   
0665                LPAREN:      
0665   C3 CB 04               JP   block   
0668                             ; execute a block of code which ends with }
0668                             ; creates a root scope if BP == stack
0668                             ; else uses outer scope
0668                CARET:       
0668                GO:          
0668   D1                     POP   de   ; de = block*
0669                GO1:         
0669   7B                     LD   a,e   ; if block* == null, exit
066A   B2                     OR   d   
066B   20 02                  JR   nz,go2   
066D   DD E9                  JP   (ix)   
066F                GO2:         
066F   1A                     LD   a,(de)   
0670   FE 7B                  CP   "{"   
0672   28 07                  JR   z,goBlock1   
0674   FE 28                  CP   "("   
0676   C2 AE 06               JP   nz,goFunc   
0679   13                     INC   de   ; de is the address to jump back to
067A   D5                     PUSH   de   ; push de just before stack frame
067B                GOBLOCK:      
067B                GOBLOCK1:      
067B   ED 53 FC 42            LD   (vTemp1),de   ; save de
067F   21 80 41               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0682   FD 54                  LD   d,iyh   
0684   FD 5D                  LD   e,iyl   
0686   B7                     OR   a   ; if stack* == BP then this is the root_scope
0687   ED 52                  SBC   hl,de   
0689   ED 5B FC 42            LD   de,(vTemp1)   ; restore de
068D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
068E   B4                     OR   h   
068F   3E 00                  LD   a,0   
0691   28 6C                  JR   z,goFunc8   
0693   C5                     PUSH   bc   ; push IP
0694   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0697   FD 46 05               LD   b,(iy+5)   
069A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
069D   FD 66 03               LD   h,(iy+3)   
06A0                GOBLOCK2:      
06A0   C5                     PUSH   bc   ; arg_list*
06A1   E5                     PUSH   hl   ; first_arg*
06A2   FD E5                  PUSH   iy   ; push BP
06A4   FD 21 00 00            LD   iy,0   ; BP = SP
06A8   FD 39                  ADD   iy,sp   
06AA   42 4B                  LD   bc,de   ; bc = de = block*-1
06AC   DD E9                  JP   (ix)   
06AE                GOFUNC:      ; execute function
06AE   EB                     EX   de,hl   ; hl = func*
06AF   5E                     LD   e,(hl)   ; de = partial_array*
06B0   23                     INC   hl   
06B1   56                     LD   d,(hl)   
06B2   23                     INC   hl   
06B3   7B                     LD   a,e   ; if partial_array* == null skip
06B4   B2                     OR   d   
06B5   28 21                  JR   z,goFunc3   
06B7   ED 43 FC 42            LD   (vTemp1),bc   
06BB   22 FE 42               LD   (vTemp2),hl   ; save bc,hl
06BE   EB                     EX   de,hl   ; hl = partial_array*
06BF   2B                     DEC   hl   ; bc = count
06C0   46                     LD   b,(hl)   
06C1   2B                     DEC   hl   
06C2   4E                     LD   c,(hl)   
06C3   23                     INC   hl   ; push each item on stack
06C4   23                     INC   hl   
06C5   18 06                  JR   goFunc2   
06C7                GOFUNC1:      
06C7   5E                     LD   e,(hl)   ; de = partial item
06C8   23                     INC   hl   
06C9   56                     LD   d,(hl)   
06CA   23                     INC   hl   
06CB   D5                     PUSH   de   ; push on stack
06CC   0B                     DEC   bc   
06CD                GOFUNC2:      
06CD   79                     LD   a,c   ; if count != 0 then loop
06CE   B0                     OR   b   
06CF   20 F6                  JR   nz,goFunc1   
06D1   ED 4B FC 42            LD   bc,(vTemp1)   ; restore bc
06D5   2A FE 42               LD   hl,(vTemp2)   ; restore hl
06D8                GOFUNC3:      
06D8   5E                     LD   e,(hl)   ; de = block*
06D9   23                     INC   hl   
06DA   56                     LD   d,(hl)   
06DB   23                     INC   hl   
06DC   ED 53 FC 42            LD   (vTemp1),de   ; save block*
06E0   5E                     LD   e,(hl)   ; de = arg_list*
06E1   23                     INC   hl   
06E2   56                     LD   d,(hl)   
06E3   23                     INC   hl   
06E4   EB                     EX   de,hl   ; hl = arg_list*
06E5   ED 5B FC 42            LD   de,(vTemp1)   ; restore de = block*
06E9   7D                     LD   a,l   ; if arg_list* == null a = 0
06EA   B4                     OR   h   
06EB   20 03                  JR   nz,goFunc4   
06ED   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06EE   18 0F                  JR   goFunc8   
06F0                GOFUNC4:      ; allocate locals
06F0   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06F1   7E                     LD   a,(hl)   
06F2   18 03                  JR   goFunc6   
06F4                GOFUNC5:      ; loop
06F4   3B                     DEC   sp   
06F5   3B                     DEC   sp   
06F6   3D                     DEC   a   
06F7                GOFUNC6:      
06F7   B7                     OR   a   
06F8   20 FA                  JR   nz,goFunc5   ; end loop
06FA                GOFUNC7:      
06FA   2B                     DEC   hl   ; a = num_args* x 2
06FB   7E                     LD   a,(hl)   
06FC   23                     INC   hl   
06FD   23                     INC   hl   
06FE   87                     ADD   a,a   ; a *= 2
06FF                GOFUNC8:      
06FF   C5                     PUSH   bc   ; push IP
0700   44 4D                  LD   bc,hl   
0702   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0705   85                     ADD   a,l   
0706   6F                     LD   l,a   
0707   39                     ADD   hl,sp   
0708   18 96                  JR   goBlock2   
070A                HASH:        
070A                HEXNUM:      
070A   21 00 00               LD   hl,0   ; Clear hl to accept the number
070D                HEXNUM1:      
070D   03                     INC   bc   
070E   0A                     LD   a,(bc)   ; Get the character which is a numeral
070F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0711   28 02                  JR   z,hexnum2   ; no a decimal
0713   D6 07                  SUB   7   ; sub 7  to make $a - $F
0715                HEXNUM2:      
0715   D6 30                  SUB   $30   ; form decimal digit
0717   DA 95 07               JP   c,num2   
071A   FE 10                  CP   $0F+1   
071C   D2 95 07               JP   nc,num2   
071F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0720   29                     ADD   hl,hl   ; 4X
0721   29                     ADD   hl,hl   ; 8X
0722   29                     ADD   hl,hl   ; 16X
0723   85                     ADD   a,l   ; add into bottom of hl
0724   6F                     LD   l,a   
0725   18 E6                  JR   hexnum1   
0727                UPCASE:      
0727   0A                     LD   a,(bc)   ; a = identifier char
0728   D6 41                  SUB   "A"   ; "A" = 0
072A   18 05                  JR   ident1   
072C                LOWCASE:      
072C   0A                     LD   a,(bc)   
072D   D6 61                  SUB   "a"   
072F   C6 1A                  ADD   a,26   
0731                IDENT1:      
0731   87                     ADD   a,a   ; l = a * 2
0732   6F                     LD   l,a   
0733   26 42                  LD   h,msb(vars)   
0735   22 F0 42               LD   (vPointer),hl   ; store address in setter
0738   5E                     LD   e,(hl)   
0739   23                     INC   hl   
073A   56                     LD   d,(hl)   
073B   D5                     PUSH   de   
073C   DD E9                  JP   (ix)   
073E                             ; if
073E                             ; condition then -- value
073E                QUESTION:      
073E                IF:          
073E   03                     INC   bc   
073F   0A                     LD   a,(bc)   
0740   FE 3F                  CP   "?"   
0742   28 06                  JR   z,ifte   
0744   0B                     DEC   bc   
0745   11 00 00               LD   de,NUL   ; NUL pointer for else
0748   18 01                  JR   ifte1   
074A                             ; ifte
074A                             ; condition then else -- value
074A                IFTE:        
074A   D1                     POP   de   ; de = else
074B                IFTE1:       
074B   E1                     POP   hl   ; hl = then
074C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
074D   7C                     LD   a,h   
074E   B5                     OR   l   
074F   E1                     POP   hl   ; hl = then
0750   CA 69 06               JP   z,go1   ; if z de = else
0753   EB                     EX   de,hl   ; condition = false, de = then
0754   C3 69 06               JP   go1   
0757                STAR:        
0757                MUL:         
0757   D1                     POP   de   ; get first value
0758   E1                     POP   hl   
0759                MUL2:        
0759   C5                     PUSH   bc   ; Preserve the IP
075A   44 4D                  LD   bc,hl   ; bc = 2nd value
075C   21 00 00               LD   hl,0   
075F   3E 10                  LD   a,16   
0761                MUL3:        
0761   29                     ADD   hl,hl   
0762   CB 13                  RL   e   
0764   CB 12                  RL   d   
0766   30 04                  JR   nc,$+6   
0768   09                     ADD   hl,bc   
0769   30 01                  JR   nc,$+3   
076B   13                     INC   de   
076C   3D                     DEC   a   
076D   20 F2                  JR   nz,mul3   
076F   C1                     POP   bc   ; Restore the IP
0770   C3 99 03               JP   add3   
0773                NUM:         
0773   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0776   0A                     LD   a,(bc)   ; Get numeral or -
0777   FE 2D                  CP   "-"   
0779   20 01                  JR   nz,num0   
077B   03                     INC   bc   ; move to next char, no flags affected
077C                NUM0:        
077C   08                     EX   af,af'   ; save zero flag = 0 for later
077D                NUM1:        
077D   0A                     LD   a,(bc)   ; read digit
077E   D6 30                  SUB   "0"   ; less than 0?
0780   38 13                  JR   c,num2   ; not a digit, exit loop
0782   FE 0A                  CP   10   ; greater that 9?
0784   30 0F                  JR   nc,num2   ; not a digit, exit loop
0786   03                     INC   bc   ; inc IP
0787   54 5D                  LD   de,hl   ; multiply hl * 10
0789   29                     ADD   hl,hl   
078A   29                     ADD   hl,hl   
078B   19                     ADD   hl,de   
078C   29                     ADD   hl,hl   
078D   85                     ADD   a,l   ; add digit in a to hl
078E   6F                     LD   l,a   
078F   3E 00                  LD   a,0   
0791   8C                     ADC   a,h   
0792   67                     LD   h,a   
0793   18 E8                  JR   num1   
0795                NUM2:        
0795   0B                     DEC   bc   
0796   08                     EX   af,af'   ; restore zero flag
0797   20 07                  JR   nz,num3   
0799   EB                     EX   de,hl   ; negate the value of hl
079A   21 00 00               LD   hl,0   
079D   B7                     OR   a   ; jump to sub2
079E   ED 52                  SBC   hl,de   
07A0                NUM3:        
07A0   E5                     PUSH   hl   ; Put the number on the stack
07A1   DD E9                  JP   (ix)   ; and process the next character
07A3                UNDERSCORE:      
07A3                REMAIN:      
07A3   2A F2 42               LD   hl,(vRemain)   
07A6   E5                     PUSH   hl   
07A7   DD E9                  JP   (ix)   
07A9                RPAREN:      
07A9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07AC   FD 46 09               LD   b,(iy+9)   
07AF   DD E9                  JP   (ix)   
07B1                             ; arg_list* block* -- ptr
07B1                SEMICOLON:      
07B1   D1                     POP   de   ; de = block* hl = heap*
07B2   2A EE 42               LD   hl,(vHeapPtr)   
07B5   AF                     XOR   a   
07B6   77                     LD   (hl),a   ; compile null partial_array*
07B7   23                     INC   hl   
07B8   77                     LD   (hl),a   
07B9   23                     INC   hl   
07BA   73                     LD   (hl),e   ; compile block*
07BB   23                     INC   hl   
07BC   72                     LD   (hl),d   
07BD   23                     INC   hl   
07BE   D1                     POP   de   ; de = block*
07BF   73                     LD   (hl),e   ; compile arg_list*
07C0   23                     INC   hl   
07C1   72                     LD   (hl),d   
07C2   23                     INC   hl   
07C3   ED 5B EE 42            LD   de,(vHeapPtr)   ; return func*
07C7   D5                     PUSH   de   
07C8   22 EE 42               LD   (vHeapPtr),hl   ; heap* += 4
07CB   DD E9                  JP   (ix)   
07CD                             ; shiftLeft
07CD                             ; value count -- value2          shift left count places
07CD                SHIFTLEFT:      
07CD   50 59                  LD   de,bc   ; save IP
07CF   C1                     POP   bc   ; bc = count
07D0   41                     LD   b,c   ; b = loop counter
07D1   E1                     POP   hl   
07D2   04                     INC   b   ; test for counter=0 case
07D3   18 01                  JR   shiftLeft2   
07D5                SHIFTLEFT1:      
07D5   29                     ADD   hl,hl   ; left shift hl
07D6                SHIFTLEFT2:      
07D6   10 FD                  DJNZ   shiftLeft1   
07D8   E5                     PUSH   hl   
07D9   42 4B                  LD   bc,de   ; restore IP
07DB   DD E9                  JP   (ix)   
07DD                             ; shiftRight
07DD                             ; value count -- value2          shift left count places
07DD                SHIFTRIGHT:      
07DD   50 59                  LD   de,bc   ; save IP
07DF   C1                     POP   bc   ; bc = count
07E0   41                     LD   b,c   ; b = loop counter
07E1   E1                     POP   hl   
07E2   04                     INC   b   ; test for counter=0 case
07E3   18 04                  JR   shiftRight2   
07E5                SHIFTRIGHT1:      
07E5   CB 3C                  SRL   h   ; right shift hl
07E7   CB 1D                  RR   l   
07E9                SHIFTRIGHT2:      
07E9   10 FA                  DJNZ   shiftRight1   
07EB   E5                     PUSH   hl   
07EC   42 4B                  LD   bc,de   ; restore IP
07EE   DD E9                  JP   (ix)   
07F0                             ; string
07F0                             ; -- ptr                        ; points to start of string chars,
07F0                             ; length is stored at start - 2 bytes
07F0                DBLQUOTE:      
07F0                STRING:      
07F0   2A EE 42               LD   hl,(vHeapPtr)   ; hl = heap*
07F3   23                     INC   hl   ; skip length field to start
07F4   23                     INC   hl   
07F5   E5                     PUSH   hl   ; save start of string
07F6   03                     INC   bc   ; point to next char
07F7   18 03                  JR   string2   
07F9                STRING1:      
07F9   77                     LD   (hl),a   
07FA   23                     INC   hl   ; increase count
07FB   03                     INC   bc   ; point to next char
07FC                STRING2:      
07FC   0A                     LD   a,(bc)   
07FD   FE 22                  CP   DQUOTE   ; " is the string terminator
07FF   28 04                  JR   z,string3   
0801   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0803   20 F4                  JR   nz,string1   
0805                STRING3:      
0805   AF                     XOR   a   ; write NUL to terminate string
0806   77                     LD   (hl),a   ; hl = end of string
0807   23                     INC   hl   
0808   22 EE 42               LD   (vHeapPtr),hl   ; bump heap* to after end of string
080B   2B                     DEC   hl   ; hl = end of string without terminator
080C   D1                     POP   de   ; de = start of string
080D   D5                     PUSH   de   ; return start of string
080E   B7                     OR   a   ; hl = length bytes, de = start of string
080F   ED 52                  SBC   hl,de   
0811   EB                     EX   de,hl   
0812   2B                     DEC   hl   ; write length bytes to length field at start - 2
0813   72                     LD   (hl),d   
0814   2B                     DEC   hl   
0815   73                     LD   (hl),e   
0816   DD E9                  JP   (ix)   
0818                MINUS:       ; negative sign or subtract
0818   03                     INC   bc   ; check if sign of a number
0819   0A                     LD   a,(bc)   
081A   0B                     DEC   bc   
081B   FE 30                  CP   "0"   
081D   38 05                  JR   c,sub   
081F   FE 3A                  CP   "9"+1   
0821   DA 3E 03               JP   c,num_   
0824                SUB:         ; Subtract the value 2nd on stack from top of stack
0824   03                     INC   bc   
0825   FE 2D                  CP   "-"   
0827   20 05                  JR   nz,sub1   
0829   E1                     POP   hl   
082A   2B                     DEC   hl   
082B   C3 85 04               JP   assign0   
082E                SUB1:        
082E   0B                     DEC   bc   
082F   D1                     POP   de   
0830   E1                     POP   hl   
0831   B7                     OR   a   
0832   ED 52                  SBC   hl,de   
0834   C3 99 03               JP   add3   
0837                             ;*******************************************************************
0837                             ; commands
0837                             ; a contains command letter
0837                             ; bc points to command letter
0837                             ;*******************************************************************
0837                COMMAND:      
0837   FE 2F                  CP   "/"   ; // comment
0839   CA F5 08               JP   z,comment   
083C   FE 61                  CP   "a"   ; /ab absolute /ad address of
083E   28 42                  JR   z,command_a   
0840   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0842                             ; /bd buf decimal /bp buf params
0842                             ; /bs buf string /br break
0842   CA 90 08               JP   z,command_b   
0845   FE 63                  CP   "c"   ; /c chars
0847   CA 7C 0A               JP   z,chars   
084A   FE 66                  CP   "f"   ; /f false
084C   CA 5F 06               JP   z,false1   
084F   FE 69                  CP   "i"   ; /in input iv invert
0851   CA AD 08               JP   z,command_i   
0854   FE 6B                  CP   "k"   ; /k key
0856   CA BF 0A               JP   z,key   
0859   FE 6E                  CP   "n"   ; /n numbers
085B   CA D1 0A               JP   z,numbers   
085E   FE 6F                  CP   "o"   ; /o output
0860   CA C8 0A               JP   z,output   
0863   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0865   CA BB 08               JP   z,command_p   
0868   FE 74                  CP   "t"   ; /t true
086A   CA 59 06               JP   z,true1   
086D   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
086F   CA D3 08               JP   z,command_v   
0872   FE 78                  CP   "x"   ; /x xor
0874   CA BA 03               JP   z,xor   
0877   FE 7A                  CP   "z"   ; /z
0879   CA D9 0A               JP   z,zprt   
087C                ERROR1:      
087C   21 01 00               LD   hl,1   ; error 1: unknown command
087F   C3 88 0C               JP   error   
0882                COMMAND_A:      
0882   03                     INC   bc   
0883   0A                     LD   a,(bc)   
0884   FE 62                  CP   "b"   
0886   CA FE 08               JP   z,absolute   
0889   FE 64                  CP   "d"   
088B   CA 0B 09               JP   z,addrOf   
088E   18 EC                  JR   error1   
0890                COMMAND_B:      
0890   03                     INC   bc   
0891   0A                     LD   a,(bc)   
0892   FE 63                  CP   "c"   ; /bc buffer char
0894   CA 2C 09               JP   z,bufferChar   
0897   FE 64                  CP   "d"   ; /bd buffer decimal
0899   CA 57 09               JP   z,bufferDec   
089C   FE 72                  CP   "r"   ; /br break
089E   CA B8 09               JP   z,break   
08A1   FE 73                  CP   "s"   ; /bs buffer string
08A3   CA 3B 09               JP   z,bufferString   
08A6   FE 78                  CP   "x"   ; /bx buffer x spaces
08A8   CA D2 09               JP   z,bufferXSpaces   
08AB   18 CF                  JR   error1   
08AD                COMMAND_I:      
08AD   03                     INC   bc   
08AE   0A                     LD   a,(bc)   
08AF   FE 6E                  CP   "n"   ; /in input
08B1   CA B4 0A               JP   z,input   
08B4   FE 76                  CP   "v"   ; /iv invert
08B6   CA C5 03               JP   z,invert   
08B9   18 C1                  JR   error1   
08BB                COMMAND_P:      
08BB   03                     INC   bc   
08BC   0A                     LD   a,(bc)   
08BD   FE 61                  CP   "a"   
08BF   CA E6 09               JP   z,partial   
08C2   FE 63                  CP   "c"   
08C4   CA 06 0A               JP   z,printChars   
08C7   FE 6B                  CP   "k"   
08C9   CA 17 0A               JP   z,printStack   
08CC   FE 78                  CP   "x"   
08CE   CA 4E 0A               JP   z,printX   
08D1   18 A9                  JR   error1   
08D3                COMMAND_V:      
08D3   03                     INC   bc   
08D4   0A                     LD   a,(bc)   
08D5   FE 62                  CP   "b"   
08D7   CA 93 0A               JP   z,varBufPtr   
08DA   FE 68                  CP   "h"   
08DC   CA 9C 0A               JP   z,varHeapPtr   
08DF   FE 74                  CP   "t"   
08E1   CA A5 0A               JP   z,varTIBPtr   
08E4   FE 42                  CP   "B"   
08E6   CA 84 0A               JP   z,constBufStart   
08E9   FE 48                  CP   "H"   
08EB   CA 89 0A               JP   z,constHeapStart   
08EE   FE 54                  CP   "T"   
08F0   CA 8E 0A               JP   z,constTIBStart   
08F3   18 87                  JR   error1   
08F5                COMMENT:      
08F5   03                     INC   bc   ; point to next char
08F6   0A                     LD   a,(bc)   
08F7   FE 20                  CP   " "   ; terminate on any char less than SP
08F9   30 FA                  JR   nc,comment   
08FB   0B                     DEC   bc   
08FC   DD E9                  JP   (ix)   
08FE                             ; /ab absolute
08FE                             ; num -- num
08FE                ABSOLUTE:      
08FE   E1                     POP   hl   
08FF   CB 7C                  BIT   7,h   
0901   C8                     RET   z   
0902   AF                     XOR   a   
0903   95                     SUB   l   
0904   6F                     LD   l,a   
0905   9F                     SBC   a,a   
0906   94                     SUB   h   
0907   67                     LD   h,a   
0908   E5                     PUSH   hl   
0909   DD E9                  JP   (ix)   
090B                             ; /ad addrOf
090B                             ; char -- addr
090B                ADDROF:      
090B   E1                     POP   hl   ; a = char
090C   7D                     LD   a,l   
090D   FE 7B                  CP   "z"+1   ; if a > z then exit
090F   30 19                  JR   nc,addrOf2   
0911   D6 41                  SUB   "A"   ; a - 65
0913   38 15                  JR   c,addrOf2   ; if < A then exit
0915   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0917   38 06                  JR   c,addrOf1   
0919   D6 06                  SUB   "a"-("Z"+1)   
091B   FE 1A                  CP   "Z"-"A"+1   
091D   38 0B                  JR   c,addrOf2   ; if < a then exit
091F                ADDROF1:      
091F   87                     ADD   a,a   ; double a
0920   21 00 42               LD   hl,VARS   ; hl = VARS + a
0923   85                     ADD   a,l   
0924   6F                     LD   l,a   
0925   3E 00                  LD   a,0   
0927   8C                     ADC   a,h   
0928   67                     LD   h,a   
0929   E5                     PUSH   hl   
092A                ADDROF2:      
092A   DD E9                  JP   (ix)   
092C                             ; /bc buffer char
092C                             ; char -- length
092C                BUFFERCHAR:      
092C   D1                     POP   de   ; e = char
092D   2A EA 42               LD   hl,(vBufPtr)   ; hl = buffer*
0930   73                     LD   (hl),e   ; e -> buffer*
0931   23                     INC   hl   ; buffer*++
0932   22 EA 42               LD   (vBufPtr),hl   ; save buffer*' in pointer
0935   11 01 00               LD   de,1   ; return 1 byte
0938   D5                     PUSH   de   
0939   DD E9                  JP   (ix)   
093B                             ; /bs buffered string
093B                             ; string* -- length
093B                BUFFERSTRING:      
093B   E1                     POP   hl   ; hl = string*
093C   ED 5B EA 42            LD   de,(vBufPtr)   ; de = buffer*
0940   18 03                  JR   bufferString1   
0942                BUFFERSTRING0:      
0942   12                     LD   (de),a   ; a -> buffer*
0943   13                     INC   de   ; string*++ buffer++
0944   23                     INC   hl   
0945                BUFFERSTRING1:      
0945   7E                     LD   a,(hl)   ; a <- string*
0946   B7                     OR   a   ; if NUL exit loop
0947   20 F9                  JR   nz,bufferString0   
0949   2A EA 42               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
094C   ED 53 EA 42            LD   (vBufPtr),de   ; save buffer*' in pointer
0950   EB                     EX   de,hl   ; hl = length
0951   B7                     OR   a   
0952   ED 52                  SBC   hl,de   
0954   E5                     PUSH   hl   ; return length
0955   DD E9                  JP   (ix)   
0957                             ; /bd buffer decimal
0957                             ; value -- length               ; length can be used to rewind buffer*
0957                BUFFERDEC:      
0957   ED 5B EA 42            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
095B   D9                     EXX      
095C   E1                     POP   hl   ; hl = value
095D   CD 6F 09               CALL   bufferDec0   
0960   D9                     EXX      ; de = buffer*' bc = IP
0961   2A EA 42               LD   hl,(vBufPtr)   ; hl = buffer*
0964   ED 53 EA 42            LD   (vBufPtr),de   ; update buffer* with buffer*'
0968   EB                     EX   de,hl   ; hl = length
0969   B7                     OR   a   
096A   ED 52                  SBC   hl,de   
096C   E5                     PUSH   hl   ; return length
096D   DD E9                  JP   (ix)   
096F                             ; hl = value
096F                             ; de' = buffer*
096F                             ; a, bc, de, hl destroyed
096F                BUFFERDEC0:      
096F   CB 7C                  BIT   7,h   
0971   28 0C                  JR   z,bufferDec1   
0973   D9                     EXX      
0974   3E 2D                  LD   a,"-"   
0976   12                     LD   (de),a   
0977   13                     INC   de   
0978   D9                     EXX      
0979   AF                     XOR   a   
097A   95                     SUB   l   
097B   6F                     LD   l,a   
097C   9F                     SBC   a,a   
097D   94                     SUB   h   
097E   67                     LD   h,a   
097F                BUFFERDEC1:      
097F   0E 00                  LD   c,0   ; leading zeros flag = false
0981   11 F0 D8               LD   de,-10000   
0984   CD 9F 09               CALL   bufferDec2   
0987   11 18 FC               LD   de,-1000   
098A   CD 9F 09               CALL   bufferDec2   
098D   11 9C FF               LD   de,-100   
0990   CD 9F 09               CALL   bufferDec2   
0993   1E F6                  LD   e,-10   
0995   CD 9F 09               CALL   bufferDec2   
0998   0C                     INC   c   ; flag = true for at least digit
0999   1E FF                  LD   e,-1   
099B   CD 9F 09               CALL   bufferDec2   
099E   C9                     RET      
099F                BUFFERDEC2:      
099F   06 2F                  LD   b,"0"-1   
09A1                BUFFERDEC3:      
09A1   04                     INC   b   
09A2   19                     ADD   hl,de   
09A3   38 FC                  JR   c,bufferDec3   
09A5   ED 52                  SBC   hl,de   
09A7   3E 30                  LD   a,"0"   
09A9   B8                     CP   b   
09AA   20 05                  JR   nz,bufferDec4   
09AC   AF                     XOR   a   
09AD   B1                     OR   c   
09AE   C8                     RET   z   
09AF   18 01                  JR   bufferDec5   
09B1                BUFFERDEC4:      
09B1   0C                     INC   c   
09B2                BUFFERDEC5:      
09B2   78                     LD   a,b   
09B3   D9                     EXX      
09B4   12                     LD   (de),a   
09B5   13                     INC   de   
09B6   D9                     EXX      
09B7   C9                     RET      
09B8                BREAK:       
09B8   E1                     POP   hl   
09B9   7D                     LD   a,l   
09BA   B4                     OR   h   
09BB   28 02                  JR   z,break1   
09BD   DD E9                  JP   (ix)   
09BF                BREAK1:      
09BF   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09C1   FD 54                  LD   d,iyh   
09C3   21 08 00               LD   hl,8   
09C6   19                     ADD   hl,de   
09C7   23                     INC   hl   
09C8   23                     INC   hl   
09C9   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09CC   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09CF   C3 34 05               JP   blockEnd   
09D2                             ; /bx buffered x spaces
09D2                             ; length -- length
09D2                BUFFERXSPACES:      
09D2   D1                     POP   de   ; bc = length
09D3   D5                     PUSH   de   ; return length
09D4   2A EA 42               LD   hl,(vBufPtr)   ; hl = buffer*
09D7   18 04                  JR   bufferXSpaces2   
09D9                BUFFERXSPACES1:      
09D9   36 20                  LD   (hl)," "   
09DB   23                     INC   hl   
09DC   1B                     DEC   de   
09DD                BUFFERXSPACES2:      
09DD   7B                     LD   a,e   
09DE   B2                     OR   d   
09DF   20 F8                  JR   nz,bufferXSpaces1   
09E1   22 EA 42               LD   (vBufPtr),hl   ; save buffer*'
09E4   DD E9                  JP   (ix)   
09E6                             ; partial
09E6                             ; array* func* -- func1*
09E6                PARTIAL:      
09E6   E1                     POP   hl   ; h1 = func*
09E7   ED 5B EE 42            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09EB   ED 43 FC 42            LD   (vTemp1),bc   ; save IP
09EF   01 06 00               LD   bc,6   ; bc = count
09F2   ED B0                  LDIR      ; clone func
09F4   ED 4B FC 42            LD   bc,(vTemp1)   ; restore IP
09F8   2A EE 42               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09FB   ED 53 EE 42            LD   (vHeapPtr),de   ; heap* += 6
09FF   D1                     POP   de   ; de = array*
0A00   E5                     PUSH   hl   ; return partial_array*
0A01   73                     LD   (hl),e   ; compile array*
0A02   23                     INC   hl   
0A03   72                     LD   (hl),d   
0A04   DD E9                  JP   (ix)   
0A06                             ; printChars
0A06                             ; char* len --
0A06                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A06                PRINTCHARS:      
0A06   E1                     POP   hl   
0A07   D1                     POP   de   
0A08   C3 0D 0A               JP   printChars2   
0A0B                PRINTCHARS1:      
0A0B   13                     INC   de   
0A0C   2B                     DEC   hl   
0A0D                PRINTCHARS2:      
0A0D   1A                     LD   a,(de)   
0A0E   CD 85 00               CALL   putchar   
0A11   7D                     LD   a,l   
0A12   B4                     OR   h   
0A13   20 F6                  JR   nz,printChars1   
0A15   DD E9                  JP   (ix)   
0A17                             ; /pk print stack
0A17                             ; --
0A17                PRINTSTACK:      
0A17   ED 43 FC 42            LD   (vTemp1),bc   
0A1B   CD BF 0B               CALL   printStr   
0A1E   3D 3E 20 00            .CSTR   "=> "   
0A22   21 80 41               LD   hl,STACK   
0A25   ED 72                  SBC   hl,sp   
0A27   CB 3C                  SRL   h   
0A29   CB 1D                  RR   l   
0A2B   44 4D                  LD   bc,hl   
0A2D   21 80 41               LD   hl,STACK   
0A30   18 0F                  JR   printStack2   
0A32                PRINTSTACK1:      
0A32   0B                     DEC   bc   
0A33   2B                     DEC   hl   
0A34   56                     LD   d,(hl)   
0A35   2B                     DEC   hl   
0A36   5E                     LD   e,(hl)   
0A37   EB                     EX   de,hl   
0A38   CD 55 0B               CALL   prthex   
0A3B   EB                     EX   de,hl   
0A3C   3E 20                  LD   a," "   
0A3E   CD 85 00               CALL   putchar   
0A41                PRINTSTACK2:      
0A41   79                     LD   a,c   
0A42   B0                     OR   b   
0A43   20 ED                  JR   nz,printStack1   
0A45   CD AF 0B               CALL   prompt   
0A48   ED 4B FC 42            LD   bc,(vTemp1)   
0A4C   DD E9                  JP   (ix)   
0A4E                PRINTX:      
0A4E   CD 68 06               CALL   go   
0A51   00 00                  DW   NUL   ; closure
0A53   5A 0A                  DW   printX_block   
0A55   59 0A                  DW   printX_args   
0A57   01                     DB   1   ; num args + locals
0A58   00                     DB   0   ; num locals
0A59                PRINTX_ARGS:      
0A59   73                     DB   "s"   
0A5A                PRINTX_BLOCK:      
0A5A   7B 24 73 20 31 2F 62 78 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$s 1/bx+$s= /vb$s-/vb= /vb$s/pc}"   ; block
0A7C                CHARS:       
0A7C   21 01 00               LD   hl,1   
0A7F                CHARS1:      
0A7F   22 E6 42               LD   (vDataWidth),hl   
0A82   DD E9                  JP   (ix)   
0A84                CONSTBUFSTART:      
0A84   11 00 45               LD   de,BUF   
0A87   18 28                  JR   constant   
0A89                CONSTHEAPSTART:      
0A89   11 00 47               LD   de,HEAP   
0A8C   18 23                  JR   constant   
0A8E                CONSTTIBSTART:      
0A8E   11 00 44               LD   de,TIB   
0A91   18 1E                  JR   constant   
0A93                VARBUFPTR:      
0A93   ED 5B EA 42            LD   de,(vBufPtr)   
0A97   21 EA 42               LD   hl,vBufPtr   
0A9A   18 12                  JR   variable   
0A9C                VARHEAPPTR:      
0A9C   ED 5B EE 42            LD   de,(vHeapPtr)   
0AA0   21 EE 42               LD   hl,vHeapPtr   
0AA3   18 09                  JR   variable   
0AA5                VARTIBPTR:      
0AA5   ED 5B E8 42            LD   de,(vTIBPtr)   
0AA9   21 E8 42               LD   hl,vTIBPtr   
0AAC   18 00                  JR   variable   
0AAE                VARIABLE:      
0AAE   22 F0 42               LD   (vPointer),hl   
0AB1                CONSTANT:      
0AB1   D5                     PUSH   de   
0AB2   DD E9                  JP   (ix)   
0AB4                             ; Z80 port input
0AB4                             ; port -- value
0AB4                INPUT:       
0AB4   E1                     POP   hl   
0AB5   59                     LD   e,c   ; save IP
0AB6   4D                     LD   c,l   
0AB7   ED 68                  IN   l,(c)   
0AB9   26 00                  LD   h,0   
0ABB   4B                     LD   c,e   ; restore IP
0ABC   E5                     PUSH   hl   
0ABD   DD E9                  JP   (ix)   
0ABF                KEY:         
0ABF   CD 81 00               CALL   getchar   
0AC2   26 00                  LD   h,0   
0AC4   6F                     LD   l,a   
0AC5   E5                     PUSH   hl   
0AC6   DD E9                  JP   (ix)   
0AC8                             ; Z80 port output
0AC8                             ; value port --
0AC8                OUTPUT:      
0AC8   E1                     POP   hl   
0AC9   59                     LD   e,c   ; save IP
0ACA   4D                     LD   c,l   
0ACB   E1                     POP   hl   
0ACC   ED 69                  OUT   (c),l   
0ACE   4B                     LD   c,e   ; restore IP
0ACF   DD E9                  JP   (ix)   
0AD1                NUMBERS:      
0AD1   21 02 00               LD   hl,2   
0AD4   C3 7F 0A               JP   chars1   
0AD7                             ; 
0AD7                             ; 
0AD7                             ; 
0AD7                             ; 
0AD7                FILTER:      
0AD7                MAP:         
0AD7                SCAN:        
0AD7   DD E9                  JP   (ix)   
0AD9                             ; zprt:
0AD9                             ;     call go
0AD9                             ;     dw NUL                      ; closure
0AD9                             ;     dw zprt_block
0AD9                             ;     dw zprt_args
0AD9                             ;     db 2                        ; num args + locals
0AD9                             ;     db 0                        ; num locals
0AD9                             ; zprt_args:
0AD9                             ;     db "ab"
0AD9                             ; zprt_block:
0AD9                             ;     .cstr "{`sum:`.s $a $b + .}"   ; block
0AD9                             ; 
0AD9                             ; :a:s00bbJG4vYmQkcz0gL3ZiJHMtL3ZiPSAvdmIkcy9wYw==;
0AD9                ZPRT:        
0AD9   CD 68 06               CALL   go   
0ADC   00 00                  DW   NUL   ; closure
0ADE   E6 0A                  DW   zprt_block   
0AE0   E4 0A                  DW   zprt_args   
0AE2   02                     DB   2   ; num args + locals
0AE3   01                     DB   1   ; num locals
0AE4                ZPRT_ARGS:      
0AE4   6E 73                  DB   "ns"   
0AE6                ZPRT_BLOCK:      
0AE6   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B0D                             ; print decimal
0B0D                             ; hl = value
0B0D                PRTDEC:      
0B0D   CB 7C                  BIT   7,h   
0B0F   28 0B                  JR   z,prtdec0   
0B11   3E 2D                  LD   a,"-"   
0B13   CD 85 00               CALL   putchar   
0B16   AF                     XOR   a   
0B17   95                     SUB   l   
0B18   6F                     LD   l,a   
0B19   9F                     SBC   a,a   
0B1A   94                     SUB   h   
0B1B   67                     LD   h,a   
0B1C                PRTDEC0:      
0B1C   C5                     PUSH   bc   
0B1D   0E 00                  LD   c,0   ; leading zeros flag = false
0B1F   11 F0 D8               LD   de,-10000   
0B22   CD 3E 0B               CALL   prtdec1   
0B25   11 18 FC               LD   de,-1000   
0B28   CD 3E 0B               CALL   prtdec1   
0B2B   11 9C FF               LD   de,-100   
0B2E   CD 3E 0B               CALL   prtdec1   
0B31   1E F6                  LD   e,-10   
0B33   CD 3E 0B               CALL   prtdec1   
0B36   0C                     INC   c   ; flag = true for at least digit
0B37   1E FF                  LD   e,-1   
0B39   CD 3E 0B               CALL   prtdec1   
0B3C   C1                     POP   bc   
0B3D   C9                     RET      
0B3E                PRTDEC1:      
0B3E   06 2F                  LD   b,"0"-1   
0B40                PRTDEC2:      
0B40   04                     INC   b   
0B41   19                     ADD   hl,de   
0B42   38 FC                  JR   c,prtdec2   
0B44   ED 52                  SBC   hl,de   
0B46   3E 30                  LD   a,"0"   
0B48   B8                     CP   b   
0B49   20 05                  JR   nz,prtdec3   
0B4B   AF                     XOR   a   
0B4C   B1                     OR   c   
0B4D   C8                     RET   z   
0B4E   18 01                  JR   prtdec4   
0B50                PRTDEC3:      
0B50   0C                     INC   c   
0B51                PRTDEC4:      
0B51   78                     LD   a,b   
0B52   C3 85 00               JP   putchar   
0B55                PRTHEX:      ; display hl as a 16-bit number in hex.
0B55   C5                     PUSH   bc   ; preserve the IP
0B56   7C                     LD   a,h   
0B57   CD 60 0B               CALL   prthex2   
0B5A   7D                     LD   a,l   
0B5B   CD 60 0B               CALL   prthex2   
0B5E   C1                     POP   bc   
0B5F   C9                     RET      
0B60                PRTHEX2:      
0B60   4F                     LD   c,a   
0B61   1F                     RRA      
0B62   1F                     RRA      
0B63   1F                     RRA      
0B64   1F                     RRA      
0B65   CD 69 0B               CALL   prthex3   
0B68   79                     LD   a,c   
0B69                PRTHEX3:      
0B69   E6 0F                  AND   0x0F   
0B6B   C6 90                  ADD   a,0x90   
0B6D   27                     DAA      
0B6E   CE 40                  ADC   a,0x40   
0B70   27                     DAA      
0B71   C3 85 00               JP   putchar   
0B74                PRTSTR0:      
0B74   CD 85 00               CALL   putchar   
0B77   23                     INC   hl   
0B78                PRTSTR:      
0B78   7E                     LD   a,(hl)   
0B79   B7                     OR   a   
0B7A   20 F8                  JR   nz,prtstr0   
0B7C   C9                     RET      
0B7D                             ; **************************************************************************
0B7D                             ; calculate nesting value
0B7D                             ; a is char to be tested,
0B7D                             ; e is the nesting value (initially 0)
0B7D                             ; e is increased by ( and [
0B7D                             ; e is decreased by ) and ]
0B7D                             ; e has its bit 7 toggled by `
0B7D                             ; limited to 127 levels
0B7D                             ; **************************************************************************
0B7D                NESTING:      
0B7D   FE 22                  CP   DQUOTE   ; quote char
0B7F   28 06                  JR   z,nesting0   
0B81   FE 60                  CP   "`"   ; quote char
0B83   28 02                  JR   z,nesting0   
0B85   18 0A                  JR   nesting1   
0B87                NESTING0:      
0B87   CB 7B                  BIT   7,e   
0B89   28 03                  JR   z,nesting1a   
0B8B   CB BB                  RES   7,e   
0B8D   C9                     RET      
0B8E                NESTING1A:      
0B8E   CB FB                  SET   7,e   
0B90   C9                     RET      
0B91                NESTING1:      
0B91   CB 7B                  BIT   7,e   
0B93   C0                     RET   nz   
0B94   FE 7B                  CP   "{"   
0B96   28 08                  JR   z,nesting2   
0B98   FE 5B                  CP   "["   
0B9A   28 04                  JR   z,nesting2   
0B9C   FE 28                  CP   "("   
0B9E   20 02                  JR   nz,nesting3   
0BA0                NESTING2:      
0BA0   1C                     INC   e   
0BA1   C9                     RET      
0BA2                NESTING3:      
0BA2   FE 7D                  CP   "}"   
0BA4   28 07                  JR   z,nesting4   
0BA6   FE 5D                  CP   "]"   
0BA8   28 03                  JR   z,nesting4   
0BAA   FE 29                  CP   ")"   
0BAC   C0                     RET   nz   
0BAD                NESTING4:      
0BAD   1D                     DEC   e   
0BAE   C9                     RET      
0BAF                PROMPT:      
0BAF   CD BF 0B               CALL   printStr   
0BB2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB7   C9                     RET      
0BB8                CRLF:        
0BB8   CD BF 0B               CALL   printStr   
0BBB   0D 0A 00               .CSTR   "\r\n"   
0BBE   C9                     RET      
0BBF                             ; prints a null teminated string
0BBF                             ; the string should be immedaitely following the call
0BBF                PRINTSTR:      
0BBF   E3                     EX   (sp),hl   ; swap			
0BC0   CD 78 0B               CALL   prtstr   
0BC3   23                     INC   hl   ; inc past NUL
0BC4   E3                     EX   (sp),hl   ; put it back	
0BC5   C9                     RET      
0BC6                INIT:        
0BC6   DD 2A EC 42            LD   ix,(vNext)   
0BCA   FD 21 80 41            LD   iy,STACK   
0BCE   21 80 01               LD   hl,isysVars   
0BD1   11 E6 42               LD   de,sysVars   
0BD4   01 10 00               LD   bc,8 * 2   
0BD7   ED B0                  LDIR      
0BD9   21 00 42               LD   hl,vars   ; 52 vars LO HI
0BDC   06 34                  LD   b,26*2   
0BDE   AF                     XOR   a   
0BDF                INIT0:       
0BDF   77                     LD   (hl),a   
0BE0   23                     INC   hl   
0BE1   10 FC                  DJNZ   init0   
0BE3   C9                     RET      
0BE4                START:       
0BE4   31 80 41               LD   sp,STACK   ; start of monty
0BE7   CD C6 0B               CALL   init   ; setups
0BEA   CD BF 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BED   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BFA                INTERPRET:      
0BFA   CD AF 0B               CALL   prompt   
0BFD   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C00   21 00 44               LD   hl,TIB   
0C03   22 E8 42               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C06                INTERPRET2:      ; calculate nesting
0C06   1E 00                  LD   e,0   ; initilize nesting value
0C08   C5                     PUSH   bc   ; save offset into TIB,
0C09                             ; bc is also the count of chars in TIB
0C09   21 00 44               LD   hl,TIB   ; hl is start of TIB
0C0C   18 06                  JR   interpret4   
0C0E                INTERPRET3:      
0C0E   7E                     LD   a,(hl)   ; a = char in TIB
0C0F   23                     INC   hl   ; inc pointer into TIB
0C10   0B                     DEC   bc   ; dec count of chars in TIB
0C11   CD 7D 0B               CALL   nesting   ; update nesting value
0C14                INTERPRET4:      
0C14   79                     LD   a,c   ; is count zero?
0C15   B0                     OR   b   
0C16   20 F6                  JR   nz,interpret3   ; if not loop
0C18   C1                     POP   bc   ; restore offset into TIB
0C19                INTERPRET5:      
0C19   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C1C   FE 20                  CP   $20   ; compare to space
0C1E   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C20   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C22                             ; ???? NEEDED?
0C22   28 3B                  JR   z,interpret8   
0C24   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C26   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C28   FE 05                  CP   CTRL_E   
0C2A   CA A8 0C               JP   z,edit_   
0C2D   FE 08                  CP   CTRL_H   
0C2F   CA 98 0C               JP   z,backSpace_   
0C32   FE 0A                  CP   CTRL_J   
0C34   CA C0 0C               JP   z,reEdit_   
0C37   FE 13                  CP   CTRL_S   
0C39   CA C3 0C               JP   z,printStack_   
0C3C                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C3C                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C3C                             ; DB     lsb(list_)       ; FF  ^L 12
0C3C                             ; DB     lsb(printStack_) ; DLE ^P 16
0C3C                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C3C                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C3C                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C3C                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C3C                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C3C                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C3C                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C3C                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C3C                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C3C                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C3C                INTERPRET5A:      
0C3C                             ; ld (vTIBPtr),bc
0C3C                             ; ld bc,(vTIBPtr)
0C3C   18 C8                  JR   interpret2   
0C3E                INTERPRET6:      
0C3E   21 00 44               LD   hl,TIB   
0C41   09                     ADD   hl,bc   
0C42   77                     LD   (hl),a   ; store the character in textbuf
0C43   03                     INC   bc   
0C44   CD 85 00               CALL   putchar   ; echo character to screen
0C47   CD 7D 0B               CALL   nesting   
0C4A   18 CD                  JR   interpret5   ; wait for next character
0C4C                INTERPRET7:      
0C4C   21 00 44               LD   hl,TIB   
0C4F   09                     ADD   hl,bc   
0C50   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C52   23                     INC   hl   
0C53   36 0A                  LD   (hl),"\n"   
0C55   23                     INC   hl   
0C56   03                     INC   bc   
0C57   03                     INC   bc   
0C58   CD B8 0B               CALL   crlf   ; echo character to screen
0C5B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C5C   B7                     OR   a   
0C5D   20 BA                  JR   nz,interpret5   
0C5F                INTERPRET8:      
0C5F   21 00 44               LD   hl,TIB   
0C62   09                     ADD   hl,bc   
0C63   22 E8 42               LD   (vTIBPtr),hl   
0C66   01 00 44               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C69                             ; we pressed enter
0C69   0B                     DEC   bc   
0C6A                NEXT:        
0C6A   03                     INC   bc   ; Increment the IP
0C6B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C6C   FE 20                  CP   " "   ; whitespace?
0C6E   28 FA                  JR   z,next   ; space? ignore
0C70   38 07                  JR   c,next1   
0C72   6F                     LD   l,a   ; index into table
0C73   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0C75   6E                     LD   l,(hl)   ; get low jump address
0C76   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C78   E9                     JP   (hl)   ; Jump to routine
0C79                NEXT1:       
0C79   FE 00                  CP   NUL   ; end of input string?
0C7B   28 03                  JR   z,exit   
0C7D   C3 FA 0B               JP   interpret   ; no, other whitespace, macros?
0C80                EXIT:        
0C80   03                     INC   bc   
0C81   60 69                  LD   hl,bc   
0C83   E9                     JP   (hl)   
0C84                RUN:         
0C84   C1                     POP   bc   
0C85   0B                     DEC   bc   
0C86   DD E9                  JP   (ix)   
0C88                ERROR:       
0C88   CD BF 0B               CALL   printStr   
0C8B   45 72 72 6F 72 20 00   .CSTR   "Error "   
0C92   CD 0D 0B               CALL   prtdec   
0C95   C3 FA 0B               JP   interpret   
0C98                BACKSPACE_:      
0C98   79                     LD   a,c   
0C99   B0                     OR   b   
0C9A   CA 06 0C               JP   z,interpret2   
0C9D   0B                     DEC   bc   
0C9E   CD BF 0B               CALL   printStr   
0CA1   08 20 08 00            .CSTR   "\b \b"   
0CA5   C3 06 0C               JP   interpret2   
0CA8                             ; edit
0CA8                EDIT_:       
0CA8   CD 84 0C               CALL   run   
0CAB   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CBD   C3 FA 0B               JP   interpret   
0CC0                REEDIT_:      
0CC0   C3 FA 0B               JP   interpret   
0CC3                PRINTSTACK_:      
0CC3   CD 84 0C               CALL   run   
0CC6   2F 70 6B 00            .CSTR   "/pk"   
0CCA   C3 FA 0B               JP   interpret   
0CCD                             ; editDef:
0CCD                             ;     pop hl                      ; pop ret address
0CCD                             ;     ex (sp),hl                  ; swap with TOS
0CCD                             ;     push hl                     ; dup TOS
0CCD                             ;     ld a,l                      ; a = ident
0CCD                             ;     ld de,TIB                   ; de = start of TIB
0CCD                             ;     ld (vTIBPtr),de             ; update TIB*
0CCD                             ;     push ix                     ; save NEXT
0CCD                             ;     ld ix,editDef0              ; NEXT = editDef0
0CCD                             ;     jp lookupRef                ; convert letter into address
0CCD                             ; editDef0:
0CCD                             ;     ld e,(hl)                   ; de = (hl++)
0CCD                             ;     inc hl
0CCD                             ;     ld d,(hl)
0CCD                             ;     ld a,d                      ; de == 0 ?
0CCD                             ;     or e
0CCD                             ;     jr z,editDef4
0CCD                             ;     ld ix,editDef3              ; NEXT = editDef3
0CCD                             ;     ex de,hl
0CCD                             ;     ld a,(hl)
0CCD                             ;     cp "{"
0CCD                             ;     jr nz,editDef1
0CCD                             ;     jp editBlock0               ; convert letter into address
0CCD                             ; editDef1:
0CCD                             ;     cp "("
0CCD                             ;     jr nz,editDef2
0CCD                             ;     jp editBlock0               ; convert letter into address
0CCD                             ; editDef2:
0CCD                             ;     jp editFunc
0CCD                             ; editDef3:
0CCD                             ;     ld a," "                    ; write assign
0CCD                             ;     call writeChar
0CCD                             ;     pop hl                      ; a = ident
0CCD                             ;     ld a,l
0CCD                             ;     call writeChar
0CCD                             ;     ld a,"="                    ; write assign
0CCD                             ;     call writeChar
0CCD                             ;     ld ix,editDef4              ; NEXT = editDef4
0CCD                             ;     jp printTIB
0CCD                             ; editDef4:
0CCD                             ;     pop ix                      ; restore NEXT
0CCD                             ;     jp (ix)
0CCD                             ; writeChar:
0CCD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CCD                             ;     ld (de),a                   ; write ident
0CCD                             ;     inc de
0CCD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CCD                             ;     ret
0CCD                             ; ; printTIB
0CCD                             ; printTIB:
0CCD                             ;     ld hl,(vTIBPtr)
0CCD                             ;     ld de,TIB
0CCD                             ;     or a
0CCD                             ;     sbc hl,de
0CCD                             ;     jp printTIB2
0CCD                             ; printTIB1:
0CCD                             ;     ld a,(de)
0CCD                             ;     call putchar
0CCD                             ; printTIB2:
0CCD                             ;     ld a,l
0CCD                             ;     or h
0CCD                             ;     jr nz,printTIB1
0CCD                             ;     jp (ix)
0CCD                             ; editBlock:
0CCD                             ;     pop hl                      ; hl = block*
0CCD                             ; editBlock0:
0CCD                             ;     push ix                     ; save next
0CCD                             ;     push hl                     ; push block*
0CCD                             ;     push hl                     ; push block*
0CCD                             ;     ld ix,(editBlock2)
0CCD                             ;     jp blockLength
0CCD                             ; editBlock1:
0CCD                             ;     pop hl                      ; bc = length, (sp) = IP
0CCD                             ;     pop de                      ; de = block*
0CCD                             ;     ld a,l
0CCD                             ;     or h
0CCD                             ;     jr z,editBlock2
0CCD                             ;     push bc
0CCD                             ;     ld bc,hl
0CCD                             ;     ex de,hl                    ; hl = block*
0CCD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CCD                             ;     ldir                        ; copy block to TIB
0CCD                             ;     ld (vTIBPtr),de              ; save TIB*
0CCD                             ;     pop bc
0CCD                             ; editBlock2:
0CCD                             ;     pop ix                      ; restore next
0CCD                             ;     jp (ix)
0CCD                             ; editFunc:
0CCD                             ;     jp (ix)
0CCD                             ; editArray:
0CCD                             ;     jp (ix)
0CCD                             ; editArglist:
0CCD                             ;     jp (ix)
0CCD                             ; ; blockLength
0CCD                             ; ; addr1 -- length
0CCD                             ; blockLength:
0CCD                             ;     pop hl                      ; block*
0CCD                             ;     push hl                     ; save block*
0CCD                             ;     inc hl                      ; skip first char
0CCD                             ;     ld d,1                      ; increase nesting
0CCD                             ; blockLength1:                   ; Skip to end of definition
0CCD                             ;     ld a,(hl)                   ; Get the next character
0CCD                             ;     inc hl                      ; Point to next character
0CCD                             ;     cp " " + 1                  ; ignore whitespace
0CCD                             ;     jr c,blockLength1
0CCD                             ;     cp ")"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "}"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "]"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "("
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "{"
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "["
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "'"
0CCD                             ;     jr z,blockLength3
0CCD                             ;     cp "`"
0CCD                             ;     jr z,blockLength3
0CCD                             ;     cp DQUOTE
0CCD                             ;     jr z,blockLength3
0CCD                             ;     jr blockLength1
0CCD                             ; blockLength2:
0CCD                             ;     inc d
0CCD                             ;     jr blockLength1
0CCD                             ; blockLength4:
0CCD                             ;     dec d
0CCD                             ;     jr nz, blockLength1         ; get the next element
0CCD                             ; blockLength3:
0CCD                             ;     ld a,$80
0CCD                             ;     xor d
0CCD                             ;     ld d,a
0CCD                             ;     jr nz, blockLength1
0CCD                             ;     pop hl                      ; hl = block*
0CCD                             ;     or a
0CCD                             ;     sbc hl,de
0CCD                             ;     push hl
0CCD                             ;     jp (ix)
0CCD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CCD                             ; \a start of stack \#3 depth \b base \$ prompt
0CCD                             ; DW dStack               ; a vS0 start of datastack			
0CCD                             ; DW FALSE                ; b vBase16
0CCD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CCD                             ; DW 0                    ; d
0CCD                             ; DW 65                   ; e vLastDef "A" last command u defined
0CCD                             ; DW 0                    ; f
0CCD                             ; DW page6                ; g 256 bytes limits
0CCD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CCD                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "1 /bx", 1
0D00   31 80 41               LD   SP,STACK   
0D03   CD C6 0B               CALL   init   
0D06   CD D2 40               CALL   execStr   
0D09   31 20 2F 62 78 00      .CSTR   "1 /bx"   
0D0F                          ;*Macro unroll:  expect "1 /bx",1
0D0F   E1                     POP   HL   
0D10   E5                     PUSH   HL   
0D11   11 01 00               LD   DE,1   
0D14   B7                     OR   A   
0D15   ED 52                  SBC   HL,DE   
0D17   7D                     LD   A,L   
0D18   B4                     OR   H   
0D19   CA 6C 0D               JP   Z,expectM_0_2660S43   
0D1C   CD BF 0B               CALL   printStr   
0D1F   43 6F 64 65 3A 20 31 20 2F 62 78 00 .CSTR   "Code: ","1 /bx"   
0D2B   CD BF 0B               CALL   printStr   
0D2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D3D   21 01 00               LD   HL,1   
0D40   CD 0D 0B               CALL   prtdec   
0D43   CD BF 0B               CALL   printStr   
0D46   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D53   E1                     POP   hl   
0D54   E5                     PUSH   hl   
0D55   CD 0D 0B               CALL   prtdec   
0D58   E1                     POP   hl   
0D59   CD BF 0B               CALL   printStr   
0D5C   20 28 23 00            .CSTR   " (#"   
0D60   CD 55 0B               CALL   prthex   
0D63   CD BF 0B               CALL   printStr   
0D66   29 0D 0A 00            .CSTR   ")\r\n"   
0D6A   76                     HALT      
0D6B   00                     .CSTR      
0D6C                EXPECTM_0_2660S43:      
0D6C   E1                     POP   HL   
0D6D                             ; test "100 :a:s{$a.};^", 0
0D6D                             ; test "100 :a:s{$a/bd.};^", 0
0D6D                             ; test "100 :a:s{$a/bd$s= /vB$s-/vB= /vB$s/pc};^", 0
0D6D                             ; test "100 :a:s{$a/bd $s= /vB $s - /vB= /vB $s /pc};^", 0
0D6D                             ; test "/vB.h 100/bd s= /vB s - /vB= /vB.h", 0
0D6D                             ; test "100/bd s= /vB s- /vB= s /pc", 0
0D6D                             ; ; test "100 200 /z", false
0D6D                             ; call printStr
0D6D                             ; .cstr "Done!"
0D6D                             ; HALT
0D6D                             ; 
0D6D                          ;*Macro unroll:  test "/f", false
0D6D   31 80 41               LD   SP,STACK   
0D70   CD C6 0B               CALL   init   
0D73   CD D2 40               CALL   execStr   
0D76   2F 66 00               .CSTR   "/f"   
0D79                          ;*Macro unroll:  expect "/f",false
0D79   E1                     POP   HL   
0D7A   E5                     PUSH   HL   
0D7B   11 00 00               LD   DE,false   
0D7E   B7                     OR   A   
0D7F   ED 52                  SBC   HL,DE   
0D81   7D                     LD   A,L   
0D82   B4                     OR   H   
0D83   CA D3 0D               JP   Z,expectM_0_2672S43   
0D86   CD BF 0B               CALL   printStr   
0D89   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0D92   CD BF 0B               CALL   printStr   
0D95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DA4   21 00 00               LD   HL,false   
0DA7   CD 0D 0B               CALL   prtdec   
0DAA   CD BF 0B               CALL   printStr   
0DAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DBA   E1                     POP   hl   
0DBB   E5                     PUSH   hl   
0DBC   CD 0D 0B               CALL   prtdec   
0DBF   E1                     POP   hl   
0DC0   CD BF 0B               CALL   printStr   
0DC3   20 28 23 00            .CSTR   " (#"   
0DC7   CD 55 0B               CALL   prthex   
0DCA   CD BF 0B               CALL   printStr   
0DCD   29 0D 0A 00            .CSTR   ")\r\n"   
0DD1   76                     HALT      
0DD2   00                     .CSTR      
0DD3                EXPECTM_0_2672S43:      
0DD3   E1                     POP   HL   
0DD4                          ;*Macro unroll:  test "/t", true
0DD4   31 80 41               LD   SP,STACK   
0DD7   CD C6 0B               CALL   init   
0DDA   CD D2 40               CALL   execStr   
0DDD   2F 74 00               .CSTR   "/t"   
0DE0                          ;*Macro unroll:  expect "/t",true
0DE0   E1                     POP   HL   
0DE1   E5                     PUSH   HL   
0DE2   11 FF FF               LD   DE,true   
0DE5   B7                     OR   A   
0DE6   ED 52                  SBC   HL,DE   
0DE8   7D                     LD   A,L   
0DE9   B4                     OR   H   
0DEA   CA 3A 0E               JP   Z,expectM_0_2673S43   
0DED   CD BF 0B               CALL   printStr   
0DF0   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0DF9   CD BF 0B               CALL   printStr   
0DFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E0B   21 FF FF               LD   HL,true   
0E0E   CD 0D 0B               CALL   prtdec   
0E11   CD BF 0B               CALL   printStr   
0E14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E21   E1                     POP   hl   
0E22   E5                     PUSH   hl   
0E23   CD 0D 0B               CALL   prtdec   
0E26   E1                     POP   hl   
0E27   CD BF 0B               CALL   printStr   
0E2A   20 28 23 00            .CSTR   " (#"   
0E2E   CD 55 0B               CALL   prthex   
0E31   CD BF 0B               CALL   printStr   
0E34   29 0D 0A 00            .CSTR   ")\r\n"   
0E38   76                     HALT      
0E39   00                     .CSTR      
0E3A                EXPECTM_0_2673S43:      
0E3A   E1                     POP   HL   
0E3B                          ;*Macro unroll:  test "1", 1
0E3B   31 80 41               LD   SP,STACK   
0E3E   CD C6 0B               CALL   init   
0E41   CD D2 40               CALL   execStr   
0E44   31 00                  .CSTR   "1"   
0E46                          ;*Macro unroll:  expect "1",1
0E46   E1                     POP   HL   
0E47   E5                     PUSH   HL   
0E48   11 01 00               LD   DE,1   
0E4B   B7                     OR   A   
0E4C   ED 52                  SBC   HL,DE   
0E4E   7D                     LD   A,L   
0E4F   B4                     OR   H   
0E50   CA 9F 0E               JP   Z,expectM_0_2674S43   
0E53   CD BF 0B               CALL   printStr   
0E56   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E5E   CD BF 0B               CALL   printStr   
0E61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E70   21 01 00               LD   HL,1   
0E73   CD 0D 0B               CALL   prtdec   
0E76   CD BF 0B               CALL   printStr   
0E79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E86   E1                     POP   hl   
0E87   E5                     PUSH   hl   
0E88   CD 0D 0B               CALL   prtdec   
0E8B   E1                     POP   hl   
0E8C   CD BF 0B               CALL   printStr   
0E8F   20 28 23 00            .CSTR   " (#"   
0E93   CD 55 0B               CALL   prthex   
0E96   CD BF 0B               CALL   printStr   
0E99   29 0D 0A 00            .CSTR   ")\r\n"   
0E9D   76                     HALT      
0E9E   00                     .CSTR      
0E9F                EXPECTM_0_2674S43:      
0E9F   E1                     POP   HL   
0EA0                          ;*Macro unroll:  test "2", 2
0EA0   31 80 41               LD   SP,STACK   
0EA3   CD C6 0B               CALL   init   
0EA6   CD D2 40               CALL   execStr   
0EA9   32 00                  .CSTR   "2"   
0EAB                          ;*Macro unroll:  expect "2",2
0EAB   E1                     POP   HL   
0EAC   E5                     PUSH   HL   
0EAD   11 02 00               LD   DE,2   
0EB0   B7                     OR   A   
0EB1   ED 52                  SBC   HL,DE   
0EB3   7D                     LD   A,L   
0EB4   B4                     OR   H   
0EB5   CA 04 0F               JP   Z,expectM_0_2675S43   
0EB8   CD BF 0B               CALL   printStr   
0EBB   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0EC3   CD BF 0B               CALL   printStr   
0EC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0ED5   21 02 00               LD   HL,2   
0ED8   CD 0D 0B               CALL   prtdec   
0EDB   CD BF 0B               CALL   printStr   
0EDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EEB   E1                     POP   hl   
0EEC   E5                     PUSH   hl   
0EED   CD 0D 0B               CALL   prtdec   
0EF0   E1                     POP   hl   
0EF1   CD BF 0B               CALL   printStr   
0EF4   20 28 23 00            .CSTR   " (#"   
0EF8   CD 55 0B               CALL   prthex   
0EFB   CD BF 0B               CALL   printStr   
0EFE   29 0D 0A 00            .CSTR   ")\r\n"   
0F02   76                     HALT      
0F03   00                     .CSTR      
0F04                EXPECTM_0_2675S43:      
0F04   E1                     POP   HL   
0F05                          ;*Macro unroll:  test "1", 1
0F05   31 80 41               LD   SP,STACK   
0F08   CD C6 0B               CALL   init   
0F0B   CD D2 40               CALL   execStr   
0F0E   31 00                  .CSTR   "1"   
0F10                          ;*Macro unroll:  expect "1",1
0F10   E1                     POP   HL   
0F11   E5                     PUSH   HL   
0F12   11 01 00               LD   DE,1   
0F15   B7                     OR   A   
0F16   ED 52                  SBC   HL,DE   
0F18   7D                     LD   A,L   
0F19   B4                     OR   H   
0F1A   CA 69 0F               JP   Z,expectM_0_2676S43   
0F1D   CD BF 0B               CALL   printStr   
0F20   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F28   CD BF 0B               CALL   printStr   
0F2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F3A   21 01 00               LD   HL,1   
0F3D   CD 0D 0B               CALL   prtdec   
0F40   CD BF 0B               CALL   printStr   
0F43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F50   E1                     POP   hl   
0F51   E5                     PUSH   hl   
0F52   CD 0D 0B               CALL   prtdec   
0F55   E1                     POP   hl   
0F56   CD BF 0B               CALL   printStr   
0F59   20 28 23 00            .CSTR   " (#"   
0F5D   CD 55 0B               CALL   prthex   
0F60   CD BF 0B               CALL   printStr   
0F63   29 0D 0A 00            .CSTR   ")\r\n"   
0F67   76                     HALT      
0F68   00                     .CSTR      
0F69                EXPECTM_0_2676S43:      
0F69   E1                     POP   HL   
0F6A                          ;*Macro unroll:  test "0", 0
0F6A   31 80 41               LD   SP,STACK   
0F6D   CD C6 0B               CALL   init   
0F70   CD D2 40               CALL   execStr   
0F73   30 00                  .CSTR   "0"   
0F75                          ;*Macro unroll:  expect "0",0
0F75   E1                     POP   HL   
0F76   E5                     PUSH   HL   
0F77   11 00 00               LD   DE,0   
0F7A   B7                     OR   A   
0F7B   ED 52                  SBC   HL,DE   
0F7D   7D                     LD   A,L   
0F7E   B4                     OR   H   
0F7F   CA CE 0F               JP   Z,expectM_0_2677S43   
0F82   CD BF 0B               CALL   printStr   
0F85   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0F8D   CD BF 0B               CALL   printStr   
0F90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F9F   21 00 00               LD   HL,0   
0FA2   CD 0D 0B               CALL   prtdec   
0FA5   CD BF 0B               CALL   printStr   
0FA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FB5   E1                     POP   hl   
0FB6   E5                     PUSH   hl   
0FB7   CD 0D 0B               CALL   prtdec   
0FBA   E1                     POP   hl   
0FBB   CD BF 0B               CALL   printStr   
0FBE   20 28 23 00            .CSTR   " (#"   
0FC2   CD 55 0B               CALL   prthex   
0FC5   CD BF 0B               CALL   printStr   
0FC8   29 0D 0A 00            .CSTR   ")\r\n"   
0FCC   76                     HALT      
0FCD   00                     .CSTR      
0FCE                EXPECTM_0_2677S43:      
0FCE   E1                     POP   HL   
0FCF                          ;*Macro unroll:  test "10", 10
0FCF   31 80 41               LD   SP,STACK   
0FD2   CD C6 0B               CALL   init   
0FD5   CD D2 40               CALL   execStr   
0FD8   31 30 00               .CSTR   "10"   
0FDB                          ;*Macro unroll:  expect "10",10
0FDB   E1                     POP   HL   
0FDC   E5                     PUSH   HL   
0FDD   11 0A 00               LD   DE,10   
0FE0   B7                     OR   A   
0FE1   ED 52                  SBC   HL,DE   
0FE3   7D                     LD   A,L   
0FE4   B4                     OR   H   
0FE5   CA 35 10               JP   Z,expectM_0_2678S43   
0FE8   CD BF 0B               CALL   printStr   
0FEB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0FF4   CD BF 0B               CALL   printStr   
0FF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1006   21 0A 00               LD   HL,10   
1009   CD 0D 0B               CALL   prtdec   
100C   CD BF 0B               CALL   printStr   
100F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
101C   E1                     POP   hl   
101D   E5                     PUSH   hl   
101E   CD 0D 0B               CALL   prtdec   
1021   E1                     POP   hl   
1022   CD BF 0B               CALL   printStr   
1025   20 28 23 00            .CSTR   " (#"   
1029   CD 55 0B               CALL   prthex   
102C   CD BF 0B               CALL   printStr   
102F   29 0D 0A 00            .CSTR   ")\r\n"   
1033   76                     HALT      
1034   00                     .CSTR      
1035                EXPECTM_0_2678S43:      
1035   E1                     POP   HL   
1036                          ;*Macro unroll:  test "123", 123
1036   31 80 41               LD   SP,STACK   
1039   CD C6 0B               CALL   init   
103C   CD D2 40               CALL   execStr   
103F   31 32 33 00            .CSTR   "123"   
1043                          ;*Macro unroll:  expect "123",123
1043   E1                     POP   HL   
1044   E5                     PUSH   HL   
1045   11 7B 00               LD   DE,123   
1048   B7                     OR   A   
1049   ED 52                  SBC   HL,DE   
104B   7D                     LD   A,L   
104C   B4                     OR   H   
104D   CA 9E 10               JP   Z,expectM_0_2679S43   
1050   CD BF 0B               CALL   printStr   
1053   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
105D   CD BF 0B               CALL   printStr   
1060   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
106F   21 7B 00               LD   HL,123   
1072   CD 0D 0B               CALL   prtdec   
1075   CD BF 0B               CALL   printStr   
1078   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1085   E1                     POP   hl   
1086   E5                     PUSH   hl   
1087   CD 0D 0B               CALL   prtdec   
108A   E1                     POP   hl   
108B   CD BF 0B               CALL   printStr   
108E   20 28 23 00            .CSTR   " (#"   
1092   CD 55 0B               CALL   prthex   
1095   CD BF 0B               CALL   printStr   
1098   29 0D 0A 00            .CSTR   ")\r\n"   
109C   76                     HALT      
109D   00                     .CSTR      
109E                EXPECTM_0_2679S43:      
109E   E1                     POP   HL   
109F                          ;*Macro unroll:  test "-1",-1
109F   31 80 41               LD   SP,STACK   
10A2   CD C6 0B               CALL   init   
10A5   CD D2 40               CALL   execStr   
10A8   2D 31 00               .CSTR   "-1"   
10AB                          ;*Macro unroll:  expect "-1",-1
10AB   E1                     POP   HL   
10AC   E5                     PUSH   HL   
10AD   11 FF FF               LD   DE,-1   
10B0   B7                     OR   A   
10B1   ED 52                  SBC   HL,DE   
10B3   7D                     LD   A,L   
10B4   B4                     OR   H   
10B5   CA 05 11               JP   Z,expectM_0_2680S43   
10B8   CD BF 0B               CALL   printStr   
10BB   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
10C4   CD BF 0B               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 FF FF               LD   HL,-1   
10D9   CD 0D 0B               CALL   prtdec   
10DC   CD BF 0B               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD 0D 0B               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD BF 0B               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 55 0B               CALL   prthex   
10FC   CD BF 0B               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2680S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "''", 0
1106   31 80 41               LD   SP,STACK   
1109   CD C6 0B               CALL   init   
110C   CD D2 40               CALL   execStr   
110F   27 27 00               .CSTR   "''"   
1112                          ;*Macro unroll:  expect "''",0
1112   E1                     POP   HL   
1113   E5                     PUSH   HL   
1114   11 00 00               LD   DE,0   
1117   B7                     OR   A   
1118   ED 52                  SBC   HL,DE   
111A   7D                     LD   A,L   
111B   B4                     OR   H   
111C   CA 6C 11               JP   Z,expectM_0_2681S43   
111F   CD BF 0B               CALL   printStr   
1122   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
112B   CD BF 0B               CALL   printStr   
112E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
113D   21 00 00               LD   HL,0   
1140   CD 0D 0B               CALL   prtdec   
1143   CD BF 0B               CALL   printStr   
1146   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1153   E1                     POP   hl   
1154   E5                     PUSH   hl   
1155   CD 0D 0B               CALL   prtdec   
1158   E1                     POP   hl   
1159   CD BF 0B               CALL   printStr   
115C   20 28 23 00            .CSTR   " (#"   
1160   CD 55 0B               CALL   prthex   
1163   CD BF 0B               CALL   printStr   
1166   29 0D 0A 00            .CSTR   ")\r\n"   
116A   76                     HALT      
116B   00                     .CSTR      
116C                EXPECTM_0_2681S43:      
116C   E1                     POP   HL   
116D                          ;*Macro unroll:  test "'a'", $61
116D   31 80 41               LD   SP,STACK   
1170   CD C6 0B               CALL   init   
1173   CD D2 40               CALL   execStr   
1176   27 61 27 00            .CSTR   "'a'"   
117A                          ;*Macro unroll:  expect "'a'",$61
117A   E1                     POP   HL   
117B   E5                     PUSH   HL   
117C   11 61 00               LD   DE,$61   
117F   B7                     OR   A   
1180   ED 52                  SBC   HL,DE   
1182   7D                     LD   A,L   
1183   B4                     OR   H   
1184   CA D5 11               JP   Z,expectM_0_2682S43   
1187   CD BF 0B               CALL   printStr   
118A   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1194   CD BF 0B               CALL   printStr   
1197   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A6   21 61 00               LD   HL,$61   
11A9   CD 0D 0B               CALL   prtdec   
11AC   CD BF 0B               CALL   printStr   
11AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11BC   E1                     POP   hl   
11BD   E5                     PUSH   hl   
11BE   CD 0D 0B               CALL   prtdec   
11C1   E1                     POP   hl   
11C2   CD BF 0B               CALL   printStr   
11C5   20 28 23 00            .CSTR   " (#"   
11C9   CD 55 0B               CALL   prthex   
11CC   CD BF 0B               CALL   printStr   
11CF   29 0D 0A 00            .CSTR   ")\r\n"   
11D3   76                     HALT      
11D4   00                     .CSTR      
11D5                EXPECTM_0_2682S43:      
11D5   E1                     POP   HL   
11D6                          ;*Macro unroll:  test "'\\''", $27
11D6   31 80 41               LD   SP,STACK   
11D9   CD C6 0B               CALL   init   
11DC   CD D2 40               CALL   execStr   
11DF   27 5C 27 27 00         .CSTR   "'\\''"   
11E4                          ;*Macro unroll:  expect "'\\''",$27
11E4   E1                     POP   HL   
11E5   E5                     PUSH   HL   
11E6   11 27 00               LD   DE,$27   
11E9   B7                     OR   A   
11EA   ED 52                  SBC   HL,DE   
11EC   7D                     LD   A,L   
11ED   B4                     OR   H   
11EE   CA 40 12               JP   Z,expectM_0_2683S43   
11F1   CD BF 0B               CALL   printStr   
11F4   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
11FF   CD BF 0B               CALL   printStr   
1202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1211   21 27 00               LD   HL,$27   
1214   CD 0D 0B               CALL   prtdec   
1217   CD BF 0B               CALL   printStr   
121A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1227   E1                     POP   hl   
1228   E5                     PUSH   hl   
1229   CD 0D 0B               CALL   prtdec   
122C   E1                     POP   hl   
122D   CD BF 0B               CALL   printStr   
1230   20 28 23 00            .CSTR   " (#"   
1234   CD 55 0B               CALL   prthex   
1237   CD BF 0B               CALL   printStr   
123A   29 0D 0A 00            .CSTR   ")\r\n"   
123E   76                     HALT      
123F   00                     .CSTR      
1240                EXPECTM_0_2683S43:      
1240   E1                     POP   HL   
1241                          ;*Macro unroll:  test "#10", $10
1241   31 80 41               LD   SP,STACK   
1244   CD C6 0B               CALL   init   
1247   CD D2 40               CALL   execStr   
124A   23 31 30 00            .CSTR   "#10"   
124E                          ;*Macro unroll:  expect "#10",$10
124E   E1                     POP   HL   
124F   E5                     PUSH   HL   
1250   11 10 00               LD   DE,$10   
1253   B7                     OR   A   
1254   ED 52                  SBC   HL,DE   
1256   7D                     LD   A,L   
1257   B4                     OR   H   
1258   CA A9 12               JP   Z,expectM_0_2684S43   
125B   CD BF 0B               CALL   printStr   
125E   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1268   CD BF 0B               CALL   printStr   
126B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127A   21 10 00               LD   HL,$10   
127D   CD 0D 0B               CALL   prtdec   
1280   CD BF 0B               CALL   printStr   
1283   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1290   E1                     POP   hl   
1291   E5                     PUSH   hl   
1292   CD 0D 0B               CALL   prtdec   
1295   E1                     POP   hl   
1296   CD BF 0B               CALL   printStr   
1299   20 28 23 00            .CSTR   " (#"   
129D   CD 55 0B               CALL   prthex   
12A0   CD BF 0B               CALL   printStr   
12A3   29 0D 0A 00            .CSTR   ")\r\n"   
12A7   76                     HALT      
12A8   00                     .CSTR      
12A9                EXPECTM_0_2684S43:      
12A9   E1                     POP   HL   
12AA                          ;*Macro unroll:  test "#FF", $FF
12AA   31 80 41               LD   SP,STACK   
12AD   CD C6 0B               CALL   init   
12B0   CD D2 40               CALL   execStr   
12B3   23 46 46 00            .CSTR   "#FF"   
12B7                          ;*Macro unroll:  expect "#FF",$FF
12B7   E1                     POP   HL   
12B8   E5                     PUSH   HL   
12B9   11 FF 00               LD   DE,$FF   
12BC   B7                     OR   A   
12BD   ED 52                  SBC   HL,DE   
12BF   7D                     LD   A,L   
12C0   B4                     OR   H   
12C1   CA 12 13               JP   Z,expectM_0_2685S43   
12C4   CD BF 0B               CALL   printStr   
12C7   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
12D1   CD BF 0B               CALL   printStr   
12D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E3   21 FF 00               LD   HL,$FF   
12E6   CD 0D 0B               CALL   prtdec   
12E9   CD BF 0B               CALL   printStr   
12EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F9   E1                     POP   hl   
12FA   E5                     PUSH   hl   
12FB   CD 0D 0B               CALL   prtdec   
12FE   E1                     POP   hl   
12FF   CD BF 0B               CALL   printStr   
1302   20 28 23 00            .CSTR   " (#"   
1306   CD 55 0B               CALL   prthex   
1309   CD BF 0B               CALL   printStr   
130C   29 0D 0A 00            .CSTR   ")\r\n"   
1310   76                     HALT      
1311   00                     .CSTR      
1312                EXPECTM_0_2685S43:      
1312   E1                     POP   HL   
1313                          ;*Macro unroll:  test "-1 2 +",1
1313   31 80 41               LD   SP,STACK   
1316   CD C6 0B               CALL   init   
1319   CD D2 40               CALL   execStr   
131C   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1323                          ;*Macro unroll:  expect "-1 2 +",1
1323   E1                     POP   HL   
1324   E5                     PUSH   HL   
1325   11 01 00               LD   DE,1   
1328   B7                     OR   A   
1329   ED 52                  SBC   HL,DE   
132B   7D                     LD   A,L   
132C   B4                     OR   H   
132D   CA 81 13               JP   Z,expectM_0_2686S43   
1330   CD BF 0B               CALL   printStr   
1333   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1340   CD BF 0B               CALL   printStr   
1343   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1352   21 01 00               LD   HL,1   
1355   CD 0D 0B               CALL   prtdec   
1358   CD BF 0B               CALL   printStr   
135B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1368   E1                     POP   hl   
1369   E5                     PUSH   hl   
136A   CD 0D 0B               CALL   prtdec   
136D   E1                     POP   hl   
136E   CD BF 0B               CALL   printStr   
1371   20 28 23 00            .CSTR   " (#"   
1375   CD 55 0B               CALL   prthex   
1378   CD BF 0B               CALL   printStr   
137B   29 0D 0A 00            .CSTR   ")\r\n"   
137F   76                     HALT      
1380   00                     .CSTR      
1381                EXPECTM_0_2686S43:      
1381   E1                     POP   HL   
1382                          ;*Macro unroll:  test "-1 1 +",0
1382   31 80 41               LD   SP,STACK   
1385   CD C6 0B               CALL   init   
1388   CD D2 40               CALL   execStr   
138B   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1392                          ;*Macro unroll:  expect "-1 1 +",0
1392   E1                     POP   HL   
1393   E5                     PUSH   HL   
1394   11 00 00               LD   DE,0   
1397   B7                     OR   A   
1398   ED 52                  SBC   HL,DE   
139A   7D                     LD   A,L   
139B   B4                     OR   H   
139C   CA F0 13               JP   Z,expectM_0_2687S43   
139F   CD BF 0B               CALL   printStr   
13A2   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
13AF   CD BF 0B               CALL   printStr   
13B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C1   21 00 00               LD   HL,0   
13C4   CD 0D 0B               CALL   prtdec   
13C7   CD BF 0B               CALL   printStr   
13CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13D7   E1                     POP   hl   
13D8   E5                     PUSH   hl   
13D9   CD 0D 0B               CALL   prtdec   
13DC   E1                     POP   hl   
13DD   CD BF 0B               CALL   printStr   
13E0   20 28 23 00            .CSTR   " (#"   
13E4   CD 55 0B               CALL   prthex   
13E7   CD BF 0B               CALL   printStr   
13EA   29 0D 0A 00            .CSTR   ")\r\n"   
13EE   76                     HALT      
13EF   00                     .CSTR      
13F0                EXPECTM_0_2687S43:      
13F0   E1                     POP   HL   
13F1                          ;*Macro unroll:  test "1 2 +", 3
13F1   31 80 41               LD   SP,STACK   
13F4   CD C6 0B               CALL   init   
13F7   CD D2 40               CALL   execStr   
13FA   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1400                          ;*Macro unroll:  expect "1 2 +",3
1400   E1                     POP   HL   
1401   E5                     PUSH   HL   
1402   11 03 00               LD   DE,3   
1405   B7                     OR   A   
1406   ED 52                  SBC   HL,DE   
1408   7D                     LD   A,L   
1409   B4                     OR   H   
140A   CA 5D 14               JP   Z,expectM_0_2688S43   
140D   CD BF 0B               CALL   printStr   
1410   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
141C   CD BF 0B               CALL   printStr   
141F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
142E   21 03 00               LD   HL,3   
1431   CD 0D 0B               CALL   prtdec   
1434   CD BF 0B               CALL   printStr   
1437   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1444   E1                     POP   hl   
1445   E5                     PUSH   hl   
1446   CD 0D 0B               CALL   prtdec   
1449   E1                     POP   hl   
144A   CD BF 0B               CALL   printStr   
144D   20 28 23 00            .CSTR   " (#"   
1451   CD 55 0B               CALL   prthex   
1454   CD BF 0B               CALL   printStr   
1457   29 0D 0A 00            .CSTR   ")\r\n"   
145B   76                     HALT      
145C   00                     .CSTR      
145D                EXPECTM_0_2688S43:      
145D   E1                     POP   HL   
145E                          ;*Macro unroll:  test "4 1 2 +", 3
145E   31 80 41               LD   SP,STACK   
1461   CD C6 0B               CALL   init   
1464   CD D2 40               CALL   execStr   
1467   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
146F                          ;*Macro unroll:  expect "4 1 2 +",3
146F   E1                     POP   HL   
1470   E5                     PUSH   HL   
1471   11 03 00               LD   DE,3   
1474   B7                     OR   A   
1475   ED 52                  SBC   HL,DE   
1477   7D                     LD   A,L   
1478   B4                     OR   H   
1479   CA CE 14               JP   Z,expectM_0_2689S43   
147C   CD BF 0B               CALL   printStr   
147F   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
148D   CD BF 0B               CALL   printStr   
1490   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
149F   21 03 00               LD   HL,3   
14A2   CD 0D 0B               CALL   prtdec   
14A5   CD BF 0B               CALL   printStr   
14A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14B5   E1                     POP   hl   
14B6   E5                     PUSH   hl   
14B7   CD 0D 0B               CALL   prtdec   
14BA   E1                     POP   hl   
14BB   CD BF 0B               CALL   printStr   
14BE   20 28 23 00            .CSTR   " (#"   
14C2   CD 55 0B               CALL   prthex   
14C5   CD BF 0B               CALL   printStr   
14C8   29 0D 0A 00            .CSTR   ")\r\n"   
14CC   76                     HALT      
14CD   00                     .CSTR      
14CE                EXPECTM_0_2689S43:      
14CE   E1                     POP   HL   
14CF                          ;*Macro unroll:  test "123 456 +", 123+456
14CF   31 80 41               LD   SP,STACK   
14D2   CD C6 0B               CALL   init   
14D5   CD D2 40               CALL   execStr   
14D8   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
14E2                          ;*Macro unroll:  expect "123 456 +",123+456
14E2   E1                     POP   HL   
14E3   E5                     PUSH   HL   
14E4   11 43 02               LD   DE,123+456   
14E7   B7                     OR   A   
14E8   ED 52                  SBC   HL,DE   
14EA   7D                     LD   A,L   
14EB   B4                     OR   H   
14EC   CA 43 15               JP   Z,expectM_0_2690S43   
14EF   CD BF 0B               CALL   printStr   
14F2   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1502   CD BF 0B               CALL   printStr   
1505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1514   21 43 02               LD   HL,123+456   
1517   CD 0D 0B               CALL   prtdec   
151A   CD BF 0B               CALL   printStr   
151D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
152A   E1                     POP   hl   
152B   E5                     PUSH   hl   
152C   CD 0D 0B               CALL   prtdec   
152F   E1                     POP   hl   
1530   CD BF 0B               CALL   printStr   
1533   20 28 23 00            .CSTR   " (#"   
1537   CD 55 0B               CALL   prthex   
153A   CD BF 0B               CALL   printStr   
153D   29 0D 0A 00            .CSTR   ")\r\n"   
1541   76                     HALT      
1542   00                     .CSTR      
1543                EXPECTM_0_2690S43:      
1543   E1                     POP   HL   
1544                          ;*Macro unroll:  test "64 128 +", 64+128
1544   31 80 41               LD   SP,STACK   
1547   CD C6 0B               CALL   init   
154A   CD D2 40               CALL   execStr   
154D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1556                          ;*Macro unroll:  expect "64 128 +",64+128
1556   E1                     POP   HL   
1557   E5                     PUSH   HL   
1558   11 C0 00               LD   DE,64+128   
155B   B7                     OR   A   
155C   ED 52                  SBC   HL,DE   
155E   7D                     LD   A,L   
155F   B4                     OR   H   
1560   CA B6 15               JP   Z,expectM_0_2691S43   
1563   CD BF 0B               CALL   printStr   
1566   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1575   CD BF 0B               CALL   printStr   
1578   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1587   21 C0 00               LD   HL,64+128   
158A   CD 0D 0B               CALL   prtdec   
158D   CD BF 0B               CALL   printStr   
1590   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
159D   E1                     POP   hl   
159E   E5                     PUSH   hl   
159F   CD 0D 0B               CALL   prtdec   
15A2   E1                     POP   hl   
15A3   CD BF 0B               CALL   printStr   
15A6   20 28 23 00            .CSTR   " (#"   
15AA   CD 55 0B               CALL   prthex   
15AD   CD BF 0B               CALL   printStr   
15B0   29 0D 0A 00            .CSTR   ")\r\n"   
15B4   76                     HALT      
15B5   00                     .CSTR      
15B6                EXPECTM_0_2691S43:      
15B6   E1                     POP   HL   
15B7                          ;*Macro unroll:  test "1 2 +", 3
15B7   31 80 41               LD   SP,STACK   
15BA   CD C6 0B               CALL   init   
15BD   CD D2 40               CALL   execStr   
15C0   31 20 32 20 2B 00      .CSTR   "1 2 +"   
15C6                          ;*Macro unroll:  expect "1 2 +",3
15C6   E1                     POP   HL   
15C7   E5                     PUSH   HL   
15C8   11 03 00               LD   DE,3   
15CB   B7                     OR   A   
15CC   ED 52                  SBC   HL,DE   
15CE   7D                     LD   A,L   
15CF   B4                     OR   H   
15D0   CA 23 16               JP   Z,expectM_0_2692S43   
15D3   CD BF 0B               CALL   printStr   
15D6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15E2   CD BF 0B               CALL   printStr   
15E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15F4   21 03 00               LD   HL,3   
15F7   CD 0D 0B               CALL   prtdec   
15FA   CD BF 0B               CALL   printStr   
15FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
160A   E1                     POP   hl   
160B   E5                     PUSH   hl   
160C   CD 0D 0B               CALL   prtdec   
160F   E1                     POP   hl   
1610   CD BF 0B               CALL   printStr   
1613   20 28 23 00            .CSTR   " (#"   
1617   CD 55 0B               CALL   prthex   
161A   CD BF 0B               CALL   printStr   
161D   29 0D 0A 00            .CSTR   ")\r\n"   
1621   76                     HALT      
1622   00                     .CSTR      
1623                EXPECTM_0_2692S43:      
1623   E1                     POP   HL   
1624                          ;*Macro unroll:  test "1a= a++ a",2
1624   31 80 41               LD   SP,STACK   
1627   CD C6 0B               CALL   init   
162A   CD D2 40               CALL   execStr   
162D   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1637                          ;*Macro unroll:  expect "1a= a++ a",2
1637   E1                     POP   HL   
1638   E5                     PUSH   HL   
1639   11 02 00               LD   DE,2   
163C   B7                     OR   A   
163D   ED 52                  SBC   HL,DE   
163F   7D                     LD   A,L   
1640   B4                     OR   H   
1641   CA 98 16               JP   Z,expectM_0_2693S43   
1644   CD BF 0B               CALL   printStr   
1647   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1657   CD BF 0B               CALL   printStr   
165A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1669   21 02 00               LD   HL,2   
166C   CD 0D 0B               CALL   prtdec   
166F   CD BF 0B               CALL   printStr   
1672   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
167F   E1                     POP   hl   
1680   E5                     PUSH   hl   
1681   CD 0D 0B               CALL   prtdec   
1684   E1                     POP   hl   
1685   CD BF 0B               CALL   printStr   
1688   20 28 23 00            .CSTR   " (#"   
168C   CD 55 0B               CALL   prthex   
168F   CD BF 0B               CALL   printStr   
1692   29 0D 0A 00            .CSTR   ")\r\n"   
1696   76                     HALT      
1697   00                     .CSTR      
1698                EXPECTM_0_2693S43:      
1698   E1                     POP   HL   
1699                          ;*Macro unroll:  test "-1 -1 -",0
1699   31 80 41               LD   SP,STACK   
169C   CD C6 0B               CALL   init   
169F   CD D2 40               CALL   execStr   
16A2   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
16AA                          ;*Macro unroll:  expect "-1 -1 -",0
16AA   E1                     POP   HL   
16AB   E5                     PUSH   HL   
16AC   11 00 00               LD   DE,0   
16AF   B7                     OR   A   
16B0   ED 52                  SBC   HL,DE   
16B2   7D                     LD   A,L   
16B3   B4                     OR   H   
16B4   CA 09 17               JP   Z,expectM_0_2694S43   
16B7   CD BF 0B               CALL   printStr   
16BA   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
16C8   CD BF 0B               CALL   printStr   
16CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16DA   21 00 00               LD   HL,0   
16DD   CD 0D 0B               CALL   prtdec   
16E0   CD BF 0B               CALL   printStr   
16E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F0   E1                     POP   hl   
16F1   E5                     PUSH   hl   
16F2   CD 0D 0B               CALL   prtdec   
16F5   E1                     POP   hl   
16F6   CD BF 0B               CALL   printStr   
16F9   20 28 23 00            .CSTR   " (#"   
16FD   CD 55 0B               CALL   prthex   
1700   CD BF 0B               CALL   printStr   
1703   29 0D 0A 00            .CSTR   ")\r\n"   
1707   76                     HALT      
1708   00                     .CSTR      
1709                EXPECTM_0_2694S43:      
1709   E1                     POP   HL   
170A                          ;*Macro unroll:  test "5 3 -", 2
170A   31 80 41               LD   SP,STACK   
170D   CD C6 0B               CALL   init   
1710   CD D2 40               CALL   execStr   
1713   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1719                          ;*Macro unroll:  expect "5 3 -",2
1719   E1                     POP   HL   
171A   E5                     PUSH   HL   
171B   11 02 00               LD   DE,2   
171E   B7                     OR   A   
171F   ED 52                  SBC   HL,DE   
1721   7D                     LD   A,L   
1722   B4                     OR   H   
1723   CA 76 17               JP   Z,expectM_0_2695S43   
1726   CD BF 0B               CALL   printStr   
1729   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1735   CD BF 0B               CALL   printStr   
1738   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1747   21 02 00               LD   HL,2   
174A   CD 0D 0B               CALL   prtdec   
174D   CD BF 0B               CALL   printStr   
1750   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
175D   E1                     POP   hl   
175E   E5                     PUSH   hl   
175F   CD 0D 0B               CALL   prtdec   
1762   E1                     POP   hl   
1763   CD BF 0B               CALL   printStr   
1766   20 28 23 00            .CSTR   " (#"   
176A   CD 55 0B               CALL   prthex   
176D   CD BF 0B               CALL   printStr   
1770   29 0D 0A 00            .CSTR   ")\r\n"   
1774   76                     HALT      
1775   00                     .CSTR      
1776                EXPECTM_0_2695S43:      
1776   E1                     POP   HL   
1777                          ;*Macro unroll:  test "2 1 -",1
1777   31 80 41               LD   SP,STACK   
177A   CD C6 0B               CALL   init   
177D   CD D2 40               CALL   execStr   
1780   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1786                          ;*Macro unroll:  expect "2 1 -",1
1786   E1                     POP   HL   
1787   E5                     PUSH   HL   
1788   11 01 00               LD   DE,1   
178B   B7                     OR   A   
178C   ED 52                  SBC   HL,DE   
178E   7D                     LD   A,L   
178F   B4                     OR   H   
1790   CA E3 17               JP   Z,expectM_0_2696S43   
1793   CD BF 0B               CALL   printStr   
1796   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
17A2   CD BF 0B               CALL   printStr   
17A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17B4   21 01 00               LD   HL,1   
17B7   CD 0D 0B               CALL   prtdec   
17BA   CD BF 0B               CALL   printStr   
17BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CA   E1                     POP   hl   
17CB   E5                     PUSH   hl   
17CC   CD 0D 0B               CALL   prtdec   
17CF   E1                     POP   hl   
17D0   CD BF 0B               CALL   printStr   
17D3   20 28 23 00            .CSTR   " (#"   
17D7   CD 55 0B               CALL   prthex   
17DA   CD BF 0B               CALL   printStr   
17DD   29 0D 0A 00            .CSTR   ")\r\n"   
17E1   76                     HALT      
17E2   00                     .CSTR      
17E3                EXPECTM_0_2696S43:      
17E3   E1                     POP   HL   
17E4                          ;*Macro unroll:  test "3a= a-- a",2
17E4   31 80 41               LD   SP,STACK   
17E7   CD C6 0B               CALL   init   
17EA   CD D2 40               CALL   execStr   
17ED   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
17F7                          ;*Macro unroll:  expect "3a= a-- a",2
17F7   E1                     POP   HL   
17F8   E5                     PUSH   HL   
17F9   11 02 00               LD   DE,2   
17FC   B7                     OR   A   
17FD   ED 52                  SBC   HL,DE   
17FF   7D                     LD   A,L   
1800   B4                     OR   H   
1801   CA 58 18               JP   Z,expectM_0_2697S43   
1804   CD BF 0B               CALL   printStr   
1807   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1817   CD BF 0B               CALL   printStr   
181A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1829   21 02 00               LD   HL,2   
182C   CD 0D 0B               CALL   prtdec   
182F   CD BF 0B               CALL   printStr   
1832   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
183F   E1                     POP   hl   
1840   E5                     PUSH   hl   
1841   CD 0D 0B               CALL   prtdec   
1844   E1                     POP   hl   
1845   CD BF 0B               CALL   printStr   
1848   20 28 23 00            .CSTR   " (#"   
184C   CD 55 0B               CALL   prthex   
184F   CD BF 0B               CALL   printStr   
1852   29 0D 0A 00            .CSTR   ")\r\n"   
1856   76                     HALT      
1857   00                     .CSTR      
1858                EXPECTM_0_2697S43:      
1858   E1                     POP   HL   
1859                          ;*Macro unroll:  test "3 5 &", 1
1859   31 80 41               LD   SP,STACK   
185C   CD C6 0B               CALL   init   
185F   CD D2 40               CALL   execStr   
1862   33 20 35 20 26 00      .CSTR   "3 5 &"   
1868                          ;*Macro unroll:  expect "3 5 &",1
1868   E1                     POP   HL   
1869   E5                     PUSH   HL   
186A   11 01 00               LD   DE,1   
186D   B7                     OR   A   
186E   ED 52                  SBC   HL,DE   
1870   7D                     LD   A,L   
1871   B4                     OR   H   
1872   CA C5 18               JP   Z,expectM_0_2698S43   
1875   CD BF 0B               CALL   printStr   
1878   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1884   CD BF 0B               CALL   printStr   
1887   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1896   21 01 00               LD   HL,1   
1899   CD 0D 0B               CALL   prtdec   
189C   CD BF 0B               CALL   printStr   
189F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18AC   E1                     POP   hl   
18AD   E5                     PUSH   hl   
18AE   CD 0D 0B               CALL   prtdec   
18B1   E1                     POP   hl   
18B2   CD BF 0B               CALL   printStr   
18B5   20 28 23 00            .CSTR   " (#"   
18B9   CD 55 0B               CALL   prthex   
18BC   CD BF 0B               CALL   printStr   
18BF   29 0D 0A 00            .CSTR   ")\r\n"   
18C3   76                     HALT      
18C4   00                     .CSTR      
18C5                EXPECTM_0_2698S43:      
18C5   E1                     POP   HL   
18C6                          ;*Macro unroll:  test "3 5 |", 7
18C6   31 80 41               LD   SP,STACK   
18C9   CD C6 0B               CALL   init   
18CC   CD D2 40               CALL   execStr   
18CF   33 20 35 20 7C 00      .CSTR   "3 5 |"   
18D5                          ;*Macro unroll:  expect "3 5 |",7
18D5   E1                     POP   HL   
18D6   E5                     PUSH   HL   
18D7   11 07 00               LD   DE,7   
18DA   B7                     OR   A   
18DB   ED 52                  SBC   HL,DE   
18DD   7D                     LD   A,L   
18DE   B4                     OR   H   
18DF   CA 32 19               JP   Z,expectM_0_2699S43   
18E2   CD BF 0B               CALL   printStr   
18E5   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
18F1   CD BF 0B               CALL   printStr   
18F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1903   21 07 00               LD   HL,7   
1906   CD 0D 0B               CALL   prtdec   
1909   CD BF 0B               CALL   printStr   
190C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1919   E1                     POP   hl   
191A   E5                     PUSH   hl   
191B   CD 0D 0B               CALL   prtdec   
191E   E1                     POP   hl   
191F   CD BF 0B               CALL   printStr   
1922   20 28 23 00            .CSTR   " (#"   
1926   CD 55 0B               CALL   prthex   
1929   CD BF 0B               CALL   printStr   
192C   29 0D 0A 00            .CSTR   ")\r\n"   
1930   76                     HALT      
1931   00                     .CSTR      
1932                EXPECTM_0_2699S43:      
1932   E1                     POP   HL   
1933                          ;*Macro unroll:  test "3 5 /x", 6
1933   31 80 41               LD   SP,STACK   
1936   CD C6 0B               CALL   init   
1939   CD D2 40               CALL   execStr   
193C   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1943                          ;*Macro unroll:  expect "3 5 /x",6
1943   E1                     POP   HL   
1944   E5                     PUSH   HL   
1945   11 06 00               LD   DE,6   
1948   B7                     OR   A   
1949   ED 52                  SBC   HL,DE   
194B   7D                     LD   A,L   
194C   B4                     OR   H   
194D   CA A1 19               JP   Z,expectM_0_2700S43   
1950   CD BF 0B               CALL   printStr   
1953   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1960   CD BF 0B               CALL   printStr   
1963   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1972   21 06 00               LD   HL,6   
1975   CD 0D 0B               CALL   prtdec   
1978   CD BF 0B               CALL   printStr   
197B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1988   E1                     POP   hl   
1989   E5                     PUSH   hl   
198A   CD 0D 0B               CALL   prtdec   
198D   E1                     POP   hl   
198E   CD BF 0B               CALL   printStr   
1991   20 28 23 00            .CSTR   " (#"   
1995   CD 55 0B               CALL   prthex   
1998   CD BF 0B               CALL   printStr   
199B   29 0D 0A 00            .CSTR   ")\r\n"   
199F   76                     HALT      
19A0   00                     .CSTR      
19A1                EXPECTM_0_2700S43:      
19A1   E1                     POP   HL   
19A2                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
19A2   31 80 41               LD   SP,STACK   
19A5   CD C6 0B               CALL   init   
19A8   CD D2 40               CALL   execStr   
19AB   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
19BA                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
19BA   E1                     POP   HL   
19BB   E5                     PUSH   HL   
19BC   11 06 00               LD   DE,6   
19BF   B7                     OR   A   
19C0   ED 52                  SBC   HL,DE   
19C2   7D                     LD   A,L   
19C3   B4                     OR   H   
19C4   CA 20 1A               JP   Z,expectM_0_2701S43   
19C7   CD BF 0B               CALL   printStr   
19CA   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
19DF   CD BF 0B               CALL   printStr   
19E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19F1   21 06 00               LD   HL,6   
19F4   CD 0D 0B               CALL   prtdec   
19F7   CD BF 0B               CALL   printStr   
19FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A07   E1                     POP   hl   
1A08   E5                     PUSH   hl   
1A09   CD 0D 0B               CALL   prtdec   
1A0C   E1                     POP   hl   
1A0D   CD BF 0B               CALL   printStr   
1A10   20 28 23 00            .CSTR   " (#"   
1A14   CD 55 0B               CALL   prthex   
1A17   CD BF 0B               CALL   printStr   
1A1A   29 0D 0A 00            .CSTR   ")\r\n"   
1A1E   76                     HALT      
1A1F   00                     .CSTR      
1A20                EXPECTM_0_2701S43:      
1A20   E1                     POP   HL   
1A21                          ;*Macro unroll:  test "2 3 *", 6
1A21   31 80 41               LD   SP,STACK   
1A24   CD C6 0B               CALL   init   
1A27   CD D2 40               CALL   execStr   
1A2A   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A30                          ;*Macro unroll:  expect "2 3 *",6
1A30   E1                     POP   HL   
1A31   E5                     PUSH   HL   
1A32   11 06 00               LD   DE,6   
1A35   B7                     OR   A   
1A36   ED 52                  SBC   HL,DE   
1A38   7D                     LD   A,L   
1A39   B4                     OR   H   
1A3A   CA 8D 1A               JP   Z,expectM_0_2702S43   
1A3D   CD BF 0B               CALL   printStr   
1A40   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1A4C   CD BF 0B               CALL   printStr   
1A4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A5E   21 06 00               LD   HL,6   
1A61   CD 0D 0B               CALL   prtdec   
1A64   CD BF 0B               CALL   printStr   
1A67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A74   E1                     POP   hl   
1A75   E5                     PUSH   hl   
1A76   CD 0D 0B               CALL   prtdec   
1A79   E1                     POP   hl   
1A7A   CD BF 0B               CALL   printStr   
1A7D   20 28 23 00            .CSTR   " (#"   
1A81   CD 55 0B               CALL   prthex   
1A84   CD BF 0B               CALL   printStr   
1A87   29 0D 0A 00            .CSTR   ")\r\n"   
1A8B   76                     HALT      
1A8C   00                     .CSTR      
1A8D                EXPECTM_0_2702S43:      
1A8D   E1                     POP   HL   
1A8E                          ;*Macro unroll:  test "1 2 3 + *", 5
1A8E   31 80 41               LD   SP,STACK   
1A91   CD C6 0B               CALL   init   
1A94   CD D2 40               CALL   execStr   
1A97   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1AA1                          ;*Macro unroll:  expect "1 2 3 + *",5
1AA1   E1                     POP   HL   
1AA2   E5                     PUSH   HL   
1AA3   11 05 00               LD   DE,5   
1AA6   B7                     OR   A   
1AA7   ED 52                  SBC   HL,DE   
1AA9   7D                     LD   A,L   
1AAA   B4                     OR   H   
1AAB   CA 02 1B               JP   Z,expectM_0_2703S43   
1AAE   CD BF 0B               CALL   printStr   
1AB1   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1AC1   CD BF 0B               CALL   printStr   
1AC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD3   21 05 00               LD   HL,5   
1AD6   CD 0D 0B               CALL   prtdec   
1AD9   CD BF 0B               CALL   printStr   
1ADC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AE9   E1                     POP   hl   
1AEA   E5                     PUSH   hl   
1AEB   CD 0D 0B               CALL   prtdec   
1AEE   E1                     POP   hl   
1AEF   CD BF 0B               CALL   printStr   
1AF2   20 28 23 00            .CSTR   " (#"   
1AF6   CD 55 0B               CALL   prthex   
1AF9   CD BF 0B               CALL   printStr   
1AFC   29 0D 0A 00            .CSTR   ")\r\n"   
1B00   76                     HALT      
1B01   00                     .CSTR      
1B02                EXPECTM_0_2703S43:      
1B02   E1                     POP   HL   
1B03                          ;*Macro unroll:  test "7 3 /", 2
1B03   31 80 41               LD   SP,STACK   
1B06   CD C6 0B               CALL   init   
1B09   CD D2 40               CALL   execStr   
1B0C   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1B12                          ;*Macro unroll:  expect "7 3 /",2
1B12   E1                     POP   HL   
1B13   E5                     PUSH   HL   
1B14   11 02 00               LD   DE,2   
1B17   B7                     OR   A   
1B18   ED 52                  SBC   HL,DE   
1B1A   7D                     LD   A,L   
1B1B   B4                     OR   H   
1B1C   CA 6F 1B               JP   Z,expectM_0_2704S43   
1B1F   CD BF 0B               CALL   printStr   
1B22   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B2E   CD BF 0B               CALL   printStr   
1B31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B40   21 02 00               LD   HL,2   
1B43   CD 0D 0B               CALL   prtdec   
1B46   CD BF 0B               CALL   printStr   
1B49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B56   E1                     POP   hl   
1B57   E5                     PUSH   hl   
1B58   CD 0D 0B               CALL   prtdec   
1B5B   E1                     POP   hl   
1B5C   CD BF 0B               CALL   printStr   
1B5F   20 28 23 00            .CSTR   " (#"   
1B63   CD 55 0B               CALL   prthex   
1B66   CD BF 0B               CALL   printStr   
1B69   29 0D 0A 00            .CSTR   ")\r\n"   
1B6D   76                     HALT      
1B6E   00                     .CSTR      
1B6F                EXPECTM_0_2704S43:      
1B6F   E1                     POP   HL   
1B70                          ;*Macro unroll:  test "7 3 / _", 1
1B70   31 80 41               LD   SP,STACK   
1B73   CD C6 0B               CALL   init   
1B76   CD D2 40               CALL   execStr   
1B79   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1B81                          ;*Macro unroll:  expect "7 3 / _",1
1B81   E1                     POP   HL   
1B82   E5                     PUSH   HL   
1B83   11 01 00               LD   DE,1   
1B86   B7                     OR   A   
1B87   ED 52                  SBC   HL,DE   
1B89   7D                     LD   A,L   
1B8A   B4                     OR   H   
1B8B   CA E0 1B               JP   Z,expectM_0_2705S43   
1B8E   CD BF 0B               CALL   printStr   
1B91   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1B9F   CD BF 0B               CALL   printStr   
1BA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB1   21 01 00               LD   HL,1   
1BB4   CD 0D 0B               CALL   prtdec   
1BB7   CD BF 0B               CALL   printStr   
1BBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC7   E1                     POP   hl   
1BC8   E5                     PUSH   hl   
1BC9   CD 0D 0B               CALL   prtdec   
1BCC   E1                     POP   hl   
1BCD   CD BF 0B               CALL   printStr   
1BD0   20 28 23 00            .CSTR   " (#"   
1BD4   CD 55 0B               CALL   prthex   
1BD7   CD BF 0B               CALL   printStr   
1BDA   29 0D 0A 00            .CSTR   ")\r\n"   
1BDE   76                     HALT      
1BDF   00                     .CSTR      
1BE0                EXPECTM_0_2705S43:      
1BE0   E1                     POP   HL   
1BE1                          ;*Macro unroll:  test "7 3 /", 2
1BE1   31 80 41               LD   SP,STACK   
1BE4   CD C6 0B               CALL   init   
1BE7   CD D2 40               CALL   execStr   
1BEA   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1BF0                          ;*Macro unroll:  expect "7 3 /",2
1BF0   E1                     POP   HL   
1BF1   E5                     PUSH   HL   
1BF2   11 02 00               LD   DE,2   
1BF5   B7                     OR   A   
1BF6   ED 52                  SBC   HL,DE   
1BF8   7D                     LD   A,L   
1BF9   B4                     OR   H   
1BFA   CA 4D 1C               JP   Z,expectM_0_2706S43   
1BFD   CD BF 0B               CALL   printStr   
1C00   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C0C   CD BF 0B               CALL   printStr   
1C0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C1E   21 02 00               LD   HL,2   
1C21   CD 0D 0B               CALL   prtdec   
1C24   CD BF 0B               CALL   printStr   
1C27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C34   E1                     POP   hl   
1C35   E5                     PUSH   hl   
1C36   CD 0D 0B               CALL   prtdec   
1C39   E1                     POP   hl   
1C3A   CD BF 0B               CALL   printStr   
1C3D   20 28 23 00            .CSTR   " (#"   
1C41   CD 55 0B               CALL   prthex   
1C44   CD BF 0B               CALL   printStr   
1C47   29 0D 0A 00            .CSTR   ")\r\n"   
1C4B   76                     HALT      
1C4C   00                     .CSTR      
1C4D                EXPECTM_0_2706S43:      
1C4D   E1                     POP   HL   
1C4E                          ;*Macro unroll:  test "2 3 ==", FALSE
1C4E   31 80 41               LD   SP,STACK   
1C51   CD C6 0B               CALL   init   
1C54   CD D2 40               CALL   execStr   
1C57   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1C5E                          ;*Macro unroll:  expect "2 3 ==",FALSE
1C5E   E1                     POP   HL   
1C5F   E5                     PUSH   HL   
1C60   11 00 00               LD   DE,FALSE   
1C63   B7                     OR   A   
1C64   ED 52                  SBC   HL,DE   
1C66   7D                     LD   A,L   
1C67   B4                     OR   H   
1C68   CA BC 1C               JP   Z,expectM_0_2707S43   
1C6B   CD BF 0B               CALL   printStr   
1C6E   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1C7B   CD BF 0B               CALL   printStr   
1C7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C8D   21 00 00               LD   HL,FALSE   
1C90   CD 0D 0B               CALL   prtdec   
1C93   CD BF 0B               CALL   printStr   
1C96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA3   E1                     POP   hl   
1CA4   E5                     PUSH   hl   
1CA5   CD 0D 0B               CALL   prtdec   
1CA8   E1                     POP   hl   
1CA9   CD BF 0B               CALL   printStr   
1CAC   20 28 23 00            .CSTR   " (#"   
1CB0   CD 55 0B               CALL   prthex   
1CB3   CD BF 0B               CALL   printStr   
1CB6   29 0D 0A 00            .CSTR   ")\r\n"   
1CBA   76                     HALT      
1CBB   00                     .CSTR      
1CBC                EXPECTM_0_2707S43:      
1CBC   E1                     POP   HL   
1CBD                          ;*Macro unroll:  test "3 3 ==", TRUE
1CBD   31 80 41               LD   SP,STACK   
1CC0   CD C6 0B               CALL   init   
1CC3   CD D2 40               CALL   execStr   
1CC6   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1CCD                          ;*Macro unroll:  expect "3 3 ==",TRUE
1CCD   E1                     POP   HL   
1CCE   E5                     PUSH   HL   
1CCF   11 FF FF               LD   DE,TRUE   
1CD2   B7                     OR   A   
1CD3   ED 52                  SBC   HL,DE   
1CD5   7D                     LD   A,L   
1CD6   B4                     OR   H   
1CD7   CA 2B 1D               JP   Z,expectM_0_2708S43   
1CDA   CD BF 0B               CALL   printStr   
1CDD   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1CEA   CD BF 0B               CALL   printStr   
1CED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CFC   21 FF FF               LD   HL,TRUE   
1CFF   CD 0D 0B               CALL   prtdec   
1D02   CD BF 0B               CALL   printStr   
1D05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D12   E1                     POP   hl   
1D13   E5                     PUSH   hl   
1D14   CD 0D 0B               CALL   prtdec   
1D17   E1                     POP   hl   
1D18   CD BF 0B               CALL   printStr   
1D1B   20 28 23 00            .CSTR   " (#"   
1D1F   CD 55 0B               CALL   prthex   
1D22   CD BF 0B               CALL   printStr   
1D25   29 0D 0A 00            .CSTR   ")\r\n"   
1D29   76                     HALT      
1D2A   00                     .CSTR      
1D2B                EXPECTM_0_2708S43:      
1D2B   E1                     POP   HL   
1D2C                          ;*Macro unroll:  test "1 2 <", TRUE
1D2C   31 80 41               LD   SP,STACK   
1D2F   CD C6 0B               CALL   init   
1D32   CD D2 40               CALL   execStr   
1D35   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D3B                          ;*Macro unroll:  expect "1 2 <",TRUE
1D3B   E1                     POP   HL   
1D3C   E5                     PUSH   HL   
1D3D   11 FF FF               LD   DE,TRUE   
1D40   B7                     OR   A   
1D41   ED 52                  SBC   HL,DE   
1D43   7D                     LD   A,L   
1D44   B4                     OR   H   
1D45   CA 98 1D               JP   Z,expectM_0_2709S43   
1D48   CD BF 0B               CALL   printStr   
1D4B   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1D57   CD BF 0B               CALL   printStr   
1D5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D69   21 FF FF               LD   HL,TRUE   
1D6C   CD 0D 0B               CALL   prtdec   
1D6F   CD BF 0B               CALL   printStr   
1D72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7F   E1                     POP   hl   
1D80   E5                     PUSH   hl   
1D81   CD 0D 0B               CALL   prtdec   
1D84   E1                     POP   hl   
1D85   CD BF 0B               CALL   printStr   
1D88   20 28 23 00            .CSTR   " (#"   
1D8C   CD 55 0B               CALL   prthex   
1D8F   CD BF 0B               CALL   printStr   
1D92   29 0D 0A 00            .CSTR   ")\r\n"   
1D96   76                     HALT      
1D97   00                     .CSTR      
1D98                EXPECTM_0_2709S43:      
1D98   E1                     POP   HL   
1D99                          ;*Macro unroll:  test "2 1 <", FALSE
1D99   31 80 41               LD   SP,STACK   
1D9C   CD C6 0B               CALL   init   
1D9F   CD D2 40               CALL   execStr   
1DA2   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1DA8                          ;*Macro unroll:  expect "2 1 <",FALSE
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 00 00               LD   DE,FALSE   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 05 1E               JP   Z,expectM_0_2710S43   
1DB5   CD BF 0B               CALL   printStr   
1DB8   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1DC4   CD BF 0B               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 00 00               LD   HL,FALSE   
1DD9   CD 0D 0B               CALL   prtdec   
1DDC   CD BF 0B               CALL   printStr   
1DDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DEC   E1                     POP   hl   
1DED   E5                     PUSH   hl   
1DEE   CD 0D 0B               CALL   prtdec   
1DF1   E1                     POP   hl   
1DF2   CD BF 0B               CALL   printStr   
1DF5   20 28 23 00            .CSTR   " (#"   
1DF9   CD 55 0B               CALL   prthex   
1DFC   CD BF 0B               CALL   printStr   
1DFF   29 0D 0A 00            .CSTR   ")\r\n"   
1E03   76                     HALT      
1E04   00                     .CSTR      
1E05                EXPECTM_0_2710S43:      
1E05   E1                     POP   HL   
1E06                          ;*Macro unroll:  test "2 3 <", TRUE
1E06   31 80 41               LD   SP,STACK   
1E09   CD C6 0B               CALL   init   
1E0C   CD D2 40               CALL   execStr   
1E0F   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E15                          ;*Macro unroll:  expect "2 3 <",TRUE
1E15   E1                     POP   HL   
1E16   E5                     PUSH   HL   
1E17   11 FF FF               LD   DE,TRUE   
1E1A   B7                     OR   A   
1E1B   ED 52                  SBC   HL,DE   
1E1D   7D                     LD   A,L   
1E1E   B4                     OR   H   
1E1F   CA 72 1E               JP   Z,expectM_0_2711S43   
1E22   CD BF 0B               CALL   printStr   
1E25   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E31   CD BF 0B               CALL   printStr   
1E34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E43   21 FF FF               LD   HL,TRUE   
1E46   CD 0D 0B               CALL   prtdec   
1E49   CD BF 0B               CALL   printStr   
1E4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E59   E1                     POP   hl   
1E5A   E5                     PUSH   hl   
1E5B   CD 0D 0B               CALL   prtdec   
1E5E   E1                     POP   hl   
1E5F   CD BF 0B               CALL   printStr   
1E62   20 28 23 00            .CSTR   " (#"   
1E66   CD 55 0B               CALL   prthex   
1E69   CD BF 0B               CALL   printStr   
1E6C   29 0D 0A 00            .CSTR   ")\r\n"   
1E70   76                     HALT      
1E71   00                     .CSTR      
1E72                EXPECTM_0_2711S43:      
1E72   E1                     POP   HL   
1E73                          ;*Macro unroll:  test "3 3 <", FALSE
1E73   31 80 41               LD   SP,STACK   
1E76   CD C6 0B               CALL   init   
1E79   CD D2 40               CALL   execStr   
1E7C   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1E82                          ;*Macro unroll:  expect "3 3 <",FALSE
1E82   E1                     POP   HL   
1E83   E5                     PUSH   HL   
1E84   11 00 00               LD   DE,FALSE   
1E87   B7                     OR   A   
1E88   ED 52                  SBC   HL,DE   
1E8A   7D                     LD   A,L   
1E8B   B4                     OR   H   
1E8C   CA DF 1E               JP   Z,expectM_0_2712S43   
1E8F   CD BF 0B               CALL   printStr   
1E92   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1E9E   CD BF 0B               CALL   printStr   
1EA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB0   21 00 00               LD   HL,FALSE   
1EB3   CD 0D 0B               CALL   prtdec   
1EB6   CD BF 0B               CALL   printStr   
1EB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC6   E1                     POP   hl   
1EC7   E5                     PUSH   hl   
1EC8   CD 0D 0B               CALL   prtdec   
1ECB   E1                     POP   hl   
1ECC   CD BF 0B               CALL   printStr   
1ECF   20 28 23 00            .CSTR   " (#"   
1ED3   CD 55 0B               CALL   prthex   
1ED6   CD BF 0B               CALL   printStr   
1ED9   29 0D 0A 00            .CSTR   ")\r\n"   
1EDD   76                     HALT      
1EDE   00                     .CSTR      
1EDF                EXPECTM_0_2712S43:      
1EDF   E1                     POP   HL   
1EE0                          ;*Macro unroll:  test "1 2 >", FALSE
1EE0   31 80 41               LD   SP,STACK   
1EE3   CD C6 0B               CALL   init   
1EE6   CD D2 40               CALL   execStr   
1EE9   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1EEF                          ;*Macro unroll:  expect "1 2 >",FALSE
1EEF   E1                     POP   HL   
1EF0   E5                     PUSH   HL   
1EF1   11 00 00               LD   DE,FALSE   
1EF4   B7                     OR   A   
1EF5   ED 52                  SBC   HL,DE   
1EF7   7D                     LD   A,L   
1EF8   B4                     OR   H   
1EF9   CA 4C 1F               JP   Z,expectM_0_2713S43   
1EFC   CD BF 0B               CALL   printStr   
1EFF   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F0B   CD BF 0B               CALL   printStr   
1F0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1D   21 00 00               LD   HL,FALSE   
1F20   CD 0D 0B               CALL   prtdec   
1F23   CD BF 0B               CALL   printStr   
1F26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F33   E1                     POP   hl   
1F34   E5                     PUSH   hl   
1F35   CD 0D 0B               CALL   prtdec   
1F38   E1                     POP   hl   
1F39   CD BF 0B               CALL   printStr   
1F3C   20 28 23 00            .CSTR   " (#"   
1F40   CD 55 0B               CALL   prthex   
1F43   CD BF 0B               CALL   printStr   
1F46   29 0D 0A 00            .CSTR   ")\r\n"   
1F4A   76                     HALT      
1F4B   00                     .CSTR      
1F4C                EXPECTM_0_2713S43:      
1F4C   E1                     POP   HL   
1F4D                          ;*Macro unroll:  test "2 1 >", TRUE
1F4D   31 80 41               LD   SP,STACK   
1F50   CD C6 0B               CALL   init   
1F53   CD D2 40               CALL   execStr   
1F56   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1F5C                          ;*Macro unroll:  expect "2 1 >",TRUE
1F5C   E1                     POP   HL   
1F5D   E5                     PUSH   HL   
1F5E   11 FF FF               LD   DE,TRUE   
1F61   B7                     OR   A   
1F62   ED 52                  SBC   HL,DE   
1F64   7D                     LD   A,L   
1F65   B4                     OR   H   
1F66   CA B9 1F               JP   Z,expectM_0_2714S43   
1F69   CD BF 0B               CALL   printStr   
1F6C   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1F78   CD BF 0B               CALL   printStr   
1F7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8A   21 FF FF               LD   HL,TRUE   
1F8D   CD 0D 0B               CALL   prtdec   
1F90   CD BF 0B               CALL   printStr   
1F93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA0   E1                     POP   hl   
1FA1   E5                     PUSH   hl   
1FA2   CD 0D 0B               CALL   prtdec   
1FA5   E1                     POP   hl   
1FA6   CD BF 0B               CALL   printStr   
1FA9   20 28 23 00            .CSTR   " (#"   
1FAD   CD 55 0B               CALL   prthex   
1FB0   CD BF 0B               CALL   printStr   
1FB3   29 0D 0A 00            .CSTR   ")\r\n"   
1FB7   76                     HALT      
1FB8   00                     .CSTR      
1FB9                EXPECTM_0_2714S43:      
1FB9   E1                     POP   HL   
1FBA                          ;*Macro unroll:  test "3 3 >", FALSE
1FBA   31 80 41               LD   SP,STACK   
1FBD   CD C6 0B               CALL   init   
1FC0   CD D2 40               CALL   execStr   
1FC3   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1FC9                          ;*Macro unroll:  expect "3 3 >",FALSE
1FC9   E1                     POP   HL   
1FCA   E5                     PUSH   HL   
1FCB   11 00 00               LD   DE,FALSE   
1FCE   B7                     OR   A   
1FCF   ED 52                  SBC   HL,DE   
1FD1   7D                     LD   A,L   
1FD2   B4                     OR   H   
1FD3   CA 26 20               JP   Z,expectM_0_2715S43   
1FD6   CD BF 0B               CALL   printStr   
1FD9   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1FE5   CD BF 0B               CALL   printStr   
1FE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF7   21 00 00               LD   HL,FALSE   
1FFA   CD 0D 0B               CALL   prtdec   
1FFD   CD BF 0B               CALL   printStr   
2000   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200D   E1                     POP   hl   
200E   E5                     PUSH   hl   
200F   CD 0D 0B               CALL   prtdec   
2012   E1                     POP   hl   
2013   CD BF 0B               CALL   printStr   
2016   20 28 23 00            .CSTR   " (#"   
201A   CD 55 0B               CALL   prthex   
201D   CD BF 0B               CALL   printStr   
2020   29 0D 0A 00            .CSTR   ")\r\n"   
2024   76                     HALT      
2025   00                     .CSTR      
2026                EXPECTM_0_2715S43:      
2026   E1                     POP   HL   
2027                          ;*Macro unroll:  test "4 3 >", TRUE
2027   31 80 41               LD   SP,STACK   
202A   CD C6 0B               CALL   init   
202D   CD D2 40               CALL   execStr   
2030   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2036                          ;*Macro unroll:  expect "4 3 >",TRUE
2036   E1                     POP   HL   
2037   E5                     PUSH   HL   
2038   11 FF FF               LD   DE,TRUE   
203B   B7                     OR   A   
203C   ED 52                  SBC   HL,DE   
203E   7D                     LD   A,L   
203F   B4                     OR   H   
2040   CA 93 20               JP   Z,expectM_0_2716S43   
2043   CD BF 0B               CALL   printStr   
2046   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2052   CD BF 0B               CALL   printStr   
2055   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2064   21 FF FF               LD   HL,TRUE   
2067   CD 0D 0B               CALL   prtdec   
206A   CD BF 0B               CALL   printStr   
206D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
207A   E1                     POP   hl   
207B   E5                     PUSH   hl   
207C   CD 0D 0B               CALL   prtdec   
207F   E1                     POP   hl   
2080   CD BF 0B               CALL   printStr   
2083   20 28 23 00            .CSTR   " (#"   
2087   CD 55 0B               CALL   prthex   
208A   CD BF 0B               CALL   printStr   
208D   29 0D 0A 00            .CSTR   ")\r\n"   
2091   76                     HALT      
2092   00                     .CSTR      
2093                EXPECTM_0_2716S43:      
2093   E1                     POP   HL   
2094                          ;*Macro unroll:  test "2 2 <=", TRUE
2094   31 80 41               LD   SP,STACK   
2097   CD C6 0B               CALL   init   
209A   CD D2 40               CALL   execStr   
209D   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20A4                          ;*Macro unroll:  expect "2 2 <=",TRUE
20A4   E1                     POP   HL   
20A5   E5                     PUSH   HL   
20A6   11 FF FF               LD   DE,TRUE   
20A9   B7                     OR   A   
20AA   ED 52                  SBC   HL,DE   
20AC   7D                     LD   A,L   
20AD   B4                     OR   H   
20AE   CA 02 21               JP   Z,expectM_0_2717S43   
20B1   CD BF 0B               CALL   printStr   
20B4   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
20C1   CD BF 0B               CALL   printStr   
20C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D3   21 FF FF               LD   HL,TRUE   
20D6   CD 0D 0B               CALL   prtdec   
20D9   CD BF 0B               CALL   printStr   
20DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E9   E1                     POP   hl   
20EA   E5                     PUSH   hl   
20EB   CD 0D 0B               CALL   prtdec   
20EE   E1                     POP   hl   
20EF   CD BF 0B               CALL   printStr   
20F2   20 28 23 00            .CSTR   " (#"   
20F6   CD 55 0B               CALL   prthex   
20F9   CD BF 0B               CALL   printStr   
20FC   29 0D 0A 00            .CSTR   ")\r\n"   
2100   76                     HALT      
2101   00                     .CSTR      
2102                EXPECTM_0_2717S43:      
2102   E1                     POP   HL   
2103                          ;*Macro unroll:  test "2 2 >=", TRUE
2103   31 80 41               LD   SP,STACK   
2106   CD C6 0B               CALL   init   
2109   CD D2 40               CALL   execStr   
210C   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2113                          ;*Macro unroll:  expect "2 2 >=",TRUE
2113   E1                     POP   HL   
2114   E5                     PUSH   HL   
2115   11 FF FF               LD   DE,TRUE   
2118   B7                     OR   A   
2119   ED 52                  SBC   HL,DE   
211B   7D                     LD   A,L   
211C   B4                     OR   H   
211D   CA 71 21               JP   Z,expectM_0_2718S43   
2120   CD BF 0B               CALL   printStr   
2123   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2130   CD BF 0B               CALL   printStr   
2133   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2142   21 FF FF               LD   HL,TRUE   
2145   CD 0D 0B               CALL   prtdec   
2148   CD BF 0B               CALL   printStr   
214B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2158   E1                     POP   hl   
2159   E5                     PUSH   hl   
215A   CD 0D 0B               CALL   prtdec   
215D   E1                     POP   hl   
215E   CD BF 0B               CALL   printStr   
2161   20 28 23 00            .CSTR   " (#"   
2165   CD 55 0B               CALL   prthex   
2168   CD BF 0B               CALL   printStr   
216B   29 0D 0A 00            .CSTR   ")\r\n"   
216F   76                     HALT      
2170   00                     .CSTR      
2171                EXPECTM_0_2718S43:      
2171   E1                     POP   HL   
2172                          ;*Macro unroll:  test "3 1 <<", 6
2172   31 80 41               LD   SP,STACK   
2175   CD C6 0B               CALL   init   
2178   CD D2 40               CALL   execStr   
217B   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2182                          ;*Macro unroll:  expect "3 1 <<",6
2182   E1                     POP   HL   
2183   E5                     PUSH   HL   
2184   11 06 00               LD   DE,6   
2187   B7                     OR   A   
2188   ED 52                  SBC   HL,DE   
218A   7D                     LD   A,L   
218B   B4                     OR   H   
218C   CA E0 21               JP   Z,expectM_0_2719S43   
218F   CD BF 0B               CALL   printStr   
2192   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
219F   CD BF 0B               CALL   printStr   
21A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21B1   21 06 00               LD   HL,6   
21B4   CD 0D 0B               CALL   prtdec   
21B7   CD BF 0B               CALL   printStr   
21BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21C7   E1                     POP   hl   
21C8   E5                     PUSH   hl   
21C9   CD 0D 0B               CALL   prtdec   
21CC   E1                     POP   hl   
21CD   CD BF 0B               CALL   printStr   
21D0   20 28 23 00            .CSTR   " (#"   
21D4   CD 55 0B               CALL   prthex   
21D7   CD BF 0B               CALL   printStr   
21DA   29 0D 0A 00            .CSTR   ")\r\n"   
21DE   76                     HALT      
21DF   00                     .CSTR      
21E0                EXPECTM_0_2719S43:      
21E0   E1                     POP   HL   
21E1                          ;*Macro unroll:  test "10 1 >>", 5
21E1   31 80 41               LD   SP,STACK   
21E4   CD C6 0B               CALL   init   
21E7   CD D2 40               CALL   execStr   
21EA   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
21F2                          ;*Macro unroll:  expect "10 1 >>",5
21F2   E1                     POP   HL   
21F3   E5                     PUSH   HL   
21F4   11 05 00               LD   DE,5   
21F7   B7                     OR   A   
21F8   ED 52                  SBC   HL,DE   
21FA   7D                     LD   A,L   
21FB   B4                     OR   H   
21FC   CA 51 22               JP   Z,expectM_0_2720S43   
21FF   CD BF 0B               CALL   printStr   
2202   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2210   CD BF 0B               CALL   printStr   
2213   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2222   21 05 00               LD   HL,5   
2225   CD 0D 0B               CALL   prtdec   
2228   CD BF 0B               CALL   printStr   
222B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2238   E1                     POP   hl   
2239   E5                     PUSH   hl   
223A   CD 0D 0B               CALL   prtdec   
223D   E1                     POP   hl   
223E   CD BF 0B               CALL   printStr   
2241   20 28 23 00            .CSTR   " (#"   
2245   CD 55 0B               CALL   prthex   
2248   CD BF 0B               CALL   printStr   
224B   29 0D 0A 00            .CSTR   ")\r\n"   
224F   76                     HALT      
2250   00                     .CSTR      
2251                EXPECTM_0_2720S43:      
2251   E1                     POP   HL   
2252                          ;*Macro unroll:  test "1 x = x", 1
2252   31 80 41               LD   SP,STACK   
2255   CD C6 0B               CALL   init   
2258   CD D2 40               CALL   execStr   
225B   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
2263                          ;*Macro unroll:  expect "1 x = x",1
2263   E1                     POP   HL   
2264   E5                     PUSH   HL   
2265   11 01 00               LD   DE,1   
2268   B7                     OR   A   
2269   ED 52                  SBC   HL,DE   
226B   7D                     LD   A,L   
226C   B4                     OR   H   
226D   CA C2 22               JP   Z,expectM_0_2721S43   
2270   CD BF 0B               CALL   printStr   
2273   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2281   CD BF 0B               CALL   printStr   
2284   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2293   21 01 00               LD   HL,1   
2296   CD 0D 0B               CALL   prtdec   
2299   CD BF 0B               CALL   printStr   
229C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A9   E1                     POP   hl   
22AA   E5                     PUSH   hl   
22AB   CD 0D 0B               CALL   prtdec   
22AE   E1                     POP   hl   
22AF   CD BF 0B               CALL   printStr   
22B2   20 28 23 00            .CSTR   " (#"   
22B6   CD 55 0B               CALL   prthex   
22B9   CD BF 0B               CALL   printStr   
22BC   29 0D 0A 00            .CSTR   ")\r\n"   
22C0   76                     HALT      
22C1   00                     .CSTR      
22C2                EXPECTM_0_2721S43:      
22C2   E1                     POP   HL   
22C3                          ;*Macro unroll:  test "1{}^", 1
22C3   31 80 41               LD   SP,STACK   
22C6   CD C6 0B               CALL   init   
22C9   CD D2 40               CALL   execStr   
22CC   31 7B 7D 5E 00         .CSTR   "1{}^"   
22D1                          ;*Macro unroll:  expect "1{}^",1
22D1   E1                     POP   HL   
22D2   E5                     PUSH   HL   
22D3   11 01 00               LD   DE,1   
22D6   B7                     OR   A   
22D7   ED 52                  SBC   HL,DE   
22D9   7D                     LD   A,L   
22DA   B4                     OR   H   
22DB   CA 2D 23               JP   Z,expectM_0_2722S43   
22DE   CD BF 0B               CALL   printStr   
22E1   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
22EC   CD BF 0B               CALL   printStr   
22EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22FE   21 01 00               LD   HL,1   
2301   CD 0D 0B               CALL   prtdec   
2304   CD BF 0B               CALL   printStr   
2307   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2314   E1                     POP   hl   
2315   E5                     PUSH   hl   
2316   CD 0D 0B               CALL   prtdec   
2319   E1                     POP   hl   
231A   CD BF 0B               CALL   printStr   
231D   20 28 23 00            .CSTR   " (#"   
2321   CD 55 0B               CALL   prthex   
2324   CD BF 0B               CALL   printStr   
2327   29 0D 0A 00            .CSTR   ")\r\n"   
232B   76                     HALT      
232C   00                     .CSTR      
232D                EXPECTM_0_2722S43:      
232D   E1                     POP   HL   
232E                          ;*Macro unroll:  test "{1}^", 1
232E   31 80 41               LD   SP,STACK   
2331   CD C6 0B               CALL   init   
2334   CD D2 40               CALL   execStr   
2337   7B 31 7D 5E 00         .CSTR   "{1}^"   
233C                          ;*Macro unroll:  expect "{1}^",1
233C   E1                     POP   HL   
233D   E5                     PUSH   HL   
233E   11 01 00               LD   DE,1   
2341   B7                     OR   A   
2342   ED 52                  SBC   HL,DE   
2344   7D                     LD   A,L   
2345   B4                     OR   H   
2346   CA 98 23               JP   Z,expectM_0_2723S43   
2349   CD BF 0B               CALL   printStr   
234C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2357   CD BF 0B               CALL   printStr   
235A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2369   21 01 00               LD   HL,1   
236C   CD 0D 0B               CALL   prtdec   
236F   CD BF 0B               CALL   printStr   
2372   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237F   E1                     POP   hl   
2380   E5                     PUSH   hl   
2381   CD 0D 0B               CALL   prtdec   
2384   E1                     POP   hl   
2385   CD BF 0B               CALL   printStr   
2388   20 28 23 00            .CSTR   " (#"   
238C   CD 55 0B               CALL   prthex   
238F   CD BF 0B               CALL   printStr   
2392   29 0D 0A 00            .CSTR   ")\r\n"   
2396   76                     HALT      
2397   00                     .CSTR      
2398                EXPECTM_0_2723S43:      
2398   E1                     POP   HL   
2399                          ;*Macro unroll:  test "{{1}^}^", 1
2399   31 80 41               LD   SP,STACK   
239C   CD C6 0B               CALL   init   
239F   CD D2 40               CALL   execStr   
23A2   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23AA                          ;*Macro unroll:  expect "{{1}^}^",1
23AA   E1                     POP   HL   
23AB   E5                     PUSH   HL   
23AC   11 01 00               LD   DE,1   
23AF   B7                     OR   A   
23B0   ED 52                  SBC   HL,DE   
23B2   7D                     LD   A,L   
23B3   B4                     OR   H   
23B4   CA 09 24               JP   Z,expectM_0_2724S43   
23B7   CD BF 0B               CALL   printStr   
23BA   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
23C8   CD BF 0B               CALL   printStr   
23CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23DA   21 01 00               LD   HL,1   
23DD   CD 0D 0B               CALL   prtdec   
23E0   CD BF 0B               CALL   printStr   
23E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F0   E1                     POP   hl   
23F1   E5                     PUSH   hl   
23F2   CD 0D 0B               CALL   prtdec   
23F5   E1                     POP   hl   
23F6   CD BF 0B               CALL   printStr   
23F9   20 28 23 00            .CSTR   " (#"   
23FD   CD 55 0B               CALL   prthex   
2400   CD BF 0B               CALL   printStr   
2403   29 0D 0A 00            .CSTR   ")\r\n"   
2407   76                     HALT      
2408   00                     .CSTR      
2409                EXPECTM_0_2724S43:      
2409   E1                     POP   HL   
240A                          ;*Macro unroll:  test "{{{1}^}^}^", 1
240A   31 80 41               LD   SP,STACK   
240D   CD C6 0B               CALL   init   
2410   CD D2 40               CALL   execStr   
2413   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
241E                          ;*Macro unroll:  expect "{{{1}^}^}^",1
241E   E1                     POP   HL   
241F   E5                     PUSH   HL   
2420   11 01 00               LD   DE,1   
2423   B7                     OR   A   
2424   ED 52                  SBC   HL,DE   
2426   7D                     LD   A,L   
2427   B4                     OR   H   
2428   CA 80 24               JP   Z,expectM_0_2725S43   
242B   CD BF 0B               CALL   printStr   
242E   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
243F   CD BF 0B               CALL   printStr   
2442   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2451   21 01 00               LD   HL,1   
2454   CD 0D 0B               CALL   prtdec   
2457   CD BF 0B               CALL   printStr   
245A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2467   E1                     POP   hl   
2468   E5                     PUSH   hl   
2469   CD 0D 0B               CALL   prtdec   
246C   E1                     POP   hl   
246D   CD BF 0B               CALL   printStr   
2470   20 28 23 00            .CSTR   " (#"   
2474   CD 55 0B               CALL   prthex   
2477   CD BF 0B               CALL   printStr   
247A   29 0D 0A 00            .CSTR   ")\r\n"   
247E   76                     HALT      
247F   00                     .CSTR      
2480                EXPECTM_0_2725S43:      
2480   E1                     POP   HL   
2481                          ;*Macro unroll:  test "5 /f{10} ?", 5
2481   31 80 41               LD   SP,STACK   
2484   CD C6 0B               CALL   init   
2487   CD D2 40               CALL   execStr   
248A   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
2495                          ;*Macro unroll:  expect "5 /f{10} ?",5
2495   E1                     POP   HL   
2496   E5                     PUSH   HL   
2497   11 05 00               LD   DE,5   
249A   B7                     OR   A   
249B   ED 52                  SBC   HL,DE   
249D   7D                     LD   A,L   
249E   B4                     OR   H   
249F   CA F7 24               JP   Z,expectM_0_2726S43   
24A2   CD BF 0B               CALL   printStr   
24A5   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
24B6   CD BF 0B               CALL   printStr   
24B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C8   21 05 00               LD   HL,5   
24CB   CD 0D 0B               CALL   prtdec   
24CE   CD BF 0B               CALL   printStr   
24D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DE   E1                     POP   hl   
24DF   E5                     PUSH   hl   
24E0   CD 0D 0B               CALL   prtdec   
24E3   E1                     POP   hl   
24E4   CD BF 0B               CALL   printStr   
24E7   20 28 23 00            .CSTR   " (#"   
24EB   CD 55 0B               CALL   prthex   
24EE   CD BF 0B               CALL   printStr   
24F1   29 0D 0A 00            .CSTR   ")\r\n"   
24F5   76                     HALT      
24F6   00                     .CSTR      
24F7                EXPECTM_0_2726S43:      
24F7   E1                     POP   HL   
24F8                          ;*Macro unroll:  test "5 /t{10} ? +", 15
24F8   31 80 41               LD   SP,STACK   
24FB   CD C6 0B               CALL   init   
24FE   CD D2 40               CALL   execStr   
2501   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
250E                          ;*Macro unroll:  expect "5 /t{10} ? +",15
250E   E1                     POP   HL   
250F   E5                     PUSH   HL   
2510   11 0F 00               LD   DE,15   
2513   B7                     OR   A   
2514   ED 52                  SBC   HL,DE   
2516   7D                     LD   A,L   
2517   B4                     OR   H   
2518   CA 72 25               JP   Z,expectM_0_2727S43   
251B   CD BF 0B               CALL   printStr   
251E   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2531   CD BF 0B               CALL   printStr   
2534   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2543   21 0F 00               LD   HL,15   
2546   CD 0D 0B               CALL   prtdec   
2549   CD BF 0B               CALL   printStr   
254C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2559   E1                     POP   hl   
255A   E5                     PUSH   hl   
255B   CD 0D 0B               CALL   prtdec   
255E   E1                     POP   hl   
255F   CD BF 0B               CALL   printStr   
2562   20 28 23 00            .CSTR   " (#"   
2566   CD 55 0B               CALL   prthex   
2569   CD BF 0B               CALL   printStr   
256C   29 0D 0A 00            .CSTR   ")\r\n"   
2570   76                     HALT      
2571   00                     .CSTR      
2572                EXPECTM_0_2727S43:      
2572   E1                     POP   HL   
2573                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2573   31 80 41               LD   SP,STACK   
2576   CD C6 0B               CALL   init   
2579   CD D2 40               CALL   execStr   
257C   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
258E                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
258E   E1                     POP   HL   
258F   E5                     PUSH   HL   
2590   11 15 00               LD   DE,21   
2593   B7                     OR   A   
2594   ED 52                  SBC   HL,DE   
2596   7D                     LD   A,L   
2597   B4                     OR   H   
2598   CA F7 25               JP   Z,expectM_0_2728S43   
259B   CD BF 0B               CALL   printStr   
259E   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
25B6   CD BF 0B               CALL   printStr   
25B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C8   21 15 00               LD   HL,21   
25CB   CD 0D 0B               CALL   prtdec   
25CE   CD BF 0B               CALL   printStr   
25D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DE   E1                     POP   hl   
25DF   E5                     PUSH   hl   
25E0   CD 0D 0B               CALL   prtdec   
25E3   E1                     POP   hl   
25E4   CD BF 0B               CALL   printStr   
25E7   20 28 23 00            .CSTR   " (#"   
25EB   CD 55 0B               CALL   prthex   
25EE   CD BF 0B               CALL   printStr   
25F1   29 0D 0A 00            .CSTR   ")\r\n"   
25F5   76                     HALT      
25F6   00                     .CSTR      
25F7                EXPECTM_0_2728S43:      
25F7   E1                     POP   HL   
25F8                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
25F8   31 80 41               LD   SP,STACK   
25FB   CD C6 0B               CALL   init   
25FE   CD D2 40               CALL   execStr   
2601   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
2613                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
2613   E1                     POP   HL   
2614   E5                     PUSH   HL   
2615   11 0B 00               LD   DE,11   
2618   B7                     OR   A   
2619   ED 52                  SBC   HL,DE   
261B   7D                     LD   A,L   
261C   B4                     OR   H   
261D   CA 7C 26               JP   Z,expectM_0_2729S43   
2620   CD BF 0B               CALL   printStr   
2623   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
263B   CD BF 0B               CALL   printStr   
263E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264D   21 0B 00               LD   HL,11   
2650   CD 0D 0B               CALL   prtdec   
2653   CD BF 0B               CALL   printStr   
2656   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2663   E1                     POP   hl   
2664   E5                     PUSH   hl   
2665   CD 0D 0B               CALL   prtdec   
2668   E1                     POP   hl   
2669   CD BF 0B               CALL   printStr   
266C   20 28 23 00            .CSTR   " (#"   
2670   CD 55 0B               CALL   prthex   
2673   CD BF 0B               CALL   printStr   
2676   29 0D 0A 00            .CSTR   ")\r\n"   
267A   76                     HALT      
267B   00                     .CSTR      
267C                EXPECTM_0_2729S43:      
267C   E1                     POP   HL   
267D                          ;*Macro unroll:  test ": -2%", $0000
267D   31 80 41               LD   SP,STACK   
2680   CD C6 0B               CALL   init   
2683   CD D2 40               CALL   execStr   
2686   3A 20 2D 32 25 00      .CSTR   ": -2%"   
268C                          ;*Macro unroll:  expect ": -2%",$0000
268C   E1                     POP   HL   
268D   E5                     PUSH   HL   
268E   11 00 00               LD   DE,$0000   
2691   B7                     OR   A   
2692   ED 52                  SBC   HL,DE   
2694   7D                     LD   A,L   
2695   B4                     OR   H   
2696   CA E9 26               JP   Z,expectM_0_2730S43   
2699   CD BF 0B               CALL   printStr   
269C   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
26A8   CD BF 0B               CALL   printStr   
26AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26BA   21 00 00               LD   HL,$0000   
26BD   CD 0D 0B               CALL   prtdec   
26C0   CD BF 0B               CALL   printStr   
26C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D0   E1                     POP   hl   
26D1   E5                     PUSH   hl   
26D2   CD 0D 0B               CALL   prtdec   
26D5   E1                     POP   hl   
26D6   CD BF 0B               CALL   printStr   
26D9   20 28 23 00            .CSTR   " (#"   
26DD   CD 55 0B               CALL   prthex   
26E0   CD BF 0B               CALL   printStr   
26E3   29 0D 0A 00            .CSTR   ")\r\n"   
26E7   76                     HALT      
26E8   00                     .CSTR      
26E9                EXPECTM_0_2730S43:      
26E9   E1                     POP   HL   
26EA                          ;*Macro unroll:  test ":a -1%", $0001
26EA   31 80 41               LD   SP,STACK   
26ED   CD C6 0B               CALL   init   
26F0   CD D2 40               CALL   execStr   
26F3   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
26FA                          ;*Macro unroll:  expect ":a -1%",$0001
26FA   E1                     POP   HL   
26FB   E5                     PUSH   HL   
26FC   11 01 00               LD   DE,$0001   
26FF   B7                     OR   A   
2700   ED 52                  SBC   HL,DE   
2702   7D                     LD   A,L   
2703   B4                     OR   H   
2704   CA 58 27               JP   Z,expectM_0_2731S43   
2707   CD BF 0B               CALL   printStr   
270A   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
2717   CD BF 0B               CALL   printStr   
271A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2729   21 01 00               LD   HL,$0001   
272C   CD 0D 0B               CALL   prtdec   
272F   CD BF 0B               CALL   printStr   
2732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
273F   E1                     POP   hl   
2740   E5                     PUSH   hl   
2741   CD 0D 0B               CALL   prtdec   
2744   E1                     POP   hl   
2745   CD BF 0B               CALL   printStr   
2748   20 28 23 00            .CSTR   " (#"   
274C   CD 55 0B               CALL   prthex   
274F   CD BF 0B               CALL   printStr   
2752   29 0D 0A 00            .CSTR   ")\r\n"   
2756   76                     HALT      
2757   00                     .CSTR      
2758                EXPECTM_0_2731S43:      
2758   E1                     POP   HL   
2759                          ;*Macro unroll:  test ":a: -1%", $0001
2759   31 80 41               LD   SP,STACK   
275C   CD C6 0B               CALL   init   
275F   CD D2 40               CALL   execStr   
2762   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
276A                          ;*Macro unroll:  expect ":a: -1%",$0001
276A   E1                     POP   HL   
276B   E5                     PUSH   HL   
276C   11 01 00               LD   DE,$0001   
276F   B7                     OR   A   
2770   ED 52                  SBC   HL,DE   
2772   7D                     LD   A,L   
2773   B4                     OR   H   
2774   CA C9 27               JP   Z,expectM_0_2732S43   
2777   CD BF 0B               CALL   printStr   
277A   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2788   CD BF 0B               CALL   printStr   
278B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
279A   21 01 00               LD   HL,$0001   
279D   CD 0D 0B               CALL   prtdec   
27A0   CD BF 0B               CALL   printStr   
27A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27B0   E1                     POP   hl   
27B1   E5                     PUSH   hl   
27B2   CD 0D 0B               CALL   prtdec   
27B5   E1                     POP   hl   
27B6   CD BF 0B               CALL   printStr   
27B9   20 28 23 00            .CSTR   " (#"   
27BD   CD 55 0B               CALL   prthex   
27C0   CD BF 0B               CALL   printStr   
27C3   29 0D 0A 00            .CSTR   ")\r\n"   
27C7   76                     HALT      
27C8   00                     .CSTR      
27C9                EXPECTM_0_2732S43:      
27C9   E1                     POP   HL   
27CA                          ;*Macro unroll:  test ":a:b -1%", $0102
27CA   31 80 41               LD   SP,STACK   
27CD   CD C6 0B               CALL   init   
27D0   CD D2 40               CALL   execStr   
27D3   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
27DC                          ;*Macro unroll:  expect ":a:b -1%",$0102
27DC   E1                     POP   HL   
27DD   E5                     PUSH   HL   
27DE   11 02 01               LD   DE,$0102   
27E1   B7                     OR   A   
27E2   ED 52                  SBC   HL,DE   
27E4   7D                     LD   A,L   
27E5   B4                     OR   H   
27E6   CA 3C 28               JP   Z,expectM_0_2733S43   
27E9   CD BF 0B               CALL   printStr   
27EC   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
27FB   CD BF 0B               CALL   printStr   
27FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
280D   21 02 01               LD   HL,$0102   
2810   CD 0D 0B               CALL   prtdec   
2813   CD BF 0B               CALL   printStr   
2816   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2823   E1                     POP   hl   
2824   E5                     PUSH   hl   
2825   CD 0D 0B               CALL   prtdec   
2828   E1                     POP   hl   
2829   CD BF 0B               CALL   printStr   
282C   20 28 23 00            .CSTR   " (#"   
2830   CD 55 0B               CALL   prthex   
2833   CD BF 0B               CALL   printStr   
2836   29 0D 0A 00            .CSTR   ")\r\n"   
283A   76                     HALT      
283B   00                     .CSTR      
283C                EXPECTM_0_2733S43:      
283C   E1                     POP   HL   
283D                          ;*Macro unroll:  test "::b -1%", $0101
283D   31 80 41               LD   SP,STACK   
2840   CD C6 0B               CALL   init   
2843   CD D2 40               CALL   execStr   
2846   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
284E                          ;*Macro unroll:  expect "::b -1%",$0101
284E   E1                     POP   HL   
284F   E5                     PUSH   HL   
2850   11 01 01               LD   DE,$0101   
2853   B7                     OR   A   
2854   ED 52                  SBC   HL,DE   
2856   7D                     LD   A,L   
2857   B4                     OR   H   
2858   CA AD 28               JP   Z,expectM_0_2734S43   
285B   CD BF 0B               CALL   printStr   
285E   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
286C   CD BF 0B               CALL   printStr   
286F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
287E   21 01 01               LD   HL,$0101   
2881   CD 0D 0B               CALL   prtdec   
2884   CD BF 0B               CALL   printStr   
2887   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2894   E1                     POP   hl   
2895   E5                     PUSH   hl   
2896   CD 0D 0B               CALL   prtdec   
2899   E1                     POP   hl   
289A   CD BF 0B               CALL   printStr   
289D   20 28 23 00            .CSTR   " (#"   
28A1   CD 55 0B               CALL   prthex   
28A4   CD BF 0B               CALL   printStr   
28A7   29 0D 0A 00            .CSTR   ")\r\n"   
28AB   76                     HALT      
28AC   00                     .CSTR      
28AD                EXPECTM_0_2734S43:      
28AD   E1                     POP   HL   
28AE                          ;*Macro unroll:  test ":{2};^", 2
28AE   31 80 41               LD   SP,STACK   
28B1   CD C6 0B               CALL   init   
28B4   CD D2 40               CALL   execStr   
28B7   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
28BE                          ;*Macro unroll:  expect ":{2};^",2
28BE   E1                     POP   HL   
28BF   E5                     PUSH   HL   
28C0   11 02 00               LD   DE,2   
28C3   B7                     OR   A   
28C4   ED 52                  SBC   HL,DE   
28C6   7D                     LD   A,L   
28C7   B4                     OR   H   
28C8   CA 1C 29               JP   Z,expectM_0_2735S43   
28CB   CD BF 0B               CALL   printStr   
28CE   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
28DB   CD BF 0B               CALL   printStr   
28DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28ED   21 02 00               LD   HL,2   
28F0   CD 0D 0B               CALL   prtdec   
28F3   CD BF 0B               CALL   printStr   
28F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2903   E1                     POP   hl   
2904   E5                     PUSH   hl   
2905   CD 0D 0B               CALL   prtdec   
2908   E1                     POP   hl   
2909   CD BF 0B               CALL   printStr   
290C   20 28 23 00            .CSTR   " (#"   
2910   CD 55 0B               CALL   prthex   
2913   CD BF 0B               CALL   printStr   
2916   29 0D 0A 00            .CSTR   ")\r\n"   
291A   76                     HALT      
291B   00                     .CSTR      
291C                EXPECTM_0_2735S43:      
291C   E1                     POP   HL   
291D                          ;*Macro unroll:  test ":a{2};^", 2
291D   31 80 41               LD   SP,STACK   
2920   CD C6 0B               CALL   init   
2923   CD D2 40               CALL   execStr   
2926   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
292E                          ;*Macro unroll:  expect ":a{2};^",2
292E   E1                     POP   HL   
292F   E5                     PUSH   HL   
2930   11 02 00               LD   DE,2   
2933   B7                     OR   A   
2934   ED 52                  SBC   HL,DE   
2936   7D                     LD   A,L   
2937   B4                     OR   H   
2938   CA 8D 29               JP   Z,expectM_0_2736S43   
293B   CD BF 0B               CALL   printStr   
293E   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
294C   CD BF 0B               CALL   printStr   
294F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295E   21 02 00               LD   HL,2   
2961   CD 0D 0B               CALL   prtdec   
2964   CD BF 0B               CALL   printStr   
2967   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2974   E1                     POP   hl   
2975   E5                     PUSH   hl   
2976   CD 0D 0B               CALL   prtdec   
2979   E1                     POP   hl   
297A   CD BF 0B               CALL   printStr   
297D   20 28 23 00            .CSTR   " (#"   
2981   CD 55 0B               CALL   prthex   
2984   CD BF 0B               CALL   printStr   
2987   29 0D 0A 00            .CSTR   ")\r\n"   
298B   76                     HALT      
298C   00                     .CSTR      
298D                EXPECTM_0_2736S43:      
298D   E1                     POP   HL   
298E                          ;*Macro unroll:  test "5 :a{$a};^", 5
298E   31 80 41               LD   SP,STACK   
2991   CD C6 0B               CALL   init   
2994   CD D2 40               CALL   execStr   
2997   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
29A2                          ;*Macro unroll:  expect "5 :a{$a};^",5
29A2   E1                     POP   HL   
29A3   E5                     PUSH   HL   
29A4   11 05 00               LD   DE,5   
29A7   B7                     OR   A   
29A8   ED 52                  SBC   HL,DE   
29AA   7D                     LD   A,L   
29AB   B4                     OR   H   
29AC   CA 04 2A               JP   Z,expectM_0_2737S43   
29AF   CD BF 0B               CALL   printStr   
29B2   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
29C3   CD BF 0B               CALL   printStr   
29C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29D5   21 05 00               LD   HL,5   
29D8   CD 0D 0B               CALL   prtdec   
29DB   CD BF 0B               CALL   printStr   
29DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29EB   E1                     POP   hl   
29EC   E5                     PUSH   hl   
29ED   CD 0D 0B               CALL   prtdec   
29F0   E1                     POP   hl   
29F1   CD BF 0B               CALL   printStr   
29F4   20 28 23 00            .CSTR   " (#"   
29F8   CD 55 0B               CALL   prthex   
29FB   CD BF 0B               CALL   printStr   
29FE   29 0D 0A 00            .CSTR   ")\r\n"   
2A02   76                     HALT      
2A03   00                     .CSTR      
2A04                EXPECTM_0_2737S43:      
2A04   E1                     POP   HL   
2A05                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2A05   31 80 41               LD   SP,STACK   
2A08   CD C6 0B               CALL   init   
2A0B   CD D2 40               CALL   execStr   
2A0E   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2A1B                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2A1B   E1                     POP   HL   
2A1C   E5                     PUSH   HL   
2A1D   11 05 00               LD   DE,5   
2A20   B7                     OR   A   
2A21   ED 52                  SBC   HL,DE   
2A23   7D                     LD   A,L   
2A24   B4                     OR   H   
2A25   CA 7F 2A               JP   Z,expectM_0_2738S43   
2A28   CD BF 0B               CALL   printStr   
2A2B   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2A3E   CD BF 0B               CALL   printStr   
2A41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A50   21 05 00               LD   HL,5   
2A53   CD 0D 0B               CALL   prtdec   
2A56   CD BF 0B               CALL   printStr   
2A59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A66   E1                     POP   hl   
2A67   E5                     PUSH   hl   
2A68   CD 0D 0B               CALL   prtdec   
2A6B   E1                     POP   hl   
2A6C   CD BF 0B               CALL   printStr   
2A6F   20 28 23 00            .CSTR   " (#"   
2A73   CD 55 0B               CALL   prthex   
2A76   CD BF 0B               CALL   printStr   
2A79   29 0D 0A 00            .CSTR   ")\r\n"   
2A7D   76                     HALT      
2A7E   00                     .CSTR      
2A7F                EXPECTM_0_2738S43:      
2A7F   E1                     POP   HL   
2A80                          ;*Macro unroll:  test ":a{{2}^};^", 2
2A80   31 80 41               LD   SP,STACK   
2A83   CD C6 0B               CALL   init   
2A86   CD D2 40               CALL   execStr   
2A89   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2A94                          ;*Macro unroll:  expect ":a{{2}^};^",2
2A94   E1                     POP   HL   
2A95   E5                     PUSH   HL   
2A96   11 02 00               LD   DE,2   
2A99   B7                     OR   A   
2A9A   ED 52                  SBC   HL,DE   
2A9C   7D                     LD   A,L   
2A9D   B4                     OR   H   
2A9E   CA F6 2A               JP   Z,expectM_0_2739S43   
2AA1   CD BF 0B               CALL   printStr   
2AA4   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2AB5   CD BF 0B               CALL   printStr   
2AB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC7   21 02 00               LD   HL,2   
2ACA   CD 0D 0B               CALL   prtdec   
2ACD   CD BF 0B               CALL   printStr   
2AD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADD   E1                     POP   hl   
2ADE   E5                     PUSH   hl   
2ADF   CD 0D 0B               CALL   prtdec   
2AE2   E1                     POP   hl   
2AE3   CD BF 0B               CALL   printStr   
2AE6   20 28 23 00            .CSTR   " (#"   
2AEA   CD 55 0B               CALL   prthex   
2AED   CD BF 0B               CALL   printStr   
2AF0   29 0D 0A 00            .CSTR   ")\r\n"   
2AF4   76                     HALT      
2AF5   00                     .CSTR      
2AF6                EXPECTM_0_2739S43:      
2AF6   E1                     POP   HL   
2AF7                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2AF7   31 80 41               LD   SP,STACK   
2AFA   CD C6 0B               CALL   init   
2AFD   CD D2 40               CALL   execStr   
2B00   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2B10                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2B10   E1                     POP   HL   
2B11   E5                     PUSH   HL   
2B12   11 05 00               LD   DE,5   
2B15   B7                     OR   A   
2B16   ED 52                  SBC   HL,DE   
2B18   7D                     LD   A,L   
2B19   B4                     OR   H   
2B1A   CA 77 2B               JP   Z,expectM_0_2740S43   
2B1D   CD BF 0B               CALL   printStr   
2B20   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2B36   CD BF 0B               CALL   printStr   
2B39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B48   21 05 00               LD   HL,5   
2B4B   CD 0D 0B               CALL   prtdec   
2B4E   CD BF 0B               CALL   printStr   
2B51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B5E   E1                     POP   hl   
2B5F   E5                     PUSH   hl   
2B60   CD 0D 0B               CALL   prtdec   
2B63   E1                     POP   hl   
2B64   CD BF 0B               CALL   printStr   
2B67   20 28 23 00            .CSTR   " (#"   
2B6B   CD 55 0B               CALL   prthex   
2B6E   CD BF 0B               CALL   printStr   
2B71   29 0D 0A 00            .CSTR   ")\r\n"   
2B75   76                     HALT      
2B76   00                     .CSTR      
2B77                EXPECTM_0_2740S43:      
2B77   E1                     POP   HL   
2B78                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2B78   31 80 41               LD   SP,STACK   
2B7B   CD C6 0B               CALL   init   
2B7E   CD D2 40               CALL   execStr   
2B81   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2B92                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2B92   E1                     POP   HL   
2B93   E5                     PUSH   HL   
2B94   11 01 00               LD   DE,1   
2B97   B7                     OR   A   
2B98   ED 52                  SBC   HL,DE   
2B9A   7D                     LD   A,L   
2B9B   B4                     OR   H   
2B9C   CA FA 2B               JP   Z,expectM_0_2741S43   
2B9F   CD BF 0B               CALL   printStr   
2BA2   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2BB9   CD BF 0B               CALL   printStr   
2BBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BCB   21 01 00               LD   HL,1   
2BCE   CD 0D 0B               CALL   prtdec   
2BD1   CD BF 0B               CALL   printStr   
2BD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE1   E1                     POP   hl   
2BE2   E5                     PUSH   hl   
2BE3   CD 0D 0B               CALL   prtdec   
2BE6   E1                     POP   hl   
2BE7   CD BF 0B               CALL   printStr   
2BEA   20 28 23 00            .CSTR   " (#"   
2BEE   CD 55 0B               CALL   prthex   
2BF1   CD BF 0B               CALL   printStr   
2BF4   29 0D 0A 00            .CSTR   ")\r\n"   
2BF8   76                     HALT      
2BF9   00                     .CSTR      
2BFA                EXPECTM_0_2741S43:      
2BFA   E1                     POP   HL   
2BFB                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2BFB   31 80 41               LD   SP,STACK   
2BFE   CD C6 0B               CALL   init   
2C01   CD D2 40               CALL   execStr   
2C04   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2C18                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2C18   E1                     POP   HL   
2C19   E5                     PUSH   HL   
2C1A   11 07 00               LD   DE,7   
2C1D   B7                     OR   A   
2C1E   ED 52                  SBC   HL,DE   
2C20   7D                     LD   A,L   
2C21   B4                     OR   H   
2C22   CA 83 2C               JP   Z,expectM_0_2742S43   
2C25   CD BF 0B               CALL   printStr   
2C28   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2C42   CD BF 0B               CALL   printStr   
2C45   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C54   21 07 00               LD   HL,7   
2C57   CD 0D 0B               CALL   prtdec   
2C5A   CD BF 0B               CALL   printStr   
2C5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C6A   E1                     POP   hl   
2C6B   E5                     PUSH   hl   
2C6C   CD 0D 0B               CALL   prtdec   
2C6F   E1                     POP   hl   
2C70   CD BF 0B               CALL   printStr   
2C73   20 28 23 00            .CSTR   " (#"   
2C77   CD 55 0B               CALL   prthex   
2C7A   CD BF 0B               CALL   printStr   
2C7D   29 0D 0A 00            .CSTR   ")\r\n"   
2C81   76                     HALT      
2C82   00                     .CSTR      
2C83                EXPECTM_0_2742S43:      
2C83   E1                     POP   HL   
2C84                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2C84   31 80 41               LD   SP,STACK   
2C87   CD C6 0B               CALL   init   
2C8A   CD D2 40               CALL   execStr   
2C8D   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2CA3                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2CA3   E1                     POP   HL   
2CA4   E5                     PUSH   HL   
2CA5   11 06 00               LD   DE,6   
2CA8   B7                     OR   A   
2CA9   ED 52                  SBC   HL,DE   
2CAB   7D                     LD   A,L   
2CAC   B4                     OR   H   
2CAD   CA 10 2D               JP   Z,expectM_0_2743S43   
2CB0   CD BF 0B               CALL   printStr   
2CB3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2CCF   CD BF 0B               CALL   printStr   
2CD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CE1   21 06 00               LD   HL,6   
2CE4   CD 0D 0B               CALL   prtdec   
2CE7   CD BF 0B               CALL   printStr   
2CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CF7   E1                     POP   hl   
2CF8   E5                     PUSH   hl   
2CF9   CD 0D 0B               CALL   prtdec   
2CFC   E1                     POP   hl   
2CFD   CD BF 0B               CALL   printStr   
2D00   20 28 23 00            .CSTR   " (#"   
2D04   CD 55 0B               CALL   prthex   
2D07   CD BF 0B               CALL   printStr   
2D0A   29 0D 0A 00            .CSTR   ")\r\n"   
2D0E   76                     HALT      
2D0F   00                     .CSTR      
2D10                EXPECTM_0_2743S43:      
2D10   E1                     POP   HL   
2D11                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2D11   31 80 41               LD   SP,STACK   
2D14   CD C6 0B               CALL   init   
2D17   CD D2 40               CALL   execStr   
2D1A   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2D29                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2D29   E1                     POP   HL   
2D2A   E5                     PUSH   HL   
2D2B   11 02 00               LD   DE,2   
2D2E   B7                     OR   A   
2D2F   ED 52                  SBC   HL,DE   
2D31   7D                     LD   A,L   
2D32   B4                     OR   H   
2D33   CA 8F 2D               JP   Z,expectM_0_2744S43   
2D36   CD BF 0B               CALL   printStr   
2D39   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2D4E   CD BF 0B               CALL   printStr   
2D51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D60   21 02 00               LD   HL,2   
2D63   CD 0D 0B               CALL   prtdec   
2D66   CD BF 0B               CALL   printStr   
2D69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D76   E1                     POP   hl   
2D77   E5                     PUSH   hl   
2D78   CD 0D 0B               CALL   prtdec   
2D7B   E1                     POP   hl   
2D7C   CD BF 0B               CALL   printStr   
2D7F   20 28 23 00            .CSTR   " (#"   
2D83   CD 55 0B               CALL   prthex   
2D86   CD BF 0B               CALL   printStr   
2D89   29 0D 0A 00            .CSTR   ")\r\n"   
2D8D   76                     HALT      
2D8E   00                     .CSTR      
2D8F                EXPECTM_0_2744S43:      
2D8F   E1                     POP   HL   
2D90                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2D90   31 80 41               LD   SP,STACK   
2D93   CD C6 0B               CALL   init   
2D96   CD D2 40               CALL   execStr   
2D99   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2DAB                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2DAB   E1                     POP   HL   
2DAC   E5                     PUSH   HL   
2DAD   11 01 00               LD   DE,1   
2DB0   B7                     OR   A   
2DB1   ED 52                  SBC   HL,DE   
2DB3   7D                     LD   A,L   
2DB4   B4                     OR   H   
2DB5   CA 14 2E               JP   Z,expectM_0_2745S43   
2DB8   CD BF 0B               CALL   printStr   
2DBB   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2DD3   CD BF 0B               CALL   printStr   
2DD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DE5   21 01 00               LD   HL,1   
2DE8   CD 0D 0B               CALL   prtdec   
2DEB   CD BF 0B               CALL   printStr   
2DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DFB   E1                     POP   hl   
2DFC   E5                     PUSH   hl   
2DFD   CD 0D 0B               CALL   prtdec   
2E00   E1                     POP   hl   
2E01   CD BF 0B               CALL   printStr   
2E04   20 28 23 00            .CSTR   " (#"   
2E08   CD 55 0B               CALL   prthex   
2E0B   CD BF 0B               CALL   printStr   
2E0E   29 0D 0A 00            .CSTR   ")\r\n"   
2E12   76                     HALT      
2E13   00                     .CSTR      
2E14                EXPECTM_0_2745S43:      
2E14   E1                     POP   HL   
2E15                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2E15   31 80 41               LD   SP,STACK   
2E18   CD C6 0B               CALL   init   
2E1B   CD D2 40               CALL   execStr   
2E1E   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2E31                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2E31   E1                     POP   HL   
2E32   E5                     PUSH   HL   
2E33   11 02 00               LD   DE,2   
2E36   B7                     OR   A   
2E37   ED 52                  SBC   HL,DE   
2E39   7D                     LD   A,L   
2E3A   B4                     OR   H   
2E3B   CA 9B 2E               JP   Z,expectM_0_2746S43   
2E3E   CD BF 0B               CALL   printStr   
2E41   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2E5A   CD BF 0B               CALL   printStr   
2E5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6C   21 02 00               LD   HL,2   
2E6F   CD 0D 0B               CALL   prtdec   
2E72   CD BF 0B               CALL   printStr   
2E75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E82   E1                     POP   hl   
2E83   E5                     PUSH   hl   
2E84   CD 0D 0B               CALL   prtdec   
2E87   E1                     POP   hl   
2E88   CD BF 0B               CALL   printStr   
2E8B   20 28 23 00            .CSTR   " (#"   
2E8F   CD 55 0B               CALL   prthex   
2E92   CD BF 0B               CALL   printStr   
2E95   29 0D 0A 00            .CSTR   ")\r\n"   
2E99   76                     HALT      
2E9A   00                     .CSTR      
2E9B                EXPECTM_0_2746S43:      
2E9B   E1                     POP   HL   
2E9C                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2E9C   31 80 41               LD   SP,STACK   
2E9F   CD C6 0B               CALL   init   
2EA2   CD D2 40               CALL   execStr   
2EA5   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
2EB9                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
2EB9   E1                     POP   HL   
2EBA   E5                     PUSH   HL   
2EBB   11 02 00               LD   DE,2   
2EBE   B7                     OR   A   
2EBF   ED 52                  SBC   HL,DE   
2EC1   7D                     LD   A,L   
2EC2   B4                     OR   H   
2EC3   CA 24 2F               JP   Z,expectM_0_2747S43   
2EC6   CD BF 0B               CALL   printStr   
2EC9   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
2EE3   CD BF 0B               CALL   printStr   
2EE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF5   21 02 00               LD   HL,2   
2EF8   CD 0D 0B               CALL   prtdec   
2EFB   CD BF 0B               CALL   printStr   
2EFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0B   E1                     POP   hl   
2F0C   E5                     PUSH   hl   
2F0D   CD 0D 0B               CALL   prtdec   
2F10   E1                     POP   hl   
2F11   CD BF 0B               CALL   printStr   
2F14   20 28 23 00            .CSTR   " (#"   
2F18   CD 55 0B               CALL   prthex   
2F1B   CD BF 0B               CALL   printStr   
2F1E   29 0D 0A 00            .CSTR   ")\r\n"   
2F22   76                     HALT      
2F23   00                     .CSTR      
2F24                EXPECTM_0_2747S43:      
2F24   E1                     POP   HL   
2F25                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2F25   31 80 41               LD   SP,STACK   
2F28   CD C6 0B               CALL   init   
2F2B   CD D2 40               CALL   execStr   
2F2E   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2F41                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2F41   E1                     POP   HL   
2F42   E5                     PUSH   HL   
2F43   11 02 00               LD   DE,2   
2F46   B7                     OR   A   
2F47   ED 52                  SBC   HL,DE   
2F49   7D                     LD   A,L   
2F4A   B4                     OR   H   
2F4B   CA AB 2F               JP   Z,expectM_0_2748S43   
2F4E   CD BF 0B               CALL   printStr   
2F51   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2F6A   CD BF 0B               CALL   printStr   
2F6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F7C   21 02 00               LD   HL,2   
2F7F   CD 0D 0B               CALL   prtdec   
2F82   CD BF 0B               CALL   printStr   
2F85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F92   E1                     POP   hl   
2F93   E5                     PUSH   hl   
2F94   CD 0D 0B               CALL   prtdec   
2F97   E1                     POP   hl   
2F98   CD BF 0B               CALL   printStr   
2F9B   20 28 23 00            .CSTR   " (#"   
2F9F   CD 55 0B               CALL   prthex   
2FA2   CD BF 0B               CALL   printStr   
2FA5   29 0D 0A 00            .CSTR   ")\r\n"   
2FA9   76                     HALT      
2FAA   00                     .CSTR      
2FAB                EXPECTM_0_2748S43:      
2FAB   E1                     POP   HL   
2FAC                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
2FAC   31 80 41               LD   SP,STACK   
2FAF   CD C6 0B               CALL   init   
2FB2   CD D2 40               CALL   execStr   
2FB5   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
2FCF                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
2FCF   E1                     POP   HL   
2FD0   E5                     PUSH   HL   
2FD1   11 05 00               LD   DE,5   
2FD4   B7                     OR   A   
2FD5   ED 52                  SBC   HL,DE   
2FD7   7D                     LD   A,L   
2FD8   B4                     OR   H   
2FD9   CA 40 30               JP   Z,expectM_0_2749S43   
2FDC   CD BF 0B               CALL   printStr   
2FDF   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
2FFF   CD BF 0B               CALL   printStr   
3002   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3011   21 05 00               LD   HL,5   
3014   CD 0D 0B               CALL   prtdec   
3017   CD BF 0B               CALL   printStr   
301A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3027   E1                     POP   hl   
3028   E5                     PUSH   hl   
3029   CD 0D 0B               CALL   prtdec   
302C   E1                     POP   hl   
302D   CD BF 0B               CALL   printStr   
3030   20 28 23 00            .CSTR   " (#"   
3034   CD 55 0B               CALL   prthex   
3037   CD BF 0B               CALL   printStr   
303A   29 0D 0A 00            .CSTR   ")\r\n"   
303E   76                     HALT      
303F   00                     .CSTR      
3040                EXPECTM_0_2749S43:      
3040   E1                     POP   HL   
3041                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3041   31 80 41               LD   SP,STACK   
3044   CD C6 0B               CALL   init   
3047   CD D2 40               CALL   execStr   
304A   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
305B                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
305B   E1                     POP   HL   
305C   E5                     PUSH   HL   
305D   11 02 00               LD   DE,2   
3060   B7                     OR   A   
3061   ED 52                  SBC   HL,DE   
3063   7D                     LD   A,L   
3064   B4                     OR   H   
3065   CA C3 30               JP   Z,expectM_0_2750S43   
3068   CD BF 0B               CALL   printStr   
306B   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3082   CD BF 0B               CALL   printStr   
3085   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3094   21 02 00               LD   HL,2   
3097   CD 0D 0B               CALL   prtdec   
309A   CD BF 0B               CALL   printStr   
309D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30AA   E1                     POP   hl   
30AB   E5                     PUSH   hl   
30AC   CD 0D 0B               CALL   prtdec   
30AF   E1                     POP   hl   
30B0   CD BF 0B               CALL   printStr   
30B3   20 28 23 00            .CSTR   " (#"   
30B7   CD 55 0B               CALL   prthex   
30BA   CD BF 0B               CALL   printStr   
30BD   29 0D 0A 00            .CSTR   ")\r\n"   
30C1   76                     HALT      
30C2   00                     .CSTR      
30C3                EXPECTM_0_2750S43:      
30C3   E1                     POP   HL   
30C4                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
30C4   31 80 41               LD   SP,STACK   
30C7   CD C6 0B               CALL   init   
30CA   CD D2 40               CALL   execStr   
30CD   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
30E4                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
30E4   E1                     POP   HL   
30E5   E5                     PUSH   HL   
30E6   11 64 00               LD   DE,100   
30E9   B7                     OR   A   
30EA   ED 52                  SBC   HL,DE   
30EC   7D                     LD   A,L   
30ED   B4                     OR   H   
30EE   CA 52 31               JP   Z,expectM_0_2751S43   
30F1   CD BF 0B               CALL   printStr   
30F4   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3111   CD BF 0B               CALL   printStr   
3114   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3123   21 64 00               LD   HL,100   
3126   CD 0D 0B               CALL   prtdec   
3129   CD BF 0B               CALL   printStr   
312C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3139   E1                     POP   hl   
313A   E5                     PUSH   hl   
313B   CD 0D 0B               CALL   prtdec   
313E   E1                     POP   hl   
313F   CD BF 0B               CALL   printStr   
3142   20 28 23 00            .CSTR   " (#"   
3146   CD 55 0B               CALL   prthex   
3149   CD BF 0B               CALL   printStr   
314C   29 0D 0A 00            .CSTR   ")\r\n"   
3150   76                     HALT      
3151   00                     .CSTR      
3152                EXPECTM_0_2751S43:      
3152   E1                     POP   HL   
3153                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3153   31 80 41               LD   SP,STACK   
3156   CD C6 0B               CALL   init   
3159   CD D2 40               CALL   execStr   
315C   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3174                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3174   E1                     POP   HL   
3175   E5                     PUSH   HL   
3176   11 01 00               LD   DE,1   
3179   B7                     OR   A   
317A   ED 52                  SBC   HL,DE   
317C   7D                     LD   A,L   
317D   B4                     OR   H   
317E   CA E3 31               JP   Z,expectM_0_2752S43   
3181   CD BF 0B               CALL   printStr   
3184   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
31A2   CD BF 0B               CALL   printStr   
31A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B4   21 01 00               LD   HL,1   
31B7   CD 0D 0B               CALL   prtdec   
31BA   CD BF 0B               CALL   printStr   
31BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CA   E1                     POP   hl   
31CB   E5                     PUSH   hl   
31CC   CD 0D 0B               CALL   prtdec   
31CF   E1                     POP   hl   
31D0   CD BF 0B               CALL   printStr   
31D3   20 28 23 00            .CSTR   " (#"   
31D7   CD 55 0B               CALL   prthex   
31DA   CD BF 0B               CALL   printStr   
31DD   29 0D 0A 00            .CSTR   ")\r\n"   
31E1   76                     HALT      
31E2   00                     .CSTR      
31E3                EXPECTM_0_2752S43:      
31E3   E1                     POP   HL   
31E4                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
31E4   31 80 41               LD   SP,STACK   
31E7   CD C6 0B               CALL   init   
31EA   CD D2 40               CALL   execStr   
31ED   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3206                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3206   E1                     POP   HL   
3207   E5                     PUSH   HL   
3208   11 02 00               LD   DE,2   
320B   B7                     OR   A   
320C   ED 52                  SBC   HL,DE   
320E   7D                     LD   A,L   
320F   B4                     OR   H   
3210   CA 76 32               JP   Z,expectM_0_2753S43   
3213   CD BF 0B               CALL   printStr   
3216   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3235   CD BF 0B               CALL   printStr   
3238   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3247   21 02 00               LD   HL,2   
324A   CD 0D 0B               CALL   prtdec   
324D   CD BF 0B               CALL   printStr   
3250   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
325D   E1                     POP   hl   
325E   E5                     PUSH   hl   
325F   CD 0D 0B               CALL   prtdec   
3262   E1                     POP   hl   
3263   CD BF 0B               CALL   printStr   
3266   20 28 23 00            .CSTR   " (#"   
326A   CD 55 0B               CALL   prthex   
326D   CD BF 0B               CALL   printStr   
3270   29 0D 0A 00            .CSTR   ")\r\n"   
3274   76                     HALT      
3275   00                     .CSTR      
3276                EXPECTM_0_2753S43:      
3276   E1                     POP   HL   
3277                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
3277   31 80 41               LD   SP,STACK   
327A   CD C6 0B               CALL   init   
327D   CD D2 40               CALL   execStr   
3280   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
329F                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
329F   E1                     POP   HL   
32A0   E5                     PUSH   HL   
32A1   11 0B 00               LD   DE,11   
32A4   B7                     OR   A   
32A5   ED 52                  SBC   HL,DE   
32A7   7D                     LD   A,L   
32A8   B4                     OR   H   
32A9   CA 15 33               JP   Z,expectM_0_2754S43   
32AC   CD BF 0B               CALL   printStr   
32AF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
32D4   CD BF 0B               CALL   printStr   
32D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32E6   21 0B 00               LD   HL,11   
32E9   CD 0D 0B               CALL   prtdec   
32EC   CD BF 0B               CALL   printStr   
32EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32FC   E1                     POP   hl   
32FD   E5                     PUSH   hl   
32FE   CD 0D 0B               CALL   prtdec   
3301   E1                     POP   hl   
3302   CD BF 0B               CALL   printStr   
3305   20 28 23 00            .CSTR   " (#"   
3309   CD 55 0B               CALL   prthex   
330C   CD BF 0B               CALL   printStr   
330F   29 0D 0A 00            .CSTR   ")\r\n"   
3313   76                     HALT      
3314   00                     .CSTR      
3315                EXPECTM_0_2754S43:      
3315   E1                     POP   HL   
3316                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3316   31 80 41               LD   SP,STACK   
3319   CD C6 0B               CALL   init   
331C   CD D2 40               CALL   execStr   
331F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
333E                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
333E   E1                     POP   HL   
333F   E5                     PUSH   HL   
3340   11 15 00               LD   DE,21   
3343   B7                     OR   A   
3344   ED 52                  SBC   HL,DE   
3346   7D                     LD   A,L   
3347   B4                     OR   H   
3348   CA B4 33               JP   Z,expectM_0_2755S43   
334B   CD BF 0B               CALL   printStr   
334E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3373   CD BF 0B               CALL   printStr   
3376   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3385   21 15 00               LD   HL,21   
3388   CD 0D 0B               CALL   prtdec   
338B   CD BF 0B               CALL   printStr   
338E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
339B   E1                     POP   hl   
339C   E5                     PUSH   hl   
339D   CD 0D 0B               CALL   prtdec   
33A0   E1                     POP   hl   
33A1   CD BF 0B               CALL   printStr   
33A4   20 28 23 00            .CSTR   " (#"   
33A8   CD 55 0B               CALL   prthex   
33AB   CD BF 0B               CALL   printStr   
33AE   29 0D 0A 00            .CSTR   ")\r\n"   
33B2   76                     HALT      
33B3   00                     .CSTR      
33B4                EXPECTM_0_2755S43:      
33B4   E1                     POP   HL   
33B5                          ;*Macro unroll:  test "[10 20 30] 1%", 20
33B5   31 80 41               LD   SP,STACK   
33B8   CD C6 0B               CALL   init   
33BB   CD D2 40               CALL   execStr   
33BE   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
33CC                          ;*Macro unroll:  expect "[10 20 30] 1%",20
33CC   E1                     POP   HL   
33CD   E5                     PUSH   HL   
33CE   11 14 00               LD   DE,20   
33D1   B7                     OR   A   
33D2   ED 52                  SBC   HL,DE   
33D4   7D                     LD   A,L   
33D5   B4                     OR   H   
33D6   CA 31 34               JP   Z,expectM_0_2756S43   
33D9   CD BF 0B               CALL   printStr   
33DC   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
33F0   CD BF 0B               CALL   printStr   
33F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3402   21 14 00               LD   HL,20   
3405   CD 0D 0B               CALL   prtdec   
3408   CD BF 0B               CALL   printStr   
340B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3418   E1                     POP   hl   
3419   E5                     PUSH   hl   
341A   CD 0D 0B               CALL   prtdec   
341D   E1                     POP   hl   
341E   CD BF 0B               CALL   printStr   
3421   20 28 23 00            .CSTR   " (#"   
3425   CD 55 0B               CALL   prthex   
3428   CD BF 0B               CALL   printStr   
342B   29 0D 0A 00            .CSTR   ")\r\n"   
342F   76                     HALT      
3430   00                     .CSTR      
3431                EXPECTM_0_2756S43:      
3431   E1                     POP   HL   
3432                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
3432   31 80 41               LD   SP,STACK   
3435   CD C6 0B               CALL   init   
3438   CD D2 40               CALL   execStr   
343B   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3449                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3449   E1                     POP   HL   
344A   E5                     PUSH   HL   
344B   11 02 00               LD   DE,2   
344E   B7                     OR   A   
344F   ED 52                  SBC   HL,DE   
3451   7D                     LD   A,L   
3452   B4                     OR   H   
3453   CA AE 34               JP   Z,expectM_0_2757S43   
3456   CD BF 0B               CALL   printStr   
3459   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
346D   CD BF 0B               CALL   printStr   
3470   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
347F   21 02 00               LD   HL,2   
3482   CD 0D 0B               CALL   prtdec   
3485   CD BF 0B               CALL   printStr   
3488   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3495   E1                     POP   hl   
3496   E5                     PUSH   hl   
3497   CD 0D 0B               CALL   prtdec   
349A   E1                     POP   hl   
349B   CD BF 0B               CALL   printStr   
349E   20 28 23 00            .CSTR   " (#"   
34A2   CD 55 0B               CALL   prthex   
34A5   CD BF 0B               CALL   printStr   
34A8   29 0D 0A 00            .CSTR   ")\r\n"   
34AC   76                     HALT      
34AD   00                     .CSTR      
34AE                EXPECTM_0_2757S43:      
34AE   E1                     POP   HL   
34AF                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
34AF   31 80 41               LD   SP,STACK   
34B2   CD C6 0B               CALL   init   
34B5   CD D2 40               CALL   execStr   
34B8   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
34CC                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
34CC   E1                     POP   HL   
34CD   E5                     PUSH   HL   
34CE   11 42 00               LD   DE,66   
34D1   B7                     OR   A   
34D2   ED 52                  SBC   HL,DE   
34D4   7D                     LD   A,L   
34D5   B4                     OR   H   
34D6   CA 37 35               JP   Z,expectM_0_2758S43   
34D9   CD BF 0B               CALL   printStr   
34DC   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
34F6   CD BF 0B               CALL   printStr   
34F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3508   21 42 00               LD   HL,66   
350B   CD 0D 0B               CALL   prtdec   
350E   CD BF 0B               CALL   printStr   
3511   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
351E   E1                     POP   hl   
351F   E5                     PUSH   hl   
3520   CD 0D 0B               CALL   prtdec   
3523   E1                     POP   hl   
3524   CD BF 0B               CALL   printStr   
3527   20 28 23 00            .CSTR   " (#"   
352B   CD 55 0B               CALL   prthex   
352E   CD BF 0B               CALL   printStr   
3531   29 0D 0A 00            .CSTR   ")\r\n"   
3535   76                     HALT      
3536   00                     .CSTR      
3537                EXPECTM_0_2758S43:      
3537   E1                     POP   HL   
3538                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3538   31 80 41               LD   SP,STACK   
353B   CD C6 0B               CALL   init   
353E   CD D2 40               CALL   execStr   
3541   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3555                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3555   E1                     POP   HL   
3556   E5                     PUSH   HL   
3557   11 0A 00               LD   DE,10   
355A   B7                     OR   A   
355B   ED 52                  SBC   HL,DE   
355D   7D                     LD   A,L   
355E   B4                     OR   H   
355F   CA C0 35               JP   Z,expectM_0_2759S43   
3562   CD BF 0B               CALL   printStr   
3565   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
357F   CD BF 0B               CALL   printStr   
3582   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3591   21 0A 00               LD   HL,10   
3594   CD 0D 0B               CALL   prtdec   
3597   CD BF 0B               CALL   printStr   
359A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35A7   E1                     POP   hl   
35A8   E5                     PUSH   hl   
35A9   CD 0D 0B               CALL   prtdec   
35AC   E1                     POP   hl   
35AD   CD BF 0B               CALL   printStr   
35B0   20 28 23 00            .CSTR   " (#"   
35B4   CD 55 0B               CALL   prthex   
35B7   CD BF 0B               CALL   printStr   
35BA   29 0D 0A 00            .CSTR   ")\r\n"   
35BE   76                     HALT      
35BF   00                     .CSTR      
35C0                EXPECTM_0_2759S43:      
35C0   E1                     POP   HL   
35C1                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
35C1   31 80 41               LD   SP,STACK   
35C4   CD C6 0B               CALL   init   
35C7   CD D2 40               CALL   execStr   
35CA   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
35E6                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
35E6   E1                     POP   HL   
35E7   E5                     PUSH   HL   
35E8   11 0A 00               LD   DE,10   
35EB   B7                     OR   A   
35EC   ED 52                  SBC   HL,DE   
35EE   7D                     LD   A,L   
35EF   B4                     OR   H   
35F0   CA 59 36               JP   Z,expectM_0_2760S43   
35F3   CD BF 0B               CALL   printStr   
35F6   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3618   CD BF 0B               CALL   printStr   
361B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
362A   21 0A 00               LD   HL,10   
362D   CD 0D 0B               CALL   prtdec   
3630   CD BF 0B               CALL   printStr   
3633   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3640   E1                     POP   hl   
3641   E5                     PUSH   hl   
3642   CD 0D 0B               CALL   prtdec   
3645   E1                     POP   hl   
3646   CD BF 0B               CALL   printStr   
3649   20 28 23 00            .CSTR   " (#"   
364D   CD 55 0B               CALL   prthex   
3650   CD BF 0B               CALL   printStr   
3653   29 0D 0A 00            .CSTR   ")\r\n"   
3657   76                     HALT      
3658   00                     .CSTR      
3659                EXPECTM_0_2760S43:      
3659   E1                     POP   HL   
365A                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
365A   31 80 41               LD   SP,STACK   
365D   CD C6 0B               CALL   init   
3660   CD D2 40               CALL   execStr   
3663   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3683                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3683   E1                     POP   HL   
3684   E5                     PUSH   HL   
3685   11 0A 00               LD   DE,10   
3688   B7                     OR   A   
3689   ED 52                  SBC   HL,DE   
368B   7D                     LD   A,L   
368C   B4                     OR   H   
368D   CA FA 36               JP   Z,expectM_0_2761S43   
3690   CD BF 0B               CALL   printStr   
3693   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
36B9   CD BF 0B               CALL   printStr   
36BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36CB   21 0A 00               LD   HL,10   
36CE   CD 0D 0B               CALL   prtdec   
36D1   CD BF 0B               CALL   printStr   
36D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E1   E1                     POP   hl   
36E2   E5                     PUSH   hl   
36E3   CD 0D 0B               CALL   prtdec   
36E6   E1                     POP   hl   
36E7   CD BF 0B               CALL   printStr   
36EA   20 28 23 00            .CSTR   " (#"   
36EE   CD 55 0B               CALL   prthex   
36F1   CD BF 0B               CALL   printStr   
36F4   29 0D 0A 00            .CSTR   ")\r\n"   
36F8   76                     HALT      
36F9   00                     .CSTR      
36FA                EXPECTM_0_2761S43:      
36FA   E1                     POP   HL   
36FB                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
36FB   31 80 41               LD   SP,STACK   
36FE   CD C6 0B               CALL   init   
3701   CD D2 40               CALL   execStr   
3704   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3724                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3724   E1                     POP   HL   
3725   E5                     PUSH   HL   
3726   11 14 00               LD   DE,20   
3729   B7                     OR   A   
372A   ED 52                  SBC   HL,DE   
372C   7D                     LD   A,L   
372D   B4                     OR   H   
372E   CA 9B 37               JP   Z,expectM_0_2762S43   
3731   CD BF 0B               CALL   printStr   
3734   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
375A   CD BF 0B               CALL   printStr   
375D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
376C   21 14 00               LD   HL,20   
376F   CD 0D 0B               CALL   prtdec   
3772   CD BF 0B               CALL   printStr   
3775   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3782   E1                     POP   hl   
3783   E5                     PUSH   hl   
3784   CD 0D 0B               CALL   prtdec   
3787   E1                     POP   hl   
3788   CD BF 0B               CALL   printStr   
378B   20 28 23 00            .CSTR   " (#"   
378F   CD 55 0B               CALL   prthex   
3792   CD BF 0B               CALL   printStr   
3795   29 0D 0A 00            .CSTR   ")\r\n"   
3799   76                     HALT      
379A   00                     .CSTR      
379B                EXPECTM_0_2762S43:      
379B   E1                     POP   HL   
379C                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
379C   31 80 41               LD   SP,STACK   
379F   CD C6 0B               CALL   init   
37A2   CD D2 40               CALL   execStr   
37A5   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
37B9                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
37B9   E1                     POP   HL   
37BA   E5                     PUSH   HL   
37BB   11 04 00               LD   DE,4   
37BE   B7                     OR   A   
37BF   ED 52                  SBC   HL,DE   
37C1   7D                     LD   A,L   
37C2   B4                     OR   H   
37C3   CA 24 38               JP   Z,expectM_0_2763S43   
37C6   CD BF 0B               CALL   printStr   
37C9   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
37E3   CD BF 0B               CALL   printStr   
37E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F5   21 04 00               LD   HL,4   
37F8   CD 0D 0B               CALL   prtdec   
37FB   CD BF 0B               CALL   printStr   
37FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
380B   E1                     POP   hl   
380C   E5                     PUSH   hl   
380D   CD 0D 0B               CALL   prtdec   
3810   E1                     POP   hl   
3811   CD BF 0B               CALL   printStr   
3814   20 28 23 00            .CSTR   " (#"   
3818   CD 55 0B               CALL   prthex   
381B   CD BF 0B               CALL   printStr   
381E   29 0D 0A 00            .CSTR   ")\r\n"   
3822   76                     HALT      
3823   00                     .CSTR      
3824                EXPECTM_0_2763S43:      
3824   E1                     POP   HL   
3825                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3825   31 80 41               LD   SP,STACK   
3828   CD C6 0B               CALL   init   
382B   CD D2 40               CALL   execStr   
382E   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3848                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3848   E1                     POP   HL   
3849   E5                     PUSH   HL   
384A   11 09 00               LD   DE,9   
384D   B7                     OR   A   
384E   ED 52                  SBC   HL,DE   
3850   7D                     LD   A,L   
3851   B4                     OR   H   
3852   CA B9 38               JP   Z,expectM_0_2764S43   
3855   CD BF 0B               CALL   printStr   
3858   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3878   CD BF 0B               CALL   printStr   
387B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
388A   21 09 00               LD   HL,9   
388D   CD 0D 0B               CALL   prtdec   
3890   CD BF 0B               CALL   printStr   
3893   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A0   E1                     POP   hl   
38A1   E5                     PUSH   hl   
38A2   CD 0D 0B               CALL   prtdec   
38A5   E1                     POP   hl   
38A6   CD BF 0B               CALL   printStr   
38A9   20 28 23 00            .CSTR   " (#"   
38AD   CD 55 0B               CALL   prthex   
38B0   CD BF 0B               CALL   printStr   
38B3   29 0D 0A 00            .CSTR   ")\r\n"   
38B7   76                     HALT      
38B8   00                     .CSTR      
38B9                EXPECTM_0_2764S43:      
38B9   E1                     POP   HL   
38BA                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
38BA   31 80 41               LD   SP,STACK   
38BD   CD C6 0B               CALL   init   
38C0   CD D2 40               CALL   execStr   
38C3   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
38DB                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
38DB   E1                     POP   HL   
38DC   E5                     PUSH   HL   
38DD   11 06 00               LD   DE,6   
38E0   B7                     OR   A   
38E1   ED 52                  SBC   HL,DE   
38E3   7D                     LD   A,L   
38E4   B4                     OR   H   
38E5   CA 4A 39               JP   Z,expectM_0_2765S43   
38E8   CD BF 0B               CALL   printStr   
38EB   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3909   CD BF 0B               CALL   printStr   
390C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391B   21 06 00               LD   HL,6   
391E   CD 0D 0B               CALL   prtdec   
3921   CD BF 0B               CALL   printStr   
3924   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3931   E1                     POP   hl   
3932   E5                     PUSH   hl   
3933   CD 0D 0B               CALL   prtdec   
3936   E1                     POP   hl   
3937   CD BF 0B               CALL   printStr   
393A   20 28 23 00            .CSTR   " (#"   
393E   CD 55 0B               CALL   prthex   
3941   CD BF 0B               CALL   printStr   
3944   29 0D 0A 00            .CSTR   ")\r\n"   
3948   76                     HALT      
3949   00                     .CSTR      
394A                EXPECTM_0_2765S43:      
394A   E1                     POP   HL   
394B                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
394B   31 80 41               LD   SP,STACK   
394E   CD C6 0B               CALL   init   
3951   CD D2 40               CALL   execStr   
3954   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
396F                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
396F   E1                     POP   HL   
3970   E5                     PUSH   HL   
3971   11 02 00               LD   DE,2   
3974   B7                     OR   A   
3975   ED 52                  SBC   HL,DE   
3977   7D                     LD   A,L   
3978   B4                     OR   H   
3979   CA E1 39               JP   Z,expectM_0_2766S43   
397C   CD BF 0B               CALL   printStr   
397F   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
39A0   CD BF 0B               CALL   printStr   
39A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B2   21 02 00               LD   HL,2   
39B5   CD 0D 0B               CALL   prtdec   
39B8   CD BF 0B               CALL   printStr   
39BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39C8   E1                     POP   hl   
39C9   E5                     PUSH   hl   
39CA   CD 0D 0B               CALL   prtdec   
39CD   E1                     POP   hl   
39CE   CD BF 0B               CALL   printStr   
39D1   20 28 23 00            .CSTR   " (#"   
39D5   CD 55 0B               CALL   prthex   
39D8   CD BF 0B               CALL   printStr   
39DB   29 0D 0A 00            .CSTR   ")\r\n"   
39DF   76                     HALT      
39E0   00                     .CSTR      
39E1                EXPECTM_0_2766S43:      
39E1   E1                     POP   HL   
39E2                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
39E2   31 80 41               LD   SP,STACK   
39E5   CD C6 0B               CALL   init   
39E8   CD D2 40               CALL   execStr   
39EB   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3A11                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3A11   E1                     POP   HL   
3A12   E5                     PUSH   HL   
3A13   11 0A 00               LD   DE,10   
3A16   B7                     OR   A   
3A17   ED 52                  SBC   HL,DE   
3A19   7D                     LD   A,L   
3A1A   B4                     OR   H   
3A1B   CA 8E 3A               JP   Z,expectM_0_2767S43   
3A1E   CD BF 0B               CALL   printStr   
3A21   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3A4D   CD BF 0B               CALL   printStr   
3A50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A5F   21 0A 00               LD   HL,10   
3A62   CD 0D 0B               CALL   prtdec   
3A65   CD BF 0B               CALL   printStr   
3A68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A75   E1                     POP   hl   
3A76   E5                     PUSH   hl   
3A77   CD 0D 0B               CALL   prtdec   
3A7A   E1                     POP   hl   
3A7B   CD BF 0B               CALL   printStr   
3A7E   20 28 23 00            .CSTR   " (#"   
3A82   CD 55 0B               CALL   prthex   
3A85   CD BF 0B               CALL   printStr   
3A88   29 0D 0A 00            .CSTR   ")\r\n"   
3A8C   76                     HALT      
3A8D   00                     .CSTR      
3A8E                EXPECTM_0_2767S43:      
3A8E   E1                     POP   HL   
3A8F                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3A8F   31 80 41               LD   SP,STACK   
3A92   CD C6 0B               CALL   init   
3A95   CD D2 40               CALL   execStr   
3A98   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3AA4                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3AA4   E1                     POP   HL   
3AA5   E5                     PUSH   HL   
3AA6   11 00 00               LD   DE,NUL   
3AA9   B7                     OR   A   
3AAA   ED 52                  SBC   HL,DE   
3AAC   7D                     LD   A,L   
3AAD   B4                     OR   H   
3AAE   CA 07 3B               JP   Z,expectM_0_2768S43   
3AB1   CD BF 0B               CALL   printStr   
3AB4   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3AC6   CD BF 0B               CALL   printStr   
3AC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AD8   21 00 00               LD   HL,NUL   
3ADB   CD 0D 0B               CALL   prtdec   
3ADE   CD BF 0B               CALL   printStr   
3AE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AEE   E1                     POP   hl   
3AEF   E5                     PUSH   hl   
3AF0   CD 0D 0B               CALL   prtdec   
3AF3   E1                     POP   hl   
3AF4   CD BF 0B               CALL   printStr   
3AF7   20 28 23 00            .CSTR   " (#"   
3AFB   CD 55 0B               CALL   prthex   
3AFE   CD BF 0B               CALL   printStr   
3B01   29 0D 0A 00            .CSTR   ")\r\n"   
3B05   76                     HALT      
3B06   00                     .CSTR      
3B07                EXPECTM_0_2768S43:      
3B07   E1                     POP   HL   
3B08                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3B08   31 80 41               LD   SP,STACK   
3B0B   CD C6 0B               CALL   init   
3B0E   CD D2 40               CALL   execStr   
3B11   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3B1D                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3B1D   E1                     POP   HL   
3B1E   E5                     PUSH   HL   
3B1F   11 00 00               LD   DE,NUL   
3B22   B7                     OR   A   
3B23   ED 52                  SBC   HL,DE   
3B25   7D                     LD   A,L   
3B26   B4                     OR   H   
3B27   CA 80 3B               JP   Z,expectM_0_2769S43   
3B2A   CD BF 0B               CALL   printStr   
3B2D   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3B3F   CD BF 0B               CALL   printStr   
3B42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B51   21 00 00               LD   HL,NUL   
3B54   CD 0D 0B               CALL   prtdec   
3B57   CD BF 0B               CALL   printStr   
3B5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B67   E1                     POP   hl   
3B68   E5                     PUSH   hl   
3B69   CD 0D 0B               CALL   prtdec   
3B6C   E1                     POP   hl   
3B6D   CD BF 0B               CALL   printStr   
3B70   20 28 23 00            .CSTR   " (#"   
3B74   CD 55 0B               CALL   prthex   
3B77   CD BF 0B               CALL   printStr   
3B7A   29 0D 0A 00            .CSTR   ")\r\n"   
3B7E   76                     HALT      
3B7F   00                     .CSTR      
3B80                EXPECTM_0_2769S43:      
3B80   E1                     POP   HL   
3B81                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3B81   31 80 41               LD   SP,STACK   
3B84   CD C6 0B               CALL   init   
3B87   CD D2 40               CALL   execStr   
3B8A   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3B96                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3B96   E1                     POP   HL   
3B97   E5                     PUSH   HL   
3B98   11 00 00               LD   DE,NUL   
3B9B   B7                     OR   A   
3B9C   ED 52                  SBC   HL,DE   
3B9E   7D                     LD   A,L   
3B9F   B4                     OR   H   
3BA0   CA F9 3B               JP   Z,expectM_0_2770S43   
3BA3   CD BF 0B               CALL   printStr   
3BA6   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3BB8   CD BF 0B               CALL   printStr   
3BBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BCA   21 00 00               LD   HL,NUL   
3BCD   CD 0D 0B               CALL   prtdec   
3BD0   CD BF 0B               CALL   printStr   
3BD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE0   E1                     POP   hl   
3BE1   E5                     PUSH   hl   
3BE2   CD 0D 0B               CALL   prtdec   
3BE5   E1                     POP   hl   
3BE6   CD BF 0B               CALL   printStr   
3BE9   20 28 23 00            .CSTR   " (#"   
3BED   CD 55 0B               CALL   prthex   
3BF0   CD BF 0B               CALL   printStr   
3BF3   29 0D 0A 00            .CSTR   ")\r\n"   
3BF7   76                     HALT      
3BF8   00                     .CSTR      
3BF9                EXPECTM_0_2770S43:      
3BF9   E1                     POP   HL   
3BFA                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3BFA   31 80 41               LD   SP,STACK   
3BFD   CD C6 0B               CALL   init   
3C00   CD D2 40               CALL   execStr   
3C03   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3C0F                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3C0F   E1                     POP   HL   
3C10   E5                     PUSH   HL   
3C11   11 00 00               LD   DE,NUL   
3C14   B7                     OR   A   
3C15   ED 52                  SBC   HL,DE   
3C17   7D                     LD   A,L   
3C18   B4                     OR   H   
3C19   CA 72 3C               JP   Z,expectM_0_2771S43   
3C1C   CD BF 0B               CALL   printStr   
3C1F   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3C31   CD BF 0B               CALL   printStr   
3C34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C43   21 00 00               LD   HL,NUL   
3C46   CD 0D 0B               CALL   prtdec   
3C49   CD BF 0B               CALL   printStr   
3C4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C59   E1                     POP   hl   
3C5A   E5                     PUSH   hl   
3C5B   CD 0D 0B               CALL   prtdec   
3C5E   E1                     POP   hl   
3C5F   CD BF 0B               CALL   printStr   
3C62   20 28 23 00            .CSTR   " (#"   
3C66   CD 55 0B               CALL   prthex   
3C69   CD BF 0B               CALL   printStr   
3C6C   29 0D 0A 00            .CSTR   ")\r\n"   
3C70   76                     HALT      
3C71   00                     .CSTR      
3C72                EXPECTM_0_2771S43:      
3C72   E1                     POP   HL   
3C73                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3C73   31 80 41               LD   SP,STACK   
3C76   CD C6 0B               CALL   init   
3C79   CD D2 40               CALL   execStr   
3C7C   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3C84                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3C84   E1                     POP   HL   
3C85   E5                     PUSH   HL   
3C86   11 66 42               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3C89   B7                     OR   A   
3C8A   ED 52                  SBC   HL,DE   
3C8C   7D                     LD   A,L   
3C8D   B4                     OR   H   
3C8E   CA E3 3C               JP   Z,expectM_0_2772S43   
3C91   CD BF 0B               CALL   printStr   
3C94   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3CA2   CD BF 0B               CALL   printStr   
3CA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CB4   21 66 42               LD   HL,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3CB7   CD 0D 0B               CALL   prtdec   
3CBA   CD BF 0B               CALL   printStr   
3CBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CCA   E1                     POP   hl   
3CCB   E5                     PUSH   hl   
3CCC   CD 0D 0B               CALL   prtdec   
3CCF   E1                     POP   hl   
3CD0   CD BF 0B               CALL   printStr   
3CD3   20 28 23 00            .CSTR   " (#"   
3CD7   CD 55 0B               CALL   prthex   
3CDA   CD BF 0B               CALL   printStr   
3CDD   29 0D 0A 00            .CSTR   ")\r\n"   
3CE1   76                     HALT      
3CE2   00                     .CSTR      
3CE3                EXPECTM_0_2772S43:      
3CE3   E1                     POP   HL   
3CE4                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3CE4   31 80 41               LD   SP,STACK   
3CE7   CD C6 0B               CALL   init   
3CEA   CD D2 40               CALL   execStr   
3CED   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3CF5                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3CF5   E1                     POP   HL   
3CF6   E5                     PUSH   HL   
3CF7   11 34 42               LD   DE,VARS + ("Z"-"A"+1)*2   
3CFA   B7                     OR   A   
3CFB   ED 52                  SBC   HL,DE   
3CFD   7D                     LD   A,L   
3CFE   B4                     OR   H   
3CFF   CA 54 3D               JP   Z,expectM_0_2773S43   
3D02   CD BF 0B               CALL   printStr   
3D05   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3D13   CD BF 0B               CALL   printStr   
3D16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D25   21 34 42               LD   HL,VARS + ("Z"-"A"+1)*2   
3D28   CD 0D 0B               CALL   prtdec   
3D2B   CD BF 0B               CALL   printStr   
3D2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D3B   E1                     POP   hl   
3D3C   E5                     PUSH   hl   
3D3D   CD 0D 0B               CALL   prtdec   
3D40   E1                     POP   hl   
3D41   CD BF 0B               CALL   printStr   
3D44   20 28 23 00            .CSTR   " (#"   
3D48   CD 55 0B               CALL   prthex   
3D4B   CD BF 0B               CALL   printStr   
3D4E   29 0D 0A 00            .CSTR   ")\r\n"   
3D52   76                     HALT      
3D53   00                     .CSTR      
3D54                EXPECTM_0_2773S43:      
3D54   E1                     POP   HL   
3D55                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3D55   31 80 41               LD   SP,STACK   
3D58   CD C6 0B               CALL   init   
3D5B   CD D2 40               CALL   execStr   
3D5E   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3D66                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3D66   E1                     POP   HL   
3D67   E5                     PUSH   HL   
3D68   11 32 42               LD   DE,VARS + ("Z"-"A")*2   
3D6B   B7                     OR   A   
3D6C   ED 52                  SBC   HL,DE   
3D6E   7D                     LD   A,L   
3D6F   B4                     OR   H   
3D70   CA C5 3D               JP   Z,expectM_0_2774S43   
3D73   CD BF 0B               CALL   printStr   
3D76   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
3D84   CD BF 0B               CALL   printStr   
3D87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D96   21 32 42               LD   HL,VARS + ("Z"-"A")*2   
3D99   CD 0D 0B               CALL   prtdec   
3D9C   CD BF 0B               CALL   printStr   
3D9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DAC   E1                     POP   hl   
3DAD   E5                     PUSH   hl   
3DAE   CD 0D 0B               CALL   prtdec   
3DB1   E1                     POP   hl   
3DB2   CD BF 0B               CALL   printStr   
3DB5   20 28 23 00            .CSTR   " (#"   
3DB9   CD 55 0B               CALL   prthex   
3DBC   CD BF 0B               CALL   printStr   
3DBF   29 0D 0A 00            .CSTR   ")\r\n"   
3DC3   76                     HALT      
3DC4   00                     .CSTR      
3DC5                EXPECTM_0_2774S43:      
3DC5   E1                     POP   HL   
3DC6                          ;*Macro unroll:  test "'A' /ad", VARS
3DC6   31 80 41               LD   SP,STACK   
3DC9   CD C6 0B               CALL   init   
3DCC   CD D2 40               CALL   execStr   
3DCF   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
3DD7                          ;*Macro unroll:  expect "'A' /ad",VARS
3DD7   E1                     POP   HL   
3DD8   E5                     PUSH   HL   
3DD9   11 00 42               LD   DE,VARS   
3DDC   B7                     OR   A   
3DDD   ED 52                  SBC   HL,DE   
3DDF   7D                     LD   A,L   
3DE0   B4                     OR   H   
3DE1   CA 36 3E               JP   Z,expectM_0_2775S43   
3DE4   CD BF 0B               CALL   printStr   
3DE7   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
3DF5   CD BF 0B               CALL   printStr   
3DF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E07   21 00 42               LD   HL,VARS   
3E0A   CD 0D 0B               CALL   prtdec   
3E0D   CD BF 0B               CALL   printStr   
3E10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E1D   E1                     POP   hl   
3E1E   E5                     PUSH   hl   
3E1F   CD 0D 0B               CALL   prtdec   
3E22   E1                     POP   hl   
3E23   CD BF 0B               CALL   printStr   
3E26   20 28 23 00            .CSTR   " (#"   
3E2A   CD 55 0B               CALL   prthex   
3E2D   CD BF 0B               CALL   printStr   
3E30   29 0D 0A 00            .CSTR   ")\r\n"   
3E34   76                     HALT      
3E35   00                     .CSTR      
3E36                EXPECTM_0_2775S43:      
3E36   E1                     POP   HL   
3E37                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
3E37   31 80 41               LD   SP,STACK   
3E3A   CD C6 0B               CALL   init   
3E3D   CD D2 40               CALL   execStr   
3E40   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
3E4F                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
3E4F   E1                     POP   HL   
3E50   E5                     PUSH   HL   
3E51   11 2D 00               LD   DE,$2D   
3E54   B7                     OR   A   
3E55   ED 52                  SBC   HL,DE   
3E57   7D                     LD   A,L   
3E58   B4                     OR   H   
3E59   CA B5 3E               JP   Z,expectM_0_2776S43   
3E5C   CD BF 0B               CALL   printStr   
3E5F   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
3E74   CD BF 0B               CALL   printStr   
3E77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E86   21 2D 00               LD   HL,$2D   
3E89   CD 0D 0B               CALL   prtdec   
3E8C   CD BF 0B               CALL   printStr   
3E8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E9C   E1                     POP   hl   
3E9D   E5                     PUSH   hl   
3E9E   CD 0D 0B               CALL   prtdec   
3EA1   E1                     POP   hl   
3EA2   CD BF 0B               CALL   printStr   
3EA5   20 28 23 00            .CSTR   " (#"   
3EA9   CD 55 0B               CALL   prthex   
3EAC   CD BF 0B               CALL   printStr   
3EAF   29 0D 0A 00            .CSTR   ")\r\n"   
3EB3   76                     HALT      
3EB4   00                     .CSTR      
3EB5                EXPECTM_0_2776S43:      
3EB5   E1                     POP   HL   
3EB6                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
3EB6   31 80 41               LD   SP,STACK   
3EB9   CD C6 0B               CALL   init   
3EBC   CD D2 40               CALL   execStr   
3EBF   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
3ECF                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
3ECF   E1                     POP   HL   
3ED0   E5                     PUSH   HL   
3ED1   11 41 00               LD   DE,65   
3ED4   B7                     OR   A   
3ED5   ED 52                  SBC   HL,DE   
3ED7   7D                     LD   A,L   
3ED8   B4                     OR   H   
3ED9   CA 36 3F               JP   Z,expectM_0_2777S43   
3EDC   CD BF 0B               CALL   printStr   
3EDF   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
3EF5   CD BF 0B               CALL   printStr   
3EF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F07   21 41 00               LD   HL,65   
3F0A   CD 0D 0B               CALL   prtdec   
3F0D   CD BF 0B               CALL   printStr   
3F10   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F1D   E1                     POP   hl   
3F1E   E5                     PUSH   hl   
3F1F   CD 0D 0B               CALL   prtdec   
3F22   E1                     POP   hl   
3F23   CD BF 0B               CALL   printStr   
3F26   20 28 23 00            .CSTR   " (#"   
3F2A   CD 55 0B               CALL   prthex   
3F2D   CD BF 0B               CALL   printStr   
3F30   29 0D 0A 00            .CSTR   ")\r\n"   
3F34   76                     HALT      
3F35   00                     .CSTR      
3F36                EXPECTM_0_2777S43:      
3F36   E1                     POP   HL   
3F37                          ;*Macro unroll:  test "123 /bd", 3
3F37   31 80 41               LD   SP,STACK   
3F3A   CD C6 0B               CALL   init   
3F3D   CD D2 40               CALL   execStr   
3F40   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
3F48                          ;*Macro unroll:  expect "123 /bd",3
3F48   E1                     POP   HL   
3F49   E5                     PUSH   HL   
3F4A   11 03 00               LD   DE,3   
3F4D   B7                     OR   A   
3F4E   ED 52                  SBC   HL,DE   
3F50   7D                     LD   A,L   
3F51   B4                     OR   H   
3F52   CA A7 3F               JP   Z,expectM_0_2778S43   
3F55   CD BF 0B               CALL   printStr   
3F58   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
3F66   CD BF 0B               CALL   printStr   
3F69   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F78   21 03 00               LD   HL,3   
3F7B   CD 0D 0B               CALL   prtdec   
3F7E   CD BF 0B               CALL   printStr   
3F81   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F8E   E1                     POP   hl   
3F8F   E5                     PUSH   hl   
3F90   CD 0D 0B               CALL   prtdec   
3F93   E1                     POP   hl   
3F94   CD BF 0B               CALL   printStr   
3F97   20 28 23 00            .CSTR   " (#"   
3F9B   CD 55 0B               CALL   prthex   
3F9E   CD BF 0B               CALL   printStr   
3FA1   29 0D 0A 00            .CSTR   ")\r\n"   
3FA5   76                     HALT      
3FA6   00                     .CSTR      
3FA7                EXPECTM_0_2778S43:      
3FA7   E1                     POP   HL   
3FA8                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
3FA8   31 80 41               LD   SP,STACK   
3FAB   CD C6 0B               CALL   init   
3FAE   CD D2 40               CALL   execStr   
3FB1   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
3FC1                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
3FC1   E1                     POP   HL   
3FC2   E5                     PUSH   HL   
3FC3   11 32 00               LD   DE,$32   
3FC6   B7                     OR   A   
3FC7   ED 52                  SBC   HL,DE   
3FC9   7D                     LD   A,L   
3FCA   B4                     OR   H   
3FCB   CA 28 40               JP   Z,expectM_0_2779S43   
3FCE   CD BF 0B               CALL   printStr   
3FD1   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
3FE7   CD BF 0B               CALL   printStr   
3FEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FF9   21 32 00               LD   HL,$32   
3FFC   CD 0D 0B               CALL   prtdec   
3FFF   CD BF 0B               CALL   printStr   
4002   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
400F   E1                     POP   hl   
4010   E5                     PUSH   hl   
4011   CD 0D 0B               CALL   prtdec   
4014   E1                     POP   hl   
4015   CD BF 0B               CALL   printStr   
4018   20 28 23 00            .CSTR   " (#"   
401C   CD 55 0B               CALL   prthex   
401F   CD BF 0B               CALL   printStr   
4022   29 0D 0A 00            .CSTR   ")\r\n"   
4026   76                     HALT      
4027   00                     .CSTR      
4028                EXPECTM_0_2779S43:      
4028   E1                     POP   HL   
4029                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4029   31 80 41               LD   SP,STACK   
402C   CD C6 0B               CALL   init   
402F   CD D2 40               CALL   execStr   
4032   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
404E                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
404E   E1                     POP   HL   
404F   E5                     PUSH   HL   
4050   11 09 00               LD   DE,9   
4053   B7                     OR   A   
4054   ED 52                  SBC   HL,DE   
4056   7D                     LD   A,L   
4057   B4                     OR   H   
4058   CA C1 40               JP   Z,expectM_0_2780S43   
405B   CD BF 0B               CALL   printStr   
405E   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
4080   CD BF 0B               CALL   printStr   
4083   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4092   21 09 00               LD   HL,9   
4095   CD 0D 0B               CALL   prtdec   
4098   CD BF 0B               CALL   printStr   
409B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40A8   E1                     POP   hl   
40A9   E5                     PUSH   hl   
40AA   CD 0D 0B               CALL   prtdec   
40AD   E1                     POP   hl   
40AE   CD BF 0B               CALL   printStr   
40B1   20 28 23 00            .CSTR   " (#"   
40B5   CD 55 0B               CALL   prthex   
40B8   CD BF 0B               CALL   printStr   
40BB   29 0D 0A 00            .CSTR   ")\r\n"   
40BF   76                     HALT      
40C0   00                     .CSTR      
40C1                EXPECTM_0_2780S43:      
40C1   E1                     POP   HL   
40C2                             ; 
40C2   CD BF 0B               CALL   printStr   
40C5   44 6F 6E 65 21 00      .CSTR   "Done!"   
40CB   76                     HALT      
40CC                          ALIGN   2   
40CC                PRINTER:      
40CC   E1                     POP   hl   
40CD   CD 0D 0B               CALL   prtdec   
40D0   DD E9                  JP   (ix)   
40D2                             ; executes a null teminated string (null executes exit_)
40D2                             ; the string should be immedaitely following the call
40D2                EXECSTR:      ; create a root stack frame
40D2   C1                     POP   bc   ; bc = code*
40D3   0B                     DEC   bc   ; dec to prepare for next routine
40D4   11 00 00               LD   de,0   
40D7   D5                     PUSH   de   ; push fake IP
40D8   D5                     PUSH   de   ; push null arg_list*
40D9   D5                     PUSH   de   ; push null first_arg*
40DA   D5                     PUSH   de   ; push fake BP
40DB   DD E9                  JP   (ix)   
40DD                          ALIGN   $100   
4100                             ; .org RAMSTART
4100                          DS   DSIZE   
4180                STACK:       
4180                          ALIGN   $100   
4200                VARS:        
4200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
42D0                RESTARTS:      
42D0                RST08:    DS   2   
42D2                RST10:    DS   2   
42D4                RST18:    DS   2   
42D6                RST20:    DS   2   
42D8                RST28:    DS   2   
42DA                RST30:    DS   2   ; 
42DC                BAUD:     DS   2   ; 
42DE                INTVEC:   DS   2   ; 
42E0                NMIVEC:   DS   2   ; 
42E2                GETCVEC:   DS   2   ; 
42E4                PUTCVEC:   DS   2   ; 
42E6                SYSVARS:      
42E6                             ; initialised sys variables (preserved)
42E6                VDATAWIDTH:   DS   2   ; 
42E8                VTIBPTR:   DS   2   ; 
42EA                VBUFPTR:   DS   2   ; 
42EC                VNEXT:    DS   2   ; 
42EE                VHEAPPTR:   DS   2   ; 
42F0                             ; uninitialised sys variables (preserved)
42F0                VPOINTER:   DS   2   ; 
42F2                VREMAIN:   DS   2   ; 
42F4                VSAVEDIP:   DS   2   ; 
42F6                VSAVEDSP:   DS   2   ; 
42F8                VSAVEDBP:   DS   2   ; 
42FA                VCHECKSUM:   DS   2   ; 
42FC                             ; uninitialised sys variables (unpreserved)
42FC                VTEMP1:   DS   2   ; 
42FE                VTEMP2:   DS   2   ; 
4300                VLASTDEF:   DS   2   ; 
4302                VHASHSTR:   DS   2   ; 
4304                TBPTR:    DS   2   ; reserved for tests
4306                          ALIGN   $100   
4400                TIB:      DS   TIBSIZE   
4500                BUF:      DS   BUFSIZE   
4600                          ALIGN   $100   
4600                PAD:      DS   $100   
4700                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 59 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AD7 DEFINED AT LINE 1712 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 32 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 64 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 114 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 217 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 219 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 221 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 223 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 225 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 227 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 229 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 231 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 233 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 235 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 237 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 239 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 241 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 243 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 245 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 247 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 249 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 251 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 253 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 255 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 257 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 262 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 264 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 266 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 268 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 270 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 272 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 274 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 287 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 295 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 297 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 309 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 311 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 313 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADD:                038A DEFINED AT LINE 321 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
AT:                 039C DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 346 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 351 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 352 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 366 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 396 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 440 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 455 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 514 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 535 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 551 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 569 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 715 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 716 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 740 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
DOT1:               05E0 DEFINED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
DOT2:               05E9 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOT3:               05F1 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOT5:               05F6 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DOTCHAR:            05FD DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
DOTCHAR_ARGS:       0608 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DOTCHAR_BLOCK:      0609 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
DOTDEC:             0614 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
DOTDEC_ARGS:        061F DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
DOTDEC_BLOCK:       0620 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DIVIDE:             062B DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
DIVIDE1:            0630 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
DIVIDE2:            063D DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
DIVIDE3:            063E DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
EQUALS:             0644 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
LESSTHANEQ:         064C DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN:           0651 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
LESSTHAN1:          0656 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
TRUE1:              0659 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
NULL1:              065F DEFINED AT LINE 875 IN MAIN.asm
FALSE1:             065F DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
LPAREN:             0665 DEFINED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
CARET:              0668 DEFINED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
GO:                 0668 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
GO1:                0669 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
GO2:                066F DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOBLOCK:            067B DEFINED AT LINE 903 IN MAIN.asm
GOBLOCK1:           067B DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
GOBLOCK2:           06A0 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
GOFUNC:             06AE DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
GOFUNC1:            06C7 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
GOFUNC2:            06CD DEFINED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC3:            06D8 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
GOFUNC4:            06F0 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
GOFUNC5:            06F4 DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
GOFUNC6:            06F7 DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
GOFUNC7:            06FA DEFINED AT LINE 990 IN MAIN.asm
GOFUNC8:            06FF DEFINED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
HASH:               070A DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
HEXNUM:             070A DEFINED AT LINE 1006 IN MAIN.asm
HEXNUM1:            070D DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
HEXNUM2:            0715 DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
UPCASE:             0727 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LOWCASE:            072C DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IDENT1:             0731 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
QUESTION:           073E DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
IF:                 073E DEFINED AT LINE 1048 IN MAIN.asm
IFTE:               074A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
IFTE1:              074B DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
STAR:               0757 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
MUL:                0757 DEFINED AT LINE 1071 IN MAIN.asm
MUL2:               0759 DEFINED AT LINE 1074 IN MAIN.asm
MUL3:               0761 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
NUM:                0773 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NUM0:               077C DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
NUM1:               077D DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
NUM2:               0795 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
NUM3:               07A0 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
UNDERSCORE:         07A3 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
REMAIN:             07A3 DEFINED AT LINE 1131 IN MAIN.asm
RPAREN:             07A9 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
SEMICOLON:          07B1 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT:          07CD DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
SHIFTLEFT1:         07D5 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
SHIFTLEFT2:         07D6 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
SHIFTRIGHT:         07DD DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SHIFTRIGHT1:        07E5 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SHIFTRIGHT2:        07E9 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
DBLQUOTE:           07F0 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
STRING:             07F0 DEFINED AT LINE 1203 IN MAIN.asm
STRING1:            07F9 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
STRING2:            07FC DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
STRING3:            0805 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
MINUS:              0818 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
SUB:                0824 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
SUB1:               082E DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
COMMAND:            0837 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
ERROR1:             087C DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
COMMAND_A:          0882 DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
COMMAND_B:          0890 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
COMMAND_I:          08AD DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
COMMAND_P:          08BB DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMAND_V:          08D3 DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
COMMENT:            08F5 DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
ABSOLUTE:           08FE DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ADDROF:             090B DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
ADDROF1:            091F DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
ADDROF2:            092A DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERCHAR:         092C DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
BUFFERSTRING:       093B DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
BUFFERSTRING0:      0942 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
BUFFERSTRING1:      0945 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BUFFERDEC:          0957 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
BUFFERDEC0:         096F DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
BUFFERDEC1:         097F DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
BUFFERDEC2:         099F DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
BUFFERDEC3:         09A1 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
BUFFERDEC4:         09B1 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
BUFFERDEC5:         09B2 DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
BREAK:              09B8 DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
BREAK1:             09BF DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
BUFFERXSPACES:      09D2 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERXSPACES1:     09D9 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
BUFFERXSPACES2:     09DD DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
PARTIAL:            09E6 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
PRINTCHARS:         0A06 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
PRINTCHARS1:        0A0B DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
PRINTCHARS2:        0A0D DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
PRINTSTACK:         0A17 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
PRINTSTACK1:        0A32 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
PRINTSTACK2:        0A41 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
PRINTX:             0A4E DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
PRINTX_ARGS:        0A59 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
PRINTX_BLOCK:       0A5A DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
CHARS:              0A7C DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
CHARS1:             0A7F DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
CONSTBUFSTART:      0A84 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
CONSTHEAPSTART:     0A89 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
CONSTTIBSTART:      0A8E DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
VARBUFPTR:          0A93 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
VARHEAPPTR:         0A9C DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
VARTIBPTR:          0AA5 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
VARIABLE:           0AAE DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
CONSTANT:           0AB1 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
INPUT:              0AB4 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
KEY:                0ABF DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
OUTPUT:             0AC8 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
NUMBERS:            0AD1 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
FILTER:             0AD7 DEFINED AT LINE 1710 IN MAIN.asm
MAP:                0AD7 DEFINED AT LINE 1711 IN MAIN.asm
ZPRT:               0AD9 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
ZPRT_ARGS:          0AE4 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
ZPRT_BLOCK:         0AE6 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
PRTDEC:             0B0D DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 153
PRTDEC0:            0B1C DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
PRTDEC1:            0B3E DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
PRTDEC2:            0B40 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
PRTDEC3:            0B50 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
PRTDEC4:            0B51 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
PRTHEX:             0B55 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0B60 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
PRTHEX3:            0B69 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
PRTSTR0:            0B74 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PRTSTR:             0B78 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
NESTING:            0B7D DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
NESTING0:           0B87 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
NESTING1A:          0B8E DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
NESTING1:           0B91 DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
NESTING2:           0BA0 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
NESTING3:           0BA2 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
NESTING4:           0BAD DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
PROMPT:             0BAF DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
CRLF:               0BB8 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
PRINTSTR:           0BBF DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 146
INIT:               0BC6 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0BDF DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
START:              0BE4 DEFINED AT LINE 1905 IN MAIN.asm
INTERPRET:          0BFA DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
INTERPRET2:         0C06 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
INTERPRET3:         0C0E DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
INTERPRET4:         0C14 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
INTERPRET5:         0C19 DEFINED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
INTERPRET5A:        0C3C DEFINED AT LINE 1973 IN MAIN.asm
INTERPRET6:         0C3E DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
INTERPRET7:         0C4C DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
INTERPRET8:         0C5F DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
NEXT:               0C6A DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
NEXT1:              0C79 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
EXIT:               0C80 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
RUN:                0C84 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
ERROR:              0C88 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
BACKSPACE_:         0C98 DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
EDIT_:              0CA8 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
REEDIT_:            0CC0 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
PRINTSTACK_:        0CC3 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2660S43:  0D6C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2672S43:  0DD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2673S43:  0E3A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2674S43:  0E9F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2675S43:  0F04 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2676S43:  0F69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2677S43:  0FCE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2678S43:  1035 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2679S43:  109E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2680S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2681S43:  116C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2682S43:  11D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2683S43:  1240 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2684S43:  12A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2685S43:  1312 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2686S43:  1381 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2687S43:  13F0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2688S43:  145D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2689S43:  14CE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2690S43:  1543 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2691S43:  15B6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2692S43:  1623 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2693S43:  1698 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2694S43:  1709 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2695S43:  1776 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2696S43:  17E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2697S43:  1858 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2698S43:  18C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2699S43:  1932 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2700S43:  19A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2701S43:  1A20 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2702S43:  1A8D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2703S43:  1B02 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2704S43:  1B6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2705S43:  1BE0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2706S43:  1C4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2707S43:  1CBC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2708S43:  1D2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2709S43:  1D98 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2710S43:  1E05 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2711S43:  1E72 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2712S43:  1EDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2713S43:  1F4C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2714S43:  1FB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2715S43:  2026 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2716S43:  2093 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2717S43:  2102 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2718S43:  2171 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2719S43:  21E0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2720S43:  2251 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2721S43:  22C2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2722S43:  232D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2723S43:  2398 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2724S43:  2409 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2725S43:  2480 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2726S43:  24F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2727S43:  2572 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2728S43:  25F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2729S43:  267C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2730S43:  26E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2731S43:  2758 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2732S43:  27C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2733S43:  283C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2734S43:  28AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2735S43:  291C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2736S43:  298D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2737S43:  2A04 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2738S43:  2A7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2739S43:  2AF6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2740S43:  2B77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2741S43:  2BFA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2742S43:  2C83 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2743S43:  2D10 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2744S43:  2D8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2745S43:  2E14 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2746S43:  2E9B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2747S43:  2F24 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2748S43:  2FAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2749S43:  3040 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2750S43:  30C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2751S43:  3152 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2752S43:  31E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2753S43:  3276 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2754S43:  3315 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2755S43:  33B4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2756S43:  3431 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2757S43:  34AE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2758S43:  3537 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2759S43:  35C0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2760S43:  3659 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2761S43:  36FA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2762S43:  379B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2763S43:  3824 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2764S43:  38B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2765S43:  394A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2766S43:  39E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2767S43:  3A8E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2768S43:  3B07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2769S43:  3B80 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2770S43:  3BF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2771S43:  3C72 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2772S43:  3CE3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2773S43:  3D54 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2774S43:  3DC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2775S43:  3E36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2776S43:  3EB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2777S43:  3F36 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2778S43:  3FA7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2779S43:  4028 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2780S43:  40C1 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            40CC DEFINED AT LINE 151
EXECSTR:            40D2 DEFINED AT LINE 158
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              4180 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               4200 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           42D0 DEFINED AT LINE 11 IN ram.asm
RST08:              42D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              42D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              42D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              42D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              42D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              42DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               42DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             42DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             42E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            42E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            42E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            42E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1893 IN MAIN.asm
VDATAWIDTH:         42E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VTIBPTR:            42E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
VBUFPTR:            42EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VNEXT:              42EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1890 IN MAIN.asm
VHEAPPTR:           42EE DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VPOINTER:           42F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
VREMAIN:            42F2 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
VSAVEDIP:           42F4 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           42F6 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           42F8 DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          42FA DEFINED AT LINE 43 IN ram.asm
VTEMP1:             42FC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
VTEMP2:             42FE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VLASTDEF:           4300 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4302 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4304 DEFINED AT LINE 51 IN ram.asm
TIB:                4400 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
BUF:                4500 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
PAD:                4600 DEFINED AT LINE 58 IN ram.asm
HEAP:               4700 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
