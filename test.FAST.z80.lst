0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 56               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 56               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 56               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 56               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 56               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 56               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 56               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 56               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 56               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 56               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 54               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 56               LD   (RST08),HL   
0094   22 D2 56               LD   (RST10),HL   
0097   22 D4 56               LD   (RST18),HL   
009A   22 D6 56               LD   (RST20),HL   
009D   22 D8 56               LD   (RST28),HL   
00A0   22 DA 56               LD   (RST30),HL   
00A3   22 DE 56               LD   (INTVEC),HL   
00A6   22 E0 56               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 56               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 56               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5B                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7B                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   AD                     DB   lsb(star_)   ; *     1
018A   D1                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   85                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   ED                     DB   lsb(colon_)   ; :     2
019A   F5                     DB   lsb(semicolon_)   ; ;     2
019B   49                     DB   lsb(lt_)   ; <     1
019C   2F                     DB   lsb(eq_)   ; =     1
019D   3E                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F0                     DB   lsb(upcase_)   ; A     1
01A1   F0                     DB   lsb(upcase_)   ; B
01A2   F0                     DB   lsb(upcase_)   ; C
01A3   F0                     DB   lsb(upcase_)   ; D
01A4   F0                     DB   lsb(upcase_)   ; E
01A5   F0                     DB   lsb(upcase_)   ; F
01A6   F0                     DB   lsb(upcase_)   ; G
01A7   F0                     DB   lsb(upcase_)   ; h
01A8   F0                     DB   lsb(upcase_)   ; I
01A9   F0                     DB   lsb(upcase_)   ; J
01AA   F0                     DB   lsb(upcase_)   ; K
01AB   F0                     DB   lsb(upcase_)   ; L
01AC   F0                     DB   lsb(upcase_)   ; M
01AD   F0                     DB   lsb(upcase_)   ; N
01AE   F0                     DB   lsb(upcase_)   ; O
01AF   F0                     DB   lsb(upcase_)   ; p
01B0   F0                     DB   lsb(upcase_)   ; Q
01B1   F0                     DB   lsb(upcase_)   ; R
01B2   F0                     DB   lsb(upcase_)   ; S
01B3   F0                     DB   lsb(upcase_)   ; T
01B4   F0                     DB   lsb(upcase_)   ; U
01B5   F0                     DB   lsb(upcase_)   ; V
01B6   F0                     DB   lsb(upcase_)   ; W
01B7   F0                     DB   lsb(upcase_)   ; X
01B8   F0                     DB   lsb(upcase_)   ; Y
01B9   F0                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 54                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 55                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   EA 0F                  DW   next   ; nNext
01E8   22 57                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 E7 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 37 0B               JP   percent   
020C                QUOTE_:      
020C   C3 1D 0B               JP   quote   
020F                LPAREN_:      
020F   C3 CB 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 6C 0B               JP   num   
021B                QUESTION_:      
021B   C3 04 0B               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 3D                  CP   "="   
0222   20 05                  JR   nz,not   
0224   E1                     POP   hl   
0225   D1                     POP   de   
0226   C3 AE 0C               JP   notequals   
0229                NOT:         
0229   0B                     DEC   bc   
022A   21 00 00               LD   hl,0   ; is considered true
022D   18 0B                  JR   eq1   
022F                EQ_:         
022F                EQ:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3D                  CP   "="   
0233   28 04                  JR   z,eq0   
0235   0B                     DEC   bc   
0236   C3 96 0C               JP   assign   
0239                EQ0:         
0239   E1                     POP   hl   
023A                EQ1:         
023A   D1                     POP   de   
023B   C3 A7 0C               JP   equals   
023E                GT_:         
023E                GT:          
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3E                  CP   ">"   
0242   CA 02 0D               JP   z,shiftRight   
0245   D1                     POP   de   
0246   E1                     POP   hl   
0247   18 09                  JR   lt1   
0249                LT_:         
0249                LT:          
0249   03                     INC   bc   
024A   0A                     LD   a,(bc)   
024B   FE 3C                  CP   "<"   
024D   CA F2 0C               JP   z,shiftLeft   
0250   E1                     POP   hl   
0251   D1                     POP   de   
0252                LT1:         
0252   FE 3D                  CP   "="   
0254   CA B5 0C               JP   z,lessthaneq   
0257   0B                     DEC   bc   
0258   C3 BA 0C               JP   lessthan   
025B                             ; index of an array, based on vDataWidth 22
025B                             ; array* num -- value    ; also sets vPointer to address
025B                HASH_:       
025B                HASH:        
025B                ARRAYINDEX:      
025B   E1                     POP   hl   ; hl = index
025C   D1                     POP   de   ; de = array
025D   3A E6 56               LD   a,(vDataWidth)   ; a = data width
0260   3D                     DEC   a   
0261   28 01                  JR   z,arrayIndex1   
0263                ARRAYINDEX0:      
0263   29                     ADD   hl,hl   ; if data width = 2 then double
0264                ARRAYINDEX1:      
0264   19                     ADD   hl,de   ; add addr
0265   22 F8 56               LD   (vPointer),hl   ; store address in setter
0268   16 00                  LD   d,0   
026A   5E                     LD   e,(hl)   
026B   B7                     OR   a   ; check data width again
026C   28 02                  JR   z,arrayIndex2   
026E   23                     INC   hl   
026F   56                     LD   d,(hl)   
0270                ARRAYINDEX2:      
0270   D5                     PUSH   de   
0271   DD E9                  JP   (ix)   
0273                             ;                               4
0273                RPAREN_:      
0273                             ; jp rparen
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                             ; & and                          14
027B                             ; a b -- c
027B                AMPER_:      
027B                AMPER:       
027B                AND:         
027B   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027C   E1                     POP   hl   
027D   7B                     LD   a,e   
027E   A5                     AND   l   
027F   6F                     LD   l,a   
0280   7A                     LD   a,d   
0281   A4                     AND   h   
0282   67                     LD   h,a   
0283   18 5B                  JR   add3   
0285                             ; - sub
0285                             ; a b -- c
0285                             ; -- sub
0285                             ; b1 -- b2
0285                             ; -= sub
0285                             ; a b1 -- b2
0285                MINUS_:      
0285                MINUS:       
0285   03                     INC   bc   ; check if sign of a number
0286   0A                     LD   a,(bc)   
0287   0B                     DEC   bc   
0288   FE 30                  CP   "0"   
028A   38 05                  JR   c,sub   
028C   FE 3A                  CP   "9"+1   
028E   DA 6C 0B               JP   c,num   
0291                SUB:         ; Subtract the value 2nd on stack from top of stack
0291   E1                     POP   hl   ; hl = arg_b
0292   03                     INC   bc   
0293   FE 2D                  CP   "-"   
0295   20 04                  JR   nz,sub1   
0297   2B                     DEC   hl   ; --
0298   C3 98 0C               JP   assign0   
029B                SUB1:        
029B   D1                     POP   de   ; de = arg_a
029C   FE 3D                  CP   "="   
029E   28 02                  JR   z,sub2   
02A0   0B                     DEC   bc   ; -
02A1   EB                     EX   de,hl   
02A2                SUB2:        
02A2   B7                     OR   a   ; -=
02A3   ED 52                  SBC   hl,de   
02A5                SUB3:        
02A5   FE 3D                  CP   "="   
02A7   CA 98 0C               JP   z,assign0   
02AA   E5                     PUSH   hl   
02AB   DD E9                  JP   (ix)   
02AD                STAR_:       ; 21
02AD                STAR:        
02AD   03                     INC   bc   ; check for ** spread
02AE   0A                     LD   a,(bc)   
02AF   FE 2A                  CP   "*"   
02B1   CA CE 0C               JP   z,spread   
02B4   0B                     DEC   bc   
02B5                MUL:         
02B5   D1                     POP   de   ; get first value
02B6   E1                     POP   hl   
02B7                MUL2:        
02B7   C5                     PUSH   bc   ; Preserve the IP
02B8   44 4D                  LD   bc,hl   ; bc = 2nd value
02BA   21 00 00               LD   hl,0   
02BD   3E 10                  LD   a,16   
02BF                MUL3:        
02BF   29                     ADD   hl,hl   
02C0   CB 13                  RL   e   
02C2   CB 12                  RL   d   
02C4   30 04                  JR   nc,$+6   
02C6   09                     ADD   hl,bc   
02C7   30 01                  JR   nc,$+3   
02C9   13                     INC   de   
02CA   3D                     DEC   a   
02CB   20 F2                  JR   nz,mul3   
02CD   C1                     POP   bc   ; Restore the IP
02CE   C3 E0 02               JP   add3   
02D1                             ; + add                         25
02D1                             ; a b -- c
02D1                PLUS_:       
02D1                PLUS:        
02D1                ADD:         
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 2B                  CP   "+"   ; ++ increment variable
02D5   20 05                  JR   nz,add1   
02D7   E1                     POP   hl   
02D8   23                     INC   hl   
02D9   C3 98 0C               JP   assign0   
02DC                ADD1:        
02DC   0B                     DEC   bc   
02DD   D1                     POP   de   ; second term
02DE   E1                     POP   hl   ; first term
02DF   19                     ADD   hl,de   
02E0                ADD3:        
02E0   03                     INC   bc   
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   
02E4   28 04                  JR   z,add4   
02E6   0B                     DEC   bc   
02E7   E5                     PUSH   hl   
02E8   DD E9                  JP   (ix)   
02EA                ADD4:        
02EA   C3 98 0C               JP   assign0   
02ED                COLON_:      
02ED   C3 B3 0A               JP   colon   
02F0                             ;                               18
02F0                UPCASE_:      
02F0                UPCASE:      
02F0   0A                     LD   a,(bc)   ; a = identifier char
02F1   D6 41                  SUB   "A"   ; "A" = 0
02F3   18 10                  JR   ident1   
02F5                             ; ;
02F5                SEMICOLON_:      
02F5   C3 C9 0A               JP   semicolon   
02F8                             ;********************** PAGE 2 END *********************************************
02F8                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 56                  LD   h,msb(vars)   
0309   22 F8 56               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 48 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 0E 10               JP   error   
0343                LAMBDA2:      
0343   CD 7E 0D               CALL   parseBlock   
0346   CD E8 0D               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A F0 56               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A E6 56               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 F0 56               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 09 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 3C 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 09 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B EC 56            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 EC 56            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 2E 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 7E 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E0 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 9C 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 DD 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 56            LD   de,(vPointer)   
03ED   21 F8 56               LD   hl,vPointer   
03F0   C3 40 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD A0 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   6B 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 56            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 56            LD   (vBufPtr),de   ; save buffer*'
041E   C3 2E 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 56            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 56            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 2E 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 56               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 56            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 56               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 56            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 2E 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 56            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 56            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 56               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 56            LD   (vBufPtr),de   
04CC   C3 2E 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 59 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 8A 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   EB 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   7C 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   55 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   7C 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   74 06                  DW   decBase   
0547   00                     DB   NUL   
0548   74 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   94 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   E6 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   32 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   36 09                  DW   filter   
0556   31                     DB   "1"   
0557   36 10                  DW   f1   
0559   32                     DB   "2"   
055A   42 10                  DW   f2   
055C   33                     DB   "3"   
055D   4E 10                  DW   f3   
055F   34                     DB   "4"   
0560   5A 10                  DW   f4   
0562   00                     DB   NUL   
0563   C8 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hx hex
0566   82 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   7C 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   88 06                  DW   input   
056E   00                     DB   NUL   
056F   7C 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   93 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   F4 08                  DW   map   
0577   00                     DB   NUL   
0578   7C 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   9C 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   7C 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A5 06                  DW   quit   
0583   00                     DB   NUL   
0584   7C 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AF 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B5 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   57 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   7C 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   BB 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   0D 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   C3 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   6C 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   F2 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   01 07                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   7C 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   C2 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   25 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2E 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   37 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6E 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   62 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   68 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   7C 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   46 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   7C 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   4C 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 15 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 56            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 A5 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 56               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1544S1066   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1544S1066:      
062A   E1                     POP   hl   
062B   3A E6 56               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 9C 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   21 01 00               LD   hl,1   
0654                BYTEMODE1:      
0654   22 E6 56               LD   (vDataWidth),hl   
0657   DD E9                  JP   (ix)   
0659                             ; //
0659                COMMENT:      
0659   03                     INC   bc   ; point to next char
065A   0A                     LD   a,(bc)   
065B   FE 20                  CP   " "   ; terminate on any char less than SP
065D   30 FA                  JR   nc,comment   
065F   0B                     DEC   bc   
0660   DD E9                  JP   (ix)   
0662                CONSTHEAPSTART:      
0662   11 22 57               LD   de,HEAP   
0665   C3 43 07               JP   constant   
0668                CONSTTIBSTART:      
0668   11 00 54               LD   de,TIB   
066B   C3 43 07               JP   constant   
066E                CONSTBUFSTART:      
066E   11 00 55               LD   de,BUFFER   
0671   C3 43 07               JP   constant   
0674                DECBASE:      
0674   21 0A 00               LD   hl,10   
0677                DECBASE1:      
0677   22 E8 56               LD   (vNumBase),hl   
067A   DD E9                  JP   (ix)   
067C                ERROR1:      
067C   21 01 00               LD   hl,1   ; error 1: unknown command
067F   C3 0E 10               JP   error   
0682                HEXBASE:      
0682   21 10 00               LD   hl,16   
0685   C3 77 06               JP   decBase1   
0688                             ; Z80 port input
0688                             ; port -- value
0688                INPUT:       
0688   E1                     POP   hl   
0689   59                     LD   e,c   ; save IP
068A   4D                     LD   c,l   
068B   ED 68                  IN   l,(c)   
068D   26 00                  LD   h,0   
068F   4B                     LD   c,e   ; restore IP
0690   E5                     PUSH   hl   
0691   DD E9                  JP   (ix)   
0693                             ; /k                              6
0693                KEY:         
0693   CD 81 00               CALL   getchar   
0696   26 00                  LD   h,0   
0698   6F                     LD   l,a   
0699   E5                     PUSH   hl   
069A   DD E9                  JP   (ix)   
069C                             ; /o Z80 port output
069C                             ; value port --
069C                OUTPUT:      
069C   E1                     POP   hl   
069D   59                     LD   e,c   ; save IP
069E   4D                     LD   c,l   
069F   E1                     POP   hl   
06A0   ED 69                  OUT   (c),l   
06A2   4B                     LD   c,e   ; restore IP
06A3   DD E9                  JP   (ix)   
06A5                             ; /qt
06A5                             ; bool --
06A5                QUIT:        
06A5   E1                     POP   hl   ; hl = condition, exit if true
06A6   7D                     LD   a,l   
06A7   B4                     OR   h   
06A8   20 02                  JR   nz,quit1   
06AA   DD E9                  JP   (ix)   
06AC                QUIT1:       
06AC   C3 9C 0B               JP   blockEnd   
06AF                RECUR:       
06AF   E1                     POP   hl   
06B0   22 F2 56               LD   (vRecur),hl   
06B3   DD E9                  JP   (ix)   
06B5                REMAIN:      
06B5   2A FA 56               LD   hl,(vRemain)   
06B8   E5                     PUSH   hl   
06B9   DD E9                  JP   (ix)   
06BB                STRINGBEGIN:      
06BB   21 FF FF               LD   hl,TRUE   ; string mode = true
06BE   22 F6 56               LD   (vStrMode),hl   
06C1   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06C3                STRINGEND:      
06C3   21 00 00               LD   hl,FALSE   ; string mode = false
06C6   22 F6 56               LD   (vStrMode),hl   
06C9   2A EC 56               LD   hl,(vBufPtr)   ; append NUL to string
06CC   AF                     XOR   a   
06CD   77                     LD   (hl),a   
06CE   23                     INC   hl   ; hl = string_end*
06CF   ED 43 04 57            LD   (vTemp1),bc   ; save IP
06D3   11 00 55               LD   de,BUFFER   ; de = string*
06D6   B7                     OR   a   ; bc = size
06D7   ED 52                  SBC   hl,de   
06D9   44 4D                  LD   bc,hl   
06DB   2A F0 56               LD   hl,(vHeapPtr)   ; hl = hstring*
06DE   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DF   D5                     PUSH   de   ; return hstring*
06E0   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06E2   ED 53 F0 56            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E6   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
06EA                STRINGEND1:      
06EA   21 00 55               LD   hl,BUFFER   ; reset vBufPtr
06ED   22 EC 56               LD   (vBufPtr),hl   
06F0   DD E9                  JP   (ix)   
06F2                STRINGLENGTH:      
06F2   D1                     POP   de   
06F3   21 00 00               LD   hl,0   
06F6   18 02                  JR   stringLength2   
06F8                STRINGLENGTH1:      
06F8   13                     INC   de   
06F9   23                     INC   hl   
06FA                STRINGLENGTH2:      
06FA   1A                     LD   a,(de)   
06FB   B7                     OR   a   
06FC   20 FA                  JR   nz,stringLength1   
06FE                STRINGLENGTH3:      
06FE   E5                     PUSH   hl   
06FF   DD E9                  JP   (ix)   
0701                STRINGSIZE:      
0701                          ;*Macro unroll:  PERFORM stringLength
0701   DD 21 08 07            LD   ix,performM_1692S1234   
0705   C3 F2 06               JP   stringLength   
0708                PERFORMM_1692S1234:      
0708   E1                     POP   hl   
0709   23                     INC   hl   
070A   C3 FE 06               JP   stringLength3   
070D                             ; /sc string compare
070D                             ; string1* string2* -- bool
070D                             ; Compares two null terminated strings.
070D                STRINGCOMPARE:      
070D   D1                     POP   de   
070E   E1                     POP   hl   
070F                STRINGCOMPARE1:      
070F   1A                     LD   a,(de)   
0710   BE                     CP   (hl)   
0711   20 07                  JR   nz,stringCompare2   
0713   B7                     OR   a   
0714   28 09                  JR   z,stringCompare3   
0716   13                     INC   de   
0717   23                     INC   hl   
0718   18 F5                  JR   stringCompare1   
071A                STRINGCOMPARE2:      
071A   21 00 00               LD   hl,FALSE   
071D   18 03                  JR   stringCompare4   
071F                STRINGCOMPARE3:      
071F   21 FF FF               LD   hl,TRUE   
0722                STRINGCOMPARE4:      
0722   E5                     PUSH   hl   
0723   DD E9                  JP   (ix)   
0725                VARBUFPTR:      
0725   ED 5B EC 56            LD   de,(vBufPtr)   
0729   21 EC 56               LD   hl,vBufPtr   
072C   18 12                  JR   variable   
072E                VARHEAPPTR:      
072E   ED 5B F0 56            LD   de,(vHeapPtr)   
0732   21 F0 56               LD   hl,vHeapPtr   
0735   18 09                  JR   variable   
0737                VARTIBPTR:      
0737   ED 5B EA 56            LD   de,(vTIBPtr)   
073B   21 EA 56               LD   hl,vTIBPtr   
073E   18 00                  JR   variable   
0740                VARIABLE:      
0740   22 F8 56               LD   (vPointer),hl   
0743                CONSTANT:      
0743   D5                     PUSH   de   
0744   DD E9                  JP   (ix)   
0746                             ; /wm
0746                WORDMODE:      
0746   21 02 00               LD   hl,2   
0749   C3 54 06               JP   byteMode1   
074C                             ; /x
074C                XOR:         
074C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
074D                XOR1:        
074D   E1                     POP   hl   
074E   7B                     LD   a,e   
074F   AD                     XOR   l   
0750   6F                     LD   l,a   
0751   7A                     LD   a,d   
0752   AC                     XOR   h   
0753   67                     LD   h,a   
0754   C3 E0 02               JP   add3   
0757                             ;*******************************************************************
0757                             ; Monty implementations
0757                             ;*******************************************************************
0757                             ; /rg rangeSrc
0757                             ; begin end step -- src
0757                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0757                RANGESRC:      ; range source: begin, end, step, local: L
0757   CD 9F 03               CALL   go   
075A   00 00                  DW   NUL   
075C   66 07                  DW   rangeSrcM_1757S1308   
075E   60 07                  DW   $+2   
0760   01                     DB   1   
0761   04 62 65 73 4C         .PSTR   "besL"   
0766                RANGESRCM_1757S1308:      
0766   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0767   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
078C   5C 6B 74 7B            DB   "\\kt{"   
0790   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0798   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
079E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07AE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07C0   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07C5   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D9   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07E1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E8   7D                     DB   "}"   
07E9   7D                     DB   "}"   
07EA   00                     DB   0   
07EB                             ; /ai arrayIter
07EB                             ; array* -- src
07EB                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07EB                ARRAYITER:      
07EB   CD 9F 03               CALL   go   
07EE   00 00                  DW   NUL   
07F0   F8 07                  DW   arrayIterM_1776S1328   
07F2   F4 07                  DW   $+2   
07F4   01                     DB   1   
07F5   02 61 4C               .PSTR   "aL"   
07F8                ARRAYITERM_1776S1328:      
07F8   7B                     DB   "{"   
07F9   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0809   5C 6B 74 7B            DB   "\\kt{"   
080D   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0815   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
081B   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0823   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
082B   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0832   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
083A   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0843   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
085A   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0862   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0869   7D                     DB   "}"   
086A   7D                     DB   "}"   
086B   00                     DB   0   
086C                             ; /si stringIter
086C                             ; string* -- src
086C                          ;*Macro unroll: FUNC stringIter, 1, "sL"
086C                STRINGITER:      
086C   CD 9F 03               CALL   go   
086F   00 00                  DW   NUL   
0871   79 08                  DW   stringIterM_1795S1348   
0873   75 08                  DW   $+2   
0875   01                     DB   1   
0876   02 73 4C               .PSTR   "sL"   
0879                STRINGITERM_1795S1348:      
0879   7B                     DB   "{"   
087A   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0884   5C 6B 74 7B            DB   "\\kt{"   
0888   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0890   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0897   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089F   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08A7   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08AE   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08BF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08C7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08CE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08E2   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08EA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08F1   7D                     DB   "}"   
08F2   7D                     DB   "}"   
08F3   00                     DB   0   
08F4                             ; /mp map
08F4                             ; src func -- src1
08F4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08F4                MAP:         ; map: source, function
08F4   CD 9F 03               CALL   go   
08F7   00 00                  DW   NUL   
08F9   01 09                  DW   mapM_1815S1370   
08FB   FD 08                  DW   $+2   
08FD   00                     DB   0   
08FE   02 73 66               .PSTR   "sf"   
0901                MAPM_1815S1370:      
0901   7B                     DB   "{"   
0902   5C 6B 74 7B            DB   "\\kt{"   
0906   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
090E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0912   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0917   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0923   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
092C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0933   7D                     DB   "}"   
0934   7D                     DB   "}"   
0935   00                     DB   0   
0936                             ; /ft filter
0936                             ; src pred -- src1
0936                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0936                FILTER:      ; filter: source, predicate, local: T
0936   CD 9F 03               CALL   go   
0939   00 00                  DW   NUL   
093B   44 09                  DW   filterM_1829S1385   
093D   3F 09                  DW   $+2   
093F   01                     DB   1   
0940   03 73 70 54            .PSTR   "spT"   
0944                FILTERM_1829S1385:      
0944   7B                     DB   "{"   
0945   5B 30 5D 25 54 3D      DB   "[0]%T="   
094B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
094F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0953   5B                     DB   "["   
0954   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0961   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0969   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
096D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0972   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0988   3F 3F                  DB   "??"   
098A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0991   7D                     DB   "}"   
0992   7D                     DB   "}"   
0993   00                     DB   0   
0994                             ; /fd fold
0994                             ; reducer is a function like: \\da00bbLi4u
0994                             ; src init reducer -- src1
0994                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0994                FOLD:        ; src, init, reducer
0994   CD 9F 03               CALL   go   
0997   00 00                  DW   NUL   
0999   A3 09                  DW   foldM_1848S1405   
099B   9D 09                  DW   $+2   
099D   01                     DB   1   
099E   04 73 69 72 41         .PSTR   "sirA"   
09A3                FOLDM_1848S1405:      
09A3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09A4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09AB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09AF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09B3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09B8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09D3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09DC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E3   7D                     DB   "}"   
09E4   7D                     DB   "}"   
09E5   00                     DB   0   
09E6                             ; /fe forEach
09E6                             ; src proc --
09E6                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09E6                FOREACH:      ; forEach: source, procedure, local: T
09E6   CD 9F 03               CALL   go   
09E9   00 00                  DW   NUL   
09EB   F4 09                  DW   forEachM_1862S1420   
09ED   EF 09                  DW   $+2   
09EF   01                     DB   1   
09F0   03 73 70 54            .PSTR   "spT"   
09F4                FOREACHM_1862S1420:      
09F4   7B                     DB   "{"   
09F5   5B 30 5D 25 54 3D      DB   "[0]%T="   
09FB   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09FF   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A07   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A0C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A1E   3F 3F                  DB   "??"   ; ifte:
0A20   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A29   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A30   7D                     DB   "}"   
0A31   00                     DB   0   
0A32                             ; ; /fs funcSrc
0A32                             ; ; func -- src
0A32                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A32                FUNCSRC:      ; :f func or block
0A32   CD 9F 03               CALL   go   
0A35   00 00                  DW   NUL   
0A37   3E 0A                  DW   funcSrcM_1876S1435   
0A39   3B 0A                  DW   $+2   
0A3B   00                     DB   0   
0A3C   01 66                  .PSTR   "f"   
0A3E                FUNCSRCM_1876S1435:      
0A3E   7B                     DB   "{"   
0A3F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A43   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A4B   5C 64 74 7B            DB   "\\dt{"   
0A4F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A61   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A68   7D                     DB   "}"   
0A69   7D                     DB   "}"   
0A6A   00                     DB   0   
0A6B                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A6B                PRINTARRAY:      
0A6B   CD 9F 03               CALL   go   
0A6E   00 00                  DW   NUL   
0A70   79 0A                  DW   printArrayM_1886S1446   
0A72   74 0A                  DW   $+2   
0A74   02                     DB   2   
0A75   03 61 62 63            .PSTR   "abc"   
0A79                PRINTARRAYM_1886S1446:      
0A79   7B                     DB   "{"   
0A7A   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AB1   7D                     DB   "}"   
0AB2   00                     DB   0   
0AB3                             ;*******************************************************************
0AB3                             ; implementations continued
0AB3                             ;*******************************************************************
0AB3                COLON:       
0AB3   03                     INC   bc   ; arg_list must ve immediately followed by {
0AB4   0A                     LD   a,(bc)   
0AB5   FE 3D                  CP   "="   ; := definition
0AB7   28 07                  JR   z,defineStart   
0AB9   0B                     DEC   bc   
0ABA   21 01 00               LD   hl,1   
0ABD   C3 0E 10               JP   error   
0AC0                DEFINESTART:      
0AC0   E1                     POP   hl   ; discard variable value
0AC1   2A F8 56               LD   hl,(vPointer)   ; vDefine = vPointer
0AC4   22 F4 56               LD   (vDefine),hl   
0AC7   DD E9                  JP   (ix)   
0AC9                SEMICOLON:      
0AC9                DEFINEEND:      
0AC9   2A F4 56               LD   hl,(vDefine)   ; hl = define*
0ACC   7D                     LD   a,l   
0ACD   B4                     OR   h   
0ACE   28 0B                  JR   z,defineEnd1   
0AD0   11 00 00               LD   de,NUL   ; set vDefine=NUL
0AD3   ED 53 F4 56            LD   (vDefine),de   
0AD7   D1                     POP   de   ; de = value
0AD8   C3 9C 0C               JP   assign1   
0ADB                DEFINEEND1:      
0ADB   DD E9                  JP   (ix)   
0ADD                             ; ~ bitwise invert
0ADD                TILDE:       
0ADD                INVERT:      
0ADD   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0ADE   7D                     LD   a,l   
0ADF   2F                     CPL      
0AE0   6F                     LD   l,a   
0AE1   7C                     LD   a,h   
0AE2   2F                     CPL      
0AE3   67                     LD   h,a   
0AE4   C3 E0 02               JP   add3   
0AE7                             ; $ hex                         ; 22
0AE7                DOLLAR:      
0AE7                HEXNUM:      
0AE7   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AEA                HEXNUM1:      
0AEA   03                     INC   bc   
0AEB   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AEC   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AEE   28 02                  JR   z,hexnum2   ; no a decimal
0AF0   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AF2                HEXNUM2:      
0AF2   D6 30                  SUB   $30   ; form decimal digit
0AF4   DA 8E 0B               JP   c,num2   
0AF7   FE 10                  CP   $0F+1   
0AF9   D2 8E 0B               JP   nc,num2   
0AFC   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AFD   29                     ADD   hl,hl   ; 4X
0AFE   29                     ADD   hl,hl   ; 8X
0AFF   29                     ADD   hl,hl   ; 16X
0B00   85                     ADD   a,l   ; add into bottom of hl
0B01   6F                     LD   l,a   
0B02   18 E6                  JR   hexnum1   
0B04                             ; ? if                            23
0B04                             ; condition then -- value
0B04                QUESTION:      
0B04                IF:          
0B04   03                     INC   bc   
0B05   0A                     LD   a,(bc)   
0B06   FE 3F                  CP   "?"   
0B08   28 06                  JR   z,ifte   
0B0A   0B                     DEC   bc   
0B0B   11 00 00               LD   de,NUL   ; NUL pointer for else
0B0E   18 01                  JR   ifte1   
0B10                             ; ?? ifte
0B10                             ; condition then else -- value
0B10                IFTE:        
0B10   D1                     POP   de   ; de = else
0B11                IFTE1:       
0B11   E1                     POP   hl   ; hl = then
0B12   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B13   7C                     LD   a,h   
0B14   B5                     OR   l   
0B15   E1                     POP   hl   ; hl = then
0B16   CA A0 03               JP   z,go1   ; if z de = else
0B19   EB                     EX   de,hl   ; condition = false, de = then
0B1A   C3 A0 03               JP   go1   
0B1D                             ; string                        ;38
0B1D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B1D                QUOTE:       
0B1D                STRING:      
0B1D   2A F0 56               LD   hl,(vHeapPtr)   ; hl = heap*
0B20   E5                     PUSH   hl   ; save start of string
0B21   0A                     LD   a,(bc)   
0B22   5F                     LD   e,a   ; e = matching terminator
0B23   03                     INC   bc   ; point to next char
0B24   18 03                  JR   string2   
0B26                STRING1:      
0B26   77                     LD   (hl),a   
0B27   23                     INC   hl   ; increase count
0B28   03                     INC   bc   ; point to next char
0B29                STRING2:      
0B29   0A                     LD   a,(bc)   
0B2A   BB                     CP   e   ; is it the string terminator
0B2B   28 02                  JR   z,string3   
0B2D   18 F7                  JR   string1   
0B2F                STRING3:      
0B2F   AF                     XOR   a   ; write NUL to terminate string
0B30   77                     LD   (hl),a   ; hl = end of string
0B31   23                     INC   hl   
0B32   22 F0 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B35   DD E9                  JP   (ix)   
0B37                             ; %a .. %z                      43
0B37                             ; -- value
0B37                             ; returns value of arg
0B37                PERCENT:      
0B37                ARG:         
0B37   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B3A   FD 56 05               LD   d,(iy+5)   
0B3D   EB                     EX   de,hl   
0B3E   7D                     LD   a,l   ; arg_list* == null, skip
0B3F   B4                     OR   h   
0B40   28 1A                  JR   z,arg0a   
0B42   23                     INC   hl   ; a = num_args, hl = arg_list*
0B43   7E                     LD   a,(hl)   
0B44   23                     INC   hl   
0B45   B7                     OR   a   
0B46   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B48   5F                     LD   e,a   ; e = a = num_args
0B49   03                     INC   bc   ; a = next char = dollar_name
0B4A   0A                     LD   a,(bc)   
0B4B   C5                     PUSH   bc   ; save IP
0B4C   43                     LD   b,e   ; b = e = num_args
0B4D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B50   FD 56 03               LD   d,(iy+3)   
0B53                ARG0:        
0B53   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B54   1B                     DEC   de   
0B55   BE                     CP   (hl)   
0B56   28 09                  JR   z,arg1   
0B58   23                     INC   hl   ; hl = next arg_list*
0B59   10 F8                  DJNZ   arg0   
0B5B   C1                     POP   bc   ; no match, restore IP
0B5C                ARG0A:       
0B5C   11 00 00               LD   de,0   ; return 0
0B5F   18 08                  JR   arg1a   
0B61                ARG1:        
0B61   C1                     POP   bc   ; restore IP
0B62   EB                     EX   de,hl   ; hl = arg*
0B63   22 F8 56               LD   (vPointer),hl   ; store arg* in setter
0B66   5E                     LD   e,(hl)   
0B67   23                     INC   hl   
0B68   56                     LD   d,(hl)   ; de = arg
0B69                ARG1A:       
0B69   D5                     PUSH   de   ; push arg
0B6A   DD E9                  JP   (ix)   
0B6C                             ; 0..9 number                   37
0B6C                NUM:         
0B6C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B6F   0A                     LD   a,(bc)   ; Get numeral or -
0B70   FE 2D                  CP   "-"   
0B72   20 01                  JR   nz,num0   
0B74   03                     INC   bc   ; move to next char, no flags affected
0B75                NUM0:        
0B75   08                     EX   af,af'   ; save zero flag = 0 for later
0B76                NUM1:        
0B76   0A                     LD   a,(bc)   ; read digit
0B77   D6 30                  SUB   "0"   ; less than 0?
0B79   38 13                  JR   c,num2   ; not a digit, exit loop
0B7B   FE 0A                  CP   10   ; greater that 9?
0B7D   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B7F   03                     INC   bc   ; inc IP
0B80   54 5D                  LD   de,hl   ; multiply hl * 10
0B82   29                     ADD   hl,hl   
0B83   29                     ADD   hl,hl   
0B84   19                     ADD   hl,de   
0B85   29                     ADD   hl,hl   
0B86   85                     ADD   a,l   ; add digit in a to hl
0B87   6F                     LD   l,a   
0B88   3E 00                  LD   a,0   
0B8A   8C                     ADC   a,h   
0B8B   67                     LD   h,a   
0B8C   18 E8                  JR   num1   
0B8E                NUM2:        
0B8E   0B                     DEC   bc   
0B8F   08                     EX   af,af'   ; restore zero flag
0B90   20 07                  JR   nz,num3   
0B92   EB                     EX   de,hl   ; negate the value of hl
0B93   21 00 00               LD   hl,0   
0B96   B7                     OR   a   ; jump to sub2
0B97   ED 52                  SBC   hl,de   
0B99                NUM3:        
0B99   E5                     PUSH   hl   ; Put the number on the stack
0B9A   DD E9                  JP   (ix)   ; and process the next character
0B9C                             ; }                               58
0B9C                RBRACE:      
0B9C                BLOCKEND:      
0B9C   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B9F   FD 56 01               LD   d,(iy+1)   
0BA2   ED 53 04 57            LD   (vTemp1),de   
0BA6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BA9   FD 56 07               LD   d,(iy+7)   
0BAC   ED 53 06 57            LD   (vTemp2),de   
0BB0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BB3   FD 56 03               LD   d,(iy+3)   
0BB6   EB                     EX   de,hl   
0BB7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BBA   FD 56 01               LD   d,(iy+1)   
0BBD   13                     INC   de   ; for carry flag <=
0BBE   B7                     OR   a   
0BBF   ED 52                  SBC   hl,de   
0BC1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BC3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BC5   FD 5D                  LD   e,iyl   
0BC7   21 08 00               LD   hl,8   
0BCA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BCB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BCC   18 0C                  JR   blockEnd2   
0BCE                BLOCKEND1:      ; same scope
0BCE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD1   FD 56 03               LD   d,(iy+3)   
0BD4   EB                     EX   de,hl   
0BD5   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BD7   FD 5D                  LD   e,iyl   
0BD9   EB                     EX   de,hl   
0BDA                BLOCKEND2:      
0BDA   44 4D                  LD   bc,hl   ; bc = hl = BP
0BDC   B7                     OR   a   ; hl = BP - SP = count
0BDD   ED 72                  SBC   hl,sp   
0BDF   7D                     LD   a,l   
0BE0   B4                     OR   h   
0BE1   28 09                  JR   z,blockEnd3   
0BE3   C5                     PUSH   bc   ; bc = count, hl = BP
0BE4   44 4D                  LD   bc,hl   
0BE6   E1                     POP   hl   
0BE7   2B                     DEC   hl   ; hl = BP-1
0BE8   1B                     DEC   de   ; de = args*-1
0BE9   ED B8                  LDDR      
0BEB   13                     INC   de   
0BEC                BLOCKEND3:      
0BEC   EB                     EX   de,hl   ; sp = de = new tos*
0BED   F9                     LD   sp,hl   
0BEE   ED 4B 06 57            LD   bc,(vTemp2)   
0BF2   FD 2A 04 57            LD   iy,(vTemp1)   
0BF6   ED 5B F2 56            LD   de,(vRecur)   ; de = recur vector
0BFA   7B                     LD   a,e   ; check for NUL
0BFB   B2                     OR   d   
0BFC   20 02                  JR   nz,blockEnd4   
0BFE   DD E9                  JP   (ix)   
0C00                BLOCKEND4:      
0C00   21 00 00               LD   hl,0   ; clear recur vector
0C03   22 F2 56               LD   (vRecur),hl   
0C06   C3 A0 03               JP   go1   ; execute de
0C09                GOBLOCK:      
0C09   ED 53 04 57            LD   (vTemp1),de   ; save de
0C0D   21 00 54               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C10   FD 54                  LD   d,iyh   
0C12   FD 5D                  LD   e,iyl   
0C14   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C15   ED 52                  SBC   hl,de   
0C17   ED 5B 04 57            LD   de,(vTemp1)   ; restore de
0C1B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C1C   B4                     OR   h   
0C1D   3E 00                  LD   a,0   
0C1F   28 6A                  JR   z,goFunc8   
0C21   C5                     PUSH   bc   ; push IP
0C22   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C25   FD 46 05               LD   b,(iy+5)   
0C28   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C2B   FD 66 03               LD   h,(iy+3)   
0C2E                GOBLOCK2:      
0C2E   C5                     PUSH   bc   ; arg_list*
0C2F   E5                     PUSH   hl   ; first_arg*
0C30   FD E5                  PUSH   iy   ; push BP
0C32   FD 21 00 00            LD   iy,0   ; BP = SP
0C36   FD 39                  ADD   iy,sp   
0C38                GOBLOCK3:      
0C38   42 4B                  LD   bc,de   ; bc = de = block*-1
0C3A   DD E9                  JP   (ix)   
0C3C                GOFUNC:      ; execute func
0C3C   EB                     EX   de,hl   ; hl = func*
0C3D   5E                     LD   e,(hl)   ; de = partial_array*
0C3E   23                     INC   hl   
0C3F   56                     LD   d,(hl)   
0C40   23                     INC   hl   
0C41   7B                     LD   a,e   ; if partial_array* == null skip
0C42   B2                     OR   d   
0C43   28 21                  JR   z,goFunc3   
0C45   ED 43 04 57            LD   (vTemp1),bc   
0C49   22 06 57               LD   (vTemp2),hl   ; save bc,hl
0C4C   EB                     EX   de,hl   ; hl = partial_array*
0C4D   2B                     DEC   hl   ; bc = count
0C4E   46                     LD   b,(hl)   
0C4F   2B                     DEC   hl   
0C50   4E                     LD   c,(hl)   
0C51   23                     INC   hl   ; hl = array data*
0C52   23                     INC   hl   
0C53   18 06                  JR   goFunc2   ; push each item on stack
0C55                GOFUNC1:      
0C55   5E                     LD   e,(hl)   ; de = partial item
0C56   23                     INC   hl   
0C57   56                     LD   d,(hl)   
0C58   23                     INC   hl   
0C59   D5                     PUSH   de   ; push on stack
0C5A   0B                     DEC   bc   
0C5B                GOFUNC2:      
0C5B   79                     LD   a,c   ; if count != 0 then loop
0C5C   B0                     OR   b   
0C5D   20 F6                  JR   nz,goFunc1   
0C5F   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0C63   2A 06 57               LD   hl,(vTemp2)   ; restore hl
0C66                GOFUNC3:      
0C66   5E                     LD   e,(hl)   ; de = block*
0C67   23                     INC   hl   
0C68   56                     LD   d,(hl)   
0C69   23                     INC   hl   
0C6A   ED 53 04 57            LD   (vTemp1),de   ; save block*
0C6E   5E                     LD   e,(hl)   ; de = arg_list*
0C6F   23                     INC   hl   
0C70   56                     LD   d,(hl)   
0C71   23                     INC   hl   
0C72   EB                     EX   de,hl   ; hl = arg_list*
0C73   ED 5B 04 57            LD   de,(vTemp1)   ; restore de = block*
0C77   7D                     LD   a,l   ; if arg_list* == null a = 0
0C78   B4                     OR   h   
0C79   20 03                  JR   nz,goFunc4   
0C7B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C7C   18 0D                  JR   goFunc8   
0C7E                GOFUNC4:      ; allocate locals
0C7E   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C7F   18 03                  JR   goFunc6   
0C81                GOFUNC5:      ; loop
0C81   3B                     DEC   sp   
0C82   3B                     DEC   sp   
0C83   3D                     DEC   a   
0C84                GOFUNC6:      
0C84   B7                     OR   a   
0C85   20 FA                  JR   nz,goFunc5   ; end loop
0C87                GOFUNC7:      
0C87   23                     INC   hl   ; a = num_args* x 2
0C88   7E                     LD   a,(hl)   
0C89   2B                     DEC   hl   
0C8A   87                     ADD   a,a   ; a *= 2
0C8B                GOFUNC8:      
0C8B   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C8C   44 4D                  LD   bc,hl   
0C8E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C91   85                     ADD   a,l   
0C92   6F                     LD   l,a   
0C93   39                     ADD   hl,sp   
0C94   18 98                  JR   goBlock2   
0C96                             ; =                              21
0C96                             ; value _oldValue --            ; uses address in vPointer 15
0C96                ASSIGN:      
0C96   E1                     POP   hl   ; discard last accessed value
0C97   E1                     POP   hl   ; hl = new value
0C98                ASSIGN0:      
0C98   EB                     EX   de,hl   ; de = new value
0C99   2A F8 56               LD   hl,(vPointer)   
0C9C                ASSIGN1:      ; entry point from defineEnd
0C9C   73                     LD   (hl),e   
0C9D   3A E6 56               LD   a,(vDataWidth)   
0CA0   3D                     DEC   a   ; is it byte?
0CA1   28 02                  JR   z,assign2   
0CA3   23                     INC   hl   
0CA4   72                     LD   (hl),d   
0CA5                ASSIGN2:      
0CA5   DD E9                  JP   (ix)   
0CA7                             ; hl = value1, de = value2
0CA7                             ; hl = result
0CA7                EQUALS:      
0CA7   B7                     OR   a   ; reset the carry flag
0CA8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CAA   28 16                  JR   z,true1   
0CAC   18 1A                  JR   false1   
0CAE                NOTEQUALS:      
0CAE   B7                     OR   a   ; reset the carry flag
0CAF   ED 52                  SBC   hl,de   
0CB1   20 0F                  JR   nz,true1   
0CB3   18 13                  JR   false1   
0CB5                             ; hl = value1 de = value2
0CB5                             ; hl = result
0CB5                LESSTHANEQ:      
0CB5   B7                     OR   a   
0CB6   ED 52                  SBC   hl,de   
0CB8   18 05                  JR   lessthan1   
0CBA                             ; hl = value1 de = value2
0CBA                             ; hl = result
0CBA                LESSTHAN:      
0CBA   B7                     OR   a   
0CBB   ED 52                  SBC   hl,de   
0CBD   28 09                  JR   z,false1   
0CBF                LESSTHAN1:      
0CBF   FA C8 0C               JP   m,false1   
0CC2                TRUE1:       
0CC2   21 FF FF               LD   hl,TRUE   
0CC5   E5                     PUSH   hl   
0CC6   DD E9                  JP   (ix)   
0CC8                NULL1:       
0CC8                FALSE1:      
0CC8   21 00 00               LD   hl,FALSE   
0CCB   E5                     PUSH   hl   
0CCC   DD E9                  JP   (ix)   
0CCE                SPREAD:      
0CCE   E1                     POP   hl   ; hl = array*
0CCF   ED 43 04 57            LD   (vTemp1),bc   ; save bc
0CD3   2B                     DEC   hl   ; bc = length
0CD4   46                     LD   b,(hl)   
0CD5   2B                     DEC   hl   
0CD6   4E                     LD   c,(hl)   
0CD7   23                     INC   hl   ; move back to array 0
0CD8   23                     INC   hl   
0CD9   18 0D                  JR   spread3   
0CDB                SPREAD1:      
0CDB   5E                     LD   e,(hl)   ; e = lsb data at hl
0CDC   23                     INC   hl   
0CDD   3A E6 56               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CE0   57                     LD   d,a   
0CE1   15                     DEC   d   
0CE2   28 02                  JR   z,spread2   
0CE4   56                     LD   d,(hl)   ; d = msb data at hl
0CE5   23                     INC   hl   
0CE6                SPREAD2:      
0CE6   D5                     PUSH   de   ; return de
0CE7   0B                     DEC   bc   ; count--
0CE8                SPREAD3:      
0CE8   79                     LD   a,c   ; exit loop if bc == 0
0CE9   B0                     OR   b   
0CEA   20 EF                  JR   nz,spread1   
0CEC   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0CF0   DD E9                  JP   (ix)   
0CF2                             ; shiftLeft                     15
0CF2                             ; value count -- value2          shift left count places
0CF2                SHIFTLEFT:      
0CF2   50 59                  LD   de,bc   ; save IP
0CF4   C1                     POP   bc   ; bc = count
0CF5   41                     LD   b,c   ; b = loop counter
0CF6   E1                     POP   hl   
0CF7   04                     INC   b   ; test for counter=0 case
0CF8   18 01                  JR   shiftLeft2   
0CFA                SHIFTLEFT1:      
0CFA   29                     ADD   hl,hl   ; left shift hl
0CFB                SHIFTLEFT2:      
0CFB   10 FD                  DJNZ   shiftLeft1   
0CFD   E5                     PUSH   hl   
0CFE   42 4B                  LD   bc,de   ; restore IP
0D00   DD E9                  JP   (ix)   
0D02                             ; shiftRight                    16
0D02                             ; value count -- value2          shift left count places
0D02                SHIFTRIGHT:      
0D02   50 59                  LD   de,bc   ; save IP
0D04   C1                     POP   bc   ; bc = count
0D05   41                     LD   b,c   ; b = loop counter
0D06   E1                     POP   hl   
0D07   04                     INC   b   ; test for counter=0 case
0D08   18 04                  JR   shiftRight2   
0D0A                SHIFTRIGHT1:      
0D0A   CB 3C                  SRL   h   ; right shift hl
0D0C   CB 1D                  RR   l   
0D0E                SHIFTRIGHT2:      
0D0E   10 FA                  DJNZ   shiftRight1   
0D10   E5                     PUSH   hl   
0D11   42 4B                  LD   bc,de   ; restore IP
0D13   DD E9                  JP   (ix)   
0D15                             ; division subroutine.
0D15                             ; bc: divisor, de: dividend, hl: remainder
0D15                DIVIDE:      
0D15   21 00 00               LD   hl,0   ; zero the remainder
0D18   3E 10                  LD   a,16   ; loop counter
0D1A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D1A   CB 21                  SLA   c   
0D1C   CB 10                  RL   b   
0D1E   ED 6A                  ADC   hl,hl   
0D20   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D22   38 03                  JR   c,divide2   
0D24   0C                     INC   c   
0D25   18 01                  JR   divide3   
0D27                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D27   19                     ADD   hl,de   
0D28                DIVIDE3:      
0D28   3D                     DEC   a   
0D29   20 EF                  JR   nz,divide1   
0D2B   50 59                  LD   de,bc   ; result from bc to de
0D2D   C9                     RET      
0D2E                DOTNEXT:      
0D2E   3A F6 56               LD   a,(vStrMode)   ; if string mode then exit
0D31   3C                     INC   a   
0D32   20 02                  JR   nz,dotNext1   
0D34   DD E9                  JP   (ix)   
0D36                DOTNEXT1:      
0D36   11 00 55               LD   de,BUFFER   
0D39   2A EC 56               LD   hl,(vBufPtr)   
0D3C   36 00                  LD   (hl),0   ; store NUL at end of string
0D3E   ED 53 EC 56            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D42   EB                     EX   de,hl   ; hl = BUFFER
0D43   CD BC 0E               CALL   putstr   
0D46   DD E9                  JP   (ix)   
0D48                             ; arg_list - parses arg_list e.g. ab:c
0D48                             ; -- arg_list*
0D48                PARSEARGS:      
0D48   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D4B   2A F0 56               LD   hl,(vHeapPtr)   ; hl = heap*
0D4E   E5                     PUSH   hl   ; save start of arg_list
0D4F   23                     INC   hl   ; skip length fields to start of string
0D50   23                     INC   hl   
0D51   03                     INC   bc   ; point to next char
0D52                PARSEARGS1:      
0D52   0A                     LD   a,(bc)   
0D53   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D55   20 03                  JR   nz,parseArgs1a   
0D57   14                     INC   d   ; non zero value local count acts as flag
0D58   18 10                  JR   parseArgs3   
0D5A                PARSEARGS1A:      
0D5A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D5C   38 0F                  JR   c,parseArgs4   
0D5E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D60   30 0B                  JR   nc,parseArgs4   
0D62                PARSEARGS2:      
0D62   77                     LD   (hl),a   
0D63   23                     INC   hl   
0D64   1C                     INC   e   ; increase arg count
0D65   AF                     XOR   a   
0D66   B2                     OR   d   
0D67   28 01                  JR   z,parseArgs3   
0D69   14                     INC   d   ; if d > 0 increase local count
0D6A                PARSEARGS3:      
0D6A   03                     INC   bc   ; point to next char
0D6B   18 E5                  JR   parseArgs1   
0D6D                PARSEARGS4:      
0D6D   0B                     DEC   bc   
0D6E   AF                     XOR   a   
0D6F   B2                     OR   d   
0D70   28 01                  JR   z,parseArgs5   
0D72   15                     DEC   d   ; remove initial inc
0D73                PARSEARGS5:      
0D73   23                     INC   hl   
0D74   22 F0 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D77   E1                     POP   hl   ; hl = start of arg_list
0D78   72                     LD   (hl),d   ; write number of locals at start - 1
0D79   23                     INC   hl   
0D7A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D7B   2B                     DEC   hl   
0D7C   E3                     EX   (sp),hl   
0D7D   E9                     JP   (hl)   
0D7E                             ; create block: parses block e.g. 00bbIC4uLi4g
0D7E                             ; -- block*
0D7E                PARSEBLOCK:      
0D7E   C5                     PUSH   bc   ; return pointer to first { of block
0D7F   03                     INC   bc   
0D80   16 01                  LD   d,1   ; nesting: count first parenthesis
0D82                PARSEBLOCK1:      ; Skip to end of definition
0D82   0A                     LD   a,(bc)   ; Get the next character
0D83   03                     INC   bc   ; Point to next character
0D84   FE 21                  CP   " " + 1   ; ignore whitespace
0D86   38 FA                  JR   c,parseBlock1   
0D88   FE 29                  CP   ")"   
0D8A   28 2D                  JR   z,parseBlock4   
0D8C   FE 7D                  CP   "}"   
0D8E   28 29                  JR   z,parseBlock4   
0D90   FE 5D                  CP   "]"   
0D92   28 25                  JR   z,parseBlock4   
0D94   FE 28                  CP   "("   
0D96   28 16                  JR   z,parseBlock2   
0D98   FE 7B                  CP   "{"   
0D9A   28 12                  JR   z,parseBlock2   
0D9C   FE 5B                  CP   "["   
0D9E   28 0E                  JR   z,parseBlock2   
0DA0   FE 27                  CP   "'"   
0DA2   28 0D                  JR   z,parseBlock3   
0DA4   FE 60                  CP   "`"   
0DA6   28 09                  JR   z,parseBlock3   
0DA8   FE 22                  CP   DQ   
0DAA   28 05                  JR   z,parseBlock3   
0DAC   18 D4                  JR   parseBlock1   
0DAE                PARSEBLOCK2:      
0DAE   14                     INC   d   
0DAF   18 D1                  JR   parseBlock1   
0DB1                PARSEBLOCK3:      
0DB1   3E 80                  LD   a,$80   
0DB3   AA                     XOR   d   
0DB4   57                     LD   d,a   
0DB5   20 CB                  JR   nz,parseBlock1   
0DB7   18 03                  JR   parseBlock5   
0DB9                PARSEBLOCK4:      
0DB9   15                     DEC   d   
0DBA   20 C6                  JR   nz,parseBlock1   ; get the next element
0DBC                PARSEBLOCK5:      
0DBC   60 69                  LD   hl,bc   ; hl = IP
0DBE   11 22 57               LD   de,HEAP   ; is IP pointing to object in heap
0DC1   B7                     OR   a   ; IP - HEAP
0DC2   ED 52                  SBC   hl,de   
0DC4   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DC6   28 1C                  JR   z,parseBlock6   
0DC8   60 69                  LD   hl,bc   ; hl = IP
0DCA   D1                     POP   de   ; de = block*
0DCB   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0DCF   B7                     OR   a   ; bc = size
0DD0   ED 52                  SBC   hl,de   
0DD2   44 4D                  LD   bc,hl   
0DD4   EB                     EX   de,hl   ; hl = block* de = heap*
0DD5   ED 5B F0 56            LD   de,(vHeapPtr)   
0DD9   D5                     PUSH   de   ; return hblock*
0DDA   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DDC   ED 53 F0 56            LD   (vHeapPtr),de   ; heap* += size
0DE0   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0DE4                PARSEBLOCK6:      
0DE4   0B                     DEC   bc   ; balanced, exit
0DE5   E1                     POP   hl   ; hl = block*
0DE6   E3                     EX   (sp),hl   ; return to caller
0DE7   E9                     JP   (hl)   
0DE8                             ; create function
0DE8                             ; arg_list* block* -- func*
0DE8                CREATEFUNC:      
0DE8   E1                     POP   hl   ; save retrn address
0DE9   22 08 57               LD   (vTemp3),hl   
0DEC   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0DF0   E1                     POP   hl   ; hl = block*
0DF1   22 06 57               LD   (vTemp2),hl   ; save block*
0DF4   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DF7   FD 56 05               LD   d,(iy+5)   
0DFA   7B                     LD   a,e   ; if arg_list == null then make a func
0DFB   B2                     OR   d   
0DFC   20 09                  JR   nz,createFunc0   
0DFE   21 00 00               LD   hl,0   ; partial_array = null
0E01   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = compile*
0E05   18 65                  JR   createFunc5   
0E07                CREATEFUNC0:      
0E07   E1                     POP   hl   ; hl = inner_arg_list*
0E08   E5                     PUSH   hl   ; save inner_arg_list
0E09   ED 5B F0 56            LD   de,(vHeapPtr)   ; de = compile*
0E0D   7E                     LD   a,(hl)   ; compile inner_num_locals
0E0E   4F                     LD   c,a   ; b = inner_num_locals
0E0F   12                     LD   (de),a   
0E10   23                     INC   hl   
0E11   13                     INC   de   
0E12   7E                     LD   a,(hl)   ; compile inner_length
0E13   12                     LD   (de),a   
0E14   91                     SUB   c   ; a = inner_num args
0E15   23                     INC   hl   
0E16   13                     INC   de   
0E17   B7                     OR   a   ; compile args if inner_length > 0
0E18   28 05                  JR   z,createFunc1   
0E1A   4F                     LD   c,a   ; bc = a
0E1B   06 00                  LD   b,0   
0E1D   ED B0                  LDIR      
0E1F                CREATEFUNC1:      
0E1F   EB                     EX   de,hl   ; hl = outer_arg_list
0E20   FD 5E 04               LD   e,(iy+4)   
0E23   FD 56 05               LD   d,(iy+5)   
0E26   EB                     EX   de,hl   
0E27   23                     INC   hl   ; a = outer_length
0E28   7E                     LD   a,(hl)   
0E29   23                     INC   hl   
0E2A   B7                     OR   a   
0E2B   28 05                  JR   z,createFunc2   
0E2D   4F                     LD   c,a   
0E2E   06 00                  LD   b,0   
0E30   ED B0                  LDIR      ; append outer_args
0E32                CREATEFUNC2:      ; a = outer_length
0E32   47                     LD   b,a   ; b = a = outer_length
0E33   2A F0 56               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E36   23                     INC   hl   
0E37   7E                     LD   a,(hl)   ; add outer_length to new length
0E38   80                     ADD   a,b   
0E39   77                     LD   (hl),a   
0E3A   2B                     DEC   hl   
0E3B   78                     LD   a,b   ; save outer_length in a'
0E3C   08                     EX   af,af'   
0E3D   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E3E   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E3F   B7                     OR   a   
0E40   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E42   4F                     LD   c,a   ; c = inner_num_locals
0E43   06 00                  LD   b,0   ; bc = inner_num_locals
0E45   23                     INC   hl   ; a = inner_length
0E46   7E                     LD   a,(hl)   
0E47   91                     SUB   c   ; a = inner_num_args
0E48   23                     INC   hl   ; hl = inner_arg_chars
0E49   85                     ADD   a,l   ; hl += a
0E4A   6F                     LD   l,a   
0E4B   3E 00                  LD   a,0   
0E4D   84                     ADD   a,h   
0E4E   67                     LD   h,a   
0E4F   ED B0                  LDIR      ; append inner_locals
0E51                CREATEFUNC2A:      
0E51   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E52   12                     LD   (de),a   ; compile partial_array length field
0E53   13                     INC   de   
0E54   AF                     XOR   a   
0E55   12                     LD   (de),a   
0E56   13                     INC   de   
0E57   D5                     PUSH   de   ; push partial_array*
0E58   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E59   FD 5E 02               LD   e,(iy+2)   
0E5C   FD 56 03               LD   d,(iy+3)   
0E5F   EB                     EX   de,hl   
0E60                CREATEFUNC3:      
0E60   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E61   4E                     LD   c,(hl)   
0E62   2B                     DEC   hl   
0E63   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E64   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E65   13                     INC   de   
0E66   79                     LD   a,c   
0E67   12                     LD   (de),a   
0E68   13                     INC   de   
0E69   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E6B                CREATEFUNC4:      
0E6B   E1                     POP   hl   ; hl = partial_array*
0E6C                CREATEFUNC5:      
0E6C   C1                     POP   bc   ; bc = new_arg_list*
0E6D   D5                     PUSH   de   ; return new func*
0E6E   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E6F   73                     LD   (hl),e   ; compile partial_array* to func
0E70   23                     INC   hl   
0E71   72                     LD   (hl),d   
0E72   23                     INC   hl   
0E73   ED 5B 06 57            LD   de,(vTemp2)   ; de = block*
0E77   73                     LD   (hl),e   ; compile block* to func
0E78   23                     INC   hl   
0E79   72                     LD   (hl),d   
0E7A   23                     INC   hl   
0E7B   71                     LD   (hl),c   ; compile new_arg_list* to func
0E7C   23                     INC   hl   
0E7D   70                     LD   (hl),b   
0E7E   23                     INC   hl   
0E7F   22 F0 56               LD   (vHeapPtr),hl   ; bump heap ptr
0E82   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0E86   2A 08 57               LD   hl,(vTemp3)   ; jump to return address
0E89   E9                     JP   (hl)   
0E8A                             ;*******************************************************************
0E8A                             ; general routines
0E8A                             ;*******************************************************************
0E8A                             ; followed by a table
0E8A                             ; indexed on the 0-25 lowercase letter
0E8A                             ; db lsb(addr)
0E8A                             ; the final item index 26 matches any other char
0E8A                LOWERCASETABLE:      
0E8A   03                     INC   bc   
0E8B   0A                     LD   a,(bc)   
0E8C   FE 7B                  CP   "z"+1   
0E8E   30 0B                  JR   nc,lowerCaseTable2   
0E90   D6 61                  SUB   "a"   
0E92   38 07                  JR   c,lowerCaseTable2   
0E94                LOWERCASETABLE1:      
0E94   E1                     POP   hl   
0E95   85                     ADD   a,l   
0E96   6F                     LD   l,a   
0E97   6E                     LD   l,(hl)   ; must have the same msb as the table
0E98   C3 A1 0E               JP   commandTable1   
0E9B                LOWERCASETABLE2:      
0E9B   3E 1A                  LD   a,26   
0E9D   0B                     DEC   bc   
0E9E   18 F4                  JR   lowerCaseTable1   
0EA0                             ; followed by a table
0EA0                             ; db char
0EA0                             ; dw addr
0EA0                             ; the final item must have char == NUL
0EA0                COMMANDTABLE:      
0EA0   E1                     POP   hl   
0EA1                COMMANDTABLE1:      
0EA1   03                     INC   bc   
0EA2                COMMANDTABLE2:      
0EA2   AF                     XOR   a   
0EA3   BE                     CP   (hl)   
0EA4   20 03                  JR   nz,commandTable3   
0EA6   0B                     DEC   bc   
0EA7   18 09                  JR   commandTable4   
0EA9                COMMANDTABLE3:      
0EA9   0A                     LD   a,(bc)   
0EAA   BE                     CP   (hl)   
0EAB   28 05                  JR   z,commandTable4   
0EAD   23                     INC   hl   
0EAE   23                     INC   hl   
0EAF   23                     INC   hl   
0EB0   18 F0                  JR   commandTable2   
0EB2                COMMANDTABLE4:      
0EB2   23                     INC   hl   
0EB3   5E                     LD   e,(hl)   
0EB4   23                     INC   hl   
0EB5   56                     LD   d,(hl)   
0EB6   EB                     EX   de,hl   
0EB7   E9                     JP   (hl)   
0EB8                PUTSTR0:      
0EB8   CD 85 00               CALL   putchar   
0EBB   23                     INC   hl   
0EBC                PUTSTR:      
0EBC   7E                     LD   a,(hl)   
0EBD   B7                     OR   a   
0EBE   20 F8                  JR   nz,putstr0   
0EC0   C9                     RET      
0EC1                             ; **************************************************************************
0EC1                             ; calculate nesting value
0EC1                             ; a is char to be tested,
0EC1                             ; e is the nesting value (initially 0)
0EC1                             ; e is increased by ( and [
0EC1                             ; e is decreased by ) and ]
0EC1                             ; e has its bit 7 toggled by `
0EC1                             ; limited to 127 levels
0EC1                             ; **************************************************************************
0EC1                NESTING:      
0EC1   FE 22                  CP   DQ   ; quote char
0EC3   28 06                  JR   z,nesting0   
0EC5   FE 60                  CP   "`"   ; quote char
0EC7   28 02                  JR   z,nesting0   
0EC9   18 0A                  JR   nesting1   
0ECB                NESTING0:      
0ECB   CB 7B                  BIT   7,e   
0ECD   28 03                  JR   z,nesting1a   
0ECF   CB BB                  RES   7,e   
0ED1   C9                     RET      
0ED2                NESTING1A:      
0ED2   CB FB                  SET   7,e   
0ED4   C9                     RET      
0ED5                NESTING1:      
0ED5   CB 7B                  BIT   7,e   
0ED7   C0                     RET   nz   
0ED8   FE 7B                  CP   "{"   
0EDA   28 08                  JR   z,nesting2   
0EDC   FE 5B                  CP   "["   
0EDE   28 04                  JR   z,nesting2   
0EE0   FE 28                  CP   "("   
0EE2   20 02                  JR   nz,nesting3   
0EE4                NESTING2:      
0EE4   1C                     INC   e   
0EE5   C9                     RET      
0EE6                NESTING3:      
0EE6   FE 7D                  CP   "}"   
0EE8   28 07                  JR   z,nesting4   
0EEA   FE 5D                  CP   "]"   
0EEC   28 03                  JR   z,nesting4   
0EEE   FE 29                  CP   ")"   
0EF0   C0                     RET   nz   
0EF1                NESTING4:      
0EF1   1D                     DEC   e   
0EF2   C9                     RET      
0EF3                PROMPT:      
0EF3   CD 03 0F               CALL   printStr   
0EF6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EFB   C9                     RET      
0EFC                CRLF:        
0EFC   CD 03 0F               CALL   printStr   
0EFF   0D 0A 00               .CSTR   "\r\n"   
0F02   C9                     RET      
0F03                             ; prints a null teminated string
0F03                             ; the string should be immediately following the call
0F03                PRINTSTR:      
0F03   E3                     EX   (sp),hl   ; swap			
0F04   CD BC 0E               CALL   putstr   
0F07   23                     INC   hl   ; inc past NUL
0F08   E3                     EX   (sp),hl   ; put it back	
0F09   C9                     RET      
0F0A                INIT:        
0F0A   21 F0 01               LD   hl,titleStr   
0F0D   11 0E 57               LD   de,titleBuf   
0F10   06 14                  LD   b,20   
0F12                INIT1:       
0F12   1A                     LD   a,(de)   
0F13   BE                     CP   (hl)   
0F14   20 17                  JR   nz,coldBoot0   
0F16   13                     INC   de   
0F17   23                     INC   hl   
0F18   10 F8                  DJNZ   init1   
0F1A                WARMINIT:      
0F1A   ED 4B FC 56            LD   bc,(vSavedIP)   ; restore IP
0F1E   ED 7B FE 56            LD   sp,(vSavedSP)   ; restore SP
0F22   DD 2A 00 57            LD   ix,(vSavedNext)   ; restore Next
0F26   FD 2A 02 57            LD   iy,(vSavedBP)   ; restore BP
0F2A   C3 64 0F               JP   start1   
0F2D                COLDBOOT0:      
0F2D   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F30   11 0E 57               LD   de,titleBuf   
0F33   06 14                  LD   b,20   
0F35   ED B0                  LDIR      
0F37                COLDINIT:      
0F37   21 DE 01               LD   hl,isysVars   
0F3A   11 E6 56               LD   de,sysVars   
0F3D   01 12 00               LD   bc,9 * 2   
0F40   ED B0                  LDIR      
0F42   21 00 56               LD   hl,vars   ; 52 vars LO HI
0F45   06 34                  LD   b,26*2   
0F47   AF                     XOR   a   
0F48                COLDBOOT1:      
0F48   77                     LD   (hl),a   
0F49   23                     INC   hl   
0F4A   10 FC                  DJNZ   coldBoot1   
0F4C   DD 2A EE 56            LD   ix,(vNext)   
0F50   FD 21 00 54            LD   iy,STACK   
0F54   C9                     RET      
0F55                COLDSTART:      
0F55   31 00 54               LD   sp,STACK   
0F58   CD 2D 0F               CALL   coldBoot0   
0F5B   C3 64 0F               JP   start1   
0F5E                START:       
0F5E   31 00 54               LD   sp,STACK   ; start Monty
0F61   CD 0A 0F               CALL   init   ; setups
0F64                START1:      
0F64   21 0E 57               LD   hl,titleBuf   
0F67   CD BC 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F6A                INTERPRET:      
0F6A   CD F3 0E               CALL   prompt   
0F6D   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F70   21 00 54               LD   hl,TIB   
0F73   22 EA 56               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F76                INTERPRET2:      ; calculate nesting
0F76   1E 00                  LD   e,0   ; initilize nesting value
0F78   C5                     PUSH   bc   ; save offset into TIB,
0F79                             ; bc is also the count of chars in TIB
0F79   21 00 54               LD   hl,TIB   ; hl is start of TIB
0F7C   18 0B                  JR   interpret4   
0F7E                INTERPRET3:      
0F7E   3E 33                  LD   a,"3"   
0F80   CD 85 00               CALL   putchar   
0F83   7E                     LD   a,(hl)   ; a = char in TIB
0F84   23                     INC   hl   ; inc pointer into TIB
0F85   0B                     DEC   bc   ; dec count of chars in TIB
0F86   CD C1 0E               CALL   nesting   ; update nesting value
0F89                INTERPRET4:      
0F89   79                     LD   a,c   ; is count zero?
0F8A   B0                     OR   b   
0F8B   20 F1                  JR   nz,interpret3   ; if not loop
0F8D   C1                     POP   bc   ; restore offset into TIB
0F8E                INTERPRET5:      
0F8E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F91   FE 20                  CP   $20   ; compare to space
0F93   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F95   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F97                             ; ???? NEEDED?
0F97   28 36                  JR   z,interpret8   
0F99   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F9B   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F9D   FE 05                  CP   CTRL_E   
0F9F   CA 30 10               JP   z,edit_   
0FA2   FE 08                  CP   CTRL_H   
0FA4   CA 20 10               JP   z,backSpace_   
0FA7   FE 0A                  CP   CTRL_J   
0FA9   CA 33 10               JP   z,reEdit_   
0FAC                             ; cp CTRL_S
0FAC                             ; jp z,printStack_
0FAC                             ; DB     lsb(edit_)       ; ENQ ^E  5
0FAC                             ; DB     lsb(reedit_)     ; LF  ^J 10
0FAC                             ; DB     lsb(list_)       ; FF  ^L 12
0FAC                             ; DB     lsb(printStack_) ; DLE ^P 16
0FAC                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0FAC                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0FAC                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0FAC                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0FAC                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0FAC                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0FAC                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0FAC                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0FAC                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0FAC                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0FAC                INTERPRET5A:      
0FAC                             ; ld (vTIBPtr),bc
0FAC                             ; ld bc,(vTIBPtr)
0FAC   18 C8                  JR   interpret2   
0FAE                INTERPRET6:      
0FAE   21 00 54               LD   hl,TIB   
0FB1   09                     ADD   hl,bc   
0FB2   77                     LD   (hl),a   ; store the character in textbuf
0FB3   03                     INC   bc   
0FB4   CD 85 00               CALL   putchar   ; echo character to screen
0FB7   CD C1 0E               CALL   nesting   
0FBA   18 D2                  JR   interpret5   ; wait for next character
0FBC                INTERPRET7:      
0FBC   21 00 54               LD   hl,TIB   
0FBF   09                     ADD   hl,bc   
0FC0   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0FC2   23                     INC   hl   
0FC3   36 0A                  LD   (hl),"\n"   
0FC5   23                     INC   hl   
0FC6   03                     INC   bc   
0FC7   03                     INC   bc   
0FC8   CD FC 0E               CALL   crlf   ; echo character to screen
0FCB   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FCC   B7                     OR   a   
0FCD   20 BF                  JR   nz,interpret5   
0FCF                INTERPRET8:      
0FCF   21 00 54               LD   hl,TIB   
0FD2   09                     ADD   hl,bc   
0FD3   22 EA 56               LD   (vTIBPtr),hl   
0FD6   01 00 54               LD   bc,TIB   
0FD9   ED 43 FC 56            LD   (vSavedIP),bc   ; save IP
0FDD   ED 73 FE 56            LD   (vSavedSP),sp   ; save SP
0FE1   DD 22 00 57            LD   (vSavedNext),ix   ; save Next
0FE5   FD 22 02 57            LD   (vSavedBP),iy   ; save BP
0FE9   0B                     DEC   bc   
0FEA                NEXT:        
0FEA   03                     INC   bc   ; Increment the IP
0FEB   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FEC   FE 20                  CP   " "   ; whitespace?
0FEE   28 FA                  JR   z,next   ; space? ignore
0FF0   38 0D                  JR   c,next1   
0FF2   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FF4   6F                     LD   l,a   ; index into table
0FF5   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FF7   6E                     LD   l,(hl)   ; get low jump address
0FF8   24                     INC   h   ; page 2
0FF9   FE BA                  CP   "Z" - "!" + 1 + $80   
0FFB   38 01                  JR   c,next0   
0FFD   24                     INC   h   ; page 3
0FFE                NEXT0:       
0FFE   E9                     JP   (hl)   ; Jump to routine
0FFF                NEXT1:       
0FFF   FE 00                  CP   NUL   ; end of input string?
1001   28 03                  JR   z,exit   
1003   C3 6A 0F               JP   interpret   ; no, other whitespace, macros?
1006                EXIT:        
1006   03                     INC   bc   
1007   60 69                  LD   hl,bc   
1009   E9                     JP   (hl)   
100A                RUN:         
100A   C1                     POP   bc   
100B   0B                     DEC   bc   
100C   DD E9                  JP   (ix)   
100E                ERROR:       
100E   E5                     PUSH   hl   
100F   CD 0A 10               CALL   run   
1012   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
101D   C3 6A 0F               JP   interpret   
1020                BACKSPACE_:      
1020   79                     LD   a,c   
1021   B0                     OR   b   
1022   CA 76 0F               JP   z,interpret2   
1025   0B                     DEC   bc   
1026   CD 03 0F               CALL   printStr   
1029   08 20 08 00            .CSTR   "\b \b"   
102D   C3 76 0F               JP   interpret2   
1030                             ; edit
1030                EDIT_:       
1030   C3 6A 0F               JP   interpret   
1033                REEDIT_:      
1033   C3 6A 0F               JP   interpret   
1036                             ; editDef:
1036                             ;     pop hl                      ; pop ret address
1036                             ;     ex (sp),hl                  ; swap with TOS
1036                             ;     push hl                     ; dup TOS
1036                             ;     ld a,l                      ; a = ident
1036                             ;     ld de,TIB                   ; de = start of TIB
1036                             ;     ld (vTIBPtr),de             ; update TIB*
1036                             ;     push ix                     ; save NEXT
1036                             ;     ld ix,editDef0              ; NEXT = editDef0
1036                             ;     jp lookupRef                ; convert letter into address
1036                             ; editDef0:
1036                             ;     ld e,(hl)                   ; de = (hl++)
1036                             ;     inc hl
1036                             ;     ld d,(hl)
1036                             ;     ld a,d                      ; de == 0 ?
1036                             ;     or e
1036                             ;     jr z,editDef4
1036                             ;     ld ix,editDef3              ; NEXT = editDef3
1036                             ;     ex de,hl
1036                             ;     ld a,(hl)
1036                             ;     cp "{"
1036                             ;     jr nz,editDef1
1036                             ;     jp editBlock0               ; convert letter into address
1036                             ; editDef1:
1036                             ;     cp "("
1036                             ;     jr nz,editDef2
1036                             ;     jp editBlock0               ; convert letter into address
1036                             ; editDef2:
1036                             ;     jp editFunc
1036                             ; editDef3:
1036                             ;     ld a," "                    ; write assign
1036                             ;     call writeChar
1036                             ;     pop hl                      ; a = ident
1036                             ;     ld a,l
1036                             ;     call writeChar
1036                             ;     ld a,"="                    ; write assign
1036                             ;     call writeChar
1036                             ;     ld ix,editDef4              ; NEXT = editDef4
1036                             ;     jp printTIB
1036                             ; editDef4:
1036                             ;     pop ix                      ; restore NEXT
1036                             ;     jp (ix)
1036                             ; writeChar:
1036                             ;     ld de,(vTIBPtr)             ; de = TIB*
1036                             ;     ld (de),a                   ; write ident
1036                             ;     inc de
1036                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1036                             ;     ret
1036                             ; ; printTIB
1036                             ; printTIB:
1036                             ;     ld hl,(vTIBPtr)
1036                             ;     ld de,TIB
1036                             ;     or a
1036                             ;     sbc hl,de
1036                             ;     jp printTIB2
1036                             ; printTIB1:
1036                             ;     ld a,(de)
1036                             ;     call putchar
1036                             ; printTIB2:
1036                             ;     ld a,l
1036                             ;     or h
1036                             ;     jr nz,printTIB1
1036                             ;     jp (ix)
1036                             ; editBlock:
1036                             ;     pop hl                      ; hl = block*
1036                             ; editBlock0:
1036                             ;     push ix                     ; save next
1036                             ;     push hl                     ; push block*
1036                             ;     push hl                     ; push block*
1036                             ;     ld ix,(editBlock2)
1036                             ;     jp blockLength
1036                             ; editBlock1:
1036                             ;     pop hl                      ; bc = length, (sp) = IP
1036                             ;     pop de                      ; de = block*
1036                             ;     ld a,l
1036                             ;     or h
1036                             ;     jr z,editBlock2
1036                             ;     push bc
1036                             ;     ld bc,hl
1036                             ;     ex de,hl                    ; hl = block*
1036                             ;     ld de,(vTIBPtr)              ; de = TIB*
1036                             ;     ldir                        ; copy block to TIB
1036                             ;     ld (vTIBPtr),de              ; save TIB*
1036                             ;     pop bc
1036                             ; editBlock2:
1036                             ;     pop ix                      ; restore next
1036                             ;     jp (ix)
1036                             ; editFunc:
1036                             ;     jp (ix)
1036                             ; editArray:
1036                             ;     jp (ix)
1036                             ; editparseArgs:
1036                             ;     jp (ix)
1036                             ; ; blockLength
1036                             ; ; addr1 -- length
1036                             ; blockLength:
1036                             ;     pop hl                      ; block*
1036                             ;     push hl                     ; save block*
1036                             ;     inc hl                      ; skip first char
1036                             ;     ld d,1                      ; increase nesting
1036                             ; blockLength1:                   ; Skip to end of definition
1036                             ;     ld a,(hl)                   ; Get the next character
1036                             ;     inc hl                      ; Point to next character
1036                             ;     cp " " + 1                  ; ignore whitespace
1036                             ;     jr c,blockLength1
1036                             ;     cp ")"
1036                             ;     jr z,blockLength4
1036                             ;     cp "}"
1036                             ;     jr z,blockLength4
1036                             ;     cp "]"
1036                             ;     jr z,blockLength4
1036                             ;     cp "("
1036                             ;     jr z,blockLength2
1036                             ;     cp "{"
1036                             ;     jr z,blockLength2
1036                             ;     cp "["
1036                             ;     jr z,blockLength2
1036                             ;     cp "'"
1036                             ;     jr z,blockLength3
1036                             ;     cp "`"
1036                             ;     jr z,blockLength3
1036                             ;     cp DQ
1036                             ;     jr z,blockLength3
1036                             ;     jr blockLength1
1036                             ; blockLength2:
1036                             ;     inc d
1036                             ;     jr blockLength1
1036                             ; blockLength4:
1036                             ;     dec d
1036                             ;     jr nz, blockLength1         ; get the next element
1036                             ; blockLength3:
1036                             ;     ld a,$80
1036                             ;     xor d
1036                             ;     ld d,a
1036                             ;     jr nz, blockLength1
1036                             ;     pop hl                      ; hl = block*
1036                             ;     or a
1036                             ;     sbc hl,de
1036                             ;     push hl
1036                             ;     jp (ix)
1036                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1036                             ; \a start of stack \#3 depth \b base \$ prompt
1036                             ; DW dStack               ; a vS0 start of datastack			
1036                             ; DW FALSE                ; b vBase16
1036                             ; DW 0                    ; c vTIBPtr an offset to the tib
1036                             ; DW 0                    ; d
1036                             ; DW 65                   ; e vLastDef "A" last command u defined
1036                             ; DW 0                    ; f
1036                             ; DW page6                ; g 256 bytes limits
1036                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1036                          ;*Macro unroll: FUNC f1, 0, ""
1036                F1:          
1036   CD 9F 03               CALL   go   
1039   00 00                  DW   NUL   
103B   41 10                  DW   f1M_3073S12   
103D   3F 10                  DW   $+2   
103F   00                     DB   0   
1040   00                     .PSTR   ""   
1041                F1M_3073S12:      
1041   00                     DB   0   
1042                          ;*Macro unroll: FUNC f2, 0, ""
1042                F2:          
1042   CD 9F 03               CALL   go   
1045   00 00                  DW   NUL   
1047   4D 10                  DW   f2M_3075S15   
1049   4B 10                  DW   $+2   
104B   00                     DB   0   
104C   00                     .PSTR   ""   
104D                F2M_3075S15:      
104D   00                     DB   0   
104E                          ;*Macro unroll: FUNC f3, 0, ""
104E                F3:          
104E   CD 9F 03               CALL   go   
1051   00 00                  DW   NUL   
1053   59 10                  DW   f3M_3077S18   
1055   57 10                  DW   $+2   
1057   00                     DB   0   
1058   00                     .PSTR   ""   
1059                F3M_3077S18:      
1059   00                     DB   0   
105A                          ;*Macro unroll: FUNC f4, 0, ""
105A                F4:          
105A   CD 9F 03               CALL   go   
105D   00 00                  DW   NUL   
105F   65 10                  DW   f4M_3079S21   
1061   63 10                  DW   $+2   
1063   00                     DB   0   
1064   00                     .PSTR   ""   
1065                F4M_3079S21:      
1065   00                     DB   0   
1066                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1100                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1100                             ; test "[1 2 3].a", 0
1100                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1100                             ; test "/hx/bm$1234.",0
1100                             ; test "/bm257.",0
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1100                          ;*Macro unroll:  test "0 x = 2 x + = x .", false
1100   31 00 54               LD   SP,STACK   
1103   CD 37 0F               CALL   coldInit   
1106   CD 57 52               CALL   execStr   
1109   30 20 78 20 3D 20 32 20 78 20 2B 20 3D 20 78 20 2E 00 DB   "0 x = 2 x + = x .",0   
111B   E1                     POP   HL   
111C   E5                     PUSH   HL   
111D   11 00 00               LD   DE,false   
1120   B7                     OR   A   
1121   ED 52                  SBC   HL,DE   
1123   7D                     LD   A,L   
1124   B4                     OR   H   
1125   CA 86 11               JP   Z,expectM_3096S43   
1128   CD 03 0F               CALL   printStr   
112B   43 6F 64 65 3A 20 30 20 78 20 3D 20 32 20 78 20 2B 20 3D 20 78 20 2E 00 .CSTR   "Code: ","0 x = 2 x + = x ."   
1143   CD 03 0F               CALL   printStr   
1146   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1155   21 00 00               LD   hl,false   
1158   E5                     PUSH   hl   
1159   E5                     PUSH   hl   
115A   CD 0A 10               CALL   run   
115D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1164   CD 03 0F               CALL   printStr   
1167   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1174   E1                     POP   hl   
1175   E5                     PUSH   hl   
1176   E5                     PUSH   hl   
1177   CD 0A 10               CALL   run   
117A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1185   76                     HALT      
1186                EXPECTM_3096S43:      
1186   E1                     POP   HL   
1187   CD 03 0F               CALL   printStr   
118A   44 6F 6E 65 21 00      .CSTR   "Done!"   
1190   76                     HALT      
1191                          ;*Macro unroll:  test "/f", false
1191   31 00 54               LD   SP,STACK   
1194   CD 37 0F               CALL   coldInit   
1197   CD 57 52               CALL   execStr   
119A   2F 66 00               DB   "/f",0   
119D   E1                     POP   HL   
119E   E5                     PUSH   HL   
119F   11 00 00               LD   DE,false   
11A2   B7                     OR   A   
11A3   ED 52                  SBC   HL,DE   
11A5   7D                     LD   A,L   
11A6   B4                     OR   H   
11A7   CA F9 11               JP   Z,expectM_3100S48   
11AA   CD 03 0F               CALL   printStr   
11AD   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11B6   CD 03 0F               CALL   printStr   
11B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11C8   21 00 00               LD   hl,false   
11CB   E5                     PUSH   hl   
11CC   E5                     PUSH   hl   
11CD   CD 0A 10               CALL   run   
11D0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11D7   CD 03 0F               CALL   printStr   
11DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E7   E1                     POP   hl   
11E8   E5                     PUSH   hl   
11E9   E5                     PUSH   hl   
11EA   CD 0A 10               CALL   run   
11ED   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
11F8   76                     HALT      
11F9                EXPECTM_3100S48:      
11F9   E1                     POP   HL   
11FA                          ;*Macro unroll:  test "/t", true
11FA   31 00 54               LD   SP,STACK   
11FD   CD 37 0F               CALL   coldInit   
1200   CD 57 52               CALL   execStr   
1203   2F 74 00               DB   "/t",0   
1206   E1                     POP   HL   
1207   E5                     PUSH   HL   
1208   11 FF FF               LD   DE,true   
120B   B7                     OR   A   
120C   ED 52                  SBC   HL,DE   
120E   7D                     LD   A,L   
120F   B4                     OR   H   
1210   CA 62 12               JP   Z,expectM_3101S49   
1213   CD 03 0F               CALL   printStr   
1216   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
121F   CD 03 0F               CALL   printStr   
1222   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1231   21 FF FF               LD   hl,true   
1234   E5                     PUSH   hl   
1235   E5                     PUSH   hl   
1236   CD 0A 10               CALL   run   
1239   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1240   CD 03 0F               CALL   printStr   
1243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1250   E1                     POP   hl   
1251   E5                     PUSH   hl   
1252   E5                     PUSH   hl   
1253   CD 0A 10               CALL   run   
1256   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1261   76                     HALT      
1262                EXPECTM_3101S49:      
1262   E1                     POP   HL   
1263                          ;*Macro unroll:  test "1", 1
1263   31 00 54               LD   SP,STACK   
1266   CD 37 0F               CALL   coldInit   
1269   CD 57 52               CALL   execStr   
126C   31 00                  DB   "1",0   
126E   E1                     POP   HL   
126F   E5                     PUSH   HL   
1270   11 01 00               LD   DE,1   
1273   B7                     OR   A   
1274   ED 52                  SBC   HL,DE   
1276   7D                     LD   A,L   
1277   B4                     OR   H   
1278   CA C9 12               JP   Z,expectM_3102S50   
127B   CD 03 0F               CALL   printStr   
127E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1286   CD 03 0F               CALL   printStr   
1289   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1298   21 01 00               LD   hl,1   
129B   E5                     PUSH   hl   
129C   E5                     PUSH   hl   
129D   CD 0A 10               CALL   run   
12A0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12A7   CD 03 0F               CALL   printStr   
12AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12B7   E1                     POP   hl   
12B8   E5                     PUSH   hl   
12B9   E5                     PUSH   hl   
12BA   CD 0A 10               CALL   run   
12BD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12C8   76                     HALT      
12C9                EXPECTM_3102S50:      
12C9   E1                     POP   HL   
12CA                          ;*Macro unroll:  test "2", 2
12CA   31 00 54               LD   SP,STACK   
12CD   CD 37 0F               CALL   coldInit   
12D0   CD 57 52               CALL   execStr   
12D3   32 00                  DB   "2",0   
12D5   E1                     POP   HL   
12D6   E5                     PUSH   HL   
12D7   11 02 00               LD   DE,2   
12DA   B7                     OR   A   
12DB   ED 52                  SBC   HL,DE   
12DD   7D                     LD   A,L   
12DE   B4                     OR   H   
12DF   CA 30 13               JP   Z,expectM_3103S51   
12E2   CD 03 0F               CALL   printStr   
12E5   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
12ED   CD 03 0F               CALL   printStr   
12F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12FF   21 02 00               LD   hl,2   
1302   E5                     PUSH   hl   
1303   E5                     PUSH   hl   
1304   CD 0A 10               CALL   run   
1307   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
130E   CD 03 0F               CALL   printStr   
1311   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131E   E1                     POP   hl   
131F   E5                     PUSH   hl   
1320   E5                     PUSH   hl   
1321   CD 0A 10               CALL   run   
1324   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
132F   76                     HALT      
1330                EXPECTM_3103S51:      
1330   E1                     POP   HL   
1331                          ;*Macro unroll:  test "1", 1
1331   31 00 54               LD   SP,STACK   
1334   CD 37 0F               CALL   coldInit   
1337   CD 57 52               CALL   execStr   
133A   31 00                  DB   "1",0   
133C   E1                     POP   HL   
133D   E5                     PUSH   HL   
133E   11 01 00               LD   DE,1   
1341   B7                     OR   A   
1342   ED 52                  SBC   HL,DE   
1344   7D                     LD   A,L   
1345   B4                     OR   H   
1346   CA 97 13               JP   Z,expectM_3104S52   
1349   CD 03 0F               CALL   printStr   
134C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1354   CD 03 0F               CALL   printStr   
1357   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1366   21 01 00               LD   hl,1   
1369   E5                     PUSH   hl   
136A   E5                     PUSH   hl   
136B   CD 0A 10               CALL   run   
136E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1375   CD 03 0F               CALL   printStr   
1378   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1385   E1                     POP   hl   
1386   E5                     PUSH   hl   
1387   E5                     PUSH   hl   
1388   CD 0A 10               CALL   run   
138B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1396   76                     HALT      
1397                EXPECTM_3104S52:      
1397   E1                     POP   HL   
1398                          ;*Macro unroll:  test "0", 0
1398   31 00 54               LD   SP,STACK   
139B   CD 37 0F               CALL   coldInit   
139E   CD 57 52               CALL   execStr   
13A1   30 00                  DB   "0",0   
13A3   E1                     POP   HL   
13A4   E5                     PUSH   HL   
13A5   11 00 00               LD   DE,0   
13A8   B7                     OR   A   
13A9   ED 52                  SBC   HL,DE   
13AB   7D                     LD   A,L   
13AC   B4                     OR   H   
13AD   CA FE 13               JP   Z,expectM_3105S53   
13B0   CD 03 0F               CALL   printStr   
13B3   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13BB   CD 03 0F               CALL   printStr   
13BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13CD   21 00 00               LD   hl,0   
13D0   E5                     PUSH   hl   
13D1   E5                     PUSH   hl   
13D2   CD 0A 10               CALL   run   
13D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13DC   CD 03 0F               CALL   printStr   
13DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EC   E1                     POP   hl   
13ED   E5                     PUSH   hl   
13EE   E5                     PUSH   hl   
13EF   CD 0A 10               CALL   run   
13F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13FD   76                     HALT      
13FE                EXPECTM_3105S53:      
13FE   E1                     POP   HL   
13FF                          ;*Macro unroll:  test "10", 10
13FF   31 00 54               LD   SP,STACK   
1402   CD 37 0F               CALL   coldInit   
1405   CD 57 52               CALL   execStr   
1408   31 30 00               DB   "10",0   
140B   E1                     POP   HL   
140C   E5                     PUSH   HL   
140D   11 0A 00               LD   DE,10   
1410   B7                     OR   A   
1411   ED 52                  SBC   HL,DE   
1413   7D                     LD   A,L   
1414   B4                     OR   H   
1415   CA 67 14               JP   Z,expectM_3106S54   
1418   CD 03 0F               CALL   printStr   
141B   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1424   CD 03 0F               CALL   printStr   
1427   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1436   21 0A 00               LD   hl,10   
1439   E5                     PUSH   hl   
143A   E5                     PUSH   hl   
143B   CD 0A 10               CALL   run   
143E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1445   CD 03 0F               CALL   printStr   
1448   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1455   E1                     POP   hl   
1456   E5                     PUSH   hl   
1457   E5                     PUSH   hl   
1458   CD 0A 10               CALL   run   
145B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1466   76                     HALT      
1467                EXPECTM_3106S54:      
1467   E1                     POP   HL   
1468                          ;*Macro unroll:  test "123", 123
1468   31 00 54               LD   SP,STACK   
146B   CD 37 0F               CALL   coldInit   
146E   CD 57 52               CALL   execStr   
1471   31 32 33 00            DB   "123",0   
1475   E1                     POP   HL   
1476   E5                     PUSH   HL   
1477   11 7B 00               LD   DE,123   
147A   B7                     OR   A   
147B   ED 52                  SBC   HL,DE   
147D   7D                     LD   A,L   
147E   B4                     OR   H   
147F   CA D2 14               JP   Z,expectM_3107S55   
1482   CD 03 0F               CALL   printStr   
1485   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
148F   CD 03 0F               CALL   printStr   
1492   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A1   21 7B 00               LD   hl,123   
14A4   E5                     PUSH   hl   
14A5   E5                     PUSH   hl   
14A6   CD 0A 10               CALL   run   
14A9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14B0   CD 03 0F               CALL   printStr   
14B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C0   E1                     POP   hl   
14C1   E5                     PUSH   hl   
14C2   E5                     PUSH   hl   
14C3   CD 0A 10               CALL   run   
14C6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14D1   76                     HALT      
14D2                EXPECTM_3107S55:      
14D2   E1                     POP   HL   
14D3                          ;*Macro unroll:  test "-1",-1
14D3   31 00 54               LD   SP,STACK   
14D6   CD 37 0F               CALL   coldInit   
14D9   CD 57 52               CALL   execStr   
14DC   2D 31 00               DB   "-1",0   
14DF   E1                     POP   HL   
14E0   E5                     PUSH   HL   
14E1   11 FF FF               LD   DE,-1   
14E4   B7                     OR   A   
14E5   ED 52                  SBC   HL,DE   
14E7   7D                     LD   A,L   
14E8   B4                     OR   H   
14E9   CA 3B 15               JP   Z,expectM_3108S56   
14EC   CD 03 0F               CALL   printStr   
14EF   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14F8   CD 03 0F               CALL   printStr   
14FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150A   21 FF FF               LD   hl,-1   
150D   E5                     PUSH   hl   
150E   E5                     PUSH   hl   
150F   CD 0A 10               CALL   run   
1512   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1519   CD 03 0F               CALL   printStr   
151C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1529   E1                     POP   hl   
152A   E5                     PUSH   hl   
152B   E5                     PUSH   hl   
152C   CD 0A 10               CALL   run   
152F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
153A   76                     HALT      
153B                EXPECTM_3108S56:      
153B   E1                     POP   HL   
153C                          ;*Macro unroll:  test "-1/ab",1
153C   31 00 54               LD   SP,STACK   
153F   CD 37 0F               CALL   coldInit   
1542   CD 57 52               CALL   execStr   
1545   2D 31 2F 61 62 00      DB   "-1/ab",0   
154B   E1                     POP   HL   
154C   E5                     PUSH   HL   
154D   11 01 00               LD   DE,1   
1550   B7                     OR   A   
1551   ED 52                  SBC   HL,DE   
1553   7D                     LD   A,L   
1554   B4                     OR   H   
1555   CA AA 15               JP   Z,expectM_3109S57   
1558   CD 03 0F               CALL   printStr   
155B   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
1567   CD 03 0F               CALL   printStr   
156A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1579   21 01 00               LD   hl,1   
157C   E5                     PUSH   hl   
157D   E5                     PUSH   hl   
157E   CD 0A 10               CALL   run   
1581   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1588   CD 03 0F               CALL   printStr   
158B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1598   E1                     POP   hl   
1599   E5                     PUSH   hl   
159A   E5                     PUSH   hl   
159B   CD 0A 10               CALL   run   
159E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15A9   76                     HALT      
15AA                EXPECTM_3109S57:      
15AA   E1                     POP   HL   
15AB                          ;*Macro unroll:  test "_a", $61
15AB   31 00 54               LD   SP,STACK   
15AE   CD 37 0F               CALL   coldInit   
15B1   CD 57 52               CALL   execStr   
15B4   5F 61 00               DB   "_a",0   
15B7   E1                     POP   HL   
15B8   E5                     PUSH   HL   
15B9   11 61 00               LD   DE,$61   
15BC   B7                     OR   A   
15BD   ED 52                  SBC   HL,DE   
15BF   7D                     LD   A,L   
15C0   B4                     OR   H   
15C1   CA 13 16               JP   Z,expectM_3110S58   
15C4   CD 03 0F               CALL   printStr   
15C7   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
15D0   CD 03 0F               CALL   printStr   
15D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15E2   21 61 00               LD   hl,$61   
15E5   E5                     PUSH   hl   
15E6   E5                     PUSH   hl   
15E7   CD 0A 10               CALL   run   
15EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15F1   CD 03 0F               CALL   printStr   
15F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1601   E1                     POP   hl   
1602   E5                     PUSH   hl   
1603   E5                     PUSH   hl   
1604   CD 0A 10               CALL   run   
1607   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1612   76                     HALT      
1613                EXPECTM_3110S58:      
1613   E1                     POP   HL   
1614                          ;*Macro unroll:  test "__", $5F
1614   31 00 54               LD   SP,STACK   
1617   CD 37 0F               CALL   coldInit   
161A   CD 57 52               CALL   execStr   
161D   5F 5F 00               DB   "__",0   
1620   E1                     POP   HL   
1621   E5                     PUSH   HL   
1622   11 5F 00               LD   DE,$5F   
1625   B7                     OR   A   
1626   ED 52                  SBC   HL,DE   
1628   7D                     LD   A,L   
1629   B4                     OR   H   
162A   CA 7C 16               JP   Z,expectM_3111S59   
162D   CD 03 0F               CALL   printStr   
1630   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1639   CD 03 0F               CALL   printStr   
163C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
164B   21 5F 00               LD   hl,$5F   
164E   E5                     PUSH   hl   
164F   E5                     PUSH   hl   
1650   CD 0A 10               CALL   run   
1653   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
165A   CD 03 0F               CALL   printStr   
165D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
166A   E1                     POP   hl   
166B   E5                     PUSH   hl   
166C   E5                     PUSH   hl   
166D   CD 0A 10               CALL   run   
1670   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
167B   76                     HALT      
167C                EXPECTM_3111S59:      
167C   E1                     POP   HL   
167D                          ;*Macro unroll:  test "$10", $10
167D   31 00 54               LD   SP,STACK   
1680   CD 37 0F               CALL   coldInit   
1683   CD 57 52               CALL   execStr   
1686   24 31 30 00            DB   "$10",0   
168A   E1                     POP   HL   
168B   E5                     PUSH   HL   
168C   11 10 00               LD   DE,$10   
168F   B7                     OR   A   
1690   ED 52                  SBC   HL,DE   
1692   7D                     LD   A,L   
1693   B4                     OR   H   
1694   CA E7 16               JP   Z,expectM_3112S60   
1697   CD 03 0F               CALL   printStr   
169A   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16A4   CD 03 0F               CALL   printStr   
16A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16B6   21 10 00               LD   hl,$10   
16B9   E5                     PUSH   hl   
16BA   E5                     PUSH   hl   
16BB   CD 0A 10               CALL   run   
16BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16C5   CD 03 0F               CALL   printStr   
16C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D5   E1                     POP   hl   
16D6   E5                     PUSH   hl   
16D7   E5                     PUSH   hl   
16D8   CD 0A 10               CALL   run   
16DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16E6   76                     HALT      
16E7                EXPECTM_3112S60:      
16E7   E1                     POP   HL   
16E8                          ;*Macro unroll:  test "$FF", $FF
16E8   31 00 54               LD   SP,STACK   
16EB   CD 37 0F               CALL   coldInit   
16EE   CD 57 52               CALL   execStr   
16F1   24 46 46 00            DB   "$FF",0   
16F5   E1                     POP   HL   
16F6   E5                     PUSH   HL   
16F7   11 FF 00               LD   DE,$FF   
16FA   B7                     OR   A   
16FB   ED 52                  SBC   HL,DE   
16FD   7D                     LD   A,L   
16FE   B4                     OR   H   
16FF   CA 52 17               JP   Z,expectM_3113S61   
1702   CD 03 0F               CALL   printStr   
1705   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
170F   CD 03 0F               CALL   printStr   
1712   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1721   21 FF 00               LD   hl,$FF   
1724   E5                     PUSH   hl   
1725   E5                     PUSH   hl   
1726   CD 0A 10               CALL   run   
1729   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1730   CD 03 0F               CALL   printStr   
1733   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1740   E1                     POP   hl   
1741   E5                     PUSH   hl   
1742   E5                     PUSH   hl   
1743   CD 0A 10               CALL   run   
1746   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1751   76                     HALT      
1752                EXPECTM_3113S61:      
1752   E1                     POP   HL   
1753                          ;*Macro unroll:  test "-1 2 +",1
1753   31 00 54               LD   SP,STACK   
1756   CD 37 0F               CALL   coldInit   
1759   CD 57 52               CALL   execStr   
175C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1763   E1                     POP   HL   
1764   E5                     PUSH   HL   
1765   11 01 00               LD   DE,1   
1768   B7                     OR   A   
1769   ED 52                  SBC   HL,DE   
176B   7D                     LD   A,L   
176C   B4                     OR   H   
176D   CA C3 17               JP   Z,expectM_3114S62   
1770   CD 03 0F               CALL   printStr   
1773   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1780   CD 03 0F               CALL   printStr   
1783   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1792   21 01 00               LD   hl,1   
1795   E5                     PUSH   hl   
1796   E5                     PUSH   hl   
1797   CD 0A 10               CALL   run   
179A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17A1   CD 03 0F               CALL   printStr   
17A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B1   E1                     POP   hl   
17B2   E5                     PUSH   hl   
17B3   E5                     PUSH   hl   
17B4   CD 0A 10               CALL   run   
17B7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17C2   76                     HALT      
17C3                EXPECTM_3114S62:      
17C3   E1                     POP   HL   
17C4                          ;*Macro unroll:  test "-1 1 +",0
17C4   31 00 54               LD   SP,STACK   
17C7   CD 37 0F               CALL   coldInit   
17CA   CD 57 52               CALL   execStr   
17CD   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17D4   E1                     POP   HL   
17D5   E5                     PUSH   HL   
17D6   11 00 00               LD   DE,0   
17D9   B7                     OR   A   
17DA   ED 52                  SBC   HL,DE   
17DC   7D                     LD   A,L   
17DD   B4                     OR   H   
17DE   CA 34 18               JP   Z,expectM_3115S63   
17E1   CD 03 0F               CALL   printStr   
17E4   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17F1   CD 03 0F               CALL   printStr   
17F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1803   21 00 00               LD   hl,0   
1806   E5                     PUSH   hl   
1807   E5                     PUSH   hl   
1808   CD 0A 10               CALL   run   
180B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1812   CD 03 0F               CALL   printStr   
1815   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1822   E1                     POP   hl   
1823   E5                     PUSH   hl   
1824   E5                     PUSH   hl   
1825   CD 0A 10               CALL   run   
1828   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1833   76                     HALT      
1834                EXPECTM_3115S63:      
1834   E1                     POP   HL   
1835                          ;*Macro unroll:  test "1 2 +", 3
1835   31 00 54               LD   SP,STACK   
1838   CD 37 0F               CALL   coldInit   
183B   CD 57 52               CALL   execStr   
183E   31 20 32 20 2B 00      DB   "1 2 +",0   
1844   E1                     POP   HL   
1845   E5                     PUSH   HL   
1846   11 03 00               LD   DE,3   
1849   B7                     OR   A   
184A   ED 52                  SBC   HL,DE   
184C   7D                     LD   A,L   
184D   B4                     OR   H   
184E   CA A3 18               JP   Z,expectM_3116S64   
1851   CD 03 0F               CALL   printStr   
1854   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1860   CD 03 0F               CALL   printStr   
1863   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1872   21 03 00               LD   hl,3   
1875   E5                     PUSH   hl   
1876   E5                     PUSH   hl   
1877   CD 0A 10               CALL   run   
187A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1881   CD 03 0F               CALL   printStr   
1884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1891   E1                     POP   hl   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 0A 10               CALL   run   
1897   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18A2   76                     HALT      
18A3                EXPECTM_3116S64:      
18A3   E1                     POP   HL   
18A4                          ;*Macro unroll:  test "4 1 2 +", 3
18A4   31 00 54               LD   SP,STACK   
18A7   CD 37 0F               CALL   coldInit   
18AA   CD 57 52               CALL   execStr   
18AD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18B5   E1                     POP   HL   
18B6   E5                     PUSH   HL   
18B7   11 03 00               LD   DE,3   
18BA   B7                     OR   A   
18BB   ED 52                  SBC   HL,DE   
18BD   7D                     LD   A,L   
18BE   B4                     OR   H   
18BF   CA 16 19               JP   Z,expectM_3117S65   
18C2   CD 03 0F               CALL   printStr   
18C5   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18D3   CD 03 0F               CALL   printStr   
18D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E5   21 03 00               LD   hl,3   
18E8   E5                     PUSH   hl   
18E9   E5                     PUSH   hl   
18EA   CD 0A 10               CALL   run   
18ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18F4   CD 03 0F               CALL   printStr   
18F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1904   E1                     POP   hl   
1905   E5                     PUSH   hl   
1906   E5                     PUSH   hl   
1907   CD 0A 10               CALL   run   
190A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1915   76                     HALT      
1916                EXPECTM_3117S65:      
1916   E1                     POP   HL   
1917                          ;*Macro unroll:  test "123 456 +", 123+456
1917   31 00 54               LD   SP,STACK   
191A   CD 37 0F               CALL   coldInit   
191D   CD 57 52               CALL   execStr   
1920   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
192A   E1                     POP   HL   
192B   E5                     PUSH   HL   
192C   11 43 02               LD   DE,123+456   
192F   B7                     OR   A   
1930   ED 52                  SBC   HL,DE   
1932   7D                     LD   A,L   
1933   B4                     OR   H   
1934   CA 8D 19               JP   Z,expectM_3118S66   
1937   CD 03 0F               CALL   printStr   
193A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
194A   CD 03 0F               CALL   printStr   
194D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195C   21 43 02               LD   hl,123+456   
195F   E5                     PUSH   hl   
1960   E5                     PUSH   hl   
1961   CD 0A 10               CALL   run   
1964   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
196B   CD 03 0F               CALL   printStr   
196E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197B   E1                     POP   hl   
197C   E5                     PUSH   hl   
197D   E5                     PUSH   hl   
197E   CD 0A 10               CALL   run   
1981   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
198C   76                     HALT      
198D                EXPECTM_3118S66:      
198D   E1                     POP   HL   
198E                          ;*Macro unroll:  test "64 128 +", 64+128
198E   31 00 54               LD   SP,STACK   
1991   CD 37 0F               CALL   coldInit   
1994   CD 57 52               CALL   execStr   
1997   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19A0   E1                     POP   HL   
19A1   E5                     PUSH   HL   
19A2   11 C0 00               LD   DE,64+128   
19A5   B7                     OR   A   
19A6   ED 52                  SBC   HL,DE   
19A8   7D                     LD   A,L   
19A9   B4                     OR   H   
19AA   CA 02 1A               JP   Z,expectM_3119S67   
19AD   CD 03 0F               CALL   printStr   
19B0   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19BF   CD 03 0F               CALL   printStr   
19C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19D1   21 C0 00               LD   hl,64+128   
19D4   E5                     PUSH   hl   
19D5   E5                     PUSH   hl   
19D6   CD 0A 10               CALL   run   
19D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19E0   CD 03 0F               CALL   printStr   
19E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F0   E1                     POP   hl   
19F1   E5                     PUSH   hl   
19F2   E5                     PUSH   hl   
19F3   CD 0A 10               CALL   run   
19F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A01   76                     HALT      
1A02                EXPECTM_3119S67:      
1A02   E1                     POP   HL   
1A03                          ;*Macro unroll:  test "1 2 +", 3
1A03   31 00 54               LD   SP,STACK   
1A06   CD 37 0F               CALL   coldInit   
1A09   CD 57 52               CALL   execStr   
1A0C   31 20 32 20 2B 00      DB   "1 2 +",0   
1A12   E1                     POP   HL   
1A13   E5                     PUSH   HL   
1A14   11 03 00               LD   DE,3   
1A17   B7                     OR   A   
1A18   ED 52                  SBC   HL,DE   
1A1A   7D                     LD   A,L   
1A1B   B4                     OR   H   
1A1C   CA 71 1A               JP   Z,expectM_3120S68   
1A1F   CD 03 0F               CALL   printStr   
1A22   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A2E   CD 03 0F               CALL   printStr   
1A31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A40   21 03 00               LD   hl,3   
1A43   E5                     PUSH   hl   
1A44   E5                     PUSH   hl   
1A45   CD 0A 10               CALL   run   
1A48   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A4F   CD 03 0F               CALL   printStr   
1A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5F   E1                     POP   hl   
1A60   E5                     PUSH   hl   
1A61   E5                     PUSH   hl   
1A62   CD 0A 10               CALL   run   
1A65   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A70   76                     HALT      
1A71                EXPECTM_3120S68:      
1A71   E1                     POP   HL   
1A72                          ;*Macro unroll:  test "1a= a++ a",2
1A72   31 00 54               LD   SP,STACK   
1A75   CD 37 0F               CALL   coldInit   
1A78   CD 57 52               CALL   execStr   
1A7B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A85   E1                     POP   HL   
1A86   E5                     PUSH   HL   
1A87   11 02 00               LD   DE,2   
1A8A   B7                     OR   A   
1A8B   ED 52                  SBC   HL,DE   
1A8D   7D                     LD   A,L   
1A8E   B4                     OR   H   
1A8F   CA E8 1A               JP   Z,expectM_3121S69   
1A92   CD 03 0F               CALL   printStr   
1A95   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AA5   CD 03 0F               CALL   printStr   
1AA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB7   21 02 00               LD   hl,2   
1ABA   E5                     PUSH   hl   
1ABB   E5                     PUSH   hl   
1ABC   CD 0A 10               CALL   run   
1ABF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AC6   CD 03 0F               CALL   printStr   
1AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD6   E1                     POP   hl   
1AD7   E5                     PUSH   hl   
1AD8   E5                     PUSH   hl   
1AD9   CD 0A 10               CALL   run   
1ADC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AE7   76                     HALT      
1AE8                EXPECTM_3121S69:      
1AE8   E1                     POP   HL   
1AE9                          ;*Macro unroll:  test "-1 -1 -",0
1AE9   31 00 54               LD   SP,STACK   
1AEC   CD 37 0F               CALL   coldInit   
1AEF   CD 57 52               CALL   execStr   
1AF2   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1AFA   E1                     POP   HL   
1AFB   E5                     PUSH   HL   
1AFC   11 00 00               LD   DE,0   
1AFF   B7                     OR   A   
1B00   ED 52                  SBC   HL,DE   
1B02   7D                     LD   A,L   
1B03   B4                     OR   H   
1B04   CA 5B 1B               JP   Z,expectM_3122S70   
1B07   CD 03 0F               CALL   printStr   
1B0A   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B18   CD 03 0F               CALL   printStr   
1B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B2A   21 00 00               LD   hl,0   
1B2D   E5                     PUSH   hl   
1B2E   E5                     PUSH   hl   
1B2F   CD 0A 10               CALL   run   
1B32   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B39   CD 03 0F               CALL   printStr   
1B3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B49   E1                     POP   hl   
1B4A   E5                     PUSH   hl   
1B4B   E5                     PUSH   hl   
1B4C   CD 0A 10               CALL   run   
1B4F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B5A   76                     HALT      
1B5B                EXPECTM_3122S70:      
1B5B   E1                     POP   HL   
1B5C                          ;*Macro unroll:  test "5 3 -", 2
1B5C   31 00 54               LD   SP,STACK   
1B5F   CD 37 0F               CALL   coldInit   
1B62   CD 57 52               CALL   execStr   
1B65   35 20 33 20 2D 00      DB   "5 3 -",0   
1B6B   E1                     POP   HL   
1B6C   E5                     PUSH   HL   
1B6D   11 02 00               LD   DE,2   
1B70   B7                     OR   A   
1B71   ED 52                  SBC   HL,DE   
1B73   7D                     LD   A,L   
1B74   B4                     OR   H   
1B75   CA CA 1B               JP   Z,expectM_3123S71   
1B78   CD 03 0F               CALL   printStr   
1B7B   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B87   CD 03 0F               CALL   printStr   
1B8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B99   21 02 00               LD   hl,2   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD 0A 10               CALL   run   
1BA1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BA8   CD 03 0F               CALL   printStr   
1BAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BB8   E1                     POP   hl   
1BB9   E5                     PUSH   hl   
1BBA   E5                     PUSH   hl   
1BBB   CD 0A 10               CALL   run   
1BBE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BC9   76                     HALT      
1BCA                EXPECTM_3123S71:      
1BCA   E1                     POP   HL   
1BCB                          ;*Macro unroll:  test "2 1 -",1
1BCB   31 00 54               LD   SP,STACK   
1BCE   CD 37 0F               CALL   coldInit   
1BD1   CD 57 52               CALL   execStr   
1BD4   32 20 31 20 2D 00      DB   "2 1 -",0   
1BDA   E1                     POP   HL   
1BDB   E5                     PUSH   HL   
1BDC   11 01 00               LD   DE,1   
1BDF   B7                     OR   A   
1BE0   ED 52                  SBC   HL,DE   
1BE2   7D                     LD   A,L   
1BE3   B4                     OR   H   
1BE4   CA 39 1C               JP   Z,expectM_3124S72   
1BE7   CD 03 0F               CALL   printStr   
1BEA   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1BF6   CD 03 0F               CALL   printStr   
1BF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C08   21 01 00               LD   hl,1   
1C0B   E5                     PUSH   hl   
1C0C   E5                     PUSH   hl   
1C0D   CD 0A 10               CALL   run   
1C10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C17   CD 03 0F               CALL   printStr   
1C1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C27   E1                     POP   hl   
1C28   E5                     PUSH   hl   
1C29   E5                     PUSH   hl   
1C2A   CD 0A 10               CALL   run   
1C2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C38   76                     HALT      
1C39                EXPECTM_3124S72:      
1C39   E1                     POP   HL   
1C3A                          ;*Macro unroll:  test "3a= a-- a",2
1C3A   31 00 54               LD   SP,STACK   
1C3D   CD 37 0F               CALL   coldInit   
1C40   CD 57 52               CALL   execStr   
1C43   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C4D   E1                     POP   HL   
1C4E   E5                     PUSH   HL   
1C4F   11 02 00               LD   DE,2   
1C52   B7                     OR   A   
1C53   ED 52                  SBC   HL,DE   
1C55   7D                     LD   A,L   
1C56   B4                     OR   H   
1C57   CA B0 1C               JP   Z,expectM_3125S73   
1C5A   CD 03 0F               CALL   printStr   
1C5D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C6D   CD 03 0F               CALL   printStr   
1C70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7F   21 02 00               LD   hl,2   
1C82   E5                     PUSH   hl   
1C83   E5                     PUSH   hl   
1C84   CD 0A 10               CALL   run   
1C87   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C8E   CD 03 0F               CALL   printStr   
1C91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C9E   E1                     POP   hl   
1C9F   E5                     PUSH   hl   
1CA0   E5                     PUSH   hl   
1CA1   CD 0A 10               CALL   run   
1CA4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CAF   76                     HALT      
1CB0                EXPECTM_3125S73:      
1CB0   E1                     POP   HL   
1CB1                          ;*Macro unroll:  test "3 5 &", 1
1CB1   31 00 54               LD   SP,STACK   
1CB4   CD 37 0F               CALL   coldInit   
1CB7   CD 57 52               CALL   execStr   
1CBA   33 20 35 20 26 00      DB   "3 5 &",0   
1CC0   E1                     POP   HL   
1CC1   E5                     PUSH   HL   
1CC2   11 01 00               LD   DE,1   
1CC5   B7                     OR   A   
1CC6   ED 52                  SBC   HL,DE   
1CC8   7D                     LD   A,L   
1CC9   B4                     OR   H   
1CCA   CA 1F 1D               JP   Z,expectM_3126S74   
1CCD   CD 03 0F               CALL   printStr   
1CD0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CDC   CD 03 0F               CALL   printStr   
1CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CEE   21 01 00               LD   hl,1   
1CF1   E5                     PUSH   hl   
1CF2   E5                     PUSH   hl   
1CF3   CD 0A 10               CALL   run   
1CF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CFD   CD 03 0F               CALL   printStr   
1D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0D   E1                     POP   hl   
1D0E   E5                     PUSH   hl   
1D0F   E5                     PUSH   hl   
1D10   CD 0A 10               CALL   run   
1D13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D1E   76                     HALT      
1D1F                EXPECTM_3126S74:      
1D1F   E1                     POP   HL   
1D20                          ;*Macro unroll:  test "3 5 |", 7
1D20   31 00 54               LD   SP,STACK   
1D23   CD 37 0F               CALL   coldInit   
1D26   CD 57 52               CALL   execStr   
1D29   33 20 35 20 7C 00      DB   "3 5 |",0   
1D2F   E1                     POP   HL   
1D30   E5                     PUSH   HL   
1D31   11 07 00               LD   DE,7   
1D34   B7                     OR   A   
1D35   ED 52                  SBC   HL,DE   
1D37   7D                     LD   A,L   
1D38   B4                     OR   H   
1D39   CA 8E 1D               JP   Z,expectM_3127S75   
1D3C   CD 03 0F               CALL   printStr   
1D3F   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D4B   CD 03 0F               CALL   printStr   
1D4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5D   21 07 00               LD   hl,7   
1D60   E5                     PUSH   hl   
1D61   E5                     PUSH   hl   
1D62   CD 0A 10               CALL   run   
1D65   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D6C   CD 03 0F               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 0A 10               CALL   run   
1D82   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D8D   76                     HALT      
1D8E                EXPECTM_3127S75:      
1D8E   E1                     POP   HL   
1D8F                          ;*Macro unroll:  test "3 5 /x", 6
1D8F   31 00 54               LD   SP,STACK   
1D92   CD 37 0F               CALL   coldInit   
1D95   CD 57 52               CALL   execStr   
1D98   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D9F   E1                     POP   HL   
1DA0   E5                     PUSH   HL   
1DA1   11 06 00               LD   DE,6   
1DA4   B7                     OR   A   
1DA5   ED 52                  SBC   HL,DE   
1DA7   7D                     LD   A,L   
1DA8   B4                     OR   H   
1DA9   CA FF 1D               JP   Z,expectM_3128S76   
1DAC   CD 03 0F               CALL   printStr   
1DAF   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DBC   CD 03 0F               CALL   printStr   
1DBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DCE   21 06 00               LD   hl,6   
1DD1   E5                     PUSH   hl   
1DD2   E5                     PUSH   hl   
1DD3   CD 0A 10               CALL   run   
1DD6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DDD   CD 03 0F               CALL   printStr   
1DE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DED   E1                     POP   hl   
1DEE   E5                     PUSH   hl   
1DEF   E5                     PUSH   hl   
1DF0   CD 0A 10               CALL   run   
1DF3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DFE   76                     HALT      
1DFF                EXPECTM_3128S76:      
1DFF   E1                     POP   HL   
1E00                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E00   31 00 54               LD   SP,STACK   
1E03   CD 37 0F               CALL   coldInit   
1E06   CD 57 52               CALL   execStr   
1E09   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E18   E1                     POP   HL   
1E19   E5                     PUSH   HL   
1E1A   11 06 00               LD   DE,6   
1E1D   B7                     OR   A   
1E1E   ED 52                  SBC   HL,DE   
1E20   7D                     LD   A,L   
1E21   B4                     OR   H   
1E22   CA 80 1E               JP   Z,expectM_3129S77   
1E25   CD 03 0F               CALL   printStr   
1E28   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E3D   CD 03 0F               CALL   printStr   
1E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4F   21 06 00               LD   hl,6   
1E52   E5                     PUSH   hl   
1E53   E5                     PUSH   hl   
1E54   CD 0A 10               CALL   run   
1E57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E5E   CD 03 0F               CALL   printStr   
1E61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6E   E1                     POP   hl   
1E6F   E5                     PUSH   hl   
1E70   E5                     PUSH   hl   
1E71   CD 0A 10               CALL   run   
1E74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E7F   76                     HALT      
1E80                EXPECTM_3129S77:      
1E80   E1                     POP   HL   
1E81                          ;*Macro unroll:  test "0 !", true
1E81   31 00 54               LD   SP,STACK   
1E84   CD 37 0F               CALL   coldInit   
1E87   CD 57 52               CALL   execStr   
1E8A   30 20 21 00            DB   "0 !",0   
1E8E   E1                     POP   HL   
1E8F   E5                     PUSH   HL   
1E90   11 FF FF               LD   DE,true   
1E93   B7                     OR   A   
1E94   ED 52                  SBC   HL,DE   
1E96   7D                     LD   A,L   
1E97   B4                     OR   H   
1E98   CA EB 1E               JP   Z,expectM_3130S78   
1E9B   CD 03 0F               CALL   printStr   
1E9E   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1EA8   CD 03 0F               CALL   printStr   
1EAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EBA   21 FF FF               LD   hl,true   
1EBD   E5                     PUSH   hl   
1EBE   E5                     PUSH   hl   
1EBF   CD 0A 10               CALL   run   
1EC2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EC9   CD 03 0F               CALL   printStr   
1ECC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED9   E1                     POP   hl   
1EDA   E5                     PUSH   hl   
1EDB   E5                     PUSH   hl   
1EDC   CD 0A 10               CALL   run   
1EDF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EEA   76                     HALT      
1EEB                EXPECTM_3130S78:      
1EEB   E1                     POP   HL   
1EEC                          ;*Macro unroll:  test "2 !", false
1EEC   31 00 54               LD   SP,STACK   
1EEF   CD 37 0F               CALL   coldInit   
1EF2   CD 57 52               CALL   execStr   
1EF5   32 20 21 00            DB   "2 !",0   
1EF9   E1                     POP   HL   
1EFA   E5                     PUSH   HL   
1EFB   11 00 00               LD   DE,false   
1EFE   B7                     OR   A   
1EFF   ED 52                  SBC   HL,DE   
1F01   7D                     LD   A,L   
1F02   B4                     OR   H   
1F03   CA 56 1F               JP   Z,expectM_3131S79   
1F06   CD 03 0F               CALL   printStr   
1F09   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1F13   CD 03 0F               CALL   printStr   
1F16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F25   21 00 00               LD   hl,false   
1F28   E5                     PUSH   hl   
1F29   E5                     PUSH   hl   
1F2A   CD 0A 10               CALL   run   
1F2D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F34   CD 03 0F               CALL   printStr   
1F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F44   E1                     POP   hl   
1F45   E5                     PUSH   hl   
1F46   E5                     PUSH   hl   
1F47   CD 0A 10               CALL   run   
1F4A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F55   76                     HALT      
1F56                EXPECTM_3131S79:      
1F56   E1                     POP   HL   
1F57                          ;*Macro unroll:  test "0 !!", false
1F57   31 00 54               LD   SP,STACK   
1F5A   CD 37 0F               CALL   coldInit   
1F5D   CD 57 52               CALL   execStr   
1F60   30 20 21 21 00         DB   "0 !!",0   
1F65   E1                     POP   HL   
1F66   E5                     PUSH   HL   
1F67   11 00 00               LD   DE,false   
1F6A   B7                     OR   A   
1F6B   ED 52                  SBC   HL,DE   
1F6D   7D                     LD   A,L   
1F6E   B4                     OR   H   
1F6F   CA C3 1F               JP   Z,expectM_3132S80   
1F72   CD 03 0F               CALL   printStr   
1F75   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1F80   CD 03 0F               CALL   printStr   
1F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F92   21 00 00               LD   hl,false   
1F95   E5                     PUSH   hl   
1F96   E5                     PUSH   hl   
1F97   CD 0A 10               CALL   run   
1F9A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FA1   CD 03 0F               CALL   printStr   
1FA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB1   E1                     POP   hl   
1FB2   E5                     PUSH   hl   
1FB3   E5                     PUSH   hl   
1FB4   CD 0A 10               CALL   run   
1FB7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FC2   76                     HALT      
1FC3                EXPECTM_3132S80:      
1FC3   E1                     POP   HL   
1FC4                          ;*Macro unroll:  test "2 !!", true
1FC4   31 00 54               LD   SP,STACK   
1FC7   CD 37 0F               CALL   coldInit   
1FCA   CD 57 52               CALL   execStr   
1FCD   32 20 21 21 00         DB   "2 !!",0   
1FD2   E1                     POP   HL   
1FD3   E5                     PUSH   HL   
1FD4   11 FF FF               LD   DE,true   
1FD7   B7                     OR   A   
1FD8   ED 52                  SBC   HL,DE   
1FDA   7D                     LD   A,L   
1FDB   B4                     OR   H   
1FDC   CA 30 20               JP   Z,expectM_3133S81   
1FDF   CD 03 0F               CALL   printStr   
1FE2   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1FED   CD 03 0F               CALL   printStr   
1FF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FFF   21 FF FF               LD   hl,true   
2002   E5                     PUSH   hl   
2003   E5                     PUSH   hl   
2004   CD 0A 10               CALL   run   
2007   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
200E   CD 03 0F               CALL   printStr   
2011   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
201E   E1                     POP   hl   
201F   E5                     PUSH   hl   
2020   E5                     PUSH   hl   
2021   CD 0A 10               CALL   run   
2024   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
202F   76                     HALT      
2030                EXPECTM_3133S81:      
2030   E1                     POP   HL   
2031                          ;*Macro unroll:  test "2 3 *", 6
2031   31 00 54               LD   SP,STACK   
2034   CD 37 0F               CALL   coldInit   
2037   CD 57 52               CALL   execStr   
203A   32 20 33 20 2A 00      DB   "2 3 *",0   
2040   E1                     POP   HL   
2041   E5                     PUSH   HL   
2042   11 06 00               LD   DE,6   
2045   B7                     OR   A   
2046   ED 52                  SBC   HL,DE   
2048   7D                     LD   A,L   
2049   B4                     OR   H   
204A   CA 9F 20               JP   Z,expectM_3134S82   
204D   CD 03 0F               CALL   printStr   
2050   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
205C   CD 03 0F               CALL   printStr   
205F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
206E   21 06 00               LD   hl,6   
2071   E5                     PUSH   hl   
2072   E5                     PUSH   hl   
2073   CD 0A 10               CALL   run   
2076   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
207D   CD 03 0F               CALL   printStr   
2080   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
208D   E1                     POP   hl   
208E   E5                     PUSH   hl   
208F   E5                     PUSH   hl   
2090   CD 0A 10               CALL   run   
2093   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
209E   76                     HALT      
209F                EXPECTM_3134S82:      
209F   E1                     POP   HL   
20A0                          ;*Macro unroll:  test "1 2 3 + *", 5
20A0   31 00 54               LD   SP,STACK   
20A3   CD 37 0F               CALL   coldInit   
20A6   CD 57 52               CALL   execStr   
20A9   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
20B3   E1                     POP   HL   
20B4   E5                     PUSH   HL   
20B5   11 05 00               LD   DE,5   
20B8   B7                     OR   A   
20B9   ED 52                  SBC   HL,DE   
20BB   7D                     LD   A,L   
20BC   B4                     OR   H   
20BD   CA 16 21               JP   Z,expectM_3135S83   
20C0   CD 03 0F               CALL   printStr   
20C3   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
20D3   CD 03 0F               CALL   printStr   
20D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E5   21 05 00               LD   hl,5   
20E8   E5                     PUSH   hl   
20E9   E5                     PUSH   hl   
20EA   CD 0A 10               CALL   run   
20ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20F4   CD 03 0F               CALL   printStr   
20F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2104   E1                     POP   hl   
2105   E5                     PUSH   hl   
2106   E5                     PUSH   hl   
2107   CD 0A 10               CALL   run   
210A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2115   76                     HALT      
2116                EXPECTM_3135S83:      
2116   E1                     POP   HL   
2117                          ;*Macro unroll:  test "7 3 /", 2
2117   31 00 54               LD   SP,STACK   
211A   CD 37 0F               CALL   coldInit   
211D   CD 57 52               CALL   execStr   
2120   37 20 33 20 2F 00      DB   "7 3 /",0   
2126   E1                     POP   HL   
2127   E5                     PUSH   HL   
2128   11 02 00               LD   DE,2   
212B   B7                     OR   A   
212C   ED 52                  SBC   HL,DE   
212E   7D                     LD   A,L   
212F   B4                     OR   H   
2130   CA 85 21               JP   Z,expectM_3136S84   
2133   CD 03 0F               CALL   printStr   
2136   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2142   CD 03 0F               CALL   printStr   
2145   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2154   21 02 00               LD   hl,2   
2157   E5                     PUSH   hl   
2158   E5                     PUSH   hl   
2159   CD 0A 10               CALL   run   
215C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2163   CD 03 0F               CALL   printStr   
2166   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2173   E1                     POP   hl   
2174   E5                     PUSH   hl   
2175   E5                     PUSH   hl   
2176   CD 0A 10               CALL   run   
2179   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2184   76                     HALT      
2185                EXPECTM_3136S84:      
2185   E1                     POP   HL   
2186                          ;*Macro unroll:  test "100a= 1a+= a", 101
2186   31 00 54               LD   SP,STACK   
2189   CD 37 0F               CALL   coldInit   
218C   CD 57 52               CALL   execStr   
218F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
219C   E1                     POP   HL   
219D   E5                     PUSH   HL   
219E   11 65 00               LD   DE,101   
21A1   B7                     OR   A   
21A2   ED 52                  SBC   HL,DE   
21A4   7D                     LD   A,L   
21A5   B4                     OR   H   
21A6   CA 02 22               JP   Z,expectM_3137S85   
21A9   CD 03 0F               CALL   printStr   
21AC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
21BF   CD 03 0F               CALL   printStr   
21C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D1   21 65 00               LD   hl,101   
21D4   E5                     PUSH   hl   
21D5   E5                     PUSH   hl   
21D6   CD 0A 10               CALL   run   
21D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21E0   CD 03 0F               CALL   printStr   
21E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21F0   E1                     POP   hl   
21F1   E5                     PUSH   hl   
21F2   E5                     PUSH   hl   
21F3   CD 0A 10               CALL   run   
21F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2201   76                     HALT      
2202                EXPECTM_3137S85:      
2202   E1                     POP   HL   
2203                          ;*Macro unroll:  test "100a= 1a-= a", 99
2203   31 00 54               LD   SP,STACK   
2206   CD 37 0F               CALL   coldInit   
2209   CD 57 52               CALL   execStr   
220C   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2219   E1                     POP   HL   
221A   E5                     PUSH   HL   
221B   11 63 00               LD   DE,99   
221E   B7                     OR   A   
221F   ED 52                  SBC   HL,DE   
2221   7D                     LD   A,L   
2222   B4                     OR   H   
2223   CA 7F 22               JP   Z,expectM_3138S86   
2226   CD 03 0F               CALL   printStr   
2229   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
223C   CD 03 0F               CALL   printStr   
223F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
224E   21 63 00               LD   hl,99   
2251   E5                     PUSH   hl   
2252   E5                     PUSH   hl   
2253   CD 0A 10               CALL   run   
2256   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
225D   CD 03 0F               CALL   printStr   
2260   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226D   E1                     POP   hl   
226E   E5                     PUSH   hl   
226F   E5                     PUSH   hl   
2270   CD 0A 10               CALL   run   
2273   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
227E   76                     HALT      
227F                EXPECTM_3138S86:      
227F   E1                     POP   HL   
2280                          ;*Macro unroll:  test "100a= 2a*= a", 200
2280   31 00 54               LD   SP,STACK   
2283   CD 37 0F               CALL   coldInit   
2286   CD 57 52               CALL   execStr   
2289   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2296   E1                     POP   HL   
2297   E5                     PUSH   HL   
2298   11 C8 00               LD   DE,200   
229B   B7                     OR   A   
229C   ED 52                  SBC   HL,DE   
229E   7D                     LD   A,L   
229F   B4                     OR   H   
22A0   CA FC 22               JP   Z,expectM_3139S87   
22A3   CD 03 0F               CALL   printStr   
22A6   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
22B9   CD 03 0F               CALL   printStr   
22BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22CB   21 C8 00               LD   hl,200   
22CE   E5                     PUSH   hl   
22CF   E5                     PUSH   hl   
22D0   CD 0A 10               CALL   run   
22D3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22DA   CD 03 0F               CALL   printStr   
22DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EA   E1                     POP   hl   
22EB   E5                     PUSH   hl   
22EC   E5                     PUSH   hl   
22ED   CD 0A 10               CALL   run   
22F0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22FB   76                     HALT      
22FC                EXPECTM_3139S87:      
22FC   E1                     POP   HL   
22FD                          ;*Macro unroll:  test "100a= 2 a/= a", 50
22FD   31 00 54               LD   SP,STACK   
2300   CD 37 0F               CALL   coldInit   
2303   CD 57 52               CALL   execStr   
2306   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
2314   E1                     POP   HL   
2315   E5                     PUSH   HL   
2316   11 32 00               LD   DE,50   
2319   B7                     OR   A   
231A   ED 52                  SBC   HL,DE   
231C   7D                     LD   A,L   
231D   B4                     OR   H   
231E   CA 7B 23               JP   Z,expectM_3140S88   
2321   CD 03 0F               CALL   printStr   
2324   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2338   CD 03 0F               CALL   printStr   
233B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234A   21 32 00               LD   hl,50   
234D   E5                     PUSH   hl   
234E   E5                     PUSH   hl   
234F   CD 0A 10               CALL   run   
2352   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2359   CD 03 0F               CALL   printStr   
235C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2369   E1                     POP   hl   
236A   E5                     PUSH   hl   
236B   E5                     PUSH   hl   
236C   CD 0A 10               CALL   run   
236F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
237A   76                     HALT      
237B                EXPECTM_3140S88:      
237B   E1                     POP   HL   
237C                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
237C   31 00 54               LD   SP,STACK   
237F   CD 37 0F               CALL   coldInit   
2382   CD 57 52               CALL   execStr   
2385   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2395   E1                     POP   HL   
2396   E5                     PUSH   HL   
2397   11 05 00               LD   DE,5   
239A   B7                     OR   A   
239B   ED 52                  SBC   HL,DE   
239D   7D                     LD   A,L   
239E   B4                     OR   H   
239F   CA FE 23               JP   Z,expectM_3141S89   
23A2   CD 03 0F               CALL   printStr   
23A5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
23BB   CD 03 0F               CALL   printStr   
23BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23CD   21 05 00               LD   hl,5   
23D0   E5                     PUSH   hl   
23D1   E5                     PUSH   hl   
23D2   CD 0A 10               CALL   run   
23D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23DC   CD 03 0F               CALL   printStr   
23DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23EC   E1                     POP   hl   
23ED   E5                     PUSH   hl   
23EE   E5                     PUSH   hl   
23EF   CD 0A 10               CALL   run   
23F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23FD   76                     HALT      
23FE                EXPECTM_3141S89:      
23FE   E1                     POP   HL   
23FF                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
23FF   31 00 54               LD   SP,STACK   
2402   CD 37 0F               CALL   coldInit   
2405   CD 57 52               CALL   execStr   
2408   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2418   E1                     POP   HL   
2419   E5                     PUSH   HL   
241A   11 01 00               LD   DE,1   
241D   B7                     OR   A   
241E   ED 52                  SBC   HL,DE   
2420   7D                     LD   A,L   
2421   B4                     OR   H   
2422   CA 81 24               JP   Z,expectM_3142S90   
2425   CD 03 0F               CALL   printStr   
2428   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
243E   CD 03 0F               CALL   printStr   
2441   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2450   21 01 00               LD   hl,1   
2453   E5                     PUSH   hl   
2454   E5                     PUSH   hl   
2455   CD 0A 10               CALL   run   
2458   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
245F   CD 03 0F               CALL   printStr   
2462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246F   E1                     POP   hl   
2470   E5                     PUSH   hl   
2471   E5                     PUSH   hl   
2472   CD 0A 10               CALL   run   
2475   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2480   76                     HALT      
2481                EXPECTM_3142S90:      
2481   E1                     POP   HL   
2482                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
2482   31 00 54               LD   SP,STACK   
2485   CD 37 0F               CALL   coldInit   
2488   CD 57 52               CALL   execStr   
248B   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
249B   E1                     POP   HL   
249C   E5                     PUSH   HL   
249D   11 06 00               LD   DE,6   
24A0   B7                     OR   A   
24A1   ED 52                  SBC   HL,DE   
24A3   7D                     LD   A,L   
24A4   B4                     OR   H   
24A5   CA 04 25               JP   Z,expectM_3143S91   
24A8   CD 03 0F               CALL   printStr   
24AB   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
24C1   CD 03 0F               CALL   printStr   
24C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D3   21 06 00               LD   hl,6   
24D6   E5                     PUSH   hl   
24D7   E5                     PUSH   hl   
24D8   CD 0A 10               CALL   run   
24DB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24E2   CD 03 0F               CALL   printStr   
24E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F2   E1                     POP   hl   
24F3   E5                     PUSH   hl   
24F4   E5                     PUSH   hl   
24F5   CD 0A 10               CALL   run   
24F8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2503   76                     HALT      
2504                EXPECTM_3143S91:      
2504   E1                     POP   HL   
2505                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2505   31 00 54               LD   SP,STACK   
2508   CD 37 0F               CALL   coldInit   
250B   CD 57 52               CALL   execStr   
250E   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
251E   E1                     POP   HL   
251F   E5                     PUSH   HL   
2520   11 03 00               LD   DE,3   
2523   B7                     OR   A   
2524   ED 52                  SBC   HL,DE   
2526   7D                     LD   A,L   
2527   B4                     OR   H   
2528   CA 87 25               JP   Z,expectM_3144S92   
252B   CD 03 0F               CALL   printStr   
252E   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2544   CD 03 0F               CALL   printStr   
2547   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2556   21 03 00               LD   hl,3   
2559   E5                     PUSH   hl   
255A   E5                     PUSH   hl   
255B   CD 0A 10               CALL   run   
255E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2565   CD 03 0F               CALL   printStr   
2568   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2575   E1                     POP   hl   
2576   E5                     PUSH   hl   
2577   E5                     PUSH   hl   
2578   CD 0A 10               CALL   run   
257B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2586   76                     HALT      
2587                EXPECTM_3144S92:      
2587   E1                     POP   HL   
2588                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2588   31 00 54               LD   SP,STACK   
258B   CD 37 0F               CALL   coldInit   
258E   CD 57 52               CALL   execStr   
2591   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
25A0   E1                     POP   HL   
25A1   E5                     PUSH   HL   
25A2   11 00 00               LD   DE,0   
25A5   B7                     OR   A   
25A6   ED 52                  SBC   HL,DE   
25A8   7D                     LD   A,L   
25A9   B4                     OR   H   
25AA   CA 08 26               JP   Z,expectM_3145S93   
25AD   CD 03 0F               CALL   printStr   
25B0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
25C5   CD 03 0F               CALL   printStr   
25C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D7   21 00 00               LD   hl,0   
25DA   E5                     PUSH   hl   
25DB   E5                     PUSH   hl   
25DC   CD 0A 10               CALL   run   
25DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25E6   CD 03 0F               CALL   printStr   
25E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F6   E1                     POP   hl   
25F7   E5                     PUSH   hl   
25F8   E5                     PUSH   hl   
25F9   CD 0A 10               CALL   run   
25FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2607   76                     HALT      
2608                EXPECTM_3145S93:      
2608   E1                     POP   HL   
2609                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2609   31 00 54               LD   SP,STACK   
260C   CD 37 0F               CALL   coldInit   
260F   CD 57 52               CALL   execStr   
2612   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2621   E1                     POP   HL   
2622   E5                     PUSH   HL   
2623   11 FF 00               LD   DE,$FF   
2626   B7                     OR   A   
2627   ED 52                  SBC   HL,DE   
2629   7D                     LD   A,L   
262A   B4                     OR   H   
262B   CA 89 26               JP   Z,expectM_3146S94   
262E   CD 03 0F               CALL   printStr   
2631   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2646   CD 03 0F               CALL   printStr   
2649   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2658   21 FF 00               LD   hl,$FF   
265B   E5                     PUSH   hl   
265C   E5                     PUSH   hl   
265D   CD 0A 10               CALL   run   
2660   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2667   CD 03 0F               CALL   printStr   
266A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2677   E1                     POP   hl   
2678   E5                     PUSH   hl   
2679   E5                     PUSH   hl   
267A   CD 0A 10               CALL   run   
267D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2688   76                     HALT      
2689                EXPECTM_3146S94:      
2689   E1                     POP   HL   
268A                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
268A   31 00 54               LD   SP,STACK   
268D   CD 37 0F               CALL   coldInit   
2690   CD 57 52               CALL   execStr   
2693   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
26A4   E1                     POP   HL   
26A5   E5                     PUSH   HL   
26A6   11 0F 00               LD   DE,$0F   
26A9   B7                     OR   A   
26AA   ED 52                  SBC   HL,DE   
26AC   7D                     LD   A,L   
26AD   B4                     OR   H   
26AE   CA 0E 27               JP   Z,expectM_3147S95   
26B1   CD 03 0F               CALL   printStr   
26B4   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
26CB   CD 03 0F               CALL   printStr   
26CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DD   21 0F 00               LD   hl,$0F   
26E0   E5                     PUSH   hl   
26E1   E5                     PUSH   hl   
26E2   CD 0A 10               CALL   run   
26E5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26EC   CD 03 0F               CALL   printStr   
26EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26FC   E1                     POP   hl   
26FD   E5                     PUSH   hl   
26FE   E5                     PUSH   hl   
26FF   CD 0A 10               CALL   run   
2702   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
270D   76                     HALT      
270E                EXPECTM_3147S95:      
270E   E1                     POP   HL   
270F                          ;*Macro unroll:  test "$00AA~",$FF55
270F   31 00 54               LD   SP,STACK   
2712   CD 37 0F               CALL   coldInit   
2715   CD 57 52               CALL   execStr   
2718   24 30 30 41 41 7E 00   DB   "$00AA~",0   
271F   E1                     POP   HL   
2720   E5                     PUSH   HL   
2721   11 55 FF               LD   DE,$FF55   
2724   B7                     OR   A   
2725   ED 52                  SBC   HL,DE   
2727   7D                     LD   A,L   
2728   B4                     OR   H   
2729   CA 7F 27               JP   Z,expectM_3148S96   
272C   CD 03 0F               CALL   printStr   
272F   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
273C   CD 03 0F               CALL   printStr   
273F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
274E   21 55 FF               LD   hl,$FF55   
2751   E5                     PUSH   hl   
2752   E5                     PUSH   hl   
2753   CD 0A 10               CALL   run   
2756   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
275D   CD 03 0F               CALL   printStr   
2760   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276D   E1                     POP   hl   
276E   E5                     PUSH   hl   
276F   E5                     PUSH   hl   
2770   CD 0A 10               CALL   run   
2773   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
277E   76                     HALT      
277F                EXPECTM_3148S96:      
277F   E1                     POP   HL   
2780                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2780   31 00 54               LD   SP,STACK   
2783   CD 37 0F               CALL   coldInit   
2786   CD 57 52               CALL   execStr   
2789   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2797   E1                     POP   HL   
2798   E5                     PUSH   HL   
2799   11 55 55               LD   DE,$5555   
279C   B7                     OR   A   
279D   ED 52                  SBC   HL,DE   
279F   7D                     LD   A,L   
27A0   B4                     OR   H   
27A1   CA FE 27               JP   Z,expectM_3149S97   
27A4   CD 03 0F               CALL   printStr   
27A7   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
27BB   CD 03 0F               CALL   printStr   
27BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CD   21 55 55               LD   hl,$5555   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD 0A 10               CALL   run   
27D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27DC   CD 03 0F               CALL   printStr   
27DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27EC   E1                     POP   hl   
27ED   E5                     PUSH   hl   
27EE   E5                     PUSH   hl   
27EF   CD 0A 10               CALL   run   
27F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27FD   76                     HALT      
27FE                EXPECTM_3149S97:      
27FE   E1                     POP   HL   
27FF                          ;*Macro unroll:  test "7 3 / /re", 1
27FF   31 00 54               LD   SP,STACK   
2802   CD 37 0F               CALL   coldInit   
2805   CD 57 52               CALL   execStr   
2808   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2812   E1                     POP   HL   
2813   E5                     PUSH   HL   
2814   11 01 00               LD   DE,1   
2817   B7                     OR   A   
2818   ED 52                  SBC   HL,DE   
281A   7D                     LD   A,L   
281B   B4                     OR   H   
281C   CA 75 28               JP   Z,expectM_3150S98   
281F   CD 03 0F               CALL   printStr   
2822   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2832   CD 03 0F               CALL   printStr   
2835   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2844   21 01 00               LD   hl,1   
2847   E5                     PUSH   hl   
2848   E5                     PUSH   hl   
2849   CD 0A 10               CALL   run   
284C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2853   CD 03 0F               CALL   printStr   
2856   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2863   E1                     POP   hl   
2864   E5                     PUSH   hl   
2865   E5                     PUSH   hl   
2866   CD 0A 10               CALL   run   
2869   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2874   76                     HALT      
2875                EXPECTM_3150S98:      
2875   E1                     POP   HL   
2876                          ;*Macro unroll:  test "7 3 /", 2
2876   31 00 54               LD   SP,STACK   
2879   CD 37 0F               CALL   coldInit   
287C   CD 57 52               CALL   execStr   
287F   37 20 33 20 2F 00      DB   "7 3 /",0   
2885   E1                     POP   HL   
2886   E5                     PUSH   HL   
2887   11 02 00               LD   DE,2   
288A   B7                     OR   A   
288B   ED 52                  SBC   HL,DE   
288D   7D                     LD   A,L   
288E   B4                     OR   H   
288F   CA E4 28               JP   Z,expectM_3151S99   
2892   CD 03 0F               CALL   printStr   
2895   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
28A1   CD 03 0F               CALL   printStr   
28A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B3   21 02 00               LD   hl,2   
28B6   E5                     PUSH   hl   
28B7   E5                     PUSH   hl   
28B8   CD 0A 10               CALL   run   
28BB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28C2   CD 03 0F               CALL   printStr   
28C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D2   E1                     POP   hl   
28D3   E5                     PUSH   hl   
28D4   E5                     PUSH   hl   
28D5   CD 0A 10               CALL   run   
28D8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28E3   76                     HALT      
28E4                EXPECTM_3151S99:      
28E4   E1                     POP   HL   
28E5                          ;*Macro unroll:  test "2 3 ==", FALSE
28E5   31 00 54               LD   SP,STACK   
28E8   CD 37 0F               CALL   coldInit   
28EB   CD 57 52               CALL   execStr   
28EE   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
28F5   E1                     POP   HL   
28F6   E5                     PUSH   HL   
28F7   11 00 00               LD   DE,FALSE   
28FA   B7                     OR   A   
28FB   ED 52                  SBC   HL,DE   
28FD   7D                     LD   A,L   
28FE   B4                     OR   H   
28FF   CA 55 29               JP   Z,expectM_3152S100   
2902   CD 03 0F               CALL   printStr   
2905   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2912   CD 03 0F               CALL   printStr   
2915   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2924   21 00 00               LD   hl,FALSE   
2927   E5                     PUSH   hl   
2928   E5                     PUSH   hl   
2929   CD 0A 10               CALL   run   
292C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2933   CD 03 0F               CALL   printStr   
2936   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2943   E1                     POP   hl   
2944   E5                     PUSH   hl   
2945   E5                     PUSH   hl   
2946   CD 0A 10               CALL   run   
2949   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2954   76                     HALT      
2955                EXPECTM_3152S100:      
2955   E1                     POP   HL   
2956                          ;*Macro unroll:  test "3 3 ==", TRUE
2956   31 00 54               LD   SP,STACK   
2959   CD 37 0F               CALL   coldInit   
295C   CD 57 52               CALL   execStr   
295F   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2966   E1                     POP   HL   
2967   E5                     PUSH   HL   
2968   11 FF FF               LD   DE,TRUE   
296B   B7                     OR   A   
296C   ED 52                  SBC   HL,DE   
296E   7D                     LD   A,L   
296F   B4                     OR   H   
2970   CA C6 29               JP   Z,expectM_3153S101   
2973   CD 03 0F               CALL   printStr   
2976   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2983   CD 03 0F               CALL   printStr   
2986   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2995   21 FF FF               LD   hl,TRUE   
2998   E5                     PUSH   hl   
2999   E5                     PUSH   hl   
299A   CD 0A 10               CALL   run   
299D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29A4   CD 03 0F               CALL   printStr   
29A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B4   E1                     POP   hl   
29B5   E5                     PUSH   hl   
29B6   E5                     PUSH   hl   
29B7   CD 0A 10               CALL   run   
29BA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29C5   76                     HALT      
29C6                EXPECTM_3153S101:      
29C6   E1                     POP   HL   
29C7                          ;*Macro unroll:  test "1 2 <", TRUE
29C7   31 00 54               LD   SP,STACK   
29CA   CD 37 0F               CALL   coldInit   
29CD   CD 57 52               CALL   execStr   
29D0   31 20 32 20 3C 00      DB   "1 2 <",0   
29D6   E1                     POP   HL   
29D7   E5                     PUSH   HL   
29D8   11 FF FF               LD   DE,TRUE   
29DB   B7                     OR   A   
29DC   ED 52                  SBC   HL,DE   
29DE   7D                     LD   A,L   
29DF   B4                     OR   H   
29E0   CA 35 2A               JP   Z,expectM_3154S102   
29E3   CD 03 0F               CALL   printStr   
29E6   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
29F2   CD 03 0F               CALL   printStr   
29F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A04   21 FF FF               LD   hl,TRUE   
2A07   E5                     PUSH   hl   
2A08   E5                     PUSH   hl   
2A09   CD 0A 10               CALL   run   
2A0C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A13   CD 03 0F               CALL   printStr   
2A16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A23   E1                     POP   hl   
2A24   E5                     PUSH   hl   
2A25   E5                     PUSH   hl   
2A26   CD 0A 10               CALL   run   
2A29   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A34   76                     HALT      
2A35                EXPECTM_3154S102:      
2A35   E1                     POP   HL   
2A36                          ;*Macro unroll:  test "2 1 <", FALSE
2A36   31 00 54               LD   SP,STACK   
2A39   CD 37 0F               CALL   coldInit   
2A3C   CD 57 52               CALL   execStr   
2A3F   32 20 31 20 3C 00      DB   "2 1 <",0   
2A45   E1                     POP   HL   
2A46   E5                     PUSH   HL   
2A47   11 00 00               LD   DE,FALSE   
2A4A   B7                     OR   A   
2A4B   ED 52                  SBC   HL,DE   
2A4D   7D                     LD   A,L   
2A4E   B4                     OR   H   
2A4F   CA A4 2A               JP   Z,expectM_3155S103   
2A52   CD 03 0F               CALL   printStr   
2A55   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2A61   CD 03 0F               CALL   printStr   
2A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A73   21 00 00               LD   hl,FALSE   
2A76   E5                     PUSH   hl   
2A77   E5                     PUSH   hl   
2A78   CD 0A 10               CALL   run   
2A7B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A82   CD 03 0F               CALL   printStr   
2A85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A92   E1                     POP   hl   
2A93   E5                     PUSH   hl   
2A94   E5                     PUSH   hl   
2A95   CD 0A 10               CALL   run   
2A98   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2AA3   76                     HALT      
2AA4                EXPECTM_3155S103:      
2AA4   E1                     POP   HL   
2AA5                          ;*Macro unroll:  test "2 3 <", TRUE
2AA5   31 00 54               LD   SP,STACK   
2AA8   CD 37 0F               CALL   coldInit   
2AAB   CD 57 52               CALL   execStr   
2AAE   32 20 33 20 3C 00      DB   "2 3 <",0   
2AB4   E1                     POP   HL   
2AB5   E5                     PUSH   HL   
2AB6   11 FF FF               LD   DE,TRUE   
2AB9   B7                     OR   A   
2ABA   ED 52                  SBC   HL,DE   
2ABC   7D                     LD   A,L   
2ABD   B4                     OR   H   
2ABE   CA 13 2B               JP   Z,expectM_3156S104   
2AC1   CD 03 0F               CALL   printStr   
2AC4   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2AD0   CD 03 0F               CALL   printStr   
2AD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AE2   21 FF FF               LD   hl,TRUE   
2AE5   E5                     PUSH   hl   
2AE6   E5                     PUSH   hl   
2AE7   CD 0A 10               CALL   run   
2AEA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AF1   CD 03 0F               CALL   printStr   
2AF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B01   E1                     POP   hl   
2B02   E5                     PUSH   hl   
2B03   E5                     PUSH   hl   
2B04   CD 0A 10               CALL   run   
2B07   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B12   76                     HALT      
2B13                EXPECTM_3156S104:      
2B13   E1                     POP   HL   
2B14                          ;*Macro unroll:  test "3 3 <", FALSE
2B14   31 00 54               LD   SP,STACK   
2B17   CD 37 0F               CALL   coldInit   
2B1A   CD 57 52               CALL   execStr   
2B1D   33 20 33 20 3C 00      DB   "3 3 <",0   
2B23   E1                     POP   HL   
2B24   E5                     PUSH   HL   
2B25   11 00 00               LD   DE,FALSE   
2B28   B7                     OR   A   
2B29   ED 52                  SBC   HL,DE   
2B2B   7D                     LD   A,L   
2B2C   B4                     OR   H   
2B2D   CA 82 2B               JP   Z,expectM_3157S105   
2B30   CD 03 0F               CALL   printStr   
2B33   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2B3F   CD 03 0F               CALL   printStr   
2B42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B51   21 00 00               LD   hl,FALSE   
2B54   E5                     PUSH   hl   
2B55   E5                     PUSH   hl   
2B56   CD 0A 10               CALL   run   
2B59   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B60   CD 03 0F               CALL   printStr   
2B63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B70   E1                     POP   hl   
2B71   E5                     PUSH   hl   
2B72   E5                     PUSH   hl   
2B73   CD 0A 10               CALL   run   
2B76   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B81   76                     HALT      
2B82                EXPECTM_3157S105:      
2B82   E1                     POP   HL   
2B83                          ;*Macro unroll:  test "1 2 >", FALSE
2B83   31 00 54               LD   SP,STACK   
2B86   CD 37 0F               CALL   coldInit   
2B89   CD 57 52               CALL   execStr   
2B8C   31 20 32 20 3E 00      DB   "1 2 >",0   
2B92   E1                     POP   HL   
2B93   E5                     PUSH   HL   
2B94   11 00 00               LD   DE,FALSE   
2B97   B7                     OR   A   
2B98   ED 52                  SBC   HL,DE   
2B9A   7D                     LD   A,L   
2B9B   B4                     OR   H   
2B9C   CA F1 2B               JP   Z,expectM_3158S106   
2B9F   CD 03 0F               CALL   printStr   
2BA2   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2BAE   CD 03 0F               CALL   printStr   
2BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC0   21 00 00               LD   hl,FALSE   
2BC3   E5                     PUSH   hl   
2BC4   E5                     PUSH   hl   
2BC5   CD 0A 10               CALL   run   
2BC8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BCF   CD 03 0F               CALL   printStr   
2BD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDF   E1                     POP   hl   
2BE0   E5                     PUSH   hl   
2BE1   E5                     PUSH   hl   
2BE2   CD 0A 10               CALL   run   
2BE5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BF0   76                     HALT      
2BF1                EXPECTM_3158S106:      
2BF1   E1                     POP   HL   
2BF2                          ;*Macro unroll:  test "2 1 >", TRUE
2BF2   31 00 54               LD   SP,STACK   
2BF5   CD 37 0F               CALL   coldInit   
2BF8   CD 57 52               CALL   execStr   
2BFB   32 20 31 20 3E 00      DB   "2 1 >",0   
2C01   E1                     POP   HL   
2C02   E5                     PUSH   HL   
2C03   11 FF FF               LD   DE,TRUE   
2C06   B7                     OR   A   
2C07   ED 52                  SBC   HL,DE   
2C09   7D                     LD   A,L   
2C0A   B4                     OR   H   
2C0B   CA 60 2C               JP   Z,expectM_3159S107   
2C0E   CD 03 0F               CALL   printStr   
2C11   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2C1D   CD 03 0F               CALL   printStr   
2C20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C2F   21 FF FF               LD   hl,TRUE   
2C32   E5                     PUSH   hl   
2C33   E5                     PUSH   hl   
2C34   CD 0A 10               CALL   run   
2C37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C3E   CD 03 0F               CALL   printStr   
2C41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C4E   E1                     POP   hl   
2C4F   E5                     PUSH   hl   
2C50   E5                     PUSH   hl   
2C51   CD 0A 10               CALL   run   
2C54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C5F   76                     HALT      
2C60                EXPECTM_3159S107:      
2C60   E1                     POP   HL   
2C61                          ;*Macro unroll:  test "3 3 >", FALSE
2C61   31 00 54               LD   SP,STACK   
2C64   CD 37 0F               CALL   coldInit   
2C67   CD 57 52               CALL   execStr   
2C6A   33 20 33 20 3E 00      DB   "3 3 >",0   
2C70   E1                     POP   HL   
2C71   E5                     PUSH   HL   
2C72   11 00 00               LD   DE,FALSE   
2C75   B7                     OR   A   
2C76   ED 52                  SBC   HL,DE   
2C78   7D                     LD   A,L   
2C79   B4                     OR   H   
2C7A   CA CF 2C               JP   Z,expectM_3160S108   
2C7D   CD 03 0F               CALL   printStr   
2C80   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2C8C   CD 03 0F               CALL   printStr   
2C8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C9E   21 00 00               LD   hl,FALSE   
2CA1   E5                     PUSH   hl   
2CA2   E5                     PUSH   hl   
2CA3   CD 0A 10               CALL   run   
2CA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CAD   CD 03 0F               CALL   printStr   
2CB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBD   E1                     POP   hl   
2CBE   E5                     PUSH   hl   
2CBF   E5                     PUSH   hl   
2CC0   CD 0A 10               CALL   run   
2CC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CCE   76                     HALT      
2CCF                EXPECTM_3160S108:      
2CCF   E1                     POP   HL   
2CD0                          ;*Macro unroll:  test "4 3 >", TRUE
2CD0   31 00 54               LD   SP,STACK   
2CD3   CD 37 0F               CALL   coldInit   
2CD6   CD 57 52               CALL   execStr   
2CD9   34 20 33 20 3E 00      DB   "4 3 >",0   
2CDF   E1                     POP   HL   
2CE0   E5                     PUSH   HL   
2CE1   11 FF FF               LD   DE,TRUE   
2CE4   B7                     OR   A   
2CE5   ED 52                  SBC   HL,DE   
2CE7   7D                     LD   A,L   
2CE8   B4                     OR   H   
2CE9   CA 3E 2D               JP   Z,expectM_3161S109   
2CEC   CD 03 0F               CALL   printStr   
2CEF   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2CFB   CD 03 0F               CALL   printStr   
2CFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D0D   21 FF FF               LD   hl,TRUE   
2D10   E5                     PUSH   hl   
2D11   E5                     PUSH   hl   
2D12   CD 0A 10               CALL   run   
2D15   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D1C   CD 03 0F               CALL   printStr   
2D1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D2C   E1                     POP   hl   
2D2D   E5                     PUSH   hl   
2D2E   E5                     PUSH   hl   
2D2F   CD 0A 10               CALL   run   
2D32   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D3D   76                     HALT      
2D3E                EXPECTM_3161S109:      
2D3E   E1                     POP   HL   
2D3F                          ;*Macro unroll:  test "2 2 <=", TRUE
2D3F   31 00 54               LD   SP,STACK   
2D42   CD 37 0F               CALL   coldInit   
2D45   CD 57 52               CALL   execStr   
2D48   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2D4F   E1                     POP   HL   
2D50   E5                     PUSH   HL   
2D51   11 FF FF               LD   DE,TRUE   
2D54   B7                     OR   A   
2D55   ED 52                  SBC   HL,DE   
2D57   7D                     LD   A,L   
2D58   B4                     OR   H   
2D59   CA AF 2D               JP   Z,expectM_3162S110   
2D5C   CD 03 0F               CALL   printStr   
2D5F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2D6C   CD 03 0F               CALL   printStr   
2D6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7E   21 FF FF               LD   hl,TRUE   
2D81   E5                     PUSH   hl   
2D82   E5                     PUSH   hl   
2D83   CD 0A 10               CALL   run   
2D86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D8D   CD 03 0F               CALL   printStr   
2D90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9D   E1                     POP   hl   
2D9E   E5                     PUSH   hl   
2D9F   E5                     PUSH   hl   
2DA0   CD 0A 10               CALL   run   
2DA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DAE   76                     HALT      
2DAF                EXPECTM_3162S110:      
2DAF   E1                     POP   HL   
2DB0                          ;*Macro unroll:  test "2 2 >=", TRUE
2DB0   31 00 54               LD   SP,STACK   
2DB3   CD 37 0F               CALL   coldInit   
2DB6   CD 57 52               CALL   execStr   
2DB9   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2DC0   E1                     POP   HL   
2DC1   E5                     PUSH   HL   
2DC2   11 FF FF               LD   DE,TRUE   
2DC5   B7                     OR   A   
2DC6   ED 52                  SBC   HL,DE   
2DC8   7D                     LD   A,L   
2DC9   B4                     OR   H   
2DCA   CA 20 2E               JP   Z,expectM_3163S111   
2DCD   CD 03 0F               CALL   printStr   
2DD0   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2DDD   CD 03 0F               CALL   printStr   
2DE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEF   21 FF FF               LD   hl,TRUE   
2DF2   E5                     PUSH   hl   
2DF3   E5                     PUSH   hl   
2DF4   CD 0A 10               CALL   run   
2DF7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DFE   CD 03 0F               CALL   printStr   
2E01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E0E   E1                     POP   hl   
2E0F   E5                     PUSH   hl   
2E10   E5                     PUSH   hl   
2E11   CD 0A 10               CALL   run   
2E14   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E1F   76                     HALT      
2E20                EXPECTM_3163S111:      
2E20   E1                     POP   HL   
2E21                          ;*Macro unroll:  test "3 1 <<", 6
2E21   31 00 54               LD   SP,STACK   
2E24   CD 37 0F               CALL   coldInit   
2E27   CD 57 52               CALL   execStr   
2E2A   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2E31   E1                     POP   HL   
2E32   E5                     PUSH   HL   
2E33   11 06 00               LD   DE,6   
2E36   B7                     OR   A   
2E37   ED 52                  SBC   HL,DE   
2E39   7D                     LD   A,L   
2E3A   B4                     OR   H   
2E3B   CA 91 2E               JP   Z,expectM_3164S112   
2E3E   CD 03 0F               CALL   printStr   
2E41   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2E4E   CD 03 0F               CALL   printStr   
2E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E60   21 06 00               LD   hl,6   
2E63   E5                     PUSH   hl   
2E64   E5                     PUSH   hl   
2E65   CD 0A 10               CALL   run   
2E68   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E6F   CD 03 0F               CALL   printStr   
2E72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E7F   E1                     POP   hl   
2E80   E5                     PUSH   hl   
2E81   E5                     PUSH   hl   
2E82   CD 0A 10               CALL   run   
2E85   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E90   76                     HALT      
2E91                EXPECTM_3164S112:      
2E91   E1                     POP   HL   
2E92                          ;*Macro unroll:  test "10 1 >>", 5
2E92   31 00 54               LD   SP,STACK   
2E95   CD 37 0F               CALL   coldInit   
2E98   CD 57 52               CALL   execStr   
2E9B   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2EA3   E1                     POP   HL   
2EA4   E5                     PUSH   HL   
2EA5   11 05 00               LD   DE,5   
2EA8   B7                     OR   A   
2EA9   ED 52                  SBC   HL,DE   
2EAB   7D                     LD   A,L   
2EAC   B4                     OR   H   
2EAD   CA 04 2F               JP   Z,expectM_3165S113   
2EB0   CD 03 0F               CALL   printStr   
2EB3   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2EC1   CD 03 0F               CALL   printStr   
2EC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ED3   21 05 00               LD   hl,5   
2ED6   E5                     PUSH   hl   
2ED7   E5                     PUSH   hl   
2ED8   CD 0A 10               CALL   run   
2EDB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EE2   CD 03 0F               CALL   printStr   
2EE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EF2   E1                     POP   hl   
2EF3   E5                     PUSH   hl   
2EF4   E5                     PUSH   hl   
2EF5   CD 0A 10               CALL   run   
2EF8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F03   76                     HALT      
2F04                EXPECTM_3165S113:      
2F04   E1                     POP   HL   
2F05                          ;*Macro unroll:  test "1 x = x", 1
2F05   31 00 54               LD   SP,STACK   
2F08   CD 37 0F               CALL   coldInit   
2F0B   CD 57 52               CALL   execStr   
2F0E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2F16   E1                     POP   HL   
2F17   E5                     PUSH   HL   
2F18   11 01 00               LD   DE,1   
2F1B   B7                     OR   A   
2F1C   ED 52                  SBC   HL,DE   
2F1E   7D                     LD   A,L   
2F1F   B4                     OR   H   
2F20   CA 77 2F               JP   Z,expectM_3166S114   
2F23   CD 03 0F               CALL   printStr   
2F26   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2F34   CD 03 0F               CALL   printStr   
2F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F46   21 01 00               LD   hl,1   
2F49   E5                     PUSH   hl   
2F4A   E5                     PUSH   hl   
2F4B   CD 0A 10               CALL   run   
2F4E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F55   CD 03 0F               CALL   printStr   
2F58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F65   E1                     POP   hl   
2F66   E5                     PUSH   hl   
2F67   E5                     PUSH   hl   
2F68   CD 0A 10               CALL   run   
2F6B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F76   76                     HALT      
2F77                EXPECTM_3166S114:      
2F77   E1                     POP   HL   
2F78                          ;*Macro unroll:  test "1{}^", 1
2F78   31 00 54               LD   SP,STACK   
2F7B   CD 37 0F               CALL   coldInit   
2F7E   CD 57 52               CALL   execStr   
2F81   31 7B 7D 5E 00         DB   "1{}^",0   
2F86   E1                     POP   HL   
2F87   E5                     PUSH   HL   
2F88   11 01 00               LD   DE,1   
2F8B   B7                     OR   A   
2F8C   ED 52                  SBC   HL,DE   
2F8E   7D                     LD   A,L   
2F8F   B4                     OR   H   
2F90   CA E4 2F               JP   Z,expectM_3167S115   
2F93   CD 03 0F               CALL   printStr   
2F96   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2FA1   CD 03 0F               CALL   printStr   
2FA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FB3   21 01 00               LD   hl,1   
2FB6   E5                     PUSH   hl   
2FB7   E5                     PUSH   hl   
2FB8   CD 0A 10               CALL   run   
2FBB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FC2   CD 03 0F               CALL   printStr   
2FC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FD2   E1                     POP   hl   
2FD3   E5                     PUSH   hl   
2FD4   E5                     PUSH   hl   
2FD5   CD 0A 10               CALL   run   
2FD8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FE3   76                     HALT      
2FE4                EXPECTM_3167S115:      
2FE4   E1                     POP   HL   
2FE5                          ;*Macro unroll:  test "{1}^", 1
2FE5   31 00 54               LD   SP,STACK   
2FE8   CD 37 0F               CALL   coldInit   
2FEB   CD 57 52               CALL   execStr   
2FEE   7B 31 7D 5E 00         DB   "{1}^",0   
2FF3   E1                     POP   HL   
2FF4   E5                     PUSH   HL   
2FF5   11 01 00               LD   DE,1   
2FF8   B7                     OR   A   
2FF9   ED 52                  SBC   HL,DE   
2FFB   7D                     LD   A,L   
2FFC   B4                     OR   H   
2FFD   CA 51 30               JP   Z,expectM_3168S116   
3000   CD 03 0F               CALL   printStr   
3003   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
300E   CD 03 0F               CALL   printStr   
3011   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3020   21 01 00               LD   hl,1   
3023   E5                     PUSH   hl   
3024   E5                     PUSH   hl   
3025   CD 0A 10               CALL   run   
3028   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
302F   CD 03 0F               CALL   printStr   
3032   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303F   E1                     POP   hl   
3040   E5                     PUSH   hl   
3041   E5                     PUSH   hl   
3042   CD 0A 10               CALL   run   
3045   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3050   76                     HALT      
3051                EXPECTM_3168S116:      
3051   E1                     POP   HL   
3052                          ;*Macro unroll:  test "{{1}^}^", 1
3052   31 00 54               LD   SP,STACK   
3055   CD 37 0F               CALL   coldInit   
3058   CD 57 52               CALL   execStr   
305B   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
3063   E1                     POP   HL   
3064   E5                     PUSH   HL   
3065   11 01 00               LD   DE,1   
3068   B7                     OR   A   
3069   ED 52                  SBC   HL,DE   
306B   7D                     LD   A,L   
306C   B4                     OR   H   
306D   CA C4 30               JP   Z,expectM_3169S117   
3070   CD 03 0F               CALL   printStr   
3073   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3081   CD 03 0F               CALL   printStr   
3084   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3093   21 01 00               LD   hl,1   
3096   E5                     PUSH   hl   
3097   E5                     PUSH   hl   
3098   CD 0A 10               CALL   run   
309B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30A2   CD 03 0F               CALL   printStr   
30A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30B2   E1                     POP   hl   
30B3   E5                     PUSH   hl   
30B4   E5                     PUSH   hl   
30B5   CD 0A 10               CALL   run   
30B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30C3   76                     HALT      
30C4                EXPECTM_3169S117:      
30C4   E1                     POP   HL   
30C5                          ;*Macro unroll:  test "{{{1}^}^}^", 1
30C5   31 00 54               LD   SP,STACK   
30C8   CD 37 0F               CALL   coldInit   
30CB   CD 57 52               CALL   execStr   
30CE   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
30D9   E1                     POP   HL   
30DA   E5                     PUSH   HL   
30DB   11 01 00               LD   DE,1   
30DE   B7                     OR   A   
30DF   ED 52                  SBC   HL,DE   
30E1   7D                     LD   A,L   
30E2   B4                     OR   H   
30E3   CA 3D 31               JP   Z,expectM_3170S118   
30E6   CD 03 0F               CALL   printStr   
30E9   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
30FA   CD 03 0F               CALL   printStr   
30FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
310C   21 01 00               LD   hl,1   
310F   E5                     PUSH   hl   
3110   E5                     PUSH   hl   
3111   CD 0A 10               CALL   run   
3114   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
311B   CD 03 0F               CALL   printStr   
311E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
312B   E1                     POP   hl   
312C   E5                     PUSH   hl   
312D   E5                     PUSH   hl   
312E   CD 0A 10               CALL   run   
3131   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
313C   76                     HALT      
313D                EXPECTM_3170S118:      
313D   E1                     POP   HL   
313E                          ;*Macro unroll:  test "5 /f{10} ?", 5
313E   31 00 54               LD   SP,STACK   
3141   CD 37 0F               CALL   coldInit   
3144   CD 57 52               CALL   execStr   
3147   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
3152   E1                     POP   HL   
3153   E5                     PUSH   HL   
3154   11 05 00               LD   DE,5   
3157   B7                     OR   A   
3158   ED 52                  SBC   HL,DE   
315A   7D                     LD   A,L   
315B   B4                     OR   H   
315C   CA B6 31               JP   Z,expectM_3171S119   
315F   CD 03 0F               CALL   printStr   
3162   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
3173   CD 03 0F               CALL   printStr   
3176   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3185   21 05 00               LD   hl,5   
3188   E5                     PUSH   hl   
3189   E5                     PUSH   hl   
318A   CD 0A 10               CALL   run   
318D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3194   CD 03 0F               CALL   printStr   
3197   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A4   E1                     POP   hl   
31A5   E5                     PUSH   hl   
31A6   E5                     PUSH   hl   
31A7   CD 0A 10               CALL   run   
31AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31B5   76                     HALT      
31B6                EXPECTM_3171S119:      
31B6   E1                     POP   HL   
31B7                          ;*Macro unroll:  test "5 /t{10} ? +", 15
31B7   31 00 54               LD   SP,STACK   
31BA   CD 37 0F               CALL   coldInit   
31BD   CD 57 52               CALL   execStr   
31C0   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
31CD   E1                     POP   HL   
31CE   E5                     PUSH   HL   
31CF   11 0F 00               LD   DE,15   
31D2   B7                     OR   A   
31D3   ED 52                  SBC   HL,DE   
31D5   7D                     LD   A,L   
31D6   B4                     OR   H   
31D7   CA 33 32               JP   Z,expectM_3172S120   
31DA   CD 03 0F               CALL   printStr   
31DD   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
31F0   CD 03 0F               CALL   printStr   
31F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3202   21 0F 00               LD   hl,15   
3205   E5                     PUSH   hl   
3206   E5                     PUSH   hl   
3207   CD 0A 10               CALL   run   
320A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3211   CD 03 0F               CALL   printStr   
3214   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3221   E1                     POP   hl   
3222   E5                     PUSH   hl   
3223   E5                     PUSH   hl   
3224   CD 0A 10               CALL   run   
3227   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3232   76                     HALT      
3233                EXPECTM_3172S120:      
3233   E1                     POP   HL   
3234                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
3234   31 00 54               LD   SP,STACK   
3237   CD 37 0F               CALL   coldInit   
323A   CD 57 52               CALL   execStr   
323D   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
324F   E1                     POP   HL   
3250   E5                     PUSH   HL   
3251   11 15 00               LD   DE,21   
3254   B7                     OR   A   
3255   ED 52                  SBC   HL,DE   
3257   7D                     LD   A,L   
3258   B4                     OR   H   
3259   CA BA 32               JP   Z,expectM_3173S121   
325C   CD 03 0F               CALL   printStr   
325F   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
3277   CD 03 0F               CALL   printStr   
327A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3289   21 15 00               LD   hl,21   
328C   E5                     PUSH   hl   
328D   E5                     PUSH   hl   
328E   CD 0A 10               CALL   run   
3291   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3298   CD 03 0F               CALL   printStr   
329B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A8   E1                     POP   hl   
32A9   E5                     PUSH   hl   
32AA   E5                     PUSH   hl   
32AB   CD 0A 10               CALL   run   
32AE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32B9   76                     HALT      
32BA                EXPECTM_3173S121:      
32BA   E1                     POP   HL   
32BB                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
32BB   31 00 54               LD   SP,STACK   
32BE   CD 37 0F               CALL   coldInit   
32C1   CD 57 52               CALL   execStr   
32C4   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
32D6   E1                     POP   HL   
32D7   E5                     PUSH   HL   
32D8   11 0B 00               LD   DE,11   
32DB   B7                     OR   A   
32DC   ED 52                  SBC   HL,DE   
32DE   7D                     LD   A,L   
32DF   B4                     OR   H   
32E0   CA 41 33               JP   Z,expectM_3174S122   
32E3   CD 03 0F               CALL   printStr   
32E6   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
32FE   CD 03 0F               CALL   printStr   
3301   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3310   21 0B 00               LD   hl,11   
3313   E5                     PUSH   hl   
3314   E5                     PUSH   hl   
3315   CD 0A 10               CALL   run   
3318   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
331F   CD 03 0F               CALL   printStr   
3322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
332F   E1                     POP   hl   
3330   E5                     PUSH   hl   
3331   E5                     PUSH   hl   
3332   CD 0A 10               CALL   run   
3335   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3340   76                     HALT      
3341                EXPECTM_3174S122:      
3341   E1                     POP   HL   
3342                          ;*Macro unroll:  test "\\{2}^", 2
3342   31 00 54               LD   SP,STACK   
3345   CD 37 0F               CALL   coldInit   
3348   CD 57 52               CALL   execStr   
334B   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
3351   E1                     POP   HL   
3352   E5                     PUSH   HL   
3353   11 02 00               LD   DE,2   
3356   B7                     OR   A   
3357   ED 52                  SBC   HL,DE   
3359   7D                     LD   A,L   
335A   B4                     OR   H   
335B   CA B0 33               JP   Z,expectM_3175S123   
335E   CD 03 0F               CALL   printStr   
3361   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
336D   CD 03 0F               CALL   printStr   
3370   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
337F   21 02 00               LD   hl,2   
3382   E5                     PUSH   hl   
3383   E5                     PUSH   hl   
3384   CD 0A 10               CALL   run   
3387   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
338E   CD 03 0F               CALL   printStr   
3391   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
339E   E1                     POP   hl   
339F   E5                     PUSH   hl   
33A0   E5                     PUSH   hl   
33A1   CD 0A 10               CALL   run   
33A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33AF   76                     HALT      
33B0                EXPECTM_3175S123:      
33B0   E1                     POP   HL   
33B1                          ;*Macro unroll:  test "\\a{2}^", 2
33B1   31 00 54               LD   SP,STACK   
33B4   CD 37 0F               CALL   coldInit   
33B7   CD 57 52               CALL   execStr   
33BA   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
33C1   E1                     POP   HL   
33C2   E5                     PUSH   HL   
33C3   11 02 00               LD   DE,2   
33C6   B7                     OR   A   
33C7   ED 52                  SBC   HL,DE   
33C9   7D                     LD   A,L   
33CA   B4                     OR   H   
33CB   CA 21 34               JP   Z,expectM_3176S124   
33CE   CD 03 0F               CALL   printStr   
33D1   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
33DE   CD 03 0F               CALL   printStr   
33E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33F0   21 02 00               LD   hl,2   
33F3   E5                     PUSH   hl   
33F4   E5                     PUSH   hl   
33F5   CD 0A 10               CALL   run   
33F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33FF   CD 03 0F               CALL   printStr   
3402   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
340F   E1                     POP   hl   
3410   E5                     PUSH   hl   
3411   E5                     PUSH   hl   
3412   CD 0A 10               CALL   run   
3415   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3420   76                     HALT      
3421                EXPECTM_3176S124:      
3421   E1                     POP   HL   
3422                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3422   31 00 54               LD   SP,STACK   
3425   CD 37 0F               CALL   coldInit   
3428   CD 57 52               CALL   execStr   
342B   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3435   E1                     POP   HL   
3436   E5                     PUSH   HL   
3437   11 05 00               LD   DE,5   
343A   B7                     OR   A   
343B   ED 52                  SBC   HL,DE   
343D   7D                     LD   A,L   
343E   B4                     OR   H   
343F   CA 98 34               JP   Z,expectM_3177S125   
3442   CD 03 0F               CALL   printStr   
3445   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3455   CD 03 0F               CALL   printStr   
3458   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3467   21 05 00               LD   hl,5   
346A   E5                     PUSH   hl   
346B   E5                     PUSH   hl   
346C   CD 0A 10               CALL   run   
346F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3476   CD 03 0F               CALL   printStr   
3479   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3486   E1                     POP   hl   
3487   E5                     PUSH   hl   
3488   E5                     PUSH   hl   
3489   CD 0A 10               CALL   run   
348C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3497   76                     HALT      
3498                EXPECTM_3177S125:      
3498   E1                     POP   HL   
3499                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3499   31 00 54               LD   SP,STACK   
349C   CD 37 0F               CALL   coldInit   
349F   CD 57 52               CALL   execStr   
34A2   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
34AE   E1                     POP   HL   
34AF   E5                     PUSH   HL   
34B0   11 05 00               LD   DE,5   
34B3   B7                     OR   A   
34B4   ED 52                  SBC   HL,DE   
34B6   7D                     LD   A,L   
34B7   B4                     OR   H   
34B8   CA 13 35               JP   Z,expectM_3178S126   
34BB   CD 03 0F               CALL   printStr   
34BE   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
34D0   CD 03 0F               CALL   printStr   
34D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E2   21 05 00               LD   hl,5   
34E5   E5                     PUSH   hl   
34E6   E5                     PUSH   hl   
34E7   CD 0A 10               CALL   run   
34EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34F1   CD 03 0F               CALL   printStr   
34F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3501   E1                     POP   hl   
3502   E5                     PUSH   hl   
3503   E5                     PUSH   hl   
3504   CD 0A 10               CALL   run   
3507   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3512   76                     HALT      
3513                EXPECTM_3178S126:      
3513   E1                     POP   HL   
3514                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3514   31 00 54               LD   SP,STACK   
3517   CD 37 0F               CALL   coldInit   
351A   CD 57 52               CALL   execStr   
351D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3527   E1                     POP   HL   
3528   E5                     PUSH   HL   
3529   11 02 00               LD   DE,2   
352C   B7                     OR   A   
352D   ED 52                  SBC   HL,DE   
352F   7D                     LD   A,L   
3530   B4                     OR   H   
3531   CA 8A 35               JP   Z,expectM_3179S127   
3534   CD 03 0F               CALL   printStr   
3537   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3547   CD 03 0F               CALL   printStr   
354A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3559   21 02 00               LD   hl,2   
355C   E5                     PUSH   hl   
355D   E5                     PUSH   hl   
355E   CD 0A 10               CALL   run   
3561   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3568   CD 03 0F               CALL   printStr   
356B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3578   E1                     POP   hl   
3579   E5                     PUSH   hl   
357A   E5                     PUSH   hl   
357B   CD 0A 10               CALL   run   
357E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3589   76                     HALT      
358A                EXPECTM_3179S127:      
358A   E1                     POP   HL   
358B                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
358B   31 00 54               LD   SP,STACK   
358E   CD 37 0F               CALL   coldInit   
3591   CD 57 52               CALL   execStr   
3594   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
35A3   E1                     POP   HL   
35A4   E5                     PUSH   HL   
35A5   11 05 00               LD   DE,5   
35A8   B7                     OR   A   
35A9   ED 52                  SBC   HL,DE   
35AB   7D                     LD   A,L   
35AC   B4                     OR   H   
35AD   CA 0B 36               JP   Z,expectM_3180S128   
35B0   CD 03 0F               CALL   printStr   
35B3   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
35C8   CD 03 0F               CALL   printStr   
35CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35DA   21 05 00               LD   hl,5   
35DD   E5                     PUSH   hl   
35DE   E5                     PUSH   hl   
35DF   CD 0A 10               CALL   run   
35E2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35E9   CD 03 0F               CALL   printStr   
35EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35F9   E1                     POP   hl   
35FA   E5                     PUSH   hl   
35FB   E5                     PUSH   hl   
35FC   CD 0A 10               CALL   run   
35FF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
360A   76                     HALT      
360B                EXPECTM_3180S128:      
360B   E1                     POP   HL   
360C                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
360C   31 00 54               LD   SP,STACK   
360F   CD 37 0F               CALL   coldInit   
3612   CD 57 52               CALL   execStr   
3615   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3625   E1                     POP   HL   
3626   E5                     PUSH   HL   
3627   11 01 00               LD   DE,1   
362A   B7                     OR   A   
362B   ED 52                  SBC   HL,DE   
362D   7D                     LD   A,L   
362E   B4                     OR   H   
362F   CA 8E 36               JP   Z,expectM_3181S129   
3632   CD 03 0F               CALL   printStr   
3635   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
364B   CD 03 0F               CALL   printStr   
364E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
365D   21 01 00               LD   hl,1   
3660   E5                     PUSH   hl   
3661   E5                     PUSH   hl   
3662   CD 0A 10               CALL   run   
3665   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
366C   CD 03 0F               CALL   printStr   
366F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
367C   E1                     POP   hl   
367D   E5                     PUSH   hl   
367E   E5                     PUSH   hl   
367F   CD 0A 10               CALL   run   
3682   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
368D   76                     HALT      
368E                EXPECTM_3181S129:      
368E   E1                     POP   HL   
368F                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
368F   31 00 54               LD   SP,STACK   
3692   CD 37 0F               CALL   coldInit   
3695   CD 57 52               CALL   execStr   
3698   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
36AB   E1                     POP   HL   
36AC   E5                     PUSH   HL   
36AD   11 07 00               LD   DE,7   
36B0   B7                     OR   A   
36B1   ED 52                  SBC   HL,DE   
36B3   7D                     LD   A,L   
36B4   B4                     OR   H   
36B5   CA 17 37               JP   Z,expectM_3182S130   
36B8   CD 03 0F               CALL   printStr   
36BB   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
36D4   CD 03 0F               CALL   printStr   
36D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E6   21 07 00               LD   hl,7   
36E9   E5                     PUSH   hl   
36EA   E5                     PUSH   hl   
36EB   CD 0A 10               CALL   run   
36EE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36F5   CD 03 0F               CALL   printStr   
36F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3705   E1                     POP   hl   
3706   E5                     PUSH   hl   
3707   E5                     PUSH   hl   
3708   CD 0A 10               CALL   run   
370B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3716   76                     HALT      
3717                EXPECTM_3182S130:      
3717   E1                     POP   HL   
3718                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3718   31 00 54               LD   SP,STACK   
371B   CD 37 0F               CALL   coldInit   
371E   CD 57 52               CALL   execStr   
3721   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3736   E1                     POP   HL   
3737   E5                     PUSH   HL   
3738   11 06 00               LD   DE,6   
373B   B7                     OR   A   
373C   ED 52                  SBC   HL,DE   
373E   7D                     LD   A,L   
373F   B4                     OR   H   
3740   CA A4 37               JP   Z,expectM_3183S131   
3743   CD 03 0F               CALL   printStr   
3746   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3761   CD 03 0F               CALL   printStr   
3764   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3773   21 06 00               LD   hl,6   
3776   E5                     PUSH   hl   
3777   E5                     PUSH   hl   
3778   CD 0A 10               CALL   run   
377B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3782   CD 03 0F               CALL   printStr   
3785   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3792   E1                     POP   hl   
3793   E5                     PUSH   hl   
3794   E5                     PUSH   hl   
3795   CD 0A 10               CALL   run   
3798   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37A3   76                     HALT      
37A4                EXPECTM_3183S131:      
37A4   E1                     POP   HL   
37A5                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
37A5   31 00 54               LD   SP,STACK   
37A8   CD 37 0F               CALL   coldInit   
37AB   CD 57 52               CALL   execStr   
37AE   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
37BC   E1                     POP   HL   
37BD   E5                     PUSH   HL   
37BE   11 02 00               LD   DE,2   
37C1   B7                     OR   A   
37C2   ED 52                  SBC   HL,DE   
37C4   7D                     LD   A,L   
37C5   B4                     OR   H   
37C6   CA 23 38               JP   Z,expectM_3184S132   
37C9   CD 03 0F               CALL   printStr   
37CC   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
37E0   CD 03 0F               CALL   printStr   
37E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37F2   21 02 00               LD   hl,2   
37F5   E5                     PUSH   hl   
37F6   E5                     PUSH   hl   
37F7   CD 0A 10               CALL   run   
37FA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3801   CD 03 0F               CALL   printStr   
3804   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3811   E1                     POP   hl   
3812   E5                     PUSH   hl   
3813   E5                     PUSH   hl   
3814   CD 0A 10               CALL   run   
3817   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3822   76                     HALT      
3823                EXPECTM_3184S132:      
3823   E1                     POP   HL   
3824                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3824   31 00 54               LD   SP,STACK   
3827   CD 37 0F               CALL   coldInit   
382A   CD 57 52               CALL   execStr   
382D   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
383E   E1                     POP   HL   
383F   E5                     PUSH   HL   
3840   11 01 00               LD   DE,1   
3843   B7                     OR   A   
3844   ED 52                  SBC   HL,DE   
3846   7D                     LD   A,L   
3847   B4                     OR   H   
3848   CA A8 38               JP   Z,expectM_3185S133   
384B   CD 03 0F               CALL   printStr   
384E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3865   CD 03 0F               CALL   printStr   
3868   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3877   21 01 00               LD   hl,1   
387A   E5                     PUSH   hl   
387B   E5                     PUSH   hl   
387C   CD 0A 10               CALL   run   
387F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3886   CD 03 0F               CALL   printStr   
3889   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3896   E1                     POP   hl   
3897   E5                     PUSH   hl   
3898   E5                     PUSH   hl   
3899   CD 0A 10               CALL   run   
389C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
38A7   76                     HALT      
38A8                EXPECTM_3185S133:      
38A8   E1                     POP   HL   
38A9                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
38A9   31 00 54               LD   SP,STACK   
38AC   CD 37 0F               CALL   coldInit   
38AF   CD 57 52               CALL   execStr   
38B2   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
38C4   E1                     POP   HL   
38C5   E5                     PUSH   HL   
38C6   11 02 00               LD   DE,2   
38C9   B7                     OR   A   
38CA   ED 52                  SBC   HL,DE   
38CC   7D                     LD   A,L   
38CD   B4                     OR   H   
38CE   CA 2F 39               JP   Z,expectM_3186S134   
38D1   CD 03 0F               CALL   printStr   
38D4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
38EC   CD 03 0F               CALL   printStr   
38EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38FE   21 02 00               LD   hl,2   
3901   E5                     PUSH   hl   
3902   E5                     PUSH   hl   
3903   CD 0A 10               CALL   run   
3906   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
390D   CD 03 0F               CALL   printStr   
3910   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
391D   E1                     POP   hl   
391E   E5                     PUSH   hl   
391F   E5                     PUSH   hl   
3920   CD 0A 10               CALL   run   
3923   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
392E   76                     HALT      
392F                EXPECTM_3186S134:      
392F   E1                     POP   HL   
3930                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3930   31 00 54               LD   SP,STACK   
3933   CD 37 0F               CALL   coldInit   
3936   CD 57 52               CALL   execStr   
3939   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
394C   E1                     POP   HL   
394D   E5                     PUSH   HL   
394E   11 02 00               LD   DE,2   
3951   B7                     OR   A   
3952   ED 52                  SBC   HL,DE   
3954   7D                     LD   A,L   
3955   B4                     OR   H   
3956   CA B8 39               JP   Z,expectM_3187S135   
3959   CD 03 0F               CALL   printStr   
395C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3975   CD 03 0F               CALL   printStr   
3978   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3987   21 02 00               LD   hl,2   
398A   E5                     PUSH   hl   
398B   E5                     PUSH   hl   
398C   CD 0A 10               CALL   run   
398F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3996   CD 03 0F               CALL   printStr   
3999   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A6   E1                     POP   hl   
39A7   E5                     PUSH   hl   
39A8   E5                     PUSH   hl   
39A9   CD 0A 10               CALL   run   
39AC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
39B7   76                     HALT      
39B8                EXPECTM_3187S135:      
39B8   E1                     POP   HL   
39B9                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
39B9   31 00 54               LD   SP,STACK   
39BC   CD 37 0F               CALL   coldInit   
39BF   CD 57 52               CALL   execStr   
39C2   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
39D4   E1                     POP   HL   
39D5   E5                     PUSH   HL   
39D6   11 02 00               LD   DE,2   
39D9   B7                     OR   A   
39DA   ED 52                  SBC   HL,DE   
39DC   7D                     LD   A,L   
39DD   B4                     OR   H   
39DE   CA 3F 3A               JP   Z,expectM_3188S136   
39E1   CD 03 0F               CALL   printStr   
39E4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
39FC   CD 03 0F               CALL   printStr   
39FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A0E   21 02 00               LD   hl,2   
3A11   E5                     PUSH   hl   
3A12   E5                     PUSH   hl   
3A13   CD 0A 10               CALL   run   
3A16   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A1D   CD 03 0F               CALL   printStr   
3A20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A2D   E1                     POP   hl   
3A2E   E5                     PUSH   hl   
3A2F   E5                     PUSH   hl   
3A30   CD 0A 10               CALL   run   
3A33   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A3E   76                     HALT      
3A3F                EXPECTM_3188S136:      
3A3F   E1                     POP   HL   
3A40                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3A40   31 00 54               LD   SP,STACK   
3A43   CD 37 0F               CALL   coldInit   
3A46   CD 57 52               CALL   execStr   
3A49   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3A62   E1                     POP   HL   
3A63   E5                     PUSH   HL   
3A64   11 05 00               LD   DE,5   
3A67   B7                     OR   A   
3A68   ED 52                  SBC   HL,DE   
3A6A   7D                     LD   A,L   
3A6B   B4                     OR   H   
3A6C   CA D4 3A               JP   Z,expectM_3189S137   
3A6F   CD 03 0F               CALL   printStr   
3A72   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3A91   CD 03 0F               CALL   printStr   
3A94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA3   21 05 00               LD   hl,5   
3AA6   E5                     PUSH   hl   
3AA7   E5                     PUSH   hl   
3AA8   CD 0A 10               CALL   run   
3AAB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AB2   CD 03 0F               CALL   printStr   
3AB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC2   E1                     POP   hl   
3AC3   E5                     PUSH   hl   
3AC4   E5                     PUSH   hl   
3AC5   CD 0A 10               CALL   run   
3AC8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AD3   76                     HALT      
3AD4                EXPECTM_3189S137:      
3AD4   E1                     POP   HL   
3AD5                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3AD5   31 00 54               LD   SP,STACK   
3AD8   CD 37 0F               CALL   coldInit   
3ADB   CD 57 52               CALL   execStr   
3ADE   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3AEE   E1                     POP   HL   
3AEF   E5                     PUSH   HL   
3AF0   11 02 00               LD   DE,2   
3AF3   B7                     OR   A   
3AF4   ED 52                  SBC   HL,DE   
3AF6   7D                     LD   A,L   
3AF7   B4                     OR   H   
3AF8   CA 57 3B               JP   Z,expectM_3190S138   
3AFB   CD 03 0F               CALL   printStr   
3AFE   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3B14   CD 03 0F               CALL   printStr   
3B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B26   21 02 00               LD   hl,2   
3B29   E5                     PUSH   hl   
3B2A   E5                     PUSH   hl   
3B2B   CD 0A 10               CALL   run   
3B2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B35   CD 03 0F               CALL   printStr   
3B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B45   E1                     POP   hl   
3B46   E5                     PUSH   hl   
3B47   E5                     PUSH   hl   
3B48   CD 0A 10               CALL   run   
3B4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B56   76                     HALT      
3B57                EXPECTM_3190S138:      
3B57   E1                     POP   HL   
3B58                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3B58   31 00 54               LD   SP,STACK   
3B5B   CD 37 0F               CALL   coldInit   
3B5E   CD 57 52               CALL   execStr   
3B61   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3B78   E1                     POP   HL   
3B79   E5                     PUSH   HL   
3B7A   11 64 00               LD   DE,100   
3B7D   B7                     OR   A   
3B7E   ED 52                  SBC   HL,DE   
3B80   7D                     LD   A,L   
3B81   B4                     OR   H   
3B82   CA E8 3B               JP   Z,expectM_3191S139   
3B85   CD 03 0F               CALL   printStr   
3B88   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3BA5   CD 03 0F               CALL   printStr   
3BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB7   21 64 00               LD   hl,100   
3BBA   E5                     PUSH   hl   
3BBB   E5                     PUSH   hl   
3BBC   CD 0A 10               CALL   run   
3BBF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BC6   CD 03 0F               CALL   printStr   
3BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD6   E1                     POP   hl   
3BD7   E5                     PUSH   hl   
3BD8   E5                     PUSH   hl   
3BD9   CD 0A 10               CALL   run   
3BDC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BE7   76                     HALT      
3BE8                EXPECTM_3191S139:      
3BE8   E1                     POP   HL   
3BE9                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3BE9   31 00 54               LD   SP,STACK   
3BEC   CD 37 0F               CALL   coldInit   
3BEF   CD 57 52               CALL   execStr   
3BF2   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3C0A   E1                     POP   HL   
3C0B   E5                     PUSH   HL   
3C0C   11 01 00               LD   DE,1   
3C0F   B7                     OR   A   
3C10   ED 52                  SBC   HL,DE   
3C12   7D                     LD   A,L   
3C13   B4                     OR   H   
3C14   CA 7B 3C               JP   Z,expectM_3192S140   
3C17   CD 03 0F               CALL   printStr   
3C1A   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3C38   CD 03 0F               CALL   printStr   
3C3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C4A   21 01 00               LD   hl,1   
3C4D   E5                     PUSH   hl   
3C4E   E5                     PUSH   hl   
3C4F   CD 0A 10               CALL   run   
3C52   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C59   CD 03 0F               CALL   printStr   
3C5C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C69   E1                     POP   hl   
3C6A   E5                     PUSH   hl   
3C6B   E5                     PUSH   hl   
3C6C   CD 0A 10               CALL   run   
3C6F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C7A   76                     HALT      
3C7B                EXPECTM_3192S140:      
3C7B   E1                     POP   HL   
3C7C                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3C7C   31 00 54               LD   SP,STACK   
3C7F   CD 37 0F               CALL   coldInit   
3C82   CD 57 52               CALL   execStr   
3C85   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3C9E   E1                     POP   HL   
3C9F   E5                     PUSH   HL   
3CA0   11 02 00               LD   DE,2   
3CA3   B7                     OR   A   
3CA4   ED 52                  SBC   HL,DE   
3CA6   7D                     LD   A,L   
3CA7   B4                     OR   H   
3CA8   CA 10 3D               JP   Z,expectM_3193S141   
3CAB   CD 03 0F               CALL   printStr   
3CAE   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3CCD   CD 03 0F               CALL   printStr   
3CD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CDF   21 02 00               LD   hl,2   
3CE2   E5                     PUSH   hl   
3CE3   E5                     PUSH   hl   
3CE4   CD 0A 10               CALL   run   
3CE7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CEE   CD 03 0F               CALL   printStr   
3CF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CFE   E1                     POP   hl   
3CFF   E5                     PUSH   hl   
3D00   E5                     PUSH   hl   
3D01   CD 0A 10               CALL   run   
3D04   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D0F   76                     HALT      
3D10                EXPECTM_3193S141:      
3D10   E1                     POP   HL   
3D11                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3D11   31 00 54               LD   SP,STACK   
3D14   CD 37 0F               CALL   coldInit   
3D17   CD 57 52               CALL   execStr   
3D1A   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3D38   E1                     POP   HL   
3D39   E5                     PUSH   HL   
3D3A   11 0B 00               LD   DE,11   
3D3D   B7                     OR   A   
3D3E   ED 52                  SBC   HL,DE   
3D40   7D                     LD   A,L   
3D41   B4                     OR   H   
3D42   CA AF 3D               JP   Z,expectM_3194S142   
3D45   CD 03 0F               CALL   printStr   
3D48   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3D6C   CD 03 0F               CALL   printStr   
3D6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D7E   21 0B 00               LD   hl,11   
3D81   E5                     PUSH   hl   
3D82   E5                     PUSH   hl   
3D83   CD 0A 10               CALL   run   
3D86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D8D   CD 03 0F               CALL   printStr   
3D90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D9D   E1                     POP   hl   
3D9E   E5                     PUSH   hl   
3D9F   E5                     PUSH   hl   
3DA0   CD 0A 10               CALL   run   
3DA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DAE   76                     HALT      
3DAF                EXPECTM_3194S142:      
3DAF   E1                     POP   HL   
3DB0                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3DB0   31 00 54               LD   SP,STACK   
3DB3   CD 37 0F               CALL   coldInit   
3DB6   CD 57 52               CALL   execStr   
3DB9   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3DD7   E1                     POP   HL   
3DD8   E5                     PUSH   HL   
3DD9   11 15 00               LD   DE,21   
3DDC   B7                     OR   A   
3DDD   ED 52                  SBC   HL,DE   
3DDF   7D                     LD   A,L   
3DE0   B4                     OR   H   
3DE1   CA 4E 3E               JP   Z,expectM_3195S143   
3DE4   CD 03 0F               CALL   printStr   
3DE7   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3E0B   CD 03 0F               CALL   printStr   
3E0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E1D   21 15 00               LD   hl,21   
3E20   E5                     PUSH   hl   
3E21   E5                     PUSH   hl   
3E22   CD 0A 10               CALL   run   
3E25   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E2C   CD 03 0F               CALL   printStr   
3E2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E3C   E1                     POP   hl   
3E3D   E5                     PUSH   hl   
3E3E   E5                     PUSH   hl   
3E3F   CD 0A 10               CALL   run   
3E42   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E4D   76                     HALT      
3E4E                EXPECTM_3195S143:      
3E4E   E1                     POP   HL   
3E4F                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E4F   31 00 54               LD   SP,STACK   
3E52   CD 37 0F               CALL   coldInit   
3E55   CD 57 52               CALL   execStr   
3E58   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3E66   E1                     POP   HL   
3E67   E5                     PUSH   HL   
3E68   11 14 00               LD   DE,20   
3E6B   B7                     OR   A   
3E6C   ED 52                  SBC   HL,DE   
3E6E   7D                     LD   A,L   
3E6F   B4                     OR   H   
3E70   CA CD 3E               JP   Z,expectM_3196S144   
3E73   CD 03 0F               CALL   printStr   
3E76   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3E8A   CD 03 0F               CALL   printStr   
3E8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E9C   21 14 00               LD   hl,20   
3E9F   E5                     PUSH   hl   
3EA0   E5                     PUSH   hl   
3EA1   CD 0A 10               CALL   run   
3EA4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3EAB   CD 03 0F               CALL   printStr   
3EAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EBB   E1                     POP   hl   
3EBC   E5                     PUSH   hl   
3EBD   E5                     PUSH   hl   
3EBE   CD 0A 10               CALL   run   
3EC1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3ECC   76                     HALT      
3ECD                EXPECTM_3196S144:      
3ECD   E1                     POP   HL   
3ECE                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3ECE   31 00 54               LD   SP,STACK   
3ED1   CD 37 0F               CALL   coldInit   
3ED4   CD 57 52               CALL   execStr   
3ED7   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3EE9   E1                     POP   HL   
3EEA   E5                     PUSH   HL   
3EEB   11 04 00               LD   DE,4   
3EEE   B7                     OR   A   
3EEF   ED 52                  SBC   HL,DE   
3EF1   7D                     LD   A,L   
3EF2   B4                     OR   H   
3EF3   CA 54 3F               JP   Z,expectM_3197S145   
3EF6   CD 03 0F               CALL   printStr   
3EF9   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3F11   CD 03 0F               CALL   printStr   
3F14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F23   21 04 00               LD   hl,4   
3F26   E5                     PUSH   hl   
3F27   E5                     PUSH   hl   
3F28   CD 0A 10               CALL   run   
3F2B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F32   CD 03 0F               CALL   printStr   
3F35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F42   E1                     POP   hl   
3F43   E5                     PUSH   hl   
3F44   E5                     PUSH   hl   
3F45   CD 0A 10               CALL   run   
3F48   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F53   76                     HALT      
3F54                EXPECTM_3197S145:      
3F54   E1                     POP   HL   
3F55                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3F55   31 00 54               LD   SP,STACK   
3F58   CD 37 0F               CALL   coldInit   
3F5B   CD 57 52               CALL   execStr   
3F5E   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3F6D   E1                     POP   HL   
3F6E   E5                     PUSH   HL   
3F6F   11 02 00               LD   DE,2   
3F72   B7                     OR   A   
3F73   ED 52                  SBC   HL,DE   
3F75   7D                     LD   A,L   
3F76   B4                     OR   H   
3F77   CA D5 3F               JP   Z,expectM_3198S146   
3F7A   CD 03 0F               CALL   printStr   
3F7D   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3F92   CD 03 0F               CALL   printStr   
3F95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FA4   21 02 00               LD   hl,2   
3FA7   E5                     PUSH   hl   
3FA8   E5                     PUSH   hl   
3FA9   CD 0A 10               CALL   run   
3FAC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FB3   CD 03 0F               CALL   printStr   
3FB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FC3   E1                     POP   hl   
3FC4   E5                     PUSH   hl   
3FC5   E5                     PUSH   hl   
3FC6   CD 0A 10               CALL   run   
3FC9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FD4   76                     HALT      
3FD5                EXPECTM_3198S146:      
3FD5   E1                     POP   HL   
3FD6                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3FD6   31 00 54               LD   SP,STACK   
3FD9   CD 37 0F               CALL   coldInit   
3FDC   CD 57 52               CALL   execStr   
3FDF   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3FF1   E1                     POP   HL   
3FF2   E5                     PUSH   HL   
3FF3   11 42 00               LD   DE,66   
3FF6   B7                     OR   A   
3FF7   ED 52                  SBC   HL,DE   
3FF9   7D                     LD   A,L   
3FFA   B4                     OR   H   
3FFB   CA 5C 40               JP   Z,expectM_3199S147   
3FFE   CD 03 0F               CALL   printStr   
4001   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
4019   CD 03 0F               CALL   printStr   
401C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
402B   21 42 00               LD   hl,66   
402E   E5                     PUSH   hl   
402F   E5                     PUSH   hl   
4030   CD 0A 10               CALL   run   
4033   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
403A   CD 03 0F               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   E5                     PUSH   hl   
404D   CD 0A 10               CALL   run   
4050   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
405B   76                     HALT      
405C                EXPECTM_3199S147:      
405C   E1                     POP   HL   
405D                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
405D   31 00 54               LD   SP,STACK   
4060   CD 37 0F               CALL   coldInit   
4063   CD 57 52               CALL   execStr   
4066   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
407A   E1                     POP   HL   
407B   E5                     PUSH   HL   
407C   11 0A 00               LD   DE,10   
407F   B7                     OR   A   
4080   ED 52                  SBC   HL,DE   
4082   7D                     LD   A,L   
4083   B4                     OR   H   
4084   CA E7 40               JP   Z,expectM_3200S148   
4087   CD 03 0F               CALL   printStr   
408A   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
40A4   CD 03 0F               CALL   printStr   
40A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40B6   21 0A 00               LD   hl,10   
40B9   E5                     PUSH   hl   
40BA   E5                     PUSH   hl   
40BB   CD 0A 10               CALL   run   
40BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40C5   CD 03 0F               CALL   printStr   
40C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40D5   E1                     POP   hl   
40D6   E5                     PUSH   hl   
40D7   E5                     PUSH   hl   
40D8   CD 0A 10               CALL   run   
40DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40E6   76                     HALT      
40E7                EXPECTM_3200S148:      
40E7   E1                     POP   HL   
40E8                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
40E8   31 00 54               LD   SP,STACK   
40EB   CD 37 0F               CALL   coldInit   
40EE   CD 57 52               CALL   execStr   
40F1   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
410C   E1                     POP   HL   
410D   E5                     PUSH   HL   
410E   11 0A 00               LD   DE,10   
4111   B7                     OR   A   
4112   ED 52                  SBC   HL,DE   
4114   7D                     LD   A,L   
4115   B4                     OR   H   
4116   CA 80 41               JP   Z,expectM_3201S149   
4119   CD 03 0F               CALL   printStr   
411C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
413D   CD 03 0F               CALL   printStr   
4140   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
414F   21 0A 00               LD   hl,10   
4152   E5                     PUSH   hl   
4153   E5                     PUSH   hl   
4154   CD 0A 10               CALL   run   
4157   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
415E   CD 03 0F               CALL   printStr   
4161   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
416E   E1                     POP   hl   
416F   E5                     PUSH   hl   
4170   E5                     PUSH   hl   
4171   CD 0A 10               CALL   run   
4174   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
417F   76                     HALT      
4180                EXPECTM_3201S149:      
4180   E1                     POP   HL   
4181                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
4181   31 00 54               LD   SP,STACK   
4184   CD 37 0F               CALL   coldInit   
4187   CD 57 52               CALL   execStr   
418A   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
41A9   E1                     POP   HL   
41AA   E5                     PUSH   HL   
41AB   11 0A 00               LD   DE,10   
41AE   B7                     OR   A   
41AF   ED 52                  SBC   HL,DE   
41B1   7D                     LD   A,L   
41B2   B4                     OR   H   
41B3   CA 21 42               JP   Z,expectM_3202S150   
41B6   CD 03 0F               CALL   printStr   
41B9   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
41DE   CD 03 0F               CALL   printStr   
41E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41F0   21 0A 00               LD   hl,10   
41F3   E5                     PUSH   hl   
41F4   E5                     PUSH   hl   
41F5   CD 0A 10               CALL   run   
41F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
41FF   CD 03 0F               CALL   printStr   
4202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
420F   E1                     POP   hl   
4210   E5                     PUSH   hl   
4211   E5                     PUSH   hl   
4212   CD 0A 10               CALL   run   
4215   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4220   76                     HALT      
4221                EXPECTM_3202S150:      
4221   E1                     POP   HL   
4222                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
4222   31 00 54               LD   SP,STACK   
4225   CD 37 0F               CALL   coldInit   
4228   CD 57 52               CALL   execStr   
422B   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
424A   E1                     POP   HL   
424B   E5                     PUSH   HL   
424C   11 14 00               LD   DE,20   
424F   B7                     OR   A   
4250   ED 52                  SBC   HL,DE   
4252   7D                     LD   A,L   
4253   B4                     OR   H   
4254   CA C2 42               JP   Z,expectM_3203S151   
4257   CD 03 0F               CALL   printStr   
425A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
427F   CD 03 0F               CALL   printStr   
4282   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4291   21 14 00               LD   hl,20   
4294   E5                     PUSH   hl   
4295   E5                     PUSH   hl   
4296   CD 0A 10               CALL   run   
4299   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42A0   CD 03 0F               CALL   printStr   
42A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B0   E1                     POP   hl   
42B1   E5                     PUSH   hl   
42B2   E5                     PUSH   hl   
42B3   CD 0A 10               CALL   run   
42B6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
42C1   76                     HALT      
42C2                EXPECTM_3203S151:      
42C2   E1                     POP   HL   
42C3                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
42C3   31 00 54               LD   SP,STACK   
42C6   CD 37 0F               CALL   coldInit   
42C9   CD 57 52               CALL   execStr   
42CC   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
42E4   E1                     POP   HL   
42E5   E5                     PUSH   HL   
42E6   11 06 00               LD   DE,6   
42E9   B7                     OR   A   
42EA   ED 52                  SBC   HL,DE   
42EC   7D                     LD   A,L   
42ED   B4                     OR   H   
42EE   CA 55 43               JP   Z,expectM_3204S152   
42F1   CD 03 0F               CALL   printStr   
42F4   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
4312   CD 03 0F               CALL   printStr   
4315   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4324   21 06 00               LD   hl,6   
4327   E5                     PUSH   hl   
4328   E5                     PUSH   hl   
4329   CD 0A 10               CALL   run   
432C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4333   CD 03 0F               CALL   printStr   
4336   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4343   E1                     POP   hl   
4344   E5                     PUSH   hl   
4345   E5                     PUSH   hl   
4346   CD 0A 10               CALL   run   
4349   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4354   76                     HALT      
4355                EXPECTM_3204S152:      
4355   E1                     POP   HL   
4356                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4356   31 00 54               LD   SP,STACK   
4359   CD 37 0F               CALL   coldInit   
435C   CD 57 52               CALL   execStr   
435F   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
437A   E1                     POP   HL   
437B   E5                     PUSH   HL   
437C   11 02 00               LD   DE,2   
437F   B7                     OR   A   
4380   ED 52                  SBC   HL,DE   
4382   7D                     LD   A,L   
4383   B4                     OR   H   
4384   CA EE 43               JP   Z,expectM_3205S153   
4387   CD 03 0F               CALL   printStr   
438A   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
43AB   CD 03 0F               CALL   printStr   
43AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43BD   21 02 00               LD   hl,2   
43C0   E5                     PUSH   hl   
43C1   E5                     PUSH   hl   
43C2   CD 0A 10               CALL   run   
43C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43CC   CD 03 0F               CALL   printStr   
43CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DC   E1                     POP   hl   
43DD   E5                     PUSH   hl   
43DE   E5                     PUSH   hl   
43DF   CD 0A 10               CALL   run   
43E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43ED   76                     HALT      
43EE                EXPECTM_3205S153:      
43EE   E1                     POP   HL   
43EF                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
43EF   31 00 54               LD   SP,STACK   
43F2   CD 37 0F               CALL   coldInit   
43F5   CD 57 52               CALL   execStr   
43F8   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
441E   E1                     POP   HL   
441F   E5                     PUSH   HL   
4420   11 0A 00               LD   DE,10   
4423   B7                     OR   A   
4424   ED 52                  SBC   HL,DE   
4426   7D                     LD   A,L   
4427   B4                     OR   H   
4428   CA 9D 44               JP   Z,expectM_3206S154   
442B   CD 03 0F               CALL   printStr   
442E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
445A   CD 03 0F               CALL   printStr   
445D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
446C   21 0A 00               LD   hl,10   
446F   E5                     PUSH   hl   
4470   E5                     PUSH   hl   
4471   CD 0A 10               CALL   run   
4474   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
447B   CD 03 0F               CALL   printStr   
447E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
448B   E1                     POP   hl   
448C   E5                     PUSH   hl   
448D   E5                     PUSH   hl   
448E   CD 0A 10               CALL   run   
4491   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
449C   76                     HALT      
449D                EXPECTM_3206S154:      
449D   E1                     POP   HL   
449E                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /br )^ j ", 10
449E   31 00 54               LD   SP,STACK   
44A1   CD 37 0F               CALL   coldInit   
44A4   CD 57 52               CALL   execStr   
44A7   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /br )^ j ",0   
44CA   E1                     POP   HL   
44CB   E5                     PUSH   HL   
44CC   11 0A 00               LD   DE,10   
44CF   B7                     OR   A   
44D0   ED 52                  SBC   HL,DE   
44D2   7D                     LD   A,L   
44D3   B4                     OR   H   
44D4   CA 46 45               JP   Z,expectM_3207S155   
44D7   CD 03 0F               CALL   printStr   
44DA   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /br )^ j "   
4503   CD 03 0F               CALL   printStr   
4506   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4515   21 0A 00               LD   hl,10   
4518   E5                     PUSH   hl   
4519   E5                     PUSH   hl   
451A   CD 0A 10               CALL   run   
451D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4524   CD 03 0F               CALL   printStr   
4527   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4534   E1                     POP   hl   
4535   E5                     PUSH   hl   
4536   E5                     PUSH   hl   
4537   CD 0A 10               CALL   run   
453A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4545   76                     HALT      
4546                EXPECTM_3207S155:      
4546   E1                     POP   HL   
4547                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t", 12
4547   31 00 54               LD   SP,STACK   
454A   CD 37 0F               CALL   coldInit   
454D   CD 57 52               CALL   execStr   
4550   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t",0   
457A   E1                     POP   HL   
457B   E5                     PUSH   HL   
457C   11 0C 00               LD   DE,12   
457F   B7                     OR   A   
4580   ED 52                  SBC   HL,DE   
4582   7D                     LD   A,L   
4583   B4                     OR   H   
4584   CA FD 45               JP   Z,expectM_3208S156   
4587   CD 03 0F               CALL   printStr   
458A   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t"   
45BA   CD 03 0F               CALL   printStr   
45BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45CC   21 0C 00               LD   hl,12   
45CF   E5                     PUSH   hl   
45D0   E5                     PUSH   hl   
45D1   CD 0A 10               CALL   run   
45D4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45DB   CD 03 0F               CALL   printStr   
45DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45EB   E1                     POP   hl   
45EC   E5                     PUSH   hl   
45ED   E5                     PUSH   hl   
45EE   CD 0A 10               CALL   run   
45F1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
45FC   76                     HALT      
45FD                EXPECTM_3208S156:      
45FD   E1                     POP   HL   
45FE                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
45FE   31 00 54               LD   SP,STACK   
4601   CD 37 0F               CALL   coldInit   
4604   CD 57 52               CALL   execStr   
4607   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4632   E1                     POP   HL   
4633   E5                     PUSH   HL   
4634   11 06 00               LD   DE,6   
4637   B7                     OR   A   
4638   ED 52                  SBC   HL,DE   
463A   7D                     LD   A,L   
463B   B4                     OR   H   
463C   CA B6 46               JP   Z,expectM_3209S157   
463F   CD 03 0F               CALL   printStr   
4642   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4673   CD 03 0F               CALL   printStr   
4676   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4685   21 06 00               LD   hl,6   
4688   E5                     PUSH   hl   
4689   E5                     PUSH   hl   
468A   CD 0A 10               CALL   run   
468D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4694   CD 03 0F               CALL   printStr   
4697   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46A4   E1                     POP   hl   
46A5   E5                     PUSH   hl   
46A6   E5                     PUSH   hl   
46A7   CD 0A 10               CALL   run   
46AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46B5   76                     HALT      
46B6                EXPECTM_3209S157:      
46B6   E1                     POP   HL   
46B7                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
46B7   31 00 54               LD   SP,STACK   
46BA   CD 37 0F               CALL   coldInit   
46BD   CD 57 52               CALL   execStr   
46C0   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
46D4   E1                     POP   HL   
46D5   E5                     PUSH   HL   
46D6   11 03 00               LD   DE,3   
46D9   B7                     OR   A   
46DA   ED 52                  SBC   HL,DE   
46DC   7D                     LD   A,L   
46DD   B4                     OR   H   
46DE   CA 41 47               JP   Z,expectM_3210S158   
46E1   CD 03 0F               CALL   printStr   
46E4   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
46FE   CD 03 0F               CALL   printStr   
4701   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4710   21 03 00               LD   hl,3   
4713   E5                     PUSH   hl   
4714   E5                     PUSH   hl   
4715   CD 0A 10               CALL   run   
4718   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
471F   CD 03 0F               CALL   printStr   
4722   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472F   E1                     POP   hl   
4730   E5                     PUSH   hl   
4731   E5                     PUSH   hl   
4732   CD 0A 10               CALL   run   
4735   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4740   76                     HALT      
4741                EXPECTM_3210S158:      
4741   E1                     POP   HL   
4742                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4742   31 00 54               LD   SP,STACK   
4745   CD 37 0F               CALL   coldInit   
4748   CD 57 52               CALL   execStr   
474B   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
475F   E1                     POP   HL   
4760   E5                     PUSH   HL   
4761   11 01 00               LD   DE,1   
4764   B7                     OR   A   
4765   ED 52                  SBC   HL,DE   
4767   7D                     LD   A,L   
4768   B4                     OR   H   
4769   CA CC 47               JP   Z,expectM_3211S159   
476C   CD 03 0F               CALL   printStr   
476F   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4789   CD 03 0F               CALL   printStr   
478C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
479B   21 01 00               LD   hl,1   
479E   E5                     PUSH   hl   
479F   E5                     PUSH   hl   
47A0   CD 0A 10               CALL   run   
47A3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47AA   CD 03 0F               CALL   printStr   
47AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BA   E1                     POP   hl   
47BB   E5                     PUSH   hl   
47BC   E5                     PUSH   hl   
47BD   CD 0A 10               CALL   run   
47C0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
47CB   76                     HALT      
47CC                EXPECTM_3211S159:      
47CC   E1                     POP   HL   
47CD                          ;*Macro unroll:  test "_A 1 - /ad", NUL
47CD   31 00 54               LD   SP,STACK   
47D0   CD 37 0F               CALL   coldInit   
47D3   CD 57 52               CALL   execStr   
47D6   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
47E1   E1                     POP   HL   
47E2   E5                     PUSH   HL   
47E3   11 00 00               LD   DE,NUL   
47E6   B7                     OR   A   
47E7   ED 52                  SBC   HL,DE   
47E9   7D                     LD   A,L   
47EA   B4                     OR   H   
47EB   CA 45 48               JP   Z,expectM_3212S160   
47EE   CD 03 0F               CALL   printStr   
47F1   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
4802   CD 03 0F               CALL   printStr   
4805   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4814   21 00 00               LD   hl,NUL   
4817   E5                     PUSH   hl   
4818   E5                     PUSH   hl   
4819   CD 0A 10               CALL   run   
481C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4823   CD 03 0F               CALL   printStr   
4826   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4833   E1                     POP   hl   
4834   E5                     PUSH   hl   
4835   E5                     PUSH   hl   
4836   CD 0A 10               CALL   run   
4839   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4844   76                     HALT      
4845                EXPECTM_3212S160:      
4845   E1                     POP   HL   
4846                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4846   31 00 54               LD   SP,STACK   
4849   CD 37 0F               CALL   coldInit   
484C   CD 57 52               CALL   execStr   
484F   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
485A   E1                     POP   HL   
485B   E5                     PUSH   HL   
485C   11 00 00               LD   DE,NUL   
485F   B7                     OR   A   
4860   ED 52                  SBC   HL,DE   
4862   7D                     LD   A,L   
4863   B4                     OR   H   
4864   CA BE 48               JP   Z,expectM_3213S161   
4867   CD 03 0F               CALL   printStr   
486A   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
487B   CD 03 0F               CALL   printStr   
487E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
488D   21 00 00               LD   hl,NUL   
4890   E5                     PUSH   hl   
4891   E5                     PUSH   hl   
4892   CD 0A 10               CALL   run   
4895   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
489C   CD 03 0F               CALL   printStr   
489F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48AC   E1                     POP   hl   
48AD   E5                     PUSH   hl   
48AE   E5                     PUSH   hl   
48AF   CD 0A 10               CALL   run   
48B2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48BD   76                     HALT      
48BE                EXPECTM_3213S161:      
48BE   E1                     POP   HL   
48BF                          ;*Macro unroll:  test "_a 1 - /ad", NUL
48BF   31 00 54               LD   SP,STACK   
48C2   CD 37 0F               CALL   coldInit   
48C5   CD 57 52               CALL   execStr   
48C8   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
48D3   E1                     POP   HL   
48D4   E5                     PUSH   HL   
48D5   11 00 00               LD   DE,NUL   
48D8   B7                     OR   A   
48D9   ED 52                  SBC   HL,DE   
48DB   7D                     LD   A,L   
48DC   B4                     OR   H   
48DD   CA 37 49               JP   Z,expectM_3214S162   
48E0   CD 03 0F               CALL   printStr   
48E3   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
48F4   CD 03 0F               CALL   printStr   
48F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4906   21 00 00               LD   hl,NUL   
4909   E5                     PUSH   hl   
490A   E5                     PUSH   hl   
490B   CD 0A 10               CALL   run   
490E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4915   CD 03 0F               CALL   printStr   
4918   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4925   E1                     POP   hl   
4926   E5                     PUSH   hl   
4927   E5                     PUSH   hl   
4928   CD 0A 10               CALL   run   
492B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4936   76                     HALT      
4937                EXPECTM_3214S162:      
4937   E1                     POP   HL   
4938                          ;*Macro unroll:  test "_z 1 + /ad", NUL
4938   31 00 54               LD   SP,STACK   
493B   CD 37 0F               CALL   coldInit   
493E   CD 57 52               CALL   execStr   
4941   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
494C   E1                     POP   HL   
494D   E5                     PUSH   HL   
494E   11 00 00               LD   DE,NUL   
4951   B7                     OR   A   
4952   ED 52                  SBC   HL,DE   
4954   7D                     LD   A,L   
4955   B4                     OR   H   
4956   CA B0 49               JP   Z,expectM_3215S163   
4959   CD 03 0F               CALL   printStr   
495C   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
496D   CD 03 0F               CALL   printStr   
4970   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
497F   21 00 00               LD   hl,NUL   
4982   E5                     PUSH   hl   
4983   E5                     PUSH   hl   
4984   CD 0A 10               CALL   run   
4987   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
498E   CD 03 0F               CALL   printStr   
4991   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
499E   E1                     POP   hl   
499F   E5                     PUSH   hl   
49A0   E5                     PUSH   hl   
49A1   CD 0A 10               CALL   run   
49A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
49AF   76                     HALT      
49B0                EXPECTM_3215S163:      
49B0   E1                     POP   HL   
49B1                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
49B1   31 00 54               LD   SP,STACK   
49B4   CD 37 0F               CALL   coldInit   
49B7   CD 57 52               CALL   execStr   
49BA   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
49C1   E1                     POP   HL   
49C2   E5                     PUSH   HL   
49C3   11 66 56               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49C6   B7                     OR   A   
49C7   ED 52                  SBC   HL,DE   
49C9   7D                     LD   A,L   
49CA   B4                     OR   H   
49CB   CA 21 4A               JP   Z,expectM_3216S164   
49CE   CD 03 0F               CALL   printStr   
49D1   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
49DE   CD 03 0F               CALL   printStr   
49E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F0   21 66 56               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49F3   E5                     PUSH   hl   
49F4   E5                     PUSH   hl   
49F5   CD 0A 10               CALL   run   
49F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
49FF   CD 03 0F               CALL   printStr   
4A02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0F   E1                     POP   hl   
4A10   E5                     PUSH   hl   
4A11   E5                     PUSH   hl   
4A12   CD 0A 10               CALL   run   
4A15   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A20   76                     HALT      
4A21                EXPECTM_3216S164:      
4A21   E1                     POP   HL   
4A22                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4A22   31 00 54               LD   SP,STACK   
4A25   CD 37 0F               CALL   coldInit   
4A28   CD 57 52               CALL   execStr   
4A2B   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4A32   E1                     POP   HL   
4A33   E5                     PUSH   HL   
4A34   11 34 56               LD   DE,VARS + ("Z"-"A"+1)*2   
4A37   B7                     OR   A   
4A38   ED 52                  SBC   HL,DE   
4A3A   7D                     LD   A,L   
4A3B   B4                     OR   H   
4A3C   CA 92 4A               JP   Z,expectM_3217S165   
4A3F   CD 03 0F               CALL   printStr   
4A42   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
4A4F   CD 03 0F               CALL   printStr   
4A52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A61   21 34 56               LD   hl,VARS + ("Z"-"A"+1)*2   
4A64   E5                     PUSH   hl   
4A65   E5                     PUSH   hl   
4A66   CD 0A 10               CALL   run   
4A69   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A70   CD 03 0F               CALL   printStr   
4A73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A80   E1                     POP   hl   
4A81   E5                     PUSH   hl   
4A82   E5                     PUSH   hl   
4A83   CD 0A 10               CALL   run   
4A86   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A91   76                     HALT      
4A92                EXPECTM_3217S165:      
4A92   E1                     POP   HL   
4A93                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4A93   31 00 54               LD   SP,STACK   
4A96   CD 37 0F               CALL   coldInit   
4A99   CD 57 52               CALL   execStr   
4A9C   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4AA3   E1                     POP   HL   
4AA4   E5                     PUSH   HL   
4AA5   11 32 56               LD   DE,VARS + ("Z"-"A")*2   
4AA8   B7                     OR   A   
4AA9   ED 52                  SBC   HL,DE   
4AAB   7D                     LD   A,L   
4AAC   B4                     OR   H   
4AAD   CA 03 4B               JP   Z,expectM_3218S166   
4AB0   CD 03 0F               CALL   printStr   
4AB3   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
4AC0   CD 03 0F               CALL   printStr   
4AC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AD2   21 32 56               LD   hl,VARS + ("Z"-"A")*2   
4AD5   E5                     PUSH   hl   
4AD6   E5                     PUSH   hl   
4AD7   CD 0A 10               CALL   run   
4ADA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AE1   CD 03 0F               CALL   printStr   
4AE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF1   E1                     POP   hl   
4AF2   E5                     PUSH   hl   
4AF3   E5                     PUSH   hl   
4AF4   CD 0A 10               CALL   run   
4AF7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B02   76                     HALT      
4B03                EXPECTM_3218S166:      
4B03   E1                     POP   HL   
4B04                          ;*Macro unroll:  test "_A /ad", VARS
4B04   31 00 54               LD   SP,STACK   
4B07   CD 37 0F               CALL   coldInit   
4B0A   CD 57 52               CALL   execStr   
4B0D   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4B14   E1                     POP   HL   
4B15   E5                     PUSH   HL   
4B16   11 00 56               LD   DE,VARS   
4B19   B7                     OR   A   
4B1A   ED 52                  SBC   HL,DE   
4B1C   7D                     LD   A,L   
4B1D   B4                     OR   H   
4B1E   CA 74 4B               JP   Z,expectM_3219S167   
4B21   CD 03 0F               CALL   printStr   
4B24   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4B31   CD 03 0F               CALL   printStr   
4B34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B43   21 00 56               LD   hl,VARS   
4B46   E5                     PUSH   hl   
4B47   E5                     PUSH   hl   
4B48   CD 0A 10               CALL   run   
4B4B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B52   CD 03 0F               CALL   printStr   
4B55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B62   E1                     POP   hl   
4B63   E5                     PUSH   hl   
4B64   E5                     PUSH   hl   
4B65   CD 0A 10               CALL   run   
4B68   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B73   76                     HALT      
4B74                EXPECTM_3219S167:      
4B74   E1                     POP   HL   
4B75                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4B75   31 00 54               LD   SP,STACK   
4B78   CD 37 0F               CALL   coldInit   
4B7B   CD 57 52               CALL   execStr   
4B7E   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4B8B   E1                     POP   HL   
4B8C   E5                     PUSH   HL   
4B8D   11 01 00               LD   DE,1   
4B90   B7                     OR   A   
4B91   ED 52                  SBC   HL,DE   
4B93   7D                     LD   A,L   
4B94   B4                     OR   H   
4B95   CA F1 4B               JP   Z,expectM_3220S168   
4B98   CD 03 0F               CALL   printStr   
4B9B   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4BAE   CD 03 0F               CALL   printStr   
4BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BC0   21 01 00               LD   hl,1   
4BC3   E5                     PUSH   hl   
4BC4   E5                     PUSH   hl   
4BC5   CD 0A 10               CALL   run   
4BC8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BCF   CD 03 0F               CALL   printStr   
4BD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BDF   E1                     POP   hl   
4BE0   E5                     PUSH   hl   
4BE1   E5                     PUSH   hl   
4BE2   CD 0A 10               CALL   run   
4BE5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4BF0   76                     HALT      
4BF1                EXPECTM_3220S168:      
4BF1   E1                     POP   HL   
4BF2                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4BF2   31 00 54               LD   SP,STACK   
4BF5   CD 37 0F               CALL   coldInit   
4BF8   CD 57 52               CALL   execStr   
4BFB   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4C0F   E1                     POP   HL   
4C10   E5                     PUSH   HL   
4C11   11 03 00               LD   DE,3   
4C14   B7                     OR   A   
4C15   ED 52                  SBC   HL,DE   
4C17   7D                     LD   A,L   
4C18   B4                     OR   H   
4C19   CA 7C 4C               JP   Z,expectM_3221S169   
4C1C   CD 03 0F               CALL   printStr   
4C1F   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4C39   CD 03 0F               CALL   printStr   
4C3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C4B   21 03 00               LD   hl,3   
4C4E   E5                     PUSH   hl   
4C4F   E5                     PUSH   hl   
4C50   CD 0A 10               CALL   run   
4C53   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C5A   CD 03 0F               CALL   printStr   
4C5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C6A   E1                     POP   hl   
4C6B   E5                     PUSH   hl   
4C6C   E5                     PUSH   hl   
4C6D   CD 0A 10               CALL   run   
4C70   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C7B   76                     HALT      
4C7C                EXPECTM_3221S169:      
4C7C   E1                     POP   HL   
4C7D                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4C7D   31 00 54               LD   SP,STACK   
4C80   CD 37 0F               CALL   coldInit   
4C83   CD 57 52               CALL   execStr   
4C86   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4C9D   E1                     POP   HL   
4C9E   E5                     PUSH   HL   
4C9F   11 02 00               LD   DE,2   
4CA2   B7                     OR   A   
4CA3   ED 52                  SBC   HL,DE   
4CA5   7D                     LD   A,L   
4CA6   B4                     OR   H   
4CA7   CA 0D 4D               JP   Z,expectM_3222S170   
4CAA   CD 03 0F               CALL   printStr   
4CAD   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4CCA   CD 03 0F               CALL   printStr   
4CCD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CDC   21 02 00               LD   hl,2   
4CDF   E5                     PUSH   hl   
4CE0   E5                     PUSH   hl   
4CE1   CD 0A 10               CALL   run   
4CE4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4CEB   CD 03 0F               CALL   printStr   
4CEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CFB   E1                     POP   hl   
4CFC   E5                     PUSH   hl   
4CFD   E5                     PUSH   hl   
4CFE   CD 0A 10               CALL   run   
4D01   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D0C   76                     HALT      
4D0D                EXPECTM_3222S170:      
4D0D   E1                     POP   HL   
4D0E                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4D0E   31 00 54               LD   SP,STACK   
4D11   CD 37 0F               CALL   coldInit   
4D14   CD 57 52               CALL   execStr   
4D17   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4D3A   E1                     POP   HL   
4D3B   E5                     PUSH   HL   
4D3C   11 01 00               LD   DE,1   
4D3F   B7                     OR   A   
4D40   ED 52                  SBC   HL,DE   
4D42   7D                     LD   A,L   
4D43   B4                     OR   H   
4D44   CA B6 4D               JP   Z,expectM_3223S171   
4D47   CD 03 0F               CALL   printStr   
4D4A   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4D73   CD 03 0F               CALL   printStr   
4D76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D85   21 01 00               LD   hl,1   
4D88   E5                     PUSH   hl   
4D89   E5                     PUSH   hl   
4D8A   CD 0A 10               CALL   run   
4D8D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4D94   CD 03 0F               CALL   printStr   
4D97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DA4   E1                     POP   hl   
4DA5   E5                     PUSH   hl   
4DA6   E5                     PUSH   hl   
4DA7   CD 0A 10               CALL   run   
4DAA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DB5   76                     HALT      
4DB6                EXPECTM_3223S171:      
4DB6   E1                     POP   HL   
4DB7                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4DB7   31 00 54               LD   SP,STACK   
4DBA   CD 37 0F               CALL   coldInit   
4DBD   CD 57 52               CALL   execStr   
4DC0   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4DE3   E1                     POP   HL   
4DE4   E5                     PUSH   HL   
4DE5   11 01 00               LD   DE,1   
4DE8   B7                     OR   A   
4DE9   ED 52                  SBC   HL,DE   
4DEB   7D                     LD   A,L   
4DEC   B4                     OR   H   
4DED   CA 5F 4E               JP   Z,expectM_3224S172   
4DF0   CD 03 0F               CALL   printStr   
4DF3   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4E1C   CD 03 0F               CALL   printStr   
4E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E2E   21 01 00               LD   hl,1   
4E31   E5                     PUSH   hl   
4E32   E5                     PUSH   hl   
4E33   CD 0A 10               CALL   run   
4E36   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4E3D   CD 03 0F               CALL   printStr   
4E40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E4D   E1                     POP   hl   
4E4E   E5                     PUSH   hl   
4E4F   E5                     PUSH   hl   
4E50   CD 0A 10               CALL   run   
4E53   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4E5E   76                     HALT      
4E5F                EXPECTM_3224S172:      
4E5F   E1                     POP   HL   
4E60                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4E60   31 00 54               LD   SP,STACK   
4E63   CD 37 0F               CALL   coldInit   
4E66   CD 57 52               CALL   execStr   
4E69   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4E99   E1                     POP   HL   
4E9A   E5                     PUSH   HL   
4E9B   11 02 00               LD   DE,2   
4E9E   B7                     OR   A   
4E9F   ED 52                  SBC   HL,DE   
4EA1   7D                     LD   A,L   
4EA2   B4                     OR   H   
4EA3   CA 22 4F               JP   Z,expectM_3225S173   
4EA6   CD 03 0F               CALL   printStr   
4EA9   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4EDF   CD 03 0F               CALL   printStr   
4EE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EF1   21 02 00               LD   hl,2   
4EF4   E5                     PUSH   hl   
4EF5   E5                     PUSH   hl   
4EF6   CD 0A 10               CALL   run   
4EF9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F00   CD 03 0F               CALL   printStr   
4F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F10   E1                     POP   hl   
4F11   E5                     PUSH   hl   
4F12   E5                     PUSH   hl   
4F13   CD 0A 10               CALL   run   
4F16   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F21   76                     HALT      
4F22                EXPECTM_3225S173:      
4F22   E1                     POP   HL   
4F23                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4F23   31 00 54               LD   SP,STACK   
4F26   CD 37 0F               CALL   coldInit   
4F29   CD 57 52               CALL   execStr   
4F2C   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4F41   E1                     POP   HL   
4F42   E5                     PUSH   HL   
4F43   11 02 00               LD   DE,2   
4F46   B7                     OR   A   
4F47   ED 52                  SBC   HL,DE   
4F49   7D                     LD   A,L   
4F4A   B4                     OR   H   
4F4B   CA AF 4F               JP   Z,expectM_3226S174   
4F4E   CD 03 0F               CALL   printStr   
4F51   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4F6C   CD 03 0F               CALL   printStr   
4F6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F7E   21 02 00               LD   hl,2   
4F81   E5                     PUSH   hl   
4F82   E5                     PUSH   hl   
4F83   CD 0A 10               CALL   run   
4F86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F8D   CD 03 0F               CALL   printStr   
4F90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F9D   E1                     POP   hl   
4F9E   E5                     PUSH   hl   
4F9F   E5                     PUSH   hl   
4FA0   CD 0A 10               CALL   run   
4FA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4FAE   76                     HALT      
4FAF                EXPECTM_3226S174:      
4FAF   E1                     POP   HL   
4FB0                          ;*Macro unroll:  test "'hello'/sl",5
4FB0   31 00 54               LD   SP,STACK   
4FB3   CD 37 0F               CALL   coldInit   
4FB6   CD 57 52               CALL   execStr   
4FB9   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4FC4   E1                     POP   HL   
4FC5   E5                     PUSH   HL   
4FC6   11 05 00               LD   DE,5   
4FC9   B7                     OR   A   
4FCA   ED 52                  SBC   HL,DE   
4FCC   7D                     LD   A,L   
4FCD   B4                     OR   H   
4FCE   CA 28 50               JP   Z,expectM_3227S175   
4FD1   CD 03 0F               CALL   printStr   
4FD4   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4FE5   CD 03 0F               CALL   printStr   
4FE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FF7   21 05 00               LD   hl,5   
4FFA   E5                     PUSH   hl   
4FFB   E5                     PUSH   hl   
4FFC   CD 0A 10               CALL   run   
4FFF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5006   CD 03 0F               CALL   printStr   
5009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5016   E1                     POP   hl   
5017   E5                     PUSH   hl   
5018   E5                     PUSH   hl   
5019   CD 0A 10               CALL   run   
501C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5027   76                     HALT      
5028                EXPECTM_3227S175:      
5028   E1                     POP   HL   
5029                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
5029   31 00 54               LD   SP,STACK   
502C   CD 37 0F               CALL   coldInit   
502F   CD 57 52               CALL   execStr   
5032   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
5045   E1                     POP   HL   
5046   E5                     PUSH   HL   
5047   11 00 00               LD   DE,false   
504A   B7                     OR   A   
504B   ED 52                  SBC   HL,DE   
504D   7D                     LD   A,L   
504E   B4                     OR   H   
504F   CA B1 50               JP   Z,expectM_3228S176   
5052   CD 03 0F               CALL   printStr   
5055   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
506E   CD 03 0F               CALL   printStr   
5071   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5080   21 00 00               LD   hl,false   
5083   E5                     PUSH   hl   
5084   E5                     PUSH   hl   
5085   CD 0A 10               CALL   run   
5088   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
508F   CD 03 0F               CALL   printStr   
5092   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
509F   E1                     POP   hl   
50A0   E5                     PUSH   hl   
50A1   E5                     PUSH   hl   
50A2   CD 0A 10               CALL   run   
50A5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
50B0   76                     HALT      
50B1                EXPECTM_3228S176:      
50B1   E1                     POP   HL   
50B2                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
50B2   31 00 54               LD   SP,STACK   
50B5   CD 37 0F               CALL   coldInit   
50B8   CD 57 52               CALL   execStr   
50BB   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
50CF   E1                     POP   HL   
50D0   E5                     PUSH   HL   
50D1   11 FF FF               LD   DE,true   
50D4   B7                     OR   A   
50D5   ED 52                  SBC   HL,DE   
50D7   7D                     LD   A,L   
50D8   B4                     OR   H   
50D9   CA 3C 51               JP   Z,expectM_3229S177   
50DC   CD 03 0F               CALL   printStr   
50DF   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
50F9   CD 03 0F               CALL   printStr   
50FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
510B   21 FF FF               LD   hl,true   
510E   E5                     PUSH   hl   
510F   E5                     PUSH   hl   
5110   CD 0A 10               CALL   run   
5113   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
511A   CD 03 0F               CALL   printStr   
511D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
512A   E1                     POP   hl   
512B   E5                     PUSH   hl   
512C   E5                     PUSH   hl   
512D   CD 0A 10               CALL   run   
5130   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
513B   76                     HALT      
513C                EXPECTM_3229S177:      
513C   E1                     POP   HL   
513D                          ;*Macro unroll:  test "[1 2 3]** + +", 6
513D   31 00 54               LD   SP,STACK   
5140   CD 37 0F               CALL   coldInit   
5143   CD 57 52               CALL   execStr   
5146   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
5154   E1                     POP   HL   
5155   E5                     PUSH   HL   
5156   11 06 00               LD   DE,6   
5159   B7                     OR   A   
515A   ED 52                  SBC   HL,DE   
515C   7D                     LD   A,L   
515D   B4                     OR   H   
515E   CA BB 51               JP   Z,expectM_3230S178   
5161   CD 03 0F               CALL   printStr   
5164   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
5178   CD 03 0F               CALL   printStr   
517B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
518A   21 06 00               LD   hl,6   
518D   E5                     PUSH   hl   
518E   E5                     PUSH   hl   
518F   CD 0A 10               CALL   run   
5192   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5199   CD 03 0F               CALL   printStr   
519C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51A9   E1                     POP   hl   
51AA   E5                     PUSH   hl   
51AB   E5                     PUSH   hl   
51AC   CD 0A 10               CALL   run   
51AF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
51BA   76                     HALT      
51BB                EXPECTM_3230S178:      
51BB   E1                     POP   HL   
51BC                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2#", $63
51BC   31 00 54               LD   SP,STACK   
51BF   CD 37 0F               CALL   coldInit   
51C2   CD 57 52               CALL   execStr   
51C5   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 DB   "/bm[_a [_b _c]** _d]2#",0   
51DC   E1                     POP   HL   
51DD   E5                     PUSH   HL   
51DE   11 63 00               LD   DE,$63   
51E1   B7                     OR   A   
51E2   ED 52                  SBC   HL,DE   
51E4   7D                     LD   A,L   
51E5   B4                     OR   H   
51E6   CA 4C 52               JP   Z,expectM_3231S179   
51E9   CD 03 0F               CALL   printStr   
51EC   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2#"   
5209   CD 03 0F               CALL   printStr   
520C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
521B   21 63 00               LD   hl,$63   
521E   E5                     PUSH   hl   
521F   E5                     PUSH   hl   
5220   CD 0A 10               CALL   run   
5223   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
522A   CD 03 0F               CALL   printStr   
522D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
523A   E1                     POP   hl   
523B   E5                     PUSH   hl   
523C   E5                     PUSH   hl   
523D   CD 0A 10               CALL   run   
5240   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
524B   76                     HALT      
524C                EXPECTM_3231S179:      
524C   E1                     POP   HL   
524D                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
524D                             ; 
524D   CD 03 0F               CALL   printStr   
5250   44 6F 6E 65 21 00      .CSTR   "Done!"   
5256   76                     HALT      
5257                             ; executes a null teminated string (null executes exit_)
5257                             ; the string should be immedaitely following the call
5257                EXECSTR:      ; create a root stack frame
5257   C1                     POP   bc   ; bc = code*
5258   0B                     DEC   bc   ; dec to prepare for next routine
5259   11 00 00               LD   de,0   
525C   D5                     PUSH   de   ; push fake IP
525D   D5                     PUSH   de   ; push null arg_list*
525E   D5                     PUSH   de   ; push null first_arg*
525F   D5                     PUSH   de   ; push fake BP
5260   DD E9                  JP   (ix)   
5262                STKSIZE:   EQU   $100   ; Stack size
5262                TIBSIZE:   EQU   $100   ; 256 bytes
5262                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5262                          ALIGN   $100   
5300                          DS   STKSIZE   
5400                STACK:       
5400                          ALIGN   $100   
5400                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5500                          ALIGN   $100   
5500                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5600                          ALIGN   $100   
5600                VARS:        
5600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
56D0                RESTARTS:      
56D0                RST08:    DS   2   
56D2                RST10:    DS   2   
56D4                RST18:    DS   2   
56D6                RST20:    DS   2   
56D8                RST28:    DS   2   
56DA                RST30:    DS   2   ; 
56DC                BAUD:     DS   2   ; 
56DE                INTVEC:   DS   2   ; 
56E0                NMIVEC:   DS   2   ; 
56E2                GETCVEC:   DS   2   ; 
56E4                PUTCVEC:   DS   2   ; 
56E6                SYSVARS:      
56E6                             ; initialised sys variables (preserved)
56E6                VDATAWIDTH:   DS   2   ; 
56E8                VNUMBASE:   DS   2   ; 
56EA                VTIBPTR:   DS   2   ; 
56EC                VBUFPTR:   DS   2   ; 
56EE                VNEXT:    DS   2   ; 
56F0                VHEAPPTR:   DS   2   ; 
56F2                VRECUR:   DS   2   ; 
56F4                VDEFINE:   DS   2   ; 
56F6                VSTRMODE:   DS   2   ; 
56F8                             ; uninitialised sys variables (preserved)
56F8                VPOINTER:   DS   2   ; 
56FA                VREMAIN:   DS   2   ; 
56FC                VSAVEDIP:   DS   2   ; 
56FE                VSAVEDSP:   DS   2   ; 
5700                VSAVEDNEXT:   DS   2   ; 
5702                VSAVEDBP:   DS   2   ; 
5704                             ; uninitialised sys variables (unpreserved)
5704                VTEMP1:   DS   2   ; 
5706                VTEMP2:   DS   2   ; 
5708                VTEMP3:   DS   2   ; 
570A                VLASTDEF:   DS   2   ; 
570C                TBPTR:    DS   2   ; reserved for tests
570E                TITLEBUF:   DS   20   
5722                HEAP:        
5722                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5722                             ; db "{"
5722                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt:a{"                   ; return talkback to receive data
5722                             ; db        "%L1#!/qt"                ; if not active don't send
5722                             ; db        "%L0# %a="                ; store current index in A
5722                             ; db        "%s %L0# +="              ; inc value of index by step
5722                             ; db        "1%t!=/qt"                ; break if type != 0
5722                             ; db        "%a %e <"                 ; ifte: in range?
5722                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5722                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
5722                             ; db      "} 0 %k^"                   ; init sink
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC map, 0, "sf"                   ; map
5722                             ; db "{"
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "1%t=="                   ; ifte: type == 1 ?
5722                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5722                             ; db        "?? %t %k^"               ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; ; /ft filter
5722                             ; ; src pred -- src1
5722                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\kt{"                       ; return talkback to receive data
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "["
5722                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5722                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5722                             ; db          "{/t}"                  ; case 2: return true
5722                             ; db        "]%t#^"                   ; select on %t
5722                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5722                             ; db        "??"
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC forEach, 1, "spT"
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5722                             ; db      "2%t==/qt"                    ; if type == 2 skip
5722                             ; db      "0%t=="                   ; ifte: type = 0 ?
5722                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5722                             ; db      "??"                      ; ifte:
5722                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5722                             ; db    "} 0 %s^"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5722                             ; db "{"                                  ; reducer: \\da00bbLi4u
5722                             ; db    "[%i]%A="
5722                             ; db    "\\kt{"                         ; return talkback to receive data
5722                             ; db      "\\dt{"                         ; call source with tb
5722                             ; db        "1%t=="                       ; ifte: type == 1 ?
5722                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5722                             ; db        "?? %t %k^"                    ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 198 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 201 IN MAIN.asm
BANG:               021E DEFINED AT LINE 202 IN MAIN.asm
NOT:                0229 DEFINED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
EQ_:                022F DEFINED AT LINE 214 IN MAIN.asm
EQ:                 022F DEFINED AT LINE 215 IN MAIN.asm
EQ0:                0239 DEFINED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
EQ1:                023A DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
GT_:                023E DEFINED AT LINE 228 IN MAIN.asm
GT:                 023E DEFINED AT LINE 229 IN MAIN.asm
LT_:                0249 DEFINED AT LINE 237 IN MAIN.asm
LT:                 0249 DEFINED AT LINE 238 IN MAIN.asm
LT1:                0252 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
HASH_:              025B DEFINED AT LINE 253 IN MAIN.asm
HASH:               025B DEFINED AT LINE 254 IN MAIN.asm
ARRAYINDEX:         025B DEFINED AT LINE 255 IN MAIN.asm
ARRAYINDEX0:        0263 DEFINED AT LINE 261 IN MAIN.asm
ARRAYINDEX1:        0264 DEFINED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
ARRAYINDEX2:        0270 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             027B DEFINED AT LINE 287 IN MAIN.asm
AMPER:              027B DEFINED AT LINE 288 IN MAIN.asm
AND:                027B DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             0285 DEFINED AT LINE 307 IN MAIN.asm
MINUS:              0285 DEFINED AT LINE 308 IN MAIN.asm
SUB:                0291 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               029B DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               02A2 DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               02A5 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
STAR_:              02AD DEFINED AT LINE 338 IN MAIN.asm
STAR:               02AD DEFINED AT LINE 339 IN MAIN.asm
MUL:                02B5 DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02B7 DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02BF DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02D1 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02D1 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02D1 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02DC DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02E0 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
ADD4:               02EA DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
COLON_:             02ED DEFINED AT LINE 394 IN MAIN.asm
UPCASE_:            02F0 DEFINED AT LINE 398 IN MAIN.asm
UPCASE:             02F0 DEFINED AT LINE 399 IN MAIN.asm
SEMICOLON_:         02F5 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 413 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 414 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 430 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 431 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 432 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 447 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 448 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 449 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 469 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 470 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 471 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 523 IN MAIN.asm
CARET:              039F DEFINED AT LINE 527 IN MAIN.asm
GO:                 039F DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 544 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 545 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 561 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 568 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 569 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 570 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 585 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 588 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 589 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 597 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 598 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 599 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 611 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 781 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 782 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 783 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 792 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 828 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 842 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 852 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 858 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 878 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 885 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 891 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 895 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 901 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 905 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 910 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 926 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 942 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 946 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 962 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 968 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 973 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 978 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
PERFORMM_1544S1066: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
BYTEMODE1:          0654 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMENT:            0659 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
CONSTHEAPSTART:     0662 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
CONSTTIBSTART:      0668 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
CONSTBUFSTART:      066E DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
DECBASE:            0674 DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
DECBASE1:           0677 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
ERROR1:             067C DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
HEXBASE:            0682 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
INPUT:              0688 DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
KEY:                0693 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
OUTPUT:             069C DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
QUIT:               06A5 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
QUIT1:              06AC DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
RECUR:              06AF DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
REMAIN:             06B5 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
STRINGBEGIN:        06BB DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
STRINGEND:          06C3 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
STRINGEND1:         06EA DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
STRINGLENGTH:       06F2 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F8 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
STRINGLENGTH2:      06FA DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
STRINGLENGTH3:      06FE DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
STRINGSIZE:         0701 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
PERFORMM_1692S1234: 0708 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      070D DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
STRINGCOMPARE1:     070F DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
STRINGCOMPARE2:     071A DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGCOMPARE3:     071F DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE4:     0722 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
VARBUFPTR:          0725 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
VARHEAPPTR:         072E DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VARTIBPTR:          0737 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARIABLE:           0740 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
CONSTANT:           0743 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
WORDMODE:           0746 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
XOR:                074C DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
XOR1:               074D DEFINED AT LINE 1292 IN MAIN.asm
RANGESRC:           0757 DEFINED AT LINE 32
                    > USED AT LINE 922 IN MAIN.asm
RANGESRCM_1757S1308: 0766 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07EB DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
ARRAYITERM_1776S1328: 07F8 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         086C DEFINED AT LINE 32
                    > USED AT LINE 934 IN MAIN.asm
STRINGITERM_1795S1348: 0879 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08F4 DEFINED AT LINE 32
                    > USED AT LINE 897 IN MAIN.asm
MAPM_1815S1370:     0901 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0936 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FILTERM_1829S1385:  0944 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0994 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
FOLDM_1848S1405:    09A3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09E6 DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
FOREACHM_1862S1420: 09F4 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A32 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FUNCSRCM_1876S1435: 0A3E DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A6B DEFINED AT LINE 32
                    > USED AT LINE 614 IN MAIN.asm
PRINTARRAYM_1886S1446: 0A79 DEFINED AT LINE 39
                    > USED AT LINE 35
COLON:              0AB3 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
DEFINESTART:        0AC0 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
SEMICOLON:          0AC9 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
DEFINEEND:          0AC9 DEFINED AT LINE 1471 IN MAIN.asm
DEFINEEND1:         0ADB DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
TILDE:              0ADD DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
INVERT:             0ADD DEFINED AT LINE 1485 IN MAIN.asm
DOLLAR:             0AE7 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0AE7 DEFINED AT LINE 1497 IN MAIN.asm
HEXNUM1:            0AEA DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
HEXNUM2:            0AF2 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
QUESTION:           0B04 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0B04 DEFINED AT LINE 1521 IN MAIN.asm
IFTE:               0B10 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
IFTE1:              0B11 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
QUOTE:              0B1D DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0B1D DEFINED AT LINE 1547 IN MAIN.asm
STRING1:            0B26 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
STRING2:            0B29 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
STRING3:            0B2F DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
PERCENT:            0B37 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B37 DEFINED AT LINE 1574 IN MAIN.asm
ARG0:               0B53 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
ARG0A:              0B5C DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
ARG1:               0B61 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
ARG1A:              0B69 DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
NUM:                0B6C DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
NUM0:               0B75 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
NUM1:               0B76 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
NUM2:               0B8E DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
NUM3:               0B99 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
RBRACE:             0B9C DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0B9C DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
BLOCKEND1:          0BCE DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
BLOCKEND2:          0BDA DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
BLOCKEND3:          0BEC DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
BLOCKEND4:          0C00 DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
GOBLOCK:            0C09 DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GOBLOCK2:           0C2E DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
GOBLOCK3:           0C38 DEFINED AT LINE 1737 IN MAIN.asm
GOFUNC:             0C3C DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOFUNC1:            0C55 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
GOFUNC2:            0C5B DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
GOFUNC3:            0C66 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
GOFUNC4:            0C7E DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOFUNC5:            0C81 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
GOFUNC6:            0C84 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
GOFUNC7:            0C87 DEFINED AT LINE 1800 IN MAIN.asm
GOFUNC8:            0C8B DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
ASSIGN:             0C96 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
ASSIGN0:            0C98 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0C9C DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
ASSIGN2:            0CA5 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
EQUALS:             0CA7 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
NOTEQUALS:          0CAE DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
LESSTHANEQ:         0CB5 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
LESSTHAN:           0CBA DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
LESSTHAN1:          0CBF DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
TRUE1:              0CC2 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
NULL1:              0CC8 DEFINED AT LINE 1867 IN MAIN.asm
FALSE1:             0CC8 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
SPREAD:             0CCE DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0CDB DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
SPREAD2:            0CE6 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
SPREAD3:            0CE8 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
SHIFTLEFT:          0CF2 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT1:         0CFA DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
SHIFTLEFT2:         0CFB DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SHIFTRIGHT:         0D02 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
SHIFTRIGHT1:        0D0A DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
SHIFTRIGHT2:        0D0E DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
DIVIDE:             0D15 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DIVIDE1:            0D1A DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
DIVIDE2:            0D27 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
DIVIDE3:            0D28 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
DOTNEXT:            0D2E DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTNEXT1:           0D36 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PARSEARGS:          0D48 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
PARSEARGS1:         0D52 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEARGS1A:        0D5A DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
PARSEARGS2:         0D62 DEFINED AT LINE 1993 IN MAIN.asm
PARSEARGS3:         0D6A DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
PARSEARGS4:         0D6D DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
PARSEARGS5:         0D73 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PARSEBLOCK:         0D7E DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PARSEBLOCK1:        0D82 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEBLOCK2:        0DAE DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
PARSEBLOCK3:        0DB1 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
PARSEBLOCK4:        0DB9 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
PARSEBLOCK5:        0DBC DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEBLOCK6:        0DE4 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
CREATEFUNC:         0DE8 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
CREATEFUNC0:        0E07 DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
CREATEFUNC1:        0E1F DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
CREATEFUNC2:        0E32 DEFINED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CREATEFUNC2A:       0E51 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
CREATEFUNC3:        0E60 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
CREATEFUNC4:        0E6B DEFINED AT LINE 2188 IN MAIN.asm
CREATEFUNC5:        0E6C DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
LOWERCASETABLE:     0E8A DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
LOWERCASETABLE1:    0E94 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
LOWERCASETABLE2:    0E9B DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
COMMANDTABLE:       0EA0 DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
COMMANDTABLE1:      0EA1 DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
COMMANDTABLE2:      0EA2 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
COMMANDTABLE3:      0EA9 DEFINED AT LINE 2252 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
COMMANDTABLE4:      0EB2 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
PUTSTR0:            0EB8 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
PUTSTR:             0EBC DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
NESTING:            0EC1 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
NESTING0:           0ECB DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
NESTING1A:          0ED2 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
NESTING1:           0ED5 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
NESTING2:           0EE4 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
NESTING3:           0EE6 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
NESTING4:           0EF1 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
PROMPT:             0EF3 DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
CRLF:               0EFC DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
PRINTSTR:           0F03 DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 44
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 185
INIT:               0F0A DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
INIT1:              0F12 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
WARMINIT:           0F1A DEFINED AT LINE 2355 IN MAIN.asm
COLDBOOT0:          0F2D DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
COLDINIT:           0F37 DEFINED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0F48 DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
COLDSTART:          0F55 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
START:              0F5E DEFINED AT LINE 2390 IN MAIN.asm
START1:             0F64 DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
INTERPRET:          0F6A DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
INTERPRET2:         0F76 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
INTERPRET3:         0F7E DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
INTERPRET4:         0F89 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
INTERPRET5:         0F8E DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET5A:        0FAC DEFINED AT LINE 2466 IN MAIN.asm
INTERPRET6:         0FAE DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
INTERPRET7:         0FBC DEFINED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
INTERPRET8:         0FCF DEFINED AT LINE 2496 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
NEXT:               0FEA DEFINED AT LINE 2509 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
NEXT0:              0FFE DEFINED AT LINE 2523 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
NEXT1:              0FFF DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
EXIT:               1006 DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
RUN:                100A DEFINED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              100E DEFINED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BACKSPACE_:         1020 DEFINED AT LINE 2546 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
EDIT_:              1030 DEFINED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
REEDIT_:            1033 DEFINED AT LINE 2559 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
F1:                 1036 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F1M_3073S12:        1041 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1042 DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F2M_3075S15:        104D DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 104E DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
F3M_3077S18:        1059 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 105A DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F4M_3079S21:        1065 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3096S43:    1186 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S48:    11F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S49:    1262 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S50:    12C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S51:    1330 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S52:    1397 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S53:    13FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S54:    1467 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S55:    14D2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S56:    153B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S57:    15AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S58:    1613 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S59:    167C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S60:    16E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S61:    1752 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S62:    17C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S63:    1834 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S64:    18A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S65:    1916 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S66:    198D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S67:    1A02 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S68:    1A71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S69:    1AE8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S70:    1B5B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S71:    1BCA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S72:    1C39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S73:    1CB0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S74:    1D1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S75:    1D8E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S76:    1DFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S77:    1E80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S78:    1EEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S79:    1F56 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S80:    1FC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S81:    2030 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S82:    209F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S83:    2116 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S84:    2185 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S85:    2202 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S86:    227F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S87:    22FC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S88:    237B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S89:    23FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S90:    2481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S91:    2504 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S92:    2587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S93:    2608 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S94:    2689 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S95:    270E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S96:    277F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S97:    27FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S98:    2875 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S99:    28E4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S100:   2955 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S101:   29C6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S102:   2A35 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S103:   2AA4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S104:   2B13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S105:   2B82 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S106:   2BF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S107:   2C60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S108:   2CCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S109:   2D3E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S110:   2DAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S111:   2E20 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S112:   2E91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S113:   2F04 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S114:   2F77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S115:   2FE4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S116:   3051 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S117:   30C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S118:   313D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S119:   31B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S120:   3233 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S121:   32BA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S122:   3341 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S123:   33B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S124:   3421 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S125:   3498 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S126:   3513 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S127:   358A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S128:   360B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S129:   368E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S130:   3717 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S131:   37A4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S132:   3823 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S133:   38A8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S134:   392F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S135:   39B8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S136:   3A3F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S137:   3AD4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S138:   3B57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S139:   3BE8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S140:   3C7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S141:   3D10 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S142:   3DAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S143:   3E4E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S144:   3ECD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S145:   3F54 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S146:   3FD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S147:   405C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S148:   40E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S149:   4180 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S150:   4221 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S151:   42C2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S152:   4355 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S153:   43EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S154:   449D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S155:   4546 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S156:   45FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S157:   46B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S158:   4741 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S159:   47CC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S160:   4845 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S161:   48BE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3214S162:   4937 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3215S163:   49B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3216S164:   4A21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3217S165:   4A92 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3218S166:   4B03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3219S167:   4B74 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3220S168:   4BF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3221S169:   4C7C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3222S170:   4D0D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3223S171:   4DB6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3224S172:   4E5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3225S173:   4F22 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3226S174:   4FAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3227S175:   5028 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3228S176:   50B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3229S177:   513C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3230S178:   51BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3231S179:   524C DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5257 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5400 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5400 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
BUFFER:             5500 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
VARS:               5600 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           56D0 DEFINED AT LINE 18 IN ram.asm
RST08:              56D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              56D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              56D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              56D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              56D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              56DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               56DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             56DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             56E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            56E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            56E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            56E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2370 IN MAIN.asm
VDATAWIDTH:         56E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
VNUMBASE:           56E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
VTIBPTR:            56EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
VBUFPTR:            56EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
VNEXT:              56EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2382 IN MAIN.asm
VHEAPPTR:           56F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
VRECUR:             56F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
VDEFINE:            56F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
VSTRMODE:           56F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
VPOINTER:           56F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
VREMAIN:            56FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
VSAVEDIP:           56FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
VSAVEDSP:           56FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
VSAVEDNEXT:         5700 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
VSAVEDBP:           5702 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
VTEMP1:             5704 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
VTEMP2:             5706 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VTEMP3:             5708 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
VLASTDEF:           570A DEFINED AT LINE 61 IN ram.asm
TBPTR:              570C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           570E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
HEAP:               5722 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
