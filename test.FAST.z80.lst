0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD A1 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   2C 09                  DW   next   ; g nNext
0186   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ; DEL
0220   A8                     DB   lsb(nop_)   ; SP
0221   45                     DB   lsb(not_)   ; !
0222   56                     DB   lsb(string_)   ; "
0223   4D                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   1B                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   24                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A8                     DB   lsb(nop_)   ; )
022A   42                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   18                     DB   lsb(arrItem_)   ; ,
022D   59                     DB   lsb(sub_)   ; -
022E   2A                     DB   lsb(dot_)   ; .
022F   99                     DB   lsb(div_)   ; /	
0230   4A                     DB   lsb(num_)   ; 0
0231   4A                     DB   lsb(num_)   ; 1
0232   4A                     DB   lsb(num_)   ; 2
0233   4A                     DB   lsb(num_)   ; 3
0234   4A                     DB   lsb(num_)   ; 4
0235   4A                     DB   lsb(num_)   ; 5
0236   4A                     DB   lsb(num_)   ; 6
0237   4A                     DB   lsb(num_)   ; 7
0238   4A                     DB   lsb(num_)   ; 8
0239   4A                     DB   lsb(num_)   ; 9
023A   30                     DB   lsb(go_)   ; :
023B   A8                     DB   lsb(nop_)   ; ;
023C   87                     DB   lsb(lt_)   ; <
023D   6D                     DB   lsb(eq_)   ; =
023E   7C                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   33                     DB   lsb(identU_)   ; A
0242   33                     DB   lsb(identU_)   ; B
0243   33                     DB   lsb(identU_)   ; C
0244   33                     DB   lsb(identU_)   ; D
0245   33                     DB   lsb(identU_)   ; E
0246   33                     DB   lsb(identU_)   ; F
0247   33                     DB   lsb(identU_)   ; G
0248   33                     DB   lsb(identU_)   ; h
0249   33                     DB   lsb(identU_)   ; I
024A   33                     DB   lsb(identU_)   ; J
024B   33                     DB   lsb(identU_)   ; K
024C   33                     DB   lsb(identU_)   ; L
024D   33                     DB   lsb(identU_)   ; M
024E   33                     DB   lsb(identU_)   ; N
024F   33                     DB   lsb(identU_)   ; O
0250   33                     DB   lsb(identU_)   ; p
0251   33                     DB   lsb(identU_)   ; Q
0252   33                     DB   lsb(identU_)   ; R
0253   33                     DB   lsb(identU_)   ; S
0254   33                     DB   lsb(identU_)   ; T
0255   33                     DB   lsb(identU_)   ; U
0256   33                     DB   lsb(identU_)   ; V
0257   33                     DB   lsb(identU_)   ; W
0258   33                     DB   lsb(identU_)   ; X
0259   33                     DB   lsb(identU_)   ; Y
025A   33                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   27                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   53                     DB   lsb(xor_)   ; ^
025F   2D                     DB   lsb(remain_)   ; _
0260   56                     DB   lsb(string_)   ; `     used for testing string   	
0261   36                     DB   lsb(identL_)   ; a
0262   36                     DB   lsb(identL_)   ; b
0263   36                     DB   lsb(identL_)   ; c
0264   36                     DB   lsb(identL_)   ; d
0265   36                     DB   lsb(identL_)   ; e
0266   36                     DB   lsb(identL_)   ; f
0267   36                     DB   lsb(identL_)   ; g
0268   36                     DB   lsb(identL_)   ; h
0269   36                     DB   lsb(identL_)   ; i
026A   36                     DB   lsb(identL_)   ; j
026B   36                     DB   lsb(identL_)   ; k
026C   36                     DB   lsb(identL_)   ; l
026D   36                     DB   lsb(identL_)   ; m
026E   36                     DB   lsb(identL_)   ; n
026F   36                     DB   lsb(identL_)   ; o
0270   36                     DB   lsb(identL_)   ; p
0271   36                     DB   lsb(identL_)   ; q
0272   36                     DB   lsb(identL_)   ; r
0273   36                     DB   lsb(identL_)   ; s
0274   36                     DB   lsb(identL_)   ; t
0275   36                     DB   lsb(identL_)   ; u
0276   36                     DB   lsb(identL_)   ; v
0277   36                     DB   lsb(identL_)   ; w
0278   36                     DB   lsb(identL_)   ; x
0279   36                     DB   lsb(identL_)   ; y
027A   36                     DB   lsb(identL_)   ; z
027B   1E                     DB   lsb(block_)   ; {
027C   50                     DB   lsb(or_)   ; |
027D   21                     DB   lsb(blockEnd_)   ; }
027E   3C                     DB   lsb(inv_)   ; ~
027F   A8                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 B7 03               JP   addr   
0309                AND_:        
0309   C3 C3 03               JP   and   
030C                ARG_:        
030C   C3 E0 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 17 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 49 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 54 04               JP   arrEnd   
0318                ARRITEM_:      
0318   C3 69 04               JP   arrItem   
031B                             ; addr index -- addr2
031B                ARRINDEX_:      
031B   C3 7C 04               JP   arrIndex   
031E                BLOCK_:      
031E   C3 A4 04               JP   block   
0321                BLOCKEND_:      
0321   C3 E5 04               JP   blockend   
0324                CHAR_:       
0324   C3 3E 05               JP   char   
0327                COMMAND_:      
0327   C3 53 05               JP   command   
032A                DOT_:        
032A   C3 9F 05               JP   dot   
032D                REMAIN_:      
032D   C3 EA 05               JP   remain   
0330                GO_:         
0330   C3 44 06               JP   go   
0333                IDENTU_:      
0333   C3 C8 06               JP   identU   
0336                IDENTL_:      
0336   C3 CD 06               JP   identL   
0339                IF_:         
0339   C3 DF 06               JP   if   
033C                INV_:        ; Bitwise INVert the top member of the stack
033C   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033F   C3 D8 03               JP   xor1   
0342                MUL_:        
0342   C3 0C 07               JP   mul   
0345                NOT_:        ; logical invert, any non zero value
0345   21 00 00               LD   hl,0   ; is considered true
0348   18 2E                  JR   eq1   
034A                NUM_:        
034A   C3 28 07               JP   num   
034D                HEXNUM_:      
034D   C3 AB 06               JP   hexnum   
0350                OR_:         
0350   C3 CE 03               JP   or   
0353                XOR_:        
0353   C3 D7 03               JP   xor   
0356                STRING_:      
0356   C3 86 07               JP   string   
0359                SUB_:        ; negative sign or subtract
0359   03                     INC   bc   ; check if sign of a number
035A   0A                     LD   a,(bc)   
035B   0B                     DEC   bc   
035C   FE 30                  CP   "0"   
035E   38 05                  JR   c,sub1   
0360   FE 3A                  CP   "9"+1   
0362   DA 4A 03               JP   c,num_   
0365                SUB1:        ; Subtract the value 2nd on stack from top of stack
0365   D1                     POP   de   
0366   E1                     POP   hl   ; Entry point for INVert
0367                SUB2:        
0367   B7                     OR   a   ; Entry point for NEGate
0368   ED 52                  SBC   hl,de   
036A   E5                     PUSH   hl   
036B   DD E9                  JP   (ix)   
036D                EQ_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   ; is it == ?
036F   FE 3D                  CP   "="   
0371   28 04                  JR   z,eq0   ; no its equality
0373   0B                     DEC   bc   
0374   C3 94 04               JP   assign   ; no its assignment
0377                EQ0:         
0377   E1                     POP   hl   
0378                EQ1:         
0378   D1                     POP   de   
0379   C3 C9 05               JP   equals   
037C                GT_:         
037C   03                     INC   bc   
037D   0A                     LD   a,(bc)   
037E   FE 3E                  CP   ">"   
0380   CA 73 07               JP   z,shiftRight   
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   18 09                  JR   lt1   
0387                LT_:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 3C                  CP   "<"   
038B   CA 63 07               JP   z,shiftLeft   
038E   E1                     POP   hl   
038F   D1                     POP   de   
0390                LT1:         
0390   FE 3D                  CP   "="   
0392   CA D1 05               JP   z,lessthaneq   
0395   0B                     DEC   bc   
0396   C3 D6 05               JP   lessthan   
0399                DIV_:        
0399   D1                     POP   de   ; get first value
039A   E1                     POP   hl   ; get 2nd value
039B   C5                     PUSH   bc   ; preserve the IP
039C   44 4D                  LD   bc,hl   
039E   CD C2 07               CALL   divide   
03A1   22 F4 19               LD   (vRemain),hl   
03A4   C1                     POP   bc   
03A5   D5                     PUSH   de   ; push result
03A6   DD E9                  JP   (ix)   
03A8                NOP_:        
03A8   DD E9                  JP   (ix)   
03AA                             ;*******************************************************************
03AA                             ; word operators
03AA                             ;*******************************************************************
03AA                ABS1:        
03AA   E1                     POP   hl   
03AB   CB 7C                  BIT   7,h   
03AD   C8                     RET   z   
03AE   AF                     XOR   a   
03AF   95                     SUB   l   
03B0   6F                     LD   l,a   
03B1   9F                     SBC   a,a   
03B2   94                     SUB   h   
03B3   67                     LD   h,a   
03B4   E5                     PUSH   hl   
03B5   DD E9                  JP   (ix)   
03B7                             ; -- ptr
03B7                ADDR:        
03B7   2A EE 19               LD   hl,(vPointer)   
03BA   E5                     PUSH   hl   
03BB   21 EE 19               LD   hl,vPointer   
03BE   22 EE 19               LD   (vPointer),hl   
03C1   DD E9                  JP   (ix)   
03C3                AND:         
03C3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03C4   E1                     POP   hl   
03C5   7B                     LD   a,e   
03C6   A5                     AND   l   
03C7   6F                     LD   l,a   
03C8   7A                     LD   a,d   
03C9   A4                     AND   h   
03CA                AND1:        
03CA   67                     LD   h,a   
03CB   E5                     PUSH   hl   
03CC   DD E9                  JP   (ix)   
03CE                OR:          
03CE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03CF   E1                     POP   hl   
03D0   7B                     LD   a,e   
03D1   B5                     OR   l   
03D2   6F                     LD   l,a   
03D3   7A                     LD   a,d   
03D4   B4                     OR   h   
03D5   18 F3                  JR   and1   
03D7                XOR:         
03D7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D8                XOR1:        
03D8   E1                     POP   hl   
03D9   7B                     LD   a,e   
03DA   AD                     XOR   l   
03DB   6F                     LD   l,a   
03DC   7A                     LD   a,d   
03DD   AC                     XOR   h   
03DE   18 EA                  JR   and1   
03E0                             ; $a .. $z
03E0                             ; -- value
03E0                             ; returns value of arg
03E0                ARG:         
03E0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03E3   FD 56 05               LD   d,(iy+5)   
03E6   EB                     EX   de,hl   
03E7   7D                     LD   a,l   ; arg_list* == null, skip
03E8   B4                     OR   h   
03E9   28 1C                  JR   z,arg0a   
03EB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03EC   2B                     DEC   hl   
03ED   7E                     LD   a,(hl)   
03EE   23                     INC   hl   
03EF   23                     INC   hl   
03F0   B7                     OR   a   
03F1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03F3   5F                     LD   e,a   ; e = a = num_args
03F4   03                     INC   bc   ; a = next char = arg_name
03F5   0A                     LD   a,(bc)   
03F6   C5                     PUSH   bc   ; save IP
03F7   43                     LD   b,e   ; b = e = num_args
03F8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03FB   FD 56 03               LD   d,(iy+3)   
03FE                ARG0:        
03FE   1B                     DEC   de   ; a = arg_name, de = next arg*
03FF   1B                     DEC   de   
0400   BE                     CP   (hl)   
0401   28 09                  JR   z,arg1   
0403   23                     INC   hl   ; hl = next arg_list*
0404   10 F8                  DJNZ   arg0   
0406   C1                     POP   bc   ; no match, restore IP
0407                ARG0A:       
0407   11 00 00               LD   de,0   ; return 0
040A   18 08                  JR   arg1a   
040C                ARG1:        
040C   C1                     POP   bc   ; restore IP
040D   EB                     EX   de,hl   ; hl = arg*
040E   22 EE 19               LD   (vPointer),hl   ; store arg* in setter
0411   5E                     LD   e,(hl)   
0412   23                     INC   hl   
0413   56                     LD   d,(hl)   ; de = arg
0414                ARG1A:       
0414   D5                     PUSH   de   ; push arg
0415   DD E9                  JP   (ix)   
0417                             ; arg_list - parses input (ab:c)
0417                             ; names after the : represent uninitialised locals
0417                             ; return values are the state of the stack after the block ends
0417                ARG_LIST:      
0417   11 00 00               LD   de,0   ; d = count locals, e = count args ()
041A   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
041D   23                     INC   hl   ; skip length field to start
041E   23                     INC   hl   
041F   E5                     PUSH   hl   ; save start of arg_list
0420   03                     INC   bc   ; point to next char
0421                ARG_LIST1:      
0421   0A                     LD   a,(bc)   
0422   FE 29                  CP   ")"   ; ) is the arg_list terminator
0424   28 12                  JR   z,arg_list4   
0426   FE 3A                  CP   ":"   
0428   20 03                  JR   nz,arg_list2   
042A   14                     INC   d   ; non zero value local count acts as flag
042B   20 08                  JR   nz,arg_list3   
042D                ARG_LIST2:      
042D   77                     LD   (hl),a   
042E   23                     INC   hl   
042F   1C                     INC   e   ; increase arg count
0430   AF                     XOR   a   
0431   B2                     OR   d   
0432   28 01                  JR   z,arg_list3   
0434   14                     INC   d   ; if d > 0 increase local count
0435                ARG_LIST3:      
0435   03                     INC   bc   ; point to next char
0436   18 E9                  JR   arg_list1   
0438                ARG_LIST4:      
0438   AF                     XOR   a   
0439   B2                     OR   d   
043A   28 01                  JR   z,arg_list5   
043C   15                     DEC   d   ; remove initial inc
043D                ARG_LIST5:      
043D   23                     INC   hl   
043E   22 EC 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0441   E1                     POP   hl   ; hl = start of arg_list
0442   E5                     PUSH   hl   ; return start of string
0443   2B                     DEC   hl   ; write length bytes to length field at start - 2
0444   72                     LD   (hl),d   
0445   2B                     DEC   hl   
0446   73                     LD   (hl),e   
0447   DD E9                  JP   (ix)   
0449                ARRBEGIN:      
0449   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap
044C   23                     INC   hl   ; reserve space for size
044D   23                     INC   hl   
044E   22 EC 19               LD   (vHeapPtr),hl   ; hl = array start
0451   E5                     PUSH   hl   ; return start of array
0452   DD E9                  JP   (ix)   
0454                ARREND:      
0454   D1                     POP   de   ; de = dup array start
0455   D5                     PUSH   de   
0456   C5                     PUSH   bc   ; save IP
0457   42 4B                  LD   bc,de   ; bc = de = array start
0459   2A EC 19               LD   hl,(vHeapPtr)   ; hl = array end
045C   B7                     OR   a   ; de = array length
045D   ED 52                  SBC   hl,de   
045F   EB                     EX   de,hl   
0460   60 69                  LD   hl,bc   ; hl = array start
0462   2B                     DEC   hl   
0463   72                     LD   (hl),d   
0464   2B                     DEC   hl   
0465   73                     LD   (hl),e   
0466   C1                     POP   bc   ; bc = IP
0467   DD E9                  JP   (ix)   
0469                ARRITEM:      
0469   D1                     POP   de   ; new value
046A   2A EC 19               LD   hl,(vHeapPtr)   
046D   73                     LD   (hl),e   
046E   23                     INC   hl   
046F   3A E6 19               LD   a,(vDataWidth)   
0472   3D                     DEC   a   ; is it byte?
0473   28 02                  JR   z,arrItem1   
0475   72                     LD   (hl),d   
0476   23                     INC   hl   
0477                ARRITEM1:      
0477   22 EC 19               LD   (vHeapPtr),hl   
047A   DD E9                  JP   (ix)   
047C                             ; index of an array, based on vDataWidth
047C                             ; array num -- value    ; also sets vPointer to address
047C                ARRINDEX:      
047C   E1                     POP   hl   ; hl = index
047D   D1                     POP   de   ; de = array
047E   3A E6 19               LD   a,(vDataWidth)   ; a = data width
0481   3D                     DEC   a   
0482   28 01                  JR   z,arrIndex1   
0484                ARRINDEX0:      
0484   29                     ADD   hl,hl   ; if data width = 2 then double
0485                ARRINDEX1:      
0485   19                     ADD   hl,de   ; add addr
0486   22 EE 19               LD   (vPointer),hl   ; store address in setter
0489   16 00                  LD   d,0   
048B   5E                     LD   e,(hl)   
048C   B7                     OR   a   ; check data width again
048D   28 02                  JR   z,arrIndex2   
048F   23                     INC   hl   
0490   56                     LD   d,(hl)   
0491                ARRINDEX2:      
0491   D5                     PUSH   de   
0492   DD E9                  JP   (ix)   
0494                             ; value _oldValue --            ; uses address in vPointer
0494                ASSIGN:      
0494   E1                     POP   hl   ; discard last accessed value
0495   D1                     POP   de   ; new value
0496   2A EE 19               LD   hl,(vPointer)   
0499   73                     LD   (hl),e   
049A   3A E6 19               LD   a,(vDataWidth)   
049D   3D                     DEC   a   ; is it byte?
049E   28 02                  JR   z,assign1   
04A0   23                     INC   hl   
04A1   72                     LD   (hl),d   
04A2                ASSIGN1:      
04A2   DD E9                  JP   (ix)   
04A4                BLOCK:       
04A4   C5                     PUSH   bc   ; return pointer to first { of block
04A5   03                     INC   bc   
04A6   16 01                  LD   d,1   ; nesting: count first parenthesis
04A8                BLOCK1:      ; Skip to end of definition
04A8   0A                     LD   a,(bc)   ; Get the next character
04A9   03                     INC   bc   ; Point to next character
04AA   FE 21                  CP   " " + 1   ; ignore whitespace
04AC   38 FA                  JR   c,block1   
04AE   FE 29                  CP   ")"   
04B0   28 2D                  JR   z,block4   
04B2   FE 7D                  CP   "}"   
04B4   28 29                  JR   z,block4   
04B6   FE 5D                  CP   "]"   
04B8   28 25                  JR   z,block4   
04BA   FE 28                  CP   "("   
04BC   28 16                  JR   z,block2   
04BE   FE 7B                  CP   "{"   
04C0   28 12                  JR   z,block2   
04C2   FE 5B                  CP   "["   
04C4   28 0E                  JR   z,block2   
04C6   FE 27                  CP   "'"   
04C8   28 0D                  JR   z,block3   
04CA   FE 60                  CP   "`"   
04CC   28 09                  JR   z,block3   
04CE   FE 22                  CP   $22   
04D0   28 05                  JR   z,block3   
04D2   18 D4                  JR   block1   
04D4                BLOCK2:      
04D4   14                     INC   d   
04D5   18 D1                  JR   block1   
04D7                BLOCK3:      
04D7   3E 80                  LD   a,$80   
04D9   AA                     XOR   d   
04DA   47                     LD   b,a   
04DB   20 CB                  JR   nz,block1   
04DD   18 03                  JR   block5   
04DF                BLOCK4:      
04DF   15                     DEC   d   
04E0   20 C6                  JR   nz,block1   ; get the next element
04E2                BLOCK5:      
04E2   0B                     DEC   bc   ; balanced, exit
04E3   DD E9                  JP   (ix)   
04E5                BLOCKEND:      
04E5   D9                     EXX      
04E6   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04E9   FD 56 01               LD   d,(iy+1)   
04EC   FD 4E 06               LD   c,(iy+6)   ; bc = IP
04EF   FD 46 07               LD   b,(iy+7)   
04F2   D9                     EXX      
04F3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
04F6   FD 56 03               LD   d,(iy+3)   
04F9   EB                     EX   de,hl   
04FA   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04FD   FD 56 01               LD   d,(iy+1)   
0500                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
0500   13                     INC   de   ; for carry flag <=
0501   B7                     OR   a   
0502   ED 52                  SBC   hl,de   
0504   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0506   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0508   FD 5D                  LD   e,iyl   
050A   21 08 00               LD   hl,8   
050D   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
050E   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
050F   18 0C                  JR   blockend2   
0511                BLOCKEND1:      ; same scope
0511   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0514   FD 56 03               LD   d,(iy+3)   
0517   EB                     EX   de,hl   
0518   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
051A   FD 5D                  LD   e,iyl   
051C   EB                     EX   de,hl   
051D                BLOCKEND2:      
051D   44 4D                  LD   bc,hl   ; bc = hl = BP
051F   B7                     OR   a   ; hl = BP - SP = count
0520   ED 72                  SBC   hl,sp   
0522   C5                     PUSH   bc   ; bc = count, hl = BP
0523   44 4D                  LD   bc,hl   
0525   E1                     POP   hl   
0526   2B                     DEC   hl   ; hl = BP-1
0527   1B                     DEC   de   ; de = args*-1
0528   ED B8                  LDDR      
052A   13                     INC   de   ; hl = new tos
052B   EB                     EX   de,hl   
052C   F9                     LD   sp,hl   ; sp = new tos
052D   D9                     EXX      ; bc = IP, iy = oldBP
052E   D5                     PUSH   de   
052F   C5                     PUSH   bc   
0530   D9                     EXX      
0531   C1                     POP   bc   
0532   FD E1                  POP   iy   
0534   DD E9                  JP   (ix)   
0536                BYTES:       
0536   21 01 00               LD   hl,1   
0539                BYTES1:      
0539   22 E6 19               LD   (vDataWidth),hl   
053C   DD E9                  JP   (ix)   
053E                CHAR:        
053E   21 00 00               LD   hl,0   ; if "" is empty or null
0541                CHAR1:       
0541   03                     INC   bc   ; point to next char
0542   0A                     LD   a,(bc)   
0543   FE 27                  CP   "'"   ; ' is the terminator
0545   28 09                  JR   z,char3   
0547   FE 5C                  CP   $5c   ; \ is the escape
0549   20 02                  JR   nz,char2   
054B   03                     INC   bc   
054C   0A                     LD   a,(bc)   
054D                CHAR2:       
054D   6F                     LD   l,a   
054E   18 F1                  JR   char1   
0550                CHAR3:       
0550   E5                     PUSH   hl   
0551   DD E9                  JP   (ix)   
0553                COMMAND:      
0553   03                     INC   bc   
0554   0A                     LD   a,(bc)   
0555   FE 5C                  CP   $5C   ; \\ comment
0557   28 3D                  JR   z,comment   
0559   FE 61                  CP   "a"   ; \a absolute
055B   CA AA 03               JP   z,abs1   
055E   FE 62                  CP   "b"   ; \b bytes
0560   CA 36 05               JP   z,bytes   
0563   FE 66                  CP   "f"   ; \f func
0565   CA F0 05               JP   z,func   
0568   FE 46                  CP   "F"   ; \F false
056A   CA E4 05               JP   z,false1   
056D   FE 69                  CP   "i"   ; \i input
056F   CA F8 06               JP   z,input   
0572   FE 6B                  CP   "k"   ; \k key
0574   CA 03 07               JP   z,key   
0577   FE 6F                  CP   "o"   ; \o output
0579   CA 58 07               JP   z,output   
057C   FE 72                  CP   "r"   ; \r repeat
057E   CA 61 07               JP   z,repeat   
0581   FE 73                  CP   "s"   ; \s select
0583   CA AE 07               JP   z,select   
0586   FE 54                  CP   "T"   ; \T true
0588   CA DE 05               JP   z,true1   
058B   FE 77                  CP   "w"   ; \w words
058D   CA B8 07               JP   z,words   
0590   21 01 00               LD   hl,1   ; error 1: unknown command
0593   C3 4F 09               JP   error   
0596                COMMENT:      
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 20                  CP   " "   ; terminate on any char less than SP
059A   30 FA                  JR   nc,comment   
059C   0B                     DEC   bc   
059D   DD E9                  JP   (ix)   
059F                DOT:         
059F   E1                     POP   hl   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2   FE 68                  CP   "h"   
05A4   20 05                  JR   nz,dot1   
05A6   CD 23 08               CALL   prthex   
05A9   18 17                  JR   dot4   
05AB                DOT1:        
05AB   FE 73                  CP   "s"   
05AD   20 05                  JR   nz,dot2   
05AF   CD 46 08               CALL   prtstr   
05B2   18 0E                  JR   dot4   
05B4                DOT2:        
05B4   FE 63                  CP   "c"   
05B6   20 06                  JR   nz,dot3   
05B8   7D                     LD   a,l   
05B9   CD 85 00               CALL   putchar   
05BC   18 04                  JR   dot4   
05BE                DOT3:        
05BE   0B                     DEC   bc   
05BF   CD DB 07               CALL   prtdec   
05C2                DOT4:        
05C2   3E 20                  LD   a," "   
05C4   CD 85 00               CALL   putchar   
05C7   DD E9                  JP   (ix)   
05C9                             ; hl = value1, de = value2
05C9                             ; hl = result
05C9                EQUALS:      
05C9   B7                     OR   a   ; reset the carry flag
05CA   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05CC   28 10                  JR   z,true1   
05CE   C3 E4 05               JP   false1   
05D1                             ; hl = value1 de = value2
05D1                             ; hl = result
05D1                LESSTHANEQ:      
05D1   B7                     OR   a   
05D2   ED 52                  SBC   hl,de   
05D4   18 05                  JR   lessthan1   
05D6                             ; hl = value1 de = value2
05D6                             ; hl = result
05D6                LESSTHAN:      
05D6   B7                     OR   a   
05D7   ED 52                  SBC   hl,de   
05D9   28 09                  JR   z,false1   
05DB                LESSTHAN1:      
05DB   FA E4 05               JP   m,false1   
05DE                TRUE1:       
05DE   21 FF FF               LD   hl,TRUE   
05E1   E5                     PUSH   hl   
05E2   DD E9                  JP   (ix)   
05E4                NULL1:       
05E4                FALSE1:      
05E4   21 00 00               LD   hl,FALSE   
05E7   E5                     PUSH   hl   
05E8   DD E9                  JP   (ix)   
05EA                REMAIN:      
05EA   2A F4 19               LD   hl,(vRemain)   
05ED   E5                     PUSH   hl   
05EE   DD E9                  JP   (ix)   
05F0                             ; arg_list* block* -- ptr
05F0                FUNC:        
05F0   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heapptr
05F3   D1                     POP   de   ; hl = heapPtr, de = block
05F4   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
05F5   E3                     EX   (sp),hl   
05F6   EB                     EX   de,hl   
05F7   73                     LD   (hl),e   ; compile arg_list*
05F8   23                     INC   hl   
05F9   72                     LD   (hl),d   
05FA   23                     INC   hl   
05FB   D1                     POP   de   ; de = block*
05FC   13                     INC   de   
05FD   C5                     PUSH   bc   ; (sp) = IP
05FE   06 01                  LD   b,1   ; b = nesting
0600                FUNC1:       
0600   1A                     LD   a,(de)   
0601   13                     INC   de   
0602   77                     LD   (hl),a   
0603   23                     INC   hl   
0604   FE 29                  CP   ")"   
0606   28 2D                  JR   z,func4   
0608   FE 7D                  CP   "}"   
060A   28 29                  JR   z,func4   
060C   FE 5D                  CP   "]"   
060E   28 25                  JR   z,func4   
0610   FE 28                  CP   "("   
0612   28 16                  JR   z,func2   
0614   FE 7B                  CP   "{"   
0616   28 12                  JR   z,func2   
0618   FE 5B                  CP   "["   
061A   28 0E                  JR   z,func2   
061C   FE 22                  CP   DQUOTE   
061E   28 0D                  JR   z,func3   
0620   FE 27                  CP   "'"   
0622   28 09                  JR   z,func3   
0624   FE 60                  CP   "`"   
0626   28 05                  JR   z,func3   
0628   18 D6                  JR   func1   
062A                FUNC2:       
062A   04                     INC   b   
062B   18 D3                  JR   func1   
062D                FUNC3:       
062D   3E 80                  LD   a,$80   
062F   A8                     XOR   b   
0630   47                     LD   b,a   
0631   20 CD                  JR   nz,func1   
0633   18 03                  JR   func4a   
0635                FUNC4:       
0635   05                     DEC   b   
0636   20 C8                  JR   nz,func1   ; get the next element
0638                FUNC4A:      
0638   23                     INC   hl   
0639   C1                     POP   bc   ; de = defstart, hl = IP
063A   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = defstart
063E   D5                     PUSH   de   
063F   22 EC 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0642   DD E9                  JP   (ix)   
0644                             ; execute a block of code which ends with }
0644                             ; creates a root scope if BP == stack
0644                             ; else uses outer scope
0644                GO:          
0644   D1                     POP   de   ; de = block*
0645                GO0:         
0645   7B                     LD   a,e   ; if block* == null, exit
0646   B2                     OR   d   
0647   20 02                  JR   nz,go1   
0649   DD E9                  JP   (ix)   
064B                GO1:         
064B   1A                     LD   a,(de)   
064C   FE 7B                  CP   "{"   
064E   C2 85 06               JP   nz,go10   
0651   13                     INC   de   
0652   C5                     PUSH   bc   ; push IP
0653   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0656   FD 44                  LD   b,iyh   
0658   FD 4D                  LD   c,iyl   
065A   B7                     OR   a   ; hl = stack - BP = root_scope
065B   ED 42                  SBC   hl,bc   
065D   7D                     LD   a,l   ; if root_scope, skip
065E   B4                     OR   h   
065F   28 11                  JR   z,go2   
0661   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0664   FD 46 05               LD   b,(iy+5)   
0667   C5                     PUSH   bc   
0668   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
066B   FD 46 03               LD   b,(iy+3)   
066E   60 69                  LD   hl,bc   
0670   18 05                  JR   go3   
0672                GO2:         
0672   E5                     PUSH   hl   ; push arg_list (null)
0673   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0676   39                     ADD   hl,sp   
0677                GO3:         
0677   E5                     PUSH   hl   ; push first_arg
0678   FD E5                  PUSH   iy   ; push BP
067A   FD 21 00 00            LD   iy,0   ; BP = SP
067E   FD 39                  ADD   iy,sp   
0680   42 4B                  LD   bc,de   ; bc = de = block*-1
0682   0B                     DEC   bc   
0683   DD E9                  JP   (ix)   
0685                GO10:        ; execute code at pointer
0685   EB                     EX   de,hl   ; hl = code*
0686   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0687   23                     INC   hl   
0688   56                     LD   d,(hl)   
0689   23                     INC   hl   
068A   EB                     EX   de,hl   
068B   7D                     LD   a,l   ; if arg_list* != null skip
068C   B4                     OR   h   
068D   20 03                  JR   nz,go11   
068F   C5                     PUSH   bc   ; push IP
0690   18 E0                  JR   go2   
0692                GO11:        
0692   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0693   7E                     LD   a,(hl)   
0694   23                     INC   hl   
0695   B7                     OR   a   
0696   28 05                  JR   z,go13   
0698                GO12:        
0698   3B                     DEC   sp   
0699   3B                     DEC   sp   
069A   3D                     DEC   a   
069B   20 FB                  JR   nz,go12   
069D                GO13:        
069D   C5                     PUSH   bc   ; push IP
069E   E5                     PUSH   hl   ; push arg_list*
069F   2B                     DEC   hl   ; hl = num_args*
06A0   2B                     DEC   hl   
06A1   7E                     LD   a,(hl)   ; hl = num_args * 2
06A2   87                     ADD   a,a   
06A3   C6 04                  ADD   a,4   ; offset for IP and arg_list
06A5   6F                     LD   l,a   
06A6   26 00                  LD   h,$0   
06A8   39                     ADD   hl,sp   ; hl = first_arg*
06A9   18 CC                  JR   go3   
06AB                HEXNUM:      
06AB   21 00 00               LD   hl,0   ; Clear hl to accept the number
06AE                HEXNUM1:      
06AE   03                     INC   bc   
06AF   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B0   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B2   28 02                  JR   z,hexnum2   ; no a decimal
06B4   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B6                HEXNUM2:      
06B6   D6 30                  SUB   $30   ; form decimal digit
06B8   DA 4A 07               JP   c,num2   
06BB   FE 10                  CP   $0F+1   
06BD   D2 4A 07               JP   nc,num2   
06C0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C1   29                     ADD   hl,hl   ; 4X
06C2   29                     ADD   hl,hl   ; 8X
06C3   29                     ADD   hl,hl   ; 16X
06C4   85                     ADD   a,l   ; add into bottom of hl
06C5   6F                     LD   l,a   
06C6   18 E6                  JR   hexnum1   
06C8                IDENTU:      
06C8   0A                     LD   a,(bc)   ; a = identifier char
06C9   D6 41                  SUB   "A"   ; "A" = 0
06CB   18 05                  JR   ident1   
06CD                IDENTL:      
06CD   0A                     LD   a,(bc)   
06CE   D6 61                  SUB   "a"   
06D0   C6 1A                  ADD   a,26   
06D2                IDENT1:      
06D2   87                     ADD   a,a   ; l = a * 2
06D3   6F                     LD   l,a   
06D4   26 19                  LD   h,msb(vars)   
06D6   22 EE 19               LD   (vPointer),hl   ; store address in setter
06D9   5E                     LD   e,(hl)   
06DA   23                     INC   hl   
06DB   56                     LD   d,(hl)   
06DC   D5                     PUSH   de   
06DD   DD E9                  JP   (ix)   
06DF                             ; if
06DF                             ; condition then -- value
06DF                IF:          
06DF   03                     INC   bc   
06E0   0A                     LD   a,(bc)   
06E1   FE 3F                  CP   "?"   
06E3   28 06                  JR   z,ifte   
06E5   0B                     DEC   bc   
06E6   11 00 00               LD   de,0   ; NUL pointer for else
06E9   18 01                  JR   ifte1   
06EB                             ; ifte
06EB                             ; condition then else -- value
06EB                IFTE:        
06EB   D1                     POP   de   ; de = else
06EC                IFTE1:       
06EC   E1                     POP   hl   ; hl = then
06ED   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06EE   7C                     LD   a,h   
06EF   B5                     OR   l   
06F0   E1                     POP   hl   ; hl = then
06F1   CA 45 06               JP   z,go0   ; if z de = else
06F4   EB                     EX   de,hl   ; condition = false, de = then
06F5   C3 45 06               JP   go0   
06F8                             ; Z80 port input
06F8                             ; port -- value
06F8                INPUT:       
06F8   E1                     POP   hl   
06F9   59                     LD   e,c   ; save IP
06FA   4D                     LD   c,l   
06FB   ED 68                  IN   l,(c)   
06FD   26 00                  LD   h,0   
06FF   4B                     LD   c,e   ; restore IP
0700   E5                     PUSH   hl   
0701   DD E9                  JP   (ix)   
0703                KEY:         
0703   CD 81 00               CALL   getchar   
0706   26 00                  LD   h,0   
0708   6F                     LD   l,a   
0709   E5                     PUSH   hl   
070A   DD E9                  JP   (ix)   
070C                MUL:         
070C   D1                     POP   de   ; get first value
070D   E1                     POP   hl   
070E   C5                     PUSH   bc   ; Preserve the IP
070F   44                     LD   b,h   ; bc = 2nd value
0710   4D                     LD   c,l   
0711   21 00 00               LD   hl,0   
0714   3E 10                  LD   a,16   
0716                MUL2:        
0716   29                     ADD   hl,hl   
0717   CB 13                  RL   e   
0719   CB 12                  RL   d   
071B   30 04                  JR   nc,$+6   
071D   09                     ADD   hl,bc   
071E   30 01                  JR   nc,$+3   
0720   13                     INC   de   
0721   3D                     DEC   a   
0722   20 F2                  JR   nz,mul2   
0724   C1                     POP   bc   ; Restore the IP
0725   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0726   DD E9                  JP   (ix)   
0728                NUM:         
0728   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
072B   0A                     LD   a,(bc)   ; Get numeral or -
072C   FE 2D                  CP   "-"   
072E   20 01                  JR   nz,num0   
0730   03                     INC   bc   ; move to next char, no flags affected
0731                NUM0:        
0731   08                     EX   af,af'   ; save zero flag = 0 for later
0732                NUM1:        
0732   0A                     LD   a,(bc)   ; read digit
0733   D6 30                  SUB   "0"   ; less than 0?
0735   38 13                  JR   c,num2   ; not a digit, exit loop
0737   FE 0A                  CP   10   ; greater that 9?
0739   30 0F                  JR   nc,num2   ; not a digit, exit loop
073B   03                     INC   bc   ; inc IP
073C   54 5D                  LD   de,hl   ; multiply hl * 10
073E   29                     ADD   hl,hl   
073F   29                     ADD   hl,hl   
0740   19                     ADD   hl,de   
0741   29                     ADD   hl,hl   
0742   85                     ADD   a,l   ; add digit in a to hl
0743   6F                     LD   l,a   
0744   3E 00                  LD   a,0   
0746   8C                     ADC   a,h   
0747   67                     LD   h,a   
0748   18 E8                  JR   num1   
074A                NUM2:        
074A   0B                     DEC   bc   
074B   08                     EX   af,af'   ; restore zero flag
074C   20 07                  JR   nz,num3   
074E   EB                     EX   de,hl   ; negate the value of hl
074F   21 00 00               LD   hl,0   
0752   B7                     OR   a   ; jump to sub2
0753   ED 52                  SBC   hl,de   
0755                NUM3:        
0755   E5                     PUSH   hl   ; Put the number on the stack
0756   DD E9                  JP   (ix)   ; and process the next character
0758                             ; Z80 port output
0758                             ; value port --
0758                OUTPUT:      
0758   E1                     POP   hl   
0759   59                     LD   e,c   ; save IP
075A   4D                     LD   c,l   
075B   E1                     POP   hl   
075C   ED 69                  OUT   (c),l   
075E   4B                     LD   c,e   ; restore IP
075F   DD E9                  JP   (ix)   
0761                REPEAT:      
0761   DD E9                  JP   (ix)   
0763                             ; shiftLeft
0763                             ; value count -- value2          shift left count places
0763                SHIFTLEFT:      
0763   50 59                  LD   de,bc   ; save IP
0765   C1                     POP   bc   ; bc = count
0766   41                     LD   b,c   ; b = loop counter
0767   E1                     POP   hl   
0768   04                     INC   b   ; test for counter=0 case
0769   18 01                  JR   shiftLeft2   
076B                SHIFTLEFT1:      
076B   29                     ADD   hl,hl   ; left shift hl
076C                SHIFTLEFT2:      
076C   10 FD                  DJNZ   shiftLeft1   
076E   E5                     PUSH   hl   
076F   42 4B                  LD   bc,de   ; restore IP
0771   DD E9                  JP   (ix)   
0773                             ; shiftRight
0773                             ; value count -- value2          shift left count places
0773                SHIFTRIGHT:      
0773   50 59                  LD   de,bc   ; save IP
0775   C1                     POP   bc   ; bc = count
0776   41                     LD   b,c   ; b = loop counter
0777   E1                     POP   hl   
0778   04                     INC   b   ; test for counter=0 case
0779   18 04                  JR   shiftRight2   
077B                SHIFTRIGHT1:      
077B   CB 3C                  SRL   h   ; right shift hl
077D   CB 1D                  RR   l   
077F                SHIFTRIGHT2:      
077F   10 FA                  DJNZ   shiftRight1   
0781   E5                     PUSH   hl   
0782   42 4B                  LD   bc,de   ; restore IP
0784   DD E9                  JP   (ix)   
0786                             ; string
0786                             ; -- ptr                        ; points to start of string chars,
0786                             ; length is stored at start - 2 bytes
0786                STRING:      
0786   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
0789   23                     INC   hl   ; skip length field to start
078A   23                     INC   hl   
078B   E5                     PUSH   hl   ; save start of string
078C   03                     INC   bc   ; point to next char
078D   18 03                  JR   string2   
078F                STRING1:      
078F   77                     LD   (hl),a   
0790   23                     INC   hl   ; increase count
0791   03                     INC   bc   ; point to next char
0792                STRING2:      
0792   0A                     LD   a,(bc)   
0793   FE 22                  CP   DQUOTE   ; " is the string terminator
0795   20 F8                  JR   nz,string1   
0797   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0799   20 F4                  JR   nz,string1   
079B   AF                     XOR   a   ; write NUL to terminate string
079C   77                     LD   (hl),a   ; hl = end of string
079D   23                     INC   hl   
079E   22 EC 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
07A1   2B                     DEC   hl   ; hl = end of string without terminator
07A2   D1                     POP   de   ; de = start of string
07A3   D5                     PUSH   de   ; return start of string
07A4   B7                     OR   a   ; hl = length bytes, de = start of string
07A5   ED 52                  SBC   hl,de   
07A7   EB                     EX   de,hl   
07A8   2B                     DEC   hl   ; write length bytes to length field at start - 2
07A9   72                     LD   (hl),d   
07AA   2B                     DEC   hl   
07AB   73                     LD   (hl),e   
07AC   DD E9                  JP   (ix)   
07AE                             ; select
07AE                             ; index array -- value
07AE                SELECT:      
07AE   D1                     POP   de   ; de = array
07AF   E1                     POP   hl   ; hl = index
07B0   29                     ADD   hl,hl   ; if data width = 2 then double
07B1   19                     ADD   hl,de   ; add addr
07B2   5E                     LD   e,(hl)   
07B3   23                     INC   hl   
07B4   56                     LD   d,(hl)   
07B5   C3 44 06               JP   go   
07B8                WORDS:       
07B8   21 02 00               LD   hl,2   
07BB   C3 39 05               JP   bytes1   
07BE                             ; 
07BE                             ; 
07BE                             ; 
07BE                             ; 
07BE                             ; 
07BE                             ; c b --
07BE                             ; loops until c = 0
07BE                LOOP:        
07BE   DD E9                  JP   (ix)   
07C0                             ;     pop de                      ; de = block                    c
07C0                             ;     pop hl                      ; hl = condition
07C0                             ;     push de
07C0                             ;     push bc                     ; push IP
07C0                             ;     ld bc,de                    ; bc = block
07C0                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
07C0                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
07C0                             ;     push de                     ; push ScopeBP
07C0                             ;     push iy                     ; push BP
07C0                             ;     ld iy,0                     ; iy = sp
07C0                             ;     add iy,sp
07C0                             ; loop1:
07C0                             ;     ld a,l                      ; bc = block, hl = condition = zero?
07C0                             ;     or h
07C0                             ;     jr z,loop3
07C0                             ;     ld de,loop2-1               ; IP return address
07C0                             ;     push de
07C0                             ;     ld e,(iy+2)                 ; push parent ScopeBP
07C0                             ;     ld d,(iy+3)
07C0                             ;     push de                     ;
07C0                             ;     push iy                     ; push BP
07C0                             ;     ld iy,0                     ; iy = sp
07C0                             ;     add iy,sp
07C0                             ;     push hl                     ; push condition
07C0                             ;     dec bc
07C0                             ;     jp (ix)
07C0                             ; loop2:
07C0                             ;     db ESC                      ; escape from interpreter
07C0                             ;     ld c,(iy+6)                 ; bc = block
07C0                             ;     ld b,(iy+7)
07C0                             ;     pop hl                      ; hl = condition
07C0                             ;     jr loop1
07C0                             ; loop3:
07C0                             ;     ld d,iyh                    ; de = BP
07C0                             ;     ld e,iyl
07C0                             ;     ex de,hl                    ; hl = BP, de = result
07C0                             ;     ld sp,hl                    ; sp = BP
07C0                             ;     pop hl                      ; hl = old BP
07C0                             ;     pop bc                      ; pop ScopeBP (discard)
07C0                             ;     pop bc                      ; bc = IP
07C0                             ;     ld sp,hl                    ; sp = old BP
07C0                             ;     ld iy,0                     ; iy = sp
07C0                             ;     add iy,sp
07C0                             ;     ld ix,(vNext)                  ; needed?
07C0                             ;     jp (ix)
07C0                             ; str -- num
07C0                             ; hash:
07C0                             ; pop hl
07C0                             ; push bc
07C0                             ; ld bc,hl
07C0                             ; call hashStr
07C0                             ; pop bc
07C0                             ; push hl
07C0                             ; jp (ix)
07C0                             ; sqrt1:
07C0                             ;     pop hl
07C0                             ;     push bc
07C0                             ;     call squareRoot
07C0                             ;     ld (vRemain),bc
07C0                             ;     pop bc
07C0                             ;     push de
07C0                             ;     jp (ix)
07C0                FILTER:      
07C0                MAP:         
07C0                SCAN:        
07C0   DD E9                  JP   (ix)   
07C2                             ; -------------------------------------------------------------------------------
07C2                             ; ; hash C-string
07C2                             ; ; BC = str
07C2                             ; ; HL = hash
07C2                             ; hashStr:
07C2                             ;     ld (vHashStr),bc                    ; store source string
07C2                             ;     ld hl,0
07C2                             ; hashStr1:
07C2                             ;     ld a,(bc)                           ; load next char
07C2                             ;     inc bc
07C2                             ;     cp 0                                ; NUL?
07C2                             ;     ret z
07C2                             ; hashStr2:
07C2                             ;     ld d,0
07C2                             ;     ld e,a
07C2                             ;     add hl,de
07C2                             ;     ld de,hl                            ; hl *= 193 (11000001)
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,de                           ; add
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,hl                           ; shift left
07C2                             ;     add hl,de                           ; add
07C2                             ;     jr hashStr1
07C2                             ; division subroutine.
07C2                             ; bc: divisor, de: dividend, hl: remainder
07C2                DIVIDE:      
07C2   21 00 00               LD   hl,0   ; zero the remainder
07C5   3E 10                  LD   a,16   ; loop counter
07C7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07C7   CB 21                  SLA   c   
07C9   CB 10                  RL   b   
07CB   ED 6A                  ADC   hl,hl   
07CD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07CF   38 03                  JR   c,divide2   
07D1   0C                     INC   c   
07D2   18 01                  JR   divide3   
07D4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D4   19                     ADD   hl,de   
07D5                DIVIDE3:      
07D5   3D                     DEC   a   
07D6   20 EF                  JR   nz,divide1   
07D8   50 59                  LD   de,bc   ; result from bc to de
07DA   C9                     RET      
07DB                             ; ; squareroot
07DB                             ; ; Input: HL = value
07DB                             ; ; Result: DE = square root BC = remainder
07DB                             ; squareRoot:
07DB                             ;     ld bc,0800h
07DB                             ;     ld e,c
07DB                             ;     xor a
07DB                             ; squareRoot1:
07DB                             ;     add hl,hl
07DB                             ;     rl c
07DB                             ;     adc hl,hl
07DB                             ;     rl c
07DB                             ;     jr nc,$+4
07DB                             ;     set 0,l
07DB                             ;     ld a,e
07DB                             ;     add a,a
07DB                             ;     ld e,a
07DB                             ;     add a,a
07DB                             ;     bit 0,l
07DB                             ;     jr nz,$+5
07DB                             ;     sub c
07DB                             ;     jr nc,squareRoot4
07DB                             ;     ld a,c
07DB                             ;     sub e
07DB                             ;     inc e
07DB                             ;     sub e
07DB                             ;     ld c,a
07DB                             ; squareRoot4:
07DB                             ;     djnz squareRoot1
07DB                             ;     bit 0,l
07DB                             ;     jr z,squareRoot5
07DB                             ;     inc b
07DB                             ; squareRoot5:
07DB                             ;     ld d,0
07DB                             ;     ret
07DB                             ; print decimal
07DB                             ; hl = value
07DB                PRTDEC:      
07DB   CB 7C                  BIT   7,h   
07DD   28 0B                  JR   z,prtdec0   
07DF   3E 2D                  LD   a,"-"   
07E1   CD 85 00               CALL   putchar   
07E4   AF                     XOR   a   
07E5   95                     SUB   l   
07E6   6F                     LD   l,a   
07E7   9F                     SBC   a,a   
07E8   94                     SUB   h   
07E9   67                     LD   h,a   
07EA                PRTDEC0:      
07EA   C5                     PUSH   bc   
07EB   0E 00                  LD   c,0   ; leading zeros flag = false
07ED   11 F0 D8               LD   de,-10000   
07F0   CD 0C 08               CALL   prtdec1   
07F3   11 18 FC               LD   de,-1000   
07F6   CD 0C 08               CALL   prtdec1   
07F9   11 9C FF               LD   de,-100   
07FC   CD 0C 08               CALL   prtdec1   
07FF   1E F6                  LD   e,-10   
0801   CD 0C 08               CALL   prtdec1   
0804   0C                     INC   c   ; flag = true for at least digit
0805   1E FF                  LD   e,-1   
0807   CD 0C 08               CALL   prtdec1   
080A   C1                     POP   bc   
080B   C9                     RET      
080C                PRTDEC1:      
080C   06 2F                  LD   b,"0"-1   
080E                PRTDEC2:      
080E   04                     INC   b   
080F   19                     ADD   hl,de   
0810   38 FC                  JR   c,prtdec2   
0812   ED 52                  SBC   hl,de   
0814   3E 30                  LD   a,"0"   
0816   B8                     CP   b   
0817   20 05                  JR   nz,prtdec3   
0819   AF                     XOR   a   
081A   B1                     OR   c   
081B   C8                     RET   z   
081C   18 01                  JR   prtdec4   
081E                PRTDEC3:      
081E   0C                     INC   c   
081F                PRTDEC4:      
081F   78                     LD   a,b   
0820   C3 85 00               JP   putchar   
0823                PRTHEX:      ; display hl as a 16-bit number in hex.
0823   C5                     PUSH   bc   ; preserve the IP
0824   7C                     LD   a,h   
0825   CD 2E 08               CALL   prthex2   
0828   7D                     LD   a,l   
0829   CD 2E 08               CALL   prthex2   
082C   C1                     POP   bc   
082D   C9                     RET      
082E                PRTHEX2:      
082E   4F                     LD   c,a   
082F   1F                     RRA      
0830   1F                     RRA      
0831   1F                     RRA      
0832   1F                     RRA      
0833   CD 37 08               CALL   prthex3   
0836   79                     LD   a,c   
0837                PRTHEX3:      
0837   E6 0F                  AND   0x0F   
0839   C6 90                  ADD   a,0x90   
083B   27                     DAA      
083C   CE 40                  ADC   a,0x40   
083E   27                     DAA      
083F   C3 85 00               JP   putchar   
0842                PRTSTR0:      
0842   CD 85 00               CALL   putchar   
0845   23                     INC   hl   
0846                PRTSTR:      
0846   7E                     LD   a,(hl)   
0847   B7                     OR   a   
0848   20 F8                  JR   nz,prtstr0   
084A   C9                     RET      
084B                             ; **************************************************************************
084B                             ; calculate nesting value
084B                             ; a is char to be tested,
084B                             ; e is the nesting value (initially 0)
084B                             ; e is increased by ( and [
084B                             ; e is decreased by ) and ]
084B                             ; e has its bit 7 toggled by `
084B                             ; limited to 127 levels
084B                             ; **************************************************************************
084B                NESTING:      
084B   FE 22                  CP   DQUOTE   ; quote char
084D   28 06                  JR   z,nesting0   
084F   FE 60                  CP   "`"   ; quote char
0851   28 02                  JR   z,nesting0   
0853   18 0A                  JR   nesting1   
0855                NESTING0:      
0855   CB 7B                  BIT   7,e   
0857   28 03                  JR   z,nesting1a   
0859   CB BB                  RES   7,e   
085B   C9                     RET      
085C                NESTING1A:      
085C   CB FB                  SET   7,e   
085E   C9                     RET      
085F                NESTING1:      
085F   CB 7B                  BIT   7,e   
0861   C0                     RET   nz   
0862   FE 7B                  CP   "{"   
0864   28 08                  JR   z,nesting2   
0866   FE 5B                  CP   "["   
0868   28 04                  JR   z,nesting2   
086A   FE 28                  CP   "("   
086C   20 02                  JR   nz,nesting3   
086E                NESTING2:      
086E   1C                     INC   e   
086F   C9                     RET      
0870                NESTING3:      
0870   FE 7D                  CP   "}"   
0872   28 07                  JR   z,nesting4   
0874   FE 5D                  CP   "]"   
0876   28 03                  JR   z,nesting4   
0878   FE 29                  CP   ")"   
087A   C0                     RET   nz   
087B                NESTING4:      
087B   1D                     DEC   e   
087C   C9                     RET      
087D                PROMPT:      
087D   CD 8D 08               CALL   printStr   
0880   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0885   C9                     RET      
0886                CRLF:        
0886   CD 8D 08               CALL   printStr   
0889   0D 0A 00               .CSTR   "\r\n"   
088C   C9                     RET      
088D                             ; prints a null teminated string
088D                             ; the string should be immedaitely following the call
088D                PRINTSTR:      
088D   E3                     EX   (sp),hl   ; swap			
088E   CD 46 08               CALL   prtstr   
0891   23                     INC   hl   ; inc past NUL
0892   E3                     EX   (sp),hl   ; put it back	
0893   C9                     RET      
0894                             ; executes a null teminated string (null executes exit_)
0894                             ; the string should be immedaitely following the call
0894                EXECSTR:      ; create a root stack frame
0894   C1                     POP   bc   ; bc = code*
0895   0B                     DEC   bc   ; dec to prepare for next routine
0896   11 00 00               LD   de,0   
0899   D5                     PUSH   de   ; push fake IP
089A   D5                     PUSH   de   ; push null arg_list*
089B   D5                     PUSH   de   ; push null first_arg*
089C   D5                     PUSH   de   ; push fake BP
089D   DD E9                  JP   (ix)   
089F                             ; arg1 .. argn func -- ?
089F                CALL:        
089F   E1                     POP   hl   
08A0   E9                     JP   (hl)   
08A1                INIT:        
08A1   DD 2A EA 19            LD   ix,(vNext)   
08A5   FD 21 80 18            LD   iy,STACK   
08A9   21 80 01               LD   hl,isysVars   
08AC   11 E6 19               LD   de,sysVars   
08AF   01 10 00               LD   bc,8 * 2   
08B2   ED B0                  LDIR      
08B4   21 00 19               LD   hl,vars   ; 52 vars LO HI
08B7   06 34                  LD   b,26*2   
08B9   AF                     XOR   a   
08BA                INIT0:       
08BA   77                     LD   (hl),a   
08BB   23                     INC   hl   
08BC   10 FC                  DJNZ   init0   
08BE   C9                     RET      
08BF                START:       
08BF   31 80 18               LD   sp,STACK   ; start of monty
08C2   CD A1 08               CALL   init   ; setups
08C5   CD 8D 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08C8   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08D5                INTERPRET:      
08D5   CD 7D 08               CALL   prompt   
08D8   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
08DB   ED 43 E8 19            LD   (vTIBPtr),bc   
08DF                INTERPRET2:      ; calc nesting (a macro might have changed it)
08DF   1E 00                  LD   e,0   ; initilize nesting value
08E1   C5                     PUSH   bc   ; save offset into TIB,
08E2                             ; bc is also the count of chars in TIB
08E2   21 00 1A               LD   hl,TIB   ; hl is start of TIB
08E5   18 06                  JR   interpret4   
08E7                INTERPRET3:      
08E7   7E                     LD   a,(hl)   ; a = char in TIB
08E8   23                     INC   hl   ; inc pointer into TIB
08E9   0B                     DEC   bc   ; dec count of chars in TIB
08EA   CD 4B 08               CALL   nesting   ; update nesting value
08ED                INTERPRET4:      
08ED   79                     LD   a,c   ; is count zero?
08EE   B0                     OR   b   
08EF   20 F6                  JR   nz,interpret3   ; if not loop
08F1   C1                     POP   bc   ; restore offset into TIB
08F2                INTERPRET5:      
08F2   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
08F5   FE 20                  CP   $20   ; compare to space
08F7   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
08F9   FE 00                  CP   $0   ; is it end of string? NUL end of string
08FB                             ; ???? NEEDED?
08FB   28 27                  JR   z,interpret8   
08FD   FE 0D                  CP   "\r"   ; carriage return? ascii 13
08FF   28 10                  JR   z,interpret7   ; if anything else its macro/control
0901                             ; macro
0901                             ;  ld (vTIBPtr),bc
0901                             ;  ld hl,ctrlCodes
0901                             ;  add a,l			            ; look up key of macros
0901                             ;  ld l,a
0901                             ;  ld e,(hl)
0901                             ;  ld a,e
0901                             ;  or a
0901                             ;  jr z,macro1
0901                             ;  ld d,msb(macros)
0901                             ;  push de
0901                             ;  call call		            ; monty exec_ operation and jump to it
0901                             ;  db DC1,0
0901                             ; macro1:
0901                             ;  ld bc,(vTIBPtr)
0901   18 DC                  JR   interpret2   
0903                INTERPRET6:      
0903   21 00 1A               LD   hl,TIB   
0906   09                     ADD   hl,bc   
0907   77                     LD   (hl),a   ; store the character in textbuf
0908   03                     INC   bc   
0909   CD 85 00               CALL   putchar   ; echo character to screen
090C   CD 4B 08               CALL   nesting   
090F   18 E1                  JR   interpret5   ; wait for next character
0911                INTERPRET7:      
0911   21 00 1A               LD   hl,TIB   
0914   09                     ADD   hl,bc   
0915   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0917   23                     INC   hl   
0918   36 0A                  LD   (hl),"\n"   
091A   23                     INC   hl   
091B   03                     INC   bc   
091C   03                     INC   bc   
091D   CD 86 08               CALL   crlf   ; echo character to screen
0920   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0921   B7                     OR   a   
0922   20 CE                  JR   nz,interpret5   
0924                INTERPRET8:      
0924   ED 43 E8 19            LD   (vTIBPtr),bc   
0928   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
092B                             ; we pressed enter
092B   0B                     DEC   bc   
092C                NEXT:        
092C   03                     INC   bc   ; Increment the IP
092D   0A                     LD   a,(bc)   ; Get the next character and dispatch
092E   FE 20                  CP   " "   ; whitespace?
0930   28 FA                  JR   z,next   ; space? ignore
0932   38 0B                  JR   c,next1   
0934   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0936   30 0E                  JR   nc,next2   
0938   6F                     LD   l,a   ; index into table
0939   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
093B   6E                     LD   l,(hl)   ; get low jump address
093C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
093E   E9                     JP   (hl)   ; Jump to routine
093F                NEXT1:       
093F   FE 00                  CP   NUL   ; end of input string?
0941   28 09                  JR   z,exit_   
0943   C3 D5 08               JP   interpret   ; no, other whitespace, macros?
0946                NEXT2:       
0946   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
0947   03                     INC   bc   
0948   0A                     LD   a,(bc)   
0949   6F                     LD   l,a   
094A   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
094B   E9                     JP   (hl)   
094C                EXIT_:       
094C   60 69                  LD   hl,bc   
094E   E9                     JP   (hl)   
094F                ERROR:       
094F   CD 8D 08               CALL   printStr   
0952   45 72 72 6F 72 20 00   .CSTR   "Error "   
0959   CD DB 07               CALL   prtdec   
095C   C3 D5 08               JP   interpret   
095F                             ; .pstr "hash",0
095F                             ; dw hash \hsh
095F                             ; .pstr "input",0
095F                             ; dw input \in ?
095F                             ; call define
095F                             ; .pstr "output",0
095F                             ; dw output \out ?
095F                             ; .pstr "key",0
095F                             ; dw key \k
095F                             ; .pstr "loop",0
095F                             ; dw loop \rpt
095F                             ; .pstr "select",0
095F                             ; dw select. \sw
095F                             ; call define
095F                             ; .pstr "filter",0
095F                             ; dw filter \f ?
095F                             ; call define
095F                             ; .pstr "map",0
095F                             ; dw map \m ?
095F                             ; call define
095F                             ; .pstr "scan",0
095F                             ; dw scan.  \fold ?
095F                             ; call define
095F                             ; .pstr "sqrt",0
095F                             ; dw sqrt1 \sqt
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                             ; initialised sys variables
19E6                VDATAWIDTH:   DS   2   ; 
19E8                VTIBPTR:   DS   2   ; 
19EA                VNEXT:    DS   2   ; 
19EC                VHEAPPTR:   DS   2   ; 
19EE                             ; uninitialised sys variables
19EE                VPOINTER:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VLASTDEF:   DS   2   ; 
19F4                VREMAIN:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; 
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; 
4000                          ;*Macro unroll:  test "\\F", false
4000   31 80 18               LD   SP,STACK   
4003   CD A1 08               CALL   init   
4006   CD 94 08               CALL   execStr   
4009   5C 46 00               .CSTR   "\\F"   
400C                          ;*Macro unroll:  expect "\\F",false
400C   E1                     POP   HL   
400D   E5                     PUSH   HL   
400E   11 00 00               LD   DE,false   
4011   B7                     OR   A   
4012   ED 52                  SBC   HL,DE   
4014   7D                     LD   A,L   
4015   B4                     OR   H   
4016   28 4D                  JR   Z,expectM_0_2186S43   
4018   CD 8D 08               CALL   printStr   
401B   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
4024   CD 8D 08               CALL   printStr   
4027   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4036   21 00 00               LD   HL,false   
4039   CD DB 07               CALL   prtdec   
403C   CD 8D 08               CALL   printStr   
403F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404C   E1                     POP   hl   
404D   E5                     PUSH   hl   
404E   CD DB 07               CALL   prtdec   
4051   E1                     POP   hl   
4052   CD 8D 08               CALL   printStr   
4055   20 28 23 00            .CSTR   " (#"   
4059   CD 23 08               CALL   prthex   
405C   CD 8D 08               CALL   printStr   
405F   29 0D 0A 00            .CSTR   ")\r\n"   
4063   76                     HALT      
4064   00                     .CSTR      
4065                EXPECTM_0_2186S43:      
4065   E1                     POP   HL   
4066                          ;*Macro unroll:  test "\\T", true
4066   31 80 18               LD   SP,STACK   
4069   CD A1 08               CALL   init   
406C   CD 94 08               CALL   execStr   
406F   5C 54 00               .CSTR   "\\T"   
4072                          ;*Macro unroll:  expect "\\T",true
4072   E1                     POP   HL   
4073   E5                     PUSH   HL   
4074   11 FF FF               LD   DE,true   
4077   B7                     OR   A   
4078   ED 52                  SBC   HL,DE   
407A   7D                     LD   A,L   
407B   B4                     OR   H   
407C   28 4D                  JR   Z,expectM_0_2187S43   
407E   CD 8D 08               CALL   printStr   
4081   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
408A   CD 8D 08               CALL   printStr   
408D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
409C   21 FF FF               LD   HL,true   
409F   CD DB 07               CALL   prtdec   
40A2   CD 8D 08               CALL   printStr   
40A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40B2   E1                     POP   hl   
40B3   E5                     PUSH   hl   
40B4   CD DB 07               CALL   prtdec   
40B7   E1                     POP   hl   
40B8   CD 8D 08               CALL   printStr   
40BB   20 28 23 00            .CSTR   " (#"   
40BF   CD 23 08               CALL   prthex   
40C2   CD 8D 08               CALL   printStr   
40C5   29 0D 0A 00            .CSTR   ")\r\n"   
40C9   76                     HALT      
40CA   00                     .CSTR      
40CB                EXPECTM_0_2187S43:      
40CB   E1                     POP   HL   
40CC                          ;*Macro unroll:  test "1", 1
40CC   31 80 18               LD   SP,STACK   
40CF   CD A1 08               CALL   init   
40D2   CD 94 08               CALL   execStr   
40D5   31 00                  .CSTR   "1"   
40D7                          ;*Macro unroll:  expect "1",1
40D7   E1                     POP   HL   
40D8   E5                     PUSH   HL   
40D9   11 01 00               LD   DE,1   
40DC   B7                     OR   A   
40DD   ED 52                  SBC   HL,DE   
40DF   7D                     LD   A,L   
40E0   B4                     OR   H   
40E1   28 4C                  JR   Z,expectM_0_2188S43   
40E3   CD 8D 08               CALL   printStr   
40E6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40EE   CD 8D 08               CALL   printStr   
40F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4100   21 01 00               LD   HL,1   
4103   CD DB 07               CALL   prtdec   
4106   CD 8D 08               CALL   printStr   
4109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4116   E1                     POP   hl   
4117   E5                     PUSH   hl   
4118   CD DB 07               CALL   prtdec   
411B   E1                     POP   hl   
411C   CD 8D 08               CALL   printStr   
411F   20 28 23 00            .CSTR   " (#"   
4123   CD 23 08               CALL   prthex   
4126   CD 8D 08               CALL   printStr   
4129   29 0D 0A 00            .CSTR   ")\r\n"   
412D   76                     HALT      
412E   00                     .CSTR      
412F                EXPECTM_0_2188S43:      
412F   E1                     POP   HL   
4130                          ;*Macro unroll:  test "2", 2
4130   31 80 18               LD   SP,STACK   
4133   CD A1 08               CALL   init   
4136   CD 94 08               CALL   execStr   
4139   32 00                  .CSTR   "2"   
413B                          ;*Macro unroll:  expect "2",2
413B   E1                     POP   HL   
413C   E5                     PUSH   HL   
413D   11 02 00               LD   DE,2   
4140   B7                     OR   A   
4141   ED 52                  SBC   HL,DE   
4143   7D                     LD   A,L   
4144   B4                     OR   H   
4145   28 4C                  JR   Z,expectM_0_2189S43   
4147   CD 8D 08               CALL   printStr   
414A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4152   CD 8D 08               CALL   printStr   
4155   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4164   21 02 00               LD   HL,2   
4167   CD DB 07               CALL   prtdec   
416A   CD 8D 08               CALL   printStr   
416D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417A   E1                     POP   hl   
417B   E5                     PUSH   hl   
417C   CD DB 07               CALL   prtdec   
417F   E1                     POP   hl   
4180   CD 8D 08               CALL   printStr   
4183   20 28 23 00            .CSTR   " (#"   
4187   CD 23 08               CALL   prthex   
418A   CD 8D 08               CALL   printStr   
418D   29 0D 0A 00            .CSTR   ")\r\n"   
4191   76                     HALT      
4192   00                     .CSTR      
4193                EXPECTM_0_2189S43:      
4193   E1                     POP   HL   
4194                          ;*Macro unroll:  test "1", 1
4194   31 80 18               LD   SP,STACK   
4197   CD A1 08               CALL   init   
419A   CD 94 08               CALL   execStr   
419D   31 00                  .CSTR   "1"   
419F                          ;*Macro unroll:  expect "1",1
419F   E1                     POP   HL   
41A0   E5                     PUSH   HL   
41A1   11 01 00               LD   DE,1   
41A4   B7                     OR   A   
41A5   ED 52                  SBC   HL,DE   
41A7   7D                     LD   A,L   
41A8   B4                     OR   H   
41A9   28 4C                  JR   Z,expectM_0_2190S43   
41AB   CD 8D 08               CALL   printStr   
41AE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
41B6   CD 8D 08               CALL   printStr   
41B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C8   21 01 00               LD   HL,1   
41CB   CD DB 07               CALL   prtdec   
41CE   CD 8D 08               CALL   printStr   
41D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DE   E1                     POP   hl   
41DF   E5                     PUSH   hl   
41E0   CD DB 07               CALL   prtdec   
41E3   E1                     POP   hl   
41E4   CD 8D 08               CALL   printStr   
41E7   20 28 23 00            .CSTR   " (#"   
41EB   CD 23 08               CALL   prthex   
41EE   CD 8D 08               CALL   printStr   
41F1   29 0D 0A 00            .CSTR   ")\r\n"   
41F5   76                     HALT      
41F6   00                     .CSTR      
41F7                EXPECTM_0_2190S43:      
41F7   E1                     POP   HL   
41F8                          ;*Macro unroll:  test "0", 0
41F8   31 80 18               LD   SP,STACK   
41FB   CD A1 08               CALL   init   
41FE   CD 94 08               CALL   execStr   
4201   30 00                  .CSTR   "0"   
4203                          ;*Macro unroll:  expect "0",0
4203   E1                     POP   HL   
4204   E5                     PUSH   HL   
4205   11 00 00               LD   DE,0   
4208   B7                     OR   A   
4209   ED 52                  SBC   HL,DE   
420B   7D                     LD   A,L   
420C   B4                     OR   H   
420D   28 4C                  JR   Z,expectM_0_2191S43   
420F   CD 8D 08               CALL   printStr   
4212   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
421A   CD 8D 08               CALL   printStr   
421D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422C   21 00 00               LD   HL,0   
422F   CD DB 07               CALL   prtdec   
4232   CD 8D 08               CALL   printStr   
4235   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4242   E1                     POP   hl   
4243   E5                     PUSH   hl   
4244   CD DB 07               CALL   prtdec   
4247   E1                     POP   hl   
4248   CD 8D 08               CALL   printStr   
424B   20 28 23 00            .CSTR   " (#"   
424F   CD 23 08               CALL   prthex   
4252   CD 8D 08               CALL   printStr   
4255   29 0D 0A 00            .CSTR   ")\r\n"   
4259   76                     HALT      
425A   00                     .CSTR      
425B                EXPECTM_0_2191S43:      
425B   E1                     POP   HL   
425C                          ;*Macro unroll:  test "10", 10
425C   31 80 18               LD   SP,STACK   
425F   CD A1 08               CALL   init   
4262   CD 94 08               CALL   execStr   
4265   31 30 00               .CSTR   "10"   
4268                          ;*Macro unroll:  expect "10",10
4268   E1                     POP   HL   
4269   E5                     PUSH   HL   
426A   11 0A 00               LD   DE,10   
426D   B7                     OR   A   
426E   ED 52                  SBC   HL,DE   
4270   7D                     LD   A,L   
4271   B4                     OR   H   
4272   28 4D                  JR   Z,expectM_0_2192S43   
4274   CD 8D 08               CALL   printStr   
4277   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4280   CD 8D 08               CALL   printStr   
4283   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4292   21 0A 00               LD   HL,10   
4295   CD DB 07               CALL   prtdec   
4298   CD 8D 08               CALL   printStr   
429B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42A8   E1                     POP   hl   
42A9   E5                     PUSH   hl   
42AA   CD DB 07               CALL   prtdec   
42AD   E1                     POP   hl   
42AE   CD 8D 08               CALL   printStr   
42B1   20 28 23 00            .CSTR   " (#"   
42B5   CD 23 08               CALL   prthex   
42B8   CD 8D 08               CALL   printStr   
42BB   29 0D 0A 00            .CSTR   ")\r\n"   
42BF   76                     HALT      
42C0   00                     .CSTR      
42C1                EXPECTM_0_2192S43:      
42C1   E1                     POP   HL   
42C2                          ;*Macro unroll:  test "123", 123
42C2   31 80 18               LD   SP,STACK   
42C5   CD A1 08               CALL   init   
42C8   CD 94 08               CALL   execStr   
42CB   31 32 33 00            .CSTR   "123"   
42CF                          ;*Macro unroll:  expect "123",123
42CF   E1                     POP   HL   
42D0   E5                     PUSH   HL   
42D1   11 7B 00               LD   DE,123   
42D4   B7                     OR   A   
42D5   ED 52                  SBC   HL,DE   
42D7   7D                     LD   A,L   
42D8   B4                     OR   H   
42D9   28 4E                  JR   Z,expectM_0_2193S43   
42DB   CD 8D 08               CALL   printStr   
42DE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
42E8   CD 8D 08               CALL   printStr   
42EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FA   21 7B 00               LD   HL,123   
42FD   CD DB 07               CALL   prtdec   
4300   CD 8D 08               CALL   printStr   
4303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4310   E1                     POP   hl   
4311   E5                     PUSH   hl   
4312   CD DB 07               CALL   prtdec   
4315   E1                     POP   hl   
4316   CD 8D 08               CALL   printStr   
4319   20 28 23 00            .CSTR   " (#"   
431D   CD 23 08               CALL   prthex   
4320   CD 8D 08               CALL   printStr   
4323   29 0D 0A 00            .CSTR   ")\r\n"   
4327   76                     HALT      
4328   00                     .CSTR      
4329                EXPECTM_0_2193S43:      
4329   E1                     POP   HL   
432A                          ;*Macro unroll:  test "-1",-1
432A   31 80 18               LD   SP,STACK   
432D   CD A1 08               CALL   init   
4330   CD 94 08               CALL   execStr   
4333   2D 31 00               .CSTR   "-1"   
4336                          ;*Macro unroll:  expect "-1",-1
4336   E1                     POP   HL   
4337   E5                     PUSH   HL   
4338   11 FF FF               LD   DE,-1   
433B   B7                     OR   A   
433C   ED 52                  SBC   HL,DE   
433E   7D                     LD   A,L   
433F   B4                     OR   H   
4340   28 4D                  JR   Z,expectM_0_2194S43   
4342   CD 8D 08               CALL   printStr   
4345   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
434E   CD 8D 08               CALL   printStr   
4351   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4360   21 FF FF               LD   HL,-1   
4363   CD DB 07               CALL   prtdec   
4366   CD 8D 08               CALL   printStr   
4369   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4376   E1                     POP   hl   
4377   E5                     PUSH   hl   
4378   CD DB 07               CALL   prtdec   
437B   E1                     POP   hl   
437C   CD 8D 08               CALL   printStr   
437F   20 28 23 00            .CSTR   " (#"   
4383   CD 23 08               CALL   prthex   
4386   CD 8D 08               CALL   printStr   
4389   29 0D 0A 00            .CSTR   ")\r\n"   
438D   76                     HALT      
438E   00                     .CSTR      
438F                EXPECTM_0_2194S43:      
438F   E1                     POP   HL   
4390                          ;*Macro unroll:  test "''", 0
4390   31 80 18               LD   SP,STACK   
4393   CD A1 08               CALL   init   
4396   CD 94 08               CALL   execStr   
4399   27 27 00               .CSTR   "''"   
439C                          ;*Macro unroll:  expect "''",0
439C   E1                     POP   HL   
439D   E5                     PUSH   HL   
439E   11 00 00               LD   DE,0   
43A1   B7                     OR   A   
43A2   ED 52                  SBC   HL,DE   
43A4   7D                     LD   A,L   
43A5   B4                     OR   H   
43A6   28 4D                  JR   Z,expectM_0_2195S43   
43A8   CD 8D 08               CALL   printStr   
43AB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
43B4   CD 8D 08               CALL   printStr   
43B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C6   21 00 00               LD   HL,0   
43C9   CD DB 07               CALL   prtdec   
43CC   CD 8D 08               CALL   printStr   
43CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DC   E1                     POP   hl   
43DD   E5                     PUSH   hl   
43DE   CD DB 07               CALL   prtdec   
43E1   E1                     POP   hl   
43E2   CD 8D 08               CALL   printStr   
43E5   20 28 23 00            .CSTR   " (#"   
43E9   CD 23 08               CALL   prthex   
43EC   CD 8D 08               CALL   printStr   
43EF   29 0D 0A 00            .CSTR   ")\r\n"   
43F3   76                     HALT      
43F4   00                     .CSTR      
43F5                EXPECTM_0_2195S43:      
43F5   E1                     POP   HL   
43F6                          ;*Macro unroll:  test "'a'", $61
43F6   31 80 18               LD   SP,STACK   
43F9   CD A1 08               CALL   init   
43FC   CD 94 08               CALL   execStr   
43FF   27 61 27 00            .CSTR   "'a'"   
4403                          ;*Macro unroll:  expect "'a'",$61
4403   E1                     POP   HL   
4404   E5                     PUSH   HL   
4405   11 61 00               LD   DE,$61   
4408   B7                     OR   A   
4409   ED 52                  SBC   HL,DE   
440B   7D                     LD   A,L   
440C   B4                     OR   H   
440D   28 4E                  JR   Z,expectM_0_2196S43   
440F   CD 8D 08               CALL   printStr   
4412   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
441C   CD 8D 08               CALL   printStr   
441F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
442E   21 61 00               LD   HL,$61   
4431   CD DB 07               CALL   prtdec   
4434   CD 8D 08               CALL   printStr   
4437   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4444   E1                     POP   hl   
4445   E5                     PUSH   hl   
4446   CD DB 07               CALL   prtdec   
4449   E1                     POP   hl   
444A   CD 8D 08               CALL   printStr   
444D   20 28 23 00            .CSTR   " (#"   
4451   CD 23 08               CALL   prthex   
4454   CD 8D 08               CALL   printStr   
4457   29 0D 0A 00            .CSTR   ")\r\n"   
445B   76                     HALT      
445C   00                     .CSTR      
445D                EXPECTM_0_2196S43:      
445D   E1                     POP   HL   
445E                          ;*Macro unroll:  test "'\\''", $27
445E   31 80 18               LD   SP,STACK   
4461   CD A1 08               CALL   init   
4464   CD 94 08               CALL   execStr   
4467   27 5C 27 27 00         .CSTR   "'\\''"   
446C                          ;*Macro unroll:  expect "'\\''",$27
446C   E1                     POP   HL   
446D   E5                     PUSH   HL   
446E   11 27 00               LD   DE,$27   
4471   B7                     OR   A   
4472   ED 52                  SBC   HL,DE   
4474   7D                     LD   A,L   
4475   B4                     OR   H   
4476   28 4F                  JR   Z,expectM_0_2197S43   
4478   CD 8D 08               CALL   printStr   
447B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
4486   CD 8D 08               CALL   printStr   
4489   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4498   21 27 00               LD   HL,$27   
449B   CD DB 07               CALL   prtdec   
449E   CD 8D 08               CALL   printStr   
44A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44AE   E1                     POP   hl   
44AF   E5                     PUSH   hl   
44B0   CD DB 07               CALL   prtdec   
44B3   E1                     POP   hl   
44B4   CD 8D 08               CALL   printStr   
44B7   20 28 23 00            .CSTR   " (#"   
44BB   CD 23 08               CALL   prthex   
44BE   CD 8D 08               CALL   printStr   
44C1   29 0D 0A 00            .CSTR   ")\r\n"   
44C5   76                     HALT      
44C6   00                     .CSTR      
44C7                EXPECTM_0_2197S43:      
44C7   E1                     POP   HL   
44C8                          ;*Macro unroll:  test "#10", $10
44C8   31 80 18               LD   SP,STACK   
44CB   CD A1 08               CALL   init   
44CE   CD 94 08               CALL   execStr   
44D1   23 31 30 00            .CSTR   "#10"   
44D5                          ;*Macro unroll:  expect "#10",$10
44D5   E1                     POP   HL   
44D6   E5                     PUSH   HL   
44D7   11 10 00               LD   DE,$10   
44DA   B7                     OR   A   
44DB   ED 52                  SBC   HL,DE   
44DD   7D                     LD   A,L   
44DE   B4                     OR   H   
44DF   28 4E                  JR   Z,expectM_0_2198S43   
44E1   CD 8D 08               CALL   printStr   
44E4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
44EE   CD 8D 08               CALL   printStr   
44F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4500   21 10 00               LD   HL,$10   
4503   CD DB 07               CALL   prtdec   
4506   CD 8D 08               CALL   printStr   
4509   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4516   E1                     POP   hl   
4517   E5                     PUSH   hl   
4518   CD DB 07               CALL   prtdec   
451B   E1                     POP   hl   
451C   CD 8D 08               CALL   printStr   
451F   20 28 23 00            .CSTR   " (#"   
4523   CD 23 08               CALL   prthex   
4526   CD 8D 08               CALL   printStr   
4529   29 0D 0A 00            .CSTR   ")\r\n"   
452D   76                     HALT      
452E   00                     .CSTR      
452F                EXPECTM_0_2198S43:      
452F   E1                     POP   HL   
4530                          ;*Macro unroll:  test "#FF", $FF
4530   31 80 18               LD   SP,STACK   
4533   CD A1 08               CALL   init   
4536   CD 94 08               CALL   execStr   
4539   23 46 46 00            .CSTR   "#FF"   
453D                          ;*Macro unroll:  expect "#FF",$FF
453D   E1                     POP   HL   
453E   E5                     PUSH   HL   
453F   11 FF 00               LD   DE,$FF   
4542   B7                     OR   A   
4543   ED 52                  SBC   HL,DE   
4545   7D                     LD   A,L   
4546   B4                     OR   H   
4547   28 4E                  JR   Z,expectM_0_2199S43   
4549   CD 8D 08               CALL   printStr   
454C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
4556   CD 8D 08               CALL   printStr   
4559   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4568   21 FF 00               LD   HL,$FF   
456B   CD DB 07               CALL   prtdec   
456E   CD 8D 08               CALL   printStr   
4571   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
457E   E1                     POP   hl   
457F   E5                     PUSH   hl   
4580   CD DB 07               CALL   prtdec   
4583   E1                     POP   hl   
4584   CD 8D 08               CALL   printStr   
4587   20 28 23 00            .CSTR   " (#"   
458B   CD 23 08               CALL   prthex   
458E   CD 8D 08               CALL   printStr   
4591   29 0D 0A 00            .CSTR   ")\r\n"   
4595   76                     HALT      
4596   00                     .CSTR      
4597                EXPECTM_0_2199S43:      
4597   E1                     POP   HL   
4598                          ;*Macro unroll:  test "-1 2 +",1
4598   31 80 18               LD   SP,STACK   
459B   CD A1 08               CALL   init   
459E   CD 94 08               CALL   execStr   
45A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
45A8                          ;*Macro unroll:  expect "-1 2 +",1
45A8   E1                     POP   HL   
45A9   E5                     PUSH   HL   
45AA   11 01 00               LD   DE,1   
45AD   B7                     OR   A   
45AE   ED 52                  SBC   HL,DE   
45B0   7D                     LD   A,L   
45B1   B4                     OR   H   
45B2   28 51                  JR   Z,expectM_0_2200S43   
45B4   CD 8D 08               CALL   printStr   
45B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
45C4   CD 8D 08               CALL   printStr   
45C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D6   21 01 00               LD   HL,1   
45D9   CD DB 07               CALL   prtdec   
45DC   CD 8D 08               CALL   printStr   
45DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45EC   E1                     POP   hl   
45ED   E5                     PUSH   hl   
45EE   CD DB 07               CALL   prtdec   
45F1   E1                     POP   hl   
45F2   CD 8D 08               CALL   printStr   
45F5   20 28 23 00            .CSTR   " (#"   
45F9   CD 23 08               CALL   prthex   
45FC   CD 8D 08               CALL   printStr   
45FF   29 0D 0A 00            .CSTR   ")\r\n"   
4603   76                     HALT      
4604   00                     .CSTR      
4605                EXPECTM_0_2200S43:      
4605   E1                     POP   HL   
4606                          ;*Macro unroll:  test "-1 1 +",0
4606   31 80 18               LD   SP,STACK   
4609   CD A1 08               CALL   init   
460C   CD 94 08               CALL   execStr   
460F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
4616                          ;*Macro unroll:  expect "-1 1 +",0
4616   E1                     POP   HL   
4617   E5                     PUSH   HL   
4618   11 00 00               LD   DE,0   
461B   B7                     OR   A   
461C   ED 52                  SBC   HL,DE   
461E   7D                     LD   A,L   
461F   B4                     OR   H   
4620   28 51                  JR   Z,expectM_0_2201S43   
4622   CD 8D 08               CALL   printStr   
4625   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
4632   CD 8D 08               CALL   printStr   
4635   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4644   21 00 00               LD   HL,0   
4647   CD DB 07               CALL   prtdec   
464A   CD 8D 08               CALL   printStr   
464D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
465A   E1                     POP   hl   
465B   E5                     PUSH   hl   
465C   CD DB 07               CALL   prtdec   
465F   E1                     POP   hl   
4660   CD 8D 08               CALL   printStr   
4663   20 28 23 00            .CSTR   " (#"   
4667   CD 23 08               CALL   prthex   
466A   CD 8D 08               CALL   printStr   
466D   29 0D 0A 00            .CSTR   ")\r\n"   
4671   76                     HALT      
4672   00                     .CSTR      
4673                EXPECTM_0_2201S43:      
4673   E1                     POP   HL   
4674                          ;*Macro unroll:  test "1 2 +", 3
4674   31 80 18               LD   SP,STACK   
4677   CD A1 08               CALL   init   
467A   CD 94 08               CALL   execStr   
467D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4683                          ;*Macro unroll:  expect "1 2 +",3
4683   E1                     POP   HL   
4684   E5                     PUSH   HL   
4685   11 03 00               LD   DE,3   
4688   B7                     OR   A   
4689   ED 52                  SBC   HL,DE   
468B   7D                     LD   A,L   
468C   B4                     OR   H   
468D   28 50                  JR   Z,expectM_0_2202S43   
468F   CD 8D 08               CALL   printStr   
4692   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
469E   CD 8D 08               CALL   printStr   
46A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B0   21 03 00               LD   HL,3   
46B3   CD DB 07               CALL   prtdec   
46B6   CD 8D 08               CALL   printStr   
46B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46C6   E1                     POP   hl   
46C7   E5                     PUSH   hl   
46C8   CD DB 07               CALL   prtdec   
46CB   E1                     POP   hl   
46CC   CD 8D 08               CALL   printStr   
46CF   20 28 23 00            .CSTR   " (#"   
46D3   CD 23 08               CALL   prthex   
46D6   CD 8D 08               CALL   printStr   
46D9   29 0D 0A 00            .CSTR   ")\r\n"   
46DD   76                     HALT      
46DE   00                     .CSTR      
46DF                EXPECTM_0_2202S43:      
46DF   E1                     POP   HL   
46E0                          ;*Macro unroll:  test "4 1 2 +", 3
46E0   31 80 18               LD   SP,STACK   
46E3   CD A1 08               CALL   init   
46E6   CD 94 08               CALL   execStr   
46E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
46F1                          ;*Macro unroll:  expect "4 1 2 +",3
46F1   E1                     POP   HL   
46F2   E5                     PUSH   HL   
46F3   11 03 00               LD   DE,3   
46F6   B7                     OR   A   
46F7   ED 52                  SBC   HL,DE   
46F9   7D                     LD   A,L   
46FA   B4                     OR   H   
46FB   28 52                  JR   Z,expectM_0_2203S43   
46FD   CD 8D 08               CALL   printStr   
4700   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
470E   CD 8D 08               CALL   printStr   
4711   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4720   21 03 00               LD   HL,3   
4723   CD DB 07               CALL   prtdec   
4726   CD 8D 08               CALL   printStr   
4729   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4736   E1                     POP   hl   
4737   E5                     PUSH   hl   
4738   CD DB 07               CALL   prtdec   
473B   E1                     POP   hl   
473C   CD 8D 08               CALL   printStr   
473F   20 28 23 00            .CSTR   " (#"   
4743   CD 23 08               CALL   prthex   
4746   CD 8D 08               CALL   printStr   
4749   29 0D 0A 00            .CSTR   ")\r\n"   
474D   76                     HALT      
474E   00                     .CSTR      
474F                EXPECTM_0_2203S43:      
474F   E1                     POP   HL   
4750                          ;*Macro unroll:  test "1 2 +", 3
4750   31 80 18               LD   SP,STACK   
4753   CD A1 08               CALL   init   
4756   CD 94 08               CALL   execStr   
4759   31 20 32 20 2B 00      .CSTR   "1 2 +"   
475F                          ;*Macro unroll:  expect "1 2 +",3
475F   E1                     POP   HL   
4760   E5                     PUSH   HL   
4761   11 03 00               LD   DE,3   
4764   B7                     OR   A   
4765   ED 52                  SBC   HL,DE   
4767   7D                     LD   A,L   
4768   B4                     OR   H   
4769   28 50                  JR   Z,expectM_0_2204S43   
476B   CD 8D 08               CALL   printStr   
476E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
477A   CD 8D 08               CALL   printStr   
477D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478C   21 03 00               LD   HL,3   
478F   CD DB 07               CALL   prtdec   
4792   CD 8D 08               CALL   printStr   
4795   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47A2   E1                     POP   hl   
47A3   E5                     PUSH   hl   
47A4   CD DB 07               CALL   prtdec   
47A7   E1                     POP   hl   
47A8   CD 8D 08               CALL   printStr   
47AB   20 28 23 00            .CSTR   " (#"   
47AF   CD 23 08               CALL   prthex   
47B2   CD 8D 08               CALL   printStr   
47B5   29 0D 0A 00            .CSTR   ")\r\n"   
47B9   76                     HALT      
47BA   00                     .CSTR      
47BB                EXPECTM_0_2204S43:      
47BB   E1                     POP   HL   
47BC                          ;*Macro unroll:  test "123 456 +", 123+456
47BC   31 80 18               LD   SP,STACK   
47BF   CD A1 08               CALL   init   
47C2   CD 94 08               CALL   execStr   
47C5   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
47CF                          ;*Macro unroll:  expect "123 456 +",123+456
47CF   E1                     POP   HL   
47D0   E5                     PUSH   HL   
47D1   11 43 02               LD   DE,123+456   
47D4   B7                     OR   A   
47D5   ED 52                  SBC   HL,DE   
47D7   7D                     LD   A,L   
47D8   B4                     OR   H   
47D9   28 54                  JR   Z,expectM_0_2205S43   
47DB   CD 8D 08               CALL   printStr   
47DE   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
47EE   CD 8D 08               CALL   printStr   
47F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4800   21 43 02               LD   HL,123+456   
4803   CD DB 07               CALL   prtdec   
4806   CD 8D 08               CALL   printStr   
4809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4816   E1                     POP   hl   
4817   E5                     PUSH   hl   
4818   CD DB 07               CALL   prtdec   
481B   E1                     POP   hl   
481C   CD 8D 08               CALL   printStr   
481F   20 28 23 00            .CSTR   " (#"   
4823   CD 23 08               CALL   prthex   
4826   CD 8D 08               CALL   printStr   
4829   29 0D 0A 00            .CSTR   ")\r\n"   
482D   76                     HALT      
482E   00                     .CSTR      
482F                EXPECTM_0_2205S43:      
482F   E1                     POP   HL   
4830                          ;*Macro unroll:  test "64 128 +", 64+128
4830   31 80 18               LD   SP,STACK   
4833   CD A1 08               CALL   init   
4836   CD 94 08               CALL   execStr   
4839   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4842                          ;*Macro unroll:  expect "64 128 +",64+128
4842   E1                     POP   HL   
4843   E5                     PUSH   HL   
4844   11 C0 00               LD   DE,64+128   
4847   B7                     OR   A   
4848   ED 52                  SBC   HL,DE   
484A   7D                     LD   A,L   
484B   B4                     OR   H   
484C   28 53                  JR   Z,expectM_0_2206S43   
484E   CD 8D 08               CALL   printStr   
4851   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4860   CD 8D 08               CALL   printStr   
4863   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4872   21 C0 00               LD   HL,64+128   
4875   CD DB 07               CALL   prtdec   
4878   CD 8D 08               CALL   printStr   
487B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4888   E1                     POP   hl   
4889   E5                     PUSH   hl   
488A   CD DB 07               CALL   prtdec   
488D   E1                     POP   hl   
488E   CD 8D 08               CALL   printStr   
4891   20 28 23 00            .CSTR   " (#"   
4895   CD 23 08               CALL   prthex   
4898   CD 8D 08               CALL   printStr   
489B   29 0D 0A 00            .CSTR   ")\r\n"   
489F   76                     HALT      
48A0   00                     .CSTR      
48A1                EXPECTM_0_2206S43:      
48A1   E1                     POP   HL   
48A2                          ;*Macro unroll:  test "-1 -1 -",0
48A2   31 80 18               LD   SP,STACK   
48A5   CD A1 08               CALL   init   
48A8   CD 94 08               CALL   execStr   
48AB   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
48B3                          ;*Macro unroll:  expect "-1 -1 -",0
48B3   E1                     POP   HL   
48B4   E5                     PUSH   HL   
48B5   11 00 00               LD   DE,0   
48B8   B7                     OR   A   
48B9   ED 52                  SBC   HL,DE   
48BB   7D                     LD   A,L   
48BC   B4                     OR   H   
48BD   28 52                  JR   Z,expectM_0_2207S43   
48BF   CD 8D 08               CALL   printStr   
48C2   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
48D0   CD 8D 08               CALL   printStr   
48D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E2   21 00 00               LD   HL,0   
48E5   CD DB 07               CALL   prtdec   
48E8   CD 8D 08               CALL   printStr   
48EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48F8   E1                     POP   hl   
48F9   E5                     PUSH   hl   
48FA   CD DB 07               CALL   prtdec   
48FD   E1                     POP   hl   
48FE   CD 8D 08               CALL   printStr   
4901   20 28 23 00            .CSTR   " (#"   
4905   CD 23 08               CALL   prthex   
4908   CD 8D 08               CALL   printStr   
490B   29 0D 0A 00            .CSTR   ")\r\n"   
490F   76                     HALT      
4910   00                     .CSTR      
4911                EXPECTM_0_2207S43:      
4911   E1                     POP   HL   
4912                          ;*Macro unroll:  test "5 3 -", 2
4912   31 80 18               LD   SP,STACK   
4915   CD A1 08               CALL   init   
4918   CD 94 08               CALL   execStr   
491B   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4921                          ;*Macro unroll:  expect "5 3 -",2
4921   E1                     POP   HL   
4922   E5                     PUSH   HL   
4923   11 02 00               LD   DE,2   
4926   B7                     OR   A   
4927   ED 52                  SBC   HL,DE   
4929   7D                     LD   A,L   
492A   B4                     OR   H   
492B   28 50                  JR   Z,expectM_0_2208S43   
492D   CD 8D 08               CALL   printStr   
4930   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
493C   CD 8D 08               CALL   printStr   
493F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494E   21 02 00               LD   HL,2   
4951   CD DB 07               CALL   prtdec   
4954   CD 8D 08               CALL   printStr   
4957   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4964   E1                     POP   hl   
4965   E5                     PUSH   hl   
4966   CD DB 07               CALL   prtdec   
4969   E1                     POP   hl   
496A   CD 8D 08               CALL   printStr   
496D   20 28 23 00            .CSTR   " (#"   
4971   CD 23 08               CALL   prthex   
4974   CD 8D 08               CALL   printStr   
4977   29 0D 0A 00            .CSTR   ")\r\n"   
497B   76                     HALT      
497C   00                     .CSTR      
497D                EXPECTM_0_2208S43:      
497D   E1                     POP   HL   
497E                          ;*Macro unroll:  test "3 5 &", 1
497E   31 80 18               LD   SP,STACK   
4981   CD A1 08               CALL   init   
4984   CD 94 08               CALL   execStr   
4987   33 20 35 20 26 00      .CSTR   "3 5 &"   
498D                          ;*Macro unroll:  expect "3 5 &",1
498D   E1                     POP   HL   
498E   E5                     PUSH   HL   
498F   11 01 00               LD   DE,1   
4992   B7                     OR   A   
4993   ED 52                  SBC   HL,DE   
4995   7D                     LD   A,L   
4996   B4                     OR   H   
4997   28 50                  JR   Z,expectM_0_2209S43   
4999   CD 8D 08               CALL   printStr   
499C   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
49A8   CD 8D 08               CALL   printStr   
49AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49BA   21 01 00               LD   HL,1   
49BD   CD DB 07               CALL   prtdec   
49C0   CD 8D 08               CALL   printStr   
49C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D0   E1                     POP   hl   
49D1   E5                     PUSH   hl   
49D2   CD DB 07               CALL   prtdec   
49D5   E1                     POP   hl   
49D6   CD 8D 08               CALL   printStr   
49D9   20 28 23 00            .CSTR   " (#"   
49DD   CD 23 08               CALL   prthex   
49E0   CD 8D 08               CALL   printStr   
49E3   29 0D 0A 00            .CSTR   ")\r\n"   
49E7   76                     HALT      
49E8   00                     .CSTR      
49E9                EXPECTM_0_2209S43:      
49E9   E1                     POP   HL   
49EA                          ;*Macro unroll:  test "3 5 |", 7
49EA   31 80 18               LD   SP,STACK   
49ED   CD A1 08               CALL   init   
49F0   CD 94 08               CALL   execStr   
49F3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
49F9                          ;*Macro unroll:  expect "3 5 |",7
49F9   E1                     POP   HL   
49FA   E5                     PUSH   HL   
49FB   11 07 00               LD   DE,7   
49FE   B7                     OR   A   
49FF   ED 52                  SBC   HL,DE   
4A01   7D                     LD   A,L   
4A02   B4                     OR   H   
4A03   28 50                  JR   Z,expectM_0_2210S43   
4A05   CD 8D 08               CALL   printStr   
4A08   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4A14   CD 8D 08               CALL   printStr   
4A17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A26   21 07 00               LD   HL,7   
4A29   CD DB 07               CALL   prtdec   
4A2C   CD 8D 08               CALL   printStr   
4A2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A3C   E1                     POP   hl   
4A3D   E5                     PUSH   hl   
4A3E   CD DB 07               CALL   prtdec   
4A41   E1                     POP   hl   
4A42   CD 8D 08               CALL   printStr   
4A45   20 28 23 00            .CSTR   " (#"   
4A49   CD 23 08               CALL   prthex   
4A4C   CD 8D 08               CALL   printStr   
4A4F   29 0D 0A 00            .CSTR   ")\r\n"   
4A53   76                     HALT      
4A54   00                     .CSTR      
4A55                EXPECTM_0_2210S43:      
4A55   E1                     POP   HL   
4A56                          ;*Macro unroll:  test "2 3 *", 6
4A56   31 80 18               LD   SP,STACK   
4A59   CD A1 08               CALL   init   
4A5C   CD 94 08               CALL   execStr   
4A5F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4A65                          ;*Macro unroll:  expect "2 3 *",6
4A65   E1                     POP   HL   
4A66   E5                     PUSH   HL   
4A67   11 06 00               LD   DE,6   
4A6A   B7                     OR   A   
4A6B   ED 52                  SBC   HL,DE   
4A6D   7D                     LD   A,L   
4A6E   B4                     OR   H   
4A6F   28 50                  JR   Z,expectM_0_2211S43   
4A71   CD 8D 08               CALL   printStr   
4A74   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4A80   CD 8D 08               CALL   printStr   
4A83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A92   21 06 00               LD   HL,6   
4A95   CD DB 07               CALL   prtdec   
4A98   CD 8D 08               CALL   printStr   
4A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AA8   E1                     POP   hl   
4AA9   E5                     PUSH   hl   
4AAA   CD DB 07               CALL   prtdec   
4AAD   E1                     POP   hl   
4AAE   CD 8D 08               CALL   printStr   
4AB1   20 28 23 00            .CSTR   " (#"   
4AB5   CD 23 08               CALL   prthex   
4AB8   CD 8D 08               CALL   printStr   
4ABB   29 0D 0A 00            .CSTR   ")\r\n"   
4ABF   76                     HALT      
4AC0   00                     .CSTR      
4AC1                EXPECTM_0_2211S43:      
4AC1   E1                     POP   HL   
4AC2                          ;*Macro unroll:  test "1 2 3 + *", 5
4AC2   31 80 18               LD   SP,STACK   
4AC5   CD A1 08               CALL   init   
4AC8   CD 94 08               CALL   execStr   
4ACB   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4AD5                          ;*Macro unroll:  expect "1 2 3 + *",5
4AD5   E1                     POP   HL   
4AD6   E5                     PUSH   HL   
4AD7   11 05 00               LD   DE,5   
4ADA   B7                     OR   A   
4ADB   ED 52                  SBC   HL,DE   
4ADD   7D                     LD   A,L   
4ADE   B4                     OR   H   
4ADF   28 54                  JR   Z,expectM_0_2212S43   
4AE1   CD 8D 08               CALL   printStr   
4AE4   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4AF4   CD 8D 08               CALL   printStr   
4AF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B06   21 05 00               LD   HL,5   
4B09   CD DB 07               CALL   prtdec   
4B0C   CD 8D 08               CALL   printStr   
4B0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B1C   E1                     POP   hl   
4B1D   E5                     PUSH   hl   
4B1E   CD DB 07               CALL   prtdec   
4B21   E1                     POP   hl   
4B22   CD 8D 08               CALL   printStr   
4B25   20 28 23 00            .CSTR   " (#"   
4B29   CD 23 08               CALL   prthex   
4B2C   CD 8D 08               CALL   printStr   
4B2F   29 0D 0A 00            .CSTR   ")\r\n"   
4B33   76                     HALT      
4B34   00                     .CSTR      
4B35                EXPECTM_0_2212S43:      
4B35   E1                     POP   HL   
4B36                          ;*Macro unroll:  test "7 3 /", 2
4B36   31 80 18               LD   SP,STACK   
4B39   CD A1 08               CALL   init   
4B3C   CD 94 08               CALL   execStr   
4B3F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4B45                          ;*Macro unroll:  expect "7 3 /",2
4B45   E1                     POP   HL   
4B46   E5                     PUSH   HL   
4B47   11 02 00               LD   DE,2   
4B4A   B7                     OR   A   
4B4B   ED 52                  SBC   HL,DE   
4B4D   7D                     LD   A,L   
4B4E   B4                     OR   H   
4B4F   28 50                  JR   Z,expectM_0_2213S43   
4B51   CD 8D 08               CALL   printStr   
4B54   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4B60   CD 8D 08               CALL   printStr   
4B63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B72   21 02 00               LD   HL,2   
4B75   CD DB 07               CALL   prtdec   
4B78   CD 8D 08               CALL   printStr   
4B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B88   E1                     POP   hl   
4B89   E5                     PUSH   hl   
4B8A   CD DB 07               CALL   prtdec   
4B8D   E1                     POP   hl   
4B8E   CD 8D 08               CALL   printStr   
4B91   20 28 23 00            .CSTR   " (#"   
4B95   CD 23 08               CALL   prthex   
4B98   CD 8D 08               CALL   printStr   
4B9B   29 0D 0A 00            .CSTR   ")\r\n"   
4B9F   76                     HALT      
4BA0   00                     .CSTR      
4BA1                EXPECTM_0_2213S43:      
4BA1   E1                     POP   HL   
4BA2                          ;*Macro unroll:  test "7 3 / _", 1
4BA2   31 80 18               LD   SP,STACK   
4BA5   CD A1 08               CALL   init   
4BA8   CD 94 08               CALL   execStr   
4BAB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
4BB3                          ;*Macro unroll:  expect "7 3 / _",1
4BB3   E1                     POP   HL   
4BB4   E5                     PUSH   HL   
4BB5   11 01 00               LD   DE,1   
4BB8   B7                     OR   A   
4BB9   ED 52                  SBC   HL,DE   
4BBB   7D                     LD   A,L   
4BBC   B4                     OR   H   
4BBD   28 52                  JR   Z,expectM_0_2214S43   
4BBF   CD 8D 08               CALL   printStr   
4BC2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
4BD0   CD 8D 08               CALL   printStr   
4BD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BE2   21 01 00               LD   HL,1   
4BE5   CD DB 07               CALL   prtdec   
4BE8   CD 8D 08               CALL   printStr   
4BEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BF8   E1                     POP   hl   
4BF9   E5                     PUSH   hl   
4BFA   CD DB 07               CALL   prtdec   
4BFD   E1                     POP   hl   
4BFE   CD 8D 08               CALL   printStr   
4C01   20 28 23 00            .CSTR   " (#"   
4C05   CD 23 08               CALL   prthex   
4C08   CD 8D 08               CALL   printStr   
4C0B   29 0D 0A 00            .CSTR   ")\r\n"   
4C0F   76                     HALT      
4C10   00                     .CSTR      
4C11                EXPECTM_0_2214S43:      
4C11   E1                     POP   HL   
4C12                          ;*Macro unroll:  test "2 3 ==", FALSE
4C12   31 80 18               LD   SP,STACK   
4C15   CD A1 08               CALL   init   
4C18   CD 94 08               CALL   execStr   
4C1B   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4C22                          ;*Macro unroll:  expect "2 3 ==",FALSE
4C22   E1                     POP   HL   
4C23   E5                     PUSH   HL   
4C24   11 00 00               LD   DE,FALSE   
4C27   B7                     OR   A   
4C28   ED 52                  SBC   HL,DE   
4C2A   7D                     LD   A,L   
4C2B   B4                     OR   H   
4C2C   28 51                  JR   Z,expectM_0_2215S43   
4C2E   CD 8D 08               CALL   printStr   
4C31   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4C3E   CD 8D 08               CALL   printStr   
4C41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C50   21 00 00               LD   HL,FALSE   
4C53   CD DB 07               CALL   prtdec   
4C56   CD 8D 08               CALL   printStr   
4C59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C66   E1                     POP   hl   
4C67   E5                     PUSH   hl   
4C68   CD DB 07               CALL   prtdec   
4C6B   E1                     POP   hl   
4C6C   CD 8D 08               CALL   printStr   
4C6F   20 28 23 00            .CSTR   " (#"   
4C73   CD 23 08               CALL   prthex   
4C76   CD 8D 08               CALL   printStr   
4C79   29 0D 0A 00            .CSTR   ")\r\n"   
4C7D   76                     HALT      
4C7E   00                     .CSTR      
4C7F                EXPECTM_0_2215S43:      
4C7F   E1                     POP   HL   
4C80                          ;*Macro unroll:  test "3 3 ==", TRUE
4C80   31 80 18               LD   SP,STACK   
4C83   CD A1 08               CALL   init   
4C86   CD 94 08               CALL   execStr   
4C89   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4C90                          ;*Macro unroll:  expect "3 3 ==",TRUE
4C90   E1                     POP   HL   
4C91   E5                     PUSH   HL   
4C92   11 FF FF               LD   DE,TRUE   
4C95   B7                     OR   A   
4C96   ED 52                  SBC   HL,DE   
4C98   7D                     LD   A,L   
4C99   B4                     OR   H   
4C9A   28 51                  JR   Z,expectM_0_2216S43   
4C9C   CD 8D 08               CALL   printStr   
4C9F   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4CAC   CD 8D 08               CALL   printStr   
4CAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CBE   21 FF FF               LD   HL,TRUE   
4CC1   CD DB 07               CALL   prtdec   
4CC4   CD 8D 08               CALL   printStr   
4CC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD4   E1                     POP   hl   
4CD5   E5                     PUSH   hl   
4CD6   CD DB 07               CALL   prtdec   
4CD9   E1                     POP   hl   
4CDA   CD 8D 08               CALL   printStr   
4CDD   20 28 23 00            .CSTR   " (#"   
4CE1   CD 23 08               CALL   prthex   
4CE4   CD 8D 08               CALL   printStr   
4CE7   29 0D 0A 00            .CSTR   ")\r\n"   
4CEB   76                     HALT      
4CEC   00                     .CSTR      
4CED                EXPECTM_0_2216S43:      
4CED   E1                     POP   HL   
4CEE                          ;*Macro unroll:  test "1 2 <", TRUE
4CEE   31 80 18               LD   SP,STACK   
4CF1   CD A1 08               CALL   init   
4CF4   CD 94 08               CALL   execStr   
4CF7   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4CFD                          ;*Macro unroll:  expect "1 2 <",TRUE
4CFD   E1                     POP   HL   
4CFE   E5                     PUSH   HL   
4CFF   11 FF FF               LD   DE,TRUE   
4D02   B7                     OR   A   
4D03   ED 52                  SBC   HL,DE   
4D05   7D                     LD   A,L   
4D06   B4                     OR   H   
4D07   28 50                  JR   Z,expectM_0_2217S43   
4D09   CD 8D 08               CALL   printStr   
4D0C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D18   CD 8D 08               CALL   printStr   
4D1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D2A   21 FF FF               LD   HL,TRUE   
4D2D   CD DB 07               CALL   prtdec   
4D30   CD 8D 08               CALL   printStr   
4D33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D40   E1                     POP   hl   
4D41   E5                     PUSH   hl   
4D42   CD DB 07               CALL   prtdec   
4D45   E1                     POP   hl   
4D46   CD 8D 08               CALL   printStr   
4D49   20 28 23 00            .CSTR   " (#"   
4D4D   CD 23 08               CALL   prthex   
4D50   CD 8D 08               CALL   printStr   
4D53   29 0D 0A 00            .CSTR   ")\r\n"   
4D57   76                     HALT      
4D58   00                     .CSTR      
4D59                EXPECTM_0_2217S43:      
4D59   E1                     POP   HL   
4D5A                          ;*Macro unroll:  test "2 1 <", FALSE
4D5A   31 80 18               LD   SP,STACK   
4D5D   CD A1 08               CALL   init   
4D60   CD 94 08               CALL   execStr   
4D63   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D69                          ;*Macro unroll:  expect "2 1 <",FALSE
4D69   E1                     POP   HL   
4D6A   E5                     PUSH   HL   
4D6B   11 00 00               LD   DE,FALSE   
4D6E   B7                     OR   A   
4D6F   ED 52                  SBC   HL,DE   
4D71   7D                     LD   A,L   
4D72   B4                     OR   H   
4D73   28 50                  JR   Z,expectM_0_2218S43   
4D75   CD 8D 08               CALL   printStr   
4D78   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4D84   CD 8D 08               CALL   printStr   
4D87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D96   21 00 00               LD   HL,FALSE   
4D99   CD DB 07               CALL   prtdec   
4D9C   CD 8D 08               CALL   printStr   
4D9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DAC   E1                     POP   hl   
4DAD   E5                     PUSH   hl   
4DAE   CD DB 07               CALL   prtdec   
4DB1   E1                     POP   hl   
4DB2   CD 8D 08               CALL   printStr   
4DB5   20 28 23 00            .CSTR   " (#"   
4DB9   CD 23 08               CALL   prthex   
4DBC   CD 8D 08               CALL   printStr   
4DBF   29 0D 0A 00            .CSTR   ")\r\n"   
4DC3   76                     HALT      
4DC4   00                     .CSTR      
4DC5                EXPECTM_0_2218S43:      
4DC5   E1                     POP   HL   
4DC6                          ;*Macro unroll:  test "2 3 <", TRUE
4DC6   31 80 18               LD   SP,STACK   
4DC9   CD A1 08               CALL   init   
4DCC   CD 94 08               CALL   execStr   
4DCF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4DD5                          ;*Macro unroll:  expect "2 3 <",TRUE
4DD5   E1                     POP   HL   
4DD6   E5                     PUSH   HL   
4DD7   11 FF FF               LD   DE,TRUE   
4DDA   B7                     OR   A   
4DDB   ED 52                  SBC   HL,DE   
4DDD   7D                     LD   A,L   
4DDE   B4                     OR   H   
4DDF   28 50                  JR   Z,expectM_0_2219S43   
4DE1   CD 8D 08               CALL   printStr   
4DE4   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4DF0   CD 8D 08               CALL   printStr   
4DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E02   21 FF FF               LD   HL,TRUE   
4E05   CD DB 07               CALL   prtdec   
4E08   CD 8D 08               CALL   printStr   
4E0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E18   E1                     POP   hl   
4E19   E5                     PUSH   hl   
4E1A   CD DB 07               CALL   prtdec   
4E1D   E1                     POP   hl   
4E1E   CD 8D 08               CALL   printStr   
4E21   20 28 23 00            .CSTR   " (#"   
4E25   CD 23 08               CALL   prthex   
4E28   CD 8D 08               CALL   printStr   
4E2B   29 0D 0A 00            .CSTR   ")\r\n"   
4E2F   76                     HALT      
4E30   00                     .CSTR      
4E31                EXPECTM_0_2219S43:      
4E31   E1                     POP   HL   
4E32                          ;*Macro unroll:  test "3 3 <", FALSE
4E32   31 80 18               LD   SP,STACK   
4E35   CD A1 08               CALL   init   
4E38   CD 94 08               CALL   execStr   
4E3B   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4E41                          ;*Macro unroll:  expect "3 3 <",FALSE
4E41   E1                     POP   HL   
4E42   E5                     PUSH   HL   
4E43   11 00 00               LD   DE,FALSE   
4E46   B7                     OR   A   
4E47   ED 52                  SBC   HL,DE   
4E49   7D                     LD   A,L   
4E4A   B4                     OR   H   
4E4B   28 50                  JR   Z,expectM_0_2220S43   
4E4D   CD 8D 08               CALL   printStr   
4E50   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4E5C   CD 8D 08               CALL   printStr   
4E5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E6E   21 00 00               LD   HL,FALSE   
4E71   CD DB 07               CALL   prtdec   
4E74   CD 8D 08               CALL   printStr   
4E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E84   E1                     POP   hl   
4E85   E5                     PUSH   hl   
4E86   CD DB 07               CALL   prtdec   
4E89   E1                     POP   hl   
4E8A   CD 8D 08               CALL   printStr   
4E8D   20 28 23 00            .CSTR   " (#"   
4E91   CD 23 08               CALL   prthex   
4E94   CD 8D 08               CALL   printStr   
4E97   29 0D 0A 00            .CSTR   ")\r\n"   
4E9B   76                     HALT      
4E9C   00                     .CSTR      
4E9D                EXPECTM_0_2220S43:      
4E9D   E1                     POP   HL   
4E9E                          ;*Macro unroll:  test "1 2 >", FALSE
4E9E   31 80 18               LD   SP,STACK   
4EA1   CD A1 08               CALL   init   
4EA4   CD 94 08               CALL   execStr   
4EA7   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4EAD                          ;*Macro unroll:  expect "1 2 >",FALSE
4EAD   E1                     POP   HL   
4EAE   E5                     PUSH   HL   
4EAF   11 00 00               LD   DE,FALSE   
4EB2   B7                     OR   A   
4EB3   ED 52                  SBC   HL,DE   
4EB5   7D                     LD   A,L   
4EB6   B4                     OR   H   
4EB7   28 50                  JR   Z,expectM_0_2221S43   
4EB9   CD 8D 08               CALL   printStr   
4EBC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4EC8   CD 8D 08               CALL   printStr   
4ECB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EDA   21 00 00               LD   HL,FALSE   
4EDD   CD DB 07               CALL   prtdec   
4EE0   CD 8D 08               CALL   printStr   
4EE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EF0   E1                     POP   hl   
4EF1   E5                     PUSH   hl   
4EF2   CD DB 07               CALL   prtdec   
4EF5   E1                     POP   hl   
4EF6   CD 8D 08               CALL   printStr   
4EF9   20 28 23 00            .CSTR   " (#"   
4EFD   CD 23 08               CALL   prthex   
4F00   CD 8D 08               CALL   printStr   
4F03   29 0D 0A 00            .CSTR   ")\r\n"   
4F07   76                     HALT      
4F08   00                     .CSTR      
4F09                EXPECTM_0_2221S43:      
4F09   E1                     POP   HL   
4F0A                          ;*Macro unroll:  test "2 1 >", TRUE
4F0A   31 80 18               LD   SP,STACK   
4F0D   CD A1 08               CALL   init   
4F10   CD 94 08               CALL   execStr   
4F13   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F19                          ;*Macro unroll:  expect "2 1 >",TRUE
4F19   E1                     POP   HL   
4F1A   E5                     PUSH   HL   
4F1B   11 FF FF               LD   DE,TRUE   
4F1E   B7                     OR   A   
4F1F   ED 52                  SBC   HL,DE   
4F21   7D                     LD   A,L   
4F22   B4                     OR   H   
4F23   28 50                  JR   Z,expectM_0_2222S43   
4F25   CD 8D 08               CALL   printStr   
4F28   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4F34   CD 8D 08               CALL   printStr   
4F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F46   21 FF FF               LD   HL,TRUE   
4F49   CD DB 07               CALL   prtdec   
4F4C   CD 8D 08               CALL   printStr   
4F4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F5C   E1                     POP   hl   
4F5D   E5                     PUSH   hl   
4F5E   CD DB 07               CALL   prtdec   
4F61   E1                     POP   hl   
4F62   CD 8D 08               CALL   printStr   
4F65   20 28 23 00            .CSTR   " (#"   
4F69   CD 23 08               CALL   prthex   
4F6C   CD 8D 08               CALL   printStr   
4F6F   29 0D 0A 00            .CSTR   ")\r\n"   
4F73   76                     HALT      
4F74   00                     .CSTR      
4F75                EXPECTM_0_2222S43:      
4F75   E1                     POP   HL   
4F76                          ;*Macro unroll:  test "3 3 >", FALSE
4F76   31 80 18               LD   SP,STACK   
4F79   CD A1 08               CALL   init   
4F7C   CD 94 08               CALL   execStr   
4F7F   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4F85                          ;*Macro unroll:  expect "3 3 >",FALSE
4F85   E1                     POP   HL   
4F86   E5                     PUSH   HL   
4F87   11 00 00               LD   DE,FALSE   
4F8A   B7                     OR   A   
4F8B   ED 52                  SBC   HL,DE   
4F8D   7D                     LD   A,L   
4F8E   B4                     OR   H   
4F8F   28 50                  JR   Z,expectM_0_2223S43   
4F91   CD 8D 08               CALL   printStr   
4F94   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4FA0   CD 8D 08               CALL   printStr   
4FA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FB2   21 00 00               LD   HL,FALSE   
4FB5   CD DB 07               CALL   prtdec   
4FB8   CD 8D 08               CALL   printStr   
4FBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FC8   E1                     POP   hl   
4FC9   E5                     PUSH   hl   
4FCA   CD DB 07               CALL   prtdec   
4FCD   E1                     POP   hl   
4FCE   CD 8D 08               CALL   printStr   
4FD1   20 28 23 00            .CSTR   " (#"   
4FD5   CD 23 08               CALL   prthex   
4FD8   CD 8D 08               CALL   printStr   
4FDB   29 0D 0A 00            .CSTR   ")\r\n"   
4FDF   76                     HALT      
4FE0   00                     .CSTR      
4FE1                EXPECTM_0_2223S43:      
4FE1   E1                     POP   HL   
4FE2                          ;*Macro unroll:  test "4 3 >", TRUE
4FE2   31 80 18               LD   SP,STACK   
4FE5   CD A1 08               CALL   init   
4FE8   CD 94 08               CALL   execStr   
4FEB   34 20 33 20 3E 00      .CSTR   "4 3 >"   
4FF1                          ;*Macro unroll:  expect "4 3 >",TRUE
4FF1   E1                     POP   HL   
4FF2   E5                     PUSH   HL   
4FF3   11 FF FF               LD   DE,TRUE   
4FF6   B7                     OR   A   
4FF7   ED 52                  SBC   HL,DE   
4FF9   7D                     LD   A,L   
4FFA   B4                     OR   H   
4FFB   28 50                  JR   Z,expectM_0_2224S43   
4FFD   CD 8D 08               CALL   printStr   
5000   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
500C   CD 8D 08               CALL   printStr   
500F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
501E   21 FF FF               LD   HL,TRUE   
5021   CD DB 07               CALL   prtdec   
5024   CD 8D 08               CALL   printStr   
5027   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5034   E1                     POP   hl   
5035   E5                     PUSH   hl   
5036   CD DB 07               CALL   prtdec   
5039   E1                     POP   hl   
503A   CD 8D 08               CALL   printStr   
503D   20 28 23 00            .CSTR   " (#"   
5041   CD 23 08               CALL   prthex   
5044   CD 8D 08               CALL   printStr   
5047   29 0D 0A 00            .CSTR   ")\r\n"   
504B   76                     HALT      
504C   00                     .CSTR      
504D                EXPECTM_0_2224S43:      
504D   E1                     POP   HL   
504E                          ;*Macro unroll:  test "2 2 <=", TRUE
504E   31 80 18               LD   SP,STACK   
5051   CD A1 08               CALL   init   
5054   CD 94 08               CALL   execStr   
5057   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
505E                          ;*Macro unroll:  expect "2 2 <=",TRUE
505E   E1                     POP   HL   
505F   E5                     PUSH   HL   
5060   11 FF FF               LD   DE,TRUE   
5063   B7                     OR   A   
5064   ED 52                  SBC   HL,DE   
5066   7D                     LD   A,L   
5067   B4                     OR   H   
5068   28 51                  JR   Z,expectM_0_2225S43   
506A   CD 8D 08               CALL   printStr   
506D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
507A   CD 8D 08               CALL   printStr   
507D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
508C   21 FF FF               LD   HL,TRUE   
508F   CD DB 07               CALL   prtdec   
5092   CD 8D 08               CALL   printStr   
5095   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50A2   E1                     POP   hl   
50A3   E5                     PUSH   hl   
50A4   CD DB 07               CALL   prtdec   
50A7   E1                     POP   hl   
50A8   CD 8D 08               CALL   printStr   
50AB   20 28 23 00            .CSTR   " (#"   
50AF   CD 23 08               CALL   prthex   
50B2   CD 8D 08               CALL   printStr   
50B5   29 0D 0A 00            .CSTR   ")\r\n"   
50B9   76                     HALT      
50BA   00                     .CSTR      
50BB                EXPECTM_0_2225S43:      
50BB   E1                     POP   HL   
50BC                          ;*Macro unroll:  test "2 2 >=", TRUE
50BC   31 80 18               LD   SP,STACK   
50BF   CD A1 08               CALL   init   
50C2   CD 94 08               CALL   execStr   
50C5   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
50CC                          ;*Macro unroll:  expect "2 2 >=",TRUE
50CC   E1                     POP   HL   
50CD   E5                     PUSH   HL   
50CE   11 FF FF               LD   DE,TRUE   
50D1   B7                     OR   A   
50D2   ED 52                  SBC   HL,DE   
50D4   7D                     LD   A,L   
50D5   B4                     OR   H   
50D6   28 51                  JR   Z,expectM_0_2226S43   
50D8   CD 8D 08               CALL   printStr   
50DB   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
50E8   CD 8D 08               CALL   printStr   
50EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50FA   21 FF FF               LD   HL,TRUE   
50FD   CD DB 07               CALL   prtdec   
5100   CD 8D 08               CALL   printStr   
5103   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5110   E1                     POP   hl   
5111   E5                     PUSH   hl   
5112   CD DB 07               CALL   prtdec   
5115   E1                     POP   hl   
5116   CD 8D 08               CALL   printStr   
5119   20 28 23 00            .CSTR   " (#"   
511D   CD 23 08               CALL   prthex   
5120   CD 8D 08               CALL   printStr   
5123   29 0D 0A 00            .CSTR   ")\r\n"   
5127   76                     HALT      
5128   00                     .CSTR      
5129                EXPECTM_0_2226S43:      
5129   E1                     POP   HL   
512A                          ;*Macro unroll:  test "3 1 <<", 6
512A   31 80 18               LD   SP,STACK   
512D   CD A1 08               CALL   init   
5130   CD 94 08               CALL   execStr   
5133   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
513A                          ;*Macro unroll:  expect "3 1 <<",6
513A   E1                     POP   HL   
513B   E5                     PUSH   HL   
513C   11 06 00               LD   DE,6   
513F   B7                     OR   A   
5140   ED 52                  SBC   HL,DE   
5142   7D                     LD   A,L   
5143   B4                     OR   H   
5144   28 51                  JR   Z,expectM_0_2227S43   
5146   CD 8D 08               CALL   printStr   
5149   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
5156   CD 8D 08               CALL   printStr   
5159   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5168   21 06 00               LD   HL,6   
516B   CD DB 07               CALL   prtdec   
516E   CD 8D 08               CALL   printStr   
5171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
517E   E1                     POP   hl   
517F   E5                     PUSH   hl   
5180   CD DB 07               CALL   prtdec   
5183   E1                     POP   hl   
5184   CD 8D 08               CALL   printStr   
5187   20 28 23 00            .CSTR   " (#"   
518B   CD 23 08               CALL   prthex   
518E   CD 8D 08               CALL   printStr   
5191   29 0D 0A 00            .CSTR   ")\r\n"   
5195   76                     HALT      
5196   00                     .CSTR      
5197                EXPECTM_0_2227S43:      
5197   E1                     POP   HL   
5198                          ;*Macro unroll:  test "10 1 >>", 5
5198   31 80 18               LD   SP,STACK   
519B   CD A1 08               CALL   init   
519E   CD 94 08               CALL   execStr   
51A1   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
51A9                          ;*Macro unroll:  expect "10 1 >>",5
51A9   E1                     POP   HL   
51AA   E5                     PUSH   HL   
51AB   11 05 00               LD   DE,5   
51AE   B7                     OR   A   
51AF   ED 52                  SBC   HL,DE   
51B1   7D                     LD   A,L   
51B2   B4                     OR   H   
51B3   28 52                  JR   Z,expectM_0_2228S43   
51B5   CD 8D 08               CALL   printStr   
51B8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
51C6   CD 8D 08               CALL   printStr   
51C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51D8   21 05 00               LD   HL,5   
51DB   CD DB 07               CALL   prtdec   
51DE   CD 8D 08               CALL   printStr   
51E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51EE   E1                     POP   hl   
51EF   E5                     PUSH   hl   
51F0   CD DB 07               CALL   prtdec   
51F3   E1                     POP   hl   
51F4   CD 8D 08               CALL   printStr   
51F7   20 28 23 00            .CSTR   " (#"   
51FB   CD 23 08               CALL   prthex   
51FE   CD 8D 08               CALL   printStr   
5201   29 0D 0A 00            .CSTR   ")\r\n"   
5205   76                     HALT      
5206   00                     .CSTR      
5207                EXPECTM_0_2228S43:      
5207   E1                     POP   HL   
5208                          ;*Macro unroll:  test "1 x = x", 1
5208   31 80 18               LD   SP,STACK   
520B   CD A1 08               CALL   init   
520E   CD 94 08               CALL   execStr   
5211   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
5219                          ;*Macro unroll:  expect "1 x = x",1
5219   E1                     POP   HL   
521A   E5                     PUSH   HL   
521B   11 01 00               LD   DE,1   
521E   B7                     OR   A   
521F   ED 52                  SBC   HL,DE   
5221   7D                     LD   A,L   
5222   B4                     OR   H   
5223   28 52                  JR   Z,expectM_0_2229S43   
5225   CD 8D 08               CALL   printStr   
5228   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
5236   CD 8D 08               CALL   printStr   
5239   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5248   21 01 00               LD   HL,1   
524B   CD DB 07               CALL   prtdec   
524E   CD 8D 08               CALL   printStr   
5251   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
525E   E1                     POP   hl   
525F   E5                     PUSH   hl   
5260   CD DB 07               CALL   prtdec   
5263   E1                     POP   hl   
5264   CD 8D 08               CALL   printStr   
5267   20 28 23 00            .CSTR   " (#"   
526B   CD 23 08               CALL   prthex   
526E   CD 8D 08               CALL   printStr   
5271   29 0D 0A 00            .CSTR   ")\r\n"   
5275   76                     HALT      
5276   00                     .CSTR      
5277                EXPECTM_0_2229S43:      
5277   E1                     POP   HL   
5278                          ;*Macro unroll:  test "{1}:", 1
5278   31 80 18               LD   SP,STACK   
527B   CD A1 08               CALL   init   
527E   CD 94 08               CALL   execStr   
5281   7B 31 7D 3A 00         .CSTR   "{1}:"   
5286                          ;*Macro unroll:  expect "{1}:",1
5286   E1                     POP   HL   
5287   E5                     PUSH   HL   
5288   11 01 00               LD   DE,1   
528B   B7                     OR   A   
528C   ED 52                  SBC   HL,DE   
528E   7D                     LD   A,L   
528F   B4                     OR   H   
5290   28 4F                  JR   Z,expectM_0_2230S43   
5292   CD 8D 08               CALL   printStr   
5295   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
52A0   CD 8D 08               CALL   printStr   
52A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52B2   21 01 00               LD   HL,1   
52B5   CD DB 07               CALL   prtdec   
52B8   CD 8D 08               CALL   printStr   
52BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52C8   E1                     POP   hl   
52C9   E5                     PUSH   hl   
52CA   CD DB 07               CALL   prtdec   
52CD   E1                     POP   hl   
52CE   CD 8D 08               CALL   printStr   
52D1   20 28 23 00            .CSTR   " (#"   
52D5   CD 23 08               CALL   prthex   
52D8   CD 8D 08               CALL   printStr   
52DB   29 0D 0A 00            .CSTR   ")\r\n"   
52DF   76                     HALT      
52E0   00                     .CSTR      
52E1                EXPECTM_0_2230S43:      
52E1   E1                     POP   HL   
52E2                          ;*Macro unroll:  test "{{1}:}:", 1
52E2   31 80 18               LD   SP,STACK   
52E5   CD A1 08               CALL   init   
52E8   CD 94 08               CALL   execStr   
52EB   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
52F3                          ;*Macro unroll:  expect "{{1}:}:",1
52F3   E1                     POP   HL   
52F4   E5                     PUSH   HL   
52F5   11 01 00               LD   DE,1   
52F8   B7                     OR   A   
52F9   ED 52                  SBC   HL,DE   
52FB   7D                     LD   A,L   
52FC   B4                     OR   H   
52FD   28 52                  JR   Z,expectM_0_2231S43   
52FF   CD 8D 08               CALL   printStr   
5302   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
5310   CD 8D 08               CALL   printStr   
5313   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5322   21 01 00               LD   HL,1   
5325   CD DB 07               CALL   prtdec   
5328   CD 8D 08               CALL   printStr   
532B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5338   E1                     POP   hl   
5339   E5                     PUSH   hl   
533A   CD DB 07               CALL   prtdec   
533D   E1                     POP   hl   
533E   CD 8D 08               CALL   printStr   
5341   20 28 23 00            .CSTR   " (#"   
5345   CD 23 08               CALL   prthex   
5348   CD 8D 08               CALL   printStr   
534B   29 0D 0A 00            .CSTR   ")\r\n"   
534F   76                     HALT      
5350   00                     .CSTR      
5351                EXPECTM_0_2231S43:      
5351   E1                     POP   HL   
5352                          ;*Macro unroll:  test "{{{1}:}:}:", 1
5352   31 80 18               LD   SP,STACK   
5355   CD A1 08               CALL   init   
5358   CD 94 08               CALL   execStr   
535B   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
5366                          ;*Macro unroll:  expect "{{{1}:}:}:",1
5366   E1                     POP   HL   
5367   E5                     PUSH   HL   
5368   11 01 00               LD   DE,1   
536B   B7                     OR   A   
536C   ED 52                  SBC   HL,DE   
536E   7D                     LD   A,L   
536F   B4                     OR   H   
5370   28 55                  JR   Z,expectM_0_2232S43   
5372   CD 8D 08               CALL   printStr   
5375   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
5386   CD 8D 08               CALL   printStr   
5389   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5398   21 01 00               LD   HL,1   
539B   CD DB 07               CALL   prtdec   
539E   CD 8D 08               CALL   printStr   
53A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53AE   E1                     POP   hl   
53AF   E5                     PUSH   hl   
53B0   CD DB 07               CALL   prtdec   
53B3   E1                     POP   hl   
53B4   CD 8D 08               CALL   printStr   
53B7   20 28 23 00            .CSTR   " (#"   
53BB   CD 23 08               CALL   prthex   
53BE   CD 8D 08               CALL   printStr   
53C1   29 0D 0A 00            .CSTR   ")\r\n"   
53C5   76                     HALT      
53C6   00                     .CSTR      
53C7                EXPECTM_0_2232S43:      
53C7   E1                     POP   HL   
53C8                          ;*Macro unroll:  test "5 \\F {10} ?", 5
53C8   31 80 18               LD   SP,STACK   
53CB   CD A1 08               CALL   init   
53CE   CD 94 08               CALL   execStr   
53D1   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
53DD                          ;*Macro unroll:  expect "5 \\F {10} ?",5
53DD   E1                     POP   HL   
53DE   E5                     PUSH   HL   
53DF   11 05 00               LD   DE,5   
53E2   B7                     OR   A   
53E3   ED 52                  SBC   HL,DE   
53E5   7D                     LD   A,L   
53E6   B4                     OR   H   
53E7   28 56                  JR   Z,expectM_0_2233S43   
53E9   CD 8D 08               CALL   printStr   
53EC   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
53FE   CD 8D 08               CALL   printStr   
5401   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5410   21 05 00               LD   HL,5   
5413   CD DB 07               CALL   prtdec   
5416   CD 8D 08               CALL   printStr   
5419   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5426   E1                     POP   hl   
5427   E5                     PUSH   hl   
5428   CD DB 07               CALL   prtdec   
542B   E1                     POP   hl   
542C   CD 8D 08               CALL   printStr   
542F   20 28 23 00            .CSTR   " (#"   
5433   CD 23 08               CALL   prthex   
5436   CD 8D 08               CALL   printStr   
5439   29 0D 0A 00            .CSTR   ")\r\n"   
543D   76                     HALT      
543E   00                     .CSTR      
543F                EXPECTM_0_2233S43:      
543F   E1                     POP   HL   
5440                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
5440   31 80 18               LD   SP,STACK   
5443   CD A1 08               CALL   init   
5446   CD 94 08               CALL   execStr   
5449   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
5457                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
5457   E1                     POP   HL   
5458   E5                     PUSH   HL   
5459   11 0F 00               LD   DE,15   
545C   B7                     OR   A   
545D   ED 52                  SBC   HL,DE   
545F   7D                     LD   A,L   
5460   B4                     OR   H   
5461   28 58                  JR   Z,expectM_0_2234S43   
5463   CD 8D 08               CALL   printStr   
5466   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
547A   CD 8D 08               CALL   printStr   
547D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
548C   21 0F 00               LD   HL,15   
548F   CD DB 07               CALL   prtdec   
5492   CD 8D 08               CALL   printStr   
5495   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54A2   E1                     POP   hl   
54A3   E5                     PUSH   hl   
54A4   CD DB 07               CALL   prtdec   
54A7   E1                     POP   hl   
54A8   CD 8D 08               CALL   printStr   
54AB   20 28 23 00            .CSTR   " (#"   
54AF   CD 23 08               CALL   prthex   
54B2   CD 8D 08               CALL   printStr   
54B5   29 0D 0A 00            .CSTR   ")\r\n"   
54B9   76                     HALT      
54BA   00                     .CSTR      
54BB                EXPECTM_0_2234S43:      
54BB   E1                     POP   HL   
54BC                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
54BC   31 80 18               LD   SP,STACK   
54BF   CD A1 08               CALL   init   
54C2   CD 94 08               CALL   execStr   
54C5   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
54D9                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
54D9   E1                     POP   HL   
54DA   E5                     PUSH   HL   
54DB   11 15 00               LD   DE,21   
54DE   B7                     OR   A   
54DF   ED 52                  SBC   HL,DE   
54E1   7D                     LD   A,L   
54E2   B4                     OR   H   
54E3   28 5E                  JR   Z,expectM_0_2235S43   
54E5   CD 8D 08               CALL   printStr   
54E8   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
5502   CD 8D 08               CALL   printStr   
5505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5514   21 15 00               LD   HL,21   
5517   CD DB 07               CALL   prtdec   
551A   CD 8D 08               CALL   printStr   
551D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
552A   E1                     POP   hl   
552B   E5                     PUSH   hl   
552C   CD DB 07               CALL   prtdec   
552F   E1                     POP   hl   
5530   CD 8D 08               CALL   printStr   
5533   20 28 23 00            .CSTR   " (#"   
5537   CD 23 08               CALL   prthex   
553A   CD 8D 08               CALL   printStr   
553D   29 0D 0A 00            .CSTR   ")\r\n"   
5541   76                     HALT      
5542   00                     .CSTR      
5543                EXPECTM_0_2235S43:      
5543   E1                     POP   HL   
5544                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
5544   31 80 18               LD   SP,STACK   
5547   CD A1 08               CALL   init   
554A   CD 94 08               CALL   execStr   
554D   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
5561                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
5561   E1                     POP   HL   
5562   E5                     PUSH   HL   
5563   11 0B 00               LD   DE,11   
5566   B7                     OR   A   
5567   ED 52                  SBC   HL,DE   
5569   7D                     LD   A,L   
556A   B4                     OR   H   
556B   28 5E                  JR   Z,expectM_0_2236S43   
556D   CD 8D 08               CALL   printStr   
5570   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
558A   CD 8D 08               CALL   printStr   
558D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
559C   21 0B 00               LD   HL,11   
559F   CD DB 07               CALL   prtdec   
55A2   CD 8D 08               CALL   printStr   
55A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55B2   E1                     POP   hl   
55B3   E5                     PUSH   hl   
55B4   CD DB 07               CALL   prtdec   
55B7   E1                     POP   hl   
55B8   CD 8D 08               CALL   printStr   
55BB   20 28 23 00            .CSTR   " (#"   
55BF   CD 23 08               CALL   prthex   
55C2   CD 8D 08               CALL   printStr   
55C5   29 0D 0A 00            .CSTR   ")\r\n"   
55C9   76                     HALT      
55CA   00                     .CSTR      
55CB                EXPECTM_0_2236S43:      
55CB   E1                     POP   HL   
55CC                          ;*Macro unroll:  test "() -2%", $0000
55CC   31 80 18               LD   SP,STACK   
55CF   CD A1 08               CALL   init   
55D2   CD 94 08               CALL   execStr   
55D5   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
55DC                          ;*Macro unroll:  expect "() -2%",$0000
55DC   E1                     POP   HL   
55DD   E5                     PUSH   HL   
55DE   11 00 00               LD   DE,$0000   
55E1   B7                     OR   A   
55E2   ED 52                  SBC   HL,DE   
55E4   7D                     LD   A,L   
55E5   B4                     OR   H   
55E6   28 51                  JR   Z,expectM_0_2237S43   
55E8   CD 8D 08               CALL   printStr   
55EB   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
55F8   CD 8D 08               CALL   printStr   
55FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
560A   21 00 00               LD   HL,$0000   
560D   CD DB 07               CALL   prtdec   
5610   CD 8D 08               CALL   printStr   
5613   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5620   E1                     POP   hl   
5621   E5                     PUSH   hl   
5622   CD DB 07               CALL   prtdec   
5625   E1                     POP   hl   
5626   CD 8D 08               CALL   printStr   
5629   20 28 23 00            .CSTR   " (#"   
562D   CD 23 08               CALL   prthex   
5630   CD 8D 08               CALL   printStr   
5633   29 0D 0A 00            .CSTR   ")\r\n"   
5637   76                     HALT      
5638   00                     .CSTR      
5639                EXPECTM_0_2237S43:      
5639   E1                     POP   HL   
563A                          ;*Macro unroll:  test "(a) -1%", $0001
563A   31 80 18               LD   SP,STACK   
563D   CD A1 08               CALL   init   
5640   CD 94 08               CALL   execStr   
5643   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
564B                          ;*Macro unroll:  expect "(a) -1%",$0001
564B   E1                     POP   HL   
564C   E5                     PUSH   HL   
564D   11 01 00               LD   DE,$0001   
5650   B7                     OR   A   
5651   ED 52                  SBC   HL,DE   
5653   7D                     LD   A,L   
5654   B4                     OR   H   
5655   28 52                  JR   Z,expectM_0_2238S43   
5657   CD 8D 08               CALL   printStr   
565A   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
5668   CD 8D 08               CALL   printStr   
566B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
567A   21 01 00               LD   HL,$0001   
567D   CD DB 07               CALL   prtdec   
5680   CD 8D 08               CALL   printStr   
5683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5690   E1                     POP   hl   
5691   E5                     PUSH   hl   
5692   CD DB 07               CALL   prtdec   
5695   E1                     POP   hl   
5696   CD 8D 08               CALL   printStr   
5699   20 28 23 00            .CSTR   " (#"   
569D   CD 23 08               CALL   prthex   
56A0   CD 8D 08               CALL   printStr   
56A3   29 0D 0A 00            .CSTR   ")\r\n"   
56A7   76                     HALT      
56A8   00                     .CSTR      
56A9                EXPECTM_0_2238S43:      
56A9   E1                     POP   HL   
56AA                          ;*Macro unroll:  test "(a:) -1%", $0001
56AA   31 80 18               LD   SP,STACK   
56AD   CD A1 08               CALL   init   
56B0   CD 94 08               CALL   execStr   
56B3   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
56BC                          ;*Macro unroll:  expect "(a:) -1%",$0001
56BC   E1                     POP   HL   
56BD   E5                     PUSH   HL   
56BE   11 01 00               LD   DE,$0001   
56C1   B7                     OR   A   
56C2   ED 52                  SBC   HL,DE   
56C4   7D                     LD   A,L   
56C5   B4                     OR   H   
56C6   28 53                  JR   Z,expectM_0_2239S43   
56C8   CD 8D 08               CALL   printStr   
56CB   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
56DA   CD 8D 08               CALL   printStr   
56DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56EC   21 01 00               LD   HL,$0001   
56EF   CD DB 07               CALL   prtdec   
56F2   CD 8D 08               CALL   printStr   
56F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5702   E1                     POP   hl   
5703   E5                     PUSH   hl   
5704   CD DB 07               CALL   prtdec   
5707   E1                     POP   hl   
5708   CD 8D 08               CALL   printStr   
570B   20 28 23 00            .CSTR   " (#"   
570F   CD 23 08               CALL   prthex   
5712   CD 8D 08               CALL   printStr   
5715   29 0D 0A 00            .CSTR   ")\r\n"   
5719   76                     HALT      
571A   00                     .CSTR      
571B                EXPECTM_0_2239S43:      
571B   E1                     POP   HL   
571C                          ;*Macro unroll:  test "(a:b) -1%", $0102
571C   31 80 18               LD   SP,STACK   
571F   CD A1 08               CALL   init   
5722   CD 94 08               CALL   execStr   
5725   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
572F                          ;*Macro unroll:  expect "(a:b) -1%",$0102
572F   E1                     POP   HL   
5730   E5                     PUSH   HL   
5731   11 02 01               LD   DE,$0102   
5734   B7                     OR   A   
5735   ED 52                  SBC   HL,DE   
5737   7D                     LD   A,L   
5738   B4                     OR   H   
5739   28 54                  JR   Z,expectM_0_2240S43   
573B   CD 8D 08               CALL   printStr   
573E   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
574E   CD 8D 08               CALL   printStr   
5751   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5760   21 02 01               LD   HL,$0102   
5763   CD DB 07               CALL   prtdec   
5766   CD 8D 08               CALL   printStr   
5769   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5776   E1                     POP   hl   
5777   E5                     PUSH   hl   
5778   CD DB 07               CALL   prtdec   
577B   E1                     POP   hl   
577C   CD 8D 08               CALL   printStr   
577F   20 28 23 00            .CSTR   " (#"   
5783   CD 23 08               CALL   prthex   
5786   CD 8D 08               CALL   printStr   
5789   29 0D 0A 00            .CSTR   ")\r\n"   
578D   76                     HALT      
578E   00                     .CSTR      
578F                EXPECTM_0_2240S43:      
578F   E1                     POP   HL   
5790                          ;*Macro unroll:  test "(:b) -1%", $0101
5790   31 80 18               LD   SP,STACK   
5793   CD A1 08               CALL   init   
5796   CD 94 08               CALL   execStr   
5799   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
57A2                          ;*Macro unroll:  expect "(:b) -1%",$0101
57A2   E1                     POP   HL   
57A3   E5                     PUSH   HL   
57A4   11 01 01               LD   DE,$0101   
57A7   B7                     OR   A   
57A8   ED 52                  SBC   HL,DE   
57AA   7D                     LD   A,L   
57AB   B4                     OR   H   
57AC   28 53                  JR   Z,expectM_0_2241S43   
57AE   CD 8D 08               CALL   printStr   
57B1   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
57C0   CD 8D 08               CALL   printStr   
57C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57D2   21 01 01               LD   HL,$0101   
57D5   CD DB 07               CALL   prtdec   
57D8   CD 8D 08               CALL   printStr   
57DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57E8   E1                     POP   hl   
57E9   E5                     PUSH   hl   
57EA   CD DB 07               CALL   prtdec   
57ED   E1                     POP   hl   
57EE   CD 8D 08               CALL   printStr   
57F1   20 28 23 00            .CSTR   " (#"   
57F5   CD 23 08               CALL   prthex   
57F8   CD 8D 08               CALL   printStr   
57FB   29 0D 0A 00            .CSTR   ")\r\n"   
57FF   76                     HALT      
5800   00                     .CSTR      
5801                EXPECTM_0_2241S43:      
5801   E1                     POP   HL   
5802                          ;*Macro unroll:  test "() {2} \\f:", 2
5802   31 80 18               LD   SP,STACK   
5805   CD A1 08               CALL   init   
5808   CD 94 08               CALL   execStr   
580B   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
5816                          ;*Macro unroll:  expect "() {2} \\f:",2
5816   E1                     POP   HL   
5817   E5                     PUSH   HL   
5818   11 02 00               LD   DE,2   
581B   B7                     OR   A   
581C   ED 52                  SBC   HL,DE   
581E   7D                     LD   A,L   
581F   B4                     OR   H   
5820   28 55                  JR   Z,expectM_0_2242S43   
5822   CD 8D 08               CALL   printStr   
5825   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
5836   CD 8D 08               CALL   printStr   
5839   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5848   21 02 00               LD   HL,2   
584B   CD DB 07               CALL   prtdec   
584E   CD 8D 08               CALL   printStr   
5851   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
585E   E1                     POP   hl   
585F   E5                     PUSH   hl   
5860   CD DB 07               CALL   prtdec   
5863   E1                     POP   hl   
5864   CD 8D 08               CALL   printStr   
5867   20 28 23 00            .CSTR   " (#"   
586B   CD 23 08               CALL   prthex   
586E   CD 8D 08               CALL   printStr   
5871   29 0D 0A 00            .CSTR   ")\r\n"   
5875   76                     HALT      
5876   00                     .CSTR      
5877                EXPECTM_0_2242S43:      
5877   E1                     POP   HL   
5878                          ;*Macro unroll:  test "(a) {2} \\f:", 2
5878   31 80 18               LD   SP,STACK   
587B   CD A1 08               CALL   init   
587E   CD 94 08               CALL   execStr   
5881   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
588D                          ;*Macro unroll:  expect "(a) {2} \\f:",2
588D   E1                     POP   HL   
588E   E5                     PUSH   HL   
588F   11 02 00               LD   DE,2   
5892   B7                     OR   A   
5893   ED 52                  SBC   HL,DE   
5895   7D                     LD   A,L   
5896   B4                     OR   H   
5897   28 56                  JR   Z,expectM_0_2243S43   
5899   CD 8D 08               CALL   printStr   
589C   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
58AE   CD 8D 08               CALL   printStr   
58B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58C0   21 02 00               LD   HL,2   
58C3   CD DB 07               CALL   prtdec   
58C6   CD 8D 08               CALL   printStr   
58C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58D6   E1                     POP   hl   
58D7   E5                     PUSH   hl   
58D8   CD DB 07               CALL   prtdec   
58DB   E1                     POP   hl   
58DC   CD 8D 08               CALL   printStr   
58DF   20 28 23 00            .CSTR   " (#"   
58E3   CD 23 08               CALL   prthex   
58E6   CD 8D 08               CALL   printStr   
58E9   29 0D 0A 00            .CSTR   ")\r\n"   
58ED   76                     HALT      
58EE   00                     .CSTR      
58EF                EXPECTM_0_2243S43:      
58EF   E1                     POP   HL   
58F0                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
58F0   31 80 18               LD   SP,STACK   
58F3   CD A1 08               CALL   init   
58F6   CD 94 08               CALL   execStr   
58F9   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
5908                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
5908   E1                     POP   HL   
5909   E5                     PUSH   HL   
590A   11 05 00               LD   DE,5   
590D   B7                     OR   A   
590E   ED 52                  SBC   HL,DE   
5910   7D                     LD   A,L   
5911   B4                     OR   H   
5912   28 59                  JR   Z,expectM_0_2244S43   
5914   CD 8D 08               CALL   printStr   
5917   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
592C   CD 8D 08               CALL   printStr   
592F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
593E   21 05 00               LD   HL,5   
5941   CD DB 07               CALL   prtdec   
5944   CD 8D 08               CALL   printStr   
5947   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5954   E1                     POP   hl   
5955   E5                     PUSH   hl   
5956   CD DB 07               CALL   prtdec   
5959   E1                     POP   hl   
595A   CD 8D 08               CALL   printStr   
595D   20 28 23 00            .CSTR   " (#"   
5961   CD 23 08               CALL   prthex   
5964   CD 8D 08               CALL   printStr   
5967   29 0D 0A 00            .CSTR   ")\r\n"   
596B   76                     HALT      
596C   00                     .CSTR      
596D                EXPECTM_0_2244S43:      
596D   E1                     POP   HL   
596E                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
596E   31 80 18               LD   SP,STACK   
5971   CD A1 08               CALL   init   
5974   CD 94 08               CALL   execStr   
5977   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
5988                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
5988   E1                     POP   HL   
5989   E5                     PUSH   HL   
598A   11 05 00               LD   DE,5   
598D   B7                     OR   A   
598E   ED 52                  SBC   HL,DE   
5990   7D                     LD   A,L   
5991   B4                     OR   H   
5992   28 5B                  JR   Z,expectM_0_2245S43   
5994   CD 8D 08               CALL   printStr   
5997   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
59AE   CD 8D 08               CALL   printStr   
59B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59C0   21 05 00               LD   HL,5   
59C3   CD DB 07               CALL   prtdec   
59C6   CD 8D 08               CALL   printStr   
59C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59D6   E1                     POP   hl   
59D7   E5                     PUSH   hl   
59D8   CD DB 07               CALL   prtdec   
59DB   E1                     POP   hl   
59DC   CD 8D 08               CALL   printStr   
59DF   20 28 23 00            .CSTR   " (#"   
59E3   CD 23 08               CALL   prthex   
59E6   CD 8D 08               CALL   printStr   
59E9   29 0D 0A 00            .CSTR   ")\r\n"   
59ED   76                     HALT      
59EE   00                     .CSTR      
59EF                EXPECTM_0_2245S43:      
59EF   E1                     POP   HL   
59F0                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
59F0   31 80 18               LD   SP,STACK   
59F3   CD A1 08               CALL   init   
59F6   CD 94 08               CALL   execStr   
59F9   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
5A08                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
5A08   E1                     POP   HL   
5A09   E5                     PUSH   HL   
5A0A   11 02 00               LD   DE,2   
5A0D   B7                     OR   A   
5A0E   ED 52                  SBC   HL,DE   
5A10   7D                     LD   A,L   
5A11   B4                     OR   H   
5A12   28 59                  JR   Z,expectM_0_2246S43   
5A14   CD 8D 08               CALL   printStr   
5A17   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
5A2C   CD 8D 08               CALL   printStr   
5A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A3E   21 02 00               LD   HL,2   
5A41   CD DB 07               CALL   prtdec   
5A44   CD 8D 08               CALL   printStr   
5A47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A54   E1                     POP   hl   
5A55   E5                     PUSH   hl   
5A56   CD DB 07               CALL   prtdec   
5A59   E1                     POP   hl   
5A5A   CD 8D 08               CALL   printStr   
5A5D   20 28 23 00            .CSTR   " (#"   
5A61   CD 23 08               CALL   prthex   
5A64   CD 8D 08               CALL   printStr   
5A67   29 0D 0A 00            .CSTR   ")\r\n"   
5A6B   76                     HALT      
5A6C   00                     .CSTR      
5A6D                EXPECTM_0_2246S43:      
5A6D   E1                     POP   HL   
5A6E                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
5A6E   31 80 18               LD   SP,STACK   
5A71   CD A1 08               CALL   init   
5A74   CD 94 08               CALL   execStr   
5A77   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
5A8B                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
5A8B   E1                     POP   HL   
5A8C   E5                     PUSH   HL   
5A8D   11 05 00               LD   DE,5   
5A90   B7                     OR   A   
5A91   ED 52                  SBC   HL,DE   
5A93   7D                     LD   A,L   
5A94   B4                     OR   H   
5A95   28 5E                  JR   Z,expectM_0_2247S43   
5A97   CD 8D 08               CALL   printStr   
5A9A   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
5AB4   CD 8D 08               CALL   printStr   
5AB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AC6   21 05 00               LD   HL,5   
5AC9   CD DB 07               CALL   prtdec   
5ACC   CD 8D 08               CALL   printStr   
5ACF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5ADC   E1                     POP   hl   
5ADD   E5                     PUSH   hl   
5ADE   CD DB 07               CALL   prtdec   
5AE1   E1                     POP   hl   
5AE2   CD 8D 08               CALL   printStr   
5AE5   20 28 23 00            .CSTR   " (#"   
5AE9   CD 23 08               CALL   prthex   
5AEC   CD 8D 08               CALL   printStr   
5AEF   29 0D 0A 00            .CSTR   ")\r\n"   
5AF3   76                     HALT      
5AF4   00                     .CSTR      
5AF5                EXPECTM_0_2247S43:      
5AF5   E1                     POP   HL   
5AF6                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
5AF6   31 80 18               LD   SP,STACK   
5AF9   CD A1 08               CALL   init   
5AFC   CD 94 08               CALL   execStr   
5AFF   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
5B14                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
5B14   E1                     POP   HL   
5B15   E5                     PUSH   HL   
5B16   11 01 00               LD   DE,1   
5B19   B7                     OR   A   
5B1A   ED 52                  SBC   HL,DE   
5B1C   7D                     LD   A,L   
5B1D   B4                     OR   H   
5B1E   28 5F                  JR   Z,expectM_0_2248S43   
5B20   CD 8D 08               CALL   printStr   
5B23   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
5B3E   CD 8D 08               CALL   printStr   
5B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B50   21 01 00               LD   HL,1   
5B53   CD DB 07               CALL   prtdec   
5B56   CD 8D 08               CALL   printStr   
5B59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B66   E1                     POP   hl   
5B67   E5                     PUSH   hl   
5B68   CD DB 07               CALL   prtdec   
5B6B   E1                     POP   hl   
5B6C   CD 8D 08               CALL   printStr   
5B6F   20 28 23 00            .CSTR   " (#"   
5B73   CD 23 08               CALL   prthex   
5B76   CD 8D 08               CALL   printStr   
5B79   29 0D 0A 00            .CSTR   ")\r\n"   
5B7D   76                     HALT      
5B7E   00                     .CSTR      
5B7F                EXPECTM_0_2248S43:      
5B7F   E1                     POP   HL   
5B80                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
5B80   31 80 18               LD   SP,STACK   
5B83   CD A1 08               CALL   init   
5B86   CD 94 08               CALL   execStr   
5B89   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
5BA1                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
5BA1   E1                     POP   HL   
5BA2   E5                     PUSH   HL   
5BA3   11 07 00               LD   DE,7   
5BA6   B7                     OR   A   
5BA7   ED 52                  SBC   HL,DE   
5BA9   7D                     LD   A,L   
5BAA   B4                     OR   H   
5BAB   28 62                  JR   Z,expectM_0_2249S43   
5BAD   CD 8D 08               CALL   printStr   
5BB0   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
5BCE   CD 8D 08               CALL   printStr   
5BD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BE0   21 07 00               LD   HL,7   
5BE3   CD DB 07               CALL   prtdec   
5BE6   CD 8D 08               CALL   printStr   
5BE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5BF6   E1                     POP   hl   
5BF7   E5                     PUSH   hl   
5BF8   CD DB 07               CALL   prtdec   
5BFB   E1                     POP   hl   
5BFC   CD 8D 08               CALL   printStr   
5BFF   20 28 23 00            .CSTR   " (#"   
5C03   CD 23 08               CALL   prthex   
5C06   CD 8D 08               CALL   printStr   
5C09   29 0D 0A 00            .CSTR   ")\r\n"   
5C0D   76                     HALT      
5C0E   00                     .CSTR      
5C0F                EXPECTM_0_2249S43:      
5C0F   E1                     POP   HL   
5C10                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
5C10   31 80 18               LD   SP,STACK   
5C13   CD A1 08               CALL   init   
5C16   CD 94 08               CALL   execStr   
5C19   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
5C33                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
5C33   E1                     POP   HL   
5C34   E5                     PUSH   HL   
5C35   11 06 00               LD   DE,6   
5C38   B7                     OR   A   
5C39   ED 52                  SBC   HL,DE   
5C3B   7D                     LD   A,L   
5C3C   B4                     OR   H   
5C3D   28 64                  JR   Z,expectM_0_2250S43   
5C3F   CD 8D 08               CALL   printStr   
5C42   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
5C62   CD 8D 08               CALL   printStr   
5C65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C74   21 06 00               LD   HL,6   
5C77   CD DB 07               CALL   prtdec   
5C7A   CD 8D 08               CALL   printStr   
5C7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C8A   E1                     POP   hl   
5C8B   E5                     PUSH   hl   
5C8C   CD DB 07               CALL   prtdec   
5C8F   E1                     POP   hl   
5C90   CD 8D 08               CALL   printStr   
5C93   20 28 23 00            .CSTR   " (#"   
5C97   CD 23 08               CALL   prthex   
5C9A   CD 8D 08               CALL   printStr   
5C9D   29 0D 0A 00            .CSTR   ")\r\n"   
5CA1   76                     HALT      
5CA2   00                     .CSTR      
5CA3                EXPECTM_0_2250S43:      
5CA3   E1                     POP   HL   
5CA4                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
5CA4   31 80 18               LD   SP,STACK   
5CA7   CD A1 08               CALL   init   
5CAA   CD 94 08               CALL   execStr   
5CAD   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
5CC0                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
5CC0   E1                     POP   HL   
5CC1   E5                     PUSH   HL   
5CC2   11 02 00               LD   DE,2   
5CC5   B7                     OR   A   
5CC6   ED 52                  SBC   HL,DE   
5CC8   7D                     LD   A,L   
5CC9   B4                     OR   H   
5CCA   28 5D                  JR   Z,expectM_0_2251S43   
5CCC   CD 8D 08               CALL   printStr   
5CCF   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
5CE8   CD 8D 08               CALL   printStr   
5CEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5CFA   21 02 00               LD   HL,2   
5CFD   CD DB 07               CALL   prtdec   
5D00   CD 8D 08               CALL   printStr   
5D03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D10   E1                     POP   hl   
5D11   E5                     PUSH   hl   
5D12   CD DB 07               CALL   prtdec   
5D15   E1                     POP   hl   
5D16   CD 8D 08               CALL   printStr   
5D19   20 28 23 00            .CSTR   " (#"   
5D1D   CD 23 08               CALL   prthex   
5D20   CD 8D 08               CALL   printStr   
5D23   29 0D 0A 00            .CSTR   ")\r\n"   
5D27   76                     HALT      
5D28   00                     .CSTR      
5D29                EXPECTM_0_2251S43:      
5D29   E1                     POP   HL   
5D2A                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
5D2A   31 80 18               LD   SP,STACK   
5D2D   CD A1 08               CALL   init   
5D30   CD 94 08               CALL   execStr   
5D33   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
5D49                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
5D49   E1                     POP   HL   
5D4A   E5                     PUSH   HL   
5D4B   11 01 00               LD   DE,1   
5D4E   B7                     OR   A   
5D4F   ED 52                  SBC   HL,DE   
5D51   7D                     LD   A,L   
5D52   B4                     OR   H   
5D53   28 60                  JR   Z,expectM_0_2252S43   
5D55   CD 8D 08               CALL   printStr   
5D58   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
5D74   CD 8D 08               CALL   printStr   
5D77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D86   21 01 00               LD   HL,1   
5D89   CD DB 07               CALL   prtdec   
5D8C   CD 8D 08               CALL   printStr   
5D8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D9C   E1                     POP   hl   
5D9D   E5                     PUSH   hl   
5D9E   CD DB 07               CALL   prtdec   
5DA1   E1                     POP   hl   
5DA2   CD 8D 08               CALL   printStr   
5DA5   20 28 23 00            .CSTR   " (#"   
5DA9   CD 23 08               CALL   prthex   
5DAC   CD 8D 08               CALL   printStr   
5DAF   29 0D 0A 00            .CSTR   ")\r\n"   
5DB3   76                     HALT      
5DB4   00                     .CSTR      
5DB5                EXPECTM_0_2252S43:      
5DB5   E1                     POP   HL   
5DB6                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5DB6   31 80 18               LD   SP,STACK   
5DB9   CD A1 08               CALL   init   
5DBC   CD 94 08               CALL   execStr   
5DBF   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5DD6                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5DD6   E1                     POP   HL   
5DD7   E5                     PUSH   HL   
5DD8   11 02 00               LD   DE,2   
5DDB   B7                     OR   A   
5DDC   ED 52                  SBC   HL,DE   
5DDE   7D                     LD   A,L   
5DDF   B4                     OR   H   
5DE0   28 61                  JR   Z,expectM_0_2253S43   
5DE2   CD 8D 08               CALL   printStr   
5DE5   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5E02   CD 8D 08               CALL   printStr   
5E05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E14   21 02 00               LD   HL,2   
5E17   CD DB 07               CALL   prtdec   
5E1A   CD 8D 08               CALL   printStr   
5E1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E2A   E1                     POP   hl   
5E2B   E5                     PUSH   hl   
5E2C   CD DB 07               CALL   prtdec   
5E2F   E1                     POP   hl   
5E30   CD 8D 08               CALL   printStr   
5E33   20 28 23 00            .CSTR   " (#"   
5E37   CD 23 08               CALL   prthex   
5E3A   CD 8D 08               CALL   printStr   
5E3D   29 0D 0A 00            .CSTR   ")\r\n"   
5E41   76                     HALT      
5E42   00                     .CSTR      
5E43                EXPECTM_0_2253S43:      
5E43   E1                     POP   HL   
5E44                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
5E44   31 80 18               LD   SP,STACK   
5E47   CD A1 08               CALL   init   
5E4A   CD 94 08               CALL   execStr   
5E4D   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
5E65                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
5E65   E1                     POP   HL   
5E66   E5                     PUSH   HL   
5E67   11 02 00               LD   DE,2   
5E6A   B7                     OR   A   
5E6B   ED 52                  SBC   HL,DE   
5E6D   7D                     LD   A,L   
5E6E   B4                     OR   H   
5E6F   28 62                  JR   Z,expectM_0_2254S43   
5E71   CD 8D 08               CALL   printStr   
5E74   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
5E92   CD 8D 08               CALL   printStr   
5E95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5EA4   21 02 00               LD   HL,2   
5EA7   CD DB 07               CALL   prtdec   
5EAA   CD 8D 08               CALL   printStr   
5EAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5EBA   E1                     POP   hl   
5EBB   E5                     PUSH   hl   
5EBC   CD DB 07               CALL   prtdec   
5EBF   E1                     POP   hl   
5EC0   CD 8D 08               CALL   printStr   
5EC3   20 28 23 00            .CSTR   " (#"   
5EC7   CD 23 08               CALL   prthex   
5ECA   CD 8D 08               CALL   printStr   
5ECD   29 0D 0A 00            .CSTR   ")\r\n"   
5ED1   76                     HALT      
5ED2   00                     .CSTR      
5ED3                EXPECTM_0_2254S43:      
5ED3   E1                     POP   HL   
5ED4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5ED4   31 80 18               LD   SP,STACK   
5ED7   CD A1 08               CALL   init   
5EDA   CD 94 08               CALL   execStr   
5EDD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5EF4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5EF4   E1                     POP   HL   
5EF5   E5                     PUSH   HL   
5EF6   11 02 00               LD   DE,2   
5EF9   B7                     OR   A   
5EFA   ED 52                  SBC   HL,DE   
5EFC   7D                     LD   A,L   
5EFD   B4                     OR   H   
5EFE   28 61                  JR   Z,expectM_0_2255S43   
5F00   CD 8D 08               CALL   printStr   
5F03   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5F20   CD 8D 08               CALL   printStr   
5F23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F32   21 02 00               LD   HL,2   
5F35   CD DB 07               CALL   prtdec   
5F38   CD 8D 08               CALL   printStr   
5F3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F48   E1                     POP   hl   
5F49   E5                     PUSH   hl   
5F4A   CD DB 07               CALL   prtdec   
5F4D   E1                     POP   hl   
5F4E   CD 8D 08               CALL   printStr   
5F51   20 28 23 00            .CSTR   " (#"   
5F55   CD 23 08               CALL   prthex   
5F58   CD 8D 08               CALL   printStr   
5F5B   29 0D 0A 00            .CSTR   ")\r\n"   
5F5F   76                     HALT      
5F60   00                     .CSTR      
5F61                EXPECTM_0_2255S43:      
5F61   E1                     POP   HL   
5F62                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
5F62   31 80 18               LD   SP,STACK   
5F65   CD A1 08               CALL   init   
5F68   CD 94 08               CALL   execStr   
5F6B   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
5F89                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
5F89   E1                     POP   HL   
5F8A   E5                     PUSH   HL   
5F8B   11 05 00               LD   DE,5   
5F8E   B7                     OR   A   
5F8F   ED 52                  SBC   HL,DE   
5F91   7D                     LD   A,L   
5F92   B4                     OR   H   
5F93   28 68                  JR   Z,expectM_0_2256S43   
5F95   CD 8D 08               CALL   printStr   
5F98   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
5FBC   CD 8D 08               CALL   printStr   
5FBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5FCE   21 05 00               LD   HL,5   
5FD1   CD DB 07               CALL   prtdec   
5FD4   CD 8D 08               CALL   printStr   
5FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5FE4   E1                     POP   hl   
5FE5   E5                     PUSH   hl   
5FE6   CD DB 07               CALL   prtdec   
5FE9   E1                     POP   hl   
5FEA   CD 8D 08               CALL   printStr   
5FED   20 28 23 00            .CSTR   " (#"   
5FF1   CD 23 08               CALL   prthex   
5FF4   CD 8D 08               CALL   printStr   
5FF7   29 0D 0A 00            .CSTR   ")\r\n"   
5FFB   76                     HALT      
5FFC   00                     .CSTR      
5FFD                EXPECTM_0_2256S43:      
5FFD   E1                     POP   HL   
5FFE                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
5FFE   31 80 18               LD   SP,STACK   
6001   CD A1 08               CALL   init   
6004   CD 94 08               CALL   execStr   
6007   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
601C                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
601C   E1                     POP   HL   
601D   E5                     PUSH   HL   
601E   11 02 00               LD   DE,2   
6021   B7                     OR   A   
6022   ED 52                  SBC   HL,DE   
6024   7D                     LD   A,L   
6025   B4                     OR   H   
6026   28 5F                  JR   Z,expectM_0_2257S43   
6028   CD 8D 08               CALL   printStr   
602B   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
6046   CD 8D 08               CALL   printStr   
6049   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6058   21 02 00               LD   HL,2   
605B   CD DB 07               CALL   prtdec   
605E   CD 8D 08               CALL   printStr   
6061   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
606E   E1                     POP   hl   
606F   E5                     PUSH   hl   
6070   CD DB 07               CALL   prtdec   
6073   E1                     POP   hl   
6074   CD 8D 08               CALL   printStr   
6077   20 28 23 00            .CSTR   " (#"   
607B   CD 23 08               CALL   prthex   
607E   CD 8D 08               CALL   printStr   
6081   29 0D 0A 00            .CSTR   ")\r\n"   
6085   76                     HALT      
6086   00                     .CSTR      
6087                EXPECTM_0_2257S43:      
6087   E1                     POP   HL   
6088                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
6088   31 80 18               LD   SP,STACK   
608B   CD A1 08               CALL   init   
608E   CD 94 08               CALL   execStr   
6091   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
60AC                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
60AC   E1                     POP   HL   
60AD   E5                     PUSH   HL   
60AE   11 64 00               LD   DE,100   
60B1   B7                     OR   A   
60B2   ED 52                  SBC   HL,DE   
60B4   7D                     LD   A,L   
60B5   B4                     OR   H   
60B6   28 65                  JR   Z,expectM_0_2258S43   
60B8   CD 8D 08               CALL   printStr   
60BB   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
60DC   CD 8D 08               CALL   printStr   
60DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
60EE   21 64 00               LD   HL,100   
60F1   CD DB 07               CALL   prtdec   
60F4   CD 8D 08               CALL   printStr   
60F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6104   E1                     POP   hl   
6105   E5                     PUSH   hl   
6106   CD DB 07               CALL   prtdec   
6109   E1                     POP   hl   
610A   CD 8D 08               CALL   printStr   
610D   20 28 23 00            .CSTR   " (#"   
6111   CD 23 08               CALL   prthex   
6114   CD 8D 08               CALL   printStr   
6117   29 0D 0A 00            .CSTR   ")\r\n"   
611B   76                     HALT      
611C   00                     .CSTR      
611D                EXPECTM_0_2258S43:      
611D   E1                     POP   HL   
611E                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
611E   31 80 18               LD   SP,STACK   
6121   CD A1 08               CALL   init   
6124   CD 94 08               CALL   execStr   
6127   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
6143                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
6143   E1                     POP   HL   
6144   E5                     PUSH   HL   
6145   11 01 00               LD   DE,1   
6148   B7                     OR   A   
6149   ED 52                  SBC   HL,DE   
614B   7D                     LD   A,L   
614C   B4                     OR   H   
614D   28 66                  JR   Z,expectM_0_2259S43   
614F   CD 8D 08               CALL   printStr   
6152   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
6174   CD 8D 08               CALL   printStr   
6177   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6186   21 01 00               LD   HL,1   
6189   CD DB 07               CALL   prtdec   
618C   CD 8D 08               CALL   printStr   
618F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
619C   E1                     POP   hl   
619D   E5                     PUSH   hl   
619E   CD DB 07               CALL   prtdec   
61A1   E1                     POP   hl   
61A2   CD 8D 08               CALL   printStr   
61A5   20 28 23 00            .CSTR   " (#"   
61A9   CD 23 08               CALL   prthex   
61AC   CD 8D 08               CALL   printStr   
61AF   29 0D 0A 00            .CSTR   ")\r\n"   
61B3   76                     HALT      
61B4   00                     .CSTR      
61B5                EXPECTM_0_2259S43:      
61B5   E1                     POP   HL   
61B6                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
61B6   31 80 18               LD   SP,STACK   
61B9   CD A1 08               CALL   init   
61BC   CD 94 08               CALL   execStr   
61BF   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
61DC                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
61DC   E1                     POP   HL   
61DD   E5                     PUSH   HL   
61DE   11 02 00               LD   DE,2   
61E1   B7                     OR   A   
61E2   ED 52                  SBC   HL,DE   
61E4   7D                     LD   A,L   
61E5   B4                     OR   H   
61E6   28 67                  JR   Z,expectM_0_2260S43   
61E8   CD 8D 08               CALL   printStr   
61EB   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
620E   CD 8D 08               CALL   printStr   
6211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6220   21 02 00               LD   HL,2   
6223   CD DB 07               CALL   prtdec   
6226   CD 8D 08               CALL   printStr   
6229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6236   E1                     POP   hl   
6237   E5                     PUSH   hl   
6238   CD DB 07               CALL   prtdec   
623B   E1                     POP   hl   
623C   CD 8D 08               CALL   printStr   
623F   20 28 23 00            .CSTR   " (#"   
6243   CD 23 08               CALL   prthex   
6246   CD 8D 08               CALL   printStr   
6249   29 0D 0A 00            .CSTR   ")\r\n"   
624D   76                     HALT      
624E   00                     .CSTR      
624F                EXPECTM_0_2260S43:      
624F   E1                     POP   HL   
6250                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
6250   31 80 18               LD   SP,STACK   
6253   CD A1 08               CALL   init   
6256   CD 94 08               CALL   execStr   
6259   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
627E                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
627E   E1                     POP   HL   
627F   E5                     PUSH   HL   
6280   11 0B 00               LD   DE,11   
6283   B7                     OR   A   
6284   ED 52                  SBC   HL,DE   
6286   7D                     LD   A,L   
6287   B4                     OR   H   
6288   28 6F                  JR   Z,expectM_0_2261S43   
628A   CD 8D 08               CALL   printStr   
628D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
62B8   CD 8D 08               CALL   printStr   
62BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
62CA   21 0B 00               LD   HL,11   
62CD   CD DB 07               CALL   prtdec   
62D0   CD 8D 08               CALL   printStr   
62D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
62E0   E1                     POP   hl   
62E1   E5                     PUSH   hl   
62E2   CD DB 07               CALL   prtdec   
62E5   E1                     POP   hl   
62E6   CD 8D 08               CALL   printStr   
62E9   20 28 23 00            .CSTR   " (#"   
62ED   CD 23 08               CALL   prthex   
62F0   CD 8D 08               CALL   printStr   
62F3   29 0D 0A 00            .CSTR   ")\r\n"   
62F7   76                     HALT      
62F8   00                     .CSTR      
62F9                EXPECTM_0_2261S43:      
62F9   E1                     POP   HL   
62FA                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
62FA   31 80 18               LD   SP,STACK   
62FD   CD A1 08               CALL   init   
6300   CD 94 08               CALL   execStr   
6303   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
6328                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
6328   E1                     POP   HL   
6329   E5                     PUSH   HL   
632A   11 15 00               LD   DE,21   
632D   B7                     OR   A   
632E   ED 52                  SBC   HL,DE   
6330   7D                     LD   A,L   
6331   B4                     OR   H   
6332   28 6F                  JR   Z,expectM_0_2262S43   
6334   CD 8D 08               CALL   printStr   
6337   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
6362   CD 8D 08               CALL   printStr   
6365   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6374   21 15 00               LD   HL,21   
6377   CD DB 07               CALL   prtdec   
637A   CD 8D 08               CALL   printStr   
637D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
638A   E1                     POP   hl   
638B   E5                     PUSH   hl   
638C   CD DB 07               CALL   prtdec   
638F   E1                     POP   hl   
6390   CD 8D 08               CALL   printStr   
6393   20 28 23 00            .CSTR   " (#"   
6397   CD 23 08               CALL   prthex   
639A   CD 8D 08               CALL   printStr   
639D   29 0D 0A 00            .CSTR   ")\r\n"   
63A1   76                     HALT      
63A2   00                     .CSTR      
63A3                EXPECTM_0_2262S43:      
63A3   E1                     POP   HL   
63A4                          ;*Macro unroll:  test "[ 10, 20, 30, ] 1%", 20
63A4   31 80 18               LD   SP,STACK   
63A7   CD A1 08               CALL   init   
63AA   CD 94 08               CALL   execStr   
63AD   5B 20 31 30 2C 20 32 30 2C 20 33 30 2C 20 5D 20 31 25 00 .CSTR   "[ 10, 20, 30, ] 1%"   
63C0                          ;*Macro unroll:  expect "[ 10, 20, 30, ] 1%",20
63C0   E1                     POP   HL   
63C1   E5                     PUSH   HL   
63C2   11 14 00               LD   DE,20   
63C5   B7                     OR   A   
63C6   ED 52                  SBC   HL,DE   
63C8   7D                     LD   A,L   
63C9   B4                     OR   H   
63CA   28 5D                  JR   Z,expectM_0_2263S43   
63CC   CD 8D 08               CALL   printStr   
63CF   43 6F 64 65 3A 20 5B 20 31 30 2C 20 32 30 2C 20 33 30 2C 20 5D 20 31 25 00 .CSTR   "Code: ","[ 10, 20, 30, ] 1%"   
63E8   CD 8D 08               CALL   printStr   
63EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
63FA   21 14 00               LD   HL,20   
63FD   CD DB 07               CALL   prtdec   
6400   CD 8D 08               CALL   printStr   
6403   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6410   E1                     POP   hl   
6411   E5                     PUSH   hl   
6412   CD DB 07               CALL   prtdec   
6415   E1                     POP   hl   
6416   CD 8D 08               CALL   printStr   
6419   20 28 23 00            .CSTR   " (#"   
641D   CD 23 08               CALL   prthex   
6420   CD 8D 08               CALL   printStr   
6423   29 0D 0A 00            .CSTR   ")\r\n"   
6427   76                     HALT      
6428   00                     .CSTR      
6429                EXPECTM_0_2263S43:      
6429   E1                     POP   HL   
642A                          ;*Macro unroll:  test "\\b [ 1, 2, 3, ] 1%", 2
642A   31 80 18               LD   SP,STACK   
642D   CD A1 08               CALL   init   
6430   CD 94 08               CALL   execStr   
6433   5C 62 20 5B 20 31 2C 20 32 2C 20 33 2C 20 5D 20 31 25 00 .CSTR   "\\b [ 1, 2, 3, ] 1%"   
6446                          ;*Macro unroll:  expect "\\b [ 1, 2, 3, ] 1%",2
6446   E1                     POP   HL   
6447   E5                     PUSH   HL   
6448   11 02 00               LD   DE,2   
644B   B7                     OR   A   
644C   ED 52                  SBC   HL,DE   
644E   7D                     LD   A,L   
644F   B4                     OR   H   
6450   28 5D                  JR   Z,expectM_0_2264S43   
6452   CD 8D 08               CALL   printStr   
6455   43 6F 64 65 3A 20 5C 62 20 5B 20 31 2C 20 32 2C 20 33 2C 20 5D 20 31 25 00 .CSTR   "Code: ","\\b [ 1, 2, 3, ] 1%"   
646E   CD 8D 08               CALL   printStr   
6471   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6480   21 02 00               LD   HL,2   
6483   CD DB 07               CALL   prtdec   
6486   CD 8D 08               CALL   printStr   
6489   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6496   E1                     POP   hl   
6497   E5                     PUSH   hl   
6498   CD DB 07               CALL   prtdec   
649B   E1                     POP   hl   
649C   CD 8D 08               CALL   printStr   
649F   20 28 23 00            .CSTR   " (#"   
64A3   CD 23 08               CALL   prthex   
64A6   CD 8D 08               CALL   printStr   
64A9   29 0D 0A 00            .CSTR   ")\r\n"   
64AD   76                     HALT      
64AE   00                     .CSTR      
64AF                EXPECTM_0_2264S43:      
64AF   E1                     POP   HL   
64B0                          ;*Macro unroll:  test "\\b [ 'A', 'B', 'C', ] 1%", 66
64B0   31 80 18               LD   SP,STACK   
64B3   CD A1 08               CALL   init   
64B6   CD 94 08               CALL   execStr   
64B9   5C 62 20 5B 20 27 41 27 2C 20 27 42 27 2C 20 27 43 27 2C 20 5D 20 31 25 00 .CSTR   "\\b [ 'A', 'B', 'C', ] 1%"   
64D2                          ;*Macro unroll:  expect "\\b [ 'A', 'B', 'C', ] 1%",66
64D2   E1                     POP   HL   
64D3   E5                     PUSH   HL   
64D4   11 42 00               LD   DE,66   
64D7   B7                     OR   A   
64D8   ED 52                  SBC   HL,DE   
64DA   7D                     LD   A,L   
64DB   B4                     OR   H   
64DC   28 63                  JR   Z,expectM_0_2265S43   
64DE   CD 8D 08               CALL   printStr   
64E1   43 6F 64 65 3A 20 5C 62 20 5B 20 27 41 27 2C 20 27 42 27 2C 20 27 43 27 2C 20 5D 20 31 25 00 .CSTR   "Code: ","\\b [ 'A', 'B', 'C', ] 1%"   
6500   CD 8D 08               CALL   printStr   
6503   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6512   21 42 00               LD   HL,66   
6515   CD DB 07               CALL   prtdec   
6518   CD 8D 08               CALL   printStr   
651B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6528   E1                     POP   hl   
6529   E5                     PUSH   hl   
652A   CD DB 07               CALL   prtdec   
652D   E1                     POP   hl   
652E   CD 8D 08               CALL   printStr   
6531   20 28 23 00            .CSTR   " (#"   
6535   CD 23 08               CALL   prthex   
6538   CD 8D 08               CALL   printStr   
653B   29 0D 0A 00            .CSTR   ")\r\n"   
653F   76                     HALT      
6540   00                     .CSTR      
6541                EXPECTM_0_2265S43:      
6541   E1                     POP   HL   
6542                             ; 
6542                             ; 
6542                             ; 
6542                             ; 
6542                             ; 
6542                             ; 
6542                             ; 
6542                             ; test "10 sqrt", 3
6542                             ; test "10 sqrt frac", 1
6542                             ; test ":x 20 let 100 x = x", 100
6542                             ; test ":x [10 20 30] let 50 x 1% = x 1%", 50
6542                             ; test "0 [{10} {20} {30}] switch", 10
6542                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} \\f:", 10
6542                             ; test "0 10 20 (iab) {$i [{$a} {$b}] switch} \\f:", 10
6542                             ; test "1 10 20 (iab) {$i [{$a} {$b}] switch} \\f:", 20
6542                             ; test "[ 1 ] closure call", 1
6542                             ; test "[ [ 2 ] ] closure call 0%", 2
6542                             ; call:Str
6542                             ; db "9"
6542                             ; kall sqrt1
6542                             ; db 0
6542                             ; expect "9 sqrt",3
6542   CD 8D 08               CALL   printStr   
6545   44 6F 6E 65 21 00      .CSTR   "Done!"   
654B   76                     HALT      
654C                          ALIGN   2   
654C                PRINTER:      
654C   E1                     POP   hl   
654D   CD DB 07               CALL   prtdec   
6550   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07C0 DEFINED AT LINE 1260 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1009 IN monty.asm
                    > USED AT LINE 1567 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 751 IN monty.asm
                    > USED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1424 IN monty.asm
                    > USED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 44 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1522 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRITEM_:           0318 DEFINED AT LINE 233 IN monty.asm
ARRINDEX_:          031B DEFINED AT LINE 236 IN monty.asm
BLOCK_:             031E DEFINED AT LINE 238 IN monty.asm
BLOCKEND_:          0321 DEFINED AT LINE 240 IN monty.asm
CHAR_:              0324 DEFINED AT LINE 242 IN monty.asm
COMMAND_:           0327 DEFINED AT LINE 244 IN monty.asm
DOT_:               032A DEFINED AT LINE 246 IN monty.asm
REMAIN_:            032D DEFINED AT LINE 248 IN monty.asm
GO_:                0330 DEFINED AT LINE 250 IN monty.asm
IDENTU_:            0333 DEFINED AT LINE 252 IN monty.asm
IDENTL_:            0336 DEFINED AT LINE 254 IN monty.asm
IF_:                0339 DEFINED AT LINE 256 IN monty.asm
INV_:               033C DEFINED AT LINE 258 IN monty.asm
MUL_:               0342 DEFINED AT LINE 261 IN monty.asm
NOT_:               0345 DEFINED AT LINE 263 IN monty.asm
NUM_:               034A DEFINED AT LINE 266 IN monty.asm
                    > USED AT LINE 283 IN monty.asm
HEXNUM_:            034D DEFINED AT LINE 268 IN monty.asm
OR_:                0350 DEFINED AT LINE 270 IN monty.asm
XOR_:               0353 DEFINED AT LINE 272 IN monty.asm
STRING_:            0356 DEFINED AT LINE 274 IN monty.asm
SUB_:               0359 DEFINED AT LINE 276 IN monty.asm
SUB1:               0365 DEFINED AT LINE 284 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
SUB2:               0367 DEFINED AT LINE 287 IN monty.asm
EQ_:                036D DEFINED AT LINE 293 IN monty.asm
EQ0:                0377 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
EQ1:                0378 DEFINED AT LINE 302 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
GT_:                037C DEFINED AT LINE 306 IN monty.asm
LT_:                0387 DEFINED AT LINE 315 IN monty.asm
LT1:                0390 DEFINED AT LINE 322 IN monty.asm
                    > USED AT LINE 313 IN monty.asm
DIV_:               0399 DEFINED AT LINE 328 IN monty.asm
NOP_:               03A8 DEFINED AT LINE 339 IN monty.asm
ABS1:               03AA DEFINED AT LINE 346 IN monty.asm
                    > USED AT LINE 696 IN monty.asm
ADDR:               03B7 DEFINED AT LINE 360 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03C3 DEFINED AT LINE 366 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03CA DEFINED AT LINE 374 IN monty.asm
                    > USED AT LINE 386 IN monty.asm
                    > USED AT LINE 396 IN monty.asm
OR:                 03CE DEFINED AT LINE 378 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
XOR:                03D7 DEFINED AT LINE 387 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
XOR1:               03D8 DEFINED AT LINE 389 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
ARG:                03E0 DEFINED AT LINE 401 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03FE DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 428 IN monty.asm
ARG0A:              0407 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
                    > USED AT LINE 414 IN monty.asm
ARG1:               040C DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
ARG1A:              0414 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 432 IN monty.asm
ARG_LIST:           0417 DEFINED AT LINE 449 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0421 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 474 IN monty.asm
ARG_LIST2:          042D DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 461 IN monty.asm
ARG_LIST3:          0435 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 463 IN monty.asm
                    > USED AT LINE 470 IN monty.asm
ARG_LIST4:          0438 DEFINED AT LINE 475 IN monty.asm
                    > USED AT LINE 459 IN monty.asm
ARG_LIST5:          043D DEFINED AT LINE 480 IN monty.asm
                    > USED AT LINE 478 IN monty.asm
ARRBEGIN:           0449 DEFINED AT LINE 491 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0454 DEFINED AT LINE 499 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARRITEM:            0469 DEFINED AT LINE 516 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRITEM1:           0477 DEFINED AT LINE 526 IN monty.asm
                    > USED AT LINE 523 IN monty.asm
ARRINDEX:           047C DEFINED AT LINE 532 IN monty.asm
                    > USED AT LINE 237 IN monty.asm
ARRINDEX0:          0484 DEFINED AT LINE 538 IN monty.asm
ARRINDEX1:          0485 DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
ARRINDEX2:          0491 DEFINED AT LINE 549 IN monty.asm
                    > USED AT LINE 546 IN monty.asm
ASSIGN:             0494 DEFINED AT LINE 555 IN monty.asm
                    > USED AT LINE 299 IN monty.asm
ASSIGN1:            04A2 DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
BLOCK:              04A4 DEFINED AT LINE 568 IN monty.asm
                    > USED AT LINE 239 IN monty.asm
BLOCK1:             04A8 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
BLOCK2:             04D4 DEFINED AT LINE 599 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
BLOCK3:             04D7 DEFINED AT LINE 602 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
BLOCK4:             04DF DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 579 IN monty.asm
                    > USED AT LINE 581 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
BLOCK5:             04E2 DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
BLOCKEND:           04E5 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 241 IN monty.asm
BLOCKEND1:          0511 DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 631 IN monty.asm
BLOCKEND2:          051D DEFINED AT LINE 645 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
BYTES:              0536 DEFINED AT LINE 666 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
BYTES1:             0539 DEFINED AT LINE 668 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
CHAR:               053E DEFINED AT LINE 672 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
CHAR1:              0541 DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 685 IN monty.asm
CHAR2:              054D DEFINED AT LINE 683 IN monty.asm
                    > USED AT LINE 680 IN monty.asm
CHAR3:              0550 DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
COMMAND:            0553 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 245 IN monty.asm
COMMENT:            0596 DEFINED AT LINE 720 IN monty.asm
                    > USED AT LINE 694 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
DOT:                059F DEFINED AT LINE 727 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
DOT1:               05AB DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 732 IN monty.asm
DOT2:               05B4 DEFINED AT LINE 740 IN monty.asm
                    > USED AT LINE 737 IN monty.asm
DOT3:               05BE DEFINED AT LINE 746 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
DOT4:               05C2 DEFINED AT LINE 749 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
                    > USED AT LINE 739 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
EQUALS:             05C9 DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHANEQ:         05D1 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
LESSTHAN:           05D6 DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 326 IN monty.asm
LESSTHAN1:          05DB DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 767 IN monty.asm
TRUE1:              05DE DEFINED AT LINE 779 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
NULL1:              05E4 DEFINED AT LINE 783 IN monty.asm
FALSE1:             05E4 DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 702 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
REMAIN:             05EA DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
FUNC:               05F0 DEFINED AT LINE 795 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
FUNC1:              0600 DEFINED AT LINE 809 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
                    > USED AT LINE 844 IN monty.asm
FUNC2:              062A DEFINED AT LINE 833 IN monty.asm
                    > USED AT LINE 821 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
FUNC3:              062D DEFINED AT LINE 836 IN monty.asm
                    > USED AT LINE 827 IN monty.asm
                    > USED AT LINE 829 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
FUNC4:              0635 DEFINED AT LINE 842 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
                    > USED AT LINE 817 IN monty.asm
                    > USED AT LINE 819 IN monty.asm
FUNC4A:             0638 DEFINED AT LINE 845 IN monty.asm
                    > USED AT LINE 841 IN monty.asm
GO:                 0644 DEFINED AT LINE 856 IN monty.asm
                    > USED AT LINE 251 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
GO0:                0645 DEFINED AT LINE 858 IN monty.asm
                    > USED AT LINE 992 IN monty.asm
                    > USED AT LINE 994 IN monty.asm
GO1:                064B DEFINED AT LINE 863 IN monty.asm
                    > USED AT LINE 861 IN monty.asm
GO2:                0672 DEFINED AT LINE 884 IN monty.asm
                    > USED AT LINE 876 IN monty.asm
                    > USED AT LINE 908 IN monty.asm
GO3:                0677 DEFINED AT LINE 888 IN monty.asm
                    > USED AT LINE 883 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
GO10:               0685 DEFINED AT LINE 897 IN monty.asm
                    > USED AT LINE 866 IN monty.asm
GO11:               0692 DEFINED AT LINE 909 IN monty.asm
                    > USED AT LINE 906 IN monty.asm
GO12:               0698 DEFINED AT LINE 915 IN monty.asm
                    > USED AT LINE 919 IN monty.asm
GO13:               069D DEFINED AT LINE 920 IN monty.asm
                    > USED AT LINE 914 IN monty.asm
HEXNUM:             06AB DEFINED AT LINE 933 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
HEXNUM1:            06AE DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 952 IN monty.asm
HEXNUM2:            06B6 DEFINED AT LINE 941 IN monty.asm
                    > USED AT LINE 939 IN monty.asm
IDENTU:             06C8 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
IDENTL:             06CD DEFINED AT LINE 957 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
IDENT1:             06D2 DEFINED AT LINE 961 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
IF:                 06DF DEFINED AT LINE 974 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
IFTE:               06EB DEFINED AT LINE 984 IN monty.asm
                    > USED AT LINE 978 IN monty.asm
IFTE1:              06EC DEFINED AT LINE 986 IN monty.asm
                    > USED AT LINE 981 IN monty.asm
INPUT:              06F8 DEFINED AT LINE 998 IN monty.asm
                    > USED AT LINE 704 IN monty.asm
KEY:                0703 DEFINED AT LINE 1008 IN monty.asm
                    > USED AT LINE 706 IN monty.asm
MUL:                070C DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
MUL2:               0716 DEFINED AT LINE 1024 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
NUM:                0728 DEFINED AT LINE 1038 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
NUM0:               0731 DEFINED AT LINE 1044 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
NUM1:               0732 DEFINED AT LINE 1046 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
NUM2:               074A DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 943 IN monty.asm
                    > USED AT LINE 945 IN monty.asm
                    > USED AT LINE 1049 IN monty.asm
                    > USED AT LINE 1051 IN monty.asm
NUM3:               0755 DEFINED AT LINE 1072 IN monty.asm
                    > USED AT LINE 1067 IN monty.asm
OUTPUT:             0758 DEFINED AT LINE 1078 IN monty.asm
                    > USED AT LINE 708 IN monty.asm
REPEAT:             0761 DEFINED AT LINE 1087 IN monty.asm
                    > USED AT LINE 710 IN monty.asm
SHIFTLEFT:          0763 DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
SHIFTLEFT1:         076B DEFINED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1102 IN monty.asm
SHIFTLEFT2:         076C DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
SHIFTRIGHT:         0773 DEFINED AT LINE 1109 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
SHIFTRIGHT1:        077B DEFINED AT LINE 1116 IN monty.asm
                    > USED AT LINE 1120 IN monty.asm
SHIFTRIGHT2:        077F DEFINED AT LINE 1119 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
STRING:             0786 DEFINED AT LINE 1128 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
STRING1:            078F DEFINED AT LINE 1135 IN monty.asm
                    > USED AT LINE 1142 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
STRING2:            0792 DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
SELECT:             07AE DEFINED AT LINE 1163 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
WORDS:              07B8 DEFINED AT LINE 1173 IN monty.asm
                    > USED AT LINE 716 IN monty.asm
LOOP:               07BE DEFINED AT LINE 1189 IN monty.asm
FILTER:             07C0 DEFINED AT LINE 1258 IN monty.asm
MAP:                07C0 DEFINED AT LINE 1259 IN monty.asm
DIVIDE:             07C2 DEFINED AT LINE 1297 IN monty.asm
                    > USED AT LINE 333 IN monty.asm
DIVIDE1:            07C7 DEFINED AT LINE 1300 IN monty.asm
                    > USED AT LINE 1312 IN monty.asm
DIVIDE2:            07D4 DEFINED AT LINE 1308 IN monty.asm
                    > USED AT LINE 1305 IN monty.asm
DIVIDE3:            07D5 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
PRTDEC:             07DB DEFINED AT LINE 1355 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 1653 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 143
PRTDEC0:            07EA DEFINED AT LINE 1366 IN monty.asm
                    > USED AT LINE 1357 IN monty.asm
PRTDEC1:            080C DEFINED AT LINE 1382 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
                    > USED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1376 IN monty.asm
                    > USED AT LINE 1379 IN monty.asm
PRTDEC2:            080E DEFINED AT LINE 1384 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
PRTDEC3:            081E DEFINED AT LINE 1396 IN monty.asm
                    > USED AT LINE 1391 IN monty.asm
PRTDEC4:            081F DEFINED AT LINE 1398 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
PRTHEX:             0823 DEFINED AT LINE 1402 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            082E DEFINED AT LINE 1410 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
PRTHEX3:            0837 DEFINED AT LINE 1418 IN monty.asm
                    > USED AT LINE 1416 IN monty.asm
PRTSTR0:            0842 DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
PRTSTR:             0846 DEFINED AT LINE 1429 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
NESTING:            084B DEFINED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1599 IN monty.asm
NESTING0:           0855 DEFINED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1447 IN monty.asm
                    > USED AT LINE 1449 IN monty.asm
NESTING1A:          085C DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
NESTING1:           085F DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
NESTING2:           086E DEFINED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
NESTING3:           0870 DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
NESTING4:           087B DEFINED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1473 IN monty.asm
                    > USED AT LINE 1475 IN monty.asm
PROMPT:             087D DEFINED AT LINE 1482 IN monty.asm
                    > USED AT LINE 1542 IN monty.asm
CRLF:               0886 DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
PRINTSTR:           088D DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1651 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 136
EXECSTR:            0894 DEFINED AT LINE 1503 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               089F DEFINED AT LINE 1514 IN monty.asm
INIT:               08A1 DEFINED AT LINE 1519 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1537 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08BA DEFINED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
START:              08BF DEFINED AT LINE 1535 IN monty.asm
INTERPRET:          08D5 DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
INTERPRET2:         08DF DEFINED AT LINE 1547 IN monty.asm
                    > USED AT LINE 1591 IN monty.asm
INTERPRET3:         08E7 DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1563 IN monty.asm
INTERPRET4:         08ED DEFINED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
INTERPRET5:         08F2 DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
INTERPRET6:         0903 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
INTERPRET7:         0911 DEFINED AT LINE 1602 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
INTERPRET8:         0924 DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
NEXT:               092C DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
NEXT1:              093F DEFINED AT LINE 1635 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
NEXT2:              0946 DEFINED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
EXIT_:              094C DEFINED AT LINE 1646 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
ERROR:              094F DEFINED AT LINE 1650 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 869 IN monty.asm
                    > USED AT LINE 1521 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1526 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1523 IN monty.asm
VDATAWIDTH:         19E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 521 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
VTIBPTR:            19E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
VNEXT:              19EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1520 IN monty.asm
VHEAPPTR:           19EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 451 IN monty.asm
                    > USED AT LINE 482 IN monty.asm
                    > USED AT LINE 492 IN monty.asm
                    > USED AT LINE 495 IN monty.asm
                    > USED AT LINE 504 IN monty.asm
                    > USED AT LINE 518 IN monty.asm
                    > USED AT LINE 527 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
                    > USED AT LINE 848 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
                    > USED AT LINE 1148 IN monty.asm
VPOINTER:           19EE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 361 IN monty.asm
                    > USED AT LINE 363 IN monty.asm
                    > USED AT LINE 364 IN monty.asm
                    > USED AT LINE 436 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
                    > USED AT LINE 965 IN monty.asm
VHASHSTR:           19F0 DEFINED AT LINE 36 IN ram.asm
VLASTDEF:           19F2 DEFINED AT LINE 37 IN ram.asm
VREMAIN:            19F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 334 IN monty.asm
                    > USED AT LINE 790 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 39 IN ram.asm
VTEMP2:             19F8 DEFINED AT LINE 40 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 41 IN ram.asm
TIB:                1A00 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1618 IN monty.asm
PAD:                1B00 DEFINED AT LINE 47 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2186S43:  4065 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  40CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  412F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  4193 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  41F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  425B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  42C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  4329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  438F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  43F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  445D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  44C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  452F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  4597 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  4605 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  4673 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  46DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  474F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  47BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  482F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  48A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  4911 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  497D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  49E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  4A55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  4AC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  4B35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  4BA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  4C11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  4C7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  4CED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  4D59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  4DC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  4E31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  4E9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  4F09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  4F75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  4FE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  504D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  50BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  5129 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  5197 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  5207 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  5277 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  52E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  5351 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  53C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  543F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  54BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  5543 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  55CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  5639 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  56A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  571B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  578F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  5801 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  5877 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  58EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  596D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  59EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2246S43:  5A6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2247S43:  5AF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2248S43:  5B7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2249S43:  5C0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  5CA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  5D29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  5DB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  5E43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  5ED3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  5F61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  5FFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  6087 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  611D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  61B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  624F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  62F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  63A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  6429 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  64AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  6541 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            654C DEFINED AT LINE 141
