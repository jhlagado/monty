0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 55               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 55               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 55               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 55               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 55               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 55               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 55               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 55               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 55               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 55               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 53               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 55               LD   (RST08),HL   
0094   22 D2 55               LD   (RST10),HL   
0097   22 D4 55               LD   (RST18),HL   
009A   22 D6 55               LD   (RST20),HL   
009D   22 D8 55               LD   (RST28),HL   
00A0   22 DA 55               LD   (RST30),HL   
00A3   22 DE 55               LD   (INTVEC),HL   
00A6   22 E0 55               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 55               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 55               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5B                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7B                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   AD                     DB   lsb(star_)   ; *     1
018A   D1                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   85                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   ED                     DB   lsb(colon_)   ; :     2
019A   F5                     DB   lsb(semicolon_)   ; ;     2
019B   49                     DB   lsb(lt_)   ; <     1
019C   2F                     DB   lsb(eq_)   ; =     1
019D   3E                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F0                     DB   lsb(upcase_)   ; A     1
01A1   F0                     DB   lsb(upcase_)   ; B
01A2   F0                     DB   lsb(upcase_)   ; C
01A3   F0                     DB   lsb(upcase_)   ; D
01A4   F0                     DB   lsb(upcase_)   ; E
01A5   F0                     DB   lsb(upcase_)   ; F
01A6   F0                     DB   lsb(upcase_)   ; G
01A7   F0                     DB   lsb(upcase_)   ; h
01A8   F0                     DB   lsb(upcase_)   ; I
01A9   F0                     DB   lsb(upcase_)   ; J
01AA   F0                     DB   lsb(upcase_)   ; K
01AB   F0                     DB   lsb(upcase_)   ; L
01AC   F0                     DB   lsb(upcase_)   ; M
01AD   F0                     DB   lsb(upcase_)   ; N
01AE   F0                     DB   lsb(upcase_)   ; O
01AF   F0                     DB   lsb(upcase_)   ; p
01B0   F0                     DB   lsb(upcase_)   ; Q
01B1   F0                     DB   lsb(upcase_)   ; R
01B2   F0                     DB   lsb(upcase_)   ; S
01B3   F0                     DB   lsb(upcase_)   ; T
01B4   F0                     DB   lsb(upcase_)   ; U
01B5   F0                     DB   lsb(upcase_)   ; V
01B6   F0                     DB   lsb(upcase_)   ; W
01B7   F0                     DB   lsb(upcase_)   ; X
01B8   F0                     DB   lsb(upcase_)   ; Y
01B9   F0                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 53                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 54                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   EA 0F                  DW   next   ; nNext
01E8   22 56                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 E7 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 37 0B               JP   percent   
020C                QUOTE_:      
020C   C3 1D 0B               JP   quote   
020F                LPAREN_:      
020F   C3 CB 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 6C 0B               JP   num   
021B                QUESTION_:      
021B   C3 04 0B               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 3D                  CP   "="   
0222   20 05                  JR   nz,not   
0224   E1                     POP   hl   
0225   D1                     POP   de   
0226   C3 AE 0C               JP   notequals   
0229                NOT:         
0229   0B                     DEC   bc   
022A   21 00 00               LD   hl,0   ; is considered true
022D   18 0B                  JR   eq1   
022F                EQ_:         
022F                EQ:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3D                  CP   "="   
0233   28 04                  JR   z,eq0   
0235   0B                     DEC   bc   
0236   C3 96 0C               JP   assign   
0239                EQ0:         
0239   E1                     POP   hl   
023A                EQ1:         
023A   D1                     POP   de   
023B   C3 A7 0C               JP   equals   
023E                GT_:         
023E                GT:          
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3E                  CP   ">"   
0242   CA 02 0D               JP   z,shiftRight   
0245   D1                     POP   de   
0246   E1                     POP   hl   
0247   18 09                  JR   lt1   
0249                LT_:         
0249                LT:          
0249   03                     INC   bc   
024A   0A                     LD   a,(bc)   
024B   FE 3C                  CP   "<"   
024D   CA F2 0C               JP   z,shiftLeft   
0250   E1                     POP   hl   
0251   D1                     POP   de   
0252                LT1:         
0252   FE 3D                  CP   "="   
0254   CA B5 0C               JP   z,lessthaneq   
0257   0B                     DEC   bc   
0258   C3 BA 0C               JP   lessthan   
025B                             ; index of an array, based on vDataWidth 22
025B                             ; array* num -- value    ; also sets vPointer to address
025B                HASH_:       
025B                HASH:        
025B                ARRAYINDEX:      
025B   E1                     POP   hl   ; hl = index
025C   D1                     POP   de   ; de = array
025D   3A E6 55               LD   a,(vDataWidth)   ; a = data width
0260   3D                     DEC   a   
0261   28 01                  JR   z,arrayIndex1   
0263                ARRAYINDEX0:      
0263   29                     ADD   hl,hl   ; if data width = 2 then double
0264                ARRAYINDEX1:      
0264   19                     ADD   hl,de   ; add addr
0265   22 F8 55               LD   (vPointer),hl   ; store address in setter
0268   16 00                  LD   d,0   
026A   5E                     LD   e,(hl)   
026B   B7                     OR   a   ; check data width again
026C   28 02                  JR   z,arrayIndex2   
026E   23                     INC   hl   
026F   56                     LD   d,(hl)   
0270                ARRAYINDEX2:      
0270   D5                     PUSH   de   
0271   DD E9                  JP   (ix)   
0273                             ;                               4
0273                RPAREN_:      
0273                             ; jp rparen
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                             ; & and                          14
027B                             ; a b -- c
027B                AMPER_:      
027B                AMPER:       
027B                AND:         
027B   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027C   E1                     POP   hl   
027D   7B                     LD   a,e   
027E   A5                     AND   l   
027F   6F                     LD   l,a   
0280   7A                     LD   a,d   
0281   A4                     AND   h   
0282   67                     LD   h,a   
0283   18 5B                  JR   add3   
0285                             ; - sub
0285                             ; a b -- c
0285                             ; -- sub
0285                             ; b1 -- b2
0285                             ; -= sub
0285                             ; a b1 -- b2
0285                MINUS_:      
0285                MINUS:       
0285   03                     INC   bc   ; check if sign of a number
0286   0A                     LD   a,(bc)   
0287   0B                     DEC   bc   
0288   FE 30                  CP   "0"   
028A   38 05                  JR   c,sub   
028C   FE 3A                  CP   "9"+1   
028E   DA 6C 0B               JP   c,num   
0291                SUB:         ; Subtract the value 2nd on stack from top of stack
0291   E1                     POP   hl   ; hl = arg_b
0292   03                     INC   bc   
0293   FE 2D                  CP   "-"   
0295   20 04                  JR   nz,sub1   
0297   2B                     DEC   hl   ; --
0298   C3 98 0C               JP   assign0   
029B                SUB1:        
029B   D1                     POP   de   ; de = arg_a
029C   FE 3D                  CP   "="   
029E   28 02                  JR   z,sub2   
02A0   0B                     DEC   bc   ; -
02A1   EB                     EX   de,hl   
02A2                SUB2:        
02A2   B7                     OR   a   ; -=
02A3   ED 52                  SBC   hl,de   
02A5                SUB3:        
02A5   FE 3D                  CP   "="   
02A7   CA 98 0C               JP   z,assign0   
02AA   E5                     PUSH   hl   
02AB   DD E9                  JP   (ix)   
02AD                STAR_:       ; 21
02AD                STAR:        
02AD   03                     INC   bc   ; check for ** spread
02AE   0A                     LD   a,(bc)   
02AF   FE 2A                  CP   "*"   
02B1   CA CE 0C               JP   z,spread   
02B4   0B                     DEC   bc   
02B5                MUL:         
02B5   D1                     POP   de   ; get first value
02B6   E1                     POP   hl   
02B7                MUL2:        
02B7   C5                     PUSH   bc   ; Preserve the IP
02B8   44 4D                  LD   bc,hl   ; bc = 2nd value
02BA   21 00 00               LD   hl,0   
02BD   3E 10                  LD   a,16   
02BF                MUL3:        
02BF   29                     ADD   hl,hl   
02C0   CB 13                  RL   e   
02C2   CB 12                  RL   d   
02C4   30 04                  JR   nc,$+6   
02C6   09                     ADD   hl,bc   
02C7   30 01                  JR   nc,$+3   
02C9   13                     INC   de   
02CA   3D                     DEC   a   
02CB   20 F2                  JR   nz,mul3   
02CD   C1                     POP   bc   ; Restore the IP
02CE   C3 E0 02               JP   add3   
02D1                             ; + add                         25
02D1                             ; a b -- c
02D1                PLUS_:       
02D1                PLUS:        
02D1                ADD:         
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 2B                  CP   "+"   ; ++ increment variable
02D5   20 05                  JR   nz,add1   
02D7   E1                     POP   hl   
02D8   23                     INC   hl   
02D9   C3 98 0C               JP   assign0   
02DC                ADD1:        
02DC   0B                     DEC   bc   
02DD   D1                     POP   de   ; second term
02DE   E1                     POP   hl   ; first term
02DF   19                     ADD   hl,de   
02E0                ADD3:        
02E0   03                     INC   bc   
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   
02E4   28 04                  JR   z,add4   
02E6   0B                     DEC   bc   
02E7   E5                     PUSH   hl   
02E8   DD E9                  JP   (ix)   
02EA                ADD4:        
02EA   C3 98 0C               JP   assign0   
02ED                COLON_:      
02ED   C3 B3 0A               JP   colon   
02F0                             ;                               18
02F0                UPCASE_:      
02F0                UPCASE:      
02F0   0A                     LD   a,(bc)   ; a = identifier char
02F1   D6 41                  SUB   "A"   ; "A" = 0
02F3   18 10                  JR   ident1   
02F5                             ; ;
02F5                SEMICOLON_:      
02F5   C3 C9 0A               JP   semicolon   
02F8                             ;********************** PAGE 2 END *********************************************
02F8                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 55                  LD   h,msb(vars)   
0309   22 F8 55               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 48 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 0E 10               JP   error   
0343                LAMBDA2:      
0343   CD 7E 0D               CALL   parseBlock   
0346   CD E8 0D               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A F0 55               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A E6 55               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 F0 55               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 09 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 3C 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 09 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 2E 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 7E 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E0 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 9C 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 DD 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 55            LD   de,(vPointer)   
03ED   21 F8 55               LD   hl,vPointer   
03F0   C3 40 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD A0 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   6B 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*'
041E   C3 2E 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 2E 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 55               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 55            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 55               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 55            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 2E 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 55            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 55            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 55               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 55            LD   (vBufPtr),de   
04CC   C3 2E 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 59 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 8A 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   EB 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   7C 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   55 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   7C 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   74 06                  DW   decBase   
0547   00                     DB   NUL   
0548   74 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   94 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   E6 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   32 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   36 09                  DW   filter   
0556   31                     DB   "1"   
0557   36 10                  DW   f1   
0559   32                     DB   "2"   
055A   42 10                  DW   f2   
055C   33                     DB   "3"   
055D   4E 10                  DW   f3   
055F   34                     DB   "4"   
0560   5A 10                  DW   f4   
0562   00                     DB   NUL   
0563   C8 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hx hex
0566   82 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   7C 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   88 06                  DW   input   
056E   00                     DB   NUL   
056F   7C 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   93 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   F4 08                  DW   map   
0577   00                     DB   NUL   
0578   7C 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   9C 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   7C 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A5 06                  DW   quit   
0583   00                     DB   NUL   
0584   7C 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AF 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B5 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   57 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   7C 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   BB 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   0D 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   C3 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   6C 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   F2 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   01 07                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   7C 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   C2 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   25 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2E 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   37 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6E 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   62 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   68 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   7C 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   46 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   7C 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   4C 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 15 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 55            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 A5 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 55               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1544S1066   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1544S1066:      
062A   E1                     POP   hl   
062B   3A E6 55               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 9C 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   21 01 00               LD   hl,1   
0654                BYTEMODE1:      
0654   22 E6 55               LD   (vDataWidth),hl   
0657   DD E9                  JP   (ix)   
0659                             ; //
0659                COMMENT:      
0659   03                     INC   bc   ; point to next char
065A   0A                     LD   a,(bc)   
065B   FE 20                  CP   " "   ; terminate on any char less than SP
065D   30 FA                  JR   nc,comment   
065F   0B                     DEC   bc   
0660   DD E9                  JP   (ix)   
0662                CONSTHEAPSTART:      
0662   11 22 56               LD   de,HEAP   
0665   C3 43 07               JP   constant   
0668                CONSTTIBSTART:      
0668   11 00 53               LD   de,TIB   
066B   C3 43 07               JP   constant   
066E                CONSTBUFSTART:      
066E   11 00 54               LD   de,BUFFER   
0671   C3 43 07               JP   constant   
0674                DECBASE:      
0674   21 0A 00               LD   hl,10   
0677                DECBASE1:      
0677   22 E8 55               LD   (vNumBase),hl   
067A   DD E9                  JP   (ix)   
067C                ERROR1:      
067C   21 01 00               LD   hl,1   ; error 1: unknown command
067F   C3 0E 10               JP   error   
0682                HEXBASE:      
0682   21 10 00               LD   hl,16   
0685   C3 77 06               JP   decBase1   
0688                             ; Z80 port input
0688                             ; port -- value
0688                INPUT:       
0688   E1                     POP   hl   
0689   59                     LD   e,c   ; save IP
068A   4D                     LD   c,l   
068B   ED 68                  IN   l,(c)   
068D   26 00                  LD   h,0   
068F   4B                     LD   c,e   ; restore IP
0690   E5                     PUSH   hl   
0691   DD E9                  JP   (ix)   
0693                             ; /k                              6
0693                KEY:         
0693   CD 81 00               CALL   getchar   
0696   26 00                  LD   h,0   
0698   6F                     LD   l,a   
0699   E5                     PUSH   hl   
069A   DD E9                  JP   (ix)   
069C                             ; /o Z80 port output
069C                             ; value port --
069C                OUTPUT:      
069C   E1                     POP   hl   
069D   59                     LD   e,c   ; save IP
069E   4D                     LD   c,l   
069F   E1                     POP   hl   
06A0   ED 69                  OUT   (c),l   
06A2   4B                     LD   c,e   ; restore IP
06A3   DD E9                  JP   (ix)   
06A5                             ; /qt
06A5                             ; bool --
06A5                QUIT:        
06A5   E1                     POP   hl   ; hl = condition, exit if true
06A6   7D                     LD   a,l   
06A7   B4                     OR   h   
06A8   20 02                  JR   nz,quit1   
06AA   DD E9                  JP   (ix)   
06AC                QUIT1:       
06AC   C3 9C 0B               JP   blockEnd   
06AF                RECUR:       
06AF   E1                     POP   hl   
06B0   22 F2 55               LD   (vRecur),hl   
06B3   DD E9                  JP   (ix)   
06B5                REMAIN:      
06B5   2A FA 55               LD   hl,(vRemain)   
06B8   E5                     PUSH   hl   
06B9   DD E9                  JP   (ix)   
06BB                STRINGBEGIN:      
06BB   21 FF FF               LD   hl,TRUE   ; string mode = true
06BE   22 F6 55               LD   (vStrMode),hl   
06C1   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06C3                STRINGEND:      
06C3   21 00 00               LD   hl,FALSE   ; string mode = false
06C6   22 F6 55               LD   (vStrMode),hl   
06C9   2A EC 55               LD   hl,(vBufPtr)   ; append NUL to string
06CC   AF                     XOR   a   
06CD   77                     LD   (hl),a   
06CE   23                     INC   hl   ; hl = string_end*
06CF   ED 43 04 56            LD   (vTemp1),bc   ; save IP
06D3   11 00 54               LD   de,BUFFER   ; de = string*
06D6   B7                     OR   a   ; bc = size
06D7   ED 52                  SBC   hl,de   
06D9   44 4D                  LD   bc,hl   
06DB   2A F0 55               LD   hl,(vHeapPtr)   ; hl = hstring*
06DE   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DF   D5                     PUSH   de   ; return hstring*
06E0   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06E2   ED 53 F0 55            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E6   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
06EA                STRINGEND1:      
06EA   21 00 54               LD   hl,BUFFER   ; reset vBufPtr
06ED   22 EC 55               LD   (vBufPtr),hl   
06F0   DD E9                  JP   (ix)   
06F2                STRINGLENGTH:      
06F2   D1                     POP   de   
06F3   21 00 00               LD   hl,0   
06F6   18 02                  JR   stringLength2   
06F8                STRINGLENGTH1:      
06F8   13                     INC   de   
06F9   23                     INC   hl   
06FA                STRINGLENGTH2:      
06FA   1A                     LD   a,(de)   
06FB   B7                     OR   a   
06FC   20 FA                  JR   nz,stringLength1   
06FE                STRINGLENGTH3:      
06FE   E5                     PUSH   hl   
06FF   DD E9                  JP   (ix)   
0701                STRINGSIZE:      
0701                          ;*Macro unroll:  PERFORM stringLength
0701   DD 21 08 07            LD   ix,performM_1692S1234   
0705   C3 F2 06               JP   stringLength   
0708                PERFORMM_1692S1234:      
0708   E1                     POP   hl   
0709   23                     INC   hl   
070A   C3 FE 06               JP   stringLength3   
070D                             ; /sc string compare
070D                             ; string1* string2* -- bool
070D                             ; Compares two null terminated strings.
070D                STRINGCOMPARE:      
070D   D1                     POP   de   
070E   E1                     POP   hl   
070F                STRINGCOMPARE1:      
070F   1A                     LD   a,(de)   
0710   BE                     CP   (hl)   
0711   20 07                  JR   nz,stringCompare2   
0713   B7                     OR   a   
0714   28 09                  JR   z,stringCompare3   
0716   13                     INC   de   
0717   23                     INC   hl   
0718   18 F5                  JR   stringCompare1   
071A                STRINGCOMPARE2:      
071A   21 00 00               LD   hl,FALSE   
071D   18 03                  JR   stringCompare4   
071F                STRINGCOMPARE3:      
071F   21 FF FF               LD   hl,TRUE   
0722                STRINGCOMPARE4:      
0722   E5                     PUSH   hl   
0723   DD E9                  JP   (ix)   
0725                VARBUFPTR:      
0725   ED 5B EC 55            LD   de,(vBufPtr)   
0729   21 EC 55               LD   hl,vBufPtr   
072C   18 12                  JR   variable   
072E                VARHEAPPTR:      
072E   ED 5B F0 55            LD   de,(vHeapPtr)   
0732   21 F0 55               LD   hl,vHeapPtr   
0735   18 09                  JR   variable   
0737                VARTIBPTR:      
0737   ED 5B EA 55            LD   de,(vTIBPtr)   
073B   21 EA 55               LD   hl,vTIBPtr   
073E   18 00                  JR   variable   
0740                VARIABLE:      
0740   22 F8 55               LD   (vPointer),hl   
0743                CONSTANT:      
0743   D5                     PUSH   de   
0744   DD E9                  JP   (ix)   
0746                             ; /wm
0746                WORDMODE:      
0746   21 02 00               LD   hl,2   
0749   C3 54 06               JP   byteMode1   
074C                             ; /x
074C                XOR:         
074C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
074D                XOR1:        
074D   E1                     POP   hl   
074E   7B                     LD   a,e   
074F   AD                     XOR   l   
0750   6F                     LD   l,a   
0751   7A                     LD   a,d   
0752   AC                     XOR   h   
0753   67                     LD   h,a   
0754   C3 E0 02               JP   add3   
0757                             ;*******************************************************************
0757                             ; Monty implementations
0757                             ;*******************************************************************
0757                             ; /rg rangeSrc
0757                             ; begin end step -- src
0757                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0757                RANGESRC:      ; range source: begin, end, step, local: L
0757   CD 9F 03               CALL   go   
075A   00 00                  DW   NUL   
075C   66 07                  DW   rangeSrcM_1757S1308   
075E   60 07                  DW   $+2   
0760   01                     DB   1   
0761   04 62 65 73 4C         .PSTR   "besL"   
0766                RANGESRCM_1757S1308:      
0766   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0767   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
078C   5C 6B 74 7B            DB   "\\kt{"   
0790   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0798   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
079E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07AE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07C0   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07C5   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D9   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07E1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E8   7D                     DB   "}"   
07E9   7D                     DB   "}"   
07EA   00                     DB   0   
07EB                             ; /ai arrayIter
07EB                             ; array* -- src
07EB                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07EB                ARRAYITER:      
07EB   CD 9F 03               CALL   go   
07EE   00 00                  DW   NUL   
07F0   F8 07                  DW   arrayIterM_1776S1328   
07F2   F4 07                  DW   $+2   
07F4   01                     DB   1   
07F5   02 61 4C               .PSTR   "aL"   
07F8                ARRAYITERM_1776S1328:      
07F8   7B                     DB   "{"   
07F9   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0809   5C 6B 74 7B            DB   "\\kt{"   
080D   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0815   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
081B   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0823   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
082B   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0832   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
083A   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0843   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
085A   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0862   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0869   7D                     DB   "}"   
086A   7D                     DB   "}"   
086B   00                     DB   0   
086C                             ; /si stringIter
086C                             ; string* -- src
086C                          ;*Macro unroll: FUNC stringIter, 1, "sL"
086C                STRINGITER:      
086C   CD 9F 03               CALL   go   
086F   00 00                  DW   NUL   
0871   79 08                  DW   stringIterM_1795S1348   
0873   75 08                  DW   $+2   
0875   01                     DB   1   
0876   02 73 4C               .PSTR   "sL"   
0879                STRINGITERM_1795S1348:      
0879   7B                     DB   "{"   
087A   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0884   5C 6B 74 7B            DB   "\\kt{"   
0888   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0890   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0897   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089F   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08A7   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08AE   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08BF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08C7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08CE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08E2   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08EA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08F1   7D                     DB   "}"   
08F2   7D                     DB   "}"   
08F3   00                     DB   0   
08F4                             ; /mp map
08F4                             ; src func -- src1
08F4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08F4                MAP:         ; map: source, function
08F4   CD 9F 03               CALL   go   
08F7   00 00                  DW   NUL   
08F9   01 09                  DW   mapM_1815S1370   
08FB   FD 08                  DW   $+2   
08FD   00                     DB   0   
08FE   02 73 66               .PSTR   "sf"   
0901                MAPM_1815S1370:      
0901   7B                     DB   "{"   
0902   5C 6B 74 7B            DB   "\\kt{"   
0906   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
090E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0912   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0917   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0923   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
092C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0933   7D                     DB   "}"   
0934   7D                     DB   "}"   
0935   00                     DB   0   
0936                             ; /ft filter
0936                             ; src pred -- src1
0936                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0936                FILTER:      ; filter: source, predicate, local: T
0936   CD 9F 03               CALL   go   
0939   00 00                  DW   NUL   
093B   44 09                  DW   filterM_1829S1385   
093D   3F 09                  DW   $+2   
093F   01                     DB   1   
0940   03 73 70 54            .PSTR   "spT"   
0944                FILTERM_1829S1385:      
0944   7B                     DB   "{"   
0945   5B 30 5D 25 54 3D      DB   "[0]%T="   
094B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
094F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0953   5B                     DB   "["   
0954   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0961   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0969   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
096D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0972   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0988   3F 3F                  DB   "??"   
098A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0991   7D                     DB   "}"   
0992   7D                     DB   "}"   
0993   00                     DB   0   
0994                             ; /fd fold
0994                             ; reducer is a function like: \\da00bbLi4u
0994                             ; src init reducer -- src1
0994                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0994                FOLD:        ; src, init, reducer
0994   CD 9F 03               CALL   go   
0997   00 00                  DW   NUL   
0999   A3 09                  DW   foldM_1848S1405   
099B   9D 09                  DW   $+2   
099D   01                     DB   1   
099E   04 73 69 72 41         .PSTR   "sirA"   
09A3                FOLDM_1848S1405:      
09A3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09A4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09AB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09AF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09B3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09B8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09D3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09DC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E3   7D                     DB   "}"   
09E4   7D                     DB   "}"   
09E5   00                     DB   0   
09E6                             ; /fe forEach
09E6                             ; src proc --
09E6                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09E6                FOREACH:      ; forEach: source, procedure, local: T
09E6   CD 9F 03               CALL   go   
09E9   00 00                  DW   NUL   
09EB   F4 09                  DW   forEachM_1862S1420   
09ED   EF 09                  DW   $+2   
09EF   01                     DB   1   
09F0   03 73 70 54            .PSTR   "spT"   
09F4                FOREACHM_1862S1420:      
09F4   7B                     DB   "{"   
09F5   5B 30 5D 25 54 3D      DB   "[0]%T="   
09FB   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09FF   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A07   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A0C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A1E   3F 3F                  DB   "??"   ; ifte:
0A20   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A29   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A30   7D                     DB   "}"   
0A31   00                     DB   0   
0A32                             ; ; /fs funcSrc
0A32                             ; ; func -- src
0A32                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A32                FUNCSRC:      ; :f func or block
0A32   CD 9F 03               CALL   go   
0A35   00 00                  DW   NUL   
0A37   3E 0A                  DW   funcSrcM_1876S1435   
0A39   3B 0A                  DW   $+2   
0A3B   00                     DB   0   
0A3C   01 66                  .PSTR   "f"   
0A3E                FUNCSRCM_1876S1435:      
0A3E   7B                     DB   "{"   
0A3F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A43   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A4B   5C 64 74 7B            DB   "\\dt{"   
0A4F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A61   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A68   7D                     DB   "}"   
0A69   7D                     DB   "}"   
0A6A   00                     DB   0   
0A6B                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A6B                PRINTARRAY:      
0A6B   CD 9F 03               CALL   go   
0A6E   00 00                  DW   NUL   
0A70   79 0A                  DW   printArrayM_1886S1446   
0A72   74 0A                  DW   $+2   
0A74   02                     DB   2   
0A75   03 61 62 63            .PSTR   "abc"   
0A79                PRINTARRAYM_1886S1446:      
0A79   7B                     DB   "{"   
0A7A   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AB1   7D                     DB   "}"   
0AB2   00                     DB   0   
0AB3                             ;*******************************************************************
0AB3                             ; implementations continued
0AB3                             ;*******************************************************************
0AB3                COLON:       
0AB3   03                     INC   bc   ; arg_list must ve immediately followed by {
0AB4   0A                     LD   a,(bc)   
0AB5   FE 3D                  CP   "="   ; := definition
0AB7   28 07                  JR   z,defineStart   
0AB9   0B                     DEC   bc   
0ABA   21 01 00               LD   hl,1   
0ABD   C3 0E 10               JP   error   
0AC0                DEFINESTART:      
0AC0   E1                     POP   hl   ; discard variable value
0AC1   2A F8 55               LD   hl,(vPointer)   ; vDefine = vPointer
0AC4   22 F4 55               LD   (vDefine),hl   
0AC7   DD E9                  JP   (ix)   
0AC9                SEMICOLON:      
0AC9                DEFINEEND:      
0AC9   2A F4 55               LD   hl,(vDefine)   ; hl = define*
0ACC   7D                     LD   a,l   
0ACD   B4                     OR   h   
0ACE   28 0B                  JR   z,defineEnd1   
0AD0   11 00 00               LD   de,NUL   ; set vDefine=NUL
0AD3   ED 53 F4 55            LD   (vDefine),de   
0AD7   D1                     POP   de   ; de = value
0AD8   C3 9C 0C               JP   assign1   
0ADB                DEFINEEND1:      
0ADB   DD E9                  JP   (ix)   
0ADD                             ; ~ bitwise invert
0ADD                TILDE:       
0ADD                INVERT:      
0ADD   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0ADE   7D                     LD   a,l   
0ADF   2F                     CPL      
0AE0   6F                     LD   l,a   
0AE1   7C                     LD   a,h   
0AE2   2F                     CPL      
0AE3   67                     LD   h,a   
0AE4   C3 E0 02               JP   add3   
0AE7                             ; $ hex                         ; 22
0AE7                DOLLAR:      
0AE7                HEXNUM:      
0AE7   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AEA                HEXNUM1:      
0AEA   03                     INC   bc   
0AEB   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AEC   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AEE   28 02                  JR   z,hexnum2   ; no a decimal
0AF0   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AF2                HEXNUM2:      
0AF2   D6 30                  SUB   $30   ; form decimal digit
0AF4   DA 8E 0B               JP   c,num2   
0AF7   FE 10                  CP   $0F+1   
0AF9   D2 8E 0B               JP   nc,num2   
0AFC   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AFD   29                     ADD   hl,hl   ; 4X
0AFE   29                     ADD   hl,hl   ; 8X
0AFF   29                     ADD   hl,hl   ; 16X
0B00   85                     ADD   a,l   ; add into bottom of hl
0B01   6F                     LD   l,a   
0B02   18 E6                  JR   hexnum1   
0B04                             ; ? if                            23
0B04                             ; condition then -- value
0B04                QUESTION:      
0B04                IF:          
0B04   03                     INC   bc   
0B05   0A                     LD   a,(bc)   
0B06   FE 3F                  CP   "?"   
0B08   28 06                  JR   z,ifte   
0B0A   0B                     DEC   bc   
0B0B   11 00 00               LD   de,NUL   ; NUL pointer for else
0B0E   18 01                  JR   ifte1   
0B10                             ; ?? ifte
0B10                             ; condition then else -- value
0B10                IFTE:        
0B10   D1                     POP   de   ; de = else
0B11                IFTE1:       
0B11   E1                     POP   hl   ; hl = then
0B12   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B13   7C                     LD   a,h   
0B14   B5                     OR   l   
0B15   E1                     POP   hl   ; hl = then
0B16   CA A0 03               JP   z,go1   ; if z de = else
0B19   EB                     EX   de,hl   ; condition = false, de = then
0B1A   C3 A0 03               JP   go1   
0B1D                             ; string                        ;38
0B1D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B1D                QUOTE:       
0B1D                STRING:      
0B1D   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
0B20   E5                     PUSH   hl   ; save start of string
0B21   0A                     LD   a,(bc)   
0B22   5F                     LD   e,a   ; e = matching terminator
0B23   03                     INC   bc   ; point to next char
0B24   18 03                  JR   string2   
0B26                STRING1:      
0B26   77                     LD   (hl),a   
0B27   23                     INC   hl   ; increase count
0B28   03                     INC   bc   ; point to next char
0B29                STRING2:      
0B29   0A                     LD   a,(bc)   
0B2A   BB                     CP   e   ; is it the string terminator
0B2B   28 02                  JR   z,string3   
0B2D   18 F7                  JR   string1   
0B2F                STRING3:      
0B2F   AF                     XOR   a   ; write NUL to terminate string
0B30   77                     LD   (hl),a   ; hl = end of string
0B31   23                     INC   hl   
0B32   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B35   DD E9                  JP   (ix)   
0B37                             ; %a .. %z                      43
0B37                             ; -- value
0B37                             ; returns value of arg
0B37                PERCENT:      
0B37                ARG:         
0B37   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B3A   FD 56 05               LD   d,(iy+5)   
0B3D   EB                     EX   de,hl   
0B3E   7D                     LD   a,l   ; arg_list* == null, skip
0B3F   B4                     OR   h   
0B40   28 1A                  JR   z,arg0a   
0B42   23                     INC   hl   ; a = num_args, hl = arg_list*
0B43   7E                     LD   a,(hl)   
0B44   23                     INC   hl   
0B45   B7                     OR   a   
0B46   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B48   5F                     LD   e,a   ; e = a = num_args
0B49   03                     INC   bc   ; a = next char = dollar_name
0B4A   0A                     LD   a,(bc)   
0B4B   C5                     PUSH   bc   ; save IP
0B4C   43                     LD   b,e   ; b = e = num_args
0B4D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B50   FD 56 03               LD   d,(iy+3)   
0B53                ARG0:        
0B53   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B54   1B                     DEC   de   
0B55   BE                     CP   (hl)   
0B56   28 09                  JR   z,arg1   
0B58   23                     INC   hl   ; hl = next arg_list*
0B59   10 F8                  DJNZ   arg0   
0B5B   C1                     POP   bc   ; no match, restore IP
0B5C                ARG0A:       
0B5C   11 00 00               LD   de,0   ; return 0
0B5F   18 08                  JR   arg1a   
0B61                ARG1:        
0B61   C1                     POP   bc   ; restore IP
0B62   EB                     EX   de,hl   ; hl = arg*
0B63   22 F8 55               LD   (vPointer),hl   ; store arg* in setter
0B66   5E                     LD   e,(hl)   
0B67   23                     INC   hl   
0B68   56                     LD   d,(hl)   ; de = arg
0B69                ARG1A:       
0B69   D5                     PUSH   de   ; push arg
0B6A   DD E9                  JP   (ix)   
0B6C                             ; 0..9 number                   37
0B6C                NUM:         
0B6C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B6F   0A                     LD   a,(bc)   ; Get numeral or -
0B70   FE 2D                  CP   "-"   
0B72   20 01                  JR   nz,num0   
0B74   03                     INC   bc   ; move to next char, no flags affected
0B75                NUM0:        
0B75   08                     EX   af,af'   ; save zero flag = 0 for later
0B76                NUM1:        
0B76   0A                     LD   a,(bc)   ; read digit
0B77   D6 30                  SUB   "0"   ; less than 0?
0B79   38 13                  JR   c,num2   ; not a digit, exit loop
0B7B   FE 0A                  CP   10   ; greater that 9?
0B7D   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B7F   03                     INC   bc   ; inc IP
0B80   54 5D                  LD   de,hl   ; multiply hl * 10
0B82   29                     ADD   hl,hl   
0B83   29                     ADD   hl,hl   
0B84   19                     ADD   hl,de   
0B85   29                     ADD   hl,hl   
0B86   85                     ADD   a,l   ; add digit in a to hl
0B87   6F                     LD   l,a   
0B88   3E 00                  LD   a,0   
0B8A   8C                     ADC   a,h   
0B8B   67                     LD   h,a   
0B8C   18 E8                  JR   num1   
0B8E                NUM2:        
0B8E   0B                     DEC   bc   
0B8F   08                     EX   af,af'   ; restore zero flag
0B90   20 07                  JR   nz,num3   
0B92   EB                     EX   de,hl   ; negate the value of hl
0B93   21 00 00               LD   hl,0   
0B96   B7                     OR   a   ; jump to sub2
0B97   ED 52                  SBC   hl,de   
0B99                NUM3:        
0B99   E5                     PUSH   hl   ; Put the number on the stack
0B9A   DD E9                  JP   (ix)   ; and process the next character
0B9C                             ; }                               58
0B9C                RBRACE:      
0B9C                BLOCKEND:      
0B9C   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B9F   FD 56 01               LD   d,(iy+1)   
0BA2   ED 53 04 56            LD   (vTemp1),de   
0BA6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BA9   FD 56 07               LD   d,(iy+7)   
0BAC   ED 53 06 56            LD   (vTemp2),de   
0BB0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BB3   FD 56 03               LD   d,(iy+3)   
0BB6   EB                     EX   de,hl   
0BB7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BBA   FD 56 01               LD   d,(iy+1)   
0BBD   13                     INC   de   ; for carry flag <=
0BBE   B7                     OR   a   
0BBF   ED 52                  SBC   hl,de   
0BC1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BC3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BC5   FD 5D                  LD   e,iyl   
0BC7   21 08 00               LD   hl,8   
0BCA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BCB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BCC   18 0C                  JR   blockEnd2   
0BCE                BLOCKEND1:      ; same scope
0BCE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD1   FD 56 03               LD   d,(iy+3)   
0BD4   EB                     EX   de,hl   
0BD5   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BD7   FD 5D                  LD   e,iyl   
0BD9   EB                     EX   de,hl   
0BDA                BLOCKEND2:      
0BDA   44 4D                  LD   bc,hl   ; bc = hl = BP
0BDC   B7                     OR   a   ; hl = BP - SP = count
0BDD   ED 72                  SBC   hl,sp   
0BDF   7D                     LD   a,l   
0BE0   B4                     OR   h   
0BE1   28 09                  JR   z,blockEnd3   
0BE3   C5                     PUSH   bc   ; bc = count, hl = BP
0BE4   44 4D                  LD   bc,hl   
0BE6   E1                     POP   hl   
0BE7   2B                     DEC   hl   ; hl = BP-1
0BE8   1B                     DEC   de   ; de = args*-1
0BE9   ED B8                  LDDR      
0BEB   13                     INC   de   
0BEC                BLOCKEND3:      
0BEC   EB                     EX   de,hl   ; sp = de = new tos*
0BED   F9                     LD   sp,hl   
0BEE   ED 4B 06 56            LD   bc,(vTemp2)   
0BF2   FD 2A 04 56            LD   iy,(vTemp1)   
0BF6   ED 5B F2 55            LD   de,(vRecur)   ; de = recur vector
0BFA   7B                     LD   a,e   ; check for NUL
0BFB   B2                     OR   d   
0BFC   20 02                  JR   nz,blockEnd4   
0BFE   DD E9                  JP   (ix)   
0C00                BLOCKEND4:      
0C00   21 00 00               LD   hl,0   ; clear recur vector
0C03   22 F2 55               LD   (vRecur),hl   
0C06   C3 A0 03               JP   go1   ; execute de
0C09                GOBLOCK:      
0C09   ED 53 04 56            LD   (vTemp1),de   ; save de
0C0D   21 00 53               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C10   FD 54                  LD   d,iyh   
0C12   FD 5D                  LD   e,iyl   
0C14   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C15   ED 52                  SBC   hl,de   
0C17   ED 5B 04 56            LD   de,(vTemp1)   ; restore de
0C1B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C1C   B4                     OR   h   
0C1D   3E 00                  LD   a,0   
0C1F   28 6A                  JR   z,goFunc8   
0C21   C5                     PUSH   bc   ; push IP
0C22   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C25   FD 46 05               LD   b,(iy+5)   
0C28   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C2B   FD 66 03               LD   h,(iy+3)   
0C2E                GOBLOCK2:      
0C2E   C5                     PUSH   bc   ; arg_list*
0C2F   E5                     PUSH   hl   ; first_arg*
0C30   FD E5                  PUSH   iy   ; push BP
0C32   FD 21 00 00            LD   iy,0   ; BP = SP
0C36   FD 39                  ADD   iy,sp   
0C38                GOBLOCK3:      
0C38   42 4B                  LD   bc,de   ; bc = de = block*-1
0C3A   DD E9                  JP   (ix)   
0C3C                GOFUNC:      ; execute func
0C3C   EB                     EX   de,hl   ; hl = func*
0C3D   5E                     LD   e,(hl)   ; de = partial_array*
0C3E   23                     INC   hl   
0C3F   56                     LD   d,(hl)   
0C40   23                     INC   hl   
0C41   7B                     LD   a,e   ; if partial_array* == null skip
0C42   B2                     OR   d   
0C43   28 21                  JR   z,goFunc3   
0C45   ED 43 04 56            LD   (vTemp1),bc   
0C49   22 06 56               LD   (vTemp2),hl   ; save bc,hl
0C4C   EB                     EX   de,hl   ; hl = partial_array*
0C4D   2B                     DEC   hl   ; bc = count
0C4E   46                     LD   b,(hl)   
0C4F   2B                     DEC   hl   
0C50   4E                     LD   c,(hl)   
0C51   23                     INC   hl   ; hl = array data*
0C52   23                     INC   hl   
0C53   18 06                  JR   goFunc2   ; push each item on stack
0C55                GOFUNC1:      
0C55   5E                     LD   e,(hl)   ; de = partial item
0C56   23                     INC   hl   
0C57   56                     LD   d,(hl)   
0C58   23                     INC   hl   
0C59   D5                     PUSH   de   ; push on stack
0C5A   0B                     DEC   bc   
0C5B                GOFUNC2:      
0C5B   79                     LD   a,c   ; if count != 0 then loop
0C5C   B0                     OR   b   
0C5D   20 F6                  JR   nz,goFunc1   
0C5F   ED 4B 04 56            LD   bc,(vTemp1)   ; restore bc
0C63   2A 06 56               LD   hl,(vTemp2)   ; restore hl
0C66                GOFUNC3:      
0C66   5E                     LD   e,(hl)   ; de = block*
0C67   23                     INC   hl   
0C68   56                     LD   d,(hl)   
0C69   23                     INC   hl   
0C6A   ED 53 04 56            LD   (vTemp1),de   ; save block*
0C6E   5E                     LD   e,(hl)   ; de = arg_list*
0C6F   23                     INC   hl   
0C70   56                     LD   d,(hl)   
0C71   23                     INC   hl   
0C72   EB                     EX   de,hl   ; hl = arg_list*
0C73   ED 5B 04 56            LD   de,(vTemp1)   ; restore de = block*
0C77   7D                     LD   a,l   ; if arg_list* == null a = 0
0C78   B4                     OR   h   
0C79   20 03                  JR   nz,goFunc4   
0C7B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C7C   18 0D                  JR   goFunc8   
0C7E                GOFUNC4:      ; allocate locals
0C7E   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C7F   18 03                  JR   goFunc6   
0C81                GOFUNC5:      ; loop
0C81   3B                     DEC   sp   
0C82   3B                     DEC   sp   
0C83   3D                     DEC   a   
0C84                GOFUNC6:      
0C84   B7                     OR   a   
0C85   20 FA                  JR   nz,goFunc5   ; end loop
0C87                GOFUNC7:      
0C87   23                     INC   hl   ; a = num_args* x 2
0C88   7E                     LD   a,(hl)   
0C89   2B                     DEC   hl   
0C8A   87                     ADD   a,a   ; a *= 2
0C8B                GOFUNC8:      
0C8B   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C8C   44 4D                  LD   bc,hl   
0C8E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C91   85                     ADD   a,l   
0C92   6F                     LD   l,a   
0C93   39                     ADD   hl,sp   
0C94   18 98                  JR   goBlock2   
0C96                             ; =                              21
0C96                             ; value _oldValue --            ; uses address in vPointer 15
0C96                ASSIGN:      
0C96   E1                     POP   hl   ; discard last accessed value
0C97   E1                     POP   hl   ; hl = new value
0C98                ASSIGN0:      
0C98   EB                     EX   de,hl   ; de = new value
0C99   2A F8 55               LD   hl,(vPointer)   
0C9C                ASSIGN1:      ; entry point from defineEnd
0C9C   73                     LD   (hl),e   
0C9D   3A E6 55               LD   a,(vDataWidth)   
0CA0   3D                     DEC   a   ; is it byte?
0CA1   28 02                  JR   z,assign2   
0CA3   23                     INC   hl   
0CA4   72                     LD   (hl),d   
0CA5                ASSIGN2:      
0CA5   DD E9                  JP   (ix)   
0CA7                             ; hl = value1, de = value2
0CA7                             ; hl = result
0CA7                EQUALS:      
0CA7   B7                     OR   a   ; reset the carry flag
0CA8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CAA   28 16                  JR   z,true1   
0CAC   18 1A                  JR   false1   
0CAE                NOTEQUALS:      
0CAE   B7                     OR   a   ; reset the carry flag
0CAF   ED 52                  SBC   hl,de   
0CB1   20 0F                  JR   nz,true1   
0CB3   18 13                  JR   false1   
0CB5                             ; hl = value1 de = value2
0CB5                             ; hl = result
0CB5                LESSTHANEQ:      
0CB5   B7                     OR   a   
0CB6   ED 52                  SBC   hl,de   
0CB8   18 05                  JR   lessthan1   
0CBA                             ; hl = value1 de = value2
0CBA                             ; hl = result
0CBA                LESSTHAN:      
0CBA   B7                     OR   a   
0CBB   ED 52                  SBC   hl,de   
0CBD   28 09                  JR   z,false1   
0CBF                LESSTHAN1:      
0CBF   FA C8 0C               JP   m,false1   
0CC2                TRUE1:       
0CC2   21 FF FF               LD   hl,TRUE   
0CC5   E5                     PUSH   hl   
0CC6   DD E9                  JP   (ix)   
0CC8                NULL1:       
0CC8                FALSE1:      
0CC8   21 00 00               LD   hl,FALSE   
0CCB   E5                     PUSH   hl   
0CCC   DD E9                  JP   (ix)   
0CCE                SPREAD:      
0CCE   E1                     POP   hl   ; hl = array*
0CCF   ED 43 04 56            LD   (vTemp1),bc   ; save bc
0CD3   2B                     DEC   hl   ; bc = length
0CD4   46                     LD   b,(hl)   
0CD5   2B                     DEC   hl   
0CD6   4E                     LD   c,(hl)   
0CD7   23                     INC   hl   ; move back to array 0
0CD8   23                     INC   hl   
0CD9   18 0D                  JR   spread3   
0CDB                SPREAD1:      
0CDB   5E                     LD   e,(hl)   ; e = lsb data at hl
0CDC   23                     INC   hl   
0CDD   3A E6 55               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CE0   57                     LD   d,a   
0CE1   15                     DEC   d   
0CE2   28 02                  JR   z,spread2   
0CE4   56                     LD   d,(hl)   ; d = msb data at hl
0CE5   23                     INC   hl   
0CE6                SPREAD2:      
0CE6   D5                     PUSH   de   ; return de
0CE7   0B                     DEC   bc   ; count--
0CE8                SPREAD3:      
0CE8   79                     LD   a,c   ; exit loop if bc == 0
0CE9   B0                     OR   b   
0CEA   20 EF                  JR   nz,spread1   
0CEC   ED 4B 04 56            LD   bc,(vTemp1)   ; restore bc
0CF0   DD E9                  JP   (ix)   
0CF2                             ; shiftLeft                     15
0CF2                             ; value count -- value2          shift left count places
0CF2                SHIFTLEFT:      
0CF2   50 59                  LD   de,bc   ; save IP
0CF4   C1                     POP   bc   ; bc = count
0CF5   41                     LD   b,c   ; b = loop counter
0CF6   E1                     POP   hl   
0CF7   04                     INC   b   ; test for counter=0 case
0CF8   18 01                  JR   shiftLeft2   
0CFA                SHIFTLEFT1:      
0CFA   29                     ADD   hl,hl   ; left shift hl
0CFB                SHIFTLEFT2:      
0CFB   10 FD                  DJNZ   shiftLeft1   
0CFD   E5                     PUSH   hl   
0CFE   42 4B                  LD   bc,de   ; restore IP
0D00   DD E9                  JP   (ix)   
0D02                             ; shiftRight                    16
0D02                             ; value count -- value2          shift left count places
0D02                SHIFTRIGHT:      
0D02   50 59                  LD   de,bc   ; save IP
0D04   C1                     POP   bc   ; bc = count
0D05   41                     LD   b,c   ; b = loop counter
0D06   E1                     POP   hl   
0D07   04                     INC   b   ; test for counter=0 case
0D08   18 04                  JR   shiftRight2   
0D0A                SHIFTRIGHT1:      
0D0A   CB 3C                  SRL   h   ; right shift hl
0D0C   CB 1D                  RR   l   
0D0E                SHIFTRIGHT2:      
0D0E   10 FA                  DJNZ   shiftRight1   
0D10   E5                     PUSH   hl   
0D11   42 4B                  LD   bc,de   ; restore IP
0D13   DD E9                  JP   (ix)   
0D15                             ; division subroutine.
0D15                             ; bc: divisor, de: dividend, hl: remainder
0D15                DIVIDE:      
0D15   21 00 00               LD   hl,0   ; zero the remainder
0D18   3E 10                  LD   a,16   ; loop counter
0D1A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D1A   CB 21                  SLA   c   
0D1C   CB 10                  RL   b   
0D1E   ED 6A                  ADC   hl,hl   
0D20   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D22   38 03                  JR   c,divide2   
0D24   0C                     INC   c   
0D25   18 01                  JR   divide3   
0D27                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D27   19                     ADD   hl,de   
0D28                DIVIDE3:      
0D28   3D                     DEC   a   
0D29   20 EF                  JR   nz,divide1   
0D2B   50 59                  LD   de,bc   ; result from bc to de
0D2D   C9                     RET      
0D2E                DOTNEXT:      
0D2E   3A F6 55               LD   a,(vStrMode)   ; if string mode then exit
0D31   3C                     INC   a   
0D32   20 02                  JR   nz,dotNext1   
0D34   DD E9                  JP   (ix)   
0D36                DOTNEXT1:      
0D36   11 00 54               LD   de,BUFFER   
0D39   2A EC 55               LD   hl,(vBufPtr)   
0D3C   36 00                  LD   (hl),0   ; store NUL at end of string
0D3E   ED 53 EC 55            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D42   EB                     EX   de,hl   ; hl = BUFFER
0D43   CD BC 0E               CALL   putstr   
0D46   DD E9                  JP   (ix)   
0D48                             ; arg_list - parses arg_list e.g. ab:c
0D48                             ; -- arg_list*
0D48                PARSEARGS:      
0D48   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D4B   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
0D4E   E5                     PUSH   hl   ; save start of arg_list
0D4F   23                     INC   hl   ; skip length fields to start of string
0D50   23                     INC   hl   
0D51   03                     INC   bc   ; point to next char
0D52                PARSEARGS1:      
0D52   0A                     LD   a,(bc)   
0D53   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D55   20 03                  JR   nz,parseArgs1a   
0D57   14                     INC   d   ; non zero value local count acts as flag
0D58   18 10                  JR   parseArgs3   
0D5A                PARSEARGS1A:      
0D5A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D5C   38 0F                  JR   c,parseArgs4   
0D5E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D60   30 0B                  JR   nc,parseArgs4   
0D62                PARSEARGS2:      
0D62   77                     LD   (hl),a   
0D63   23                     INC   hl   
0D64   1C                     INC   e   ; increase arg count
0D65   AF                     XOR   a   
0D66   B2                     OR   d   
0D67   28 01                  JR   z,parseArgs3   
0D69   14                     INC   d   ; if d > 0 increase local count
0D6A                PARSEARGS3:      
0D6A   03                     INC   bc   ; point to next char
0D6B   18 E5                  JR   parseArgs1   
0D6D                PARSEARGS4:      
0D6D   0B                     DEC   bc   
0D6E   AF                     XOR   a   
0D6F   B2                     OR   d   
0D70   28 01                  JR   z,parseArgs5   
0D72   15                     DEC   d   ; remove initial inc
0D73                PARSEARGS5:      
0D73   23                     INC   hl   
0D74   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D77   E1                     POP   hl   ; hl = start of arg_list
0D78   72                     LD   (hl),d   ; write number of locals at start - 1
0D79   23                     INC   hl   
0D7A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D7B   2B                     DEC   hl   
0D7C   E3                     EX   (sp),hl   
0D7D   E9                     JP   (hl)   
0D7E                             ; create block: parses block e.g. 00bbIC4uLi4g
0D7E                             ; -- block*
0D7E                PARSEBLOCK:      
0D7E   C5                     PUSH   bc   ; return pointer to first { of block
0D7F   03                     INC   bc   
0D80   16 01                  LD   d,1   ; nesting: count first parenthesis
0D82                PARSEBLOCK1:      ; Skip to end of definition
0D82   0A                     LD   a,(bc)   ; Get the next character
0D83   03                     INC   bc   ; Point to next character
0D84   FE 21                  CP   " " + 1   ; ignore whitespace
0D86   38 FA                  JR   c,parseBlock1   
0D88   FE 29                  CP   ")"   
0D8A   28 2D                  JR   z,parseBlock4   
0D8C   FE 7D                  CP   "}"   
0D8E   28 29                  JR   z,parseBlock4   
0D90   FE 5D                  CP   "]"   
0D92   28 25                  JR   z,parseBlock4   
0D94   FE 28                  CP   "("   
0D96   28 16                  JR   z,parseBlock2   
0D98   FE 7B                  CP   "{"   
0D9A   28 12                  JR   z,parseBlock2   
0D9C   FE 5B                  CP   "["   
0D9E   28 0E                  JR   z,parseBlock2   
0DA0   FE 27                  CP   "'"   
0DA2   28 0D                  JR   z,parseBlock3   
0DA4   FE 60                  CP   "`"   
0DA6   28 09                  JR   z,parseBlock3   
0DA8   FE 22                  CP   DQ   
0DAA   28 05                  JR   z,parseBlock3   
0DAC   18 D4                  JR   parseBlock1   
0DAE                PARSEBLOCK2:      
0DAE   14                     INC   d   
0DAF   18 D1                  JR   parseBlock1   
0DB1                PARSEBLOCK3:      
0DB1   3E 80                  LD   a,$80   
0DB3   AA                     XOR   d   
0DB4   57                     LD   d,a   
0DB5   20 CB                  JR   nz,parseBlock1   
0DB7   18 03                  JR   parseBlock5   
0DB9                PARSEBLOCK4:      
0DB9   15                     DEC   d   
0DBA   20 C6                  JR   nz,parseBlock1   ; get the next element
0DBC                PARSEBLOCK5:      
0DBC   60 69                  LD   hl,bc   ; hl = IP
0DBE   11 22 56               LD   de,HEAP   ; is IP pointing to object in heap
0DC1   B7                     OR   a   ; IP - HEAP
0DC2   ED 52                  SBC   hl,de   
0DC4   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DC6   28 1C                  JR   z,parseBlock6   
0DC8   60 69                  LD   hl,bc   ; hl = IP
0DCA   D1                     POP   de   ; de = block*
0DCB   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0DCF   B7                     OR   a   ; bc = size
0DD0   ED 52                  SBC   hl,de   
0DD2   44 4D                  LD   bc,hl   
0DD4   EB                     EX   de,hl   ; hl = block* de = heap*
0DD5   ED 5B F0 55            LD   de,(vHeapPtr)   
0DD9   D5                     PUSH   de   ; return hblock*
0DDA   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DDC   ED 53 F0 55            LD   (vHeapPtr),de   ; heap* += size
0DE0   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0DE4                PARSEBLOCK6:      
0DE4   0B                     DEC   bc   ; balanced, exit
0DE5   E1                     POP   hl   ; hl = block*
0DE6   E3                     EX   (sp),hl   ; return to caller
0DE7   E9                     JP   (hl)   
0DE8                             ; create function
0DE8                             ; arg_list* block* -- func*
0DE8                CREATEFUNC:      
0DE8   E1                     POP   hl   ; save retrn address
0DE9   22 08 56               LD   (vTemp3),hl   
0DEC   ED 43 04 56            LD   (vTemp1),bc   ; save IP
0DF0   E1                     POP   hl   ; hl = block*
0DF1   22 06 56               LD   (vTemp2),hl   ; save block*
0DF4   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DF7   FD 56 05               LD   d,(iy+5)   
0DFA   7B                     LD   a,e   ; if arg_list == null then make a func
0DFB   B2                     OR   d   
0DFC   20 09                  JR   nz,createFunc0   
0DFE   21 00 00               LD   hl,0   ; partial_array = null
0E01   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0E05   18 65                  JR   createFunc5   
0E07                CREATEFUNC0:      
0E07   E1                     POP   hl   ; hl = inner_arg_list*
0E08   E5                     PUSH   hl   ; save inner_arg_list
0E09   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0E0D   7E                     LD   a,(hl)   ; compile inner_num_locals
0E0E   4F                     LD   c,a   ; b = inner_num_locals
0E0F   12                     LD   (de),a   
0E10   23                     INC   hl   
0E11   13                     INC   de   
0E12   7E                     LD   a,(hl)   ; compile inner_length
0E13   12                     LD   (de),a   
0E14   91                     SUB   c   ; a = inner_num args
0E15   23                     INC   hl   
0E16   13                     INC   de   
0E17   B7                     OR   a   ; compile args if inner_length > 0
0E18   28 05                  JR   z,createFunc1   
0E1A   4F                     LD   c,a   ; bc = a
0E1B   06 00                  LD   b,0   
0E1D   ED B0                  LDIR      
0E1F                CREATEFUNC1:      
0E1F   EB                     EX   de,hl   ; hl = outer_arg_list
0E20   FD 5E 04               LD   e,(iy+4)   
0E23   FD 56 05               LD   d,(iy+5)   
0E26   EB                     EX   de,hl   
0E27   23                     INC   hl   ; a = outer_length
0E28   7E                     LD   a,(hl)   
0E29   23                     INC   hl   
0E2A   B7                     OR   a   
0E2B   28 05                  JR   z,createFunc2   
0E2D   4F                     LD   c,a   
0E2E   06 00                  LD   b,0   
0E30   ED B0                  LDIR      ; append outer_args
0E32                CREATEFUNC2:      ; a = outer_length
0E32   47                     LD   b,a   ; b = a = outer_length
0E33   2A F0 55               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E36   23                     INC   hl   
0E37   7E                     LD   a,(hl)   ; add outer_length to new length
0E38   80                     ADD   a,b   
0E39   77                     LD   (hl),a   
0E3A   2B                     DEC   hl   
0E3B   78                     LD   a,b   ; save outer_length in a'
0E3C   08                     EX   af,af'   
0E3D   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E3E   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E3F   B7                     OR   a   
0E40   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E42   4F                     LD   c,a   ; c = inner_num_locals
0E43   06 00                  LD   b,0   ; bc = inner_num_locals
0E45   23                     INC   hl   ; a = inner_length
0E46   7E                     LD   a,(hl)   
0E47   91                     SUB   c   ; a = inner_num_args
0E48   23                     INC   hl   ; hl = inner_arg_chars
0E49   85                     ADD   a,l   ; hl += a
0E4A   6F                     LD   l,a   
0E4B   3E 00                  LD   a,0   
0E4D   84                     ADD   a,h   
0E4E   67                     LD   h,a   
0E4F   ED B0                  LDIR      ; append inner_locals
0E51                CREATEFUNC2A:      
0E51   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E52   12                     LD   (de),a   ; compile partial_array length field
0E53   13                     INC   de   
0E54   AF                     XOR   a   
0E55   12                     LD   (de),a   
0E56   13                     INC   de   
0E57   D5                     PUSH   de   ; push partial_array*
0E58   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E59   FD 5E 02               LD   e,(iy+2)   
0E5C   FD 56 03               LD   d,(iy+3)   
0E5F   EB                     EX   de,hl   
0E60                CREATEFUNC3:      
0E60   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E61   4E                     LD   c,(hl)   
0E62   2B                     DEC   hl   
0E63   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E64   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E65   13                     INC   de   
0E66   79                     LD   a,c   
0E67   12                     LD   (de),a   
0E68   13                     INC   de   
0E69   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E6B                CREATEFUNC4:      
0E6B   E1                     POP   hl   ; hl = partial_array*
0E6C                CREATEFUNC5:      
0E6C   C1                     POP   bc   ; bc = new_arg_list*
0E6D   D5                     PUSH   de   ; return new func*
0E6E   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E6F   73                     LD   (hl),e   ; compile partial_array* to func
0E70   23                     INC   hl   
0E71   72                     LD   (hl),d   
0E72   23                     INC   hl   
0E73   ED 5B 06 56            LD   de,(vTemp2)   ; de = block*
0E77   73                     LD   (hl),e   ; compile block* to func
0E78   23                     INC   hl   
0E79   72                     LD   (hl),d   
0E7A   23                     INC   hl   
0E7B   71                     LD   (hl),c   ; compile new_arg_list* to func
0E7C   23                     INC   hl   
0E7D   70                     LD   (hl),b   
0E7E   23                     INC   hl   
0E7F   22 F0 55               LD   (vHeapPtr),hl   ; bump heap ptr
0E82   ED 4B 04 56            LD   bc,(vTemp1)   ; restore IP
0E86   2A 08 56               LD   hl,(vTemp3)   ; jump to return address
0E89   E9                     JP   (hl)   
0E8A                             ;*******************************************************************
0E8A                             ; general routines
0E8A                             ;*******************************************************************
0E8A                             ; followed by a table
0E8A                             ; indexed on the 0-25 lowercase letter
0E8A                             ; db lsb(addr)
0E8A                             ; the final item index 26 matches any other char
0E8A                LOWERCASETABLE:      
0E8A   03                     INC   bc   
0E8B   0A                     LD   a,(bc)   
0E8C   FE 7B                  CP   "z"+1   
0E8E   30 0B                  JR   nc,lowerCaseTable2   
0E90   D6 61                  SUB   "a"   
0E92   38 07                  JR   c,lowerCaseTable2   
0E94                LOWERCASETABLE1:      
0E94   E1                     POP   hl   
0E95   85                     ADD   a,l   
0E96   6F                     LD   l,a   
0E97   6E                     LD   l,(hl)   ; must have the same msb as the table
0E98   C3 A1 0E               JP   commandTable1   
0E9B                LOWERCASETABLE2:      
0E9B   3E 1A                  LD   a,26   
0E9D   0B                     DEC   bc   
0E9E   18 F4                  JR   lowerCaseTable1   
0EA0                             ; followed by a table
0EA0                             ; db char
0EA0                             ; dw addr
0EA0                             ; the final item must have char == NUL
0EA0                COMMANDTABLE:      
0EA0   E1                     POP   hl   
0EA1                COMMANDTABLE1:      
0EA1   03                     INC   bc   
0EA2                COMMANDTABLE2:      
0EA2   AF                     XOR   a   
0EA3   BE                     CP   (hl)   
0EA4   20 03                  JR   nz,commandTable3   
0EA6   0B                     DEC   bc   
0EA7   18 09                  JR   commandTable4   
0EA9                COMMANDTABLE3:      
0EA9   0A                     LD   a,(bc)   
0EAA   BE                     CP   (hl)   
0EAB   28 05                  JR   z,commandTable4   
0EAD   23                     INC   hl   
0EAE   23                     INC   hl   
0EAF   23                     INC   hl   
0EB0   18 F0                  JR   commandTable2   
0EB2                COMMANDTABLE4:      
0EB2   23                     INC   hl   
0EB3   5E                     LD   e,(hl)   
0EB4   23                     INC   hl   
0EB5   56                     LD   d,(hl)   
0EB6   EB                     EX   de,hl   
0EB7   E9                     JP   (hl)   
0EB8                PUTSTR0:      
0EB8   CD 85 00               CALL   putchar   
0EBB   23                     INC   hl   
0EBC                PUTSTR:      
0EBC   7E                     LD   a,(hl)   
0EBD   B7                     OR   a   
0EBE   20 F8                  JR   nz,putstr0   
0EC0   C9                     RET      
0EC1                             ; **************************************************************************
0EC1                             ; calculate nesting value
0EC1                             ; a is char to be tested,
0EC1                             ; e is the nesting value (initially 0)
0EC1                             ; e is increased by ( and [
0EC1                             ; e is decreased by ) and ]
0EC1                             ; e has its bit 7 toggled by `
0EC1                             ; limited to 127 levels
0EC1                             ; **************************************************************************
0EC1                NESTING:      
0EC1   FE 22                  CP   DQ   ; quote char
0EC3   28 06                  JR   z,nesting0   
0EC5   FE 60                  CP   "`"   ; quote char
0EC7   28 02                  JR   z,nesting0   
0EC9   18 0A                  JR   nesting1   
0ECB                NESTING0:      
0ECB   CB 7B                  BIT   7,e   
0ECD   28 03                  JR   z,nesting1a   
0ECF   CB BB                  RES   7,e   
0ED1   C9                     RET      
0ED2                NESTING1A:      
0ED2   CB FB                  SET   7,e   
0ED4   C9                     RET      
0ED5                NESTING1:      
0ED5   CB 7B                  BIT   7,e   
0ED7   C0                     RET   nz   
0ED8   FE 7B                  CP   "{"   
0EDA   28 08                  JR   z,nesting2   
0EDC   FE 5B                  CP   "["   
0EDE   28 04                  JR   z,nesting2   
0EE0   FE 28                  CP   "("   
0EE2   20 02                  JR   nz,nesting3   
0EE4                NESTING2:      
0EE4   1C                     INC   e   
0EE5   C9                     RET      
0EE6                NESTING3:      
0EE6   FE 7D                  CP   "}"   
0EE8   28 07                  JR   z,nesting4   
0EEA   FE 5D                  CP   "]"   
0EEC   28 03                  JR   z,nesting4   
0EEE   FE 29                  CP   ")"   
0EF0   C0                     RET   nz   
0EF1                NESTING4:      
0EF1   1D                     DEC   e   
0EF2   C9                     RET      
0EF3                PROMPT:      
0EF3   CD 03 0F               CALL   printStr   
0EF6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EFB   C9                     RET      
0EFC                CRLF:        
0EFC   CD 03 0F               CALL   printStr   
0EFF   0D 0A 00               .CSTR   "\r\n"   
0F02   C9                     RET      
0F03                             ; prints a null teminated string
0F03                             ; the string should be immediately following the call
0F03                PRINTSTR:      
0F03   E3                     EX   (sp),hl   ; swap			
0F04   CD BC 0E               CALL   putstr   
0F07   23                     INC   hl   ; inc past NUL
0F08   E3                     EX   (sp),hl   ; put it back	
0F09   C9                     RET      
0F0A                INIT:        
0F0A   21 F0 01               LD   hl,titleStr   
0F0D   11 0E 56               LD   de,titleBuf   
0F10   06 14                  LD   b,20   
0F12                INIT1:       
0F12   1A                     LD   a,(de)   
0F13   BE                     CP   (hl)   
0F14   20 17                  JR   nz,coldBoot0   
0F16   13                     INC   de   
0F17   23                     INC   hl   
0F18   10 F8                  DJNZ   init1   
0F1A                WARMINIT:      
0F1A   ED 4B FC 55            LD   bc,(vSavedIP)   ; restore IP
0F1E   ED 7B FE 55            LD   sp,(vSavedSP)   ; restore SP
0F22   DD 2A 00 56            LD   ix,(vSavedNext)   ; restore Next
0F26   FD 2A 02 56            LD   iy,(vSavedBP)   ; restore BP
0F2A   C3 64 0F               JP   start1   
0F2D                COLDBOOT0:      
0F2D   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F30   11 0E 56               LD   de,titleBuf   
0F33   06 14                  LD   b,20   
0F35   ED B0                  LDIR      
0F37                COLDINIT:      
0F37   21 DE 01               LD   hl,isysVars   
0F3A   11 E6 55               LD   de,sysVars   
0F3D   01 12 00               LD   bc,9 * 2   
0F40   ED B0                  LDIR      
0F42   21 00 55               LD   hl,vars   ; 52 vars LO HI
0F45   06 34                  LD   b,26*2   
0F47   AF                     XOR   a   
0F48                COLDBOOT1:      
0F48   77                     LD   (hl),a   
0F49   23                     INC   hl   
0F4A   10 FC                  DJNZ   coldBoot1   
0F4C   DD 2A EE 55            LD   ix,(vNext)   
0F50   FD 21 00 53            LD   iy,STACK   
0F54   C9                     RET      
0F55                COLDSTART:      
0F55   31 00 53               LD   sp,STACK   
0F58   CD 2D 0F               CALL   coldBoot0   
0F5B   C3 64 0F               JP   start1   
0F5E                START:       
0F5E   31 00 53               LD   sp,STACK   ; start Monty
0F61   CD 0A 0F               CALL   init   ; setups
0F64                START1:      
0F64   21 0E 56               LD   hl,titleBuf   
0F67   CD BC 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F6A                INTERPRET:      
0F6A   CD F3 0E               CALL   prompt   
0F6D   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F70   21 00 53               LD   hl,TIB   
0F73   22 EA 55               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F76                INTERPRET2:      ; calculate nesting
0F76   1E 00                  LD   e,0   ; initilize nesting value
0F78   C5                     PUSH   bc   ; save offset into TIB,
0F79                             ; bc is also the count of chars in TIB
0F79   21 00 53               LD   hl,TIB   ; hl is start of TIB
0F7C   18 0B                  JR   interpret4   
0F7E                INTERPRET3:      
0F7E   3E 33                  LD   a,"3"   
0F80   CD 85 00               CALL   putchar   
0F83   7E                     LD   a,(hl)   ; a = char in TIB
0F84   23                     INC   hl   ; inc pointer into TIB
0F85   0B                     DEC   bc   ; dec count of chars in TIB
0F86   CD C1 0E               CALL   nesting   ; update nesting value
0F89                INTERPRET4:      
0F89   79                     LD   a,c   ; is count zero?
0F8A   B0                     OR   b   
0F8B   20 F1                  JR   nz,interpret3   ; if not loop
0F8D   C1                     POP   bc   ; restore offset into TIB
0F8E                INTERPRET5:      
0F8E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F91   FE 20                  CP   $20   ; compare to space
0F93   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F95   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F97                             ; ???? NEEDED?
0F97   28 36                  JR   z,interpret8   
0F99   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F9B   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F9D   FE 05                  CP   CTRL_E   
0F9F   CA 30 10               JP   z,edit_   
0FA2   FE 08                  CP   CTRL_H   
0FA4   CA 20 10               JP   z,backSpace_   
0FA7   FE 0A                  CP   CTRL_J   
0FA9   CA 33 10               JP   z,reEdit_   
0FAC                             ; cp CTRL_S
0FAC                             ; jp z,printStack_
0FAC                             ; DB     lsb(edit_)       ; ENQ ^E  5
0FAC                             ; DB     lsb(reedit_)     ; LF  ^J 10
0FAC                             ; DB     lsb(list_)       ; FF  ^L 12
0FAC                             ; DB     lsb(printStack_) ; DLE ^P 16
0FAC                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0FAC                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0FAC                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0FAC                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0FAC                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0FAC                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0FAC                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0FAC                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0FAC                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0FAC                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0FAC                INTERPRET5A:      
0FAC                             ; ld (vTIBPtr),bc
0FAC                             ; ld bc,(vTIBPtr)
0FAC   18 C8                  JR   interpret2   
0FAE                INTERPRET6:      
0FAE   21 00 53               LD   hl,TIB   
0FB1   09                     ADD   hl,bc   
0FB2   77                     LD   (hl),a   ; store the character in textbuf
0FB3   03                     INC   bc   
0FB4   CD 85 00               CALL   putchar   ; echo character to screen
0FB7   CD C1 0E               CALL   nesting   
0FBA   18 D2                  JR   interpret5   ; wait for next character
0FBC                INTERPRET7:      
0FBC   21 00 53               LD   hl,TIB   
0FBF   09                     ADD   hl,bc   
0FC0   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0FC2   23                     INC   hl   
0FC3   36 0A                  LD   (hl),"\n"   
0FC5   23                     INC   hl   
0FC6   03                     INC   bc   
0FC7   03                     INC   bc   
0FC8   CD FC 0E               CALL   crlf   ; echo character to screen
0FCB   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FCC   B7                     OR   a   
0FCD   20 BF                  JR   nz,interpret5   
0FCF                INTERPRET8:      
0FCF   21 00 53               LD   hl,TIB   
0FD2   09                     ADD   hl,bc   
0FD3   22 EA 55               LD   (vTIBPtr),hl   
0FD6   01 00 53               LD   bc,TIB   
0FD9   ED 43 FC 55            LD   (vSavedIP),bc   ; save IP
0FDD   ED 73 FE 55            LD   (vSavedSP),sp   ; save SP
0FE1   DD 22 00 56            LD   (vSavedNext),ix   ; save Next
0FE5   FD 22 02 56            LD   (vSavedBP),iy   ; save BP
0FE9   0B                     DEC   bc   
0FEA                NEXT:        
0FEA   03                     INC   bc   ; Increment the IP
0FEB   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FEC   FE 20                  CP   " "   ; whitespace?
0FEE   28 FA                  JR   z,next   ; space? ignore
0FF0   38 0D                  JR   c,next1   
0FF2   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FF4   6F                     LD   l,a   ; index into table
0FF5   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FF7   6E                     LD   l,(hl)   ; get low jump address
0FF8   24                     INC   h   ; page 2
0FF9   FE BA                  CP   "Z" - "!" + 1 + $80   
0FFB   38 01                  JR   c,next0   
0FFD   24                     INC   h   ; page 3
0FFE                NEXT0:       
0FFE   E9                     JP   (hl)   ; Jump to routine
0FFF                NEXT1:       
0FFF   FE 00                  CP   NUL   ; end of input string?
1001   28 03                  JR   z,exit   
1003   C3 6A 0F               JP   interpret   ; no, other whitespace, macros?
1006                EXIT:        
1006   03                     INC   bc   
1007   60 69                  LD   hl,bc   
1009   E9                     JP   (hl)   
100A                RUN:         
100A   C1                     POP   bc   
100B   0B                     DEC   bc   
100C   DD E9                  JP   (ix)   
100E                ERROR:       
100E   E5                     PUSH   hl   
100F   CD 0A 10               CALL   run   
1012   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
101D   C3 6A 0F               JP   interpret   
1020                BACKSPACE_:      
1020   79                     LD   a,c   
1021   B0                     OR   b   
1022   CA 76 0F               JP   z,interpret2   
1025   0B                     DEC   bc   
1026   CD 03 0F               CALL   printStr   
1029   08 20 08 00            .CSTR   "\b \b"   
102D   C3 76 0F               JP   interpret2   
1030                             ; edit
1030                EDIT_:       
1030   C3 6A 0F               JP   interpret   
1033                REEDIT_:      
1033   C3 6A 0F               JP   interpret   
1036                             ; editDef:
1036                             ;     pop hl                      ; pop ret address
1036                             ;     ex (sp),hl                  ; swap with TOS
1036                             ;     push hl                     ; dup TOS
1036                             ;     ld a,l                      ; a = ident
1036                             ;     ld de,TIB                   ; de = start of TIB
1036                             ;     ld (vTIBPtr),de             ; update TIB*
1036                             ;     push ix                     ; save NEXT
1036                             ;     ld ix,editDef0              ; NEXT = editDef0
1036                             ;     jp lookupRef                ; convert letter into address
1036                             ; editDef0:
1036                             ;     ld e,(hl)                   ; de = (hl++)
1036                             ;     inc hl
1036                             ;     ld d,(hl)
1036                             ;     ld a,d                      ; de == 0 ?
1036                             ;     or e
1036                             ;     jr z,editDef4
1036                             ;     ld ix,editDef3              ; NEXT = editDef3
1036                             ;     ex de,hl
1036                             ;     ld a,(hl)
1036                             ;     cp "{"
1036                             ;     jr nz,editDef1
1036                             ;     jp editBlock0               ; convert letter into address
1036                             ; editDef1:
1036                             ;     cp "("
1036                             ;     jr nz,editDef2
1036                             ;     jp editBlock0               ; convert letter into address
1036                             ; editDef2:
1036                             ;     jp editFunc
1036                             ; editDef3:
1036                             ;     ld a," "                    ; write assign
1036                             ;     call writeChar
1036                             ;     pop hl                      ; a = ident
1036                             ;     ld a,l
1036                             ;     call writeChar
1036                             ;     ld a,"="                    ; write assign
1036                             ;     call writeChar
1036                             ;     ld ix,editDef4              ; NEXT = editDef4
1036                             ;     jp printTIB
1036                             ; editDef4:
1036                             ;     pop ix                      ; restore NEXT
1036                             ;     jp (ix)
1036                             ; writeChar:
1036                             ;     ld de,(vTIBPtr)             ; de = TIB*
1036                             ;     ld (de),a                   ; write ident
1036                             ;     inc de
1036                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1036                             ;     ret
1036                             ; ; printTIB
1036                             ; printTIB:
1036                             ;     ld hl,(vTIBPtr)
1036                             ;     ld de,TIB
1036                             ;     or a
1036                             ;     sbc hl,de
1036                             ;     jp printTIB2
1036                             ; printTIB1:
1036                             ;     ld a,(de)
1036                             ;     call putchar
1036                             ; printTIB2:
1036                             ;     ld a,l
1036                             ;     or h
1036                             ;     jr nz,printTIB1
1036                             ;     jp (ix)
1036                             ; editBlock:
1036                             ;     pop hl                      ; hl = block*
1036                             ; editBlock0:
1036                             ;     push ix                     ; save next
1036                             ;     push hl                     ; push block*
1036                             ;     push hl                     ; push block*
1036                             ;     ld ix,(editBlock2)
1036                             ;     jp blockLength
1036                             ; editBlock1:
1036                             ;     pop hl                      ; bc = length, (sp) = IP
1036                             ;     pop de                      ; de = block*
1036                             ;     ld a,l
1036                             ;     or h
1036                             ;     jr z,editBlock2
1036                             ;     push bc
1036                             ;     ld bc,hl
1036                             ;     ex de,hl                    ; hl = block*
1036                             ;     ld de,(vTIBPtr)              ; de = TIB*
1036                             ;     ldir                        ; copy block to TIB
1036                             ;     ld (vTIBPtr),de              ; save TIB*
1036                             ;     pop bc
1036                             ; editBlock2:
1036                             ;     pop ix                      ; restore next
1036                             ;     jp (ix)
1036                             ; editFunc:
1036                             ;     jp (ix)
1036                             ; editArray:
1036                             ;     jp (ix)
1036                             ; editparseArgs:
1036                             ;     jp (ix)
1036                             ; ; blockLength
1036                             ; ; addr1 -- length
1036                             ; blockLength:
1036                             ;     pop hl                      ; block*
1036                             ;     push hl                     ; save block*
1036                             ;     inc hl                      ; skip first char
1036                             ;     ld d,1                      ; increase nesting
1036                             ; blockLength1:                   ; Skip to end of definition
1036                             ;     ld a,(hl)                   ; Get the next character
1036                             ;     inc hl                      ; Point to next character
1036                             ;     cp " " + 1                  ; ignore whitespace
1036                             ;     jr c,blockLength1
1036                             ;     cp ")"
1036                             ;     jr z,blockLength4
1036                             ;     cp "}"
1036                             ;     jr z,blockLength4
1036                             ;     cp "]"
1036                             ;     jr z,blockLength4
1036                             ;     cp "("
1036                             ;     jr z,blockLength2
1036                             ;     cp "{"
1036                             ;     jr z,blockLength2
1036                             ;     cp "["
1036                             ;     jr z,blockLength2
1036                             ;     cp "'"
1036                             ;     jr z,blockLength3
1036                             ;     cp "`"
1036                             ;     jr z,blockLength3
1036                             ;     cp DQ
1036                             ;     jr z,blockLength3
1036                             ;     jr blockLength1
1036                             ; blockLength2:
1036                             ;     inc d
1036                             ;     jr blockLength1
1036                             ; blockLength4:
1036                             ;     dec d
1036                             ;     jr nz, blockLength1         ; get the next element
1036                             ; blockLength3:
1036                             ;     ld a,$80
1036                             ;     xor d
1036                             ;     ld d,a
1036                             ;     jr nz, blockLength1
1036                             ;     pop hl                      ; hl = block*
1036                             ;     or a
1036                             ;     sbc hl,de
1036                             ;     push hl
1036                             ;     jp (ix)
1036                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1036                             ; \a start of stack \#3 depth \b base \$ prompt
1036                             ; DW dStack               ; a vS0 start of datastack			
1036                             ; DW FALSE                ; b vBase16
1036                             ; DW 0                    ; c vTIBPtr an offset to the tib
1036                             ; DW 0                    ; d
1036                             ; DW 65                   ; e vLastDef "A" last command u defined
1036                             ; DW 0                    ; f
1036                             ; DW page6                ; g 256 bytes limits
1036                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1036                          ;*Macro unroll: FUNC f1, 0, ""
1036                F1:          
1036   CD 9F 03               CALL   go   
1039   00 00                  DW   NUL   
103B   41 10                  DW   f1M_3073S12   
103D   3F 10                  DW   $+2   
103F   00                     DB   0   
1040   00                     .PSTR   ""   
1041                F1M_3073S12:      
1041   00                     DB   0   
1042                          ;*Macro unroll: FUNC f2, 0, ""
1042                F2:          
1042   CD 9F 03               CALL   go   
1045   00 00                  DW   NUL   
1047   4D 10                  DW   f2M_3075S15   
1049   4B 10                  DW   $+2   
104B   00                     DB   0   
104C   00                     .PSTR   ""   
104D                F2M_3075S15:      
104D   00                     DB   0   
104E                          ;*Macro unroll: FUNC f3, 0, ""
104E                F3:          
104E   CD 9F 03               CALL   go   
1051   00 00                  DW   NUL   
1053   59 10                  DW   f3M_3077S18   
1055   57 10                  DW   $+2   
1057   00                     DB   0   
1058   00                     .PSTR   ""   
1059                F3M_3077S18:      
1059   00                     DB   0   
105A                          ;*Macro unroll: FUNC f4, 0, ""
105A                F4:          
105A   CD 9F 03               CALL   go   
105D   00 00                  DW   NUL   
105F   65 10                  DW   f4M_3079S21   
1061   63 10                  DW   $+2   
1063   00                     DB   0   
1064   00                     .PSTR   ""   
1065                F4M_3079S21:      
1065   00                     DB   0   
1066                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1100                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1100                             ; test "[1 2 3].a", 0
1100                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1100                             ; test "/hx/bm$1234.",0
1100                             ; test "/bm257.",0
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1100                             ; call printStr
1100                             ; .cstr "Done!"
1100                             ; HALT
1100                          ;*Macro unroll:  test "/f", false
1100   31 00 53               LD   SP,STACK   
1103   CD 37 0F               CALL   coldInit   
1106   CD C6 51               CALL   execStr   
1109   2F 66 00               DB   "/f",0   
110C   E1                     POP   HL   
110D   E5                     PUSH   HL   
110E   11 00 00               LD   DE,false   
1111   B7                     OR   A   
1112   ED 52                  SBC   HL,DE   
1114   7D                     LD   A,L   
1115   B4                     OR   H   
1116   CA 68 11               JP   Z,expectM_3099S47   
1119   CD 03 0F               CALL   printStr   
111C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1125   CD 03 0F               CALL   printStr   
1128   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1137   21 00 00               LD   hl,false   
113A   E5                     PUSH   hl   
113B   E5                     PUSH   hl   
113C   CD 0A 10               CALL   run   
113F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1146   CD 03 0F               CALL   printStr   
1149   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1156   E1                     POP   hl   
1157   E5                     PUSH   hl   
1158   E5                     PUSH   hl   
1159   CD 0A 10               CALL   run   
115C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1167   76                     HALT      
1168                EXPECTM_3099S47:      
1168   E1                     POP   HL   
1169                          ;*Macro unroll:  test "/t", true
1169   31 00 53               LD   SP,STACK   
116C   CD 37 0F               CALL   coldInit   
116F   CD C6 51               CALL   execStr   
1172   2F 74 00               DB   "/t",0   
1175   E1                     POP   HL   
1176   E5                     PUSH   HL   
1177   11 FF FF               LD   DE,true   
117A   B7                     OR   A   
117B   ED 52                  SBC   HL,DE   
117D   7D                     LD   A,L   
117E   B4                     OR   H   
117F   CA D1 11               JP   Z,expectM_3100S48   
1182   CD 03 0F               CALL   printStr   
1185   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
118E   CD 03 0F               CALL   printStr   
1191   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A0   21 FF FF               LD   hl,true   
11A3   E5                     PUSH   hl   
11A4   E5                     PUSH   hl   
11A5   CD 0A 10               CALL   run   
11A8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11AF   CD 03 0F               CALL   printStr   
11B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11BF   E1                     POP   hl   
11C0   E5                     PUSH   hl   
11C1   E5                     PUSH   hl   
11C2   CD 0A 10               CALL   run   
11C5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
11D0   76                     HALT      
11D1                EXPECTM_3100S48:      
11D1   E1                     POP   HL   
11D2                          ;*Macro unroll:  test "1", 1
11D2   31 00 53               LD   SP,STACK   
11D5   CD 37 0F               CALL   coldInit   
11D8   CD C6 51               CALL   execStr   
11DB   31 00                  DB   "1",0   
11DD   E1                     POP   HL   
11DE   E5                     PUSH   HL   
11DF   11 01 00               LD   DE,1   
11E2   B7                     OR   A   
11E3   ED 52                  SBC   HL,DE   
11E5   7D                     LD   A,L   
11E6   B4                     OR   H   
11E7   CA 38 12               JP   Z,expectM_3101S49   
11EA   CD 03 0F               CALL   printStr   
11ED   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11F5   CD 03 0F               CALL   printStr   
11F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1207   21 01 00               LD   hl,1   
120A   E5                     PUSH   hl   
120B   E5                     PUSH   hl   
120C   CD 0A 10               CALL   run   
120F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1216   CD 03 0F               CALL   printStr   
1219   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1226   E1                     POP   hl   
1227   E5                     PUSH   hl   
1228   E5                     PUSH   hl   
1229   CD 0A 10               CALL   run   
122C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1237   76                     HALT      
1238                EXPECTM_3101S49:      
1238   E1                     POP   HL   
1239                          ;*Macro unroll:  test "2", 2
1239   31 00 53               LD   SP,STACK   
123C   CD 37 0F               CALL   coldInit   
123F   CD C6 51               CALL   execStr   
1242   32 00                  DB   "2",0   
1244   E1                     POP   HL   
1245   E5                     PUSH   HL   
1246   11 02 00               LD   DE,2   
1249   B7                     OR   A   
124A   ED 52                  SBC   HL,DE   
124C   7D                     LD   A,L   
124D   B4                     OR   H   
124E   CA 9F 12               JP   Z,expectM_3102S50   
1251   CD 03 0F               CALL   printStr   
1254   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
125C   CD 03 0F               CALL   printStr   
125F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
126E   21 02 00               LD   hl,2   
1271   E5                     PUSH   hl   
1272   E5                     PUSH   hl   
1273   CD 0A 10               CALL   run   
1276   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
127D   CD 03 0F               CALL   printStr   
1280   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
128D   E1                     POP   hl   
128E   E5                     PUSH   hl   
128F   E5                     PUSH   hl   
1290   CD 0A 10               CALL   run   
1293   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
129E   76                     HALT      
129F                EXPECTM_3102S50:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "1", 1
12A0   31 00 53               LD   SP,STACK   
12A3   CD 37 0F               CALL   coldInit   
12A6   CD C6 51               CALL   execStr   
12A9   31 00                  DB   "1",0   
12AB   E1                     POP   HL   
12AC   E5                     PUSH   HL   
12AD   11 01 00               LD   DE,1   
12B0   B7                     OR   A   
12B1   ED 52                  SBC   HL,DE   
12B3   7D                     LD   A,L   
12B4   B4                     OR   H   
12B5   CA 06 13               JP   Z,expectM_3103S51   
12B8   CD 03 0F               CALL   printStr   
12BB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12C3   CD 03 0F               CALL   printStr   
12C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D5   21 01 00               LD   hl,1   
12D8   E5                     PUSH   hl   
12D9   E5                     PUSH   hl   
12DA   CD 0A 10               CALL   run   
12DD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12E4   CD 03 0F               CALL   printStr   
12E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F4   E1                     POP   hl   
12F5   E5                     PUSH   hl   
12F6   E5                     PUSH   hl   
12F7   CD 0A 10               CALL   run   
12FA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1305   76                     HALT      
1306                EXPECTM_3103S51:      
1306   E1                     POP   HL   
1307                          ;*Macro unroll:  test "0", 0
1307   31 00 53               LD   SP,STACK   
130A   CD 37 0F               CALL   coldInit   
130D   CD C6 51               CALL   execStr   
1310   30 00                  DB   "0",0   
1312   E1                     POP   HL   
1313   E5                     PUSH   HL   
1314   11 00 00               LD   DE,0   
1317   B7                     OR   A   
1318   ED 52                  SBC   HL,DE   
131A   7D                     LD   A,L   
131B   B4                     OR   H   
131C   CA 6D 13               JP   Z,expectM_3104S52   
131F   CD 03 0F               CALL   printStr   
1322   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
132A   CD 03 0F               CALL   printStr   
132D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
133C   21 00 00               LD   hl,0   
133F   E5                     PUSH   hl   
1340   E5                     PUSH   hl   
1341   CD 0A 10               CALL   run   
1344   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
134B   CD 03 0F               CALL   printStr   
134E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
135B   E1                     POP   hl   
135C   E5                     PUSH   hl   
135D   E5                     PUSH   hl   
135E   CD 0A 10               CALL   run   
1361   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
136C   76                     HALT      
136D                EXPECTM_3104S52:      
136D   E1                     POP   HL   
136E                          ;*Macro unroll:  test "10", 10
136E   31 00 53               LD   SP,STACK   
1371   CD 37 0F               CALL   coldInit   
1374   CD C6 51               CALL   execStr   
1377   31 30 00               DB   "10",0   
137A   E1                     POP   HL   
137B   E5                     PUSH   HL   
137C   11 0A 00               LD   DE,10   
137F   B7                     OR   A   
1380   ED 52                  SBC   HL,DE   
1382   7D                     LD   A,L   
1383   B4                     OR   H   
1384   CA D6 13               JP   Z,expectM_3105S53   
1387   CD 03 0F               CALL   printStr   
138A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1393   CD 03 0F               CALL   printStr   
1396   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13A5   21 0A 00               LD   hl,10   
13A8   E5                     PUSH   hl   
13A9   E5                     PUSH   hl   
13AA   CD 0A 10               CALL   run   
13AD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13B4   CD 03 0F               CALL   printStr   
13B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13C4   E1                     POP   hl   
13C5   E5                     PUSH   hl   
13C6   E5                     PUSH   hl   
13C7   CD 0A 10               CALL   run   
13CA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13D5   76                     HALT      
13D6                EXPECTM_3105S53:      
13D6   E1                     POP   HL   
13D7                          ;*Macro unroll:  test "123", 123
13D7   31 00 53               LD   SP,STACK   
13DA   CD 37 0F               CALL   coldInit   
13DD   CD C6 51               CALL   execStr   
13E0   31 32 33 00            DB   "123",0   
13E4   E1                     POP   HL   
13E5   E5                     PUSH   HL   
13E6   11 7B 00               LD   DE,123   
13E9   B7                     OR   A   
13EA   ED 52                  SBC   HL,DE   
13EC   7D                     LD   A,L   
13ED   B4                     OR   H   
13EE   CA 41 14               JP   Z,expectM_3106S54   
13F1   CD 03 0F               CALL   printStr   
13F4   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
13FE   CD 03 0F               CALL   printStr   
1401   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1410   21 7B 00               LD   hl,123   
1413   E5                     PUSH   hl   
1414   E5                     PUSH   hl   
1415   CD 0A 10               CALL   run   
1418   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
141F   CD 03 0F               CALL   printStr   
1422   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
142F   E1                     POP   hl   
1430   E5                     PUSH   hl   
1431   E5                     PUSH   hl   
1432   CD 0A 10               CALL   run   
1435   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1440   76                     HALT      
1441                EXPECTM_3106S54:      
1441   E1                     POP   HL   
1442                          ;*Macro unroll:  test "-1",-1
1442   31 00 53               LD   SP,STACK   
1445   CD 37 0F               CALL   coldInit   
1448   CD C6 51               CALL   execStr   
144B   2D 31 00               DB   "-1",0   
144E   E1                     POP   HL   
144F   E5                     PUSH   HL   
1450   11 FF FF               LD   DE,-1   
1453   B7                     OR   A   
1454   ED 52                  SBC   HL,DE   
1456   7D                     LD   A,L   
1457   B4                     OR   H   
1458   CA AA 14               JP   Z,expectM_3107S55   
145B   CD 03 0F               CALL   printStr   
145E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1467   CD 03 0F               CALL   printStr   
146A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1479   21 FF FF               LD   hl,-1   
147C   E5                     PUSH   hl   
147D   E5                     PUSH   hl   
147E   CD 0A 10               CALL   run   
1481   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1488   CD 03 0F               CALL   printStr   
148B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1498   E1                     POP   hl   
1499   E5                     PUSH   hl   
149A   E5                     PUSH   hl   
149B   CD 0A 10               CALL   run   
149E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14A9   76                     HALT      
14AA                EXPECTM_3107S55:      
14AA   E1                     POP   HL   
14AB                          ;*Macro unroll:  test "-1/ab",1
14AB   31 00 53               LD   SP,STACK   
14AE   CD 37 0F               CALL   coldInit   
14B1   CD C6 51               CALL   execStr   
14B4   2D 31 2F 61 62 00      DB   "-1/ab",0   
14BA   E1                     POP   HL   
14BB   E5                     PUSH   HL   
14BC   11 01 00               LD   DE,1   
14BF   B7                     OR   A   
14C0   ED 52                  SBC   HL,DE   
14C2   7D                     LD   A,L   
14C3   B4                     OR   H   
14C4   CA 19 15               JP   Z,expectM_3108S56   
14C7   CD 03 0F               CALL   printStr   
14CA   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
14D6   CD 03 0F               CALL   printStr   
14D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E8   21 01 00               LD   hl,1   
14EB   E5                     PUSH   hl   
14EC   E5                     PUSH   hl   
14ED   CD 0A 10               CALL   run   
14F0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14F7   CD 03 0F               CALL   printStr   
14FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1507   E1                     POP   hl   
1508   E5                     PUSH   hl   
1509   E5                     PUSH   hl   
150A   CD 0A 10               CALL   run   
150D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1518   76                     HALT      
1519                EXPECTM_3108S56:      
1519   E1                     POP   HL   
151A                          ;*Macro unroll:  test "_a", $61
151A   31 00 53               LD   SP,STACK   
151D   CD 37 0F               CALL   coldInit   
1520   CD C6 51               CALL   execStr   
1523   5F 61 00               DB   "_a",0   
1526   E1                     POP   HL   
1527   E5                     PUSH   HL   
1528   11 61 00               LD   DE,$61   
152B   B7                     OR   A   
152C   ED 52                  SBC   HL,DE   
152E   7D                     LD   A,L   
152F   B4                     OR   H   
1530   CA 82 15               JP   Z,expectM_3109S57   
1533   CD 03 0F               CALL   printStr   
1536   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
153F   CD 03 0F               CALL   printStr   
1542   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1551   21 61 00               LD   hl,$61   
1554   E5                     PUSH   hl   
1555   E5                     PUSH   hl   
1556   CD 0A 10               CALL   run   
1559   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1560   CD 03 0F               CALL   printStr   
1563   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1570   E1                     POP   hl   
1571   E5                     PUSH   hl   
1572   E5                     PUSH   hl   
1573   CD 0A 10               CALL   run   
1576   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1581   76                     HALT      
1582                EXPECTM_3109S57:      
1582   E1                     POP   HL   
1583                          ;*Macro unroll:  test "__", $5F
1583   31 00 53               LD   SP,STACK   
1586   CD 37 0F               CALL   coldInit   
1589   CD C6 51               CALL   execStr   
158C   5F 5F 00               DB   "__",0   
158F   E1                     POP   HL   
1590   E5                     PUSH   HL   
1591   11 5F 00               LD   DE,$5F   
1594   B7                     OR   A   
1595   ED 52                  SBC   HL,DE   
1597   7D                     LD   A,L   
1598   B4                     OR   H   
1599   CA EB 15               JP   Z,expectM_3110S58   
159C   CD 03 0F               CALL   printStr   
159F   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
15A8   CD 03 0F               CALL   printStr   
15AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15BA   21 5F 00               LD   hl,$5F   
15BD   E5                     PUSH   hl   
15BE   E5                     PUSH   hl   
15BF   CD 0A 10               CALL   run   
15C2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15C9   CD 03 0F               CALL   printStr   
15CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15D9   E1                     POP   hl   
15DA   E5                     PUSH   hl   
15DB   E5                     PUSH   hl   
15DC   CD 0A 10               CALL   run   
15DF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15EA   76                     HALT      
15EB                EXPECTM_3110S58:      
15EB   E1                     POP   HL   
15EC                          ;*Macro unroll:  test "$10", $10
15EC   31 00 53               LD   SP,STACK   
15EF   CD 37 0F               CALL   coldInit   
15F2   CD C6 51               CALL   execStr   
15F5   24 31 30 00            DB   "$10",0   
15F9   E1                     POP   HL   
15FA   E5                     PUSH   HL   
15FB   11 10 00               LD   DE,$10   
15FE   B7                     OR   A   
15FF   ED 52                  SBC   HL,DE   
1601   7D                     LD   A,L   
1602   B4                     OR   H   
1603   CA 56 16               JP   Z,expectM_3111S59   
1606   CD 03 0F               CALL   printStr   
1609   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1613   CD 03 0F               CALL   printStr   
1616   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1625   21 10 00               LD   hl,$10   
1628   E5                     PUSH   hl   
1629   E5                     PUSH   hl   
162A   CD 0A 10               CALL   run   
162D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1634   CD 03 0F               CALL   printStr   
1637   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1644   E1                     POP   hl   
1645   E5                     PUSH   hl   
1646   E5                     PUSH   hl   
1647   CD 0A 10               CALL   run   
164A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1655   76                     HALT      
1656                EXPECTM_3111S59:      
1656   E1                     POP   HL   
1657                          ;*Macro unroll:  test "$FF", $FF
1657   31 00 53               LD   SP,STACK   
165A   CD 37 0F               CALL   coldInit   
165D   CD C6 51               CALL   execStr   
1660   24 46 46 00            DB   "$FF",0   
1664   E1                     POP   HL   
1665   E5                     PUSH   HL   
1666   11 FF 00               LD   DE,$FF   
1669   B7                     OR   A   
166A   ED 52                  SBC   HL,DE   
166C   7D                     LD   A,L   
166D   B4                     OR   H   
166E   CA C1 16               JP   Z,expectM_3112S60   
1671   CD 03 0F               CALL   printStr   
1674   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
167E   CD 03 0F               CALL   printStr   
1681   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1690   21 FF 00               LD   hl,$FF   
1693   E5                     PUSH   hl   
1694   E5                     PUSH   hl   
1695   CD 0A 10               CALL   run   
1698   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
169F   CD 03 0F               CALL   printStr   
16A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16AF   E1                     POP   hl   
16B0   E5                     PUSH   hl   
16B1   E5                     PUSH   hl   
16B2   CD 0A 10               CALL   run   
16B5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16C0   76                     HALT      
16C1                EXPECTM_3112S60:      
16C1   E1                     POP   HL   
16C2                          ;*Macro unroll:  test "-1 2 +",1
16C2   31 00 53               LD   SP,STACK   
16C5   CD 37 0F               CALL   coldInit   
16C8   CD C6 51               CALL   execStr   
16CB   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
16D2   E1                     POP   HL   
16D3   E5                     PUSH   HL   
16D4   11 01 00               LD   DE,1   
16D7   B7                     OR   A   
16D8   ED 52                  SBC   HL,DE   
16DA   7D                     LD   A,L   
16DB   B4                     OR   H   
16DC   CA 32 17               JP   Z,expectM_3113S61   
16DF   CD 03 0F               CALL   printStr   
16E2   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
16EF   CD 03 0F               CALL   printStr   
16F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1701   21 01 00               LD   hl,1   
1704   E5                     PUSH   hl   
1705   E5                     PUSH   hl   
1706   CD 0A 10               CALL   run   
1709   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1710   CD 03 0F               CALL   printStr   
1713   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1720   E1                     POP   hl   
1721   E5                     PUSH   hl   
1722   E5                     PUSH   hl   
1723   CD 0A 10               CALL   run   
1726   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1731   76                     HALT      
1732                EXPECTM_3113S61:      
1732   E1                     POP   HL   
1733                          ;*Macro unroll:  test "-1 1 +",0
1733   31 00 53               LD   SP,STACK   
1736   CD 37 0F               CALL   coldInit   
1739   CD C6 51               CALL   execStr   
173C   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1743   E1                     POP   HL   
1744   E5                     PUSH   HL   
1745   11 00 00               LD   DE,0   
1748   B7                     OR   A   
1749   ED 52                  SBC   HL,DE   
174B   7D                     LD   A,L   
174C   B4                     OR   H   
174D   CA A3 17               JP   Z,expectM_3114S62   
1750   CD 03 0F               CALL   printStr   
1753   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1760   CD 03 0F               CALL   printStr   
1763   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1772   21 00 00               LD   hl,0   
1775   E5                     PUSH   hl   
1776   E5                     PUSH   hl   
1777   CD 0A 10               CALL   run   
177A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1781   CD 03 0F               CALL   printStr   
1784   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1791   E1                     POP   hl   
1792   E5                     PUSH   hl   
1793   E5                     PUSH   hl   
1794   CD 0A 10               CALL   run   
1797   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17A2   76                     HALT      
17A3                EXPECTM_3114S62:      
17A3   E1                     POP   HL   
17A4                          ;*Macro unroll:  test "1 2 +", 3
17A4   31 00 53               LD   SP,STACK   
17A7   CD 37 0F               CALL   coldInit   
17AA   CD C6 51               CALL   execStr   
17AD   31 20 32 20 2B 00      DB   "1 2 +",0   
17B3   E1                     POP   HL   
17B4   E5                     PUSH   HL   
17B5   11 03 00               LD   DE,3   
17B8   B7                     OR   A   
17B9   ED 52                  SBC   HL,DE   
17BB   7D                     LD   A,L   
17BC   B4                     OR   H   
17BD   CA 12 18               JP   Z,expectM_3115S63   
17C0   CD 03 0F               CALL   printStr   
17C3   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17CF   CD 03 0F               CALL   printStr   
17D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E1   21 03 00               LD   hl,3   
17E4   E5                     PUSH   hl   
17E5   E5                     PUSH   hl   
17E6   CD 0A 10               CALL   run   
17E9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17F0   CD 03 0F               CALL   printStr   
17F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1800   E1                     POP   hl   
1801   E5                     PUSH   hl   
1802   E5                     PUSH   hl   
1803   CD 0A 10               CALL   run   
1806   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1811   76                     HALT      
1812                EXPECTM_3115S63:      
1812   E1                     POP   HL   
1813                          ;*Macro unroll:  test "4 1 2 +", 3
1813   31 00 53               LD   SP,STACK   
1816   CD 37 0F               CALL   coldInit   
1819   CD C6 51               CALL   execStr   
181C   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1824   E1                     POP   HL   
1825   E5                     PUSH   HL   
1826   11 03 00               LD   DE,3   
1829   B7                     OR   A   
182A   ED 52                  SBC   HL,DE   
182C   7D                     LD   A,L   
182D   B4                     OR   H   
182E   CA 85 18               JP   Z,expectM_3116S64   
1831   CD 03 0F               CALL   printStr   
1834   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1842   CD 03 0F               CALL   printStr   
1845   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1854   21 03 00               LD   hl,3   
1857   E5                     PUSH   hl   
1858   E5                     PUSH   hl   
1859   CD 0A 10               CALL   run   
185C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1863   CD 03 0F               CALL   printStr   
1866   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1873   E1                     POP   hl   
1874   E5                     PUSH   hl   
1875   E5                     PUSH   hl   
1876   CD 0A 10               CALL   run   
1879   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1884   76                     HALT      
1885                EXPECTM_3116S64:      
1885   E1                     POP   HL   
1886                          ;*Macro unroll:  test "123 456 +", 123+456
1886   31 00 53               LD   SP,STACK   
1889   CD 37 0F               CALL   coldInit   
188C   CD C6 51               CALL   execStr   
188F   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1899   E1                     POP   HL   
189A   E5                     PUSH   HL   
189B   11 43 02               LD   DE,123+456   
189E   B7                     OR   A   
189F   ED 52                  SBC   HL,DE   
18A1   7D                     LD   A,L   
18A2   B4                     OR   H   
18A3   CA FC 18               JP   Z,expectM_3117S65   
18A6   CD 03 0F               CALL   printStr   
18A9   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
18B9   CD 03 0F               CALL   printStr   
18BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CB   21 43 02               LD   hl,123+456   
18CE   E5                     PUSH   hl   
18CF   E5                     PUSH   hl   
18D0   CD 0A 10               CALL   run   
18D3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18DA   CD 03 0F               CALL   printStr   
18DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18EA   E1                     POP   hl   
18EB   E5                     PUSH   hl   
18EC   E5                     PUSH   hl   
18ED   CD 0A 10               CALL   run   
18F0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18FB   76                     HALT      
18FC                EXPECTM_3117S65:      
18FC   E1                     POP   HL   
18FD                          ;*Macro unroll:  test "64 128 +", 64+128
18FD   31 00 53               LD   SP,STACK   
1900   CD 37 0F               CALL   coldInit   
1903   CD C6 51               CALL   execStr   
1906   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
190F   E1                     POP   HL   
1910   E5                     PUSH   HL   
1911   11 C0 00               LD   DE,64+128   
1914   B7                     OR   A   
1915   ED 52                  SBC   HL,DE   
1917   7D                     LD   A,L   
1918   B4                     OR   H   
1919   CA 71 19               JP   Z,expectM_3118S66   
191C   CD 03 0F               CALL   printStr   
191F   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
192E   CD 03 0F               CALL   printStr   
1931   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1940   21 C0 00               LD   hl,64+128   
1943   E5                     PUSH   hl   
1944   E5                     PUSH   hl   
1945   CD 0A 10               CALL   run   
1948   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
194F   CD 03 0F               CALL   printStr   
1952   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
195F   E1                     POP   hl   
1960   E5                     PUSH   hl   
1961   E5                     PUSH   hl   
1962   CD 0A 10               CALL   run   
1965   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1970   76                     HALT      
1971                EXPECTM_3118S66:      
1971   E1                     POP   HL   
1972                          ;*Macro unroll:  test "1 2 +", 3
1972   31 00 53               LD   SP,STACK   
1975   CD 37 0F               CALL   coldInit   
1978   CD C6 51               CALL   execStr   
197B   31 20 32 20 2B 00      DB   "1 2 +",0   
1981   E1                     POP   HL   
1982   E5                     PUSH   HL   
1983   11 03 00               LD   DE,3   
1986   B7                     OR   A   
1987   ED 52                  SBC   HL,DE   
1989   7D                     LD   A,L   
198A   B4                     OR   H   
198B   CA E0 19               JP   Z,expectM_3119S67   
198E   CD 03 0F               CALL   printStr   
1991   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
199D   CD 03 0F               CALL   printStr   
19A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19AF   21 03 00               LD   hl,3   
19B2   E5                     PUSH   hl   
19B3   E5                     PUSH   hl   
19B4   CD 0A 10               CALL   run   
19B7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19BE   CD 03 0F               CALL   printStr   
19C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19CE   E1                     POP   hl   
19CF   E5                     PUSH   hl   
19D0   E5                     PUSH   hl   
19D1   CD 0A 10               CALL   run   
19D4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19DF   76                     HALT      
19E0                EXPECTM_3119S67:      
19E0   E1                     POP   HL   
19E1                          ;*Macro unroll:  test "1a= a++ a",2
19E1   31 00 53               LD   SP,STACK   
19E4   CD 37 0F               CALL   coldInit   
19E7   CD C6 51               CALL   execStr   
19EA   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19F4   E1                     POP   HL   
19F5   E5                     PUSH   HL   
19F6   11 02 00               LD   DE,2   
19F9   B7                     OR   A   
19FA   ED 52                  SBC   HL,DE   
19FC   7D                     LD   A,L   
19FD   B4                     OR   H   
19FE   CA 57 1A               JP   Z,expectM_3120S68   
1A01   CD 03 0F               CALL   printStr   
1A04   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A14   CD 03 0F               CALL   printStr   
1A17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A26   21 02 00               LD   hl,2   
1A29   E5                     PUSH   hl   
1A2A   E5                     PUSH   hl   
1A2B   CD 0A 10               CALL   run   
1A2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A35   CD 03 0F               CALL   printStr   
1A38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A45   E1                     POP   hl   
1A46   E5                     PUSH   hl   
1A47   E5                     PUSH   hl   
1A48   CD 0A 10               CALL   run   
1A4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A56   76                     HALT      
1A57                EXPECTM_3120S68:      
1A57   E1                     POP   HL   
1A58                          ;*Macro unroll:  test "-1 -1 -",0
1A58   31 00 53               LD   SP,STACK   
1A5B   CD 37 0F               CALL   coldInit   
1A5E   CD C6 51               CALL   execStr   
1A61   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A69   E1                     POP   HL   
1A6A   E5                     PUSH   HL   
1A6B   11 00 00               LD   DE,0   
1A6E   B7                     OR   A   
1A6F   ED 52                  SBC   HL,DE   
1A71   7D                     LD   A,L   
1A72   B4                     OR   H   
1A73   CA CA 1A               JP   Z,expectM_3121S69   
1A76   CD 03 0F               CALL   printStr   
1A79   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A87   CD 03 0F               CALL   printStr   
1A8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A99   21 00 00               LD   hl,0   
1A9C   E5                     PUSH   hl   
1A9D   E5                     PUSH   hl   
1A9E   CD 0A 10               CALL   run   
1AA1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AA8   CD 03 0F               CALL   printStr   
1AAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB8   E1                     POP   hl   
1AB9   E5                     PUSH   hl   
1ABA   E5                     PUSH   hl   
1ABB   CD 0A 10               CALL   run   
1ABE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AC9   76                     HALT      
1ACA                EXPECTM_3121S69:      
1ACA   E1                     POP   HL   
1ACB                          ;*Macro unroll:  test "5 3 -", 2
1ACB   31 00 53               LD   SP,STACK   
1ACE   CD 37 0F               CALL   coldInit   
1AD1   CD C6 51               CALL   execStr   
1AD4   35 20 33 20 2D 00      DB   "5 3 -",0   
1ADA   E1                     POP   HL   
1ADB   E5                     PUSH   HL   
1ADC   11 02 00               LD   DE,2   
1ADF   B7                     OR   A   
1AE0   ED 52                  SBC   HL,DE   
1AE2   7D                     LD   A,L   
1AE3   B4                     OR   H   
1AE4   CA 39 1B               JP   Z,expectM_3122S70   
1AE7   CD 03 0F               CALL   printStr   
1AEA   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1AF6   CD 03 0F               CALL   printStr   
1AF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B08   21 02 00               LD   hl,2   
1B0B   E5                     PUSH   hl   
1B0C   E5                     PUSH   hl   
1B0D   CD 0A 10               CALL   run   
1B10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B17   CD 03 0F               CALL   printStr   
1B1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B27   E1                     POP   hl   
1B28   E5                     PUSH   hl   
1B29   E5                     PUSH   hl   
1B2A   CD 0A 10               CALL   run   
1B2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B38   76                     HALT      
1B39                EXPECTM_3122S70:      
1B39   E1                     POP   HL   
1B3A                          ;*Macro unroll:  test "2 1 -",1
1B3A   31 00 53               LD   SP,STACK   
1B3D   CD 37 0F               CALL   coldInit   
1B40   CD C6 51               CALL   execStr   
1B43   32 20 31 20 2D 00      DB   "2 1 -",0   
1B49   E1                     POP   HL   
1B4A   E5                     PUSH   HL   
1B4B   11 01 00               LD   DE,1   
1B4E   B7                     OR   A   
1B4F   ED 52                  SBC   HL,DE   
1B51   7D                     LD   A,L   
1B52   B4                     OR   H   
1B53   CA A8 1B               JP   Z,expectM_3123S71   
1B56   CD 03 0F               CALL   printStr   
1B59   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B65   CD 03 0F               CALL   printStr   
1B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B77   21 01 00               LD   hl,1   
1B7A   E5                     PUSH   hl   
1B7B   E5                     PUSH   hl   
1B7C   CD 0A 10               CALL   run   
1B7F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B86   CD 03 0F               CALL   printStr   
1B89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B96   E1                     POP   hl   
1B97   E5                     PUSH   hl   
1B98   E5                     PUSH   hl   
1B99   CD 0A 10               CALL   run   
1B9C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BA7   76                     HALT      
1BA8                EXPECTM_3123S71:      
1BA8   E1                     POP   HL   
1BA9                          ;*Macro unroll:  test "3a= a-- a",2
1BA9   31 00 53               LD   SP,STACK   
1BAC   CD 37 0F               CALL   coldInit   
1BAF   CD C6 51               CALL   execStr   
1BB2   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BBC   E1                     POP   HL   
1BBD   E5                     PUSH   HL   
1BBE   11 02 00               LD   DE,2   
1BC1   B7                     OR   A   
1BC2   ED 52                  SBC   HL,DE   
1BC4   7D                     LD   A,L   
1BC5   B4                     OR   H   
1BC6   CA 1F 1C               JP   Z,expectM_3124S72   
1BC9   CD 03 0F               CALL   printStr   
1BCC   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1BDC   CD 03 0F               CALL   printStr   
1BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BEE   21 02 00               LD   hl,2   
1BF1   E5                     PUSH   hl   
1BF2   E5                     PUSH   hl   
1BF3   CD 0A 10               CALL   run   
1BF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BFD   CD 03 0F               CALL   printStr   
1C00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C0D   E1                     POP   hl   
1C0E   E5                     PUSH   hl   
1C0F   E5                     PUSH   hl   
1C10   CD 0A 10               CALL   run   
1C13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C1E   76                     HALT      
1C1F                EXPECTM_3124S72:      
1C1F   E1                     POP   HL   
1C20                          ;*Macro unroll:  test "3 5 &", 1
1C20   31 00 53               LD   SP,STACK   
1C23   CD 37 0F               CALL   coldInit   
1C26   CD C6 51               CALL   execStr   
1C29   33 20 35 20 26 00      DB   "3 5 &",0   
1C2F   E1                     POP   HL   
1C30   E5                     PUSH   HL   
1C31   11 01 00               LD   DE,1   
1C34   B7                     OR   A   
1C35   ED 52                  SBC   HL,DE   
1C37   7D                     LD   A,L   
1C38   B4                     OR   H   
1C39   CA 8E 1C               JP   Z,expectM_3125S73   
1C3C   CD 03 0F               CALL   printStr   
1C3F   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C4B   CD 03 0F               CALL   printStr   
1C4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C5D   21 01 00               LD   hl,1   
1C60   E5                     PUSH   hl   
1C61   E5                     PUSH   hl   
1C62   CD 0A 10               CALL   run   
1C65   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C6C   CD 03 0F               CALL   printStr   
1C6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7C   E1                     POP   hl   
1C7D   E5                     PUSH   hl   
1C7E   E5                     PUSH   hl   
1C7F   CD 0A 10               CALL   run   
1C82   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C8D   76                     HALT      
1C8E                EXPECTM_3125S73:      
1C8E   E1                     POP   HL   
1C8F                          ;*Macro unroll:  test "3 5 |", 7
1C8F   31 00 53               LD   SP,STACK   
1C92   CD 37 0F               CALL   coldInit   
1C95   CD C6 51               CALL   execStr   
1C98   33 20 35 20 7C 00      DB   "3 5 |",0   
1C9E   E1                     POP   HL   
1C9F   E5                     PUSH   HL   
1CA0   11 07 00               LD   DE,7   
1CA3   B7                     OR   A   
1CA4   ED 52                  SBC   HL,DE   
1CA6   7D                     LD   A,L   
1CA7   B4                     OR   H   
1CA8   CA FD 1C               JP   Z,expectM_3126S74   
1CAB   CD 03 0F               CALL   printStr   
1CAE   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1CBA   CD 03 0F               CALL   printStr   
1CBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CCC   21 07 00               LD   hl,7   
1CCF   E5                     PUSH   hl   
1CD0   E5                     PUSH   hl   
1CD1   CD 0A 10               CALL   run   
1CD4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CDB   CD 03 0F               CALL   printStr   
1CDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEB   E1                     POP   hl   
1CEC   E5                     PUSH   hl   
1CED   E5                     PUSH   hl   
1CEE   CD 0A 10               CALL   run   
1CF1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CFC   76                     HALT      
1CFD                EXPECTM_3126S74:      
1CFD   E1                     POP   HL   
1CFE                          ;*Macro unroll:  test "3 5 /x", 6
1CFE   31 00 53               LD   SP,STACK   
1D01   CD 37 0F               CALL   coldInit   
1D04   CD C6 51               CALL   execStr   
1D07   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D0E   E1                     POP   HL   
1D0F   E5                     PUSH   HL   
1D10   11 06 00               LD   DE,6   
1D13   B7                     OR   A   
1D14   ED 52                  SBC   HL,DE   
1D16   7D                     LD   A,L   
1D17   B4                     OR   H   
1D18   CA 6E 1D               JP   Z,expectM_3127S75   
1D1B   CD 03 0F               CALL   printStr   
1D1E   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D2B   CD 03 0F               CALL   printStr   
1D2E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D3D   21 06 00               LD   hl,6   
1D40   E5                     PUSH   hl   
1D41   E5                     PUSH   hl   
1D42   CD 0A 10               CALL   run   
1D45   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D4C   CD 03 0F               CALL   printStr   
1D4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D5C   E1                     POP   hl   
1D5D   E5                     PUSH   hl   
1D5E   E5                     PUSH   hl   
1D5F   CD 0A 10               CALL   run   
1D62   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D6D   76                     HALT      
1D6E                EXPECTM_3127S75:      
1D6E   E1                     POP   HL   
1D6F                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1D6F   31 00 53               LD   SP,STACK   
1D72   CD 37 0F               CALL   coldInit   
1D75   CD C6 51               CALL   execStr   
1D78   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1D87   E1                     POP   HL   
1D88   E5                     PUSH   HL   
1D89   11 06 00               LD   DE,6   
1D8C   B7                     OR   A   
1D8D   ED 52                  SBC   HL,DE   
1D8F   7D                     LD   A,L   
1D90   B4                     OR   H   
1D91   CA EF 1D               JP   Z,expectM_3128S76   
1D94   CD 03 0F               CALL   printStr   
1D97   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1DAC   CD 03 0F               CALL   printStr   
1DAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DBE   21 06 00               LD   hl,6   
1DC1   E5                     PUSH   hl   
1DC2   E5                     PUSH   hl   
1DC3   CD 0A 10               CALL   run   
1DC6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DCD   CD 03 0F               CALL   printStr   
1DD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DDD   E1                     POP   hl   
1DDE   E5                     PUSH   hl   
1DDF   E5                     PUSH   hl   
1DE0   CD 0A 10               CALL   run   
1DE3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DEE   76                     HALT      
1DEF                EXPECTM_3128S76:      
1DEF   E1                     POP   HL   
1DF0                          ;*Macro unroll:  test "0 !", true
1DF0   31 00 53               LD   SP,STACK   
1DF3   CD 37 0F               CALL   coldInit   
1DF6   CD C6 51               CALL   execStr   
1DF9   30 20 21 00            DB   "0 !",0   
1DFD   E1                     POP   HL   
1DFE   E5                     PUSH   HL   
1DFF   11 FF FF               LD   DE,true   
1E02   B7                     OR   A   
1E03   ED 52                  SBC   HL,DE   
1E05   7D                     LD   A,L   
1E06   B4                     OR   H   
1E07   CA 5A 1E               JP   Z,expectM_3129S77   
1E0A   CD 03 0F               CALL   printStr   
1E0D   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1E17   CD 03 0F               CALL   printStr   
1E1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E29   21 FF FF               LD   hl,true   
1E2C   E5                     PUSH   hl   
1E2D   E5                     PUSH   hl   
1E2E   CD 0A 10               CALL   run   
1E31   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E38   CD 03 0F               CALL   printStr   
1E3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E48   E1                     POP   hl   
1E49   E5                     PUSH   hl   
1E4A   E5                     PUSH   hl   
1E4B   CD 0A 10               CALL   run   
1E4E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E59   76                     HALT      
1E5A                EXPECTM_3129S77:      
1E5A   E1                     POP   HL   
1E5B                          ;*Macro unroll:  test "2 !", false
1E5B   31 00 53               LD   SP,STACK   
1E5E   CD 37 0F               CALL   coldInit   
1E61   CD C6 51               CALL   execStr   
1E64   32 20 21 00            DB   "2 !",0   
1E68   E1                     POP   HL   
1E69   E5                     PUSH   HL   
1E6A   11 00 00               LD   DE,false   
1E6D   B7                     OR   A   
1E6E   ED 52                  SBC   HL,DE   
1E70   7D                     LD   A,L   
1E71   B4                     OR   H   
1E72   CA C5 1E               JP   Z,expectM_3130S78   
1E75   CD 03 0F               CALL   printStr   
1E78   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1E82   CD 03 0F               CALL   printStr   
1E85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E94   21 00 00               LD   hl,false   
1E97   E5                     PUSH   hl   
1E98   E5                     PUSH   hl   
1E99   CD 0A 10               CALL   run   
1E9C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EA3   CD 03 0F               CALL   printStr   
1EA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB3   E1                     POP   hl   
1EB4   E5                     PUSH   hl   
1EB5   E5                     PUSH   hl   
1EB6   CD 0A 10               CALL   run   
1EB9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EC4   76                     HALT      
1EC5                EXPECTM_3130S78:      
1EC5   E1                     POP   HL   
1EC6                          ;*Macro unroll:  test "0 !!", false
1EC6   31 00 53               LD   SP,STACK   
1EC9   CD 37 0F               CALL   coldInit   
1ECC   CD C6 51               CALL   execStr   
1ECF   30 20 21 21 00         DB   "0 !!",0   
1ED4   E1                     POP   HL   
1ED5   E5                     PUSH   HL   
1ED6   11 00 00               LD   DE,false   
1ED9   B7                     OR   A   
1EDA   ED 52                  SBC   HL,DE   
1EDC   7D                     LD   A,L   
1EDD   B4                     OR   H   
1EDE   CA 32 1F               JP   Z,expectM_3131S79   
1EE1   CD 03 0F               CALL   printStr   
1EE4   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
1EEF   CD 03 0F               CALL   printStr   
1EF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F01   21 00 00               LD   hl,false   
1F04   E5                     PUSH   hl   
1F05   E5                     PUSH   hl   
1F06   CD 0A 10               CALL   run   
1F09   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F10   CD 03 0F               CALL   printStr   
1F13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F20   E1                     POP   hl   
1F21   E5                     PUSH   hl   
1F22   E5                     PUSH   hl   
1F23   CD 0A 10               CALL   run   
1F26   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F31   76                     HALT      
1F32                EXPECTM_3131S79:      
1F32   E1                     POP   HL   
1F33                          ;*Macro unroll:  test "2 !!", true
1F33   31 00 53               LD   SP,STACK   
1F36   CD 37 0F               CALL   coldInit   
1F39   CD C6 51               CALL   execStr   
1F3C   32 20 21 21 00         DB   "2 !!",0   
1F41   E1                     POP   HL   
1F42   E5                     PUSH   HL   
1F43   11 FF FF               LD   DE,true   
1F46   B7                     OR   A   
1F47   ED 52                  SBC   HL,DE   
1F49   7D                     LD   A,L   
1F4A   B4                     OR   H   
1F4B   CA 9F 1F               JP   Z,expectM_3132S80   
1F4E   CD 03 0F               CALL   printStr   
1F51   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
1F5C   CD 03 0F               CALL   printStr   
1F5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F6E   21 FF FF               LD   hl,true   
1F71   E5                     PUSH   hl   
1F72   E5                     PUSH   hl   
1F73   CD 0A 10               CALL   run   
1F76   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F7D   CD 03 0F               CALL   printStr   
1F80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F8D   E1                     POP   hl   
1F8E   E5                     PUSH   hl   
1F8F   E5                     PUSH   hl   
1F90   CD 0A 10               CALL   run   
1F93   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F9E   76                     HALT      
1F9F                EXPECTM_3132S80:      
1F9F   E1                     POP   HL   
1FA0                          ;*Macro unroll:  test "2 3 *", 6
1FA0   31 00 53               LD   SP,STACK   
1FA3   CD 37 0F               CALL   coldInit   
1FA6   CD C6 51               CALL   execStr   
1FA9   32 20 33 20 2A 00      DB   "2 3 *",0   
1FAF   E1                     POP   HL   
1FB0   E5                     PUSH   HL   
1FB1   11 06 00               LD   DE,6   
1FB4   B7                     OR   A   
1FB5   ED 52                  SBC   HL,DE   
1FB7   7D                     LD   A,L   
1FB8   B4                     OR   H   
1FB9   CA 0E 20               JP   Z,expectM_3133S81   
1FBC   CD 03 0F               CALL   printStr   
1FBF   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1FCB   CD 03 0F               CALL   printStr   
1FCE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FDD   21 06 00               LD   hl,6   
1FE0   E5                     PUSH   hl   
1FE1   E5                     PUSH   hl   
1FE2   CD 0A 10               CALL   run   
1FE5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FEC   CD 03 0F               CALL   printStr   
1FEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FFC   E1                     POP   hl   
1FFD   E5                     PUSH   hl   
1FFE   E5                     PUSH   hl   
1FFF   CD 0A 10               CALL   run   
2002   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
200D   76                     HALT      
200E                EXPECTM_3133S81:      
200E   E1                     POP   HL   
200F                          ;*Macro unroll:  test "1 2 3 + *", 5
200F   31 00 53               LD   SP,STACK   
2012   CD 37 0F               CALL   coldInit   
2015   CD C6 51               CALL   execStr   
2018   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2022   E1                     POP   HL   
2023   E5                     PUSH   HL   
2024   11 05 00               LD   DE,5   
2027   B7                     OR   A   
2028   ED 52                  SBC   HL,DE   
202A   7D                     LD   A,L   
202B   B4                     OR   H   
202C   CA 85 20               JP   Z,expectM_3134S82   
202F   CD 03 0F               CALL   printStr   
2032   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2042   CD 03 0F               CALL   printStr   
2045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2054   21 05 00               LD   hl,5   
2057   E5                     PUSH   hl   
2058   E5                     PUSH   hl   
2059   CD 0A 10               CALL   run   
205C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2063   CD 03 0F               CALL   printStr   
2066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2073   E1                     POP   hl   
2074   E5                     PUSH   hl   
2075   E5                     PUSH   hl   
2076   CD 0A 10               CALL   run   
2079   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2084   76                     HALT      
2085                EXPECTM_3134S82:      
2085   E1                     POP   HL   
2086                          ;*Macro unroll:  test "7 3 /", 2
2086   31 00 53               LD   SP,STACK   
2089   CD 37 0F               CALL   coldInit   
208C   CD C6 51               CALL   execStr   
208F   37 20 33 20 2F 00      DB   "7 3 /",0   
2095   E1                     POP   HL   
2096   E5                     PUSH   HL   
2097   11 02 00               LD   DE,2   
209A   B7                     OR   A   
209B   ED 52                  SBC   HL,DE   
209D   7D                     LD   A,L   
209E   B4                     OR   H   
209F   CA F4 20               JP   Z,expectM_3135S83   
20A2   CD 03 0F               CALL   printStr   
20A5   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20B1   CD 03 0F               CALL   printStr   
20B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C3   21 02 00               LD   hl,2   
20C6   E5                     PUSH   hl   
20C7   E5                     PUSH   hl   
20C8   CD 0A 10               CALL   run   
20CB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20D2   CD 03 0F               CALL   printStr   
20D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E2   E1                     POP   hl   
20E3   E5                     PUSH   hl   
20E4   E5                     PUSH   hl   
20E5   CD 0A 10               CALL   run   
20E8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20F3   76                     HALT      
20F4                EXPECTM_3135S83:      
20F4   E1                     POP   HL   
20F5                          ;*Macro unroll:  test "100a= 1a+= a", 101
20F5   31 00 53               LD   SP,STACK   
20F8   CD 37 0F               CALL   coldInit   
20FB   CD C6 51               CALL   execStr   
20FE   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
210B   E1                     POP   HL   
210C   E5                     PUSH   HL   
210D   11 65 00               LD   DE,101   
2110   B7                     OR   A   
2111   ED 52                  SBC   HL,DE   
2113   7D                     LD   A,L   
2114   B4                     OR   H   
2115   CA 71 21               JP   Z,expectM_3136S84   
2118   CD 03 0F               CALL   printStr   
211B   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
212E   CD 03 0F               CALL   printStr   
2131   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2140   21 65 00               LD   hl,101   
2143   E5                     PUSH   hl   
2144   E5                     PUSH   hl   
2145   CD 0A 10               CALL   run   
2148   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
214F   CD 03 0F               CALL   printStr   
2152   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
215F   E1                     POP   hl   
2160   E5                     PUSH   hl   
2161   E5                     PUSH   hl   
2162   CD 0A 10               CALL   run   
2165   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2170   76                     HALT      
2171                EXPECTM_3136S84:      
2171   E1                     POP   HL   
2172                          ;*Macro unroll:  test "100a= 1a-= a", 99
2172   31 00 53               LD   SP,STACK   
2175   CD 37 0F               CALL   coldInit   
2178   CD C6 51               CALL   execStr   
217B   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2188   E1                     POP   HL   
2189   E5                     PUSH   HL   
218A   11 63 00               LD   DE,99   
218D   B7                     OR   A   
218E   ED 52                  SBC   HL,DE   
2190   7D                     LD   A,L   
2191   B4                     OR   H   
2192   CA EE 21               JP   Z,expectM_3137S85   
2195   CD 03 0F               CALL   printStr   
2198   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
21AB   CD 03 0F               CALL   printStr   
21AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21BD   21 63 00               LD   hl,99   
21C0   E5                     PUSH   hl   
21C1   E5                     PUSH   hl   
21C2   CD 0A 10               CALL   run   
21C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21CC   CD 03 0F               CALL   printStr   
21CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21DC   E1                     POP   hl   
21DD   E5                     PUSH   hl   
21DE   E5                     PUSH   hl   
21DF   CD 0A 10               CALL   run   
21E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21ED   76                     HALT      
21EE                EXPECTM_3137S85:      
21EE   E1                     POP   HL   
21EF                          ;*Macro unroll:  test "100a= 2a*= a", 200
21EF   31 00 53               LD   SP,STACK   
21F2   CD 37 0F               CALL   coldInit   
21F5   CD C6 51               CALL   execStr   
21F8   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2205   E1                     POP   HL   
2206   E5                     PUSH   HL   
2207   11 C8 00               LD   DE,200   
220A   B7                     OR   A   
220B   ED 52                  SBC   HL,DE   
220D   7D                     LD   A,L   
220E   B4                     OR   H   
220F   CA 6B 22               JP   Z,expectM_3138S86   
2212   CD 03 0F               CALL   printStr   
2215   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
2228   CD 03 0F               CALL   printStr   
222B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
223A   21 C8 00               LD   hl,200   
223D   E5                     PUSH   hl   
223E   E5                     PUSH   hl   
223F   CD 0A 10               CALL   run   
2242   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2249   CD 03 0F               CALL   printStr   
224C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2259   E1                     POP   hl   
225A   E5                     PUSH   hl   
225B   E5                     PUSH   hl   
225C   CD 0A 10               CALL   run   
225F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
226A   76                     HALT      
226B                EXPECTM_3138S86:      
226B   E1                     POP   HL   
226C                          ;*Macro unroll:  test "100a= 2 a/= a", 50
226C   31 00 53               LD   SP,STACK   
226F   CD 37 0F               CALL   coldInit   
2272   CD C6 51               CALL   execStr   
2275   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
2283   E1                     POP   HL   
2284   E5                     PUSH   HL   
2285   11 32 00               LD   DE,50   
2288   B7                     OR   A   
2289   ED 52                  SBC   HL,DE   
228B   7D                     LD   A,L   
228C   B4                     OR   H   
228D   CA EA 22               JP   Z,expectM_3139S87   
2290   CD 03 0F               CALL   printStr   
2293   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
22A7   CD 03 0F               CALL   printStr   
22AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B9   21 32 00               LD   hl,50   
22BC   E5                     PUSH   hl   
22BD   E5                     PUSH   hl   
22BE   CD 0A 10               CALL   run   
22C1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22C8   CD 03 0F               CALL   printStr   
22CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22D8   E1                     POP   hl   
22D9   E5                     PUSH   hl   
22DA   E5                     PUSH   hl   
22DB   CD 0A 10               CALL   run   
22DE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22E9   76                     HALT      
22EA                EXPECTM_3139S87:      
22EA   E1                     POP   HL   
22EB                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
22EB   31 00 53               LD   SP,STACK   
22EE   CD 37 0F               CALL   coldInit   
22F1   CD C6 51               CALL   execStr   
22F4   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2304   E1                     POP   HL   
2305   E5                     PUSH   HL   
2306   11 05 00               LD   DE,5   
2309   B7                     OR   A   
230A   ED 52                  SBC   HL,DE   
230C   7D                     LD   A,L   
230D   B4                     OR   H   
230E   CA 6D 23               JP   Z,expectM_3140S88   
2311   CD 03 0F               CALL   printStr   
2314   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
232A   CD 03 0F               CALL   printStr   
232D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233C   21 05 00               LD   hl,5   
233F   E5                     PUSH   hl   
2340   E5                     PUSH   hl   
2341   CD 0A 10               CALL   run   
2344   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
234B   CD 03 0F               CALL   printStr   
234E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
235B   E1                     POP   hl   
235C   E5                     PUSH   hl   
235D   E5                     PUSH   hl   
235E   CD 0A 10               CALL   run   
2361   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
236C   76                     HALT      
236D                EXPECTM_3140S88:      
236D   E1                     POP   HL   
236E                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
236E   31 00 53               LD   SP,STACK   
2371   CD 37 0F               CALL   coldInit   
2374   CD C6 51               CALL   execStr   
2377   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2387   E1                     POP   HL   
2388   E5                     PUSH   HL   
2389   11 01 00               LD   DE,1   
238C   B7                     OR   A   
238D   ED 52                  SBC   HL,DE   
238F   7D                     LD   A,L   
2390   B4                     OR   H   
2391   CA F0 23               JP   Z,expectM_3141S89   
2394   CD 03 0F               CALL   printStr   
2397   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
23AD   CD 03 0F               CALL   printStr   
23B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BF   21 01 00               LD   hl,1   
23C2   E5                     PUSH   hl   
23C3   E5                     PUSH   hl   
23C4   CD 0A 10               CALL   run   
23C7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23CE   CD 03 0F               CALL   printStr   
23D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23DE   E1                     POP   hl   
23DF   E5                     PUSH   hl   
23E0   E5                     PUSH   hl   
23E1   CD 0A 10               CALL   run   
23E4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23EF   76                     HALT      
23F0                EXPECTM_3141S89:      
23F0   E1                     POP   HL   
23F1                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
23F1   31 00 53               LD   SP,STACK   
23F4   CD 37 0F               CALL   coldInit   
23F7   CD C6 51               CALL   execStr   
23FA   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
240A   E1                     POP   HL   
240B   E5                     PUSH   HL   
240C   11 06 00               LD   DE,6   
240F   B7                     OR   A   
2410   ED 52                  SBC   HL,DE   
2412   7D                     LD   A,L   
2413   B4                     OR   H   
2414   CA 73 24               JP   Z,expectM_3142S90   
2417   CD 03 0F               CALL   printStr   
241A   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
2430   CD 03 0F               CALL   printStr   
2433   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2442   21 06 00               LD   hl,6   
2445   E5                     PUSH   hl   
2446   E5                     PUSH   hl   
2447   CD 0A 10               CALL   run   
244A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2451   CD 03 0F               CALL   printStr   
2454   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2461   E1                     POP   hl   
2462   E5                     PUSH   hl   
2463   E5                     PUSH   hl   
2464   CD 0A 10               CALL   run   
2467   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2472   76                     HALT      
2473                EXPECTM_3142S90:      
2473   E1                     POP   HL   
2474                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
2474   31 00 53               LD   SP,STACK   
2477   CD 37 0F               CALL   coldInit   
247A   CD C6 51               CALL   execStr   
247D   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
248D   E1                     POP   HL   
248E   E5                     PUSH   HL   
248F   11 03 00               LD   DE,3   
2492   B7                     OR   A   
2493   ED 52                  SBC   HL,DE   
2495   7D                     LD   A,L   
2496   B4                     OR   H   
2497   CA F6 24               JP   Z,expectM_3143S91   
249A   CD 03 0F               CALL   printStr   
249D   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
24B3   CD 03 0F               CALL   printStr   
24B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C5   21 03 00               LD   hl,3   
24C8   E5                     PUSH   hl   
24C9   E5                     PUSH   hl   
24CA   CD 0A 10               CALL   run   
24CD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24D4   CD 03 0F               CALL   printStr   
24D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24E4   E1                     POP   hl   
24E5   E5                     PUSH   hl   
24E6   E5                     PUSH   hl   
24E7   CD 0A 10               CALL   run   
24EA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24F5   76                     HALT      
24F6                EXPECTM_3143S91:      
24F6   E1                     POP   HL   
24F7                          ;*Macro unroll:  test "$55a= $AAa&= a",0
24F7   31 00 53               LD   SP,STACK   
24FA   CD 37 0F               CALL   coldInit   
24FD   CD C6 51               CALL   execStr   
2500   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
250F   E1                     POP   HL   
2510   E5                     PUSH   HL   
2511   11 00 00               LD   DE,0   
2514   B7                     OR   A   
2515   ED 52                  SBC   HL,DE   
2517   7D                     LD   A,L   
2518   B4                     OR   H   
2519   CA 77 25               JP   Z,expectM_3144S92   
251C   CD 03 0F               CALL   printStr   
251F   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2534   CD 03 0F               CALL   printStr   
2537   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2546   21 00 00               LD   hl,0   
2549   E5                     PUSH   hl   
254A   E5                     PUSH   hl   
254B   CD 0A 10               CALL   run   
254E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2555   CD 03 0F               CALL   printStr   
2558   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2565   E1                     POP   hl   
2566   E5                     PUSH   hl   
2567   E5                     PUSH   hl   
2568   CD 0A 10               CALL   run   
256B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2576   76                     HALT      
2577                EXPECTM_3144S92:      
2577   E1                     POP   HL   
2578                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2578   31 00 53               LD   SP,STACK   
257B   CD 37 0F               CALL   coldInit   
257E   CD C6 51               CALL   execStr   
2581   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2590   E1                     POP   HL   
2591   E5                     PUSH   HL   
2592   11 FF 00               LD   DE,$FF   
2595   B7                     OR   A   
2596   ED 52                  SBC   HL,DE   
2598   7D                     LD   A,L   
2599   B4                     OR   H   
259A   CA F8 25               JP   Z,expectM_3145S93   
259D   CD 03 0F               CALL   printStr   
25A0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
25B5   CD 03 0F               CALL   printStr   
25B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C7   21 FF 00               LD   hl,$FF   
25CA   E5                     PUSH   hl   
25CB   E5                     PUSH   hl   
25CC   CD 0A 10               CALL   run   
25CF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25D6   CD 03 0F               CALL   printStr   
25D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25E6   E1                     POP   hl   
25E7   E5                     PUSH   hl   
25E8   E5                     PUSH   hl   
25E9   CD 0A 10               CALL   run   
25EC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25F7   76                     HALT      
25F8                EXPECTM_3145S93:      
25F8   E1                     POP   HL   
25F9                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
25F9   31 00 53               LD   SP,STACK   
25FC   CD 37 0F               CALL   coldInit   
25FF   CD C6 51               CALL   execStr   
2602   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
2613   E1                     POP   HL   
2614   E5                     PUSH   HL   
2615   11 0F 00               LD   DE,$0F   
2618   B7                     OR   A   
2619   ED 52                  SBC   HL,DE   
261B   7D                     LD   A,L   
261C   B4                     OR   H   
261D   CA 7D 26               JP   Z,expectM_3146S94   
2620   CD 03 0F               CALL   printStr   
2623   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
263A   CD 03 0F               CALL   printStr   
263D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264C   21 0F 00               LD   hl,$0F   
264F   E5                     PUSH   hl   
2650   E5                     PUSH   hl   
2651   CD 0A 10               CALL   run   
2654   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
265B   CD 03 0F               CALL   printStr   
265E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266B   E1                     POP   hl   
266C   E5                     PUSH   hl   
266D   E5                     PUSH   hl   
266E   CD 0A 10               CALL   run   
2671   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
267C   76                     HALT      
267D                EXPECTM_3146S94:      
267D   E1                     POP   HL   
267E                          ;*Macro unroll:  test "$00AA~",$FF55
267E   31 00 53               LD   SP,STACK   
2681   CD 37 0F               CALL   coldInit   
2684   CD C6 51               CALL   execStr   
2687   24 30 30 41 41 7E 00   DB   "$00AA~",0   
268E   E1                     POP   HL   
268F   E5                     PUSH   HL   
2690   11 55 FF               LD   DE,$FF55   
2693   B7                     OR   A   
2694   ED 52                  SBC   HL,DE   
2696   7D                     LD   A,L   
2697   B4                     OR   H   
2698   CA EE 26               JP   Z,expectM_3147S95   
269B   CD 03 0F               CALL   printStr   
269E   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
26AB   CD 03 0F               CALL   printStr   
26AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26BD   21 55 FF               LD   hl,$FF55   
26C0   E5                     PUSH   hl   
26C1   E5                     PUSH   hl   
26C2   CD 0A 10               CALL   run   
26C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26CC   CD 03 0F               CALL   printStr   
26CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26DC   E1                     POP   hl   
26DD   E5                     PUSH   hl   
26DE   E5                     PUSH   hl   
26DF   CD 0A 10               CALL   run   
26E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
26ED   76                     HALT      
26EE                EXPECTM_3147S95:      
26EE   E1                     POP   HL   
26EF                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
26EF   31 00 53               LD   SP,STACK   
26F2   CD 37 0F               CALL   coldInit   
26F5   CD C6 51               CALL   execStr   
26F8   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2706   E1                     POP   HL   
2707   E5                     PUSH   HL   
2708   11 55 55               LD   DE,$5555   
270B   B7                     OR   A   
270C   ED 52                  SBC   HL,DE   
270E   7D                     LD   A,L   
270F   B4                     OR   H   
2710   CA 6D 27               JP   Z,expectM_3148S96   
2713   CD 03 0F               CALL   printStr   
2716   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
272A   CD 03 0F               CALL   printStr   
272D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273C   21 55 55               LD   hl,$5555   
273F   E5                     PUSH   hl   
2740   E5                     PUSH   hl   
2741   CD 0A 10               CALL   run   
2744   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
274B   CD 03 0F               CALL   printStr   
274E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275B   E1                     POP   hl   
275C   E5                     PUSH   hl   
275D   E5                     PUSH   hl   
275E   CD 0A 10               CALL   run   
2761   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
276C   76                     HALT      
276D                EXPECTM_3148S96:      
276D   E1                     POP   HL   
276E                          ;*Macro unroll:  test "7 3 / /re", 1
276E   31 00 53               LD   SP,STACK   
2771   CD 37 0F               CALL   coldInit   
2774   CD C6 51               CALL   execStr   
2777   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2781   E1                     POP   HL   
2782   E5                     PUSH   HL   
2783   11 01 00               LD   DE,1   
2786   B7                     OR   A   
2787   ED 52                  SBC   HL,DE   
2789   7D                     LD   A,L   
278A   B4                     OR   H   
278B   CA E4 27               JP   Z,expectM_3149S97   
278E   CD 03 0F               CALL   printStr   
2791   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
27A1   CD 03 0F               CALL   printStr   
27A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27B3   21 01 00               LD   hl,1   
27B6   E5                     PUSH   hl   
27B7   E5                     PUSH   hl   
27B8   CD 0A 10               CALL   run   
27BB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27C2   CD 03 0F               CALL   printStr   
27C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27D2   E1                     POP   hl   
27D3   E5                     PUSH   hl   
27D4   E5                     PUSH   hl   
27D5   CD 0A 10               CALL   run   
27D8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27E3   76                     HALT      
27E4                EXPECTM_3149S97:      
27E4   E1                     POP   HL   
27E5                          ;*Macro unroll:  test "7 3 /", 2
27E5   31 00 53               LD   SP,STACK   
27E8   CD 37 0F               CALL   coldInit   
27EB   CD C6 51               CALL   execStr   
27EE   37 20 33 20 2F 00      DB   "7 3 /",0   
27F4   E1                     POP   HL   
27F5   E5                     PUSH   HL   
27F6   11 02 00               LD   DE,2   
27F9   B7                     OR   A   
27FA   ED 52                  SBC   HL,DE   
27FC   7D                     LD   A,L   
27FD   B4                     OR   H   
27FE   CA 53 28               JP   Z,expectM_3150S98   
2801   CD 03 0F               CALL   printStr   
2804   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2810   CD 03 0F               CALL   printStr   
2813   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2822   21 02 00               LD   hl,2   
2825   E5                     PUSH   hl   
2826   E5                     PUSH   hl   
2827   CD 0A 10               CALL   run   
282A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2831   CD 03 0F               CALL   printStr   
2834   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2841   E1                     POP   hl   
2842   E5                     PUSH   hl   
2843   E5                     PUSH   hl   
2844   CD 0A 10               CALL   run   
2847   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2852   76                     HALT      
2853                EXPECTM_3150S98:      
2853   E1                     POP   HL   
2854                          ;*Macro unroll:  test "2 3 ==", FALSE
2854   31 00 53               LD   SP,STACK   
2857   CD 37 0F               CALL   coldInit   
285A   CD C6 51               CALL   execStr   
285D   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2864   E1                     POP   HL   
2865   E5                     PUSH   HL   
2866   11 00 00               LD   DE,FALSE   
2869   B7                     OR   A   
286A   ED 52                  SBC   HL,DE   
286C   7D                     LD   A,L   
286D   B4                     OR   H   
286E   CA C4 28               JP   Z,expectM_3151S99   
2871   CD 03 0F               CALL   printStr   
2874   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2881   CD 03 0F               CALL   printStr   
2884   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2893   21 00 00               LD   hl,FALSE   
2896   E5                     PUSH   hl   
2897   E5                     PUSH   hl   
2898   CD 0A 10               CALL   run   
289B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28A2   CD 03 0F               CALL   printStr   
28A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28B2   E1                     POP   hl   
28B3   E5                     PUSH   hl   
28B4   E5                     PUSH   hl   
28B5   CD 0A 10               CALL   run   
28B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28C3   76                     HALT      
28C4                EXPECTM_3151S99:      
28C4   E1                     POP   HL   
28C5                          ;*Macro unroll:  test "3 3 ==", TRUE
28C5   31 00 53               LD   SP,STACK   
28C8   CD 37 0F               CALL   coldInit   
28CB   CD C6 51               CALL   execStr   
28CE   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
28D5   E1                     POP   HL   
28D6   E5                     PUSH   HL   
28D7   11 FF FF               LD   DE,TRUE   
28DA   B7                     OR   A   
28DB   ED 52                  SBC   HL,DE   
28DD   7D                     LD   A,L   
28DE   B4                     OR   H   
28DF   CA 35 29               JP   Z,expectM_3152S100   
28E2   CD 03 0F               CALL   printStr   
28E5   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
28F2   CD 03 0F               CALL   printStr   
28F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2904   21 FF FF               LD   hl,TRUE   
2907   E5                     PUSH   hl   
2908   E5                     PUSH   hl   
2909   CD 0A 10               CALL   run   
290C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2913   CD 03 0F               CALL   printStr   
2916   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2923   E1                     POP   hl   
2924   E5                     PUSH   hl   
2925   E5                     PUSH   hl   
2926   CD 0A 10               CALL   run   
2929   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2934   76                     HALT      
2935                EXPECTM_3152S100:      
2935   E1                     POP   HL   
2936                          ;*Macro unroll:  test "1 2 <", TRUE
2936   31 00 53               LD   SP,STACK   
2939   CD 37 0F               CALL   coldInit   
293C   CD C6 51               CALL   execStr   
293F   31 20 32 20 3C 00      DB   "1 2 <",0   
2945   E1                     POP   HL   
2946   E5                     PUSH   HL   
2947   11 FF FF               LD   DE,TRUE   
294A   B7                     OR   A   
294B   ED 52                  SBC   HL,DE   
294D   7D                     LD   A,L   
294E   B4                     OR   H   
294F   CA A4 29               JP   Z,expectM_3153S101   
2952   CD 03 0F               CALL   printStr   
2955   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2961   CD 03 0F               CALL   printStr   
2964   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2973   21 FF FF               LD   hl,TRUE   
2976   E5                     PUSH   hl   
2977   E5                     PUSH   hl   
2978   CD 0A 10               CALL   run   
297B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2982   CD 03 0F               CALL   printStr   
2985   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2992   E1                     POP   hl   
2993   E5                     PUSH   hl   
2994   E5                     PUSH   hl   
2995   CD 0A 10               CALL   run   
2998   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29A3   76                     HALT      
29A4                EXPECTM_3153S101:      
29A4   E1                     POP   HL   
29A5                          ;*Macro unroll:  test "2 1 <", FALSE
29A5   31 00 53               LD   SP,STACK   
29A8   CD 37 0F               CALL   coldInit   
29AB   CD C6 51               CALL   execStr   
29AE   32 20 31 20 3C 00      DB   "2 1 <",0   
29B4   E1                     POP   HL   
29B5   E5                     PUSH   HL   
29B6   11 00 00               LD   DE,FALSE   
29B9   B7                     OR   A   
29BA   ED 52                  SBC   HL,DE   
29BC   7D                     LD   A,L   
29BD   B4                     OR   H   
29BE   CA 13 2A               JP   Z,expectM_3154S102   
29C1   CD 03 0F               CALL   printStr   
29C4   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
29D0   CD 03 0F               CALL   printStr   
29D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E2   21 00 00               LD   hl,FALSE   
29E5   E5                     PUSH   hl   
29E6   E5                     PUSH   hl   
29E7   CD 0A 10               CALL   run   
29EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29F1   CD 03 0F               CALL   printStr   
29F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A01   E1                     POP   hl   
2A02   E5                     PUSH   hl   
2A03   E5                     PUSH   hl   
2A04   CD 0A 10               CALL   run   
2A07   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A12   76                     HALT      
2A13                EXPECTM_3154S102:      
2A13   E1                     POP   HL   
2A14                          ;*Macro unroll:  test "2 3 <", TRUE
2A14   31 00 53               LD   SP,STACK   
2A17   CD 37 0F               CALL   coldInit   
2A1A   CD C6 51               CALL   execStr   
2A1D   32 20 33 20 3C 00      DB   "2 3 <",0   
2A23   E1                     POP   HL   
2A24   E5                     PUSH   HL   
2A25   11 FF FF               LD   DE,TRUE   
2A28   B7                     OR   A   
2A29   ED 52                  SBC   HL,DE   
2A2B   7D                     LD   A,L   
2A2C   B4                     OR   H   
2A2D   CA 82 2A               JP   Z,expectM_3155S103   
2A30   CD 03 0F               CALL   printStr   
2A33   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2A3F   CD 03 0F               CALL   printStr   
2A42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A51   21 FF FF               LD   hl,TRUE   
2A54   E5                     PUSH   hl   
2A55   E5                     PUSH   hl   
2A56   CD 0A 10               CALL   run   
2A59   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A60   CD 03 0F               CALL   printStr   
2A63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A70   E1                     POP   hl   
2A71   E5                     PUSH   hl   
2A72   E5                     PUSH   hl   
2A73   CD 0A 10               CALL   run   
2A76   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A81   76                     HALT      
2A82                EXPECTM_3155S103:      
2A82   E1                     POP   HL   
2A83                          ;*Macro unroll:  test "3 3 <", FALSE
2A83   31 00 53               LD   SP,STACK   
2A86   CD 37 0F               CALL   coldInit   
2A89   CD C6 51               CALL   execStr   
2A8C   33 20 33 20 3C 00      DB   "3 3 <",0   
2A92   E1                     POP   HL   
2A93   E5                     PUSH   HL   
2A94   11 00 00               LD   DE,FALSE   
2A97   B7                     OR   A   
2A98   ED 52                  SBC   HL,DE   
2A9A   7D                     LD   A,L   
2A9B   B4                     OR   H   
2A9C   CA F1 2A               JP   Z,expectM_3156S104   
2A9F   CD 03 0F               CALL   printStr   
2AA2   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2AAE   CD 03 0F               CALL   printStr   
2AB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC0   21 00 00               LD   hl,FALSE   
2AC3   E5                     PUSH   hl   
2AC4   E5                     PUSH   hl   
2AC5   CD 0A 10               CALL   run   
2AC8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2ACF   CD 03 0F               CALL   printStr   
2AD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADF   E1                     POP   hl   
2AE0   E5                     PUSH   hl   
2AE1   E5                     PUSH   hl   
2AE2   CD 0A 10               CALL   run   
2AE5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2AF0   76                     HALT      
2AF1                EXPECTM_3156S104:      
2AF1   E1                     POP   HL   
2AF2                          ;*Macro unroll:  test "1 2 >", FALSE
2AF2   31 00 53               LD   SP,STACK   
2AF5   CD 37 0F               CALL   coldInit   
2AF8   CD C6 51               CALL   execStr   
2AFB   31 20 32 20 3E 00      DB   "1 2 >",0   
2B01   E1                     POP   HL   
2B02   E5                     PUSH   HL   
2B03   11 00 00               LD   DE,FALSE   
2B06   B7                     OR   A   
2B07   ED 52                  SBC   HL,DE   
2B09   7D                     LD   A,L   
2B0A   B4                     OR   H   
2B0B   CA 60 2B               JP   Z,expectM_3157S105   
2B0E   CD 03 0F               CALL   printStr   
2B11   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2B1D   CD 03 0F               CALL   printStr   
2B20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B2F   21 00 00               LD   hl,FALSE   
2B32   E5                     PUSH   hl   
2B33   E5                     PUSH   hl   
2B34   CD 0A 10               CALL   run   
2B37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B3E   CD 03 0F               CALL   printStr   
2B41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B4E   E1                     POP   hl   
2B4F   E5                     PUSH   hl   
2B50   E5                     PUSH   hl   
2B51   CD 0A 10               CALL   run   
2B54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B5F   76                     HALT      
2B60                EXPECTM_3157S105:      
2B60   E1                     POP   HL   
2B61                          ;*Macro unroll:  test "2 1 >", TRUE
2B61   31 00 53               LD   SP,STACK   
2B64   CD 37 0F               CALL   coldInit   
2B67   CD C6 51               CALL   execStr   
2B6A   32 20 31 20 3E 00      DB   "2 1 >",0   
2B70   E1                     POP   HL   
2B71   E5                     PUSH   HL   
2B72   11 FF FF               LD   DE,TRUE   
2B75   B7                     OR   A   
2B76   ED 52                  SBC   HL,DE   
2B78   7D                     LD   A,L   
2B79   B4                     OR   H   
2B7A   CA CF 2B               JP   Z,expectM_3158S106   
2B7D   CD 03 0F               CALL   printStr   
2B80   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2B8C   CD 03 0F               CALL   printStr   
2B8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B9E   21 FF FF               LD   hl,TRUE   
2BA1   E5                     PUSH   hl   
2BA2   E5                     PUSH   hl   
2BA3   CD 0A 10               CALL   run   
2BA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BAD   CD 03 0F               CALL   printStr   
2BB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BBD   E1                     POP   hl   
2BBE   E5                     PUSH   hl   
2BBF   E5                     PUSH   hl   
2BC0   CD 0A 10               CALL   run   
2BC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BCE   76                     HALT      
2BCF                EXPECTM_3158S106:      
2BCF   E1                     POP   HL   
2BD0                          ;*Macro unroll:  test "3 3 >", FALSE
2BD0   31 00 53               LD   SP,STACK   
2BD3   CD 37 0F               CALL   coldInit   
2BD6   CD C6 51               CALL   execStr   
2BD9   33 20 33 20 3E 00      DB   "3 3 >",0   
2BDF   E1                     POP   HL   
2BE0   E5                     PUSH   HL   
2BE1   11 00 00               LD   DE,FALSE   
2BE4   B7                     OR   A   
2BE5   ED 52                  SBC   HL,DE   
2BE7   7D                     LD   A,L   
2BE8   B4                     OR   H   
2BE9   CA 3E 2C               JP   Z,expectM_3159S107   
2BEC   CD 03 0F               CALL   printStr   
2BEF   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2BFB   CD 03 0F               CALL   printStr   
2BFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0D   21 00 00               LD   hl,FALSE   
2C10   E5                     PUSH   hl   
2C11   E5                     PUSH   hl   
2C12   CD 0A 10               CALL   run   
2C15   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C1C   CD 03 0F               CALL   printStr   
2C1F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C2C   E1                     POP   hl   
2C2D   E5                     PUSH   hl   
2C2E   E5                     PUSH   hl   
2C2F   CD 0A 10               CALL   run   
2C32   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C3D   76                     HALT      
2C3E                EXPECTM_3159S107:      
2C3E   E1                     POP   HL   
2C3F                          ;*Macro unroll:  test "4 3 >", TRUE
2C3F   31 00 53               LD   SP,STACK   
2C42   CD 37 0F               CALL   coldInit   
2C45   CD C6 51               CALL   execStr   
2C48   34 20 33 20 3E 00      DB   "4 3 >",0   
2C4E   E1                     POP   HL   
2C4F   E5                     PUSH   HL   
2C50   11 FF FF               LD   DE,TRUE   
2C53   B7                     OR   A   
2C54   ED 52                  SBC   HL,DE   
2C56   7D                     LD   A,L   
2C57   B4                     OR   H   
2C58   CA AD 2C               JP   Z,expectM_3160S108   
2C5B   CD 03 0F               CALL   printStr   
2C5E   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2C6A   CD 03 0F               CALL   printStr   
2C6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7C   21 FF FF               LD   hl,TRUE   
2C7F   E5                     PUSH   hl   
2C80   E5                     PUSH   hl   
2C81   CD 0A 10               CALL   run   
2C84   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C8B   CD 03 0F               CALL   printStr   
2C8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9B   E1                     POP   hl   
2C9C   E5                     PUSH   hl   
2C9D   E5                     PUSH   hl   
2C9E   CD 0A 10               CALL   run   
2CA1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CAC   76                     HALT      
2CAD                EXPECTM_3160S108:      
2CAD   E1                     POP   HL   
2CAE                          ;*Macro unroll:  test "2 2 <=", TRUE
2CAE   31 00 53               LD   SP,STACK   
2CB1   CD 37 0F               CALL   coldInit   
2CB4   CD C6 51               CALL   execStr   
2CB7   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2CBE   E1                     POP   HL   
2CBF   E5                     PUSH   HL   
2CC0   11 FF FF               LD   DE,TRUE   
2CC3   B7                     OR   A   
2CC4   ED 52                  SBC   HL,DE   
2CC6   7D                     LD   A,L   
2CC7   B4                     OR   H   
2CC8   CA 1E 2D               JP   Z,expectM_3161S109   
2CCB   CD 03 0F               CALL   printStr   
2CCE   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2CDB   CD 03 0F               CALL   printStr   
2CDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CED   21 FF FF               LD   hl,TRUE   
2CF0   E5                     PUSH   hl   
2CF1   E5                     PUSH   hl   
2CF2   CD 0A 10               CALL   run   
2CF5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CFC   CD 03 0F               CALL   printStr   
2CFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D0C   E1                     POP   hl   
2D0D   E5                     PUSH   hl   
2D0E   E5                     PUSH   hl   
2D0F   CD 0A 10               CALL   run   
2D12   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D1D   76                     HALT      
2D1E                EXPECTM_3161S109:      
2D1E   E1                     POP   HL   
2D1F                          ;*Macro unroll:  test "2 2 >=", TRUE
2D1F   31 00 53               LD   SP,STACK   
2D22   CD 37 0F               CALL   coldInit   
2D25   CD C6 51               CALL   execStr   
2D28   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2D2F   E1                     POP   HL   
2D30   E5                     PUSH   HL   
2D31   11 FF FF               LD   DE,TRUE   
2D34   B7                     OR   A   
2D35   ED 52                  SBC   HL,DE   
2D37   7D                     LD   A,L   
2D38   B4                     OR   H   
2D39   CA 8F 2D               JP   Z,expectM_3162S110   
2D3C   CD 03 0F               CALL   printStr   
2D3F   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2D4C   CD 03 0F               CALL   printStr   
2D4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D5E   21 FF FF               LD   hl,TRUE   
2D61   E5                     PUSH   hl   
2D62   E5                     PUSH   hl   
2D63   CD 0A 10               CALL   run   
2D66   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D6D   CD 03 0F               CALL   printStr   
2D70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D7D   E1                     POP   hl   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD 0A 10               CALL   run   
2D83   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D8E   76                     HALT      
2D8F                EXPECTM_3162S110:      
2D8F   E1                     POP   HL   
2D90                          ;*Macro unroll:  test "3 1 <<", 6
2D90   31 00 53               LD   SP,STACK   
2D93   CD 37 0F               CALL   coldInit   
2D96   CD C6 51               CALL   execStr   
2D99   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2DA0   E1                     POP   HL   
2DA1   E5                     PUSH   HL   
2DA2   11 06 00               LD   DE,6   
2DA5   B7                     OR   A   
2DA6   ED 52                  SBC   HL,DE   
2DA8   7D                     LD   A,L   
2DA9   B4                     OR   H   
2DAA   CA 00 2E               JP   Z,expectM_3163S111   
2DAD   CD 03 0F               CALL   printStr   
2DB0   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2DBD   CD 03 0F               CALL   printStr   
2DC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DCF   21 06 00               LD   hl,6   
2DD2   E5                     PUSH   hl   
2DD3   E5                     PUSH   hl   
2DD4   CD 0A 10               CALL   run   
2DD7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DDE   CD 03 0F               CALL   printStr   
2DE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DEE   E1                     POP   hl   
2DEF   E5                     PUSH   hl   
2DF0   E5                     PUSH   hl   
2DF1   CD 0A 10               CALL   run   
2DF4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DFF   76                     HALT      
2E00                EXPECTM_3163S111:      
2E00   E1                     POP   HL   
2E01                          ;*Macro unroll:  test "10 1 >>", 5
2E01   31 00 53               LD   SP,STACK   
2E04   CD 37 0F               CALL   coldInit   
2E07   CD C6 51               CALL   execStr   
2E0A   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2E12   E1                     POP   HL   
2E13   E5                     PUSH   HL   
2E14   11 05 00               LD   DE,5   
2E17   B7                     OR   A   
2E18   ED 52                  SBC   HL,DE   
2E1A   7D                     LD   A,L   
2E1B   B4                     OR   H   
2E1C   CA 73 2E               JP   Z,expectM_3164S112   
2E1F   CD 03 0F               CALL   printStr   
2E22   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2E30   CD 03 0F               CALL   printStr   
2E33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E42   21 05 00               LD   hl,5   
2E45   E5                     PUSH   hl   
2E46   E5                     PUSH   hl   
2E47   CD 0A 10               CALL   run   
2E4A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E51   CD 03 0F               CALL   printStr   
2E54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E61   E1                     POP   hl   
2E62   E5                     PUSH   hl   
2E63   E5                     PUSH   hl   
2E64   CD 0A 10               CALL   run   
2E67   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E72   76                     HALT      
2E73                EXPECTM_3164S112:      
2E73   E1                     POP   HL   
2E74                          ;*Macro unroll:  test "1 x = x", 1
2E74   31 00 53               LD   SP,STACK   
2E77   CD 37 0F               CALL   coldInit   
2E7A   CD C6 51               CALL   execStr   
2E7D   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2E85   E1                     POP   HL   
2E86   E5                     PUSH   HL   
2E87   11 01 00               LD   DE,1   
2E8A   B7                     OR   A   
2E8B   ED 52                  SBC   HL,DE   
2E8D   7D                     LD   A,L   
2E8E   B4                     OR   H   
2E8F   CA E6 2E               JP   Z,expectM_3165S113   
2E92   CD 03 0F               CALL   printStr   
2E95   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2EA3   CD 03 0F               CALL   printStr   
2EA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB5   21 01 00               LD   hl,1   
2EB8   E5                     PUSH   hl   
2EB9   E5                     PUSH   hl   
2EBA   CD 0A 10               CALL   run   
2EBD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EC4   CD 03 0F               CALL   printStr   
2EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED4   E1                     POP   hl   
2ED5   E5                     PUSH   hl   
2ED6   E5                     PUSH   hl   
2ED7   CD 0A 10               CALL   run   
2EDA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2EE5   76                     HALT      
2EE6                EXPECTM_3165S113:      
2EE6   E1                     POP   HL   
2EE7                          ;*Macro unroll:  test "1{}^", 1
2EE7   31 00 53               LD   SP,STACK   
2EEA   CD 37 0F               CALL   coldInit   
2EED   CD C6 51               CALL   execStr   
2EF0   31 7B 7D 5E 00         DB   "1{}^",0   
2EF5   E1                     POP   HL   
2EF6   E5                     PUSH   HL   
2EF7   11 01 00               LD   DE,1   
2EFA   B7                     OR   A   
2EFB   ED 52                  SBC   HL,DE   
2EFD   7D                     LD   A,L   
2EFE   B4                     OR   H   
2EFF   CA 53 2F               JP   Z,expectM_3166S114   
2F02   CD 03 0F               CALL   printStr   
2F05   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2F10   CD 03 0F               CALL   printStr   
2F13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F22   21 01 00               LD   hl,1   
2F25   E5                     PUSH   hl   
2F26   E5                     PUSH   hl   
2F27   CD 0A 10               CALL   run   
2F2A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F31   CD 03 0F               CALL   printStr   
2F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F41   E1                     POP   hl   
2F42   E5                     PUSH   hl   
2F43   E5                     PUSH   hl   
2F44   CD 0A 10               CALL   run   
2F47   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F52   76                     HALT      
2F53                EXPECTM_3166S114:      
2F53   E1                     POP   HL   
2F54                          ;*Macro unroll:  test "{1}^", 1
2F54   31 00 53               LD   SP,STACK   
2F57   CD 37 0F               CALL   coldInit   
2F5A   CD C6 51               CALL   execStr   
2F5D   7B 31 7D 5E 00         DB   "{1}^",0   
2F62   E1                     POP   HL   
2F63   E5                     PUSH   HL   
2F64   11 01 00               LD   DE,1   
2F67   B7                     OR   A   
2F68   ED 52                  SBC   HL,DE   
2F6A   7D                     LD   A,L   
2F6B   B4                     OR   H   
2F6C   CA C0 2F               JP   Z,expectM_3167S115   
2F6F   CD 03 0F               CALL   printStr   
2F72   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2F7D   CD 03 0F               CALL   printStr   
2F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F8F   21 01 00               LD   hl,1   
2F92   E5                     PUSH   hl   
2F93   E5                     PUSH   hl   
2F94   CD 0A 10               CALL   run   
2F97   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F9E   CD 03 0F               CALL   printStr   
2FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FAE   E1                     POP   hl   
2FAF   E5                     PUSH   hl   
2FB0   E5                     PUSH   hl   
2FB1   CD 0A 10               CALL   run   
2FB4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FBF   76                     HALT      
2FC0                EXPECTM_3167S115:      
2FC0   E1                     POP   HL   
2FC1                          ;*Macro unroll:  test "{{1}^}^", 1
2FC1   31 00 53               LD   SP,STACK   
2FC4   CD 37 0F               CALL   coldInit   
2FC7   CD C6 51               CALL   execStr   
2FCA   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2FD2   E1                     POP   HL   
2FD3   E5                     PUSH   HL   
2FD4   11 01 00               LD   DE,1   
2FD7   B7                     OR   A   
2FD8   ED 52                  SBC   HL,DE   
2FDA   7D                     LD   A,L   
2FDB   B4                     OR   H   
2FDC   CA 33 30               JP   Z,expectM_3168S116   
2FDF   CD 03 0F               CALL   printStr   
2FE2   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2FF0   CD 03 0F               CALL   printStr   
2FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3002   21 01 00               LD   hl,1   
3005   E5                     PUSH   hl   
3006   E5                     PUSH   hl   
3007   CD 0A 10               CALL   run   
300A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3011   CD 03 0F               CALL   printStr   
3014   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3021   E1                     POP   hl   
3022   E5                     PUSH   hl   
3023   E5                     PUSH   hl   
3024   CD 0A 10               CALL   run   
3027   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3032   76                     HALT      
3033                EXPECTM_3168S116:      
3033   E1                     POP   HL   
3034                          ;*Macro unroll:  test "{{{1}^}^}^", 1
3034   31 00 53               LD   SP,STACK   
3037   CD 37 0F               CALL   coldInit   
303A   CD C6 51               CALL   execStr   
303D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3048   E1                     POP   HL   
3049   E5                     PUSH   HL   
304A   11 01 00               LD   DE,1   
304D   B7                     OR   A   
304E   ED 52                  SBC   HL,DE   
3050   7D                     LD   A,L   
3051   B4                     OR   H   
3052   CA AC 30               JP   Z,expectM_3169S117   
3055   CD 03 0F               CALL   printStr   
3058   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3069   CD 03 0F               CALL   printStr   
306C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
307B   21 01 00               LD   hl,1   
307E   E5                     PUSH   hl   
307F   E5                     PUSH   hl   
3080   CD 0A 10               CALL   run   
3083   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
308A   CD 03 0F               CALL   printStr   
308D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
309A   E1                     POP   hl   
309B   E5                     PUSH   hl   
309C   E5                     PUSH   hl   
309D   CD 0A 10               CALL   run   
30A0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30AB   76                     HALT      
30AC                EXPECTM_3169S117:      
30AC   E1                     POP   HL   
30AD                          ;*Macro unroll:  test "5 /f{10} ?", 5
30AD   31 00 53               LD   SP,STACK   
30B0   CD 37 0F               CALL   coldInit   
30B3   CD C6 51               CALL   execStr   
30B6   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
30C1   E1                     POP   HL   
30C2   E5                     PUSH   HL   
30C3   11 05 00               LD   DE,5   
30C6   B7                     OR   A   
30C7   ED 52                  SBC   HL,DE   
30C9   7D                     LD   A,L   
30CA   B4                     OR   H   
30CB   CA 25 31               JP   Z,expectM_3170S118   
30CE   CD 03 0F               CALL   printStr   
30D1   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
30E2   CD 03 0F               CALL   printStr   
30E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30F4   21 05 00               LD   hl,5   
30F7   E5                     PUSH   hl   
30F8   E5                     PUSH   hl   
30F9   CD 0A 10               CALL   run   
30FC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3103   CD 03 0F               CALL   printStr   
3106   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3113   E1                     POP   hl   
3114   E5                     PUSH   hl   
3115   E5                     PUSH   hl   
3116   CD 0A 10               CALL   run   
3119   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3124   76                     HALT      
3125                EXPECTM_3170S118:      
3125   E1                     POP   HL   
3126                          ;*Macro unroll:  test "5 /t{10} ? +", 15
3126   31 00 53               LD   SP,STACK   
3129   CD 37 0F               CALL   coldInit   
312C   CD C6 51               CALL   execStr   
312F   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
313C   E1                     POP   HL   
313D   E5                     PUSH   HL   
313E   11 0F 00               LD   DE,15   
3141   B7                     OR   A   
3142   ED 52                  SBC   HL,DE   
3144   7D                     LD   A,L   
3145   B4                     OR   H   
3146   CA A2 31               JP   Z,expectM_3171S119   
3149   CD 03 0F               CALL   printStr   
314C   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
315F   CD 03 0F               CALL   printStr   
3162   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3171   21 0F 00               LD   hl,15   
3174   E5                     PUSH   hl   
3175   E5                     PUSH   hl   
3176   CD 0A 10               CALL   run   
3179   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3180   CD 03 0F               CALL   printStr   
3183   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3190   E1                     POP   hl   
3191   E5                     PUSH   hl   
3192   E5                     PUSH   hl   
3193   CD 0A 10               CALL   run   
3196   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31A1   76                     HALT      
31A2                EXPECTM_3171S119:      
31A2   E1                     POP   HL   
31A3                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
31A3   31 00 53               LD   SP,STACK   
31A6   CD 37 0F               CALL   coldInit   
31A9   CD C6 51               CALL   execStr   
31AC   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
31BE   E1                     POP   HL   
31BF   E5                     PUSH   HL   
31C0   11 15 00               LD   DE,21   
31C3   B7                     OR   A   
31C4   ED 52                  SBC   HL,DE   
31C6   7D                     LD   A,L   
31C7   B4                     OR   H   
31C8   CA 29 32               JP   Z,expectM_3172S120   
31CB   CD 03 0F               CALL   printStr   
31CE   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
31E6   CD 03 0F               CALL   printStr   
31E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31F8   21 15 00               LD   hl,21   
31FB   E5                     PUSH   hl   
31FC   E5                     PUSH   hl   
31FD   CD 0A 10               CALL   run   
3200   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3207   CD 03 0F               CALL   printStr   
320A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3217   E1                     POP   hl   
3218   E5                     PUSH   hl   
3219   E5                     PUSH   hl   
321A   CD 0A 10               CALL   run   
321D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3228   76                     HALT      
3229                EXPECTM_3172S120:      
3229   E1                     POP   HL   
322A                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
322A   31 00 53               LD   SP,STACK   
322D   CD 37 0F               CALL   coldInit   
3230   CD C6 51               CALL   execStr   
3233   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
3245   E1                     POP   HL   
3246   E5                     PUSH   HL   
3247   11 0B 00               LD   DE,11   
324A   B7                     OR   A   
324B   ED 52                  SBC   HL,DE   
324D   7D                     LD   A,L   
324E   B4                     OR   H   
324F   CA B0 32               JP   Z,expectM_3173S121   
3252   CD 03 0F               CALL   printStr   
3255   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
326D   CD 03 0F               CALL   printStr   
3270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
327F   21 0B 00               LD   hl,11   
3282   E5                     PUSH   hl   
3283   E5                     PUSH   hl   
3284   CD 0A 10               CALL   run   
3287   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
328E   CD 03 0F               CALL   printStr   
3291   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
329E   E1                     POP   hl   
329F   E5                     PUSH   hl   
32A0   E5                     PUSH   hl   
32A1   CD 0A 10               CALL   run   
32A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32AF   76                     HALT      
32B0                EXPECTM_3173S121:      
32B0   E1                     POP   HL   
32B1                          ;*Macro unroll:  test "\\{2}^", 2
32B1   31 00 53               LD   SP,STACK   
32B4   CD 37 0F               CALL   coldInit   
32B7   CD C6 51               CALL   execStr   
32BA   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
32C0   E1                     POP   HL   
32C1   E5                     PUSH   HL   
32C2   11 02 00               LD   DE,2   
32C5   B7                     OR   A   
32C6   ED 52                  SBC   HL,DE   
32C8   7D                     LD   A,L   
32C9   B4                     OR   H   
32CA   CA 1F 33               JP   Z,expectM_3174S122   
32CD   CD 03 0F               CALL   printStr   
32D0   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
32DC   CD 03 0F               CALL   printStr   
32DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32EE   21 02 00               LD   hl,2   
32F1   E5                     PUSH   hl   
32F2   E5                     PUSH   hl   
32F3   CD 0A 10               CALL   run   
32F6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32FD   CD 03 0F               CALL   printStr   
3300   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
330D   E1                     POP   hl   
330E   E5                     PUSH   hl   
330F   E5                     PUSH   hl   
3310   CD 0A 10               CALL   run   
3313   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
331E   76                     HALT      
331F                EXPECTM_3174S122:      
331F   E1                     POP   HL   
3320                          ;*Macro unroll:  test "\\a{2}^", 2
3320   31 00 53               LD   SP,STACK   
3323   CD 37 0F               CALL   coldInit   
3326   CD C6 51               CALL   execStr   
3329   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3330   E1                     POP   HL   
3331   E5                     PUSH   HL   
3332   11 02 00               LD   DE,2   
3335   B7                     OR   A   
3336   ED 52                  SBC   HL,DE   
3338   7D                     LD   A,L   
3339   B4                     OR   H   
333A   CA 90 33               JP   Z,expectM_3175S123   
333D   CD 03 0F               CALL   printStr   
3340   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
334D   CD 03 0F               CALL   printStr   
3350   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
335F   21 02 00               LD   hl,2   
3362   E5                     PUSH   hl   
3363   E5                     PUSH   hl   
3364   CD 0A 10               CALL   run   
3367   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
336E   CD 03 0F               CALL   printStr   
3371   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
337E   E1                     POP   hl   
337F   E5                     PUSH   hl   
3380   E5                     PUSH   hl   
3381   CD 0A 10               CALL   run   
3384   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
338F   76                     HALT      
3390                EXPECTM_3175S123:      
3390   E1                     POP   HL   
3391                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3391   31 00 53               LD   SP,STACK   
3394   CD 37 0F               CALL   coldInit   
3397   CD C6 51               CALL   execStr   
339A   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
33A4   E1                     POP   HL   
33A5   E5                     PUSH   HL   
33A6   11 05 00               LD   DE,5   
33A9   B7                     OR   A   
33AA   ED 52                  SBC   HL,DE   
33AC   7D                     LD   A,L   
33AD   B4                     OR   H   
33AE   CA 07 34               JP   Z,expectM_3176S124   
33B1   CD 03 0F               CALL   printStr   
33B4   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
33C4   CD 03 0F               CALL   printStr   
33C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D6   21 05 00               LD   hl,5   
33D9   E5                     PUSH   hl   
33DA   E5                     PUSH   hl   
33DB   CD 0A 10               CALL   run   
33DE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33E5   CD 03 0F               CALL   printStr   
33E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F5   E1                     POP   hl   
33F6   E5                     PUSH   hl   
33F7   E5                     PUSH   hl   
33F8   CD 0A 10               CALL   run   
33FB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3406   76                     HALT      
3407                EXPECTM_3176S124:      
3407   E1                     POP   HL   
3408                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3408   31 00 53               LD   SP,STACK   
340B   CD 37 0F               CALL   coldInit   
340E   CD C6 51               CALL   execStr   
3411   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
341D   E1                     POP   HL   
341E   E5                     PUSH   HL   
341F   11 05 00               LD   DE,5   
3422   B7                     OR   A   
3423   ED 52                  SBC   HL,DE   
3425   7D                     LD   A,L   
3426   B4                     OR   H   
3427   CA 82 34               JP   Z,expectM_3177S125   
342A   CD 03 0F               CALL   printStr   
342D   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
343F   CD 03 0F               CALL   printStr   
3442   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3451   21 05 00               LD   hl,5   
3454   E5                     PUSH   hl   
3455   E5                     PUSH   hl   
3456   CD 0A 10               CALL   run   
3459   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3460   CD 03 0F               CALL   printStr   
3463   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3470   E1                     POP   hl   
3471   E5                     PUSH   hl   
3472   E5                     PUSH   hl   
3473   CD 0A 10               CALL   run   
3476   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3481   76                     HALT      
3482                EXPECTM_3177S125:      
3482   E1                     POP   HL   
3483                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3483   31 00 53               LD   SP,STACK   
3486   CD 37 0F               CALL   coldInit   
3489   CD C6 51               CALL   execStr   
348C   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3496   E1                     POP   HL   
3497   E5                     PUSH   HL   
3498   11 02 00               LD   DE,2   
349B   B7                     OR   A   
349C   ED 52                  SBC   HL,DE   
349E   7D                     LD   A,L   
349F   B4                     OR   H   
34A0   CA F9 34               JP   Z,expectM_3178S126   
34A3   CD 03 0F               CALL   printStr   
34A6   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
34B6   CD 03 0F               CALL   printStr   
34B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34C8   21 02 00               LD   hl,2   
34CB   E5                     PUSH   hl   
34CC   E5                     PUSH   hl   
34CD   CD 0A 10               CALL   run   
34D0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34D7   CD 03 0F               CALL   printStr   
34DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34E7   E1                     POP   hl   
34E8   E5                     PUSH   hl   
34E9   E5                     PUSH   hl   
34EA   CD 0A 10               CALL   run   
34ED   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
34F8   76                     HALT      
34F9                EXPECTM_3178S126:      
34F9   E1                     POP   HL   
34FA                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
34FA   31 00 53               LD   SP,STACK   
34FD   CD 37 0F               CALL   coldInit   
3500   CD C6 51               CALL   execStr   
3503   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3512   E1                     POP   HL   
3513   E5                     PUSH   HL   
3514   11 05 00               LD   DE,5   
3517   B7                     OR   A   
3518   ED 52                  SBC   HL,DE   
351A   7D                     LD   A,L   
351B   B4                     OR   H   
351C   CA 7A 35               JP   Z,expectM_3179S127   
351F   CD 03 0F               CALL   printStr   
3522   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3537   CD 03 0F               CALL   printStr   
353A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3549   21 05 00               LD   hl,5   
354C   E5                     PUSH   hl   
354D   E5                     PUSH   hl   
354E   CD 0A 10               CALL   run   
3551   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3558   CD 03 0F               CALL   printStr   
355B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3568   E1                     POP   hl   
3569   E5                     PUSH   hl   
356A   E5                     PUSH   hl   
356B   CD 0A 10               CALL   run   
356E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3579   76                     HALT      
357A                EXPECTM_3179S127:      
357A   E1                     POP   HL   
357B                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
357B   31 00 53               LD   SP,STACK   
357E   CD 37 0F               CALL   coldInit   
3581   CD C6 51               CALL   execStr   
3584   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3594   E1                     POP   HL   
3595   E5                     PUSH   HL   
3596   11 01 00               LD   DE,1   
3599   B7                     OR   A   
359A   ED 52                  SBC   HL,DE   
359C   7D                     LD   A,L   
359D   B4                     OR   H   
359E   CA FD 35               JP   Z,expectM_3180S128   
35A1   CD 03 0F               CALL   printStr   
35A4   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
35BA   CD 03 0F               CALL   printStr   
35BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35CC   21 01 00               LD   hl,1   
35CF   E5                     PUSH   hl   
35D0   E5                     PUSH   hl   
35D1   CD 0A 10               CALL   run   
35D4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35DB   CD 03 0F               CALL   printStr   
35DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35EB   E1                     POP   hl   
35EC   E5                     PUSH   hl   
35ED   E5                     PUSH   hl   
35EE   CD 0A 10               CALL   run   
35F1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
35FC   76                     HALT      
35FD                EXPECTM_3180S128:      
35FD   E1                     POP   HL   
35FE                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
35FE   31 00 53               LD   SP,STACK   
3601   CD 37 0F               CALL   coldInit   
3604   CD C6 51               CALL   execStr   
3607   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
361A   E1                     POP   HL   
361B   E5                     PUSH   HL   
361C   11 07 00               LD   DE,7   
361F   B7                     OR   A   
3620   ED 52                  SBC   HL,DE   
3622   7D                     LD   A,L   
3623   B4                     OR   H   
3624   CA 86 36               JP   Z,expectM_3181S129   
3627   CD 03 0F               CALL   printStr   
362A   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3643   CD 03 0F               CALL   printStr   
3646   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3655   21 07 00               LD   hl,7   
3658   E5                     PUSH   hl   
3659   E5                     PUSH   hl   
365A   CD 0A 10               CALL   run   
365D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3664   CD 03 0F               CALL   printStr   
3667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3674   E1                     POP   hl   
3675   E5                     PUSH   hl   
3676   E5                     PUSH   hl   
3677   CD 0A 10               CALL   run   
367A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3685   76                     HALT      
3686                EXPECTM_3181S129:      
3686   E1                     POP   HL   
3687                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3687   31 00 53               LD   SP,STACK   
368A   CD 37 0F               CALL   coldInit   
368D   CD C6 51               CALL   execStr   
3690   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
36A5   E1                     POP   HL   
36A6   E5                     PUSH   HL   
36A7   11 06 00               LD   DE,6   
36AA   B7                     OR   A   
36AB   ED 52                  SBC   HL,DE   
36AD   7D                     LD   A,L   
36AE   B4                     OR   H   
36AF   CA 13 37               JP   Z,expectM_3182S130   
36B2   CD 03 0F               CALL   printStr   
36B5   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
36D0   CD 03 0F               CALL   printStr   
36D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E2   21 06 00               LD   hl,6   
36E5   E5                     PUSH   hl   
36E6   E5                     PUSH   hl   
36E7   CD 0A 10               CALL   run   
36EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36F1   CD 03 0F               CALL   printStr   
36F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3701   E1                     POP   hl   
3702   E5                     PUSH   hl   
3703   E5                     PUSH   hl   
3704   CD 0A 10               CALL   run   
3707   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3712   76                     HALT      
3713                EXPECTM_3182S130:      
3713   E1                     POP   HL   
3714                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3714   31 00 53               LD   SP,STACK   
3717   CD 37 0F               CALL   coldInit   
371A   CD C6 51               CALL   execStr   
371D   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
372B   E1                     POP   HL   
372C   E5                     PUSH   HL   
372D   11 02 00               LD   DE,2   
3730   B7                     OR   A   
3731   ED 52                  SBC   HL,DE   
3733   7D                     LD   A,L   
3734   B4                     OR   H   
3735   CA 92 37               JP   Z,expectM_3183S131   
3738   CD 03 0F               CALL   printStr   
373B   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
374F   CD 03 0F               CALL   printStr   
3752   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3761   21 02 00               LD   hl,2   
3764   E5                     PUSH   hl   
3765   E5                     PUSH   hl   
3766   CD 0A 10               CALL   run   
3769   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3770   CD 03 0F               CALL   printStr   
3773   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3780   E1                     POP   hl   
3781   E5                     PUSH   hl   
3782   E5                     PUSH   hl   
3783   CD 0A 10               CALL   run   
3786   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3791   76                     HALT      
3792                EXPECTM_3183S131:      
3792   E1                     POP   HL   
3793                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3793   31 00 53               LD   SP,STACK   
3796   CD 37 0F               CALL   coldInit   
3799   CD C6 51               CALL   execStr   
379C   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
37AD   E1                     POP   HL   
37AE   E5                     PUSH   HL   
37AF   11 01 00               LD   DE,1   
37B2   B7                     OR   A   
37B3   ED 52                  SBC   HL,DE   
37B5   7D                     LD   A,L   
37B6   B4                     OR   H   
37B7   CA 17 38               JP   Z,expectM_3184S132   
37BA   CD 03 0F               CALL   printStr   
37BD   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
37D4   CD 03 0F               CALL   printStr   
37D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37E6   21 01 00               LD   hl,1   
37E9   E5                     PUSH   hl   
37EA   E5                     PUSH   hl   
37EB   CD 0A 10               CALL   run   
37EE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
37F5   CD 03 0F               CALL   printStr   
37F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3805   E1                     POP   hl   
3806   E5                     PUSH   hl   
3807   E5                     PUSH   hl   
3808   CD 0A 10               CALL   run   
380B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3816   76                     HALT      
3817                EXPECTM_3184S132:      
3817   E1                     POP   HL   
3818                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3818   31 00 53               LD   SP,STACK   
381B   CD 37 0F               CALL   coldInit   
381E   CD C6 51               CALL   execStr   
3821   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3833   E1                     POP   HL   
3834   E5                     PUSH   HL   
3835   11 02 00               LD   DE,2   
3838   B7                     OR   A   
3839   ED 52                  SBC   HL,DE   
383B   7D                     LD   A,L   
383C   B4                     OR   H   
383D   CA 9E 38               JP   Z,expectM_3185S133   
3840   CD 03 0F               CALL   printStr   
3843   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
385B   CD 03 0F               CALL   printStr   
385E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
386D   21 02 00               LD   hl,2   
3870   E5                     PUSH   hl   
3871   E5                     PUSH   hl   
3872   CD 0A 10               CALL   run   
3875   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
387C   CD 03 0F               CALL   printStr   
387F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
388C   E1                     POP   hl   
388D   E5                     PUSH   hl   
388E   E5                     PUSH   hl   
388F   CD 0A 10               CALL   run   
3892   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
389D   76                     HALT      
389E                EXPECTM_3185S133:      
389E   E1                     POP   HL   
389F                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
389F   31 00 53               LD   SP,STACK   
38A2   CD 37 0F               CALL   coldInit   
38A5   CD C6 51               CALL   execStr   
38A8   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
38BB   E1                     POP   HL   
38BC   E5                     PUSH   HL   
38BD   11 02 00               LD   DE,2   
38C0   B7                     OR   A   
38C1   ED 52                  SBC   HL,DE   
38C3   7D                     LD   A,L   
38C4   B4                     OR   H   
38C5   CA 27 39               JP   Z,expectM_3186S134   
38C8   CD 03 0F               CALL   printStr   
38CB   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
38E4   CD 03 0F               CALL   printStr   
38E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38F6   21 02 00               LD   hl,2   
38F9   E5                     PUSH   hl   
38FA   E5                     PUSH   hl   
38FB   CD 0A 10               CALL   run   
38FE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3905   CD 03 0F               CALL   printStr   
3908   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3915   E1                     POP   hl   
3916   E5                     PUSH   hl   
3917   E5                     PUSH   hl   
3918   CD 0A 10               CALL   run   
391B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3926   76                     HALT      
3927                EXPECTM_3186S134:      
3927   E1                     POP   HL   
3928                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3928   31 00 53               LD   SP,STACK   
392B   CD 37 0F               CALL   coldInit   
392E   CD C6 51               CALL   execStr   
3931   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3943   E1                     POP   HL   
3944   E5                     PUSH   HL   
3945   11 02 00               LD   DE,2   
3948   B7                     OR   A   
3949   ED 52                  SBC   HL,DE   
394B   7D                     LD   A,L   
394C   B4                     OR   H   
394D   CA AE 39               JP   Z,expectM_3187S135   
3950   CD 03 0F               CALL   printStr   
3953   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
396B   CD 03 0F               CALL   printStr   
396E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
397D   21 02 00               LD   hl,2   
3980   E5                     PUSH   hl   
3981   E5                     PUSH   hl   
3982   CD 0A 10               CALL   run   
3985   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
398C   CD 03 0F               CALL   printStr   
398F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
399C   E1                     POP   hl   
399D   E5                     PUSH   hl   
399E   E5                     PUSH   hl   
399F   CD 0A 10               CALL   run   
39A2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
39AD   76                     HALT      
39AE                EXPECTM_3187S135:      
39AE   E1                     POP   HL   
39AF                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
39AF   31 00 53               LD   SP,STACK   
39B2   CD 37 0F               CALL   coldInit   
39B5   CD C6 51               CALL   execStr   
39B8   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
39D1   E1                     POP   HL   
39D2   E5                     PUSH   HL   
39D3   11 05 00               LD   DE,5   
39D6   B7                     OR   A   
39D7   ED 52                  SBC   HL,DE   
39D9   7D                     LD   A,L   
39DA   B4                     OR   H   
39DB   CA 43 3A               JP   Z,expectM_3188S136   
39DE   CD 03 0F               CALL   printStr   
39E1   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3A00   CD 03 0F               CALL   printStr   
3A03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A12   21 05 00               LD   hl,5   
3A15   E5                     PUSH   hl   
3A16   E5                     PUSH   hl   
3A17   CD 0A 10               CALL   run   
3A1A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A21   CD 03 0F               CALL   printStr   
3A24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A31   E1                     POP   hl   
3A32   E5                     PUSH   hl   
3A33   E5                     PUSH   hl   
3A34   CD 0A 10               CALL   run   
3A37   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A42   76                     HALT      
3A43                EXPECTM_3188S136:      
3A43   E1                     POP   HL   
3A44                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3A44   31 00 53               LD   SP,STACK   
3A47   CD 37 0F               CALL   coldInit   
3A4A   CD C6 51               CALL   execStr   
3A4D   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3A5D   E1                     POP   HL   
3A5E   E5                     PUSH   HL   
3A5F   11 02 00               LD   DE,2   
3A62   B7                     OR   A   
3A63   ED 52                  SBC   HL,DE   
3A65   7D                     LD   A,L   
3A66   B4                     OR   H   
3A67   CA C6 3A               JP   Z,expectM_3189S137   
3A6A   CD 03 0F               CALL   printStr   
3A6D   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3A83   CD 03 0F               CALL   printStr   
3A86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A95   21 02 00               LD   hl,2   
3A98   E5                     PUSH   hl   
3A99   E5                     PUSH   hl   
3A9A   CD 0A 10               CALL   run   
3A9D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AA4   CD 03 0F               CALL   printStr   
3AA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB4   E1                     POP   hl   
3AB5   E5                     PUSH   hl   
3AB6   E5                     PUSH   hl   
3AB7   CD 0A 10               CALL   run   
3ABA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AC5   76                     HALT      
3AC6                EXPECTM_3189S137:      
3AC6   E1                     POP   HL   
3AC7                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3AC7   31 00 53               LD   SP,STACK   
3ACA   CD 37 0F               CALL   coldInit   
3ACD   CD C6 51               CALL   execStr   
3AD0   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3AE7   E1                     POP   HL   
3AE8   E5                     PUSH   HL   
3AE9   11 64 00               LD   DE,100   
3AEC   B7                     OR   A   
3AED   ED 52                  SBC   HL,DE   
3AEF   7D                     LD   A,L   
3AF0   B4                     OR   H   
3AF1   CA 57 3B               JP   Z,expectM_3190S138   
3AF4   CD 03 0F               CALL   printStr   
3AF7   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3B14   CD 03 0F               CALL   printStr   
3B17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B26   21 64 00               LD   hl,100   
3B29   E5                     PUSH   hl   
3B2A   E5                     PUSH   hl   
3B2B   CD 0A 10               CALL   run   
3B2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B35   CD 03 0F               CALL   printStr   
3B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B45   E1                     POP   hl   
3B46   E5                     PUSH   hl   
3B47   E5                     PUSH   hl   
3B48   CD 0A 10               CALL   run   
3B4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B56   76                     HALT      
3B57                EXPECTM_3190S138:      
3B57   E1                     POP   HL   
3B58                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3B58   31 00 53               LD   SP,STACK   
3B5B   CD 37 0F               CALL   coldInit   
3B5E   CD C6 51               CALL   execStr   
3B61   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3B79   E1                     POP   HL   
3B7A   E5                     PUSH   HL   
3B7B   11 01 00               LD   DE,1   
3B7E   B7                     OR   A   
3B7F   ED 52                  SBC   HL,DE   
3B81   7D                     LD   A,L   
3B82   B4                     OR   H   
3B83   CA EA 3B               JP   Z,expectM_3191S139   
3B86   CD 03 0F               CALL   printStr   
3B89   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3BA7   CD 03 0F               CALL   printStr   
3BAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB9   21 01 00               LD   hl,1   
3BBC   E5                     PUSH   hl   
3BBD   E5                     PUSH   hl   
3BBE   CD 0A 10               CALL   run   
3BC1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BC8   CD 03 0F               CALL   printStr   
3BCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD8   E1                     POP   hl   
3BD9   E5                     PUSH   hl   
3BDA   E5                     PUSH   hl   
3BDB   CD 0A 10               CALL   run   
3BDE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BE9   76                     HALT      
3BEA                EXPECTM_3191S139:      
3BEA   E1                     POP   HL   
3BEB                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3BEB   31 00 53               LD   SP,STACK   
3BEE   CD 37 0F               CALL   coldInit   
3BF1   CD C6 51               CALL   execStr   
3BF4   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3C0D   E1                     POP   HL   
3C0E   E5                     PUSH   HL   
3C0F   11 02 00               LD   DE,2   
3C12   B7                     OR   A   
3C13   ED 52                  SBC   HL,DE   
3C15   7D                     LD   A,L   
3C16   B4                     OR   H   
3C17   CA 7F 3C               JP   Z,expectM_3192S140   
3C1A   CD 03 0F               CALL   printStr   
3C1D   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3C3C   CD 03 0F               CALL   printStr   
3C3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C4E   21 02 00               LD   hl,2   
3C51   E5                     PUSH   hl   
3C52   E5                     PUSH   hl   
3C53   CD 0A 10               CALL   run   
3C56   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C5D   CD 03 0F               CALL   printStr   
3C60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C6D   E1                     POP   hl   
3C6E   E5                     PUSH   hl   
3C6F   E5                     PUSH   hl   
3C70   CD 0A 10               CALL   run   
3C73   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C7E   76                     HALT      
3C7F                EXPECTM_3192S140:      
3C7F   E1                     POP   HL   
3C80                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3C80   31 00 53               LD   SP,STACK   
3C83   CD 37 0F               CALL   coldInit   
3C86   CD C6 51               CALL   execStr   
3C89   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3CA7   E1                     POP   HL   
3CA8   E5                     PUSH   HL   
3CA9   11 0B 00               LD   DE,11   
3CAC   B7                     OR   A   
3CAD   ED 52                  SBC   HL,DE   
3CAF   7D                     LD   A,L   
3CB0   B4                     OR   H   
3CB1   CA 1E 3D               JP   Z,expectM_3193S141   
3CB4   CD 03 0F               CALL   printStr   
3CB7   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3CDB   CD 03 0F               CALL   printStr   
3CDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CED   21 0B 00               LD   hl,11   
3CF0   E5                     PUSH   hl   
3CF1   E5                     PUSH   hl   
3CF2   CD 0A 10               CALL   run   
3CF5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CFC   CD 03 0F               CALL   printStr   
3CFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D0C   E1                     POP   hl   
3D0D   E5                     PUSH   hl   
3D0E   E5                     PUSH   hl   
3D0F   CD 0A 10               CALL   run   
3D12   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D1D   76                     HALT      
3D1E                EXPECTM_3193S141:      
3D1E   E1                     POP   HL   
3D1F                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3D1F   31 00 53               LD   SP,STACK   
3D22   CD 37 0F               CALL   coldInit   
3D25   CD C6 51               CALL   execStr   
3D28   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3D46   E1                     POP   HL   
3D47   E5                     PUSH   HL   
3D48   11 15 00               LD   DE,21   
3D4B   B7                     OR   A   
3D4C   ED 52                  SBC   HL,DE   
3D4E   7D                     LD   A,L   
3D4F   B4                     OR   H   
3D50   CA BD 3D               JP   Z,expectM_3194S142   
3D53   CD 03 0F               CALL   printStr   
3D56   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3D7A   CD 03 0F               CALL   printStr   
3D7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D8C   21 15 00               LD   hl,21   
3D8F   E5                     PUSH   hl   
3D90   E5                     PUSH   hl   
3D91   CD 0A 10               CALL   run   
3D94   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D9B   CD 03 0F               CALL   printStr   
3D9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DAB   E1                     POP   hl   
3DAC   E5                     PUSH   hl   
3DAD   E5                     PUSH   hl   
3DAE   CD 0A 10               CALL   run   
3DB1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DBC   76                     HALT      
3DBD                EXPECTM_3194S142:      
3DBD   E1                     POP   HL   
3DBE                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3DBE   31 00 53               LD   SP,STACK   
3DC1   CD 37 0F               CALL   coldInit   
3DC4   CD C6 51               CALL   execStr   
3DC7   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3DD5   E1                     POP   HL   
3DD6   E5                     PUSH   HL   
3DD7   11 14 00               LD   DE,20   
3DDA   B7                     OR   A   
3DDB   ED 52                  SBC   HL,DE   
3DDD   7D                     LD   A,L   
3DDE   B4                     OR   H   
3DDF   CA 3C 3E               JP   Z,expectM_3195S143   
3DE2   CD 03 0F               CALL   printStr   
3DE5   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3DF9   CD 03 0F               CALL   printStr   
3DFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E0B   21 14 00               LD   hl,20   
3E0E   E5                     PUSH   hl   
3E0F   E5                     PUSH   hl   
3E10   CD 0A 10               CALL   run   
3E13   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E1A   CD 03 0F               CALL   printStr   
3E1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E2A   E1                     POP   hl   
3E2B   E5                     PUSH   hl   
3E2C   E5                     PUSH   hl   
3E2D   CD 0A 10               CALL   run   
3E30   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E3B   76                     HALT      
3E3C                EXPECTM_3195S143:      
3E3C   E1                     POP   HL   
3E3D                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3E3D   31 00 53               LD   SP,STACK   
3E40   CD 37 0F               CALL   coldInit   
3E43   CD C6 51               CALL   execStr   
3E46   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3E58   E1                     POP   HL   
3E59   E5                     PUSH   HL   
3E5A   11 04 00               LD   DE,4   
3E5D   B7                     OR   A   
3E5E   ED 52                  SBC   HL,DE   
3E60   7D                     LD   A,L   
3E61   B4                     OR   H   
3E62   CA C3 3E               JP   Z,expectM_3196S144   
3E65   CD 03 0F               CALL   printStr   
3E68   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3E80   CD 03 0F               CALL   printStr   
3E83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E92   21 04 00               LD   hl,4   
3E95   E5                     PUSH   hl   
3E96   E5                     PUSH   hl   
3E97   CD 0A 10               CALL   run   
3E9A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3EA1   CD 03 0F               CALL   printStr   
3EA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EB1   E1                     POP   hl   
3EB2   E5                     PUSH   hl   
3EB3   E5                     PUSH   hl   
3EB4   CD 0A 10               CALL   run   
3EB7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3EC2   76                     HALT      
3EC3                EXPECTM_3196S144:      
3EC3   E1                     POP   HL   
3EC4                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3EC4   31 00 53               LD   SP,STACK   
3EC7   CD 37 0F               CALL   coldInit   
3ECA   CD C6 51               CALL   execStr   
3ECD   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3EDC   E1                     POP   HL   
3EDD   E5                     PUSH   HL   
3EDE   11 02 00               LD   DE,2   
3EE1   B7                     OR   A   
3EE2   ED 52                  SBC   HL,DE   
3EE4   7D                     LD   A,L   
3EE5   B4                     OR   H   
3EE6   CA 44 3F               JP   Z,expectM_3197S145   
3EE9   CD 03 0F               CALL   printStr   
3EEC   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3F01   CD 03 0F               CALL   printStr   
3F04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F13   21 02 00               LD   hl,2   
3F16   E5                     PUSH   hl   
3F17   E5                     PUSH   hl   
3F18   CD 0A 10               CALL   run   
3F1B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F22   CD 03 0F               CALL   printStr   
3F25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F32   E1                     POP   hl   
3F33   E5                     PUSH   hl   
3F34   E5                     PUSH   hl   
3F35   CD 0A 10               CALL   run   
3F38   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F43   76                     HALT      
3F44                EXPECTM_3197S145:      
3F44   E1                     POP   HL   
3F45                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3F45   31 00 53               LD   SP,STACK   
3F48   CD 37 0F               CALL   coldInit   
3F4B   CD C6 51               CALL   execStr   
3F4E   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3F60   E1                     POP   HL   
3F61   E5                     PUSH   HL   
3F62   11 42 00               LD   DE,66   
3F65   B7                     OR   A   
3F66   ED 52                  SBC   HL,DE   
3F68   7D                     LD   A,L   
3F69   B4                     OR   H   
3F6A   CA CB 3F               JP   Z,expectM_3198S146   
3F6D   CD 03 0F               CALL   printStr   
3F70   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
3F88   CD 03 0F               CALL   printStr   
3F8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F9A   21 42 00               LD   hl,66   
3F9D   E5                     PUSH   hl   
3F9E   E5                     PUSH   hl   
3F9F   CD 0A 10               CALL   run   
3FA2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FA9   CD 03 0F               CALL   printStr   
3FAC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FB9   E1                     POP   hl   
3FBA   E5                     PUSH   hl   
3FBB   E5                     PUSH   hl   
3FBC   CD 0A 10               CALL   run   
3FBF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FCA   76                     HALT      
3FCB                EXPECTM_3198S146:      
3FCB   E1                     POP   HL   
3FCC                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3FCC   31 00 53               LD   SP,STACK   
3FCF   CD 37 0F               CALL   coldInit   
3FD2   CD C6 51               CALL   execStr   
3FD5   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3FE9   E1                     POP   HL   
3FEA   E5                     PUSH   HL   
3FEB   11 0A 00               LD   DE,10   
3FEE   B7                     OR   A   
3FEF   ED 52                  SBC   HL,DE   
3FF1   7D                     LD   A,L   
3FF2   B4                     OR   H   
3FF3   CA 56 40               JP   Z,expectM_3199S147   
3FF6   CD 03 0F               CALL   printStr   
3FF9   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
4013   CD 03 0F               CALL   printStr   
4016   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4025   21 0A 00               LD   hl,10   
4028   E5                     PUSH   hl   
4029   E5                     PUSH   hl   
402A   CD 0A 10               CALL   run   
402D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4034   CD 03 0F               CALL   printStr   
4037   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4044   E1                     POP   hl   
4045   E5                     PUSH   hl   
4046   E5                     PUSH   hl   
4047   CD 0A 10               CALL   run   
404A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4055   76                     HALT      
4056                EXPECTM_3199S147:      
4056   E1                     POP   HL   
4057                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
4057   31 00 53               LD   SP,STACK   
405A   CD 37 0F               CALL   coldInit   
405D   CD C6 51               CALL   execStr   
4060   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
407B   E1                     POP   HL   
407C   E5                     PUSH   HL   
407D   11 0A 00               LD   DE,10   
4080   B7                     OR   A   
4081   ED 52                  SBC   HL,DE   
4083   7D                     LD   A,L   
4084   B4                     OR   H   
4085   CA EF 40               JP   Z,expectM_3200S148   
4088   CD 03 0F               CALL   printStr   
408B   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
40AC   CD 03 0F               CALL   printStr   
40AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40BE   21 0A 00               LD   hl,10   
40C1   E5                     PUSH   hl   
40C2   E5                     PUSH   hl   
40C3   CD 0A 10               CALL   run   
40C6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40CD   CD 03 0F               CALL   printStr   
40D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40DD   E1                     POP   hl   
40DE   E5                     PUSH   hl   
40DF   E5                     PUSH   hl   
40E0   CD 0A 10               CALL   run   
40E3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40EE   76                     HALT      
40EF                EXPECTM_3200S148:      
40EF   E1                     POP   HL   
40F0                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
40F0   31 00 53               LD   SP,STACK   
40F3   CD 37 0F               CALL   coldInit   
40F6   CD C6 51               CALL   execStr   
40F9   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
4118   E1                     POP   HL   
4119   E5                     PUSH   HL   
411A   11 0A 00               LD   DE,10   
411D   B7                     OR   A   
411E   ED 52                  SBC   HL,DE   
4120   7D                     LD   A,L   
4121   B4                     OR   H   
4122   CA 90 41               JP   Z,expectM_3201S149   
4125   CD 03 0F               CALL   printStr   
4128   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
414D   CD 03 0F               CALL   printStr   
4150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
415F   21 0A 00               LD   hl,10   
4162   E5                     PUSH   hl   
4163   E5                     PUSH   hl   
4164   CD 0A 10               CALL   run   
4167   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
416E   CD 03 0F               CALL   printStr   
4171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417E   E1                     POP   hl   
417F   E5                     PUSH   hl   
4180   E5                     PUSH   hl   
4181   CD 0A 10               CALL   run   
4184   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
418F   76                     HALT      
4190                EXPECTM_3201S149:      
4190   E1                     POP   HL   
4191                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
4191   31 00 53               LD   SP,STACK   
4194   CD 37 0F               CALL   coldInit   
4197   CD C6 51               CALL   execStr   
419A   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
41B9   E1                     POP   HL   
41BA   E5                     PUSH   HL   
41BB   11 14 00               LD   DE,20   
41BE   B7                     OR   A   
41BF   ED 52                  SBC   HL,DE   
41C1   7D                     LD   A,L   
41C2   B4                     OR   H   
41C3   CA 31 42               JP   Z,expectM_3202S150   
41C6   CD 03 0F               CALL   printStr   
41C9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
41EE   CD 03 0F               CALL   printStr   
41F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4200   21 14 00               LD   hl,20   
4203   E5                     PUSH   hl   
4204   E5                     PUSH   hl   
4205   CD 0A 10               CALL   run   
4208   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
420F   CD 03 0F               CALL   printStr   
4212   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
421F   E1                     POP   hl   
4220   E5                     PUSH   hl   
4221   E5                     PUSH   hl   
4222   CD 0A 10               CALL   run   
4225   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4230   76                     HALT      
4231                EXPECTM_3202S150:      
4231   E1                     POP   HL   
4232                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4232   31 00 53               LD   SP,STACK   
4235   CD 37 0F               CALL   coldInit   
4238   CD C6 51               CALL   execStr   
423B   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
4253   E1                     POP   HL   
4254   E5                     PUSH   HL   
4255   11 06 00               LD   DE,6   
4258   B7                     OR   A   
4259   ED 52                  SBC   HL,DE   
425B   7D                     LD   A,L   
425C   B4                     OR   H   
425D   CA C4 42               JP   Z,expectM_3203S151   
4260   CD 03 0F               CALL   printStr   
4263   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
4281   CD 03 0F               CALL   printStr   
4284   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4293   21 06 00               LD   hl,6   
4296   E5                     PUSH   hl   
4297   E5                     PUSH   hl   
4298   CD 0A 10               CALL   run   
429B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42A2   CD 03 0F               CALL   printStr   
42A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B2   E1                     POP   hl   
42B3   E5                     PUSH   hl   
42B4   E5                     PUSH   hl   
42B5   CD 0A 10               CALL   run   
42B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
42C3   76                     HALT      
42C4                EXPECTM_3203S151:      
42C4   E1                     POP   HL   
42C5                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
42C5   31 00 53               LD   SP,STACK   
42C8   CD 37 0F               CALL   coldInit   
42CB   CD C6 51               CALL   execStr   
42CE   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
42E9   E1                     POP   HL   
42EA   E5                     PUSH   HL   
42EB   11 02 00               LD   DE,2   
42EE   B7                     OR   A   
42EF   ED 52                  SBC   HL,DE   
42F1   7D                     LD   A,L   
42F2   B4                     OR   H   
42F3   CA 5D 43               JP   Z,expectM_3204S152   
42F6   CD 03 0F               CALL   printStr   
42F9   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
431A   CD 03 0F               CALL   printStr   
431D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
432C   21 02 00               LD   hl,2   
432F   E5                     PUSH   hl   
4330   E5                     PUSH   hl   
4331   CD 0A 10               CALL   run   
4334   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
433B   CD 03 0F               CALL   printStr   
433E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
434B   E1                     POP   hl   
434C   E5                     PUSH   hl   
434D   E5                     PUSH   hl   
434E   CD 0A 10               CALL   run   
4351   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
435C   76                     HALT      
435D                EXPECTM_3204S152:      
435D   E1                     POP   HL   
435E                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
435E   31 00 53               LD   SP,STACK   
4361   CD 37 0F               CALL   coldInit   
4364   CD C6 51               CALL   execStr   
4367   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
438D   E1                     POP   HL   
438E   E5                     PUSH   HL   
438F   11 0A 00               LD   DE,10   
4392   B7                     OR   A   
4393   ED 52                  SBC   HL,DE   
4395   7D                     LD   A,L   
4396   B4                     OR   H   
4397   CA 0C 44               JP   Z,expectM_3205S153   
439A   CD 03 0F               CALL   printStr   
439D   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
43C9   CD 03 0F               CALL   printStr   
43CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DB   21 0A 00               LD   hl,10   
43DE   E5                     PUSH   hl   
43DF   E5                     PUSH   hl   
43E0   CD 0A 10               CALL   run   
43E3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43EA   CD 03 0F               CALL   printStr   
43ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43FA   E1                     POP   hl   
43FB   E5                     PUSH   hl   
43FC   E5                     PUSH   hl   
43FD   CD 0A 10               CALL   run   
4400   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
440B   76                     HALT      
440C                EXPECTM_3205S153:      
440C   E1                     POP   HL   
440D                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /br )^ j ", 10
440D   31 00 53               LD   SP,STACK   
4410   CD 37 0F               CALL   coldInit   
4413   CD C6 51               CALL   execStr   
4416   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /br )^ j ",0   
4439   E1                     POP   HL   
443A   E5                     PUSH   HL   
443B   11 0A 00               LD   DE,10   
443E   B7                     OR   A   
443F   ED 52                  SBC   HL,DE   
4441   7D                     LD   A,L   
4442   B4                     OR   H   
4443   CA B5 44               JP   Z,expectM_3206S154   
4446   CD 03 0F               CALL   printStr   
4449   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /br )^ j "   
4472   CD 03 0F               CALL   printStr   
4475   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4484   21 0A 00               LD   hl,10   
4487   E5                     PUSH   hl   
4488   E5                     PUSH   hl   
4489   CD 0A 10               CALL   run   
448C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4493   CD 03 0F               CALL   printStr   
4496   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44A3   E1                     POP   hl   
44A4   E5                     PUSH   hl   
44A5   E5                     PUSH   hl   
44A6   CD 0A 10               CALL   run   
44A9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44B4   76                     HALT      
44B5                EXPECTM_3206S154:      
44B5   E1                     POP   HL   
44B6                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t", 12
44B6   31 00 53               LD   SP,STACK   
44B9   CD 37 0F               CALL   coldInit   
44BC   CD C6 51               CALL   execStr   
44BF   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t",0   
44E9   E1                     POP   HL   
44EA   E5                     PUSH   HL   
44EB   11 0C 00               LD   DE,12   
44EE   B7                     OR   A   
44EF   ED 52                  SBC   HL,DE   
44F1   7D                     LD   A,L   
44F2   B4                     OR   H   
44F3   CA 6C 45               JP   Z,expectM_3207S155   
44F6   CD 03 0F               CALL   printStr   
44F9   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t"   
4529   CD 03 0F               CALL   printStr   
452C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
453B   21 0C 00               LD   hl,12   
453E   E5                     PUSH   hl   
453F   E5                     PUSH   hl   
4540   CD 0A 10               CALL   run   
4543   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
454A   CD 03 0F               CALL   printStr   
454D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455A   E1                     POP   hl   
455B   E5                     PUSH   hl   
455C   E5                     PUSH   hl   
455D   CD 0A 10               CALL   run   
4560   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
456B   76                     HALT      
456C                EXPECTM_3207S155:      
456C   E1                     POP   HL   
456D                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
456D   31 00 53               LD   SP,STACK   
4570   CD 37 0F               CALL   coldInit   
4573   CD C6 51               CALL   execStr   
4576   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
45A1   E1                     POP   HL   
45A2   E5                     PUSH   HL   
45A3   11 06 00               LD   DE,6   
45A6   B7                     OR   A   
45A7   ED 52                  SBC   HL,DE   
45A9   7D                     LD   A,L   
45AA   B4                     OR   H   
45AB   CA 25 46               JP   Z,expectM_3208S156   
45AE   CD 03 0F               CALL   printStr   
45B1   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
45E2   CD 03 0F               CALL   printStr   
45E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F4   21 06 00               LD   hl,6   
45F7   E5                     PUSH   hl   
45F8   E5                     PUSH   hl   
45F9   CD 0A 10               CALL   run   
45FC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4603   CD 03 0F               CALL   printStr   
4606   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4613   E1                     POP   hl   
4614   E5                     PUSH   hl   
4615   E5                     PUSH   hl   
4616   CD 0A 10               CALL   run   
4619   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4624   76                     HALT      
4625                EXPECTM_3208S156:      
4625   E1                     POP   HL   
4626                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
4626   31 00 53               LD   SP,STACK   
4629   CD 37 0F               CALL   coldInit   
462C   CD C6 51               CALL   execStr   
462F   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4643   E1                     POP   HL   
4644   E5                     PUSH   HL   
4645   11 03 00               LD   DE,3   
4648   B7                     OR   A   
4649   ED 52                  SBC   HL,DE   
464B   7D                     LD   A,L   
464C   B4                     OR   H   
464D   CA B0 46               JP   Z,expectM_3209S157   
4650   CD 03 0F               CALL   printStr   
4653   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
466D   CD 03 0F               CALL   printStr   
4670   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
467F   21 03 00               LD   hl,3   
4682   E5                     PUSH   hl   
4683   E5                     PUSH   hl   
4684   CD 0A 10               CALL   run   
4687   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
468E   CD 03 0F               CALL   printStr   
4691   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
469E   E1                     POP   hl   
469F   E5                     PUSH   hl   
46A0   E5                     PUSH   hl   
46A1   CD 0A 10               CALL   run   
46A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46AF   76                     HALT      
46B0                EXPECTM_3209S157:      
46B0   E1                     POP   HL   
46B1                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
46B1   31 00 53               LD   SP,STACK   
46B4   CD 37 0F               CALL   coldInit   
46B7   CD C6 51               CALL   execStr   
46BA   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
46CE   E1                     POP   HL   
46CF   E5                     PUSH   HL   
46D0   11 01 00               LD   DE,1   
46D3   B7                     OR   A   
46D4   ED 52                  SBC   HL,DE   
46D6   7D                     LD   A,L   
46D7   B4                     OR   H   
46D8   CA 3B 47               JP   Z,expectM_3210S158   
46DB   CD 03 0F               CALL   printStr   
46DE   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
46F8   CD 03 0F               CALL   printStr   
46FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
470A   21 01 00               LD   hl,1   
470D   E5                     PUSH   hl   
470E   E5                     PUSH   hl   
470F   CD 0A 10               CALL   run   
4712   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4719   CD 03 0F               CALL   printStr   
471C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4729   E1                     POP   hl   
472A   E5                     PUSH   hl   
472B   E5                     PUSH   hl   
472C   CD 0A 10               CALL   run   
472F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
473A   76                     HALT      
473B                EXPECTM_3210S158:      
473B   E1                     POP   HL   
473C                          ;*Macro unroll:  test "_A 1 - /ad", NUL
473C   31 00 53               LD   SP,STACK   
473F   CD 37 0F               CALL   coldInit   
4742   CD C6 51               CALL   execStr   
4745   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
4750   E1                     POP   HL   
4751   E5                     PUSH   HL   
4752   11 00 00               LD   DE,NUL   
4755   B7                     OR   A   
4756   ED 52                  SBC   HL,DE   
4758   7D                     LD   A,L   
4759   B4                     OR   H   
475A   CA B4 47               JP   Z,expectM_3211S159   
475D   CD 03 0F               CALL   printStr   
4760   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
4771   CD 03 0F               CALL   printStr   
4774   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4783   21 00 00               LD   hl,NUL   
4786   E5                     PUSH   hl   
4787   E5                     PUSH   hl   
4788   CD 0A 10               CALL   run   
478B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4792   CD 03 0F               CALL   printStr   
4795   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47A2   E1                     POP   hl   
47A3   E5                     PUSH   hl   
47A4   E5                     PUSH   hl   
47A5   CD 0A 10               CALL   run   
47A8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
47B3   76                     HALT      
47B4                EXPECTM_3211S159:      
47B4   E1                     POP   HL   
47B5                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
47B5   31 00 53               LD   SP,STACK   
47B8   CD 37 0F               CALL   coldInit   
47BB   CD C6 51               CALL   execStr   
47BE   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
47C9   E1                     POP   HL   
47CA   E5                     PUSH   HL   
47CB   11 00 00               LD   DE,NUL   
47CE   B7                     OR   A   
47CF   ED 52                  SBC   HL,DE   
47D1   7D                     LD   A,L   
47D2   B4                     OR   H   
47D3   CA 2D 48               JP   Z,expectM_3212S160   
47D6   CD 03 0F               CALL   printStr   
47D9   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
47EA   CD 03 0F               CALL   printStr   
47ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47FC   21 00 00               LD   hl,NUL   
47FF   E5                     PUSH   hl   
4800   E5                     PUSH   hl   
4801   CD 0A 10               CALL   run   
4804   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
480B   CD 03 0F               CALL   printStr   
480E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
481B   E1                     POP   hl   
481C   E5                     PUSH   hl   
481D   E5                     PUSH   hl   
481E   CD 0A 10               CALL   run   
4821   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
482C   76                     HALT      
482D                EXPECTM_3212S160:      
482D   E1                     POP   HL   
482E                          ;*Macro unroll:  test "_a 1 - /ad", NUL
482E   31 00 53               LD   SP,STACK   
4831   CD 37 0F               CALL   coldInit   
4834   CD C6 51               CALL   execStr   
4837   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
4842   E1                     POP   HL   
4843   E5                     PUSH   HL   
4844   11 00 00               LD   DE,NUL   
4847   B7                     OR   A   
4848   ED 52                  SBC   HL,DE   
484A   7D                     LD   A,L   
484B   B4                     OR   H   
484C   CA A6 48               JP   Z,expectM_3213S161   
484F   CD 03 0F               CALL   printStr   
4852   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
4863   CD 03 0F               CALL   printStr   
4866   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4875   21 00 00               LD   hl,NUL   
4878   E5                     PUSH   hl   
4879   E5                     PUSH   hl   
487A   CD 0A 10               CALL   run   
487D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4884   CD 03 0F               CALL   printStr   
4887   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4894   E1                     POP   hl   
4895   E5                     PUSH   hl   
4896   E5                     PUSH   hl   
4897   CD 0A 10               CALL   run   
489A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48A5   76                     HALT      
48A6                EXPECTM_3213S161:      
48A6   E1                     POP   HL   
48A7                          ;*Macro unroll:  test "_z 1 + /ad", NUL
48A7   31 00 53               LD   SP,STACK   
48AA   CD 37 0F               CALL   coldInit   
48AD   CD C6 51               CALL   execStr   
48B0   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
48BB   E1                     POP   HL   
48BC   E5                     PUSH   HL   
48BD   11 00 00               LD   DE,NUL   
48C0   B7                     OR   A   
48C1   ED 52                  SBC   HL,DE   
48C3   7D                     LD   A,L   
48C4   B4                     OR   H   
48C5   CA 1F 49               JP   Z,expectM_3214S162   
48C8   CD 03 0F               CALL   printStr   
48CB   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
48DC   CD 03 0F               CALL   printStr   
48DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EE   21 00 00               LD   hl,NUL   
48F1   E5                     PUSH   hl   
48F2   E5                     PUSH   hl   
48F3   CD 0A 10               CALL   run   
48F6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
48FD   CD 03 0F               CALL   printStr   
4900   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
490D   E1                     POP   hl   
490E   E5                     PUSH   hl   
490F   E5                     PUSH   hl   
4910   CD 0A 10               CALL   run   
4913   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
491E   76                     HALT      
491F                EXPECTM_3214S162:      
491F   E1                     POP   HL   
4920                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4920   31 00 53               LD   SP,STACK   
4923   CD 37 0F               CALL   coldInit   
4926   CD C6 51               CALL   execStr   
4929   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
4930   E1                     POP   HL   
4931   E5                     PUSH   HL   
4932   11 66 55               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4935   B7                     OR   A   
4936   ED 52                  SBC   HL,DE   
4938   7D                     LD   A,L   
4939   B4                     OR   H   
493A   CA 90 49               JP   Z,expectM_3215S163   
493D   CD 03 0F               CALL   printStr   
4940   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
494D   CD 03 0F               CALL   printStr   
4950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
495F   21 66 55               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4962   E5                     PUSH   hl   
4963   E5                     PUSH   hl   
4964   CD 0A 10               CALL   run   
4967   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
496E   CD 03 0F               CALL   printStr   
4971   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
497E   E1                     POP   hl   
497F   E5                     PUSH   hl   
4980   E5                     PUSH   hl   
4981   CD 0A 10               CALL   run   
4984   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
498F   76                     HALT      
4990                EXPECTM_3215S163:      
4990   E1                     POP   HL   
4991                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4991   31 00 53               LD   SP,STACK   
4994   CD 37 0F               CALL   coldInit   
4997   CD C6 51               CALL   execStr   
499A   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
49A1   E1                     POP   HL   
49A2   E5                     PUSH   HL   
49A3   11 34 55               LD   DE,VARS + ("Z"-"A"+1)*2   
49A6   B7                     OR   A   
49A7   ED 52                  SBC   HL,DE   
49A9   7D                     LD   A,L   
49AA   B4                     OR   H   
49AB   CA 01 4A               JP   Z,expectM_3216S164   
49AE   CD 03 0F               CALL   printStr   
49B1   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
49BE   CD 03 0F               CALL   printStr   
49C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49D0   21 34 55               LD   hl,VARS + ("Z"-"A"+1)*2   
49D3   E5                     PUSH   hl   
49D4   E5                     PUSH   hl   
49D5   CD 0A 10               CALL   run   
49D8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
49DF   CD 03 0F               CALL   printStr   
49E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49EF   E1                     POP   hl   
49F0   E5                     PUSH   hl   
49F1   E5                     PUSH   hl   
49F2   CD 0A 10               CALL   run   
49F5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A00   76                     HALT      
4A01                EXPECTM_3216S164:      
4A01   E1                     POP   HL   
4A02                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4A02   31 00 53               LD   SP,STACK   
4A05   CD 37 0F               CALL   coldInit   
4A08   CD C6 51               CALL   execStr   
4A0B   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4A12   E1                     POP   HL   
4A13   E5                     PUSH   HL   
4A14   11 32 55               LD   DE,VARS + ("Z"-"A")*2   
4A17   B7                     OR   A   
4A18   ED 52                  SBC   HL,DE   
4A1A   7D                     LD   A,L   
4A1B   B4                     OR   H   
4A1C   CA 72 4A               JP   Z,expectM_3217S165   
4A1F   CD 03 0F               CALL   printStr   
4A22   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
4A2F   CD 03 0F               CALL   printStr   
4A32   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A41   21 32 55               LD   hl,VARS + ("Z"-"A")*2   
4A44   E5                     PUSH   hl   
4A45   E5                     PUSH   hl   
4A46   CD 0A 10               CALL   run   
4A49   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A50   CD 03 0F               CALL   printStr   
4A53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A60   E1                     POP   hl   
4A61   E5                     PUSH   hl   
4A62   E5                     PUSH   hl   
4A63   CD 0A 10               CALL   run   
4A66   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A71   76                     HALT      
4A72                EXPECTM_3217S165:      
4A72   E1                     POP   HL   
4A73                          ;*Macro unroll:  test "_A /ad", VARS
4A73   31 00 53               LD   SP,STACK   
4A76   CD 37 0F               CALL   coldInit   
4A79   CD C6 51               CALL   execStr   
4A7C   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4A83   E1                     POP   HL   
4A84   E5                     PUSH   HL   
4A85   11 00 55               LD   DE,VARS   
4A88   B7                     OR   A   
4A89   ED 52                  SBC   HL,DE   
4A8B   7D                     LD   A,L   
4A8C   B4                     OR   H   
4A8D   CA E3 4A               JP   Z,expectM_3218S166   
4A90   CD 03 0F               CALL   printStr   
4A93   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4AA0   CD 03 0F               CALL   printStr   
4AA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AB2   21 00 55               LD   hl,VARS   
4AB5   E5                     PUSH   hl   
4AB6   E5                     PUSH   hl   
4AB7   CD 0A 10               CALL   run   
4ABA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AC1   CD 03 0F               CALL   printStr   
4AC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AD1   E1                     POP   hl   
4AD2   E5                     PUSH   hl   
4AD3   E5                     PUSH   hl   
4AD4   CD 0A 10               CALL   run   
4AD7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4AE2   76                     HALT      
4AE3                EXPECTM_3218S166:      
4AE3   E1                     POP   HL   
4AE4                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4AE4   31 00 53               LD   SP,STACK   
4AE7   CD 37 0F               CALL   coldInit   
4AEA   CD C6 51               CALL   execStr   
4AED   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4AFA   E1                     POP   HL   
4AFB   E5                     PUSH   HL   
4AFC   11 01 00               LD   DE,1   
4AFF   B7                     OR   A   
4B00   ED 52                  SBC   HL,DE   
4B02   7D                     LD   A,L   
4B03   B4                     OR   H   
4B04   CA 60 4B               JP   Z,expectM_3219S167   
4B07   CD 03 0F               CALL   printStr   
4B0A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4B1D   CD 03 0F               CALL   printStr   
4B20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B2F   21 01 00               LD   hl,1   
4B32   E5                     PUSH   hl   
4B33   E5                     PUSH   hl   
4B34   CD 0A 10               CALL   run   
4B37   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B3E   CD 03 0F               CALL   printStr   
4B41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B4E   E1                     POP   hl   
4B4F   E5                     PUSH   hl   
4B50   E5                     PUSH   hl   
4B51   CD 0A 10               CALL   run   
4B54   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B5F   76                     HALT      
4B60                EXPECTM_3219S167:      
4B60   E1                     POP   HL   
4B61                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4B61   31 00 53               LD   SP,STACK   
4B64   CD 37 0F               CALL   coldInit   
4B67   CD C6 51               CALL   execStr   
4B6A   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4B7E   E1                     POP   HL   
4B7F   E5                     PUSH   HL   
4B80   11 03 00               LD   DE,3   
4B83   B7                     OR   A   
4B84   ED 52                  SBC   HL,DE   
4B86   7D                     LD   A,L   
4B87   B4                     OR   H   
4B88   CA EB 4B               JP   Z,expectM_3220S168   
4B8B   CD 03 0F               CALL   printStr   
4B8E   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4BA8   CD 03 0F               CALL   printStr   
4BAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BBA   21 03 00               LD   hl,3   
4BBD   E5                     PUSH   hl   
4BBE   E5                     PUSH   hl   
4BBF   CD 0A 10               CALL   run   
4BC2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BC9   CD 03 0F               CALL   printStr   
4BCC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BD9   E1                     POP   hl   
4BDA   E5                     PUSH   hl   
4BDB   E5                     PUSH   hl   
4BDC   CD 0A 10               CALL   run   
4BDF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4BEA   76                     HALT      
4BEB                EXPECTM_3220S168:      
4BEB   E1                     POP   HL   
4BEC                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4BEC   31 00 53               LD   SP,STACK   
4BEF   CD 37 0F               CALL   coldInit   
4BF2   CD C6 51               CALL   execStr   
4BF5   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4C0C   E1                     POP   HL   
4C0D   E5                     PUSH   HL   
4C0E   11 02 00               LD   DE,2   
4C11   B7                     OR   A   
4C12   ED 52                  SBC   HL,DE   
4C14   7D                     LD   A,L   
4C15   B4                     OR   H   
4C16   CA 7C 4C               JP   Z,expectM_3221S169   
4C19   CD 03 0F               CALL   printStr   
4C1C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4C39   CD 03 0F               CALL   printStr   
4C3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C4B   21 02 00               LD   hl,2   
4C4E   E5                     PUSH   hl   
4C4F   E5                     PUSH   hl   
4C50   CD 0A 10               CALL   run   
4C53   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C5A   CD 03 0F               CALL   printStr   
4C5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C6A   E1                     POP   hl   
4C6B   E5                     PUSH   hl   
4C6C   E5                     PUSH   hl   
4C6D   CD 0A 10               CALL   run   
4C70   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C7B   76                     HALT      
4C7C                EXPECTM_3221S169:      
4C7C   E1                     POP   HL   
4C7D                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4C7D   31 00 53               LD   SP,STACK   
4C80   CD 37 0F               CALL   coldInit   
4C83   CD C6 51               CALL   execStr   
4C86   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4CA9   E1                     POP   HL   
4CAA   E5                     PUSH   HL   
4CAB   11 01 00               LD   DE,1   
4CAE   B7                     OR   A   
4CAF   ED 52                  SBC   HL,DE   
4CB1   7D                     LD   A,L   
4CB2   B4                     OR   H   
4CB3   CA 25 4D               JP   Z,expectM_3222S170   
4CB6   CD 03 0F               CALL   printStr   
4CB9   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4CE2   CD 03 0F               CALL   printStr   
4CE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CF4   21 01 00               LD   hl,1   
4CF7   E5                     PUSH   hl   
4CF8   E5                     PUSH   hl   
4CF9   CD 0A 10               CALL   run   
4CFC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4D03   CD 03 0F               CALL   printStr   
4D06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D13   E1                     POP   hl   
4D14   E5                     PUSH   hl   
4D15   E5                     PUSH   hl   
4D16   CD 0A 10               CALL   run   
4D19   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D24   76                     HALT      
4D25                EXPECTM_3222S170:      
4D25   E1                     POP   HL   
4D26                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4D26   31 00 53               LD   SP,STACK   
4D29   CD 37 0F               CALL   coldInit   
4D2C   CD C6 51               CALL   execStr   
4D2F   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4D52   E1                     POP   HL   
4D53   E5                     PUSH   HL   
4D54   11 01 00               LD   DE,1   
4D57   B7                     OR   A   
4D58   ED 52                  SBC   HL,DE   
4D5A   7D                     LD   A,L   
4D5B   B4                     OR   H   
4D5C   CA CE 4D               JP   Z,expectM_3223S171   
4D5F   CD 03 0F               CALL   printStr   
4D62   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4D8B   CD 03 0F               CALL   printStr   
4D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9D   21 01 00               LD   hl,1   
4DA0   E5                     PUSH   hl   
4DA1   E5                     PUSH   hl   
4DA2   CD 0A 10               CALL   run   
4DA5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4DAC   CD 03 0F               CALL   printStr   
4DAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DBC   E1                     POP   hl   
4DBD   E5                     PUSH   hl   
4DBE   E5                     PUSH   hl   
4DBF   CD 0A 10               CALL   run   
4DC2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DCD   76                     HALT      
4DCE                EXPECTM_3223S171:      
4DCE   E1                     POP   HL   
4DCF                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4DCF   31 00 53               LD   SP,STACK   
4DD2   CD 37 0F               CALL   coldInit   
4DD5   CD C6 51               CALL   execStr   
4DD8   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4E08   E1                     POP   HL   
4E09   E5                     PUSH   HL   
4E0A   11 02 00               LD   DE,2   
4E0D   B7                     OR   A   
4E0E   ED 52                  SBC   HL,DE   
4E10   7D                     LD   A,L   
4E11   B4                     OR   H   
4E12   CA 91 4E               JP   Z,expectM_3224S172   
4E15   CD 03 0F               CALL   printStr   
4E18   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4E4E   CD 03 0F               CALL   printStr   
4E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E60   21 02 00               LD   hl,2   
4E63   E5                     PUSH   hl   
4E64   E5                     PUSH   hl   
4E65   CD 0A 10               CALL   run   
4E68   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4E6F   CD 03 0F               CALL   printStr   
4E72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E7F   E1                     POP   hl   
4E80   E5                     PUSH   hl   
4E81   E5                     PUSH   hl   
4E82   CD 0A 10               CALL   run   
4E85   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4E90   76                     HALT      
4E91                EXPECTM_3224S172:      
4E91   E1                     POP   HL   
4E92                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4E92   31 00 53               LD   SP,STACK   
4E95   CD 37 0F               CALL   coldInit   
4E98   CD C6 51               CALL   execStr   
4E9B   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4EB0   E1                     POP   HL   
4EB1   E5                     PUSH   HL   
4EB2   11 02 00               LD   DE,2   
4EB5   B7                     OR   A   
4EB6   ED 52                  SBC   HL,DE   
4EB8   7D                     LD   A,L   
4EB9   B4                     OR   H   
4EBA   CA 1E 4F               JP   Z,expectM_3225S173   
4EBD   CD 03 0F               CALL   printStr   
4EC0   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4EDB   CD 03 0F               CALL   printStr   
4EDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EED   21 02 00               LD   hl,2   
4EF0   E5                     PUSH   hl   
4EF1   E5                     PUSH   hl   
4EF2   CD 0A 10               CALL   run   
4EF5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4EFC   CD 03 0F               CALL   printStr   
4EFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F0C   E1                     POP   hl   
4F0D   E5                     PUSH   hl   
4F0E   E5                     PUSH   hl   
4F0F   CD 0A 10               CALL   run   
4F12   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F1D   76                     HALT      
4F1E                EXPECTM_3225S173:      
4F1E   E1                     POP   HL   
4F1F                          ;*Macro unroll:  test "'hello'/sl",5
4F1F   31 00 53               LD   SP,STACK   
4F22   CD 37 0F               CALL   coldInit   
4F25   CD C6 51               CALL   execStr   
4F28   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4F33   E1                     POP   HL   
4F34   E5                     PUSH   HL   
4F35   11 05 00               LD   DE,5   
4F38   B7                     OR   A   
4F39   ED 52                  SBC   HL,DE   
4F3B   7D                     LD   A,L   
4F3C   B4                     OR   H   
4F3D   CA 97 4F               JP   Z,expectM_3226S174   
4F40   CD 03 0F               CALL   printStr   
4F43   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4F54   CD 03 0F               CALL   printStr   
4F57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F66   21 05 00               LD   hl,5   
4F69   E5                     PUSH   hl   
4F6A   E5                     PUSH   hl   
4F6B   CD 0A 10               CALL   run   
4F6E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F75   CD 03 0F               CALL   printStr   
4F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F85   E1                     POP   hl   
4F86   E5                     PUSH   hl   
4F87   E5                     PUSH   hl   
4F88   CD 0A 10               CALL   run   
4F8B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F96   76                     HALT      
4F97                EXPECTM_3226S174:      
4F97   E1                     POP   HL   
4F98                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
4F98   31 00 53               LD   SP,STACK   
4F9B   CD 37 0F               CALL   coldInit   
4F9E   CD C6 51               CALL   execStr   
4FA1   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
4FB4   E1                     POP   HL   
4FB5   E5                     PUSH   HL   
4FB6   11 00 00               LD   DE,false   
4FB9   B7                     OR   A   
4FBA   ED 52                  SBC   HL,DE   
4FBC   7D                     LD   A,L   
4FBD   B4                     OR   H   
4FBE   CA 20 50               JP   Z,expectM_3227S175   
4FC1   CD 03 0F               CALL   printStr   
4FC4   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
4FDD   CD 03 0F               CALL   printStr   
4FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FEF   21 00 00               LD   hl,false   
4FF2   E5                     PUSH   hl   
4FF3   E5                     PUSH   hl   
4FF4   CD 0A 10               CALL   run   
4FF7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4FFE   CD 03 0F               CALL   printStr   
5001   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
500E   E1                     POP   hl   
500F   E5                     PUSH   hl   
5010   E5                     PUSH   hl   
5011   CD 0A 10               CALL   run   
5014   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
501F   76                     HALT      
5020                EXPECTM_3227S175:      
5020   E1                     POP   HL   
5021                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
5021   31 00 53               LD   SP,STACK   
5024   CD 37 0F               CALL   coldInit   
5027   CD C6 51               CALL   execStr   
502A   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
503E   E1                     POP   HL   
503F   E5                     PUSH   HL   
5040   11 FF FF               LD   DE,true   
5043   B7                     OR   A   
5044   ED 52                  SBC   HL,DE   
5046   7D                     LD   A,L   
5047   B4                     OR   H   
5048   CA AB 50               JP   Z,expectM_3228S176   
504B   CD 03 0F               CALL   printStr   
504E   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5068   CD 03 0F               CALL   printStr   
506B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
507A   21 FF FF               LD   hl,true   
507D   E5                     PUSH   hl   
507E   E5                     PUSH   hl   
507F   CD 0A 10               CALL   run   
5082   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5089   CD 03 0F               CALL   printStr   
508C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5099   E1                     POP   hl   
509A   E5                     PUSH   hl   
509B   E5                     PUSH   hl   
509C   CD 0A 10               CALL   run   
509F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
50AA   76                     HALT      
50AB                EXPECTM_3228S176:      
50AB   E1                     POP   HL   
50AC                          ;*Macro unroll:  test "[1 2 3]** + +", 6
50AC   31 00 53               LD   SP,STACK   
50AF   CD 37 0F               CALL   coldInit   
50B2   CD C6 51               CALL   execStr   
50B5   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
50C3   E1                     POP   HL   
50C4   E5                     PUSH   HL   
50C5   11 06 00               LD   DE,6   
50C8   B7                     OR   A   
50C9   ED 52                  SBC   HL,DE   
50CB   7D                     LD   A,L   
50CC   B4                     OR   H   
50CD   CA 2A 51               JP   Z,expectM_3229S177   
50D0   CD 03 0F               CALL   printStr   
50D3   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
50E7   CD 03 0F               CALL   printStr   
50EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50F9   21 06 00               LD   hl,6   
50FC   E5                     PUSH   hl   
50FD   E5                     PUSH   hl   
50FE   CD 0A 10               CALL   run   
5101   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5108   CD 03 0F               CALL   printStr   
510B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5118   E1                     POP   hl   
5119   E5                     PUSH   hl   
511A   E5                     PUSH   hl   
511B   CD 0A 10               CALL   run   
511E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5129   76                     HALT      
512A                EXPECTM_3229S177:      
512A   E1                     POP   HL   
512B                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2#", $63
512B   31 00 53               LD   SP,STACK   
512E   CD 37 0F               CALL   coldInit   
5131   CD C6 51               CALL   execStr   
5134   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 DB   "/bm[_a [_b _c]** _d]2#",0   
514B   E1                     POP   HL   
514C   E5                     PUSH   HL   
514D   11 63 00               LD   DE,$63   
5150   B7                     OR   A   
5151   ED 52                  SBC   HL,DE   
5153   7D                     LD   A,L   
5154   B4                     OR   H   
5155   CA BB 51               JP   Z,expectM_3230S178   
5158   CD 03 0F               CALL   printStr   
515B   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2#"   
5178   CD 03 0F               CALL   printStr   
517B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
518A   21 63 00               LD   hl,$63   
518D   E5                     PUSH   hl   
518E   E5                     PUSH   hl   
518F   CD 0A 10               CALL   run   
5192   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5199   CD 03 0F               CALL   printStr   
519C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51A9   E1                     POP   hl   
51AA   E5                     PUSH   hl   
51AB   E5                     PUSH   hl   
51AC   CD 0A 10               CALL   run   
51AF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
51BA   76                     HALT      
51BB                EXPECTM_3230S178:      
51BB   E1                     POP   HL   
51BC                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
51BC                             ; 
51BC   CD 03 0F               CALL   printStr   
51BF   44 6F 6E 65 21 00      .CSTR   "Done!"   
51C5   76                     HALT      
51C6                             ; executes a null teminated string (null executes exit_)
51C6                             ; the string should be immedaitely following the call
51C6                EXECSTR:      ; create a root stack frame
51C6   C1                     POP   bc   ; bc = code*
51C7   0B                     DEC   bc   ; dec to prepare for next routine
51C8   11 00 00               LD   de,0   
51CB   D5                     PUSH   de   ; push fake IP
51CC   D5                     PUSH   de   ; push null arg_list*
51CD   D5                     PUSH   de   ; push null first_arg*
51CE   D5                     PUSH   de   ; push fake BP
51CF   DD E9                  JP   (ix)   
51D1                STKSIZE:   EQU   $100   ; Stack size
51D1                TIBSIZE:   EQU   $100   ; 256 bytes
51D1                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
51D1                          ALIGN   $100   
5200                          DS   STKSIZE   
5300                STACK:       
5300                          ALIGN   $100   
5300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5400                          ALIGN   $100   
5400                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5500                          ALIGN   $100   
5500                VARS:        
5500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
55D0                RESTARTS:      
55D0                RST08:    DS   2   
55D2                RST10:    DS   2   
55D4                RST18:    DS   2   
55D6                RST20:    DS   2   
55D8                RST28:    DS   2   
55DA                RST30:    DS   2   ; 
55DC                BAUD:     DS   2   ; 
55DE                INTVEC:   DS   2   ; 
55E0                NMIVEC:   DS   2   ; 
55E2                GETCVEC:   DS   2   ; 
55E4                PUTCVEC:   DS   2   ; 
55E6                SYSVARS:      
55E6                             ; initialised sys variables (preserved)
55E6                VDATAWIDTH:   DS   2   ; 
55E8                VNUMBASE:   DS   2   ; 
55EA                VTIBPTR:   DS   2   ; 
55EC                VBUFPTR:   DS   2   ; 
55EE                VNEXT:    DS   2   ; 
55F0                VHEAPPTR:   DS   2   ; 
55F2                VRECUR:   DS   2   ; 
55F4                VDEFINE:   DS   2   ; 
55F6                VSTRMODE:   DS   2   ; 
55F8                             ; uninitialised sys variables (preserved)
55F8                VPOINTER:   DS   2   ; 
55FA                VREMAIN:   DS   2   ; 
55FC                VSAVEDIP:   DS   2   ; 
55FE                VSAVEDSP:   DS   2   ; 
5600                VSAVEDNEXT:   DS   2   ; 
5602                VSAVEDBP:   DS   2   ; 
5604                             ; uninitialised sys variables (unpreserved)
5604                VTEMP1:   DS   2   ; 
5606                VTEMP2:   DS   2   ; 
5608                VTEMP3:   DS   2   ; 
560A                VLASTDEF:   DS   2   ; 
560C                TBPTR:    DS   2   ; reserved for tests
560E                TITLEBUF:   DS   20   
5622                HEAP:        
5622                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5622                             ; db "{"
5622                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5622                             ; db    "\\kt{"
5622                             ; db      "0%t!=/qt"                  ; break if type != 0
5622                             ; db      "\\dt:a{"                   ; return talkback to receive data
5622                             ; db        "%L1#!/qt"                ; if not active don't send
5622                             ; db        "%L0# %a="                ; store current index in A
5622                             ; db        "%s %L0# +="              ; inc value of index by step
5622                             ; db        "1%t!=/qt"                ; break if type != 0
5622                             ; db        "%a %e <"                 ; ifte: in range?
5622                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5622                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
5622                             ; db      "} 0 %k^"                   ; init sink
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC map, 0, "sf"                   ; map
5622                             ; db "{"
5622                             ; db    "\\kt{"
5622                             ; db      "0%t!=/qt"                  ; break if type != 0
5622                             ; db      "\\dt{"                     ; call source with tb
5622                             ; db        "1%t=="                   ; ifte: type == 1 ?
5622                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5622                             ; db        "?? %t %k^"               ; ifte: send to sink
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; ; /ft filter
5622                             ; ; src pred -- src1
5622                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5622                             ; db "{"
5622                             ; db    "[0]%T="
5622                             ; db    "\\kt{"                       ; return talkback to receive data
5622                             ; db      "\\dt{"                     ; call source with tb
5622                             ; db        "["
5622                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5622                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5622                             ; db          "{/t}"                  ; case 2: return true
5622                             ; db        "]%t#^"                   ; select on %t
5622                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5622                             ; db        "??"
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC forEach, 1, "spT"
5622                             ; db "{"
5622                             ; db    "[0]%T="
5622                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5622                             ; db      "2%t==/qt"                    ; if type == 2 skip
5622                             ; db      "0%t=="                   ; ifte: type = 0 ?
5622                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5622                             ; db      "??"                      ; ifte:
5622                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5622                             ; db    "} 0 %s^"
5622                             ; db "}"
5622                             ; db 0
5622                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5622                             ; db "{"                                  ; reducer: \\da00bbLi4u
5622                             ; db    "[%i]%A="
5622                             ; db    "\\kt{"                         ; return talkback to receive data
5622                             ; db      "\\dt{"                         ; call source with tb
5622                             ; db        "1%t=="                       ; ifte: type == 1 ?
5622                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5622                             ; db        "?? %t %k^"                    ; ifte: send to sink
5622                             ; db      "} 0 %s^"
5622                             ; db    "}"
5622                             ; db "}"
5622                             ; db 0
5622                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 198 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 201 IN MAIN.asm
BANG:               021E DEFINED AT LINE 202 IN MAIN.asm
NOT:                0229 DEFINED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
EQ_:                022F DEFINED AT LINE 214 IN MAIN.asm
EQ:                 022F DEFINED AT LINE 215 IN MAIN.asm
EQ0:                0239 DEFINED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
EQ1:                023A DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
GT_:                023E DEFINED AT LINE 228 IN MAIN.asm
GT:                 023E DEFINED AT LINE 229 IN MAIN.asm
LT_:                0249 DEFINED AT LINE 237 IN MAIN.asm
LT:                 0249 DEFINED AT LINE 238 IN MAIN.asm
LT1:                0252 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
HASH_:              025B DEFINED AT LINE 253 IN MAIN.asm
HASH:               025B DEFINED AT LINE 254 IN MAIN.asm
ARRAYINDEX:         025B DEFINED AT LINE 255 IN MAIN.asm
ARRAYINDEX0:        0263 DEFINED AT LINE 261 IN MAIN.asm
ARRAYINDEX1:        0264 DEFINED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
ARRAYINDEX2:        0270 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             027B DEFINED AT LINE 287 IN MAIN.asm
AMPER:              027B DEFINED AT LINE 288 IN MAIN.asm
AND:                027B DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             0285 DEFINED AT LINE 307 IN MAIN.asm
MINUS:              0285 DEFINED AT LINE 308 IN MAIN.asm
SUB:                0291 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               029B DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               02A2 DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               02A5 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
STAR_:              02AD DEFINED AT LINE 338 IN MAIN.asm
STAR:               02AD DEFINED AT LINE 339 IN MAIN.asm
MUL:                02B5 DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02B7 DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02BF DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02D1 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02D1 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02D1 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02DC DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02E0 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
ADD4:               02EA DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
COLON_:             02ED DEFINED AT LINE 394 IN MAIN.asm
UPCASE_:            02F0 DEFINED AT LINE 398 IN MAIN.asm
UPCASE:             02F0 DEFINED AT LINE 399 IN MAIN.asm
SEMICOLON_:         02F5 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 413 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 414 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 430 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 431 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 432 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 447 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 448 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 449 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 469 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 470 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 471 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 523 IN MAIN.asm
CARET:              039F DEFINED AT LINE 527 IN MAIN.asm
GO:                 039F DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 544 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 545 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 561 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 568 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 569 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 570 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 585 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 588 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 589 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 597 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 598 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 599 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 611 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 781 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 782 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 783 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 792 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 828 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 842 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 852 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 858 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 878 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 885 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 891 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 895 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 901 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 905 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 910 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 926 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 942 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 946 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 962 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 968 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 973 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 978 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
PERFORMM_1544S1066: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
BYTEMODE1:          0654 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMENT:            0659 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
CONSTHEAPSTART:     0662 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
CONSTTIBSTART:      0668 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
CONSTBUFSTART:      066E DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
DECBASE:            0674 DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
DECBASE1:           0677 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
ERROR1:             067C DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
HEXBASE:            0682 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
INPUT:              0688 DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
KEY:                0693 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
OUTPUT:             069C DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
QUIT:               06A5 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
QUIT1:              06AC DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
RECUR:              06AF DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
REMAIN:             06B5 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
STRINGBEGIN:        06BB DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
STRINGEND:          06C3 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
STRINGEND1:         06EA DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
STRINGLENGTH:       06F2 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F8 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
STRINGLENGTH2:      06FA DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
STRINGLENGTH3:      06FE DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
STRINGSIZE:         0701 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
PERFORMM_1692S1234: 0708 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      070D DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
STRINGCOMPARE1:     070F DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
STRINGCOMPARE2:     071A DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGCOMPARE3:     071F DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE4:     0722 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
VARBUFPTR:          0725 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
VARHEAPPTR:         072E DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VARTIBPTR:          0737 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARIABLE:           0740 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
CONSTANT:           0743 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
WORDMODE:           0746 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
XOR:                074C DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
XOR1:               074D DEFINED AT LINE 1292 IN MAIN.asm
RANGESRC:           0757 DEFINED AT LINE 32
                    > USED AT LINE 922 IN MAIN.asm
RANGESRCM_1757S1308: 0766 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07EB DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
ARRAYITERM_1776S1328: 07F8 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         086C DEFINED AT LINE 32
                    > USED AT LINE 934 IN MAIN.asm
STRINGITERM_1795S1348: 0879 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08F4 DEFINED AT LINE 32
                    > USED AT LINE 897 IN MAIN.asm
MAPM_1815S1370:     0901 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0936 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FILTERM_1829S1385:  0944 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0994 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
FOLDM_1848S1405:    09A3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09E6 DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
FOREACHM_1862S1420: 09F4 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A32 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FUNCSRCM_1876S1435: 0A3E DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A6B DEFINED AT LINE 32
                    > USED AT LINE 614 IN MAIN.asm
PRINTARRAYM_1886S1446: 0A79 DEFINED AT LINE 39
                    > USED AT LINE 35
COLON:              0AB3 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
DEFINESTART:        0AC0 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
SEMICOLON:          0AC9 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
DEFINEEND:          0AC9 DEFINED AT LINE 1471 IN MAIN.asm
DEFINEEND1:         0ADB DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
TILDE:              0ADD DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
INVERT:             0ADD DEFINED AT LINE 1485 IN MAIN.asm
DOLLAR:             0AE7 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0AE7 DEFINED AT LINE 1497 IN MAIN.asm
HEXNUM1:            0AEA DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
HEXNUM2:            0AF2 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
QUESTION:           0B04 DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0B04 DEFINED AT LINE 1521 IN MAIN.asm
IFTE:               0B10 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
IFTE1:              0B11 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
QUOTE:              0B1D DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0B1D DEFINED AT LINE 1547 IN MAIN.asm
STRING1:            0B26 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
STRING2:            0B29 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
STRING3:            0B2F DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
PERCENT:            0B37 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B37 DEFINED AT LINE 1574 IN MAIN.asm
ARG0:               0B53 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
ARG0A:              0B5C DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
ARG1:               0B61 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
ARG1A:              0B69 DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
NUM:                0B6C DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
NUM0:               0B75 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
NUM1:               0B76 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
NUM2:               0B8E DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
NUM3:               0B99 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
RBRACE:             0B9C DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0B9C DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
BLOCKEND1:          0BCE DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
BLOCKEND2:          0BDA DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
BLOCKEND3:          0BEC DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
BLOCKEND4:          0C00 DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
GOBLOCK:            0C09 DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GOBLOCK2:           0C2E DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
GOBLOCK3:           0C38 DEFINED AT LINE 1737 IN MAIN.asm
GOFUNC:             0C3C DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOFUNC1:            0C55 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
GOFUNC2:            0C5B DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
GOFUNC3:            0C66 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
GOFUNC4:            0C7E DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOFUNC5:            0C81 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
GOFUNC6:            0C84 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
GOFUNC7:            0C87 DEFINED AT LINE 1800 IN MAIN.asm
GOFUNC8:            0C8B DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
ASSIGN:             0C96 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
ASSIGN0:            0C98 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0C9C DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
ASSIGN2:            0CA5 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
EQUALS:             0CA7 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
NOTEQUALS:          0CAE DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
LESSTHANEQ:         0CB5 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
LESSTHAN:           0CBA DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
LESSTHAN1:          0CBF DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
TRUE1:              0CC2 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
NULL1:              0CC8 DEFINED AT LINE 1867 IN MAIN.asm
FALSE1:             0CC8 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
SPREAD:             0CCE DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0CDB DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
SPREAD2:            0CE6 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
SPREAD3:            0CE8 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
SHIFTLEFT:          0CF2 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT1:         0CFA DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
SHIFTLEFT2:         0CFB DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SHIFTRIGHT:         0D02 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
SHIFTRIGHT1:        0D0A DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
SHIFTRIGHT2:        0D0E DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
DIVIDE:             0D15 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DIVIDE1:            0D1A DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
DIVIDE2:            0D27 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
DIVIDE3:            0D28 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
DOTNEXT:            0D2E DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTNEXT1:           0D36 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PARSEARGS:          0D48 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
PARSEARGS1:         0D52 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEARGS1A:        0D5A DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
PARSEARGS2:         0D62 DEFINED AT LINE 1993 IN MAIN.asm
PARSEARGS3:         0D6A DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
PARSEARGS4:         0D6D DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
PARSEARGS5:         0D73 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PARSEBLOCK:         0D7E DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PARSEBLOCK1:        0D82 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEBLOCK2:        0DAE DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
PARSEBLOCK3:        0DB1 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
PARSEBLOCK4:        0DB9 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
PARSEBLOCK5:        0DBC DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEBLOCK6:        0DE4 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
CREATEFUNC:         0DE8 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
CREATEFUNC0:        0E07 DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
CREATEFUNC1:        0E1F DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
CREATEFUNC2:        0E32 DEFINED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CREATEFUNC2A:       0E51 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
CREATEFUNC3:        0E60 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
CREATEFUNC4:        0E6B DEFINED AT LINE 2188 IN MAIN.asm
CREATEFUNC5:        0E6C DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
LOWERCASETABLE:     0E8A DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
LOWERCASETABLE1:    0E94 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
LOWERCASETABLE2:    0E9B DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
COMMANDTABLE:       0EA0 DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
COMMANDTABLE1:      0EA1 DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
COMMANDTABLE2:      0EA2 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
COMMANDTABLE3:      0EA9 DEFINED AT LINE 2252 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
COMMANDTABLE4:      0EB2 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
PUTSTR0:            0EB8 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
PUTSTR:             0EBC DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
NESTING:            0EC1 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
NESTING0:           0ECB DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
NESTING1A:          0ED2 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
NESTING1:           0ED5 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
NESTING2:           0EE4 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
NESTING3:           0EE6 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
NESTING4:           0EF1 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
PROMPT:             0EF3 DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
CRLF:               0EFC DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
PRINTSTR:           0F03 DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 184
INIT:               0F0A DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
INIT1:              0F12 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
WARMINIT:           0F1A DEFINED AT LINE 2355 IN MAIN.asm
COLDBOOT0:          0F2D DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
COLDINIT:           0F37 DEFINED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0F48 DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
COLDSTART:          0F55 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
START:              0F5E DEFINED AT LINE 2390 IN MAIN.asm
START1:             0F64 DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
INTERPRET:          0F6A DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
INTERPRET2:         0F76 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
INTERPRET3:         0F7E DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
INTERPRET4:         0F89 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
INTERPRET5:         0F8E DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET5A:        0FAC DEFINED AT LINE 2466 IN MAIN.asm
INTERPRET6:         0FAE DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
INTERPRET7:         0FBC DEFINED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
INTERPRET8:         0FCF DEFINED AT LINE 2496 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
NEXT:               0FEA DEFINED AT LINE 2509 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
NEXT0:              0FFE DEFINED AT LINE 2523 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
NEXT1:              0FFF DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
EXIT:               1006 DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
RUN:                100A DEFINED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              100E DEFINED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BACKSPACE_:         1020 DEFINED AT LINE 2546 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
EDIT_:              1030 DEFINED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
REEDIT_:            1033 DEFINED AT LINE 2559 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
F1:                 1036 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
F1M_3073S12:        1041 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1042 DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F2M_3075S15:        104D DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 104E DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
F3M_3077S18:        1059 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 105A DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F4M_3079S21:        1065 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3099S47:    1168 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S48:    11D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S49:    1238 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S50:    129F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S51:    1306 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S52:    136D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S53:    13D6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S54:    1441 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S55:    14AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S56:    1519 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S57:    1582 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S58:    15EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S59:    1656 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S60:    16C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S61:    1732 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S62:    17A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S63:    1812 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S64:    1885 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S65:    18FC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S66:    1971 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S67:    19E0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S68:    1A57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S69:    1ACA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S70:    1B39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S71:    1BA8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S72:    1C1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S73:    1C8E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S74:    1CFD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S75:    1D6E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S76:    1DEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S77:    1E5A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S78:    1EC5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S79:    1F32 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S80:    1F9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S81:    200E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S82:    2085 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S83:    20F4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S84:    2171 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S85:    21EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S86:    226B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S87:    22EA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S88:    236D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S89:    23F0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S90:    2473 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S91:    24F6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S92:    2577 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S93:    25F8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S94:    267D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S95:    26EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S96:    276D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S97:    27E4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S98:    2853 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S99:    28C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S100:   2935 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S101:   29A4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S102:   2A13 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S103:   2A82 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S104:   2AF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S105:   2B60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S106:   2BCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S107:   2C3E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S108:   2CAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S109:   2D1E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S110:   2D8F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S111:   2E00 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S112:   2E73 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S113:   2EE6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S114:   2F53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S115:   2FC0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S116:   3033 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S117:   30AC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S118:   3125 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S119:   31A2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S120:   3229 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S121:   32B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S122:   331F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S123:   3390 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S124:   3407 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S125:   3482 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S126:   34F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S127:   357A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S128:   35FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S129:   3686 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S130:   3713 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S131:   3792 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S132:   3817 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S133:   389E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S134:   3927 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S135:   39AE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S136:   3A43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S137:   3AC6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S138:   3B57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S139:   3BEA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S140:   3C7F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S141:   3D1E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S142:   3DBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S143:   3E3C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S144:   3EC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S145:   3F44 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S146:   3FCB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S147:   4056 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S148:   40EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S149:   4190 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S150:   4231 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S151:   42C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S152:   435D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S153:   440C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S154:   44B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S155:   456C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S156:   4625 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S157:   46B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S158:   473B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S159:   47B4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S160:   482D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S161:   48A6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3214S162:   491F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3215S163:   4990 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3216S164:   4A01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3217S165:   4A72 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3218S166:   4AE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3219S167:   4B60 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3220S168:   4BEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3221S169:   4C7C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3222S170:   4D25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3223S171:   4DCE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3224S172:   4E91 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3225S173:   4F1E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3226S174:   4F97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3227S175:   5020 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3228S176:   50AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3229S177:   512A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3230S178:   51BB DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            51C6 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5300 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5300 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
BUFFER:             5400 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
VARS:               5500 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           55D0 DEFINED AT LINE 18 IN ram.asm
RST08:              55D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              55D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              55D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              55D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              55D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              55DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               55DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             55DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             55E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            55E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            55E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            55E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2370 IN MAIN.asm
VDATAWIDTH:         55E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
VNUMBASE:           55E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
VTIBPTR:            55EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
VBUFPTR:            55EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
VNEXT:              55EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2382 IN MAIN.asm
VHEAPPTR:           55F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
VRECUR:             55F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
VDEFINE:            55F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
VSTRMODE:           55F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
VPOINTER:           55F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
VREMAIN:            55FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
VSAVEDIP:           55FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
VSAVEDSP:           55FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
VSAVEDNEXT:         5600 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
VSAVEDBP:           5602 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
VTEMP1:             5604 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
VTEMP2:             5606 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VTEMP3:             5608 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
VLASTDEF:           560A DEFINED AT LINE 61 IN ram.asm
TBPTR:              560C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           560E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
HEAP:               5622 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
