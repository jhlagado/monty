0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4C                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   94 0F                  DW   next   ; nNext
01E8   22 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 4D            LD   de,(vPointer)   
0208   21 F8 4D               LD   hl,vPointer   
020B   C3 BA 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 84 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 AC 04               JP   percent   
021C                RBRACE_:      
021C   C3 D4 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 41 0C               JP   caret   
0228                COMMA_:      
0228   C3 02 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 02 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD 16 0D               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 4D               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 4D            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 B3 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 4D               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 4D               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 4D                  LD   h,msb(vars)   
02BA   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 4D               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 4D               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 42 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 42 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD E0 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 B3 0F               JP   error   
0416                LAMBDA2:      
0416   CD 16 0D               CALL   parseBlock   
0419   CD 80 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 4D            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
048F   C3 3D 0B               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0495   E5                     PUSH   hl   ; save start of string
0496   0A                     LD   a,(bc)   
0497   5F                     LD   e,a   ; e = matching terminator
0498   03                     INC   bc   ; point to next char
0499   18 03                  JR   string2   
049B                STRING1:      
049B   77                     LD   (hl),a   
049C   23                     INC   hl   ; increase count
049D   03                     INC   bc   ; point to next char
049E                STRING2:      
049E   0A                     LD   a,(bc)   
049F   BB                     CP   e   ; is it the string terminator
04A0   28 02                  JR   z,string3   
04A2   18 F7                  JR   string1   
04A4                STRING3:      
04A4   AF                     XOR   a   ; write NUL to terminate string
04A5   77                     LD   (hl),a   ; hl = end of string
04A6   23                     INC   hl   
04A7   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AA   DD E9                  JP   (ix)   
04AC                             ; %a .. %z                      43
04AC                             ; -- value
04AC                             ; returns value of arg
04AC                PERCENT:      
04AC                ARG:         
04AC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04AF   FD 56 05               LD   d,(iy+5)   
04B2   EB                     EX   de,hl   
04B3   7D                     LD   a,l   ; arg_list* == null, skip
04B4   B4                     OR   h   
04B5   28 1A                  JR   z,arg0a   
04B7   23                     INC   hl   ; a = num_args, hl = arg_list*
04B8   7E                     LD   a,(hl)   
04B9   23                     INC   hl   
04BA   B7                     OR   a   
04BB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04BD   5F                     LD   e,a   ; e = a = num_args
04BE   03                     INC   bc   ; a = next char = dollar_name
04BF   0A                     LD   a,(bc)   
04C0   C5                     PUSH   bc   ; save IP
04C1   43                     LD   b,e   ; b = e = num_args
04C2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04C5   FD 56 03               LD   d,(iy+3)   
04C8                ARG0:        
04C8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C9   1B                     DEC   de   
04CA   BE                     CP   (hl)   
04CB   28 09                  JR   z,arg1   
04CD   23                     INC   hl   ; hl = next arg_list*
04CE   10 F8                  DJNZ   arg0   
04D0   C1                     POP   bc   ; no match, restore IP
04D1                ARG0A:       
04D1   11 00 00               LD   de,0   ; return 0
04D4   18 08                  JR   arg1a   
04D6                ARG1:        
04D6   C1                     POP   bc   ; restore IP
04D7   EB                     EX   de,hl   ; hl = arg*
04D8   22 F8 4D               LD   (vPointer),hl   ; store arg* in setter
04DB   5E                     LD   e,(hl)   
04DC   23                     INC   hl   
04DD   56                     LD   d,(hl)   ; de = arg
04DE                ARG1A:       
04DE   D5                     PUSH   de   ; push arg
04DF   DD E9                  JP   (ix)   
04E1                             ;********************** PAGE 3,4 END *********************************************
04E1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 4A 0E               CALL   xjumpTable   
0503   61                     DB   "a"   ; .a print array
0504   BA 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   C9 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   B4 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number
050D                             ; /bd buffer decimal
050D                             ; value --
050D                DOTNUMBER_:      
050D   3A E8 4D               LD   a,(vNumBase)   
0510   FE 10                  CP   16   
0512   CA 7E 05               JP   z,dotHex   ; else falls through
0515   C3 18 05               JP   dotDec   
0518                             ; print decimal                 ; 70
0518                             ; value --
0518                DOTDEC:      
0518   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051C   D9                     EXX      
051D   E1                     POP   hl   ; hl = value
051E   3A E6 4D               LD   a,(vDataWidth)   
0521   3D                     DEC   a   
0522   20 02                  JR   nz,dotDecX   
0524   26 00                  LD   h,0   
0526                DOTDECX:      
0526   CD 35 05               CALL   dotDec0   
0529   D9                     EXX      ; de = buffer*' bc = IP
052A   3E 20                  LD   a," "   ; append space to buffer
052C   12                     LD   (de),a   
052D   13                     INC   de   ; string*++,
052E   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   C3 3D 0B               JP   dotNext   
0535                             ; hl = value
0535                             ; de' = buffer*
0535                             ; a, bc, de, hl destroyed
0535                DOTDEC0:      
0535   CB 7C                  BIT   7,h   
0537   28 0C                  JR   z,dotDec1   
0539   D9                     EXX      
053A   3E 2D                  LD   a,"-"   
053C   12                     LD   (de),a   
053D   13                     INC   de   
053E   D9                     EXX      
053F   AF                     XOR   a   
0540   95                     SUB   l   
0541   6F                     LD   l,a   
0542   9F                     SBC   a,a   
0543   94                     SUB   h   
0544   67                     LD   h,a   
0545                DOTDEC1:      
0545   0E 00                  LD   c,0   ; leading zeros flag = false
0547   11 F0 D8               LD   de,-10000   
054A   CD 65 05               CALL   dotDec2   
054D   11 18 FC               LD   de,-1000   
0550   CD 65 05               CALL   dotDec2   
0553   11 9C FF               LD   de,-100   
0556   CD 65 05               CALL   dotDec2   
0559   1E F6                  LD   e,-10   
055B   CD 65 05               CALL   dotDec2   
055E   0C                     INC   c   ; flag = true for at least digit
055F   1E FF                  LD   e,-1   
0561   CD 65 05               CALL   dotDec2   
0564   C9                     RET      
0565                DOTDEC2:      
0565   06 2F                  LD   b,"0"-1   
0567                DOTDEC3:      
0567   04                     INC   b   
0568   19                     ADD   hl,de   
0569   38 FC                  JR   c,dotDec3   
056B   ED 52                  SBC   hl,de   
056D   3E 30                  LD   a,"0"   
056F   B8                     CP   b   
0570   20 05                  JR   nz,dotDec4   
0572   AF                     XOR   a   
0573   B1                     OR   c   
0574   C8                     RET   z   
0575   18 01                  JR   dotDec5   
0577                DOTDEC4:      
0577   0C                     INC   c   
0578                DOTDEC5:      
0578   78                     LD   a,b   
0579   D9                     EXX      
057A   12                     LD   (de),a   
057B   13                     INC   de   
057C   D9                     EXX      
057D   C9                     RET      
057E                             ; buffer hex                    37
057E                             ; value --
057E                DOTHEX:      
057E   E1                     POP   hl   ; hl = value
057F   ED 5B EC 4D            LD   de,(vBufPtr)   
0583   3E 24                  LD   a,"$"   ; # prefix
0585   12                     LD   (de),a   
0586   13                     INC   de   ; string*++,
0587   3A E6 4D               LD   a,(vDataWidth)   
058A   3D                     DEC   a   
058B   28 04                  JR   z,dotHex0   
058D   7C                     LD   a,h   
058E   CD A0 05               CALL   dotHex1   
0591                DOTHEX0:      
0591   7D                     LD   a,l   
0592   CD A0 05               CALL   dotHex1   
0595   3E 20                  LD   a," "   ; append space to buffer
0597   12                     LD   (de),a   
0598   13                     INC   de   ; string*++,
0599   ED 53 EC 4D            LD   (vBufPtr),de   
059D   C3 3D 0B               JP   dotNext   
05A0                DOTHEX1:      
05A0   F5                     PUSH   af   
05A1   1F                     RRA      
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   CD A9 05               CALL   dotHex2   
05A8   F1                     POP   af   
05A9                DOTHEX2:      
05A9   E6 0F                  AND   0x0F   
05AB   C6 90                  ADD   a,0x90   
05AD   27                     DAA      
05AE   CE 40                  ADC   a,0x40   
05B0   27                     DAA      
05B1   12                     LD   (de),a   
05B2   13                     INC   de   ; string*++,
05B3   C9                     RET      
05B4                             ; /bs buffered string
05B4                             ; string* --
05B4                DOTSTRING_:      
05B4   E1                     POP   hl   ; hl = string*
05B5   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
05B9   18 03                  JR   dotString1   
05BB                DOTSTRING0:      
05BB   12                     LD   (de),a   ; a -> buffer*
05BC   13                     INC   de   ; string*++,
05BD   23                     INC   hl   
05BE                DOTSTRING1:      
05BE   7E                     LD   a,(hl)   ; a <- string*
05BF   B7                     OR   a   ; if NUL exit loop
05C0   20 F9                  JR   nz,dotString0   
05C2   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
05C6   C3 3D 0B               JP   dotNext   
05C9                             ; .c print char
05C9                             ; char --
05C9                DOTCHAR:      
05C9   E1                     POP   hl   ; a = char
05CA   7D                     LD   a,l   
05CB   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
05CF   12                     LD   (de),a   
05D0   13                     INC   de   
05D1   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
05D5   C3 3D 0B               JP   dotNext   
05D8                             ;********************** PAGE 5 END *********************************************
05D8                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 52 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 22 0E               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   39                     DB   lsb(command_b_)   
060D   04                     DB   lsb(command_nop_)   
060E   49                     DB   lsb(command_d_)   
060F   04                     DB   lsb(command_nop_)   
0610   53                     DB   lsb(command_f_)   
0611   04                     DB   lsb(command_nop_)   
0612   72                     DB   lsb(command_h_)   
0613   7C                     DB   lsb(command_i_)   
0614   04                     DB   lsb(command_nop_)   
0615   86                     DB   lsb(key_)   
0616   04                     DB   lsb(command_nop_)   
0617   8D                     DB   lsb(command_m_)   
0618   04                     DB   lsb(command_nop_)   
0619   97                     DB   lsb(output_)   
061A   9E                     DB   lsb(command_p_)   
061B   A5                     DB   lsb(command_q_)   
061C   AF                     DB   lsb(command_r_)   
061D   BF                     DB   lsb(command_s_)   
061E   D2                     DB   lsb(true_)   
061F   04                     DB   lsb(command_nop_)   
0620   E0                     DB   lsb(command_v_)   
0621   F3                     DB   lsb(command_w_)   
0622   D9                     DB   lsb(xor_)   
0623   04                     DB   lsb(command_nop_)   
0624   04                     DB   lsb(command_nop_)   
0625   FD                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   CD 4A 0E               CALL   xjumpTable   
0629   62                     DB   "b"   ; /ab absolute
062A   06 07                  DW   absolute   
062C   64                     DB   "d"   ; /ad address of
062D   63 0B                  DW   addrOf   
062F   69                     DB   "i"   ; /ad address of
0630   3C 08                  DW   arrayIter   
0632   73                     DB   "s"   ; /as array size
0633   6D 07                  DW   arraySize   
0635   00                     DB   NUL   
0636   C3 40 07               JP   error1   
0639                COMMAND_B_:      
0639   CD 4A 0E               CALL   xjumpTable   
063C   62                     DB   "b"   ; /bb bye bye cold boot
063D   FF 0E                  DW   coldStart   
063F   6D                     DB   "m"   ; /bm byte mode
0640   5B 07                  DW   byteMode   
0642   72                     DB   "r"   ; /br break from loop
0643   13 07                  DW   break   
0645   00                     DB   NUL   
0646   C3 5B 07               JP   byteMode   ; /b byte mode
0649                COMMAND_D_:      
0649   CD 4A 0E               CALL   xjumpTable   
064C   62                     DB   "b"   ; /db decimal base
064D   38 07                  DW   decBase   
064F   00                     DB   NUL   
0650   C3 38 07               JP   decBase   ; /d decimal
0653                COMMAND_F_:      
0653   CD 4A 0E               CALL   xjumpTable   
0656   64                     DB   "d"   ; /fd fold
0657   E3 09                  DW   fold   
0659   65                     DB   "e"   ; /fe forEach
065A   35 0A                  DW   forEach   
065C   73                     DB   "s"   ; /fs funcSrc
065D   81 0A                  DW   funcSrc   
065F   74                     DB   "t"   ; /ft filter
0660   85 09                  DW   filter   
0662   31                     DB   "1"   
0663   FC 0F                  DW   f1   
0665   32                     DB   "2"   
0666   44 10                  DW   f2   
0668   33                     DB   "3"   
0669   50 10                  DW   f3   
066B   34                     DB   "4"   
066C   5C 10                  DW   f4   
066E   00                     DB   NUL   
066F   C3 A2 03               JP   false1   
0672                COMMAND_H_:      
0672   CD 4A 0E               CALL   xjumpTable   
0675   62                     DB   "b"   ; /hb hex base
0676   46 07                  DW   hexBase   
0678   00                     DB   NUL   
0679   C3 46 07               JP   hexBase   ; /h hex base
067C                             ; 6
067C                COMMAND_I_:      
067C   CD 4A 0E               CALL   xjumpTable   
067F   6E                     DB   "n"   ; /in input
0680   2D 07                  DW   input   
0682   00                     DB   NUL   
0683   C3 40 07               JP   error1   
0686                KEY_:        
0686   CD 4A 0E               CALL   xjumpTable   
0689   00                     DB   NUL   
068A   C3 80 07               JP   key   
068D                COMMAND_M_:      
068D   CD 4A 0E               CALL   xjumpTable   
0690   70                     DB   "p"   ; /mp map
0691   43 09                  DW   map   
0693   00                     DB   NUL   
0694   C3 40 07               JP   error1   
0697                OUTPUT_:      
0697   CD 4A 0E               CALL   xjumpTable   
069A   00                     DB   NUL   
069B   C3 89 07               JP   output   
069E                             ; 4
069E                COMMAND_P_:      
069E   CD 4A 0E               CALL   xjumpTable   
06A1   00                     DB   NUL   
06A2   C3 40 07               JP   error1   
06A5                             ; 6
06A5                COMMAND_Q_:      
06A5   CD 4A 0E               CALL   xjumpTable   
06A8   74                     DB   "t"   ; /qt quit
06A9   63 07                  DW   quit   
06AB   00                     DB   NUL   
06AC   C3 40 07               JP   error1   
06AF                COMMAND_R_:      
06AF   CD 4A 0E               CALL   xjumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   92 07                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   98 07                  DW   remain   
06B8   67                     DB   "g"   ; /rg range src
06B9   C0 07                  DW   rangeSrc   
06BB   00                     DB   NUL   
06BC   C3 40 07               JP   error1   
06BF                COMMAND_S_:      
06BF   CD 4A 0E               CALL   xjumpTable   
06C2   62                     DB   "b"   
06C3   04 0B                  DW   stringBegin   
06C5   65                     DB   "e"   
06C6   0C 0B                  DW   stringEnd   
06C8   69                     DB   "i"   
06C9   BD 08                  DW   stringIter   
06CB   73                     DB   "s"   
06CC   3B 0B                  DW   stringSize   
06CE   00                     DB   NUL   
06CF   C3 40 07               JP   error1   
06D2                TRUE_:       
06D2   CD 4A 0E               CALL   xjumpTable   
06D5   00                     DB   NUL   
06D6   C3 9C 03               JP   true1   
06D9                XOR_:        
06D9   CD 4A 0E               CALL   xjumpTable   
06DC   00                     DB   NUL   
06DD   C3 75 07               JP   xor   
06E0                COMMAND_V_:      
06E0   CD 4A 0E               CALL   xjumpTable   
06E3   68                     DB   "h"   
06E4   A8 07                  DW   varHeapPtr   
06E6   74                     DB   "t"   
06E7   B1 07                  DW   varTIBPtr   
06E9   48                     DB   "H"   
06EA   9E 07                  DW   constHeapStart   
06EC   54                     DB   "T"   
06ED   A3 07                  DW   constTIBStart   
06EF   00                     DB   NUL   
06F0   C3 40 07               JP   error1   
06F3                COMMAND_W_:      
06F3   CD 4A 0E               CALL   xjumpTable   
06F6   6D                     DB   "m"   ; /wm word mode
06F7   4C 07                  DW   wordMode   
06F9   00                     DB   NUL   
06FA   C3 4C 07               JP   wordMode   ; /w word mode
06FD                             ; 3
06FD                COMMAND_DEFAULT_:      
06FD   CD 4A 0E               CALL   xjumpTable   
0700   00                     DB   NUL   
0701   C3 22 04               JP   div   
0704                             ; 2
0704                COMMAND_NOP_:      
0704   DD E9                  JP   (ix)   
0706                             ; 14
0706                             ; /ab absolute
0706                             ; num -- num
0706                ABSOLUTE:      
0706   E1                     POP   hl   
0707   CB 7C                  BIT   7,h   
0709   C8                     RET   z   
070A   AF                     XOR   a   
070B   95                     SUB   l   
070C   6F                     LD   l,a   
070D   9F                     SBC   a,a   
070E   94                     SUB   h   
070F   67                     LD   h,a   
0710   E5                     PUSH   hl   
0711   DD E9                  JP   (ix)   
0713                             ; 8
0713                             ; 13
0713                             ; /br break from loop
0713                             ; --
0713                BREAK:       
0713   E1                     POP   hl   ; hl = condition, break if false
0714   7D                     LD   a,l   
0715   B4                     OR   h   
0716   28 02                  JR   z,break1   
0718   DD E9                  JP   (ix)   
071A                BREAK1:      
071A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
071C   FD 54                  LD   d,iyh   
071E   21 08 00               LD   hl,8   
0721   19                     ADD   hl,de   
0722   23                     INC   hl   
0723   23                     INC   hl   
0724   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0727   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
072A   C3 D4 0B               JP   blockEnd   
072D                             ; 11
072D                             ; Z80 port input
072D                             ; port -- value
072D                INPUT:       
072D   E1                     POP   hl   
072E   59                     LD   e,c   ; save IP
072F   4D                     LD   c,l   
0730   ED 68                  IN   l,(c)   
0732   26 00                  LD   h,0   
0734   4B                     LD   c,e   ; restore IP
0735   E5                     PUSH   hl   
0736   DD E9                  JP   (ix)   
0738                             ; 5
0738                DECBASE:      
0738   21 0A 00               LD   hl,10   
073B                DECBASE1:      
073B   22 E8 4D               LD   (vNumBase),hl   
073E   DD E9                  JP   (ix)   
0740                             ; 3
0740                ERROR1:      
0740   21 01 00               LD   hl,1   ; error 1: unknown command
0743   C3 B3 0F               JP   error   
0746                             ; 3
0746                HEXBASE:      
0746   21 10 00               LD   hl,16   
0749   C3 3B 07               JP   decBase1   
074C                             ; 4
074C                             ; /w
074C                WORDMODE:      
074C   21 02 00               LD   hl,2   
074F   C3 5E 07               JP   byteMode1   
0752                             ; 8
0752                             ; //
0752                COMMENT:      
0752   03                     INC   bc   ; point to next char
0753   0A                     LD   a,(bc)   
0754   FE 20                  CP   " "   ; terminate on any char less than SP
0756   30 FA                  JR   nc,comment   
0758   0B                     DEC   bc   
0759   DD E9                  JP   (ix)   
075B                             ; 6
075B                             ; /b
075B                BYTEMODE:      
075B   21 01 00               LD   hl,1   
075E                BYTEMODE1:      
075E   22 E6 4D               LD   (vDataWidth),hl   
0761   DD E9                  JP   (ix)   
0763                             ; 10
0763                             ; /qt
0763                             ; bool --
0763                QUIT:        
0763   E1                     POP   hl   ; hl = condition, exit if true
0764   7D                     LD   a,l   
0765   B4                     OR   h   
0766   20 02                  JR   nz,quit1   
0768   DD E9                  JP   (ix)   
076A                QUIT1:       
076A   C3 D4 0B               JP   blockEnd   
076D                             ; 10
076D                             ; /as size of an array, num elements, ignores vDataWidth :-/
076D                             ; array* -- num
076D                ARRAYSIZE:      
076D   E1                     POP   hl   
076E   2B                     DEC   hl   ; msb size
076F   56                     LD   d,(hl)   
0770   2B                     DEC   hl   ; lsb size
0771   5E                     LD   e,(hl)   
0772   D5                     PUSH   de   
0773   DD E9                  JP   (ix)   
0775                             ; 12
0775                XOR:         
0775   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0776                XOR1:        
0776   E1                     POP   hl   
0777   7B                     LD   a,e   
0778   AD                     XOR   l   
0779   6F                     LD   l,a   
077A   7A                     LD   a,d   
077B   AC                     XOR   h   
077C   67                     LD   h,a   
077D   E5                     PUSH   hl   
077E   DD E9                  JP   (ix)   
0780                             ; 2
0780                             ; key:
0780                             ;     jr key
0780                             ; /k                              6
0780                KEY:         
0780   CD 81 00               CALL   getchar   
0783   26 00                  LD   h,0   
0785   6F                     LD   l,a   
0786   E5                     PUSH   hl   
0787   DD E9                  JP   (ix)   
0789                             ;********************** PAGE 6 END *********************************************
0789                             ;********************** PAGE 7 BEGIN *********************************************
0789                             ; /o Z80 port output               9
0789                             ; value port --
0789                OUTPUT:      
0789   E1                     POP   hl   
078A   59                     LD   e,c   ; save IP
078B   4D                     LD   c,l   
078C   E1                     POP   hl   
078D   ED 69                  OUT   (c),l   
078F   4B                     LD   c,e   ; restore IP
0790   DD E9                  JP   (ix)   
0792                RECUR:       
0792   E1                     POP   hl   
0793   22 F2 4D               LD   (vRecur),hl   
0796   DD E9                  JP   (ix)   
0798                REMAIN:      
0798   2A FA 4D               LD   hl,(vRemain)   
079B   E5                     PUSH   hl   
079C   DD E9                  JP   (ix)   
079E                CONSTHEAPSTART:      
079E   11 22 4E               LD   de,HEAP   
07A1   18 1A                  JR   constant   
07A3                CONSTTIBSTART:      
07A3   11 00 4B               LD   de,TIB   
07A6   18 15                  JR   constant   
07A8                VARHEAPPTR:      
07A8   ED 5B F0 4D            LD   de,(vHeapPtr)   
07AC   21 F0 4D               LD   hl,vHeapPtr   
07AF   18 09                  JR   variable   
07B1                VARTIBPTR:      
07B1   ED 5B EA 4D            LD   de,(vTIBPtr)   
07B5   21 EA 4D               LD   hl,vTIBPtr   
07B8   18 00                  JR   variable   
07BA                VARIABLE:      
07BA   22 F8 4D               LD   (vPointer),hl   
07BD                CONSTANT:      
07BD   D5                     PUSH   de   
07BE   DD E9                  JP   (ix)   
07C0                             ;********************** PAGE 7 END *********************************************
07C0                             ;*******************************************************************
07C0                             ; Monty implementations
07C0                             ;*******************************************************************
07C0                             ; /rg rangeSrc
07C0                             ; begin end step -- src
07C0                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07C0                RANGESRC:      ; range source: begin, end, step, local: L
07C0   CD 41 0C               CALL   go   
07C3   00 00                  DW   NUL   
07C5   CF 07                  DW   rangeSrcM_1856S1404   
07C7   C9 07                  DW   $+2   
07C9   01                     DB   1   
07CA   04 62 65 73 4C         .PSTR   "besL"   
07CF                RANGESRCM_1856S1404:      
07CF   7B                     DB   "{"   
07D0   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07DB   5C 6B 74 7B            DB   "\\kt{"   
07DF   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07E7   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07ED   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07F5   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07FD   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0807   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
080F   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0816   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
082A   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0832   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0839   7D                     DB   "}"   
083A   7D                     DB   "}"   
083B   00                     DB   0   
083C                             ; /ai arrayIter
083C                             ; array* -- src
083C                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
083C                ARRAYITER:      
083C   CD 41 0C               CALL   go   
083F   00 00                  DW   NUL   
0841   49 08                  DW   arrayIterM_1875S1424   
0843   45 08                  DW   $+2   
0845   01                     DB   1   
0846   02 61 4C               .PSTR   "aL"   
0849                ARRAYITERM_1875S1424:      
0849   7B                     DB   "{"   
084A   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
085A   5C 6B 74 7B            DB   "\\kt{"   
085E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0866   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
086C   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0874   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
087C   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0883   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
088B   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0894   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08AB   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08B3   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08BA   7D                     DB   "}"   
08BB   7D                     DB   "}"   
08BC   00                     DB   0   
08BD                             ; /si stringIter
08BD                             ; string* -- src
08BD                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08BD                STRINGITER:      
08BD   CD 41 0C               CALL   go   
08C0   00 00                  DW   NUL   
08C2   CA 08                  DW   stringIterM_1894S1444   
08C4   C6 08                  DW   $+2   
08C6   01                     DB   1   
08C7   02 73 4C               .PSTR   "sL"   
08CA                STRINGITERM_1894S1444:      
08CA   7B                     DB   "{"   
08CB   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08D5   5C 6B 74 7B            DB   "\\kt{"   
08D9   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E1   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08E8   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08F0   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08F8   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08FF   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
090E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0916   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
091D   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0931   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0939   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0940   7D                     DB   "}"   
0941   7D                     DB   "}"   
0942   00                     DB   0   
0943                             ; /mp map
0943                             ; src func -- src1
0943                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0943                MAP:         ; map: source, function
0943   CD 41 0C               CALL   go   
0946   00 00                  DW   NUL   
0948   50 09                  DW   mapM_1914S1466   
094A   4C 09                  DW   $+2   
094C   00                     DB   0   
094D   02 73 66               .PSTR   "sf"   
0950                MAPM_1914S1466:      
0950   7B                     DB   "{"   
0951   5C 6B 74 7B            DB   "\\kt{"   
0955   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
095D   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0961   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0966   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0972   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
097B   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0982   7D                     DB   "}"   
0983   7D                     DB   "}"   
0984   00                     DB   0   
0985                             ; /ft filter
0985                             ; src pred -- src1
0985                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0985                FILTER:      ; filter: source, predicate, local: T
0985   CD 41 0C               CALL   go   
0988   00 00                  DW   NUL   
098A   93 09                  DW   filterM_1928S1481   
098C   8E 09                  DW   $+2   
098E   01                     DB   1   
098F   03 73 70 54            .PSTR   "spT"   
0993                FILTERM_1928S1481:      
0993   7B                     DB   "{"   
0994   5B 30 5D 25 54 3D      DB   "[0]%T="   
099A   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
099E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A2   5B                     DB   "["   
09A3   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09B0   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09B8   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09BC   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09C1   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09D7   3F 3F                  DB   "??"   
09D9   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E0   7D                     DB   "}"   
09E1   7D                     DB   "}"   
09E2   00                     DB   0   
09E3                             ; /fd fold
09E3                             ; reducer is a function like: \\da00bbLi4u
09E3                             ; src init reducer -- src1
09E3                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09E3                FOLD:        ; src, init, reducer
09E3   CD 41 0C               CALL   go   
09E6   00 00                  DW   NUL   
09E8   F2 09                  DW   foldM_1947S1501   
09EA   EC 09                  DW   $+2   
09EC   01                     DB   1   
09ED   04 73 69 72 41         .PSTR   "sirA"   
09F2                FOLDM_1947S1501:      
09F2   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09F3   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09FA   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09FE   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A02   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A07   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A22   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A2B   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A32   7D                     DB   "}"   
0A33   7D                     DB   "}"   
0A34   00                     DB   0   
0A35                             ; /fe forEach
0A35                             ; src proc --
0A35                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A35                FOREACH:      ; forEach: source, procedure, local: T
0A35   CD 41 0C               CALL   go   
0A38   00 00                  DW   NUL   
0A3A   43 0A                  DW   forEachM_1961S1516   
0A3C   3E 0A                  DW   $+2   
0A3E   01                     DB   1   
0A3F   03 73 70 54            .PSTR   "spT"   
0A43                FOREACHM_1961S1516:      
0A43   7B                     DB   "{"   
0A44   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A4A   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A4E   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A56   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A5B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A6D   3F 3F                  DB   "??"   ; ifte:
0A6F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A78   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A7F   7D                     DB   "}"   
0A80   00                     DB   0   
0A81                             ; ; /fs funcSrc
0A81                             ; ; func -- src
0A81                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A81                FUNCSRC:      ; :f func or block
0A81   CD 41 0C               CALL   go   
0A84   00 00                  DW   NUL   
0A86   8D 0A                  DW   funcSrcM_1975S1531   
0A88   8A 0A                  DW   $+2   
0A8A   00                     DB   0   
0A8B   01 66                  .PSTR   "f"   
0A8D                FUNCSRCM_1975S1531:      
0A8D   7B                     DB   "{"   
0A8E   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A92   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A9A   5C 64 74 7B            DB   "\\dt{"   
0A9E   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AB0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AB7   7D                     DB   "}"   
0AB8   7D                     DB   "}"   
0AB9   00                     DB   0   
0ABA                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0ABA                DOTARRAY:      
0ABA   CD 41 0C               CALL   go   
0ABD   00 00                  DW   NUL   
0ABF   C8 0A                  DW   dotArrayM_1985S1542   
0AC1   C3 0A                  DW   $+2   
0AC3   02                     DB   2   
0AC4   03 61 62 63            .PSTR   "abc"   
0AC8                DOTARRAYM_1985S1542:      
0AC8   7B                     DB   "{"   
0AC9   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0B00   7D                     DB   "}"   
0B01   00                     DB   0   
0B02                             ;*******************************************************************
0B02                             ; unused opcodes (reserved)
0B02                             ;*******************************************************************
0B02                UNDERSCORE:      
0B02                COMMA:       
0B02   DD E9                  JP   (ix)   
0B04                             ;*******************************************************************
0B04                             ; implementations
0B04                             ;*******************************************************************
0B04                STRINGBEGIN:      
0B04   21 FF FF               LD   hl,TRUE   ; string mode = true
0B07   22 F6 4D               LD   (vStrMode),hl   
0B0A   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0B0C                STRINGEND:      
0B0C   21 00 00               LD   hl,FALSE   ; string mode = false
0B0F   22 F6 4D               LD   (vStrMode),hl   
0B12   2A EC 4D               LD   hl,(vBufPtr)   ; append NUL to string
0B15   AF                     XOR   a   
0B16   77                     LD   (hl),a   
0B17   23                     INC   hl   ; hl = string_end*
0B18   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0B1C   11 00 4C               LD   de,BUFFER   ; de = string*
0B1F   B7                     OR   a   ; bc = size
0B20   ED 52                  SBC   hl,de   
0B22   44 4D                  LD   bc,hl   
0B24   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = hstring*
0B27   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0B28   D5                     PUSH   de   ; return hstring*
0B29   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0B2B   ED 53 F0 4D            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0B2F   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0B33                STRINGEND1:      
0B33   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr
0B36   22 EC 4D               LD   (vBufPtr),hl   
0B39   DD E9                  JP   (ix)   
0B3B                STRINGSIZE:      
0B3B   DD E9                  JP   (ix)   
0B3D                DOTNEXT:      
0B3D   3A F6 4D               LD   a,(vStrMode)   ; if string mode then exit
0B40   3C                     INC   a   
0B41   20 02                  JR   nz,dotNext1   
0B43   DD E9                  JP   (ix)   
0B45                DOTNEXT1:      
0B45   11 00 4C               LD   de,BUFFER   
0B48   2A EC 4D               LD   hl,(vBufPtr)   
0B4B   B7                     OR   a   ; hl = count, de = vHeapPtr
0B4C   ED 52                  SBC   hl,de   
0B4E   C3 57 0B               JP   dotNext3   
0B51                DOTNEXT2:      
0B51   1A                     LD   a,(de)   ; print char at char*
0B52   CD 85 00               CALL   putchar   
0B55   13                     INC   de   ; char*++
0B56   2B                     DEC   hl   ; count--
0B57                DOTNEXT3:      
0B57   7D                     LD   a,l   ; count == 0?
0B58   B4                     OR   h   
0B59   20 F6                  JR   nz,dotNext2   ; if not loop
0B5B   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B5E   22 EC 4D               LD   (vBufPtr),hl   
0B61   DD E9                  JP   (ix)   
0B63                             ; /ad addrOf                    24
0B63                             ; char -- addr
0B63                ADDROF:      
0B63   E1                     POP   hl   ; a = char
0B64   7D                     LD   a,l   
0B65   FE 7B                  CP   "z"+1   ; if a > z then exit
0B67   30 19                  JR   nc,addrOf2   
0B69   D6 41                  SUB   "A"   ; a - 65
0B6B   38 15                  JR   c,addrOf2   ; if < A then exit
0B6D   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B6F   38 06                  JR   c,addrOf1   
0B71   D6 06                  SUB   "a"-("Z"+1)   
0B73   FE 1A                  CP   "Z"-"A"+1   
0B75   38 0B                  JR   c,addrOf2   ; if < a then exit
0B77                ADDROF1:      
0B77   87                     ADD   a,a   ; double a
0B78   21 00 4D               LD   hl,VARS   ; hl = VARS + a
0B7B   85                     ADD   a,l   
0B7C   6F                     LD   l,a   
0B7D   3E 00                  LD   a,0   
0B7F   8C                     ADC   a,h   
0B80   67                     LD   h,a   
0B81   E5                     PUSH   hl   
0B82                ADDROF2:      
0B82   DD E9                  JP   (ix)   
0B84                             ;                               51
0B84                RBRACK:      
0B84                ARRAYEND:      
0B84   FD 54                  LD   d,iyh   ; de = BP
0B86   FD 5D                  LD   e,iyl   
0B88   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0B8C   62 6B                  LD   hl,de   ; hl = de = BP
0B8E   B7                     OR   a   
0B8F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B91   CB 3C                  SRL   h   ; 
0B93   CB 1D                  RR   l   
0B95   44 4D                  LD   bc,hl   ; bc = count
0B97   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B9A   71                     LD   (hl),c   ; write num items in length word
0B9B   23                     INC   hl   
0B9C   70                     LD   (hl),b   
0B9D   23                     INC   hl   ; hl = array[0], bc = count
0B9E                             ; de = BP, hl = array[0], bc = count
0B9E   18 15                  JR   arrayEnd3   
0BA0                ARRAYEND1:      
0BA0   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0BA3   77                     LD   (hl),a   ; write lsb of array item
0BA4   23                     INC   hl   ; move to msb of array item
0BA5   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0BA8   3D                     DEC   a   
0BA9   28 05                  JR   z,arrayEnd2   
0BAB   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0BAE   77                     LD   (hl),a   ; write msb of array item
0BAF   23                     INC   hl   ; move to next word in array
0BB0                ARRAYEND2:      
0BB0   FD 2B                  DEC   iy   ; move to next word on stack
0BB2   FD 2B                  DEC   iy   
0BB4   0B                     DEC   bc   ; dec items count
0BB5                ARRAYEND3:      
0BB5   79                     LD   a,c   ; if not zero loop
0BB6   B0                     OR   b   
0BB7   20 E7                  JR   nz,arrayEnd1   
0BB9   EB                     EX   de,hl   ; de = end of array, hl = BP
0BBA   F9                     LD   sp,hl   ; sp = BP
0BBB   E1                     POP   hl   ; de = end of array, hl = old BP
0BBC   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0BBD   FD 62                  LD   iyh,d   
0BBF   FD 6B                  LD   iyl,e   
0BC1   D1                     POP   de   ; pop arg_list (discard)
0BC2   D1                     POP   de   ; pop first_arg* (discard)
0BC3   D1                     POP   de   ; pop IP (discard)
0BC4   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
0BC8   13                     INC   de   
0BC9   13                     INC   de   
0BCA   D5                     PUSH   de   ; return array[0]
0BCB   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
0BCE   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0BD2   DD E9                  JP   (ix)   
0BD4                             ;                               58
0BD4                RBRACE:      
0BD4                BLOCKEND:      
0BD4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BD7   FD 56 01               LD   d,(iy+1)   
0BDA   ED 53 04 4E            LD   (vTemp1),de   
0BDE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BE1   FD 56 07               LD   d,(iy+7)   
0BE4   ED 53 06 4E            LD   (vTemp2),de   
0BE8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BEB   FD 56 03               LD   d,(iy+3)   
0BEE   EB                     EX   de,hl   
0BEF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BF2   FD 56 01               LD   d,(iy+1)   
0BF5   13                     INC   de   ; for carry flag <=
0BF6   B7                     OR   a   
0BF7   ED 52                  SBC   hl,de   
0BF9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BFB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BFD   FD 5D                  LD   e,iyl   
0BFF   21 08 00               LD   hl,8   
0C02   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C03   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C04   18 0C                  JR   blockEnd2   
0C06                BLOCKEND1:      ; same scope
0C06   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C09   FD 56 03               LD   d,(iy+3)   
0C0C   EB                     EX   de,hl   
0C0D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C0F   FD 5D                  LD   e,iyl   
0C11   EB                     EX   de,hl   
0C12                BLOCKEND2:      
0C12   44 4D                  LD   bc,hl   ; bc = hl = BP
0C14   B7                     OR   a   ; hl = BP - SP = count
0C15   ED 72                  SBC   hl,sp   
0C17   7D                     LD   a,l   
0C18   B4                     OR   h   
0C19   28 09                  JR   z,blockEnd3   
0C1B   C5                     PUSH   bc   ; bc = count, hl = BP
0C1C   44 4D                  LD   bc,hl   
0C1E   E1                     POP   hl   
0C1F   2B                     DEC   hl   ; hl = BP-1
0C20   1B                     DEC   de   ; de = args*-1
0C21   ED B8                  LDDR      
0C23   13                     INC   de   
0C24                BLOCKEND3:      
0C24   EB                     EX   de,hl   ; sp = de = new tos*
0C25   F9                     LD   sp,hl   
0C26   ED 4B 06 4E            LD   bc,(vTemp2)   
0C2A   FD 2A 04 4E            LD   iy,(vTemp1)   
0C2E   ED 5B F2 4D            LD   de,(vRecur)   ; de = recur vector
0C32   7B                     LD   a,e   ; check for NUL
0C33   B2                     OR   d   
0C34   20 02                  JR   nz,blockEnd4   
0C36   DD E9                  JP   (ix)   
0C38                BLOCKEND4:      
0C38   21 00 00               LD   hl,0   ; clear recur vector
0C3B   22 F2 4D               LD   (vRecur),hl   
0C3E   C3 42 0C               JP   go1   ; execute de
0C41                             ; execute a block of code which ends with } 116
0C41                             ; creates a root scope if BP == stack
0C41                             ; else uses outer scope
0C41                CARET:       
0C41                GO:          
0C41   D1                     POP   de   ; de = block*
0C42                GO1:         
0C42   7B                     LD   a,e   ; if block* == null, exit
0C43   B2                     OR   d   
0C44   20 02                  JR   nz,go2   
0C46   DD E9                  JP   (ix)   
0C48                GO2:         
0C48   1A                     LD   a,(de)   
0C49   FE 7B                  CP   "{"   
0C4B   28 06                  JR   z,goBlock   
0C4D   FE 28                  CP   "("   
0C4F   C2 86 0C               JP   nz,goFunc   
0C52   D5                     PUSH   de   ; push de just before stack frame
0C53                GOBLOCK:      
0C53   ED 53 04 4E            LD   (vTemp1),de   ; save de
0C57   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C5A   FD 54                  LD   d,iyh   
0C5C   FD 5D                  LD   e,iyl   
0C5E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C5F   ED 52                  SBC   hl,de   
0C61   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de
0C65   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C66   B4                     OR   h   
0C67   3E 00                  LD   a,0   
0C69   28 6A                  JR   z,goFunc8   
0C6B   C5                     PUSH   bc   ; push IP
0C6C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C6F   FD 46 05               LD   b,(iy+5)   
0C72   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C75   FD 66 03               LD   h,(iy+3)   
0C78                GOBLOCK2:      
0C78   C5                     PUSH   bc   ; arg_list*
0C79   E5                     PUSH   hl   ; first_arg*
0C7A   FD E5                  PUSH   iy   ; push BP
0C7C   FD 21 00 00            LD   iy,0   ; BP = SP
0C80   FD 39                  ADD   iy,sp   
0C82                GOBLOCK3:      
0C82   42 4B                  LD   bc,de   ; bc = de = block*-1
0C84   DD E9                  JP   (ix)   
0C86                GOFUNC:      ; execute func
0C86   EB                     EX   de,hl   ; hl = func*
0C87   5E                     LD   e,(hl)   ; de = partial_array*
0C88   23                     INC   hl   
0C89   56                     LD   d,(hl)   
0C8A   23                     INC   hl   
0C8B   7B                     LD   a,e   ; if partial_array* == null skip
0C8C   B2                     OR   d   
0C8D   28 21                  JR   z,goFunc3   
0C8F   ED 43 04 4E            LD   (vTemp1),bc   
0C93   22 06 4E               LD   (vTemp2),hl   ; save bc,hl
0C96   EB                     EX   de,hl   ; hl = partial_array*
0C97   2B                     DEC   hl   ; bc = count
0C98   46                     LD   b,(hl)   
0C99   2B                     DEC   hl   
0C9A   4E                     LD   c,(hl)   
0C9B   23                     INC   hl   ; hl = array data*
0C9C   23                     INC   hl   
0C9D   18 06                  JR   goFunc2   ; push each item on stack
0C9F                GOFUNC1:      
0C9F   5E                     LD   e,(hl)   ; de = partial item
0CA0   23                     INC   hl   
0CA1   56                     LD   d,(hl)   
0CA2   23                     INC   hl   
0CA3   D5                     PUSH   de   ; push on stack
0CA4   0B                     DEC   bc   
0CA5                GOFUNC2:      
0CA5   79                     LD   a,c   ; if count != 0 then loop
0CA6   B0                     OR   b   
0CA7   20 F6                  JR   nz,goFunc1   
0CA9   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore bc
0CAD   2A 06 4E               LD   hl,(vTemp2)   ; restore hl
0CB0                GOFUNC3:      
0CB0   5E                     LD   e,(hl)   ; de = block*
0CB1   23                     INC   hl   
0CB2   56                     LD   d,(hl)   
0CB3   23                     INC   hl   
0CB4   ED 53 04 4E            LD   (vTemp1),de   ; save block*
0CB8   5E                     LD   e,(hl)   ; de = arg_list*
0CB9   23                     INC   hl   
0CBA   56                     LD   d,(hl)   
0CBB   23                     INC   hl   
0CBC   EB                     EX   de,hl   ; hl = arg_list*
0CBD   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de = block*
0CC1   7D                     LD   a,l   ; if arg_list* == null a = 0
0CC2   B4                     OR   h   
0CC3   20 03                  JR   nz,goFunc4   
0CC5   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CC6   18 0D                  JR   goFunc8   
0CC8                GOFUNC4:      ; allocate locals
0CC8   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0CC9   18 03                  JR   goFunc6   
0CCB                GOFUNC5:      ; loop
0CCB   3B                     DEC   sp   
0CCC   3B                     DEC   sp   
0CCD   3D                     DEC   a   
0CCE                GOFUNC6:      
0CCE   B7                     OR   a   
0CCF   20 FA                  JR   nz,goFunc5   ; end loop
0CD1                GOFUNC7:      
0CD1   23                     INC   hl   ; a = num_args* x 2
0CD2   7E                     LD   a,(hl)   
0CD3   2B                     DEC   hl   
0CD4   87                     ADD   a,a   ; a *= 2
0CD5                GOFUNC8:      
0CD5   C5                     PUSH   bc   ; push IP
0CD6   44 4D                  LD   bc,hl   
0CD8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CDB   85                     ADD   a,l   
0CDC   6F                     LD   l,a   
0CDD   39                     ADD   hl,sp   
0CDE   18 98                  JR   goBlock2   
0CE0                             ; 
0CE0                             ;*******************************************************************
0CE0                             ; general routines
0CE0                             ;*******************************************************************
0CE0                             ; arg_list - parses arg_list e.g. ab:c
0CE0                             ; -- arg_list*
0CE0                PARSEARGS:      
0CE0   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CE3   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0CE6   E5                     PUSH   hl   ; save start of arg_list
0CE7   23                     INC   hl   ; skip length fields to start of string
0CE8   23                     INC   hl   
0CE9   03                     INC   bc   ; point to next char
0CEA                PARSEARGS1:      
0CEA   0A                     LD   a,(bc)   
0CEB   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CED   20 03                  JR   nz,parseArgs1a   
0CEF   14                     INC   d   ; non zero value local count acts as flag
0CF0   18 10                  JR   parseArgs3   
0CF2                PARSEARGS1A:      
0CF2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CF4   38 0F                  JR   c,parseArgs4   
0CF6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CF8   30 0B                  JR   nc,parseArgs4   
0CFA                PARSEARGS2:      
0CFA   77                     LD   (hl),a   
0CFB   23                     INC   hl   
0CFC   1C                     INC   e   ; increase arg count
0CFD   AF                     XOR   a   
0CFE   B2                     OR   d   
0CFF   28 01                  JR   z,parseArgs3   
0D01   14                     INC   d   ; if d > 0 increase local count
0D02                PARSEARGS3:      
0D02   03                     INC   bc   ; point to next char
0D03   18 E5                  JR   parseArgs1   
0D05                PARSEARGS4:      
0D05   0B                     DEC   bc   
0D06   AF                     XOR   a   
0D07   B2                     OR   d   
0D08   28 01                  JR   z,parseArgs5   
0D0A   15                     DEC   d   ; remove initial inc
0D0B                PARSEARGS5:      
0D0B   23                     INC   hl   
0D0C   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D0F   E1                     POP   hl   ; hl = start of arg_list
0D10   72                     LD   (hl),d   ; write number of locals at start - 1
0D11   23                     INC   hl   
0D12   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D13   2B                     DEC   hl   
0D14   E3                     EX   (sp),hl   
0D15   E9                     JP   (hl)   
0D16                             ; create block: parses block e.g. 00bbIC4uLi4g
0D16                             ; -- block*
0D16                PARSEBLOCK:      
0D16   C5                     PUSH   bc   ; return pointer to first { of block
0D17   03                     INC   bc   
0D18   16 01                  LD   d,1   ; nesting: count first parenthesis
0D1A                PARSEBLOCK1:      ; Skip to end of definition
0D1A   0A                     LD   a,(bc)   ; Get the next character
0D1B   03                     INC   bc   ; Point to next character
0D1C   FE 21                  CP   " " + 1   ; ignore whitespace
0D1E   38 FA                  JR   c,parseBlock1   
0D20   FE 29                  CP   ")"   
0D22   28 2D                  JR   z,parseBlock4   
0D24   FE 7D                  CP   "}"   
0D26   28 29                  JR   z,parseBlock4   
0D28   FE 5D                  CP   "]"   
0D2A   28 25                  JR   z,parseBlock4   
0D2C   FE 28                  CP   "("   
0D2E   28 16                  JR   z,parseBlock2   
0D30   FE 7B                  CP   "{"   
0D32   28 12                  JR   z,parseBlock2   
0D34   FE 5B                  CP   "["   
0D36   28 0E                  JR   z,parseBlock2   
0D38   FE 27                  CP   "'"   
0D3A   28 0D                  JR   z,parseBlock3   
0D3C   FE 60                  CP   "`"   
0D3E   28 09                  JR   z,parseBlock3   
0D40   FE 22                  CP   DQ   
0D42   28 05                  JR   z,parseBlock3   
0D44   18 D4                  JR   parseBlock1   
0D46                PARSEBLOCK2:      
0D46   14                     INC   d   
0D47   18 D1                  JR   parseBlock1   
0D49                PARSEBLOCK3:      
0D49   3E 80                  LD   a,$80   
0D4B   AA                     XOR   d   
0D4C   57                     LD   d,a   
0D4D   20 CB                  JR   nz,parseBlock1   
0D4F   18 03                  JR   parseBlock5   
0D51                PARSEBLOCK4:      
0D51   15                     DEC   d   
0D52   20 C6                  JR   nz,parseBlock1   ; get the next element
0D54                PARSEBLOCK5:      
0D54   60 69                  LD   hl,bc   ; hl = IP
0D56   11 22 4E               LD   de,HEAP   ; is IP pointing to object in heap
0D59   B7                     OR   a   ; IP - HEAP
0D5A   ED 52                  SBC   hl,de   
0D5C   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D5E   28 1C                  JR   z,parseBlock6   
0D60   60 69                  LD   hl,bc   ; hl = IP
0D62   D1                     POP   de   ; de = block*
0D63   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D67   B7                     OR   a   ; bc = size
0D68   ED 52                  SBC   hl,de   
0D6A   44 4D                  LD   bc,hl   
0D6C   EB                     EX   de,hl   ; hl = block* de = heap*
0D6D   ED 5B F0 4D            LD   de,(vHeapPtr)   
0D71   D5                     PUSH   de   ; return hblock*
0D72   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D74   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0D78   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0D7C                PARSEBLOCK6:      
0D7C   0B                     DEC   bc   ; balanced, exit
0D7D   E1                     POP   hl   ; hl = block*
0D7E   E3                     EX   (sp),hl   ; return to caller
0D7F   E9                     JP   (hl)   
0D80                             ; create function
0D80                             ; arg_list* block* -- func*
0D80                CREATEFUNC:      
0D80   E1                     POP   hl   ; save retrn address
0D81   22 08 4E               LD   (vTemp3),hl   
0D84   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D88   E1                     POP   hl   ; hl = block*
0D89   22 06 4E               LD   (vTemp2),hl   ; save block*
0D8C   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D8F   FD 56 05               LD   d,(iy+5)   
0D92   7B                     LD   a,e   ; if arg_list == null then make a func
0D93   B2                     OR   d   
0D94   20 09                  JR   nz,createFunc0   
0D96   21 00 00               LD   hl,0   ; partial_array = null
0D99   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0D9D   18 65                  JR   createFunc5   
0D9F                CREATEFUNC0:      
0D9F   E1                     POP   hl   ; hl = inner_arg_list*
0DA0   E5                     PUSH   hl   ; save inner_arg_list
0DA1   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0DA5   7E                     LD   a,(hl)   ; compile inner_num_locals
0DA6   4F                     LD   c,a   ; b = inner_num_locals
0DA7   12                     LD   (de),a   
0DA8   23                     INC   hl   
0DA9   13                     INC   de   
0DAA   7E                     LD   a,(hl)   ; compile inner_length
0DAB   12                     LD   (de),a   
0DAC   91                     SUB   c   ; a = inner_num args
0DAD   23                     INC   hl   
0DAE   13                     INC   de   
0DAF   B7                     OR   a   ; compile args if inner_length > 0
0DB0   28 05                  JR   z,createFunc1   
0DB2   4F                     LD   c,a   ; bc = a
0DB3   06 00                  LD   b,0   
0DB5   ED B0                  LDIR      
0DB7                CREATEFUNC1:      
0DB7   EB                     EX   de,hl   ; hl = outer_arg_list
0DB8   FD 5E 04               LD   e,(iy+4)   
0DBB   FD 56 05               LD   d,(iy+5)   
0DBE   EB                     EX   de,hl   
0DBF   23                     INC   hl   ; a = outer_length
0DC0   7E                     LD   a,(hl)   
0DC1   23                     INC   hl   
0DC2   B7                     OR   a   
0DC3   28 05                  JR   z,createFunc2   
0DC5   4F                     LD   c,a   
0DC6   06 00                  LD   b,0   
0DC8   ED B0                  LDIR      ; append outer_args
0DCA                CREATEFUNC2:      ; a = outer_length
0DCA   47                     LD   b,a   ; b = a = outer_length
0DCB   2A F0 4D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DCE   23                     INC   hl   
0DCF   7E                     LD   a,(hl)   ; add outer_length to new length
0DD0   80                     ADD   a,b   
0DD1   77                     LD   (hl),a   
0DD2   2B                     DEC   hl   
0DD3   78                     LD   a,b   ; save outer_length in a'
0DD4   08                     EX   af,af'   
0DD5   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DD6   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DD7   B7                     OR   a   
0DD8   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DDA   4F                     LD   c,a   ; c = inner_num_locals
0DDB   06 00                  LD   b,0   ; bc = inner_num_locals
0DDD   23                     INC   hl   ; a = inner_length
0DDE   7E                     LD   a,(hl)   
0DDF   91                     SUB   c   ; a = inner_num_args
0DE0   23                     INC   hl   ; hl = inner_arg_chars
0DE1   85                     ADD   a,l   ; hl += a
0DE2   6F                     LD   l,a   
0DE3   3E 00                  LD   a,0   
0DE5   84                     ADD   a,h   
0DE6   67                     LD   h,a   
0DE7   ED B0                  LDIR      ; append inner_locals
0DE9                CREATEFUNC2A:      
0DE9   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DEA   12                     LD   (de),a   ; compile partial_array length field
0DEB   13                     INC   de   
0DEC   AF                     XOR   a   
0DED   12                     LD   (de),a   
0DEE   13                     INC   de   
0DEF   D5                     PUSH   de   ; push partial_array*
0DF0   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DF1   FD 5E 02               LD   e,(iy+2)   
0DF4   FD 56 03               LD   d,(iy+3)   
0DF7   EB                     EX   de,hl   
0DF8                CREATEFUNC3:      
0DF8   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DF9   4E                     LD   c,(hl)   
0DFA   2B                     DEC   hl   
0DFB   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DFC   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DFD   13                     INC   de   
0DFE   79                     LD   a,c   
0DFF   12                     LD   (de),a   
0E00   13                     INC   de   
0E01   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E03                CREATEFUNC4:      
0E03   E1                     POP   hl   ; hl = partial_array*
0E04                CREATEFUNC5:      
0E04   C1                     POP   bc   ; bc = new_arg_list*
0E05   D5                     PUSH   de   ; return new func*
0E06   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E07   73                     LD   (hl),e   ; compile partial_array* to func
0E08   23                     INC   hl   
0E09   72                     LD   (hl),d   
0E0A   23                     INC   hl   
0E0B   ED 5B 06 4E            LD   de,(vTemp2)   ; de = block*
0E0F   73                     LD   (hl),e   ; compile block* to func
0E10   23                     INC   hl   
0E11   72                     LD   (hl),d   
0E12   23                     INC   hl   
0E13   71                     LD   (hl),c   ; compile new_arg_list* to func
0E14   23                     INC   hl   
0E15   70                     LD   (hl),b   
0E16   23                     INC   hl   
0E17   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap ptr
0E1A   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0E1E   2A 08 4E               LD   hl,(vTemp3)   ; jump to return address
0E21   E9                     JP   (hl)   
0E22                             ; ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0E22                             ; flushBuffer:
0E22                             ;     push af
0E22                             ;     push de
0E22                             ;     push hl
0E22                             ;     ld hl,(vBufPtr)
0E22                             ;     ld de,BUF
0E22                             ;     ld (vBufPtr),de
0E22                             ;     or a
0E22                             ;     sbc hl,de
0E22                             ;     call printChars2
0E22                             ;     pop hl
0E22                             ;     pop de
0E22                             ;     pop af
0E22                             ;     ret
0E22                             ; printChars1:
0E22                             ;     ld a,(de)                           ; print char at char*
0E22                             ;     call putchar
0E22                             ;     inc de                              ; char*++
0E22                             ;     dec hl                              ; count--
0E22                             ; printChars2:
0E22                             ;     ld a,l                              ; count == 0?
0E22                             ;     or h
0E22                             ;     ret z
0E22                             ;     jr printChars1                      ; if not loop
0E22                COMMANDTABLE:      
0E22   03                     INC   bc   
0E23   0A                     LD   a,(bc)   
0E24   FE 7B                  CP   "z"+1   
0E26   30 09                  JR   nc,commandTable2   
0E28   D6 61                  SUB   "a"   
0E2A   38 05                  JR   c,commandTable2   
0E2C                COMMANDTABLE1:      
0E2C   E1                     POP   hl   
0E2D   85                     ADD   a,l   
0E2E   6F                     LD   l,a   
0E2F   6E                     LD   l,(hl)   ; must have the same msb as the table
0E30   E9                     JP   (hl)   
0E31                COMMANDTABLE2:      
0E31   3E 1A                  LD   a,26   
0E33   0B                     DEC   bc   
0E34   18 F6                  JR   commandTable1   
0E36                             ; followed by a table
0E36                             ; db char
0E36                             ; db lsb(addr)
0E36                             ; the final item must have char == NUL
0E36                JUMPTABLE:      
0E36   E1                     POP   hl   
0E37   03                     INC   bc   
0E38                JUMPTABLE0:      
0E38   AF                     XOR   a   
0E39   BE                     CP   (hl)   
0E3A   28 0B                  JR   z,jumpTable2   
0E3C   0A                     LD   a,(bc)   
0E3D   BE                     CP   (hl)   
0E3E   28 04                  JR   z,jumpTable1   
0E40   23                     INC   hl   
0E41   23                     INC   hl   
0E42   18 F4                  JR   jumpTable0   
0E44                JUMPTABLE1:      
0E44   23                     INC   hl   
0E45   6E                     LD   l,(hl)   ; must have the same msb as the table
0E46   E9                     JP   (hl)   
0E47                JUMPTABLE2:      
0E47   0B                     DEC   bc   
0E48   23                     INC   hl   
0E49   E9                     JP   (hl)   
0E4A                             ; followed by a table
0E4A                             ; db char
0E4A                             ; db lsb(addr)
0E4A                             ; the final item must have char == NUL
0E4A                XJUMPTABLE:      
0E4A   E1                     POP   hl   
0E4B   03                     INC   bc   
0E4C                XJUMPTABLE0:      
0E4C   AF                     XOR   a   
0E4D   BE                     CP   (hl)   
0E4E   28 0F                  JR   z,xjumpTable2   
0E50   0A                     LD   a,(bc)   
0E51   BE                     CP   (hl)   
0E52   28 05                  JR   z,xjumpTable1   
0E54   23                     INC   hl   
0E55   23                     INC   hl   
0E56   23                     INC   hl   
0E57   18 F3                  JR   xjumpTable0   
0E59                XJUMPTABLE1:      
0E59   23                     INC   hl   
0E5A   5E                     LD   e,(hl)   
0E5B   23                     INC   hl   
0E5C   56                     LD   d,(hl)   
0E5D   EB                     EX   de,hl   
0E5E   E9                     JP   (hl)   
0E5F                XJUMPTABLE2:      
0E5F   0B                     DEC   bc   
0E60   23                     INC   hl   
0E61   E9                     JP   (hl)   
0E62                PRTSTR0:      
0E62   CD 85 00               CALL   putchar   
0E65   23                     INC   hl   
0E66                PRTSTR:      
0E66   7E                     LD   a,(hl)   
0E67   B7                     OR   a   
0E68   20 F8                  JR   nz,prtstr0   
0E6A   C9                     RET      
0E6B                             ; **************************************************************************
0E6B                             ; calculate nesting value
0E6B                             ; a is char to be tested,
0E6B                             ; e is the nesting value (initially 0)
0E6B                             ; e is increased by ( and [
0E6B                             ; e is decreased by ) and ]
0E6B                             ; e has its bit 7 toggled by `
0E6B                             ; limited to 127 levels
0E6B                             ; **************************************************************************
0E6B                NESTING:      
0E6B   FE 22                  CP   DQ   ; quote char
0E6D   28 06                  JR   z,nesting0   
0E6F   FE 60                  CP   "`"   ; quote char
0E71   28 02                  JR   z,nesting0   
0E73   18 0A                  JR   nesting1   
0E75                NESTING0:      
0E75   CB 7B                  BIT   7,e   
0E77   28 03                  JR   z,nesting1a   
0E79   CB BB                  RES   7,e   
0E7B   C9                     RET      
0E7C                NESTING1A:      
0E7C   CB FB                  SET   7,e   
0E7E   C9                     RET      
0E7F                NESTING1:      
0E7F   CB 7B                  BIT   7,e   
0E81   C0                     RET   nz   
0E82   FE 7B                  CP   "{"   
0E84   28 08                  JR   z,nesting2   
0E86   FE 5B                  CP   "["   
0E88   28 04                  JR   z,nesting2   
0E8A   FE 28                  CP   "("   
0E8C   20 02                  JR   nz,nesting3   
0E8E                NESTING2:      
0E8E   1C                     INC   e   
0E8F   C9                     RET      
0E90                NESTING3:      
0E90   FE 7D                  CP   "}"   
0E92   28 07                  JR   z,nesting4   
0E94   FE 5D                  CP   "]"   
0E96   28 03                  JR   z,nesting4   
0E98   FE 29                  CP   ")"   
0E9A   C0                     RET   nz   
0E9B                NESTING4:      
0E9B   1D                     DEC   e   
0E9C   C9                     RET      
0E9D                PROMPT:      
0E9D   CD AD 0E               CALL   printStr   
0EA0   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EA5   C9                     RET      
0EA6                CRLF:        
0EA6   CD AD 0E               CALL   printStr   
0EA9   0D 0A 00               .CSTR   "\r\n"   
0EAC   C9                     RET      
0EAD                             ; prints a null teminated string
0EAD                             ; the string should be immediately following the call
0EAD                PRINTSTR:      
0EAD   E3                     EX   (sp),hl   ; swap			
0EAE   CD 66 0E               CALL   prtstr   
0EB1   23                     INC   hl   ; inc past NUL
0EB2   E3                     EX   (sp),hl   ; put it back	
0EB3   C9                     RET      
0EB4                INIT:        
0EB4   21 F0 01               LD   hl,titleStr   
0EB7   11 0E 4E               LD   de,titleBuf   
0EBA   06 14                  LD   b,20   
0EBC                INIT1:       
0EBC   1A                     LD   a,(de)   
0EBD   BE                     CP   (hl)   
0EBE   20 17                  JR   nz,coldBoot0   
0EC0   13                     INC   de   
0EC1   23                     INC   hl   
0EC2   10 F8                  DJNZ   init1   
0EC4                WARMINIT:      
0EC4   ED 4B FC 4D            LD   bc,(vSavedIP)   ; restore IP
0EC8   ED 7B FE 4D            LD   sp,(vSavedSP)   ; restore SP
0ECC   DD 2A 00 4E            LD   ix,(vSavedNext)   ; restore Next
0ED0   FD 2A 02 4E            LD   iy,(vSavedBP)   ; restore BP
0ED4   C3 0E 0F               JP   start1   
0ED7                COLDBOOT0:      
0ED7   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EDA   11 0E 4E               LD   de,titleBuf   
0EDD   06 14                  LD   b,20   
0EDF   ED B0                  LDIR      
0EE1                COLDINIT:      
0EE1   21 DE 01               LD   hl,isysVars   
0EE4   11 E6 4D               LD   de,sysVars   
0EE7   01 12 00               LD   bc,9 * 2   
0EEA   ED B0                  LDIR      
0EEC   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0EEF   06 34                  LD   b,26*2   
0EF1   AF                     XOR   a   
0EF2                COLDBOOT1:      
0EF2   77                     LD   (hl),a   
0EF3   23                     INC   hl   
0EF4   10 FC                  DJNZ   coldBoot1   
0EF6   DD 2A EE 4D            LD   ix,(vNext)   
0EFA   FD 21 00 4B            LD   iy,STACK   
0EFE   C9                     RET      
0EFF                COLDSTART:      
0EFF   31 00 4B               LD   sp,STACK   
0F02   CD D7 0E               CALL   coldBoot0   
0F05   C3 0E 0F               JP   start1   
0F08                START:       
0F08   31 00 4B               LD   sp,STACK   ; start Monty
0F0B   CD B4 0E               CALL   init   ; setups
0F0E                START1:      
0F0E   21 0E 4E               LD   hl,titleBuf   
0F11   CD 66 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F14                INTERPRET:      
0F14   CD 9D 0E               CALL   prompt   
0F17   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F1A   21 00 4B               LD   hl,TIB   
0F1D   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F20                INTERPRET2:      ; calculate nesting
0F20   1E 00                  LD   e,0   ; initilize nesting value
0F22   C5                     PUSH   bc   ; save offset into TIB,
0F23                             ; bc is also the count of chars in TIB
0F23   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0F26   18 0B                  JR   interpret4   
0F28                INTERPRET3:      
0F28   3E 33                  LD   a,"3"   
0F2A   CD 85 00               CALL   putchar   
0F2D   7E                     LD   a,(hl)   ; a = char in TIB
0F2E   23                     INC   hl   ; inc pointer into TIB
0F2F   0B                     DEC   bc   ; dec count of chars in TIB
0F30   CD 6B 0E               CALL   nesting   ; update nesting value
0F33                INTERPRET4:      
0F33   79                     LD   a,c   ; is count zero?
0F34   B0                     OR   b   
0F35   20 F1                  JR   nz,interpret3   ; if not loop
0F37   C1                     POP   bc   ; restore offset into TIB
0F38                INTERPRET5:      
0F38   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F3B   FE 20                  CP   $20   ; compare to space
0F3D   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F3F   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F41                             ; ???? NEEDED?
0F41   28 36                  JR   z,interpret8   
0F43   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F45   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F47   FE 05                  CP   CTRL_E   
0F49   CA D7 0F               JP   z,edit_   
0F4C   FE 08                  CP   CTRL_H   
0F4E   CA C7 0F               JP   z,backSpace_   
0F51   FE 0A                  CP   CTRL_J   
0F53   CA EF 0F               JP   z,reEdit_   
0F56                             ; cp CTRL_S
0F56                             ; jp z,printStack_
0F56                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F56                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F56                             ; DB     lsb(list_)       ; FF  ^L 12
0F56                             ; DB     lsb(printStack_) ; DLE ^P 16
0F56                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F56                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F56                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F56                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F56                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F56                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F56                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F56                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F56                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F56                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F56                INTERPRET5A:      
0F56                             ; ld (vTIBPtr),bc
0F56                             ; ld bc,(vTIBPtr)
0F56   18 C8                  JR   interpret2   
0F58                INTERPRET6:      
0F58   21 00 4B               LD   hl,TIB   
0F5B   09                     ADD   hl,bc   
0F5C   77                     LD   (hl),a   ; store the character in textbuf
0F5D   03                     INC   bc   
0F5E   CD 85 00               CALL   putchar   ; echo character to screen
0F61   CD 6B 0E               CALL   nesting   
0F64   18 D2                  JR   interpret5   ; wait for next character
0F66                INTERPRET7:      
0F66   21 00 4B               LD   hl,TIB   
0F69   09                     ADD   hl,bc   
0F6A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F6C   23                     INC   hl   
0F6D   36 0A                  LD   (hl),"\n"   
0F6F   23                     INC   hl   
0F70   03                     INC   bc   
0F71   03                     INC   bc   
0F72   CD A6 0E               CALL   crlf   ; echo character to screen
0F75   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F76   B7                     OR   a   
0F77   20 BF                  JR   nz,interpret5   
0F79                INTERPRET8:      
0F79   21 00 4B               LD   hl,TIB   
0F7C   09                     ADD   hl,bc   
0F7D   22 EA 4D               LD   (vTIBPtr),hl   
0F80   01 00 4B               LD   bc,TIB   
0F83   ED 43 FC 4D            LD   (vSavedIP),bc   ; save IP
0F87   ED 73 FE 4D            LD   (vSavedSP),sp   ; save SP
0F8B   DD 22 00 4E            LD   (vSavedNext),ix   ; save Next
0F8F   FD 22 02 4E            LD   (vSavedBP),iy   ; save BP
0F93   0B                     DEC   bc   
0F94                NEXT:        
0F94   03                     INC   bc   ; Increment the IP
0F95   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F96   FE 20                  CP   " "   ; whitespace?
0F98   28 FA                  JR   z,next   ; space? ignore
0F9A   38 08                  JR   c,next1   
0F9C   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F9E   6F                     LD   l,a   ; index into table
0F9F   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FA1   6E                     LD   l,(hl)   ; get low jump address
0FA2   24                     INC   h   ; Load h with page after opcodes
0FA3   E9                     JP   (hl)   ; Jump to routine
0FA4                NEXT1:       
0FA4   FE 00                  CP   NUL   ; end of input string?
0FA6   28 03                  JR   z,exit   
0FA8   C3 14 0F               JP   interpret   ; no, other whitespace, macros?
0FAB                EXIT:        
0FAB   03                     INC   bc   
0FAC   60 69                  LD   hl,bc   
0FAE   E9                     JP   (hl)   
0FAF                RUN:         
0FAF   C1                     POP   bc   
0FB0   0B                     DEC   bc   
0FB1   DD E9                  JP   (ix)   
0FB3                ERROR:       
0FB3   E5                     PUSH   hl   
0FB4   CD AF 0F               CALL   run   
0FB7   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0FC4   C3 14 0F               JP   interpret   
0FC7                BACKSPACE_:      
0FC7   79                     LD   a,c   
0FC8   B0                     OR   b   
0FC9   CA 20 0F               JP   z,interpret2   
0FCC   0B                     DEC   bc   
0FCD   CD AD 0E               CALL   printStr   
0FD0   08 20 08 00            .CSTR   "\b \b"   
0FD4   C3 20 0F               JP   interpret2   
0FD7                             ; edit
0FD7                EDIT_:       
0FD7   CD AF 0F               CALL   run   
0FDA   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FEC   C3 14 0F               JP   interpret   
0FEF                REEDIT_:      
0FEF   C3 14 0F               JP   interpret   
0FF2                PRINTSTACK_:      
0FF2   CD AF 0F               CALL   run   
0FF5   2F 70 6B 00            .CSTR   "/pk"   
0FF9   C3 14 0F               JP   interpret   
0FFC                             ; editDef:
0FFC                             ;     pop hl                      ; pop ret address
0FFC                             ;     ex (sp),hl                  ; swap with TOS
0FFC                             ;     push hl                     ; dup TOS
0FFC                             ;     ld a,l                      ; a = ident
0FFC                             ;     ld de,TIB                   ; de = start of TIB
0FFC                             ;     ld (vTIBPtr),de             ; update TIB*
0FFC                             ;     push ix                     ; save NEXT
0FFC                             ;     ld ix,editDef0              ; NEXT = editDef0
0FFC                             ;     jp lookupRef                ; convert letter into address
0FFC                             ; editDef0:
0FFC                             ;     ld e,(hl)                   ; de = (hl++)
0FFC                             ;     inc hl
0FFC                             ;     ld d,(hl)
0FFC                             ;     ld a,d                      ; de == 0 ?
0FFC                             ;     or e
0FFC                             ;     jr z,editDef4
0FFC                             ;     ld ix,editDef3              ; NEXT = editDef3
0FFC                             ;     ex de,hl
0FFC                             ;     ld a,(hl)
0FFC                             ;     cp "{"
0FFC                             ;     jr nz,editDef1
0FFC                             ;     jp editBlock0               ; convert letter into address
0FFC                             ; editDef1:
0FFC                             ;     cp "("
0FFC                             ;     jr nz,editDef2
0FFC                             ;     jp editBlock0               ; convert letter into address
0FFC                             ; editDef2:
0FFC                             ;     jp editFunc
0FFC                             ; editDef3:
0FFC                             ;     ld a," "                    ; write assign
0FFC                             ;     call writeChar
0FFC                             ;     pop hl                      ; a = ident
0FFC                             ;     ld a,l
0FFC                             ;     call writeChar
0FFC                             ;     ld a,"="                    ; write assign
0FFC                             ;     call writeChar
0FFC                             ;     ld ix,editDef4              ; NEXT = editDef4
0FFC                             ;     jp printTIB
0FFC                             ; editDef4:
0FFC                             ;     pop ix                      ; restore NEXT
0FFC                             ;     jp (ix)
0FFC                             ; writeChar:
0FFC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FFC                             ;     ld (de),a                   ; write ident
0FFC                             ;     inc de
0FFC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FFC                             ;     ret
0FFC                             ; ; printTIB
0FFC                             ; printTIB:
0FFC                             ;     ld hl,(vTIBPtr)
0FFC                             ;     ld de,TIB
0FFC                             ;     or a
0FFC                             ;     sbc hl,de
0FFC                             ;     jp printTIB2
0FFC                             ; printTIB1:
0FFC                             ;     ld a,(de)
0FFC                             ;     call putchar
0FFC                             ; printTIB2:
0FFC                             ;     ld a,l
0FFC                             ;     or h
0FFC                             ;     jr nz,printTIB1
0FFC                             ;     jp (ix)
0FFC                             ; editBlock:
0FFC                             ;     pop hl                      ; hl = block*
0FFC                             ; editBlock0:
0FFC                             ;     push ix                     ; save next
0FFC                             ;     push hl                     ; push block*
0FFC                             ;     push hl                     ; push block*
0FFC                             ;     ld ix,(editBlock2)
0FFC                             ;     jp blockLength
0FFC                             ; editBlock1:
0FFC                             ;     pop hl                      ; bc = length, (sp) = IP
0FFC                             ;     pop de                      ; de = block*
0FFC                             ;     ld a,l
0FFC                             ;     or h
0FFC                             ;     jr z,editBlock2
0FFC                             ;     push bc
0FFC                             ;     ld bc,hl
0FFC                             ;     ex de,hl                    ; hl = block*
0FFC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FFC                             ;     ldir                        ; copy block to TIB
0FFC                             ;     ld (vTIBPtr),de              ; save TIB*
0FFC                             ;     pop bc
0FFC                             ; editBlock2:
0FFC                             ;     pop ix                      ; restore next
0FFC                             ;     jp (ix)
0FFC                             ; editFunc:
0FFC                             ;     jp (ix)
0FFC                             ; editArray:
0FFC                             ;     jp (ix)
0FFC                             ; editparseArgs:
0FFC                             ;     jp (ix)
0FFC                             ; ; blockLength
0FFC                             ; ; addr1 -- length
0FFC                             ; blockLength:
0FFC                             ;     pop hl                      ; block*
0FFC                             ;     push hl                     ; save block*
0FFC                             ;     inc hl                      ; skip first char
0FFC                             ;     ld d,1                      ; increase nesting
0FFC                             ; blockLength1:                   ; Skip to end of definition
0FFC                             ;     ld a,(hl)                   ; Get the next character
0FFC                             ;     inc hl                      ; Point to next character
0FFC                             ;     cp " " + 1                  ; ignore whitespace
0FFC                             ;     jr c,blockLength1
0FFC                             ;     cp ")"
0FFC                             ;     jr z,blockLength4
0FFC                             ;     cp "}"
0FFC                             ;     jr z,blockLength4
0FFC                             ;     cp "]"
0FFC                             ;     jr z,blockLength4
0FFC                             ;     cp "("
0FFC                             ;     jr z,blockLength2
0FFC                             ;     cp "{"
0FFC                             ;     jr z,blockLength2
0FFC                             ;     cp "["
0FFC                             ;     jr z,blockLength2
0FFC                             ;     cp "'"
0FFC                             ;     jr z,blockLength3
0FFC                             ;     cp "`"
0FFC                             ;     jr z,blockLength3
0FFC                             ;     cp DQ
0FFC                             ;     jr z,blockLength3
0FFC                             ;     jr blockLength1
0FFC                             ; blockLength2:
0FFC                             ;     inc d
0FFC                             ;     jr blockLength1
0FFC                             ; blockLength4:
0FFC                             ;     dec d
0FFC                             ;     jr nz, blockLength1         ; get the next element
0FFC                             ; blockLength3:
0FFC                             ;     ld a,$80
0FFC                             ;     xor d
0FFC                             ;     ld d,a
0FFC                             ;     jr nz, blockLength1
0FFC                             ;     pop hl                      ; hl = block*
0FFC                             ;     or a
0FFC                             ;     sbc hl,de
0FFC                             ;     push hl
0FFC                             ;     jp (ix)
0FFC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FFC                             ; \a start of stack \#3 depth \b base \$ prompt
0FFC                             ; DW dStack               ; a vS0 start of datastack			
0FFC                             ; DW FALSE                ; b vBase16
0FFC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FFC                             ; DW 0                    ; d
0FFC                             ; DW 65                   ; e vLastDef "A" last command u defined
0FFC                             ; DW 0                    ; f
0FFC                             ; DW page6                ; g 256 bytes limits
0FFC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FFC                          ;*Macro unroll: FUNC f1, 2, "abc"
0FFC                F1:          
0FFC   CD 41 0C               CALL   go   
0FFF   00 00                  DW   NUL   
1001   0A 10                  DW   f1M_3039S12   
1003   05 10                  DW   $+2   
1005   02                     DB   2   
1006   03 61 62 63            .PSTR   "abc"   
100A                F1M_3039S12:      
100A   7B                     DB   "{"   
100B   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
1042   7D                     DB   "}"   
1043   00                     DB   0   
1044                          ;*Macro unroll: FUNC f2, 0, ""
1044                F2:          
1044   CD 41 0C               CALL   go   
1047   00 00                  DW   NUL   
1049   4F 10                  DW   f2M_3044S18   
104B   4D 10                  DW   $+2   
104D   00                     DB   0   
104E   00                     .PSTR   ""   
104F                F2M_3044S18:      
104F   00                     DB   0   
1050                          ;*Macro unroll: FUNC f3, 0, ""
1050                F3:          
1050   CD 41 0C               CALL   go   
1053   00 00                  DW   NUL   
1055   5B 10                  DW   f3M_3046S21   
1057   59 10                  DW   $+2   
1059   00                     DB   0   
105A   00                     .PSTR   ""   
105B                F3M_3046S21:      
105B   00                     DB   0   
105C                          ;*Macro unroll: FUNC f4, 0, ""
105C                F4:          
105C   CD 41 0C               CALL   go   
105F   00 00                  DW   NUL   
1061   67 10                  DW   f4M_3048S24   
1063   65 10                  DW   $+2   
1065   00                     DB   0   
1066   00                     .PSTR   ""   
1067                F4M_3048S24:      
1067   00                     DB   0   
1068                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                          ;*Macro unroll:  test "[1 2 3].a", 0
1100   31 00 4B               LD   SP,STACK   
1103   CD E1 0E               CALL   coldInit   
1106   CD D2 49               CALL   execStr   
1109   5B 31 20 32 20 33 5D 2E 61 00 DB   "[1 2 3].a",0   
1113   E1                     POP   HL   
1114   E5                     PUSH   HL   
1115   11 00 00               LD   DE,0   
1118   B7                     OR   A   
1119   ED 52                  SBC   HL,DE   
111B   7D                     LD   A,L   
111C   B4                     OR   H   
111D   CA 7B 11               JP   Z,expectM_3059S37   
1120   CD AD 0E               CALL   printStr   
1123   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2E 61 00 .CSTR   "Code: ","[1 2 3].a"   
1133   CD AD 0E               CALL   printStr   
1136   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1145   21 00 00               LD   hl,0   
1148   E5                     PUSH   hl   
1149   E5                     PUSH   hl   
114A   CD AF 0F               CALL   run   
114D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1155   CD AD 0E               CALL   printStr   
1158   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1165   E1                     POP   hl   
1166   E5                     PUSH   hl   
1167   E5                     PUSH   hl   
1168   CD AF 0F               CALL   run   
116B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
117A   76                     HALT      
117B                EXPECTM_3059S37:      
117B   E1                     POP   HL   
117C                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
117C                             ; ; test "`hello:` 65.c 1. 2. 3.", FALSE
117C                             ; test "/h/b$1234.",0
117C                             ; test "/b257.",0
117C   CD AD 0E               CALL   printStr   
117F   44 6F 6E 65 21 00      .CSTR   "Done!"   
1185   76                     HALT      
1186                             ; 
1186                          ;*Macro unroll:  test "/f", false
1186   31 00 4B               LD   SP,STACK   
1189   CD E1 0E               CALL   coldInit   
118C   CD D2 49               CALL   execStr   
118F   2F 66 00               DB   "/f",0   
1192   E1                     POP   HL   
1193   E5                     PUSH   HL   
1194   11 00 00               LD   DE,false   
1197   B7                     OR   A   
1198   ED 52                  SBC   HL,DE   
119A   7D                     LD   A,L   
119B   B4                     OR   H   
119C   CA F3 11               JP   Z,expectM_3068S49   
119F   CD AD 0E               CALL   printStr   
11A2   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
11AB   CD AD 0E               CALL   printStr   
11AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11BD   21 00 00               LD   hl,false   
11C0   E5                     PUSH   hl   
11C1   E5                     PUSH   hl   
11C2   CD AF 0F               CALL   run   
11C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11CD   CD AD 0E               CALL   printStr   
11D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11DD   E1                     POP   hl   
11DE   E5                     PUSH   hl   
11DF   E5                     PUSH   hl   
11E0   CD AF 0F               CALL   run   
11E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11F2   76                     HALT      
11F3                EXPECTM_3068S49:      
11F3   E1                     POP   HL   
11F4                          ;*Macro unroll:  test "/t", true
11F4   31 00 4B               LD   SP,STACK   
11F7   CD E1 0E               CALL   coldInit   
11FA   CD D2 49               CALL   execStr   
11FD   2F 74 00               DB   "/t",0   
1200   E1                     POP   HL   
1201   E5                     PUSH   HL   
1202   11 FF FF               LD   DE,true   
1205   B7                     OR   A   
1206   ED 52                  SBC   HL,DE   
1208   7D                     LD   A,L   
1209   B4                     OR   H   
120A   CA 61 12               JP   Z,expectM_3069S50   
120D   CD AD 0E               CALL   printStr   
1210   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1219   CD AD 0E               CALL   printStr   
121C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
122B   21 FF FF               LD   hl,true   
122E   E5                     PUSH   hl   
122F   E5                     PUSH   hl   
1230   CD AF 0F               CALL   run   
1233   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
123B   CD AD 0E               CALL   printStr   
123E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
124B   E1                     POP   hl   
124C   E5                     PUSH   hl   
124D   E5                     PUSH   hl   
124E   CD AF 0F               CALL   run   
1251   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1260   76                     HALT      
1261                EXPECTM_3069S50:      
1261   E1                     POP   HL   
1262                          ;*Macro unroll:  test "1", 1
1262   31 00 4B               LD   SP,STACK   
1265   CD E1 0E               CALL   coldInit   
1268   CD D2 49               CALL   execStr   
126B   31 00                  DB   "1",0   
126D   E1                     POP   HL   
126E   E5                     PUSH   HL   
126F   11 01 00               LD   DE,1   
1272   B7                     OR   A   
1273   ED 52                  SBC   HL,DE   
1275   7D                     LD   A,L   
1276   B4                     OR   H   
1277   CA CD 12               JP   Z,expectM_3070S51   
127A   CD AD 0E               CALL   printStr   
127D   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1285   CD AD 0E               CALL   printStr   
1288   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1297   21 01 00               LD   hl,1   
129A   E5                     PUSH   hl   
129B   E5                     PUSH   hl   
129C   CD AF 0F               CALL   run   
129F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12A7   CD AD 0E               CALL   printStr   
12AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12B7   E1                     POP   hl   
12B8   E5                     PUSH   hl   
12B9   E5                     PUSH   hl   
12BA   CD AF 0F               CALL   run   
12BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12CC   76                     HALT      
12CD                EXPECTM_3070S51:      
12CD   E1                     POP   HL   
12CE                          ;*Macro unroll:  test "2", 2
12CE   31 00 4B               LD   SP,STACK   
12D1   CD E1 0E               CALL   coldInit   
12D4   CD D2 49               CALL   execStr   
12D7   32 00                  DB   "2",0   
12D9   E1                     POP   HL   
12DA   E5                     PUSH   HL   
12DB   11 02 00               LD   DE,2   
12DE   B7                     OR   A   
12DF   ED 52                  SBC   HL,DE   
12E1   7D                     LD   A,L   
12E2   B4                     OR   H   
12E3   CA 39 13               JP   Z,expectM_3071S52   
12E6   CD AD 0E               CALL   printStr   
12E9   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
12F1   CD AD 0E               CALL   printStr   
12F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1303   21 02 00               LD   hl,2   
1306   E5                     PUSH   hl   
1307   E5                     PUSH   hl   
1308   CD AF 0F               CALL   run   
130B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1313   CD AD 0E               CALL   printStr   
1316   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1323   E1                     POP   hl   
1324   E5                     PUSH   hl   
1325   E5                     PUSH   hl   
1326   CD AF 0F               CALL   run   
1329   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1338   76                     HALT      
1339                EXPECTM_3071S52:      
1339   E1                     POP   HL   
133A                          ;*Macro unroll:  test "1", 1
133A   31 00 4B               LD   SP,STACK   
133D   CD E1 0E               CALL   coldInit   
1340   CD D2 49               CALL   execStr   
1343   31 00                  DB   "1",0   
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 01 00               LD   DE,1   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   CA A5 13               JP   Z,expectM_3072S53   
1352   CD AD 0E               CALL   printStr   
1355   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
135D   CD AD 0E               CALL   printStr   
1360   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
136F   21 01 00               LD   hl,1   
1372   E5                     PUSH   hl   
1373   E5                     PUSH   hl   
1374   CD AF 0F               CALL   run   
1377   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
137F   CD AD 0E               CALL   printStr   
1382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
138F   E1                     POP   hl   
1390   E5                     PUSH   hl   
1391   E5                     PUSH   hl   
1392   CD AF 0F               CALL   run   
1395   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13A4   76                     HALT      
13A5                EXPECTM_3072S53:      
13A5   E1                     POP   HL   
13A6                          ;*Macro unroll:  test "0", 0
13A6   31 00 4B               LD   SP,STACK   
13A9   CD E1 0E               CALL   coldInit   
13AC   CD D2 49               CALL   execStr   
13AF   30 00                  DB   "0",0   
13B1   E1                     POP   HL   
13B2   E5                     PUSH   HL   
13B3   11 00 00               LD   DE,0   
13B6   B7                     OR   A   
13B7   ED 52                  SBC   HL,DE   
13B9   7D                     LD   A,L   
13BA   B4                     OR   H   
13BB   CA 11 14               JP   Z,expectM_3073S54   
13BE   CD AD 0E               CALL   printStr   
13C1   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
13C9   CD AD 0E               CALL   printStr   
13CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13DB   21 00 00               LD   hl,0   
13DE   E5                     PUSH   hl   
13DF   E5                     PUSH   hl   
13E0   CD AF 0F               CALL   run   
13E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13EB   CD AD 0E               CALL   printStr   
13EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FB   E1                     POP   hl   
13FC   E5                     PUSH   hl   
13FD   E5                     PUSH   hl   
13FE   CD AF 0F               CALL   run   
1401   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1410   76                     HALT      
1411                EXPECTM_3073S54:      
1411   E1                     POP   HL   
1412                          ;*Macro unroll:  test "10", 10
1412   31 00 4B               LD   SP,STACK   
1415   CD E1 0E               CALL   coldInit   
1418   CD D2 49               CALL   execStr   
141B   31 30 00               DB   "10",0   
141E   E1                     POP   HL   
141F   E5                     PUSH   HL   
1420   11 0A 00               LD   DE,10   
1423   B7                     OR   A   
1424   ED 52                  SBC   HL,DE   
1426   7D                     LD   A,L   
1427   B4                     OR   H   
1428   CA 7F 14               JP   Z,expectM_3074S55   
142B   CD AD 0E               CALL   printStr   
142E   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1437   CD AD 0E               CALL   printStr   
143A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1449   21 0A 00               LD   hl,10   
144C   E5                     PUSH   hl   
144D   E5                     PUSH   hl   
144E   CD AF 0F               CALL   run   
1451   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1459   CD AD 0E               CALL   printStr   
145C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1469   E1                     POP   hl   
146A   E5                     PUSH   hl   
146B   E5                     PUSH   hl   
146C   CD AF 0F               CALL   run   
146F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
147E   76                     HALT      
147F                EXPECTM_3074S55:      
147F   E1                     POP   HL   
1480                          ;*Macro unroll:  test "123", 123
1480   31 00 4B               LD   SP,STACK   
1483   CD E1 0E               CALL   coldInit   
1486   CD D2 49               CALL   execStr   
1489   31 32 33 00            DB   "123",0   
148D   E1                     POP   HL   
148E   E5                     PUSH   HL   
148F   11 7B 00               LD   DE,123   
1492   B7                     OR   A   
1493   ED 52                  SBC   HL,DE   
1495   7D                     LD   A,L   
1496   B4                     OR   H   
1497   CA EF 14               JP   Z,expectM_3075S56   
149A   CD AD 0E               CALL   printStr   
149D   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
14A7   CD AD 0E               CALL   printStr   
14AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B9   21 7B 00               LD   hl,123   
14BC   E5                     PUSH   hl   
14BD   E5                     PUSH   hl   
14BE   CD AF 0F               CALL   run   
14C1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14C9   CD AD 0E               CALL   printStr   
14CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D9   E1                     POP   hl   
14DA   E5                     PUSH   hl   
14DB   E5                     PUSH   hl   
14DC   CD AF 0F               CALL   run   
14DF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14EE   76                     HALT      
14EF                EXPECTM_3075S56:      
14EF   E1                     POP   HL   
14F0                          ;*Macro unroll:  test "-1",-1
14F0   31 00 4B               LD   SP,STACK   
14F3   CD E1 0E               CALL   coldInit   
14F6   CD D2 49               CALL   execStr   
14F9   2D 31 00               DB   "-1",0   
14FC   E1                     POP   HL   
14FD   E5                     PUSH   HL   
14FE   11 FF FF               LD   DE,-1   
1501   B7                     OR   A   
1502   ED 52                  SBC   HL,DE   
1504   7D                     LD   A,L   
1505   B4                     OR   H   
1506   CA 5D 15               JP   Z,expectM_3076S57   
1509   CD AD 0E               CALL   printStr   
150C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1515   CD AD 0E               CALL   printStr   
1518   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1527   21 FF FF               LD   hl,-1   
152A   E5                     PUSH   hl   
152B   E5                     PUSH   hl   
152C   CD AF 0F               CALL   run   
152F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1537   CD AD 0E               CALL   printStr   
153A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1547   E1                     POP   hl   
1548   E5                     PUSH   hl   
1549   E5                     PUSH   hl   
154A   CD AF 0F               CALL   run   
154D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
155C   76                     HALT      
155D                EXPECTM_3076S57:      
155D   E1                     POP   HL   
155E                          ;*Macro unroll:  test "~a", $61
155E   31 00 4B               LD   SP,STACK   
1561   CD E1 0E               CALL   coldInit   
1564   CD D2 49               CALL   execStr   
1567   7E 61 00               DB   "~a",0   
156A   E1                     POP   HL   
156B   E5                     PUSH   HL   
156C   11 61 00               LD   DE,$61   
156F   B7                     OR   A   
1570   ED 52                  SBC   HL,DE   
1572   7D                     LD   A,L   
1573   B4                     OR   H   
1574   CA CB 15               JP   Z,expectM_3077S58   
1577   CD AD 0E               CALL   printStr   
157A   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
1583   CD AD 0E               CALL   printStr   
1586   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1595   21 61 00               LD   hl,$61   
1598   E5                     PUSH   hl   
1599   E5                     PUSH   hl   
159A   CD AF 0F               CALL   run   
159D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15A5   CD AD 0E               CALL   printStr   
15A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B5   E1                     POP   hl   
15B6   E5                     PUSH   hl   
15B7   E5                     PUSH   hl   
15B8   CD AF 0F               CALL   run   
15BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15CA   76                     HALT      
15CB                EXPECTM_3077S58:      
15CB   E1                     POP   HL   
15CC                          ;*Macro unroll:  test "~~", $7e
15CC   31 00 4B               LD   SP,STACK   
15CF   CD E1 0E               CALL   coldInit   
15D2   CD D2 49               CALL   execStr   
15D5   7E 7E 00               DB   "~~",0   
15D8   E1                     POP   HL   
15D9   E5                     PUSH   HL   
15DA   11 7E 00               LD   DE,$7e   
15DD   B7                     OR   A   
15DE   ED 52                  SBC   HL,DE   
15E0   7D                     LD   A,L   
15E1   B4                     OR   H   
15E2   CA 39 16               JP   Z,expectM_3078S59   
15E5   CD AD 0E               CALL   printStr   
15E8   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
15F1   CD AD 0E               CALL   printStr   
15F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1603   21 7E 00               LD   hl,$7e   
1606   E5                     PUSH   hl   
1607   E5                     PUSH   hl   
1608   CD AF 0F               CALL   run   
160B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1613   CD AD 0E               CALL   printStr   
1616   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1623   E1                     POP   hl   
1624   E5                     PUSH   hl   
1625   E5                     PUSH   hl   
1626   CD AF 0F               CALL   run   
1629   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1638   76                     HALT      
1639                EXPECTM_3078S59:      
1639   E1                     POP   HL   
163A                          ;*Macro unroll:  test "$10", $10
163A   31 00 4B               LD   SP,STACK   
163D   CD E1 0E               CALL   coldInit   
1640   CD D2 49               CALL   execStr   
1643   24 31 30 00            DB   "$10",0   
1647   E1                     POP   HL   
1648   E5                     PUSH   HL   
1649   11 10 00               LD   DE,$10   
164C   B7                     OR   A   
164D   ED 52                  SBC   HL,DE   
164F   7D                     LD   A,L   
1650   B4                     OR   H   
1651   CA A9 16               JP   Z,expectM_3079S60   
1654   CD AD 0E               CALL   printStr   
1657   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1661   CD AD 0E               CALL   printStr   
1664   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1673   21 10 00               LD   hl,$10   
1676   E5                     PUSH   hl   
1677   E5                     PUSH   hl   
1678   CD AF 0F               CALL   run   
167B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1683   CD AD 0E               CALL   printStr   
1686   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1693   E1                     POP   hl   
1694   E5                     PUSH   hl   
1695   E5                     PUSH   hl   
1696   CD AF 0F               CALL   run   
1699   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16A8   76                     HALT      
16A9                EXPECTM_3079S60:      
16A9   E1                     POP   HL   
16AA                          ;*Macro unroll:  test "$FF", $FF
16AA   31 00 4B               LD   SP,STACK   
16AD   CD E1 0E               CALL   coldInit   
16B0   CD D2 49               CALL   execStr   
16B3   24 46 46 00            DB   "$FF",0   
16B7   E1                     POP   HL   
16B8   E5                     PUSH   HL   
16B9   11 FF 00               LD   DE,$FF   
16BC   B7                     OR   A   
16BD   ED 52                  SBC   HL,DE   
16BF   7D                     LD   A,L   
16C0   B4                     OR   H   
16C1   CA 19 17               JP   Z,expectM_3080S61   
16C4   CD AD 0E               CALL   printStr   
16C7   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
16D1   CD AD 0E               CALL   printStr   
16D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E3   21 FF 00               LD   hl,$FF   
16E6   E5                     PUSH   hl   
16E7   E5                     PUSH   hl   
16E8   CD AF 0F               CALL   run   
16EB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16F3   CD AD 0E               CALL   printStr   
16F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1703   E1                     POP   hl   
1704   E5                     PUSH   hl   
1705   E5                     PUSH   hl   
1706   CD AF 0F               CALL   run   
1709   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1718   76                     HALT      
1719                EXPECTM_3080S61:      
1719   E1                     POP   HL   
171A                          ;*Macro unroll:  test "-1 2 +",1
171A   31 00 4B               LD   SP,STACK   
171D   CD E1 0E               CALL   coldInit   
1720   CD D2 49               CALL   execStr   
1723   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
172A   E1                     POP   HL   
172B   E5                     PUSH   HL   
172C   11 01 00               LD   DE,1   
172F   B7                     OR   A   
1730   ED 52                  SBC   HL,DE   
1732   7D                     LD   A,L   
1733   B4                     OR   H   
1734   CA 8F 17               JP   Z,expectM_3081S62   
1737   CD AD 0E               CALL   printStr   
173A   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1747   CD AD 0E               CALL   printStr   
174A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1759   21 01 00               LD   hl,1   
175C   E5                     PUSH   hl   
175D   E5                     PUSH   hl   
175E   CD AF 0F               CALL   run   
1761   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1769   CD AD 0E               CALL   printStr   
176C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1779   E1                     POP   hl   
177A   E5                     PUSH   hl   
177B   E5                     PUSH   hl   
177C   CD AF 0F               CALL   run   
177F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
178E   76                     HALT      
178F                EXPECTM_3081S62:      
178F   E1                     POP   HL   
1790                          ;*Macro unroll:  test "-1 1 +",0
1790   31 00 4B               LD   SP,STACK   
1793   CD E1 0E               CALL   coldInit   
1796   CD D2 49               CALL   execStr   
1799   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 00 00               LD   DE,0   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 05 18               JP   Z,expectM_3082S63   
17AD   CD AD 0E               CALL   printStr   
17B0   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
17BD   CD AD 0E               CALL   printStr   
17C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CF   21 00 00               LD   hl,0   
17D2   E5                     PUSH   hl   
17D3   E5                     PUSH   hl   
17D4   CD AF 0F               CALL   run   
17D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17DF   CD AD 0E               CALL   printStr   
17E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17EF   E1                     POP   hl   
17F0   E5                     PUSH   hl   
17F1   E5                     PUSH   hl   
17F2   CD AF 0F               CALL   run   
17F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1804   76                     HALT      
1805                EXPECTM_3082S63:      
1805   E1                     POP   HL   
1806                          ;*Macro unroll:  test "1 2 +", 3
1806   31 00 4B               LD   SP,STACK   
1809   CD E1 0E               CALL   coldInit   
180C   CD D2 49               CALL   execStr   
180F   31 20 32 20 2B 00      DB   "1 2 +",0   
1815   E1                     POP   HL   
1816   E5                     PUSH   HL   
1817   11 03 00               LD   DE,3   
181A   B7                     OR   A   
181B   ED 52                  SBC   HL,DE   
181D   7D                     LD   A,L   
181E   B4                     OR   H   
181F   CA 79 18               JP   Z,expectM_3083S64   
1822   CD AD 0E               CALL   printStr   
1825   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1831   CD AD 0E               CALL   printStr   
1834   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1843   21 03 00               LD   hl,3   
1846   E5                     PUSH   hl   
1847   E5                     PUSH   hl   
1848   CD AF 0F               CALL   run   
184B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1853   CD AD 0E               CALL   printStr   
1856   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1863   E1                     POP   hl   
1864   E5                     PUSH   hl   
1865   E5                     PUSH   hl   
1866   CD AF 0F               CALL   run   
1869   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1878   76                     HALT      
1879                EXPECTM_3083S64:      
1879   E1                     POP   HL   
187A                          ;*Macro unroll:  test "4 1 2 +", 3
187A   31 00 4B               LD   SP,STACK   
187D   CD E1 0E               CALL   coldInit   
1880   CD D2 49               CALL   execStr   
1883   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
188B   E1                     POP   HL   
188C   E5                     PUSH   HL   
188D   11 03 00               LD   DE,3   
1890   B7                     OR   A   
1891   ED 52                  SBC   HL,DE   
1893   7D                     LD   A,L   
1894   B4                     OR   H   
1895   CA F1 18               JP   Z,expectM_3084S65   
1898   CD AD 0E               CALL   printStr   
189B   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18A9   CD AD 0E               CALL   printStr   
18AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18BB   21 03 00               LD   hl,3   
18BE   E5                     PUSH   hl   
18BF   E5                     PUSH   hl   
18C0   CD AF 0F               CALL   run   
18C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18CB   CD AD 0E               CALL   printStr   
18CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18DB   E1                     POP   hl   
18DC   E5                     PUSH   hl   
18DD   E5                     PUSH   hl   
18DE   CD AF 0F               CALL   run   
18E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18F0   76                     HALT      
18F1                EXPECTM_3084S65:      
18F1   E1                     POP   HL   
18F2                          ;*Macro unroll:  test "123 456 +", 123+456
18F2   31 00 4B               LD   SP,STACK   
18F5   CD E1 0E               CALL   coldInit   
18F8   CD D2 49               CALL   execStr   
18FB   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1905   E1                     POP   HL   
1906   E5                     PUSH   HL   
1907   11 43 02               LD   DE,123+456   
190A   B7                     OR   A   
190B   ED 52                  SBC   HL,DE   
190D   7D                     LD   A,L   
190E   B4                     OR   H   
190F   CA 6D 19               JP   Z,expectM_3085S66   
1912   CD AD 0E               CALL   printStr   
1915   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1925   CD AD 0E               CALL   printStr   
1928   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1937   21 43 02               LD   hl,123+456   
193A   E5                     PUSH   hl   
193B   E5                     PUSH   hl   
193C   CD AF 0F               CALL   run   
193F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1947   CD AD 0E               CALL   printStr   
194A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1957   E1                     POP   hl   
1958   E5                     PUSH   hl   
1959   E5                     PUSH   hl   
195A   CD AF 0F               CALL   run   
195D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
196C   76                     HALT      
196D                EXPECTM_3085S66:      
196D   E1                     POP   HL   
196E                          ;*Macro unroll:  test "64 128 +", 64+128
196E   31 00 4B               LD   SP,STACK   
1971   CD E1 0E               CALL   coldInit   
1974   CD D2 49               CALL   execStr   
1977   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1980   E1                     POP   HL   
1981   E5                     PUSH   HL   
1982   11 C0 00               LD   DE,64+128   
1985   B7                     OR   A   
1986   ED 52                  SBC   HL,DE   
1988   7D                     LD   A,L   
1989   B4                     OR   H   
198A   CA E7 19               JP   Z,expectM_3086S67   
198D   CD AD 0E               CALL   printStr   
1990   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
199F   CD AD 0E               CALL   printStr   
19A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19B1   21 C0 00               LD   hl,64+128   
19B4   E5                     PUSH   hl   
19B5   E5                     PUSH   hl   
19B6   CD AF 0F               CALL   run   
19B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19C1   CD AD 0E               CALL   printStr   
19C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19D1   E1                     POP   hl   
19D2   E5                     PUSH   hl   
19D3   E5                     PUSH   hl   
19D4   CD AF 0F               CALL   run   
19D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19E6   76                     HALT      
19E7                EXPECTM_3086S67:      
19E7   E1                     POP   HL   
19E8                          ;*Macro unroll:  test "1 2 +", 3
19E8   31 00 4B               LD   SP,STACK   
19EB   CD E1 0E               CALL   coldInit   
19EE   CD D2 49               CALL   execStr   
19F1   31 20 32 20 2B 00      DB   "1 2 +",0   
19F7   E1                     POP   HL   
19F8   E5                     PUSH   HL   
19F9   11 03 00               LD   DE,3   
19FC   B7                     OR   A   
19FD   ED 52                  SBC   HL,DE   
19FF   7D                     LD   A,L   
1A00   B4                     OR   H   
1A01   CA 5B 1A               JP   Z,expectM_3087S68   
1A04   CD AD 0E               CALL   printStr   
1A07   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A13   CD AD 0E               CALL   printStr   
1A16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A25   21 03 00               LD   hl,3   
1A28   E5                     PUSH   hl   
1A29   E5                     PUSH   hl   
1A2A   CD AF 0F               CALL   run   
1A2D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A35   CD AD 0E               CALL   printStr   
1A38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A45   E1                     POP   hl   
1A46   E5                     PUSH   hl   
1A47   E5                     PUSH   hl   
1A48   CD AF 0F               CALL   run   
1A4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A5A   76                     HALT      
1A5B                EXPECTM_3087S68:      
1A5B   E1                     POP   HL   
1A5C                          ;*Macro unroll:  test "1a= a++ a",2
1A5C   31 00 4B               LD   SP,STACK   
1A5F   CD E1 0E               CALL   coldInit   
1A62   CD D2 49               CALL   execStr   
1A65   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A6F   E1                     POP   HL   
1A70   E5                     PUSH   HL   
1A71   11 02 00               LD   DE,2   
1A74   B7                     OR   A   
1A75   ED 52                  SBC   HL,DE   
1A77   7D                     LD   A,L   
1A78   B4                     OR   H   
1A79   CA D7 1A               JP   Z,expectM_3088S69   
1A7C   CD AD 0E               CALL   printStr   
1A7F   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A8F   CD AD 0E               CALL   printStr   
1A92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA1   21 02 00               LD   hl,2   
1AA4   E5                     PUSH   hl   
1AA5   E5                     PUSH   hl   
1AA6   CD AF 0F               CALL   run   
1AA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AB1   CD AD 0E               CALL   printStr   
1AB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC1   E1                     POP   hl   
1AC2   E5                     PUSH   hl   
1AC3   E5                     PUSH   hl   
1AC4   CD AF 0F               CALL   run   
1AC7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AD6   76                     HALT      
1AD7                EXPECTM_3088S69:      
1AD7   E1                     POP   HL   
1AD8                          ;*Macro unroll:  test "-1 -1 -",0
1AD8   31 00 4B               LD   SP,STACK   
1ADB   CD E1 0E               CALL   coldInit   
1ADE   CD D2 49               CALL   execStr   
1AE1   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1AE9   E1                     POP   HL   
1AEA   E5                     PUSH   HL   
1AEB   11 00 00               LD   DE,0   
1AEE   B7                     OR   A   
1AEF   ED 52                  SBC   HL,DE   
1AF1   7D                     LD   A,L   
1AF2   B4                     OR   H   
1AF3   CA 4F 1B               JP   Z,expectM_3089S70   
1AF6   CD AD 0E               CALL   printStr   
1AF9   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B07   CD AD 0E               CALL   printStr   
1B0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B19   21 00 00               LD   hl,0   
1B1C   E5                     PUSH   hl   
1B1D   E5                     PUSH   hl   
1B1E   CD AF 0F               CALL   run   
1B21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B29   CD AD 0E               CALL   printStr   
1B2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B39   E1                     POP   hl   
1B3A   E5                     PUSH   hl   
1B3B   E5                     PUSH   hl   
1B3C   CD AF 0F               CALL   run   
1B3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B4E   76                     HALT      
1B4F                EXPECTM_3089S70:      
1B4F   E1                     POP   HL   
1B50                          ;*Macro unroll:  test "5 3 -", 2
1B50   31 00 4B               LD   SP,STACK   
1B53   CD E1 0E               CALL   coldInit   
1B56   CD D2 49               CALL   execStr   
1B59   35 20 33 20 2D 00      DB   "5 3 -",0   
1B5F   E1                     POP   HL   
1B60   E5                     PUSH   HL   
1B61   11 02 00               LD   DE,2   
1B64   B7                     OR   A   
1B65   ED 52                  SBC   HL,DE   
1B67   7D                     LD   A,L   
1B68   B4                     OR   H   
1B69   CA C3 1B               JP   Z,expectM_3090S71   
1B6C   CD AD 0E               CALL   printStr   
1B6F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B7B   CD AD 0E               CALL   printStr   
1B7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8D   21 02 00               LD   hl,2   
1B90   E5                     PUSH   hl   
1B91   E5                     PUSH   hl   
1B92   CD AF 0F               CALL   run   
1B95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B9D   CD AD 0E               CALL   printStr   
1BA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BAD   E1                     POP   hl   
1BAE   E5                     PUSH   hl   
1BAF   E5                     PUSH   hl   
1BB0   CD AF 0F               CALL   run   
1BB3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BC2   76                     HALT      
1BC3                EXPECTM_3090S71:      
1BC3   E1                     POP   HL   
1BC4                          ;*Macro unroll:  test "2 1 -",1
1BC4   31 00 4B               LD   SP,STACK   
1BC7   CD E1 0E               CALL   coldInit   
1BCA   CD D2 49               CALL   execStr   
1BCD   32 20 31 20 2D 00      DB   "2 1 -",0   
1BD3   E1                     POP   HL   
1BD4   E5                     PUSH   HL   
1BD5   11 01 00               LD   DE,1   
1BD8   B7                     OR   A   
1BD9   ED 52                  SBC   HL,DE   
1BDB   7D                     LD   A,L   
1BDC   B4                     OR   H   
1BDD   CA 37 1C               JP   Z,expectM_3091S72   
1BE0   CD AD 0E               CALL   printStr   
1BE3   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1BEF   CD AD 0E               CALL   printStr   
1BF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C01   21 01 00               LD   hl,1   
1C04   E5                     PUSH   hl   
1C05   E5                     PUSH   hl   
1C06   CD AF 0F               CALL   run   
1C09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C11   CD AD 0E               CALL   printStr   
1C14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C21   E1                     POP   hl   
1C22   E5                     PUSH   hl   
1C23   E5                     PUSH   hl   
1C24   CD AF 0F               CALL   run   
1C27   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C36   76                     HALT      
1C37                EXPECTM_3091S72:      
1C37   E1                     POP   HL   
1C38                          ;*Macro unroll:  test "3a= a-- a",2
1C38   31 00 4B               LD   SP,STACK   
1C3B   CD E1 0E               CALL   coldInit   
1C3E   CD D2 49               CALL   execStr   
1C41   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C4B   E1                     POP   HL   
1C4C   E5                     PUSH   HL   
1C4D   11 02 00               LD   DE,2   
1C50   B7                     OR   A   
1C51   ED 52                  SBC   HL,DE   
1C53   7D                     LD   A,L   
1C54   B4                     OR   H   
1C55   CA B3 1C               JP   Z,expectM_3092S73   
1C58   CD AD 0E               CALL   printStr   
1C5B   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C6B   CD AD 0E               CALL   printStr   
1C6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C7D   21 02 00               LD   hl,2   
1C80   E5                     PUSH   hl   
1C81   E5                     PUSH   hl   
1C82   CD AF 0F               CALL   run   
1C85   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C8D   CD AD 0E               CALL   printStr   
1C90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C9D   E1                     POP   hl   
1C9E   E5                     PUSH   hl   
1C9F   E5                     PUSH   hl   
1CA0   CD AF 0F               CALL   run   
1CA3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CB2   76                     HALT      
1CB3                EXPECTM_3092S73:      
1CB3   E1                     POP   HL   
1CB4                          ;*Macro unroll:  test "3 5 &", 1
1CB4   31 00 4B               LD   SP,STACK   
1CB7   CD E1 0E               CALL   coldInit   
1CBA   CD D2 49               CALL   execStr   
1CBD   33 20 35 20 26 00      DB   "3 5 &",0   
1CC3   E1                     POP   HL   
1CC4   E5                     PUSH   HL   
1CC5   11 01 00               LD   DE,1   
1CC8   B7                     OR   A   
1CC9   ED 52                  SBC   HL,DE   
1CCB   7D                     LD   A,L   
1CCC   B4                     OR   H   
1CCD   CA 27 1D               JP   Z,expectM_3093S74   
1CD0   CD AD 0E               CALL   printStr   
1CD3   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CDF   CD AD 0E               CALL   printStr   
1CE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF1   21 01 00               LD   hl,1   
1CF4   E5                     PUSH   hl   
1CF5   E5                     PUSH   hl   
1CF6   CD AF 0F               CALL   run   
1CF9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D01   CD AD 0E               CALL   printStr   
1D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D11   E1                     POP   hl   
1D12   E5                     PUSH   hl   
1D13   E5                     PUSH   hl   
1D14   CD AF 0F               CALL   run   
1D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D26   76                     HALT      
1D27                EXPECTM_3093S74:      
1D27   E1                     POP   HL   
1D28                          ;*Macro unroll:  test "3 5 |", 7
1D28   31 00 4B               LD   SP,STACK   
1D2B   CD E1 0E               CALL   coldInit   
1D2E   CD D2 49               CALL   execStr   
1D31   33 20 35 20 7C 00      DB   "3 5 |",0   
1D37   E1                     POP   HL   
1D38   E5                     PUSH   HL   
1D39   11 07 00               LD   DE,7   
1D3C   B7                     OR   A   
1D3D   ED 52                  SBC   HL,DE   
1D3F   7D                     LD   A,L   
1D40   B4                     OR   H   
1D41   CA 9B 1D               JP   Z,expectM_3094S75   
1D44   CD AD 0E               CALL   printStr   
1D47   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D53   CD AD 0E               CALL   printStr   
1D56   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D65   21 07 00               LD   hl,7   
1D68   E5                     PUSH   hl   
1D69   E5                     PUSH   hl   
1D6A   CD AF 0F               CALL   run   
1D6D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D75   CD AD 0E               CALL   printStr   
1D78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D85   E1                     POP   hl   
1D86   E5                     PUSH   hl   
1D87   E5                     PUSH   hl   
1D88   CD AF 0F               CALL   run   
1D8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D9A   76                     HALT      
1D9B                EXPECTM_3094S75:      
1D9B   E1                     POP   HL   
1D9C                          ;*Macro unroll:  test "3 5 /x", 6
1D9C   31 00 4B               LD   SP,STACK   
1D9F   CD E1 0E               CALL   coldInit   
1DA2   CD D2 49               CALL   execStr   
1DA5   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DAC   E1                     POP   HL   
1DAD   E5                     PUSH   HL   
1DAE   11 06 00               LD   DE,6   
1DB1   B7                     OR   A   
1DB2   ED 52                  SBC   HL,DE   
1DB4   7D                     LD   A,L   
1DB5   B4                     OR   H   
1DB6   CA 11 1E               JP   Z,expectM_3095S76   
1DB9   CD AD 0E               CALL   printStr   
1DBC   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DC9   CD AD 0E               CALL   printStr   
1DCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDB   21 06 00               LD   hl,6   
1DDE   E5                     PUSH   hl   
1DDF   E5                     PUSH   hl   
1DE0   CD AF 0F               CALL   run   
1DE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DEB   CD AD 0E               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD AF 0F               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   76                     HALT      
1E11                EXPECTM_3095S76:      
1E11   E1                     POP   HL   
1E12                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E12   31 00 4B               LD   SP,STACK   
1E15   CD E1 0E               CALL   coldInit   
1E18   CD D2 49               CALL   execStr   
1E1B   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E2A   E1                     POP   HL   
1E2B   E5                     PUSH   HL   
1E2C   11 06 00               LD   DE,6   
1E2F   B7                     OR   A   
1E30   ED 52                  SBC   HL,DE   
1E32   7D                     LD   A,L   
1E33   B4                     OR   H   
1E34   CA 97 1E               JP   Z,expectM_3096S77   
1E37   CD AD 0E               CALL   printStr   
1E3A   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E4F   CD AD 0E               CALL   printStr   
1E52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E61   21 06 00               LD   hl,6   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD AF 0F               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E71   CD AD 0E               CALL   printStr   
1E74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E81   E1                     POP   hl   
1E82   E5                     PUSH   hl   
1E83   E5                     PUSH   hl   
1E84   CD AF 0F               CALL   run   
1E87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E96   76                     HALT      
1E97                EXPECTM_3096S77:      
1E97   E1                     POP   HL   
1E98                          ;*Macro unroll:  test "2 3 *", 6
1E98   31 00 4B               LD   SP,STACK   
1E9B   CD E1 0E               CALL   coldInit   
1E9E   CD D2 49               CALL   execStr   
1EA1   32 20 33 20 2A 00      DB   "2 3 *",0   
1EA7   E1                     POP   HL   
1EA8   E5                     PUSH   HL   
1EA9   11 06 00               LD   DE,6   
1EAC   B7                     OR   A   
1EAD   ED 52                  SBC   HL,DE   
1EAF   7D                     LD   A,L   
1EB0   B4                     OR   H   
1EB1   CA 0B 1F               JP   Z,expectM_3097S78   
1EB4   CD AD 0E               CALL   printStr   
1EB7   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1EC3   CD AD 0E               CALL   printStr   
1EC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED5   21 06 00               LD   hl,6   
1ED8   E5                     PUSH   hl   
1ED9   E5                     PUSH   hl   
1EDA   CD AF 0F               CALL   run   
1EDD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE5   CD AD 0E               CALL   printStr   
1EE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF5   E1                     POP   hl   
1EF6   E5                     PUSH   hl   
1EF7   E5                     PUSH   hl   
1EF8   CD AF 0F               CALL   run   
1EFB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F0A   76                     HALT      
1F0B                EXPECTM_3097S78:      
1F0B   E1                     POP   HL   
1F0C                          ;*Macro unroll:  test "1 2 3 + *", 5
1F0C   31 00 4B               LD   SP,STACK   
1F0F   CD E1 0E               CALL   coldInit   
1F12   CD D2 49               CALL   execStr   
1F15   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F1F   E1                     POP   HL   
1F20   E5                     PUSH   HL   
1F21   11 05 00               LD   DE,5   
1F24   B7                     OR   A   
1F25   ED 52                  SBC   HL,DE   
1F27   7D                     LD   A,L   
1F28   B4                     OR   H   
1F29   CA 87 1F               JP   Z,expectM_3098S79   
1F2C   CD AD 0E               CALL   printStr   
1F2F   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F3F   CD AD 0E               CALL   printStr   
1F42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F51   21 05 00               LD   hl,5   
1F54   E5                     PUSH   hl   
1F55   E5                     PUSH   hl   
1F56   CD AF 0F               CALL   run   
1F59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F61   CD AD 0E               CALL   printStr   
1F64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F71   E1                     POP   hl   
1F72   E5                     PUSH   hl   
1F73   E5                     PUSH   hl   
1F74   CD AF 0F               CALL   run   
1F77   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F86   76                     HALT      
1F87                EXPECTM_3098S79:      
1F87   E1                     POP   HL   
1F88                          ;*Macro unroll:  test "7 3 /", 2
1F88   31 00 4B               LD   SP,STACK   
1F8B   CD E1 0E               CALL   coldInit   
1F8E   CD D2 49               CALL   execStr   
1F91   37 20 33 20 2F 00      DB   "7 3 /",0   
1F97   E1                     POP   HL   
1F98   E5                     PUSH   HL   
1F99   11 02 00               LD   DE,2   
1F9C   B7                     OR   A   
1F9D   ED 52                  SBC   HL,DE   
1F9F   7D                     LD   A,L   
1FA0   B4                     OR   H   
1FA1   CA FB 1F               JP   Z,expectM_3099S80   
1FA4   CD AD 0E               CALL   printStr   
1FA7   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FB3   CD AD 0E               CALL   printStr   
1FB6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC5   21 02 00               LD   hl,2   
1FC8   E5                     PUSH   hl   
1FC9   E5                     PUSH   hl   
1FCA   CD AF 0F               CALL   run   
1FCD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FD5   CD AD 0E               CALL   printStr   
1FD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE5   E1                     POP   hl   
1FE6   E5                     PUSH   hl   
1FE7   E5                     PUSH   hl   
1FE8   CD AF 0F               CALL   run   
1FEB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FFA   76                     HALT      
1FFB                EXPECTM_3099S80:      
1FFB   E1                     POP   HL   
1FFC                          ;*Macro unroll:  test "100a= 1a+= a", 101
1FFC   31 00 4B               LD   SP,STACK   
1FFF   CD E1 0E               CALL   coldInit   
2002   CD D2 49               CALL   execStr   
2005   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2012   E1                     POP   HL   
2013   E5                     PUSH   HL   
2014   11 65 00               LD   DE,101   
2017   B7                     OR   A   
2018   ED 52                  SBC   HL,DE   
201A   7D                     LD   A,L   
201B   B4                     OR   H   
201C   CA 7D 20               JP   Z,expectM_3100S81   
201F   CD AD 0E               CALL   printStr   
2022   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2035   CD AD 0E               CALL   printStr   
2038   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2047   21 65 00               LD   hl,101   
204A   E5                     PUSH   hl   
204B   E5                     PUSH   hl   
204C   CD AF 0F               CALL   run   
204F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2057   CD AD 0E               CALL   printStr   
205A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2067   E1                     POP   hl   
2068   E5                     PUSH   hl   
2069   E5                     PUSH   hl   
206A   CD AF 0F               CALL   run   
206D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
207C   76                     HALT      
207D                EXPECTM_3100S81:      
207D   E1                     POP   HL   
207E                          ;*Macro unroll:  test "100a= a1-= a", 99
207E   31 00 4B               LD   SP,STACK   
2081   CD E1 0E               CALL   coldInit   
2084   CD D2 49               CALL   execStr   
2087   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
2094   E1                     POP   HL   
2095   E5                     PUSH   HL   
2096   11 63 00               LD   DE,99   
2099   B7                     OR   A   
209A   ED 52                  SBC   HL,DE   
209C   7D                     LD   A,L   
209D   B4                     OR   H   
209E   CA FF 20               JP   Z,expectM_3101S82   
20A1   CD AD 0E               CALL   printStr   
20A4   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20B7   CD AD 0E               CALL   printStr   
20BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C9   21 63 00               LD   hl,99   
20CC   E5                     PUSH   hl   
20CD   E5                     PUSH   hl   
20CE   CD AF 0F               CALL   run   
20D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20D9   CD AD 0E               CALL   printStr   
20DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E9   E1                     POP   hl   
20EA   E5                     PUSH   hl   
20EB   E5                     PUSH   hl   
20EC   CD AF 0F               CALL   run   
20EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20FE   76                     HALT      
20FF                EXPECTM_3101S82:      
20FF   E1                     POP   HL   
2100                          ;*Macro unroll:  test "100a= a2*= a", 200
2100   31 00 4B               LD   SP,STACK   
2103   CD E1 0E               CALL   coldInit   
2106   CD D2 49               CALL   execStr   
2109   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2116   E1                     POP   HL   
2117   E5                     PUSH   HL   
2118   11 C8 00               LD   DE,200   
211B   B7                     OR   A   
211C   ED 52                  SBC   HL,DE   
211E   7D                     LD   A,L   
211F   B4                     OR   H   
2120   CA 81 21               JP   Z,expectM_3102S83   
2123   CD AD 0E               CALL   printStr   
2126   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2139   CD AD 0E               CALL   printStr   
213C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214B   21 C8 00               LD   hl,200   
214E   E5                     PUSH   hl   
214F   E5                     PUSH   hl   
2150   CD AF 0F               CALL   run   
2153   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
215B   CD AD 0E               CALL   printStr   
215E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216B   E1                     POP   hl   
216C   E5                     PUSH   hl   
216D   E5                     PUSH   hl   
216E   CD AF 0F               CALL   run   
2171   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2180   76                     HALT      
2181                EXPECTM_3102S83:      
2181   E1                     POP   HL   
2182                          ;*Macro unroll:  test "100a= a2/= a", 50
2182   31 00 4B               LD   SP,STACK   
2185   CD E1 0E               CALL   coldInit   
2188   CD D2 49               CALL   execStr   
218B   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2198   E1                     POP   HL   
2199   E5                     PUSH   HL   
219A   11 32 00               LD   DE,50   
219D   B7                     OR   A   
219E   ED 52                  SBC   HL,DE   
21A0   7D                     LD   A,L   
21A1   B4                     OR   H   
21A2   CA 03 22               JP   Z,expectM_3103S84   
21A5   CD AD 0E               CALL   printStr   
21A8   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21BB   CD AD 0E               CALL   printStr   
21BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21CD   21 32 00               LD   hl,50   
21D0   E5                     PUSH   hl   
21D1   E5                     PUSH   hl   
21D2   CD AF 0F               CALL   run   
21D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21DD   CD AD 0E               CALL   printStr   
21E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21ED   E1                     POP   hl   
21EE   E5                     PUSH   hl   
21EF   E5                     PUSH   hl   
21F0   CD AF 0F               CALL   run   
21F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2202   76                     HALT      
2203                EXPECTM_3103S84:      
2203   E1                     POP   HL   
2204                          ;*Macro unroll:  test "7 3 / /re", 1
2204   31 00 4B               LD   SP,STACK   
2207   CD E1 0E               CALL   coldInit   
220A   CD D2 49               CALL   execStr   
220D   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2217   E1                     POP   HL   
2218   E5                     PUSH   HL   
2219   11 01 00               LD   DE,1   
221C   B7                     OR   A   
221D   ED 52                  SBC   HL,DE   
221F   7D                     LD   A,L   
2220   B4                     OR   H   
2221   CA 7F 22               JP   Z,expectM_3104S85   
2224   CD AD 0E               CALL   printStr   
2227   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2237   CD AD 0E               CALL   printStr   
223A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2249   21 01 00               LD   hl,1   
224C   E5                     PUSH   hl   
224D   E5                     PUSH   hl   
224E   CD AF 0F               CALL   run   
2251   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2259   CD AD 0E               CALL   printStr   
225C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2269   E1                     POP   hl   
226A   E5                     PUSH   hl   
226B   E5                     PUSH   hl   
226C   CD AF 0F               CALL   run   
226F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
227E   76                     HALT      
227F                EXPECTM_3104S85:      
227F   E1                     POP   HL   
2280                          ;*Macro unroll:  test "7 3 /", 2
2280   31 00 4B               LD   SP,STACK   
2283   CD E1 0E               CALL   coldInit   
2286   CD D2 49               CALL   execStr   
2289   37 20 33 20 2F 00      DB   "7 3 /",0   
228F   E1                     POP   HL   
2290   E5                     PUSH   HL   
2291   11 02 00               LD   DE,2   
2294   B7                     OR   A   
2295   ED 52                  SBC   HL,DE   
2297   7D                     LD   A,L   
2298   B4                     OR   H   
2299   CA F3 22               JP   Z,expectM_3105S86   
229C   CD AD 0E               CALL   printStr   
229F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22AB   CD AD 0E               CALL   printStr   
22AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22BD   21 02 00               LD   hl,2   
22C0   E5                     PUSH   hl   
22C1   E5                     PUSH   hl   
22C2   CD AF 0F               CALL   run   
22C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22CD   CD AD 0E               CALL   printStr   
22D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22DD   E1                     POP   hl   
22DE   E5                     PUSH   hl   
22DF   E5                     PUSH   hl   
22E0   CD AF 0F               CALL   run   
22E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22F2   76                     HALT      
22F3                EXPECTM_3105S86:      
22F3   E1                     POP   HL   
22F4                          ;*Macro unroll:  test "2 3 ==", FALSE
22F4   31 00 4B               LD   SP,STACK   
22F7   CD E1 0E               CALL   coldInit   
22FA   CD D2 49               CALL   execStr   
22FD   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2304   E1                     POP   HL   
2305   E5                     PUSH   HL   
2306   11 00 00               LD   DE,FALSE   
2309   B7                     OR   A   
230A   ED 52                  SBC   HL,DE   
230C   7D                     LD   A,L   
230D   B4                     OR   H   
230E   CA 69 23               JP   Z,expectM_3106S87   
2311   CD AD 0E               CALL   printStr   
2314   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2321   CD AD 0E               CALL   printStr   
2324   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2333   21 00 00               LD   hl,FALSE   
2336   E5                     PUSH   hl   
2337   E5                     PUSH   hl   
2338   CD AF 0F               CALL   run   
233B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2343   CD AD 0E               CALL   printStr   
2346   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2353   E1                     POP   hl   
2354   E5                     PUSH   hl   
2355   E5                     PUSH   hl   
2356   CD AF 0F               CALL   run   
2359   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2368   76                     HALT      
2369                EXPECTM_3106S87:      
2369   E1                     POP   HL   
236A                          ;*Macro unroll:  test "3 3 ==", TRUE
236A   31 00 4B               LD   SP,STACK   
236D   CD E1 0E               CALL   coldInit   
2370   CD D2 49               CALL   execStr   
2373   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
237A   E1                     POP   HL   
237B   E5                     PUSH   HL   
237C   11 FF FF               LD   DE,TRUE   
237F   B7                     OR   A   
2380   ED 52                  SBC   HL,DE   
2382   7D                     LD   A,L   
2383   B4                     OR   H   
2384   CA DF 23               JP   Z,expectM_3107S88   
2387   CD AD 0E               CALL   printStr   
238A   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2397   CD AD 0E               CALL   printStr   
239A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A9   21 FF FF               LD   hl,TRUE   
23AC   E5                     PUSH   hl   
23AD   E5                     PUSH   hl   
23AE   CD AF 0F               CALL   run   
23B1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23B9   CD AD 0E               CALL   printStr   
23BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C9   E1                     POP   hl   
23CA   E5                     PUSH   hl   
23CB   E5                     PUSH   hl   
23CC   CD AF 0F               CALL   run   
23CF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23DE   76                     HALT      
23DF                EXPECTM_3107S88:      
23DF   E1                     POP   HL   
23E0                          ;*Macro unroll:  test "1 2 <", TRUE
23E0   31 00 4B               LD   SP,STACK   
23E3   CD E1 0E               CALL   coldInit   
23E6   CD D2 49               CALL   execStr   
23E9   31 20 32 20 3C 00      DB   "1 2 <",0   
23EF   E1                     POP   HL   
23F0   E5                     PUSH   HL   
23F1   11 FF FF               LD   DE,TRUE   
23F4   B7                     OR   A   
23F5   ED 52                  SBC   HL,DE   
23F7   7D                     LD   A,L   
23F8   B4                     OR   H   
23F9   CA 53 24               JP   Z,expectM_3108S89   
23FC   CD AD 0E               CALL   printStr   
23FF   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
240B   CD AD 0E               CALL   printStr   
240E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
241D   21 FF FF               LD   hl,TRUE   
2420   E5                     PUSH   hl   
2421   E5                     PUSH   hl   
2422   CD AF 0F               CALL   run   
2425   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
242D   CD AD 0E               CALL   printStr   
2430   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243D   E1                     POP   hl   
243E   E5                     PUSH   hl   
243F   E5                     PUSH   hl   
2440   CD AF 0F               CALL   run   
2443   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2452   76                     HALT      
2453                EXPECTM_3108S89:      
2453   E1                     POP   HL   
2454                          ;*Macro unroll:  test "2 1 <", FALSE
2454   31 00 4B               LD   SP,STACK   
2457   CD E1 0E               CALL   coldInit   
245A   CD D2 49               CALL   execStr   
245D   32 20 31 20 3C 00      DB   "2 1 <",0   
2463   E1                     POP   HL   
2464   E5                     PUSH   HL   
2465   11 00 00               LD   DE,FALSE   
2468   B7                     OR   A   
2469   ED 52                  SBC   HL,DE   
246B   7D                     LD   A,L   
246C   B4                     OR   H   
246D   CA C7 24               JP   Z,expectM_3109S90   
2470   CD AD 0E               CALL   printStr   
2473   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
247F   CD AD 0E               CALL   printStr   
2482   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2491   21 00 00               LD   hl,FALSE   
2494   E5                     PUSH   hl   
2495   E5                     PUSH   hl   
2496   CD AF 0F               CALL   run   
2499   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24A1   CD AD 0E               CALL   printStr   
24A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B1   E1                     POP   hl   
24B2   E5                     PUSH   hl   
24B3   E5                     PUSH   hl   
24B4   CD AF 0F               CALL   run   
24B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24C6   76                     HALT      
24C7                EXPECTM_3109S90:      
24C7   E1                     POP   HL   
24C8                          ;*Macro unroll:  test "2 3 <", TRUE
24C8   31 00 4B               LD   SP,STACK   
24CB   CD E1 0E               CALL   coldInit   
24CE   CD D2 49               CALL   execStr   
24D1   32 20 33 20 3C 00      DB   "2 3 <",0   
24D7   E1                     POP   HL   
24D8   E5                     PUSH   HL   
24D9   11 FF FF               LD   DE,TRUE   
24DC   B7                     OR   A   
24DD   ED 52                  SBC   HL,DE   
24DF   7D                     LD   A,L   
24E0   B4                     OR   H   
24E1   CA 3B 25               JP   Z,expectM_3110S91   
24E4   CD AD 0E               CALL   printStr   
24E7   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
24F3   CD AD 0E               CALL   printStr   
24F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2505   21 FF FF               LD   hl,TRUE   
2508   E5                     PUSH   hl   
2509   E5                     PUSH   hl   
250A   CD AF 0F               CALL   run   
250D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2515   CD AD 0E               CALL   printStr   
2518   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2525   E1                     POP   hl   
2526   E5                     PUSH   hl   
2527   E5                     PUSH   hl   
2528   CD AF 0F               CALL   run   
252B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
253A   76                     HALT      
253B                EXPECTM_3110S91:      
253B   E1                     POP   HL   
253C                          ;*Macro unroll:  test "3 3 <", FALSE
253C   31 00 4B               LD   SP,STACK   
253F   CD E1 0E               CALL   coldInit   
2542   CD D2 49               CALL   execStr   
2545   33 20 33 20 3C 00      DB   "3 3 <",0   
254B   E1                     POP   HL   
254C   E5                     PUSH   HL   
254D   11 00 00               LD   DE,FALSE   
2550   B7                     OR   A   
2551   ED 52                  SBC   HL,DE   
2553   7D                     LD   A,L   
2554   B4                     OR   H   
2555   CA AF 25               JP   Z,expectM_3111S92   
2558   CD AD 0E               CALL   printStr   
255B   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2567   CD AD 0E               CALL   printStr   
256A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2579   21 00 00               LD   hl,FALSE   
257C   E5                     PUSH   hl   
257D   E5                     PUSH   hl   
257E   CD AF 0F               CALL   run   
2581   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2589   CD AD 0E               CALL   printStr   
258C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2599   E1                     POP   hl   
259A   E5                     PUSH   hl   
259B   E5                     PUSH   hl   
259C   CD AF 0F               CALL   run   
259F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25AE   76                     HALT      
25AF                EXPECTM_3111S92:      
25AF   E1                     POP   HL   
25B0                          ;*Macro unroll:  test "1 2 >", FALSE
25B0   31 00 4B               LD   SP,STACK   
25B3   CD E1 0E               CALL   coldInit   
25B6   CD D2 49               CALL   execStr   
25B9   31 20 32 20 3E 00      DB   "1 2 >",0   
25BF   E1                     POP   HL   
25C0   E5                     PUSH   HL   
25C1   11 00 00               LD   DE,FALSE   
25C4   B7                     OR   A   
25C5   ED 52                  SBC   HL,DE   
25C7   7D                     LD   A,L   
25C8   B4                     OR   H   
25C9   CA 23 26               JP   Z,expectM_3112S93   
25CC   CD AD 0E               CALL   printStr   
25CF   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
25DB   CD AD 0E               CALL   printStr   
25DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25ED   21 00 00               LD   hl,FALSE   
25F0   E5                     PUSH   hl   
25F1   E5                     PUSH   hl   
25F2   CD AF 0F               CALL   run   
25F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25FD   CD AD 0E               CALL   printStr   
2600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260D   E1                     POP   hl   
260E   E5                     PUSH   hl   
260F   E5                     PUSH   hl   
2610   CD AF 0F               CALL   run   
2613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2622   76                     HALT      
2623                EXPECTM_3112S93:      
2623   E1                     POP   HL   
2624                          ;*Macro unroll:  test "2 1 >", TRUE
2624   31 00 4B               LD   SP,STACK   
2627   CD E1 0E               CALL   coldInit   
262A   CD D2 49               CALL   execStr   
262D   32 20 31 20 3E 00      DB   "2 1 >",0   
2633   E1                     POP   HL   
2634   E5                     PUSH   HL   
2635   11 FF FF               LD   DE,TRUE   
2638   B7                     OR   A   
2639   ED 52                  SBC   HL,DE   
263B   7D                     LD   A,L   
263C   B4                     OR   H   
263D   CA 97 26               JP   Z,expectM_3113S94   
2640   CD AD 0E               CALL   printStr   
2643   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
264F   CD AD 0E               CALL   printStr   
2652   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2661   21 FF FF               LD   hl,TRUE   
2664   E5                     PUSH   hl   
2665   E5                     PUSH   hl   
2666   CD AF 0F               CALL   run   
2669   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2671   CD AD 0E               CALL   printStr   
2674   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2681   E1                     POP   hl   
2682   E5                     PUSH   hl   
2683   E5                     PUSH   hl   
2684   CD AF 0F               CALL   run   
2687   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2696   76                     HALT      
2697                EXPECTM_3113S94:      
2697   E1                     POP   HL   
2698                          ;*Macro unroll:  test "3 3 >", FALSE
2698   31 00 4B               LD   SP,STACK   
269B   CD E1 0E               CALL   coldInit   
269E   CD D2 49               CALL   execStr   
26A1   33 20 33 20 3E 00      DB   "3 3 >",0   
26A7   E1                     POP   HL   
26A8   E5                     PUSH   HL   
26A9   11 00 00               LD   DE,FALSE   
26AC   B7                     OR   A   
26AD   ED 52                  SBC   HL,DE   
26AF   7D                     LD   A,L   
26B0   B4                     OR   H   
26B1   CA 0B 27               JP   Z,expectM_3114S95   
26B4   CD AD 0E               CALL   printStr   
26B7   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
26C3   CD AD 0E               CALL   printStr   
26C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26D5   21 00 00               LD   hl,FALSE   
26D8   E5                     PUSH   hl   
26D9   E5                     PUSH   hl   
26DA   CD AF 0F               CALL   run   
26DD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26E5   CD AD 0E               CALL   printStr   
26E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26F5   E1                     POP   hl   
26F6   E5                     PUSH   hl   
26F7   E5                     PUSH   hl   
26F8   CD AF 0F               CALL   run   
26FB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
270A   76                     HALT      
270B                EXPECTM_3114S95:      
270B   E1                     POP   HL   
270C                          ;*Macro unroll:  test "4 3 >", TRUE
270C   31 00 4B               LD   SP,STACK   
270F   CD E1 0E               CALL   coldInit   
2712   CD D2 49               CALL   execStr   
2715   34 20 33 20 3E 00      DB   "4 3 >",0   
271B   E1                     POP   HL   
271C   E5                     PUSH   HL   
271D   11 FF FF               LD   DE,TRUE   
2720   B7                     OR   A   
2721   ED 52                  SBC   HL,DE   
2723   7D                     LD   A,L   
2724   B4                     OR   H   
2725   CA 7F 27               JP   Z,expectM_3115S96   
2728   CD AD 0E               CALL   printStr   
272B   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2737   CD AD 0E               CALL   printStr   
273A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2749   21 FF FF               LD   hl,TRUE   
274C   E5                     PUSH   hl   
274D   E5                     PUSH   hl   
274E   CD AF 0F               CALL   run   
2751   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2759   CD AD 0E               CALL   printStr   
275C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2769   E1                     POP   hl   
276A   E5                     PUSH   hl   
276B   E5                     PUSH   hl   
276C   CD AF 0F               CALL   run   
276F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
277E   76                     HALT      
277F                EXPECTM_3115S96:      
277F   E1                     POP   HL   
2780                          ;*Macro unroll:  test "2 2 <=", TRUE
2780   31 00 4B               LD   SP,STACK   
2783   CD E1 0E               CALL   coldInit   
2786   CD D2 49               CALL   execStr   
2789   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2790   E1                     POP   HL   
2791   E5                     PUSH   HL   
2792   11 FF FF               LD   DE,TRUE   
2795   B7                     OR   A   
2796   ED 52                  SBC   HL,DE   
2798   7D                     LD   A,L   
2799   B4                     OR   H   
279A   CA F5 27               JP   Z,expectM_3116S97   
279D   CD AD 0E               CALL   printStr   
27A0   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
27AD   CD AD 0E               CALL   printStr   
27B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BF   21 FF FF               LD   hl,TRUE   
27C2   E5                     PUSH   hl   
27C3   E5                     PUSH   hl   
27C4   CD AF 0F               CALL   run   
27C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CF   CD AD 0E               CALL   printStr   
27D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DF   E1                     POP   hl   
27E0   E5                     PUSH   hl   
27E1   E5                     PUSH   hl   
27E2   CD AF 0F               CALL   run   
27E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F4   76                     HALT      
27F5                EXPECTM_3116S97:      
27F5   E1                     POP   HL   
27F6                          ;*Macro unroll:  test "2 2 >=", TRUE
27F6   31 00 4B               LD   SP,STACK   
27F9   CD E1 0E               CALL   coldInit   
27FC   CD D2 49               CALL   execStr   
27FF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2806   E1                     POP   HL   
2807   E5                     PUSH   HL   
2808   11 FF FF               LD   DE,TRUE   
280B   B7                     OR   A   
280C   ED 52                  SBC   HL,DE   
280E   7D                     LD   A,L   
280F   B4                     OR   H   
2810   CA 6B 28               JP   Z,expectM_3117S98   
2813   CD AD 0E               CALL   printStr   
2816   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2823   CD AD 0E               CALL   printStr   
2826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2835   21 FF FF               LD   hl,TRUE   
2838   E5                     PUSH   hl   
2839   E5                     PUSH   hl   
283A   CD AF 0F               CALL   run   
283D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2845   CD AD 0E               CALL   printStr   
2848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2855   E1                     POP   hl   
2856   E5                     PUSH   hl   
2857   E5                     PUSH   hl   
2858   CD AF 0F               CALL   run   
285B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
286A   76                     HALT      
286B                EXPECTM_3117S98:      
286B   E1                     POP   HL   
286C                          ;*Macro unroll:  test "3 1 <<", 6
286C   31 00 4B               LD   SP,STACK   
286F   CD E1 0E               CALL   coldInit   
2872   CD D2 49               CALL   execStr   
2875   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
287C   E1                     POP   HL   
287D   E5                     PUSH   HL   
287E   11 06 00               LD   DE,6   
2881   B7                     OR   A   
2882   ED 52                  SBC   HL,DE   
2884   7D                     LD   A,L   
2885   B4                     OR   H   
2886   CA E1 28               JP   Z,expectM_3118S99   
2889   CD AD 0E               CALL   printStr   
288C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2899   CD AD 0E               CALL   printStr   
289C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28AB   21 06 00               LD   hl,6   
28AE   E5                     PUSH   hl   
28AF   E5                     PUSH   hl   
28B0   CD AF 0F               CALL   run   
28B3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28BB   CD AD 0E               CALL   printStr   
28BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28CB   E1                     POP   hl   
28CC   E5                     PUSH   hl   
28CD   E5                     PUSH   hl   
28CE   CD AF 0F               CALL   run   
28D1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28E0   76                     HALT      
28E1                EXPECTM_3118S99:      
28E1   E1                     POP   HL   
28E2                          ;*Macro unroll:  test "10 1 >>", 5
28E2   31 00 4B               LD   SP,STACK   
28E5   CD E1 0E               CALL   coldInit   
28E8   CD D2 49               CALL   execStr   
28EB   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
28F3   E1                     POP   HL   
28F4   E5                     PUSH   HL   
28F5   11 05 00               LD   DE,5   
28F8   B7                     OR   A   
28F9   ED 52                  SBC   HL,DE   
28FB   7D                     LD   A,L   
28FC   B4                     OR   H   
28FD   CA 59 29               JP   Z,expectM_3119S100   
2900   CD AD 0E               CALL   printStr   
2903   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2911   CD AD 0E               CALL   printStr   
2914   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2923   21 05 00               LD   hl,5   
2926   E5                     PUSH   hl   
2927   E5                     PUSH   hl   
2928   CD AF 0F               CALL   run   
292B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2933   CD AD 0E               CALL   printStr   
2936   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2943   E1                     POP   hl   
2944   E5                     PUSH   hl   
2945   E5                     PUSH   hl   
2946   CD AF 0F               CALL   run   
2949   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2958   76                     HALT      
2959                EXPECTM_3119S100:      
2959   E1                     POP   HL   
295A                          ;*Macro unroll:  test "1 x = x", 1
295A   31 00 4B               LD   SP,STACK   
295D   CD E1 0E               CALL   coldInit   
2960   CD D2 49               CALL   execStr   
2963   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
296B   E1                     POP   HL   
296C   E5                     PUSH   HL   
296D   11 01 00               LD   DE,1   
2970   B7                     OR   A   
2971   ED 52                  SBC   HL,DE   
2973   7D                     LD   A,L   
2974   B4                     OR   H   
2975   CA D1 29               JP   Z,expectM_3120S101   
2978   CD AD 0E               CALL   printStr   
297B   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2989   CD AD 0E               CALL   printStr   
298C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
299B   21 01 00               LD   hl,1   
299E   E5                     PUSH   hl   
299F   E5                     PUSH   hl   
29A0   CD AF 0F               CALL   run   
29A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29AB   CD AD 0E               CALL   printStr   
29AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29BB   E1                     POP   hl   
29BC   E5                     PUSH   hl   
29BD   E5                     PUSH   hl   
29BE   CD AF 0F               CALL   run   
29C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29D0   76                     HALT      
29D1                EXPECTM_3120S101:      
29D1   E1                     POP   HL   
29D2                          ;*Macro unroll:  test "1{}^", 1
29D2   31 00 4B               LD   SP,STACK   
29D5   CD E1 0E               CALL   coldInit   
29D8   CD D2 49               CALL   execStr   
29DB   31 7B 7D 5E 00         DB   "1{}^",0   
29E0   E1                     POP   HL   
29E1   E5                     PUSH   HL   
29E2   11 01 00               LD   DE,1   
29E5   B7                     OR   A   
29E6   ED 52                  SBC   HL,DE   
29E8   7D                     LD   A,L   
29E9   B4                     OR   H   
29EA   CA 43 2A               JP   Z,expectM_3121S102   
29ED   CD AD 0E               CALL   printStr   
29F0   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
29FB   CD AD 0E               CALL   printStr   
29FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A0D   21 01 00               LD   hl,1   
2A10   E5                     PUSH   hl   
2A11   E5                     PUSH   hl   
2A12   CD AF 0F               CALL   run   
2A15   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A1D   CD AD 0E               CALL   printStr   
2A20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A2D   E1                     POP   hl   
2A2E   E5                     PUSH   hl   
2A2F   E5                     PUSH   hl   
2A30   CD AF 0F               CALL   run   
2A33   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A42   76                     HALT      
2A43                EXPECTM_3121S102:      
2A43   E1                     POP   HL   
2A44                          ;*Macro unroll:  test "{1}^", 1
2A44   31 00 4B               LD   SP,STACK   
2A47   CD E1 0E               CALL   coldInit   
2A4A   CD D2 49               CALL   execStr   
2A4D   7B 31 7D 5E 00         DB   "{1}^",0   
2A52   E1                     POP   HL   
2A53   E5                     PUSH   HL   
2A54   11 01 00               LD   DE,1   
2A57   B7                     OR   A   
2A58   ED 52                  SBC   HL,DE   
2A5A   7D                     LD   A,L   
2A5B   B4                     OR   H   
2A5C   CA B5 2A               JP   Z,expectM_3122S103   
2A5F   CD AD 0E               CALL   printStr   
2A62   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2A6D   CD AD 0E               CALL   printStr   
2A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A7F   21 01 00               LD   hl,1   
2A82   E5                     PUSH   hl   
2A83   E5                     PUSH   hl   
2A84   CD AF 0F               CALL   run   
2A87   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A8F   CD AD 0E               CALL   printStr   
2A92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A9F   E1                     POP   hl   
2AA0   E5                     PUSH   hl   
2AA1   E5                     PUSH   hl   
2AA2   CD AF 0F               CALL   run   
2AA5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AB4   76                     HALT      
2AB5                EXPECTM_3122S103:      
2AB5   E1                     POP   HL   
2AB6                          ;*Macro unroll:  test "{{1}^}^", 1
2AB6   31 00 4B               LD   SP,STACK   
2AB9   CD E1 0E               CALL   coldInit   
2ABC   CD D2 49               CALL   execStr   
2ABF   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2AC7   E1                     POP   HL   
2AC8   E5                     PUSH   HL   
2AC9   11 01 00               LD   DE,1   
2ACC   B7                     OR   A   
2ACD   ED 52                  SBC   HL,DE   
2ACF   7D                     LD   A,L   
2AD0   B4                     OR   H   
2AD1   CA 2D 2B               JP   Z,expectM_3123S104   
2AD4   CD AD 0E               CALL   printStr   
2AD7   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2AE5   CD AD 0E               CALL   printStr   
2AE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF7   21 01 00               LD   hl,1   
2AFA   E5                     PUSH   hl   
2AFB   E5                     PUSH   hl   
2AFC   CD AF 0F               CALL   run   
2AFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B07   CD AD 0E               CALL   printStr   
2B0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B17   E1                     POP   hl   
2B18   E5                     PUSH   hl   
2B19   E5                     PUSH   hl   
2B1A   CD AF 0F               CALL   run   
2B1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B2C   76                     HALT      
2B2D                EXPECTM_3123S104:      
2B2D   E1                     POP   HL   
2B2E                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2B2E   31 00 4B               LD   SP,STACK   
2B31   CD E1 0E               CALL   coldInit   
2B34   CD D2 49               CALL   execStr   
2B37   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2B42   E1                     POP   HL   
2B43   E5                     PUSH   HL   
2B44   11 01 00               LD   DE,1   
2B47   B7                     OR   A   
2B48   ED 52                  SBC   HL,DE   
2B4A   7D                     LD   A,L   
2B4B   B4                     OR   H   
2B4C   CA AB 2B               JP   Z,expectM_3124S105   
2B4F   CD AD 0E               CALL   printStr   
2B52   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2B63   CD AD 0E               CALL   printStr   
2B66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B75   21 01 00               LD   hl,1   
2B78   E5                     PUSH   hl   
2B79   E5                     PUSH   hl   
2B7A   CD AF 0F               CALL   run   
2B7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B85   CD AD 0E               CALL   printStr   
2B88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B95   E1                     POP   hl   
2B96   E5                     PUSH   hl   
2B97   E5                     PUSH   hl   
2B98   CD AF 0F               CALL   run   
2B9B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BAA   76                     HALT      
2BAB                EXPECTM_3124S105:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test "5 /f{10} ?", 5
2BAC   31 00 4B               LD   SP,STACK   
2BAF   CD E1 0E               CALL   coldInit   
2BB2   CD D2 49               CALL   execStr   
2BB5   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2BC0   E1                     POP   HL   
2BC1   E5                     PUSH   HL   
2BC2   11 05 00               LD   DE,5   
2BC5   B7                     OR   A   
2BC6   ED 52                  SBC   HL,DE   
2BC8   7D                     LD   A,L   
2BC9   B4                     OR   H   
2BCA   CA 29 2C               JP   Z,expectM_3125S106   
2BCD   CD AD 0E               CALL   printStr   
2BD0   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2BE1   CD AD 0E               CALL   printStr   
2BE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF3   21 05 00               LD   hl,5   
2BF6   E5                     PUSH   hl   
2BF7   E5                     PUSH   hl   
2BF8   CD AF 0F               CALL   run   
2BFB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C03   CD AD 0E               CALL   printStr   
2C06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C13   E1                     POP   hl   
2C14   E5                     PUSH   hl   
2C15   E5                     PUSH   hl   
2C16   CD AF 0F               CALL   run   
2C19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C28   76                     HALT      
2C29                EXPECTM_3125S106:      
2C29   E1                     POP   HL   
2C2A                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2C2A   31 00 4B               LD   SP,STACK   
2C2D   CD E1 0E               CALL   coldInit   
2C30   CD D2 49               CALL   execStr   
2C33   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2C40   E1                     POP   HL   
2C41   E5                     PUSH   HL   
2C42   11 0F 00               LD   DE,15   
2C45   B7                     OR   A   
2C46   ED 52                  SBC   HL,DE   
2C48   7D                     LD   A,L   
2C49   B4                     OR   H   
2C4A   CA AB 2C               JP   Z,expectM_3126S107   
2C4D   CD AD 0E               CALL   printStr   
2C50   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2C63   CD AD 0E               CALL   printStr   
2C66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C75   21 0F 00               LD   hl,15   
2C78   E5                     PUSH   hl   
2C79   E5                     PUSH   hl   
2C7A   CD AF 0F               CALL   run   
2C7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C85   CD AD 0E               CALL   printStr   
2C88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C95   E1                     POP   hl   
2C96   E5                     PUSH   hl   
2C97   E5                     PUSH   hl   
2C98   CD AF 0F               CALL   run   
2C9B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CAA   76                     HALT      
2CAB                EXPECTM_3126S107:      
2CAB   E1                     POP   HL   
2CAC                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2CAC   31 00 4B               LD   SP,STACK   
2CAF   CD E1 0E               CALL   coldInit   
2CB2   CD D2 49               CALL   execStr   
2CB5   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2CC7   E1                     POP   HL   
2CC8   E5                     PUSH   HL   
2CC9   11 15 00               LD   DE,21   
2CCC   B7                     OR   A   
2CCD   ED 52                  SBC   HL,DE   
2CCF   7D                     LD   A,L   
2CD0   B4                     OR   H   
2CD1   CA 37 2D               JP   Z,expectM_3127S108   
2CD4   CD AD 0E               CALL   printStr   
2CD7   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2CEF   CD AD 0E               CALL   printStr   
2CF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D01   21 15 00               LD   hl,21   
2D04   E5                     PUSH   hl   
2D05   E5                     PUSH   hl   
2D06   CD AF 0F               CALL   run   
2D09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D11   CD AD 0E               CALL   printStr   
2D14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D21   E1                     POP   hl   
2D22   E5                     PUSH   hl   
2D23   E5                     PUSH   hl   
2D24   CD AF 0F               CALL   run   
2D27   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D36   76                     HALT      
2D37                EXPECTM_3127S108:      
2D37   E1                     POP   HL   
2D38                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2D38   31 00 4B               LD   SP,STACK   
2D3B   CD E1 0E               CALL   coldInit   
2D3E   CD D2 49               CALL   execStr   
2D41   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2D53   E1                     POP   HL   
2D54   E5                     PUSH   HL   
2D55   11 0B 00               LD   DE,11   
2D58   B7                     OR   A   
2D59   ED 52                  SBC   HL,DE   
2D5B   7D                     LD   A,L   
2D5C   B4                     OR   H   
2D5D   CA C3 2D               JP   Z,expectM_3128S109   
2D60   CD AD 0E               CALL   printStr   
2D63   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2D7B   CD AD 0E               CALL   printStr   
2D7E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D8D   21 0B 00               LD   hl,11   
2D90   E5                     PUSH   hl   
2D91   E5                     PUSH   hl   
2D92   CD AF 0F               CALL   run   
2D95   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D9D   CD AD 0E               CALL   printStr   
2DA0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DAD   E1                     POP   hl   
2DAE   E5                     PUSH   hl   
2DAF   E5                     PUSH   hl   
2DB0   CD AF 0F               CALL   run   
2DB3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DC2   76                     HALT      
2DC3                EXPECTM_3128S109:      
2DC3   E1                     POP   HL   
2DC4                          ;*Macro unroll:  test "\\{2}^", 2
2DC4   31 00 4B               LD   SP,STACK   
2DC7   CD E1 0E               CALL   coldInit   
2DCA   CD D2 49               CALL   execStr   
2DCD   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2DD3   E1                     POP   HL   
2DD4   E5                     PUSH   HL   
2DD5   11 02 00               LD   DE,2   
2DD8   B7                     OR   A   
2DD9   ED 52                  SBC   HL,DE   
2DDB   7D                     LD   A,L   
2DDC   B4                     OR   H   
2DDD   CA 37 2E               JP   Z,expectM_3129S110   
2DE0   CD AD 0E               CALL   printStr   
2DE3   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2DEF   CD AD 0E               CALL   printStr   
2DF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E01   21 02 00               LD   hl,2   
2E04   E5                     PUSH   hl   
2E05   E5                     PUSH   hl   
2E06   CD AF 0F               CALL   run   
2E09   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E11   CD AD 0E               CALL   printStr   
2E14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E21   E1                     POP   hl   
2E22   E5                     PUSH   hl   
2E23   E5                     PUSH   hl   
2E24   CD AF 0F               CALL   run   
2E27   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E36   76                     HALT      
2E37                EXPECTM_3129S110:      
2E37   E1                     POP   HL   
2E38                          ;*Macro unroll:  test "\\a{2}^", 2
2E38   31 00 4B               LD   SP,STACK   
2E3B   CD E1 0E               CALL   coldInit   
2E3E   CD D2 49               CALL   execStr   
2E41   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2E48   E1                     POP   HL   
2E49   E5                     PUSH   HL   
2E4A   11 02 00               LD   DE,2   
2E4D   B7                     OR   A   
2E4E   ED 52                  SBC   HL,DE   
2E50   7D                     LD   A,L   
2E51   B4                     OR   H   
2E52   CA AD 2E               JP   Z,expectM_3130S111   
2E55   CD AD 0E               CALL   printStr   
2E58   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2E65   CD AD 0E               CALL   printStr   
2E68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E77   21 02 00               LD   hl,2   
2E7A   E5                     PUSH   hl   
2E7B   E5                     PUSH   hl   
2E7C   CD AF 0F               CALL   run   
2E7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E87   CD AD 0E               CALL   printStr   
2E8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E97   E1                     POP   hl   
2E98   E5                     PUSH   hl   
2E99   E5                     PUSH   hl   
2E9A   CD AF 0F               CALL   run   
2E9D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EAC   76                     HALT      
2EAD                EXPECTM_3130S111:      
2EAD   E1                     POP   HL   
2EAE                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2EAE   31 00 4B               LD   SP,STACK   
2EB1   CD E1 0E               CALL   coldInit   
2EB4   CD D2 49               CALL   execStr   
2EB7   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2EC1   E1                     POP   HL   
2EC2   E5                     PUSH   HL   
2EC3   11 05 00               LD   DE,5   
2EC6   B7                     OR   A   
2EC7   ED 52                  SBC   HL,DE   
2EC9   7D                     LD   A,L   
2ECA   B4                     OR   H   
2ECB   CA 29 2F               JP   Z,expectM_3131S112   
2ECE   CD AD 0E               CALL   printStr   
2ED1   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2EE1   CD AD 0E               CALL   printStr   
2EE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF3   21 05 00               LD   hl,5   
2EF6   E5                     PUSH   hl   
2EF7   E5                     PUSH   hl   
2EF8   CD AF 0F               CALL   run   
2EFB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F03   CD AD 0E               CALL   printStr   
2F06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F13   E1                     POP   hl   
2F14   E5                     PUSH   hl   
2F15   E5                     PUSH   hl   
2F16   CD AF 0F               CALL   run   
2F19   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F28   76                     HALT      
2F29                EXPECTM_3131S112:      
2F29   E1                     POP   HL   
2F2A                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2F2A   31 00 4B               LD   SP,STACK   
2F2D   CD E1 0E               CALL   coldInit   
2F30   CD D2 49               CALL   execStr   
2F33   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2F3F   E1                     POP   HL   
2F40   E5                     PUSH   HL   
2F41   11 05 00               LD   DE,5   
2F44   B7                     OR   A   
2F45   ED 52                  SBC   HL,DE   
2F47   7D                     LD   A,L   
2F48   B4                     OR   H   
2F49   CA A9 2F               JP   Z,expectM_3132S113   
2F4C   CD AD 0E               CALL   printStr   
2F4F   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2F61   CD AD 0E               CALL   printStr   
2F64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F73   21 05 00               LD   hl,5   
2F76   E5                     PUSH   hl   
2F77   E5                     PUSH   hl   
2F78   CD AF 0F               CALL   run   
2F7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F83   CD AD 0E               CALL   printStr   
2F86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F93   E1                     POP   hl   
2F94   E5                     PUSH   hl   
2F95   E5                     PUSH   hl   
2F96   CD AF 0F               CALL   run   
2F99   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FA8   76                     HALT      
2FA9                EXPECTM_3132S113:      
2FA9   E1                     POP   HL   
2FAA                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2FAA   31 00 4B               LD   SP,STACK   
2FAD   CD E1 0E               CALL   coldInit   
2FB0   CD D2 49               CALL   execStr   
2FB3   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2FBD   E1                     POP   HL   
2FBE   E5                     PUSH   HL   
2FBF   11 02 00               LD   DE,2   
2FC2   B7                     OR   A   
2FC3   ED 52                  SBC   HL,DE   
2FC5   7D                     LD   A,L   
2FC6   B4                     OR   H   
2FC7   CA 25 30               JP   Z,expectM_3133S114   
2FCA   CD AD 0E               CALL   printStr   
2FCD   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
2FDD   CD AD 0E               CALL   printStr   
2FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FEF   21 02 00               LD   hl,2   
2FF2   E5                     PUSH   hl   
2FF3   E5                     PUSH   hl   
2FF4   CD AF 0F               CALL   run   
2FF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FFF   CD AD 0E               CALL   printStr   
3002   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300F   E1                     POP   hl   
3010   E5                     PUSH   hl   
3011   E5                     PUSH   hl   
3012   CD AF 0F               CALL   run   
3015   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3024   76                     HALT      
3025                EXPECTM_3133S114:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3026   31 00 4B               LD   SP,STACK   
3029   CD E1 0E               CALL   coldInit   
302C   CD D2 49               CALL   execStr   
302F   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
303E   E1                     POP   HL   
303F   E5                     PUSH   HL   
3040   11 05 00               LD   DE,5   
3043   B7                     OR   A   
3044   ED 52                  SBC   HL,DE   
3046   7D                     LD   A,L   
3047   B4                     OR   H   
3048   CA AB 30               JP   Z,expectM_3134S115   
304B   CD AD 0E               CALL   printStr   
304E   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3063   CD AD 0E               CALL   printStr   
3066   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3075   21 05 00               LD   hl,5   
3078   E5                     PUSH   hl   
3079   E5                     PUSH   hl   
307A   CD AF 0F               CALL   run   
307D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3085   CD AD 0E               CALL   printStr   
3088   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3095   E1                     POP   hl   
3096   E5                     PUSH   hl   
3097   E5                     PUSH   hl   
3098   CD AF 0F               CALL   run   
309B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30AA   76                     HALT      
30AB                EXPECTM_3134S115:      
30AB   E1                     POP   HL   
30AC                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
30AC   31 00 4B               LD   SP,STACK   
30AF   CD E1 0E               CALL   coldInit   
30B2   CD D2 49               CALL   execStr   
30B5   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
30C5   E1                     POP   HL   
30C6   E5                     PUSH   HL   
30C7   11 01 00               LD   DE,1   
30CA   B7                     OR   A   
30CB   ED 52                  SBC   HL,DE   
30CD   7D                     LD   A,L   
30CE   B4                     OR   H   
30CF   CA 33 31               JP   Z,expectM_3135S116   
30D2   CD AD 0E               CALL   printStr   
30D5   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
30EB   CD AD 0E               CALL   printStr   
30EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30FD   21 01 00               LD   hl,1   
3100   E5                     PUSH   hl   
3101   E5                     PUSH   hl   
3102   CD AF 0F               CALL   run   
3105   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
310D   CD AD 0E               CALL   printStr   
3110   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
311D   E1                     POP   hl   
311E   E5                     PUSH   hl   
311F   E5                     PUSH   hl   
3120   CD AF 0F               CALL   run   
3123   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3132   76                     HALT      
3133                EXPECTM_3135S116:      
3133   E1                     POP   HL   
3134                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3134   31 00 4B               LD   SP,STACK   
3137   CD E1 0E               CALL   coldInit   
313A   CD D2 49               CALL   execStr   
313D   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3150   E1                     POP   HL   
3151   E5                     PUSH   HL   
3152   11 07 00               LD   DE,7   
3155   B7                     OR   A   
3156   ED 52                  SBC   HL,DE   
3158   7D                     LD   A,L   
3159   B4                     OR   H   
315A   CA C1 31               JP   Z,expectM_3136S117   
315D   CD AD 0E               CALL   printStr   
3160   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3179   CD AD 0E               CALL   printStr   
317C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
318B   21 07 00               LD   hl,7   
318E   E5                     PUSH   hl   
318F   E5                     PUSH   hl   
3190   CD AF 0F               CALL   run   
3193   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
319B   CD AD 0E               CALL   printStr   
319E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31AB   E1                     POP   hl   
31AC   E5                     PUSH   hl   
31AD   E5                     PUSH   hl   
31AE   CD AF 0F               CALL   run   
31B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31C0   76                     HALT      
31C1                EXPECTM_3136S117:      
31C1   E1                     POP   HL   
31C2                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
31C2   31 00 4B               LD   SP,STACK   
31C5   CD E1 0E               CALL   coldInit   
31C8   CD D2 49               CALL   execStr   
31CB   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
31E0   E1                     POP   HL   
31E1   E5                     PUSH   HL   
31E2   11 06 00               LD   DE,6   
31E5   B7                     OR   A   
31E6   ED 52                  SBC   HL,DE   
31E8   7D                     LD   A,L   
31E9   B4                     OR   H   
31EA   CA 53 32               JP   Z,expectM_3137S118   
31ED   CD AD 0E               CALL   printStr   
31F0   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
320B   CD AD 0E               CALL   printStr   
320E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
321D   21 06 00               LD   hl,6   
3220   E5                     PUSH   hl   
3221   E5                     PUSH   hl   
3222   CD AF 0F               CALL   run   
3225   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
322D   CD AD 0E               CALL   printStr   
3230   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
323D   E1                     POP   hl   
323E   E5                     PUSH   hl   
323F   E5                     PUSH   hl   
3240   CD AF 0F               CALL   run   
3243   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3252   76                     HALT      
3253                EXPECTM_3137S118:      
3253   E1                     POP   HL   
3254                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3254   31 00 4B               LD   SP,STACK   
3257   CD E1 0E               CALL   coldInit   
325A   CD D2 49               CALL   execStr   
325D   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
326B   E1                     POP   HL   
326C   E5                     PUSH   HL   
326D   11 02 00               LD   DE,2   
3270   B7                     OR   A   
3271   ED 52                  SBC   HL,DE   
3273   7D                     LD   A,L   
3274   B4                     OR   H   
3275   CA D7 32               JP   Z,expectM_3138S119   
3278   CD AD 0E               CALL   printStr   
327B   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
328F   CD AD 0E               CALL   printStr   
3292   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A1   21 02 00               LD   hl,2   
32A4   E5                     PUSH   hl   
32A5   E5                     PUSH   hl   
32A6   CD AF 0F               CALL   run   
32A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B1   CD AD 0E               CALL   printStr   
32B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C1   E1                     POP   hl   
32C2   E5                     PUSH   hl   
32C3   E5                     PUSH   hl   
32C4   CD AF 0F               CALL   run   
32C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D6   76                     HALT      
32D7                EXPECTM_3138S119:      
32D7   E1                     POP   HL   
32D8                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
32D8   31 00 4B               LD   SP,STACK   
32DB   CD E1 0E               CALL   coldInit   
32DE   CD D2 49               CALL   execStr   
32E1   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
32F2   E1                     POP   HL   
32F3   E5                     PUSH   HL   
32F4   11 01 00               LD   DE,1   
32F7   B7                     OR   A   
32F8   ED 52                  SBC   HL,DE   
32FA   7D                     LD   A,L   
32FB   B4                     OR   H   
32FC   CA 61 33               JP   Z,expectM_3139S120   
32FF   CD AD 0E               CALL   printStr   
3302   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3319   CD AD 0E               CALL   printStr   
331C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
332B   21 01 00               LD   hl,1   
332E   E5                     PUSH   hl   
332F   E5                     PUSH   hl   
3330   CD AF 0F               CALL   run   
3333   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
333B   CD AD 0E               CALL   printStr   
333E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
334B   E1                     POP   hl   
334C   E5                     PUSH   hl   
334D   E5                     PUSH   hl   
334E   CD AF 0F               CALL   run   
3351   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3360   76                     HALT      
3361                EXPECTM_3139S120:      
3361   E1                     POP   HL   
3362                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3362   31 00 4B               LD   SP,STACK   
3365   CD E1 0E               CALL   coldInit   
3368   CD D2 49               CALL   execStr   
336B   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
337D   E1                     POP   HL   
337E   E5                     PUSH   HL   
337F   11 02 00               LD   DE,2   
3382   B7                     OR   A   
3383   ED 52                  SBC   HL,DE   
3385   7D                     LD   A,L   
3386   B4                     OR   H   
3387   CA ED 33               JP   Z,expectM_3140S121   
338A   CD AD 0E               CALL   printStr   
338D   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
33A5   CD AD 0E               CALL   printStr   
33A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33B7   21 02 00               LD   hl,2   
33BA   E5                     PUSH   hl   
33BB   E5                     PUSH   hl   
33BC   CD AF 0F               CALL   run   
33BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33C7   CD AD 0E               CALL   printStr   
33CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D7   E1                     POP   hl   
33D8   E5                     PUSH   hl   
33D9   E5                     PUSH   hl   
33DA   CD AF 0F               CALL   run   
33DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33EC   76                     HALT      
33ED                EXPECTM_3140S121:      
33ED   E1                     POP   HL   
33EE                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
33EE   31 00 4B               LD   SP,STACK   
33F1   CD E1 0E               CALL   coldInit   
33F4   CD D2 49               CALL   execStr   
33F7   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
340A   E1                     POP   HL   
340B   E5                     PUSH   HL   
340C   11 02 00               LD   DE,2   
340F   B7                     OR   A   
3410   ED 52                  SBC   HL,DE   
3412   7D                     LD   A,L   
3413   B4                     OR   H   
3414   CA 7B 34               JP   Z,expectM_3141S122   
3417   CD AD 0E               CALL   printStr   
341A   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3433   CD AD 0E               CALL   printStr   
3436   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3445   21 02 00               LD   hl,2   
3448   E5                     PUSH   hl   
3449   E5                     PUSH   hl   
344A   CD AF 0F               CALL   run   
344D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3455   CD AD 0E               CALL   printStr   
3458   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3465   E1                     POP   hl   
3466   E5                     PUSH   hl   
3467   E5                     PUSH   hl   
3468   CD AF 0F               CALL   run   
346B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
347A   76                     HALT      
347B                EXPECTM_3141S122:      
347B   E1                     POP   HL   
347C                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
347C   31 00 4B               LD   SP,STACK   
347F   CD E1 0E               CALL   coldInit   
3482   CD D2 49               CALL   execStr   
3485   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3497   E1                     POP   HL   
3498   E5                     PUSH   HL   
3499   11 02 00               LD   DE,2   
349C   B7                     OR   A   
349D   ED 52                  SBC   HL,DE   
349F   7D                     LD   A,L   
34A0   B4                     OR   H   
34A1   CA 07 35               JP   Z,expectM_3142S123   
34A4   CD AD 0E               CALL   printStr   
34A7   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
34BF   CD AD 0E               CALL   printStr   
34C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34D1   21 02 00               LD   hl,2   
34D4   E5                     PUSH   hl   
34D5   E5                     PUSH   hl   
34D6   CD AF 0F               CALL   run   
34D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34E1   CD AD 0E               CALL   printStr   
34E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34F1   E1                     POP   hl   
34F2   E5                     PUSH   hl   
34F3   E5                     PUSH   hl   
34F4   CD AF 0F               CALL   run   
34F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3506   76                     HALT      
3507                EXPECTM_3142S123:      
3507   E1                     POP   HL   
3508                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3508   31 00 4B               LD   SP,STACK   
350B   CD E1 0E               CALL   coldInit   
350E   CD D2 49               CALL   execStr   
3511   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
352A   E1                     POP   HL   
352B   E5                     PUSH   HL   
352C   11 05 00               LD   DE,5   
352F   B7                     OR   A   
3530   ED 52                  SBC   HL,DE   
3532   7D                     LD   A,L   
3533   B4                     OR   H   
3534   CA A1 35               JP   Z,expectM_3143S124   
3537   CD AD 0E               CALL   printStr   
353A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3559   CD AD 0E               CALL   printStr   
355C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
356B   21 05 00               LD   hl,5   
356E   E5                     PUSH   hl   
356F   E5                     PUSH   hl   
3570   CD AF 0F               CALL   run   
3573   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
357B   CD AD 0E               CALL   printStr   
357E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
358B   E1                     POP   hl   
358C   E5                     PUSH   hl   
358D   E5                     PUSH   hl   
358E   CD AF 0F               CALL   run   
3591   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35A0   76                     HALT      
35A1                EXPECTM_3143S124:      
35A1   E1                     POP   HL   
35A2                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
35A2   31 00 4B               LD   SP,STACK   
35A5   CD E1 0E               CALL   coldInit   
35A8   CD D2 49               CALL   execStr   
35AB   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
35BB   E1                     POP   HL   
35BC   E5                     PUSH   HL   
35BD   11 02 00               LD   DE,2   
35C0   B7                     OR   A   
35C1   ED 52                  SBC   HL,DE   
35C3   7D                     LD   A,L   
35C4   B4                     OR   H   
35C5   CA 29 36               JP   Z,expectM_3144S125   
35C8   CD AD 0E               CALL   printStr   
35CB   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
35E1   CD AD 0E               CALL   printStr   
35E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F3   21 02 00               LD   hl,2   
35F6   E5                     PUSH   hl   
35F7   E5                     PUSH   hl   
35F8   CD AF 0F               CALL   run   
35FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3603   CD AD 0E               CALL   printStr   
3606   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3613   E1                     POP   hl   
3614   E5                     PUSH   hl   
3615   E5                     PUSH   hl   
3616   CD AF 0F               CALL   run   
3619   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3628   76                     HALT      
3629                EXPECTM_3144S125:      
3629   E1                     POP   HL   
362A                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
362A   31 00 4B               LD   SP,STACK   
362D   CD E1 0E               CALL   coldInit   
3630   CD D2 49               CALL   execStr   
3633   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
364A   E1                     POP   HL   
364B   E5                     PUSH   HL   
364C   11 64 00               LD   DE,100   
364F   B7                     OR   A   
3650   ED 52                  SBC   HL,DE   
3652   7D                     LD   A,L   
3653   B4                     OR   H   
3654   CA BF 36               JP   Z,expectM_3145S126   
3657   CD AD 0E               CALL   printStr   
365A   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3677   CD AD 0E               CALL   printStr   
367A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3689   21 64 00               LD   hl,100   
368C   E5                     PUSH   hl   
368D   E5                     PUSH   hl   
368E   CD AF 0F               CALL   run   
3691   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3699   CD AD 0E               CALL   printStr   
369C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36A9   E1                     POP   hl   
36AA   E5                     PUSH   hl   
36AB   E5                     PUSH   hl   
36AC   CD AF 0F               CALL   run   
36AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36BE   76                     HALT      
36BF                EXPECTM_3145S126:      
36BF   E1                     POP   HL   
36C0                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
36C0   31 00 4B               LD   SP,STACK   
36C3   CD E1 0E               CALL   coldInit   
36C6   CD D2 49               CALL   execStr   
36C9   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
36E1   E1                     POP   HL   
36E2   E5                     PUSH   HL   
36E3   11 01 00               LD   DE,1   
36E6   B7                     OR   A   
36E7   ED 52                  SBC   HL,DE   
36E9   7D                     LD   A,L   
36EA   B4                     OR   H   
36EB   CA 57 37               JP   Z,expectM_3146S127   
36EE   CD AD 0E               CALL   printStr   
36F1   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
370F   CD AD 0E               CALL   printStr   
3712   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3721   21 01 00               LD   hl,1   
3724   E5                     PUSH   hl   
3725   E5                     PUSH   hl   
3726   CD AF 0F               CALL   run   
3729   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3731   CD AD 0E               CALL   printStr   
3734   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3741   E1                     POP   hl   
3742   E5                     PUSH   hl   
3743   E5                     PUSH   hl   
3744   CD AF 0F               CALL   run   
3747   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3756   76                     HALT      
3757                EXPECTM_3146S127:      
3757   E1                     POP   HL   
3758                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3758   31 00 4B               LD   SP,STACK   
375B   CD E1 0E               CALL   coldInit   
375E   CD D2 49               CALL   execStr   
3761   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
377A   E1                     POP   HL   
377B   E5                     PUSH   HL   
377C   11 02 00               LD   DE,2   
377F   B7                     OR   A   
3780   ED 52                  SBC   HL,DE   
3782   7D                     LD   A,L   
3783   B4                     OR   H   
3784   CA F1 37               JP   Z,expectM_3147S128   
3787   CD AD 0E               CALL   printStr   
378A   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
37A9   CD AD 0E               CALL   printStr   
37AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37BB   21 02 00               LD   hl,2   
37BE   E5                     PUSH   hl   
37BF   E5                     PUSH   hl   
37C0   CD AF 0F               CALL   run   
37C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37CB   CD AD 0E               CALL   printStr   
37CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37DB   E1                     POP   hl   
37DC   E5                     PUSH   hl   
37DD   E5                     PUSH   hl   
37DE   CD AF 0F               CALL   run   
37E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37F0   76                     HALT      
37F1                EXPECTM_3147S128:      
37F1   E1                     POP   HL   
37F2                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
37F2   31 00 4B               LD   SP,STACK   
37F5   CD E1 0E               CALL   coldInit   
37F8   CD D2 49               CALL   execStr   
37FB   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3819   E1                     POP   HL   
381A   E5                     PUSH   HL   
381B   11 0B 00               LD   DE,11   
381E   B7                     OR   A   
381F   ED 52                  SBC   HL,DE   
3821   7D                     LD   A,L   
3822   B4                     OR   H   
3823   CA 95 38               JP   Z,expectM_3148S129   
3826   CD AD 0E               CALL   printStr   
3829   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
384D   CD AD 0E               CALL   printStr   
3850   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
385F   21 0B 00               LD   hl,11   
3862   E5                     PUSH   hl   
3863   E5                     PUSH   hl   
3864   CD AF 0F               CALL   run   
3867   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
386F   CD AD 0E               CALL   printStr   
3872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
387F   E1                     POP   hl   
3880   E5                     PUSH   hl   
3881   E5                     PUSH   hl   
3882   CD AF 0F               CALL   run   
3885   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3894   76                     HALT      
3895                EXPECTM_3148S129:      
3895   E1                     POP   HL   
3896                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3896   31 00 4B               LD   SP,STACK   
3899   CD E1 0E               CALL   coldInit   
389C   CD D2 49               CALL   execStr   
389F   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
38BD   E1                     POP   HL   
38BE   E5                     PUSH   HL   
38BF   11 15 00               LD   DE,21   
38C2   B7                     OR   A   
38C3   ED 52                  SBC   HL,DE   
38C5   7D                     LD   A,L   
38C6   B4                     OR   H   
38C7   CA 39 39               JP   Z,expectM_3149S130   
38CA   CD AD 0E               CALL   printStr   
38CD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
38F1   CD AD 0E               CALL   printStr   
38F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3903   21 15 00               LD   hl,21   
3906   E5                     PUSH   hl   
3907   E5                     PUSH   hl   
3908   CD AF 0F               CALL   run   
390B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3913   CD AD 0E               CALL   printStr   
3916   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3923   E1                     POP   hl   
3924   E5                     PUSH   hl   
3925   E5                     PUSH   hl   
3926   CD AF 0F               CALL   run   
3929   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3938   76                     HALT      
3939                EXPECTM_3149S130:      
3939   E1                     POP   HL   
393A                          ;*Macro unroll:  test "[10 20 30] 1#", 20
393A   31 00 4B               LD   SP,STACK   
393D   CD E1 0E               CALL   coldInit   
3940   CD D2 49               CALL   execStr   
3943   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3951   E1                     POP   HL   
3952   E5                     PUSH   HL   
3953   11 14 00               LD   DE,20   
3956   B7                     OR   A   
3957   ED 52                  SBC   HL,DE   
3959   7D                     LD   A,L   
395A   B4                     OR   H   
395B   CA BD 39               JP   Z,expectM_3150S131   
395E   CD AD 0E               CALL   printStr   
3961   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3975   CD AD 0E               CALL   printStr   
3978   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3987   21 14 00               LD   hl,20   
398A   E5                     PUSH   hl   
398B   E5                     PUSH   hl   
398C   CD AF 0F               CALL   run   
398F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3997   CD AD 0E               CALL   printStr   
399A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A7   E1                     POP   hl   
39A8   E5                     PUSH   hl   
39A9   E5                     PUSH   hl   
39AA   CD AF 0F               CALL   run   
39AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39BC   76                     HALT      
39BD                EXPECTM_3150S131:      
39BD   E1                     POP   HL   
39BE                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
39BE   31 00 4B               LD   SP,STACK   
39C1   CD E1 0E               CALL   coldInit   
39C4   CD D2 49               CALL   execStr   
39C7   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
39D9   E1                     POP   HL   
39DA   E5                     PUSH   HL   
39DB   11 04 00               LD   DE,4   
39DE   B7                     OR   A   
39DF   ED 52                  SBC   HL,DE   
39E1   7D                     LD   A,L   
39E2   B4                     OR   H   
39E3   CA 49 3A               JP   Z,expectM_3151S132   
39E6   CD AD 0E               CALL   printStr   
39E9   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3A01   CD AD 0E               CALL   printStr   
3A04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A13   21 04 00               LD   hl,4   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD AF 0F               CALL   run   
3A1B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A23   CD AD 0E               CALL   printStr   
3A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A33   E1                     POP   hl   
3A34   E5                     PUSH   hl   
3A35   E5                     PUSH   hl   
3A36   CD AF 0F               CALL   run   
3A39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A48   76                     HALT      
3A49                EXPECTM_3151S132:      
3A49   E1                     POP   HL   
3A4A                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3A4A   31 00 4B               LD   SP,STACK   
3A4D   CD E1 0E               CALL   coldInit   
3A50   CD D2 49               CALL   execStr   
3A53   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3A61   E1                     POP   HL   
3A62   E5                     PUSH   HL   
3A63   11 02 00               LD   DE,2   
3A66   B7                     OR   A   
3A67   ED 52                  SBC   HL,DE   
3A69   7D                     LD   A,L   
3A6A   B4                     OR   H   
3A6B   CA CD 3A               JP   Z,expectM_3152S133   
3A6E   CD AD 0E               CALL   printStr   
3A71   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3A85   CD AD 0E               CALL   printStr   
3A88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A97   21 02 00               LD   hl,2   
3A9A   E5                     PUSH   hl   
3A9B   E5                     PUSH   hl   
3A9C   CD AF 0F               CALL   run   
3A9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AA7   CD AD 0E               CALL   printStr   
3AAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AB7   E1                     POP   hl   
3AB8   E5                     PUSH   hl   
3AB9   E5                     PUSH   hl   
3ABA   CD AF 0F               CALL   run   
3ABD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ACC   76                     HALT      
3ACD                EXPECTM_3152S133:      
3ACD   E1                     POP   HL   
3ACE                          ;*Macro unroll:  test "/b [~A ~B ~C] 1#", 66
3ACE   31 00 4B               LD   SP,STACK   
3AD1   CD E1 0E               CALL   coldInit   
3AD4   CD D2 49               CALL   execStr   
3AD7   2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/b [~A ~B ~C] 1#",0   
3AE8   E1                     POP   HL   
3AE9   E5                     PUSH   HL   
3AEA   11 42 00               LD   DE,66   
3AED   B7                     OR   A   
3AEE   ED 52                  SBC   HL,DE   
3AF0   7D                     LD   A,L   
3AF1   B4                     OR   H   
3AF2   CA 57 3B               JP   Z,expectM_3153S134   
3AF5   CD AD 0E               CALL   printStr   
3AF8   43 6F 64 65 3A 20 2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/b [~A ~B ~C] 1#"   
3B0F   CD AD 0E               CALL   printStr   
3B12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B21   21 42 00               LD   hl,66   
3B24   E5                     PUSH   hl   
3B25   E5                     PUSH   hl   
3B26   CD AF 0F               CALL   run   
3B29   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B31   CD AD 0E               CALL   printStr   
3B34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B41   E1                     POP   hl   
3B42   E5                     PUSH   hl   
3B43   E5                     PUSH   hl   
3B44   CD AF 0F               CALL   run   
3B47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B56   76                     HALT      
3B57                EXPECTM_3153S134:      
3B57   E1                     POP   HL   
3B58                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B58   31 00 4B               LD   SP,STACK   
3B5B   CD E1 0E               CALL   coldInit   
3B5E   CD D2 49               CALL   execStr   
3B61   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3B75   E1                     POP   HL   
3B76   E5                     PUSH   HL   
3B77   11 0A 00               LD   DE,10   
3B7A   B7                     OR   A   
3B7B   ED 52                  SBC   HL,DE   
3B7D   7D                     LD   A,L   
3B7E   B4                     OR   H   
3B7F   CA E7 3B               JP   Z,expectM_3154S135   
3B82   CD AD 0E               CALL   printStr   
3B85   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3B9F   CD AD 0E               CALL   printStr   
3BA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB1   21 0A 00               LD   hl,10   
3BB4   E5                     PUSH   hl   
3BB5   E5                     PUSH   hl   
3BB6   CD AF 0F               CALL   run   
3BB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BC1   CD AD 0E               CALL   printStr   
3BC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD1   E1                     POP   hl   
3BD2   E5                     PUSH   hl   
3BD3   E5                     PUSH   hl   
3BD4   CD AF 0F               CALL   run   
3BD7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE6   76                     HALT      
3BE7                EXPECTM_3154S135:      
3BE7   E1                     POP   HL   
3BE8                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3BE8   31 00 4B               LD   SP,STACK   
3BEB   CD E1 0E               CALL   coldInit   
3BEE   CD D2 49               CALL   execStr   
3BF1   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3C0C   E1                     POP   HL   
3C0D   E5                     PUSH   HL   
3C0E   11 0A 00               LD   DE,10   
3C11   B7                     OR   A   
3C12   ED 52                  SBC   HL,DE   
3C14   7D                     LD   A,L   
3C15   B4                     OR   H   
3C16   CA 85 3C               JP   Z,expectM_3155S136   
3C19   CD AD 0E               CALL   printStr   
3C1C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3C3D   CD AD 0E               CALL   printStr   
3C40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C4F   21 0A 00               LD   hl,10   
3C52   E5                     PUSH   hl   
3C53   E5                     PUSH   hl   
3C54   CD AF 0F               CALL   run   
3C57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C5F   CD AD 0E               CALL   printStr   
3C62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C6F   E1                     POP   hl   
3C70   E5                     PUSH   hl   
3C71   E5                     PUSH   hl   
3C72   CD AF 0F               CALL   run   
3C75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C84   76                     HALT      
3C85                EXPECTM_3155S136:      
3C85   E1                     POP   HL   
3C86                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3C86   31 00 4B               LD   SP,STACK   
3C89   CD E1 0E               CALL   coldInit   
3C8C   CD D2 49               CALL   execStr   
3C8F   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CAE   E1                     POP   HL   
3CAF   E5                     PUSH   HL   
3CB0   11 0A 00               LD   DE,10   
3CB3   B7                     OR   A   
3CB4   ED 52                  SBC   HL,DE   
3CB6   7D                     LD   A,L   
3CB7   B4                     OR   H   
3CB8   CA 2B 3D               JP   Z,expectM_3156S137   
3CBB   CD AD 0E               CALL   printStr   
3CBE   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3CE3   CD AD 0E               CALL   printStr   
3CE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CF5   21 0A 00               LD   hl,10   
3CF8   E5                     PUSH   hl   
3CF9   E5                     PUSH   hl   
3CFA   CD AF 0F               CALL   run   
3CFD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D05   CD AD 0E               CALL   printStr   
3D08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D15   E1                     POP   hl   
3D16   E5                     PUSH   hl   
3D17   E5                     PUSH   hl   
3D18   CD AF 0F               CALL   run   
3D1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D2A   76                     HALT      
3D2B                EXPECTM_3156S137:      
3D2B   E1                     POP   HL   
3D2C                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3D2C   31 00 4B               LD   SP,STACK   
3D2F   CD E1 0E               CALL   coldInit   
3D32   CD D2 49               CALL   execStr   
3D35   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3D54   E1                     POP   HL   
3D55   E5                     PUSH   HL   
3D56   11 14 00               LD   DE,20   
3D59   B7                     OR   A   
3D5A   ED 52                  SBC   HL,DE   
3D5C   7D                     LD   A,L   
3D5D   B4                     OR   H   
3D5E   CA D1 3D               JP   Z,expectM_3157S138   
3D61   CD AD 0E               CALL   printStr   
3D64   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D89   CD AD 0E               CALL   printStr   
3D8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D9B   21 14 00               LD   hl,20   
3D9E   E5                     PUSH   hl   
3D9F   E5                     PUSH   hl   
3DA0   CD AF 0F               CALL   run   
3DA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DAB   CD AD 0E               CALL   printStr   
3DAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DBB   E1                     POP   hl   
3DBC   E5                     PUSH   hl   
3DBD   E5                     PUSH   hl   
3DBE   CD AF 0F               CALL   run   
3DC1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DD0   76                     HALT      
3DD1                EXPECTM_3157S138:      
3DD1   E1                     POP   HL   
3DD2                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DD2   31 00 4B               LD   SP,STACK   
3DD5   CD E1 0E               CALL   coldInit   
3DD8   CD D2 49               CALL   execStr   
3DDB   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3DF3   E1                     POP   HL   
3DF4   E5                     PUSH   HL   
3DF5   11 06 00               LD   DE,6   
3DF8   B7                     OR   A   
3DF9   ED 52                  SBC   HL,DE   
3DFB   7D                     LD   A,L   
3DFC   B4                     OR   H   
3DFD   CA 69 3E               JP   Z,expectM_3158S139   
3E00   CD AD 0E               CALL   printStr   
3E03   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E21   CD AD 0E               CALL   printStr   
3E24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E33   21 06 00               LD   hl,6   
3E36   E5                     PUSH   hl   
3E37   E5                     PUSH   hl   
3E38   CD AF 0F               CALL   run   
3E3B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E43   CD AD 0E               CALL   printStr   
3E46   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E53   E1                     POP   hl   
3E54   E5                     PUSH   hl   
3E55   E5                     PUSH   hl   
3E56   CD AF 0F               CALL   run   
3E59   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E68   76                     HALT      
3E69                EXPECTM_3158S139:      
3E69   E1                     POP   HL   
3E6A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E6A   31 00 4B               LD   SP,STACK   
3E6D   CD E1 0E               CALL   coldInit   
3E70   CD D2 49               CALL   execStr   
3E73   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3E8E   E1                     POP   HL   
3E8F   E5                     PUSH   HL   
3E90   11 02 00               LD   DE,2   
3E93   B7                     OR   A   
3E94   ED 52                  SBC   HL,DE   
3E96   7D                     LD   A,L   
3E97   B4                     OR   H   
3E98   CA 07 3F               JP   Z,expectM_3159S140   
3E9B   CD AD 0E               CALL   printStr   
3E9E   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EBF   CD AD 0E               CALL   printStr   
3EC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ED1   21 02 00               LD   hl,2   
3ED4   E5                     PUSH   hl   
3ED5   E5                     PUSH   hl   
3ED6   CD AF 0F               CALL   run   
3ED9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EE1   CD AD 0E               CALL   printStr   
3EE4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EF1   E1                     POP   hl   
3EF2   E5                     PUSH   hl   
3EF3   E5                     PUSH   hl   
3EF4   CD AF 0F               CALL   run   
3EF7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F06   76                     HALT      
3F07                EXPECTM_3159S140:      
3F07   E1                     POP   HL   
3F08                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F08   31 00 4B               LD   SP,STACK   
3F0B   CD E1 0E               CALL   coldInit   
3F0E   CD D2 49               CALL   execStr   
3F11   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F37   E1                     POP   HL   
3F38   E5                     PUSH   HL   
3F39   11 0A 00               LD   DE,10   
3F3C   B7                     OR   A   
3F3D   ED 52                  SBC   HL,DE   
3F3F   7D                     LD   A,L   
3F40   B4                     OR   H   
3F41   CA BB 3F               JP   Z,expectM_3160S141   
3F44   CD AD 0E               CALL   printStr   
3F47   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F73   CD AD 0E               CALL   printStr   
3F76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F85   21 0A 00               LD   hl,10   
3F88   E5                     PUSH   hl   
3F89   E5                     PUSH   hl   
3F8A   CD AF 0F               CALL   run   
3F8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F95   CD AD 0E               CALL   printStr   
3F98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA5   E1                     POP   hl   
3FA6   E5                     PUSH   hl   
3FA7   E5                     PUSH   hl   
3FA8   CD AF 0F               CALL   run   
3FAB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FBA   76                     HALT      
3FBB                EXPECTM_3160S141:      
3FBB   E1                     POP   HL   
3FBC                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FBC   31 00 4B               LD   SP,STACK   
3FBF   CD E1 0E               CALL   coldInit   
3FC2   CD D2 49               CALL   execStr   
3FC5   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
3FF0   E1                     POP   HL   
3FF1   E5                     PUSH   HL   
3FF2   11 06 00               LD   DE,6   
3FF5   B7                     OR   A   
3FF6   ED 52                  SBC   HL,DE   
3FF8   7D                     LD   A,L   
3FF9   B4                     OR   H   
3FFA   CA 79 40               JP   Z,expectM_3161S142   
3FFD   CD AD 0E               CALL   printStr   
4000   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4031   CD AD 0E               CALL   printStr   
4034   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4043   21 06 00               LD   hl,6   
4046   E5                     PUSH   hl   
4047   E5                     PUSH   hl   
4048   CD AF 0F               CALL   run   
404B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4053   CD AD 0E               CALL   printStr   
4056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4063   E1                     POP   hl   
4064   E5                     PUSH   hl   
4065   E5                     PUSH   hl   
4066   CD AF 0F               CALL   run   
4069   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4078   76                     HALT      
4079                EXPECTM_3161S142:      
4079   E1                     POP   HL   
407A                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
407A   31 00 4B               LD   SP,STACK   
407D   CD E1 0E               CALL   coldInit   
4080   CD D2 49               CALL   execStr   
4083   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4097   E1                     POP   HL   
4098   E5                     PUSH   HL   
4099   11 03 00               LD   DE,3   
409C   B7                     OR   A   
409D   ED 52                  SBC   HL,DE   
409F   7D                     LD   A,L   
40A0   B4                     OR   H   
40A1   CA 09 41               JP   Z,expectM_3162S143   
40A4   CD AD 0E               CALL   printStr   
40A7   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
40C1   CD AD 0E               CALL   printStr   
40C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D3   21 03 00               LD   hl,3   
40D6   E5                     PUSH   hl   
40D7   E5                     PUSH   hl   
40D8   CD AF 0F               CALL   run   
40DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40E3   CD AD 0E               CALL   printStr   
40E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F3   E1                     POP   hl   
40F4   E5                     PUSH   hl   
40F5   E5                     PUSH   hl   
40F6   CD AF 0F               CALL   run   
40F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4108   76                     HALT      
4109                EXPECTM_3162S143:      
4109   E1                     POP   HL   
410A                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
410A   31 00 4B               LD   SP,STACK   
410D   CD E1 0E               CALL   coldInit   
4110   CD D2 49               CALL   execStr   
4113   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4127   E1                     POP   HL   
4128   E5                     PUSH   HL   
4129   11 01 00               LD   DE,1   
412C   B7                     OR   A   
412D   ED 52                  SBC   HL,DE   
412F   7D                     LD   A,L   
4130   B4                     OR   H   
4131   CA 99 41               JP   Z,expectM_3163S144   
4134   CD AD 0E               CALL   printStr   
4137   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4151   CD AD 0E               CALL   printStr   
4154   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4163   21 01 00               LD   hl,1   
4166   E5                     PUSH   hl   
4167   E5                     PUSH   hl   
4168   CD AF 0F               CALL   run   
416B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4173   CD AD 0E               CALL   printStr   
4176   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4183   E1                     POP   hl   
4184   E5                     PUSH   hl   
4185   E5                     PUSH   hl   
4186   CD AF 0F               CALL   run   
4189   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4198   76                     HALT      
4199                EXPECTM_3163S144:      
4199   E1                     POP   HL   
419A                          ;*Macro unroll:  test "~A 1 - /ad", NUL
419A   31 00 4B               LD   SP,STACK   
419D   CD E1 0E               CALL   coldInit   
41A0   CD D2 49               CALL   execStr   
41A3   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
41AE   E1                     POP   HL   
41AF   E5                     PUSH   HL   
41B0   11 00 00               LD   DE,NUL   
41B3   B7                     OR   A   
41B4   ED 52                  SBC   HL,DE   
41B6   7D                     LD   A,L   
41B7   B4                     OR   H   
41B8   CA 17 42               JP   Z,expectM_3164S145   
41BB   CD AD 0E               CALL   printStr   
41BE   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
41CF   CD AD 0E               CALL   printStr   
41D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41E1   21 00 00               LD   hl,NUL   
41E4   E5                     PUSH   hl   
41E5   E5                     PUSH   hl   
41E6   CD AF 0F               CALL   run   
41E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41F1   CD AD 0E               CALL   printStr   
41F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4201   E1                     POP   hl   
4202   E5                     PUSH   hl   
4203   E5                     PUSH   hl   
4204   CD AF 0F               CALL   run   
4207   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4216   76                     HALT      
4217                EXPECTM_3164S145:      
4217   E1                     POP   HL   
4218                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
4218   31 00 4B               LD   SP,STACK   
421B   CD E1 0E               CALL   coldInit   
421E   CD D2 49               CALL   execStr   
4221   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
422C   E1                     POP   HL   
422D   E5                     PUSH   HL   
422E   11 00 00               LD   DE,NUL   
4231   B7                     OR   A   
4232   ED 52                  SBC   HL,DE   
4234   7D                     LD   A,L   
4235   B4                     OR   H   
4236   CA 95 42               JP   Z,expectM_3165S146   
4239   CD AD 0E               CALL   printStr   
423C   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
424D   CD AD 0E               CALL   printStr   
4250   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
425F   21 00 00               LD   hl,NUL   
4262   E5                     PUSH   hl   
4263   E5                     PUSH   hl   
4264   CD AF 0F               CALL   run   
4267   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
426F   CD AD 0E               CALL   printStr   
4272   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
427F   E1                     POP   hl   
4280   E5                     PUSH   hl   
4281   E5                     PUSH   hl   
4282   CD AF 0F               CALL   run   
4285   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4294   76                     HALT      
4295                EXPECTM_3165S146:      
4295   E1                     POP   HL   
4296                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4296   31 00 4B               LD   SP,STACK   
4299   CD E1 0E               CALL   coldInit   
429C   CD D2 49               CALL   execStr   
429F   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
42AA   E1                     POP   HL   
42AB   E5                     PUSH   HL   
42AC   11 00 00               LD   DE,NUL   
42AF   B7                     OR   A   
42B0   ED 52                  SBC   HL,DE   
42B2   7D                     LD   A,L   
42B3   B4                     OR   H   
42B4   CA 13 43               JP   Z,expectM_3166S147   
42B7   CD AD 0E               CALL   printStr   
42BA   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
42CB   CD AD 0E               CALL   printStr   
42CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42DD   21 00 00               LD   hl,NUL   
42E0   E5                     PUSH   hl   
42E1   E5                     PUSH   hl   
42E2   CD AF 0F               CALL   run   
42E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42ED   CD AD 0E               CALL   printStr   
42F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42FD   E1                     POP   hl   
42FE   E5                     PUSH   hl   
42FF   E5                     PUSH   hl   
4300   CD AF 0F               CALL   run   
4303   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4312   76                     HALT      
4313                EXPECTM_3166S147:      
4313   E1                     POP   HL   
4314                          ;*Macro unroll:  test "~z 1 + /ad", NUL
4314   31 00 4B               LD   SP,STACK   
4317   CD E1 0E               CALL   coldInit   
431A   CD D2 49               CALL   execStr   
431D   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
4328   E1                     POP   HL   
4329   E5                     PUSH   HL   
432A   11 00 00               LD   DE,NUL   
432D   B7                     OR   A   
432E   ED 52                  SBC   HL,DE   
4330   7D                     LD   A,L   
4331   B4                     OR   H   
4332   CA 91 43               JP   Z,expectM_3167S148   
4335   CD AD 0E               CALL   printStr   
4338   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
4349   CD AD 0E               CALL   printStr   
434C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435B   21 00 00               LD   hl,NUL   
435E   E5                     PUSH   hl   
435F   E5                     PUSH   hl   
4360   CD AF 0F               CALL   run   
4363   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
436B   CD AD 0E               CALL   printStr   
436E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437B   E1                     POP   hl   
437C   E5                     PUSH   hl   
437D   E5                     PUSH   hl   
437E   CD AF 0F               CALL   run   
4381   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4390   76                     HALT      
4391                EXPECTM_3167S148:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4392   31 00 4B               LD   SP,STACK   
4395   CD E1 0E               CALL   coldInit   
4398   CD D2 49               CALL   execStr   
439B   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
43A2   E1                     POP   HL   
43A3   E5                     PUSH   HL   
43A4   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43A7   B7                     OR   A   
43A8   ED 52                  SBC   HL,DE   
43AA   7D                     LD   A,L   
43AB   B4                     OR   H   
43AC   CA 07 44               JP   Z,expectM_3168S149   
43AF   CD AD 0E               CALL   printStr   
43B2   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
43BF   CD AD 0E               CALL   printStr   
43C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43D1   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
43D4   E5                     PUSH   hl   
43D5   E5                     PUSH   hl   
43D6   CD AF 0F               CALL   run   
43D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43E1   CD AD 0E               CALL   printStr   
43E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43F1   E1                     POP   hl   
43F2   E5                     PUSH   hl   
43F3   E5                     PUSH   hl   
43F4   CD AF 0F               CALL   run   
43F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4406   76                     HALT      
4407                EXPECTM_3168S149:      
4407   E1                     POP   HL   
4408                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
4408   31 00 4B               LD   SP,STACK   
440B   CD E1 0E               CALL   coldInit   
440E   CD D2 49               CALL   execStr   
4411   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
4418   E1                     POP   HL   
4419   E5                     PUSH   HL   
441A   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
441D   B7                     OR   A   
441E   ED 52                  SBC   HL,DE   
4420   7D                     LD   A,L   
4421   B4                     OR   H   
4422   CA 7D 44               JP   Z,expectM_3169S150   
4425   CD AD 0E               CALL   printStr   
4428   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
4435   CD AD 0E               CALL   printStr   
4438   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4447   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
444A   E5                     PUSH   hl   
444B   E5                     PUSH   hl   
444C   CD AF 0F               CALL   run   
444F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4457   CD AD 0E               CALL   printStr   
445A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4467   E1                     POP   hl   
4468   E5                     PUSH   hl   
4469   E5                     PUSH   hl   
446A   CD AF 0F               CALL   run   
446D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
447C   76                     HALT      
447D                EXPECTM_3169S150:      
447D   E1                     POP   HL   
447E                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
447E   31 00 4B               LD   SP,STACK   
4481   CD E1 0E               CALL   coldInit   
4484   CD D2 49               CALL   execStr   
4487   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
448E   E1                     POP   HL   
448F   E5                     PUSH   HL   
4490   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
4493   B7                     OR   A   
4494   ED 52                  SBC   HL,DE   
4496   7D                     LD   A,L   
4497   B4                     OR   H   
4498   CA F3 44               JP   Z,expectM_3170S151   
449B   CD AD 0E               CALL   printStr   
449E   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
44AB   CD AD 0E               CALL   printStr   
44AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44BD   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
44C0   E5                     PUSH   hl   
44C1   E5                     PUSH   hl   
44C2   CD AF 0F               CALL   run   
44C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44CD   CD AD 0E               CALL   printStr   
44D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44DD   E1                     POP   hl   
44DE   E5                     PUSH   hl   
44DF   E5                     PUSH   hl   
44E0   CD AF 0F               CALL   run   
44E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44F2   76                     HALT      
44F3                EXPECTM_3170S151:      
44F3   E1                     POP   HL   
44F4                          ;*Macro unroll:  test "~A /ad", VARS
44F4   31 00 4B               LD   SP,STACK   
44F7   CD E1 0E               CALL   coldInit   
44FA   CD D2 49               CALL   execStr   
44FD   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
4504   E1                     POP   HL   
4505   E5                     PUSH   HL   
4506   11 00 4D               LD   DE,VARS   
4509   B7                     OR   A   
450A   ED 52                  SBC   HL,DE   
450C   7D                     LD   A,L   
450D   B4                     OR   H   
450E   CA 69 45               JP   Z,expectM_3171S152   
4511   CD AD 0E               CALL   printStr   
4514   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
4521   CD AD 0E               CALL   printStr   
4524   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4533   21 00 4D               LD   hl,VARS   
4536   E5                     PUSH   hl   
4537   E5                     PUSH   hl   
4538   CD AF 0F               CALL   run   
453B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4543   CD AD 0E               CALL   printStr   
4546   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4553   E1                     POP   hl   
4554   E5                     PUSH   hl   
4555   E5                     PUSH   hl   
4556   CD AF 0F               CALL   run   
4559   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4568   76                     HALT      
4569                EXPECTM_3171S152:      
4569   E1                     POP   HL   
456A                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
456A   31 00 4B               LD   SP,STACK   
456D   CD E1 0E               CALL   coldInit   
4570   CD D2 49               CALL   execStr   
4573   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4580   E1                     POP   HL   
4581   E5                     PUSH   HL   
4582   11 01 00               LD   DE,1   
4585   B7                     OR   A   
4586   ED 52                  SBC   HL,DE   
4588   7D                     LD   A,L   
4589   B4                     OR   H   
458A   CA EB 45               JP   Z,expectM_3172S153   
458D   CD AD 0E               CALL   printStr   
4590   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
45A3   CD AD 0E               CALL   printStr   
45A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45B5   21 01 00               LD   hl,1   
45B8   E5                     PUSH   hl   
45B9   E5                     PUSH   hl   
45BA   CD AF 0F               CALL   run   
45BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45C5   CD AD 0E               CALL   printStr   
45C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45D5   E1                     POP   hl   
45D6   E5                     PUSH   hl   
45D7   E5                     PUSH   hl   
45D8   CD AF 0F               CALL   run   
45DB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45EA   76                     HALT      
45EB                EXPECTM_3172S153:      
45EB   E1                     POP   HL   
45EC                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
45EC   31 00 4B               LD   SP,STACK   
45EF   CD E1 0E               CALL   coldInit   
45F2   CD D2 49               CALL   execStr   
45F5   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4609   E1                     POP   HL   
460A   E5                     PUSH   HL   
460B   11 03 00               LD   DE,3   
460E   B7                     OR   A   
460F   ED 52                  SBC   HL,DE   
4611   7D                     LD   A,L   
4612   B4                     OR   H   
4613   CA 7B 46               JP   Z,expectM_3173S154   
4616   CD AD 0E               CALL   printStr   
4619   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4633   CD AD 0E               CALL   printStr   
4636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4645   21 03 00               LD   hl,3   
4648   E5                     PUSH   hl   
4649   E5                     PUSH   hl   
464A   CD AF 0F               CALL   run   
464D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4655   CD AD 0E               CALL   printStr   
4658   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4665   E1                     POP   hl   
4666   E5                     PUSH   hl   
4667   E5                     PUSH   hl   
4668   CD AF 0F               CALL   run   
466B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
467A   76                     HALT      
467B                EXPECTM_3173S154:      
467B   E1                     POP   HL   
467C                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
467C   31 00 4B               LD   SP,STACK   
467F   CD E1 0E               CALL   coldInit   
4682   CD D2 49               CALL   execStr   
4685   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
469C   E1                     POP   HL   
469D   E5                     PUSH   HL   
469E   11 02 00               LD   DE,2   
46A1   B7                     OR   A   
46A2   ED 52                  SBC   HL,DE   
46A4   7D                     LD   A,L   
46A5   B4                     OR   H   
46A6   CA 11 47               JP   Z,expectM_3174S155   
46A9   CD AD 0E               CALL   printStr   
46AC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
46C9   CD AD 0E               CALL   printStr   
46CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46DB   21 02 00               LD   hl,2   
46DE   E5                     PUSH   hl   
46DF   E5                     PUSH   hl   
46E0   CD AF 0F               CALL   run   
46E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46EB   CD AD 0E               CALL   printStr   
46EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46FB   E1                     POP   hl   
46FC   E5                     PUSH   hl   
46FD   E5                     PUSH   hl   
46FE   CD AF 0F               CALL   run   
4701   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4710   76                     HALT      
4711                EXPECTM_3174S155:      
4711   E1                     POP   HL   
4712                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4712   31 00 4B               LD   SP,STACK   
4715   CD E1 0E               CALL   coldInit   
4718   CD D2 49               CALL   execStr   
471B   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
473E   E1                     POP   HL   
473F   E5                     PUSH   HL   
4740   11 01 00               LD   DE,1   
4743   B7                     OR   A   
4744   ED 52                  SBC   HL,DE   
4746   7D                     LD   A,L   
4747   B4                     OR   H   
4748   CA BF 47               JP   Z,expectM_3175S156   
474B   CD AD 0E               CALL   printStr   
474E   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4777   CD AD 0E               CALL   printStr   
477A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4789   21 01 00               LD   hl,1   
478C   E5                     PUSH   hl   
478D   E5                     PUSH   hl   
478E   CD AF 0F               CALL   run   
4791   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4799   CD AD 0E               CALL   printStr   
479C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47A9   E1                     POP   hl   
47AA   E5                     PUSH   hl   
47AB   E5                     PUSH   hl   
47AC   CD AF 0F               CALL   run   
47AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47BE   76                     HALT      
47BF                EXPECTM_3175S156:      
47BF   E1                     POP   HL   
47C0                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
47C0   31 00 4B               LD   SP,STACK   
47C3   CD E1 0E               CALL   coldInit   
47C6   CD D2 49               CALL   execStr   
47C9   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
47EC   E1                     POP   HL   
47ED   E5                     PUSH   HL   
47EE   11 01 00               LD   DE,1   
47F1   B7                     OR   A   
47F2   ED 52                  SBC   HL,DE   
47F4   7D                     LD   A,L   
47F5   B4                     OR   H   
47F6   CA 6D 48               JP   Z,expectM_3176S157   
47F9   CD AD 0E               CALL   printStr   
47FC   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4825   CD AD 0E               CALL   printStr   
4828   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4837   21 01 00               LD   hl,1   
483A   E5                     PUSH   hl   
483B   E5                     PUSH   hl   
483C   CD AF 0F               CALL   run   
483F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4847   CD AD 0E               CALL   printStr   
484A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4857   E1                     POP   hl   
4858   E5                     PUSH   hl   
4859   E5                     PUSH   hl   
485A   CD AF 0F               CALL   run   
485D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
486C   76                     HALT      
486D                EXPECTM_3176S157:      
486D   E1                     POP   HL   
486E                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
486E   31 00 4B               LD   SP,STACK   
4871   CD E1 0E               CALL   coldInit   
4874   CD D2 49               CALL   execStr   
4877   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
48A7   E1                     POP   HL   
48A8   E5                     PUSH   HL   
48A9   11 02 00               LD   DE,2   
48AC   B7                     OR   A   
48AD   ED 52                  SBC   HL,DE   
48AF   7D                     LD   A,L   
48B0   B4                     OR   H   
48B1   CA 35 49               JP   Z,expectM_3177S158   
48B4   CD AD 0E               CALL   printStr   
48B7   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
48ED   CD AD 0E               CALL   printStr   
48F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48FF   21 02 00               LD   hl,2   
4902   E5                     PUSH   hl   
4903   E5                     PUSH   hl   
4904   CD AF 0F               CALL   run   
4907   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
490F   CD AD 0E               CALL   printStr   
4912   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
491F   E1                     POP   hl   
4920   E5                     PUSH   hl   
4921   E5                     PUSH   hl   
4922   CD AF 0F               CALL   run   
4925   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4934   76                     HALT      
4935                EXPECTM_3177S158:      
4935   E1                     POP   HL   
4936                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4936   31 00 4B               LD   SP,STACK   
4939   CD E1 0E               CALL   coldInit   
493C   CD D2 49               CALL   execStr   
493F   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4954   E1                     POP   HL   
4955   E5                     PUSH   HL   
4956   11 02 00               LD   DE,2   
4959   B7                     OR   A   
495A   ED 52                  SBC   HL,DE   
495C   7D                     LD   A,L   
495D   B4                     OR   H   
495E   CA C7 49               JP   Z,expectM_3178S159   
4961   CD AD 0E               CALL   printStr   
4964   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
497F   CD AD 0E               CALL   printStr   
4982   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4991   21 02 00               LD   hl,2   
4994   E5                     PUSH   hl   
4995   E5                     PUSH   hl   
4996   CD AF 0F               CALL   run   
4999   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49A1   CD AD 0E               CALL   printStr   
49A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49B1   E1                     POP   hl   
49B2   E5                     PUSH   hl   
49B3   E5                     PUSH   hl   
49B4   CD AF 0F               CALL   run   
49B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49C6   76                     HALT      
49C7                EXPECTM_3178S159:      
49C7   E1                     POP   HL   
49C8                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
49C8                             ; 
49C8   CD AD 0E               CALL   printStr   
49CB   44 6F 6E 65 21 00      .CSTR   "Done!"   
49D1   76                     HALT      
49D2                             ; executes a null teminated string (null executes exit_)
49D2                             ; the string should be immedaitely following the call
49D2                EXECSTR:      ; create a root stack frame
49D2   C1                     POP   bc   ; bc = code*
49D3   0B                     DEC   bc   ; dec to prepare for next routine
49D4   11 00 00               LD   de,0   
49D7   D5                     PUSH   de   ; push fake IP
49D8   D5                     PUSH   de   ; push null arg_list*
49D9   D5                     PUSH   de   ; push null first_arg*
49DA   D5                     PUSH   de   ; push fake BP
49DB   DD E9                  JP   (ix)   
49DD                STKSIZE:   EQU   $100   ; Stack size
49DD                TIBSIZE:   EQU   $100   ; 256 bytes
49DD                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
49DD                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                VRECUR:   DS   2   ; 
4DF4                VDEFINE:   DS   2   ; 
4DF6                VSTRMODE:   DS   2   ; 
4DF8                             ; uninitialised sys variables (preserved)
4DF8                VPOINTER:   DS   2   ; 
4DFA                VREMAIN:   DS   2   ; 
4DFC                VSAVEDIP:   DS   2   ; 
4DFE                VSAVEDSP:   DS   2   ; 
4E00                VSAVEDNEXT:   DS   2   ; 
4E02                VSAVEDBP:   DS   2   ; 
4E04                             ; uninitialised sys variables (unpreserved)
4E04                VTEMP1:   DS   2   ; 
4E06                VTEMP2:   DS   2   ; 
4E08                VTEMP3:   DS   2   ; 
4E0A                VLASTDEF:   DS   2   ; 
4E0C                TBPTR:    DS   2   ; reserved for tests
4E0E                TITLEBUF:   DS   20   
4E22                HEAP:        
4E22                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
4E22                             ; db "{"
4E22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4E22                             ; db        "%L1#!/qt"                ; if not active don't send
4E22                             ; db        "%L0# %a="                ; store current index in A
4E22                             ; db        "%s %L0# +="              ; inc value of index by step
4E22                             ; db        "1%t!=/qt"                ; break if type != 0
4E22                             ; db        "%a %e <"                 ; ifte: in range?
4E22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
4E22                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
4E22                             ; db      "} 0 %k^"                   ; init sink
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC map, 0, "sf"                   ; map
4E22                             ; db "{"
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4E22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4E22                             ; db        "?? %t %k^"               ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; ; /ft filter
4E22                             ; ; src pred -- src1
4E22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\kt{"                       ; return talkback to receive data
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "["
4E22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4E22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4E22                             ; db          "{/t}"                  ; case 2: return true
4E22                             ; db        "]%t#^"                   ; select on %t
4E22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4E22                             ; db        "??"
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC forEach, 1, "spT"
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4E22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4E22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4E22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4E22                             ; db      "??"                      ; ifte:
4E22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4E22                             ; db    "} 0 %s^"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4E22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4E22                             ; db    "[%i]%A="
4E22                             ; db    "\\kt{"                         ; return talkback to receive data
4E22                             ; db      "\\dt{"                         ; call source with tb
4E22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4E22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4E22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049B DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
STRING2:            049E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
STRING3:            04A4 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
PERCENT:            04AC DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04AC DEFINED AT LINE 797 IN MAIN.asm
ARG0:               04C8 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ARG0A:              04D1 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ARG1:               04D6 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ARG1A:              04DE DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050D DEFINED AT LINE 856 IN MAIN.asm
DOTDEC:             0518 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DOTDECX:            0526 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
DOTDEC0:            0535 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTDEC1:            0545 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DOTDEC2:            0565 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
DOTDEC3:            0567 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
DOTDEC4:            0577 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
DOTDEC5:            0578 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
DOTHEX:             057E DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
DOTHEX0:            0591 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX1:            05A0 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTHEX2:            05A9 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
DOTSTRING_:         05B4 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DOTSTRING0:         05BB DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
DOTSTRING1:         05BE DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DOTCHAR:            05C9 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1009 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1045 IN MAIN.asm
COMMAND_B_:         0639 DEFINED AT LINE 1058 IN MAIN.asm
COMMAND_D_:         0649 DEFINED AT LINE 1069 IN MAIN.asm
COMMAND_F_:         0653 DEFINED AT LINE 1076 IN MAIN.asm
COMMAND_H_:         0672 DEFINED AT LINE 1097 IN MAIN.asm
COMMAND_I_:         067C DEFINED AT LINE 1105 IN MAIN.asm
KEY_:               0686 DEFINED AT LINE 1112 IN MAIN.asm
COMMAND_M_:         068D DEFINED AT LINE 1116 IN MAIN.asm
OUTPUT_:            0697 DEFINED AT LINE 1123 IN MAIN.asm
COMMAND_P_:         069E DEFINED AT LINE 1128 IN MAIN.asm
COMMAND_Q_:         06A5 DEFINED AT LINE 1134 IN MAIN.asm
COMMAND_R_:         06AF DEFINED AT LINE 1141 IN MAIN.asm
COMMAND_S_:         06BF DEFINED AT LINE 1152 IN MAIN.asm
TRUE_:              06D2 DEFINED AT LINE 1165 IN MAIN.asm
XOR_:               06D9 DEFINED AT LINE 1170 IN MAIN.asm
COMMAND_V_:         06E0 DEFINED AT LINE 1175 IN MAIN.asm
COMMAND_W_:         06F3 DEFINED AT LINE 1188 IN MAIN.asm
COMMAND_DEFAULT_:   06FD DEFINED AT LINE 1196 IN MAIN.asm
COMMAND_NOP_:       0704 DEFINED AT LINE 1202 IN MAIN.asm
ABSOLUTE:           0706 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
BREAK:              0713 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BREAK1:             071A DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
INPUT:              072D DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
DECBASE:            0738 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
DECBASE1:           073B DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
ERROR1:             0740 DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
HEXBASE:            0746 DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
WORDMODE:           074C DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
COMMENT:            0752 DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
BYTEMODE:           075B DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
BYTEMODE1:          075E DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
QUIT:               0763 DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
QUIT1:              076A DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ARRAYSIZE:          076D DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
XOR:                0775 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
XOR1:               0776 DEFINED AT LINE 1324 IN MAIN.asm
KEY:                0780 DEFINED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
OUTPUT:             0789 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
RECUR:              0792 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
REMAIN:             0798 DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
CONSTHEAPSTART:     079E DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
CONSTTIBSTART:      07A3 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
VARHEAPPTR:         07A8 DEFINED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
VARTIBPTR:          07B1 DEFINED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
VARIABLE:           07BA DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
CONSTANT:           07BD DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
RANGESRC:           07C0 DEFINED AT LINE 32
                    > USED AT LINE 1148 IN MAIN.asm
RANGESRCM_1856S1404: 07CF DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          083C DEFINED AT LINE 32
                    > USED AT LINE 1052 IN MAIN.asm
ARRAYITERM_1875S1424: 0849 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08BD DEFINED AT LINE 32
                    > USED AT LINE 1159 IN MAIN.asm
STRINGITERM_1894S1444: 08CA DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0943 DEFINED AT LINE 32
                    > USED AT LINE 1119 IN MAIN.asm
MAPM_1914S1466:     0950 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0985 DEFINED AT LINE 32
                    > USED AT LINE 1085 IN MAIN.asm
FILTERM_1928S1481:  0993 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09E3 DEFINED AT LINE 32
                    > USED AT LINE 1079 IN MAIN.asm
FOLDM_1947S1501:    09F2 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A35 DEFINED AT LINE 32
                    > USED AT LINE 1081 IN MAIN.asm
FOREACHM_1961S1516: 0A43 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A81 DEFINED AT LINE 32
                    > USED AT LINE 1083 IN MAIN.asm
FUNCSRCM_1975S1531: 0A8D DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0ABA DEFINED AT LINE 32
                    > USED AT LINE 847 IN MAIN.asm
DOTARRAYM_1985S1542: 0AC8 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0B02 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B02 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
STRINGBEGIN:        0B04 DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
STRINGEND:          0B0C DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
STRINGEND1:         0B33 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
STRINGSIZE:         0B3B DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
DOTNEXT:            0B3D DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DOTNEXT1:           0B45 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
DOTNEXT2:           0B51 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
DOTNEXT3:           0B57 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
ADDROF:             0B63 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
ADDROF1:            0B77 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
ADDROF2:            0B82 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
RBRACK:             0B84 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B84 DEFINED AT LINE 1644 IN MAIN.asm
ARRAYEND1:          0BA0 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
ARRAYEND2:          0BB0 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
ARRAYEND3:          0BB5 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
RBRACE:             0BD4 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BD4 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BLOCKEND1:          0C06 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
BLOCKEND2:          0C12 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
BLOCKEND3:          0C24 DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
BLOCKEND4:          0C38 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
CARET:              0C41 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C41 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C42 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
GO2:                0C48 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
GOBLOCK:            0C53 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
GOBLOCK2:           0C78 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
GOBLOCK3:           0C82 DEFINED AT LINE 1797 IN MAIN.asm
GOFUNC:             0C86 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
GOFUNC1:            0C9F DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
GOFUNC2:            0CA5 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
GOFUNC3:            0CB0 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
GOFUNC4:            0CC8 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
GOFUNC5:            0CCB DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
GOFUNC6:            0CCE DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
GOFUNC7:            0CD1 DEFINED AT LINE 1860 IN MAIN.asm
GOFUNC8:            0CD5 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
PARSEARGS:          0CE0 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CEA DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
PARSEARGS1A:        0CF2 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
PARSEARGS2:         0CFA DEFINED AT LINE 1900 IN MAIN.asm
PARSEARGS3:         0D02 DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
PARSEARGS4:         0D05 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
PARSEARGS5:         0D0B DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
PARSEBLOCK:         0D16 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D1A DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
PARSEBLOCK2:        0D46 DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
PARSEBLOCK3:        0D49 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
PARSEBLOCK4:        0D51 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
PARSEBLOCK5:        0D54 DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PARSEBLOCK6:        0D7C DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
CREATEFUNC:         0D80 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D9F DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
CREATEFUNC1:        0DB7 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
CREATEFUNC2:        0DCA DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
CREATEFUNC2A:       0DE9 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
CREATEFUNC3:        0DF8 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CREATEFUNC4:        0E03 DEFINED AT LINE 2095 IN MAIN.asm
CREATEFUNC5:        0E04 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
COMMANDTABLE:       0E22 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
COMMANDTABLE1:      0E2C DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
COMMANDTABLE2:      0E31 DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
JUMPTABLE:          0E36 DEFINED AT LINE 2168 IN MAIN.asm
JUMPTABLE0:         0E38 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
JUMPTABLE1:         0E44 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
JUMPTABLE2:         0E47 DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
XJUMPTABLE:         0E4A DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
XJUMPTABLE0:        0E4C DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
XJUMPTABLE1:        0E59 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
XJUMPTABLE2:        0E5F DEFINED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
PRTSTR0:            0E62 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
PRTSTR:             0E66 DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
NESTING:            0E6B DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
NESTING0:           0E75 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
NESTING1A:          0E7C DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
NESTING1:           0E7F DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
NESTING2:           0E8E DEFINED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
NESTING3:           0E90 DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
NESTING4:           0E9B DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
PROMPT:             0E9D DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
CRLF:               0EA6 DEFINED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
PRINTSTR:           0EAD DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 43
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 164
INIT:               0EB4 DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
INIT1:              0EBC DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
WARMINIT:           0EC4 DEFINED AT LINE 2307 IN MAIN.asm
COLDBOOT0:          0ED7 DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
COLDINIT:           0EE1 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EF2 DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
COLDSTART:          0EFF DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
START:              0F08 DEFINED AT LINE 2342 IN MAIN.asm
START1:             0F0E DEFINED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
INTERPRET:          0F14 DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
INTERPRET2:         0F20 DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2502 IN MAIN.asm
INTERPRET3:         0F28 DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
INTERPRET4:         0F33 DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
INTERPRET5:         0F38 DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
INTERPRET5A:        0F56 DEFINED AT LINE 2418 IN MAIN.asm
INTERPRET6:         0F58 DEFINED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
INTERPRET7:         0F66 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
INTERPRET8:         0F79 DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
NEXT:               0F94 DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
NEXT1:              0FA4 DEFINED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
EXIT:               0FAB DEFINED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
RUN:                0FAF DEFINED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FB3 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
BACKSPACE_:         0FC7 DEFINED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
EDIT_:              0FD7 DEFINED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
REEDIT_:            0FEF DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
PRINTSTACK_:        0FF2 DEFINED AT LINE 2513 IN MAIN.asm
F1:                 0FFC DEFINED AT LINE 32
                    > USED AT LINE 1087 IN MAIN.asm
F1M_3039S12:        100A DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1044 DEFINED AT LINE 32
                    > USED AT LINE 1089 IN MAIN.asm
F2M_3044S18:        104F DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1050 DEFINED AT LINE 32
                    > USED AT LINE 1091 IN MAIN.asm
F3M_3046S21:        105B DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 105C DEFINED AT LINE 32
                    > USED AT LINE 1093 IN MAIN.asm
F4M_3048S24:        1067 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 28
                    > USED AT LINE 8
EXPECTM_3059S37:    117B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S49:    11F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S50:    1261 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S51:    12CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S52:    1339 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S53:    13A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S54:    1411 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S55:    147F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S56:    14EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S57:    155D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S58:    15CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S59:    1639 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S60:    16A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S61:    1719 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S62:    178F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S63:    1805 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S64:    1879 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S65:    18F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S66:    196D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S67:    19E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S68:    1A5B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S69:    1AD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S70:    1B4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S71:    1BC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S72:    1C37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S73:    1CB3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S74:    1D27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S75:    1D9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S76:    1E11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S77:    1E97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S78:    1F0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S79:    1F87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S80:    1FFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S81:    207D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S82:    20FF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S83:    2181 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S84:    2203 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S85:    227F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S86:    22F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S87:    2369 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S88:    23DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S89:    2453 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S90:    24C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S91:    253B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S92:    25AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S93:    2623 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S94:    2697 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S95:    270B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S96:    277F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S97:    27F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S98:    286B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S99:    28E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S100:   2959 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S101:   29D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S102:   2A43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S103:   2AB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S104:   2B2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S105:   2BAB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S106:   2C29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S107:   2CAB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S108:   2D37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S109:   2DC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S110:   2E37 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S111:   2EAD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S112:   2F29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S113:   2FA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S114:   3025 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S115:   30AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S116:   3133 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S117:   31C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S118:   3253 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S119:   32D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S120:   3361 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S121:   33ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S122:   347B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S123:   3507 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S124:   35A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S125:   3629 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S126:   36BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S127:   3757 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S128:   37F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S129:   3895 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S130:   3939 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S131:   39BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S132:   3A49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S133:   3ACD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S134:   3B57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S135:   3BE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S136:   3C85 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S137:   3D2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S138:   3DD1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S139:   3E69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S140:   3F07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S141:   3FBB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S142:   4079 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S143:   4109 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S144:   4199 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S145:   4217 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S146:   4295 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S147:   4313 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S148:   4391 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S149:   4407 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S150:   447D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S151:   44F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S152:   4569 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S153:   45EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S154:   467B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S155:   4711 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S156:   47BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S157:   486D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S158:   4935 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S159:   49C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            49D2 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
BUFFER:             4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2322 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2334 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
VRECUR:             4DF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
VDEFINE:            4DF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           4DF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
VPOINTER:           4DF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
VREMAIN:            4DFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
VSAVEDIP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
VSAVEDSP:           4DFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2456 IN MAIN.asm
VSAVEDNEXT:         4E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
VSAVEDBP:           4E02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
VTEMP1:             4E04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
VTEMP2:             4E06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
VTEMP3:             4E08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
VLASTDEF:           4E0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4E0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4E0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
HEAP:               4E22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
