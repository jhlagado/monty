0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 33               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 33               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 33               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 33               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 33               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 33               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 33               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 33               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 33               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 33               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 32               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 33               LD   (RST08),HL   
0094   22 D2 33               LD   (RST10),HL   
0097   22 D4 33               LD   (RST18),HL   
009A   22 D6 33               LD   (RST20),HL   
009D   22 D8 33               LD   (RST28),HL   
00A0   22 DA 33               LD   (RST30),HL   
00A3   22 DE 33               LD   (INTVEC),HL   
00A6   22 E0 33               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 33               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 33               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 32               LD   SP,STACK   
00C6   CD C7 08               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   52 09                  DW   next   ; g nNext
0186   00 36                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   A5                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A5                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A5                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   96                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   A5                     DB   lsb(nop_)   ; ;
023C   84                     DB   lsb(lt_)   ; <
023D   6A                     DB   lsb(eq_)   ; =
023E   79                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   A5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 A7 03               JP   addr   
0309                AND_:        
0309   C3 B3 03               JP   and   
030C                ARG_:        
030C   C3 D0 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 07 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 39 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 55 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 A3 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 CB 04               JP   block   
031E                BLOCKEND_:      
031E   C3 34 05               JP   blockend   
0321                CHAR_:       
0321   C3 85 05               JP   char   
0324                COMMAND_:      
0324   C3 55 07               JP   command   
0327                DOT_:        
0327   C3 9A 05               JP   dot   
032A                REMAIN_:      
032A   C3 04 07               JP   remain   
032D                GO_:         
032D   C3 FE 05               JP   go   
0330                IDENTU_:      
0330   C3 88 06               JP   identU   
0333                IDENTL_:      
0333   C3 8D 06               JP   identL   
0336                IF_:         
0336   C3 9F 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C8 03               JP   xor1   
033F                MUL_:        
033F   C3 B8 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 2E                  JR   eq1   
0347                NUM_:        
0347   C3 D4 06               JP   num   
034A                HEXNUM_:      
034A   C3 6B 06               JP   hexnum   
034D                OR_:         
034D   C3 BE 03               JP   or   
0350                XOR_:        
0350   C3 C7 03               JP   xor   
0353                STRING_:      
0353   C3 2D 07               JP   string   
0356                SUB_:        ; negative sign or subtract
0356   03                     INC   bc   ; check if sign of a number
0357   0A                     LD   a,(bc)   
0358   0B                     DEC   bc   
0359   FE 30                  CP   "0"   
035B   38 05                  JR   c,sub1   
035D   FE 3A                  CP   "9"+1   
035F   DA 47 03               JP   c,num_   
0362                SUB1:        ; Subtract the value 2nd on stack from top of stack
0362   D1                     POP   de   
0363   E1                     POP   hl   ; Entry point for INVert
0364                SUB2:        
0364   B7                     OR   a   ; Entry point for NEGate
0365   ED 52                  SBC   hl,de   
0367   E5                     PUSH   hl   
0368   DD E9                  JP   (ix)   
036A                EQ_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   ; is it == ?
036C   FE 3D                  CP   "="   
036E   28 04                  JR   z,eq0   ; no its equality
0370   0B                     DEC   bc   
0371   C3 BB 04               JP   assign   ; no its assignment
0374                EQ0:         
0374   E1                     POP   hl   
0375                EQ1:         
0375   D1                     POP   de   
0376   C3 DD 05               JP   equals   
0379                GT_:         
0379   03                     INC   bc   
037A   0A                     LD   a,(bc)   
037B   FE 3E                  CP   ">"   
037D   CA 1A 07               JP   z,shiftRight   
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   18 09                  JR   lt1   
0384                LT_:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 3C                  CP   "<"   
0388   CA 0A 07               JP   z,shiftLeft   
038B   E1                     POP   hl   
038C   D1                     POP   de   
038D                LT1:         
038D   FE 3D                  CP   "="   
038F   CA E5 05               JP   z,lessthaneq   
0392   0B                     DEC   bc   
0393   C3 EA 05               JP   lessthan   
0396                DIV_:        
0396   D1                     POP   de   ; get first value
0397   E1                     POP   hl   ; get 2nd value
0398   C5                     PUSH   bc   ; preserve the IP
0399   44 4D                  LD   bc,hl   
039B   CD C4 05               CALL   divide   
039E   22 F6 33               LD   (vRemain),hl   
03A1   C1                     POP   bc   
03A2   D5                     PUSH   de   ; push result
03A3   DD E9                  JP   (ix)   
03A5                NOP_:        
03A5   DD E9                  JP   (ix)   
03A7                             ;*******************************************************************
03A7                             ; word operators
03A7                             ;*******************************************************************
03A7                             ; -- ptr
03A7                ADDR:        
03A7   2A F0 33               LD   hl,(vPointer)   
03AA   E5                     PUSH   hl   
03AB   21 F0 33               LD   hl,vPointer   
03AE   22 F0 33               LD   (vPointer),hl   
03B1   DD E9                  JP   (ix)   
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                OR:          
03BE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BF   E1                     POP   hl   
03C0   7B                     LD   a,e   
03C1   B5                     OR   l   
03C2   6F                     LD   l,a   
03C3   7A                     LD   a,d   
03C4   B4                     OR   h   
03C5   18 F3                  JR   and1   
03C7                XOR:         
03C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C8                XOR1:        
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   AD                     XOR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   AC                     XOR   h   
03CE   18 EA                  JR   and1   
03D0                             ; $a .. $z
03D0                             ; -- value
03D0                             ; returns value of arg
03D0                ARG:         
03D0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D3   FD 56 05               LD   d,(iy+5)   
03D6   EB                     EX   de,hl   
03D7   7D                     LD   a,l   ; arg_list* == null, skip
03D8   B4                     OR   h   
03D9   28 1C                  JR   z,arg0a   
03DB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DC   2B                     DEC   hl   
03DD   7E                     LD   a,(hl)   
03DE   23                     INC   hl   
03DF   23                     INC   hl   
03E0   B7                     OR   a   
03E1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E3   5F                     LD   e,a   ; e = a = num_args
03E4   03                     INC   bc   ; a = next char = arg_name
03E5   0A                     LD   a,(bc)   
03E6   C5                     PUSH   bc   ; save IP
03E7   43                     LD   b,e   ; b = e = num_args
03E8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EB   FD 56 03               LD   d,(iy+3)   
03EE                ARG0:        
03EE   1B                     DEC   de   ; a = arg_name, de = next arg*
03EF   1B                     DEC   de   
03F0   BE                     CP   (hl)   
03F1   28 09                  JR   z,arg1   
03F3   23                     INC   hl   ; hl = next arg_list*
03F4   10 F8                  DJNZ   arg0   
03F6   C1                     POP   bc   ; no match, restore IP
03F7                ARG0A:       
03F7   11 00 00               LD   de,0   ; return 0
03FA   18 08                  JR   arg1a   
03FC                ARG1:        
03FC   C1                     POP   bc   ; restore IP
03FD   EB                     EX   de,hl   ; hl = arg*
03FE   22 F0 33               LD   (vPointer),hl   ; store arg* in setter
0401   5E                     LD   e,(hl)   
0402   23                     INC   hl   
0403   56                     LD   d,(hl)   ; de = arg
0404                ARG1A:       
0404   D5                     PUSH   de   ; push arg
0405   DD E9                  JP   (ix)   
0407                             ; arg_list - parses input (ab:c)
0407                             ; names after the : represent uninitialised locals
0407                             ; return values are the state of the stack after the block ends
0407                ARG_LIST:      
0407   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040A   2A EC 33               LD   hl,(vHeapPtr)   ; hl = heap*
040D   23                     INC   hl   ; skip length field to start
040E   23                     INC   hl   
040F   E5                     PUSH   hl   ; save start of arg_list
0410   03                     INC   bc   ; point to next char
0411                ARG_LIST1:      
0411   0A                     LD   a,(bc)   
0412   FE 29                  CP   ")"   ; ) is the arg_list terminator
0414   28 12                  JR   z,arg_list4   
0416   FE 3A                  CP   ":"   
0418   20 03                  JR   nz,arg_list2   
041A   14                     INC   d   ; non zero value local count acts as flag
041B   20 08                  JR   nz,arg_list3   
041D                ARG_LIST2:      
041D   77                     LD   (hl),a   
041E   23                     INC   hl   
041F   1C                     INC   e   ; increase arg count
0420   AF                     XOR   a   
0421   B2                     OR   d   
0422   28 01                  JR   z,arg_list3   
0424   14                     INC   d   ; if d > 0 increase local count
0425                ARG_LIST3:      
0425   03                     INC   bc   ; point to next char
0426   18 E9                  JR   arg_list1   
0428                ARG_LIST4:      
0428   AF                     XOR   a   
0429   B2                     OR   d   
042A   28 01                  JR   z,arg_list5   
042C   15                     DEC   d   ; remove initial inc
042D                ARG_LIST5:      
042D   23                     INC   hl   
042E   22 EC 33               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0431   E1                     POP   hl   ; hl = start of arg_list
0432   E5                     PUSH   hl   ; return start of string
0433   2B                     DEC   hl   ; write length bytes to length field at start - 2
0434   72                     LD   (hl),d   
0435   2B                     DEC   hl   
0436   73                     LD   (hl),e   
0437   DD E9                  JP   (ix)   
0439                             ; arrBegin:
0439                             ;     ld hl,(vHeapPtr)            ; hl = heap
0439                             ;     inc hl                      ; reserve space for size
0439                             ;     inc hl
0439                             ;     ld (vHeapPtr),hl            ; hl = array start
0439                             ;     push hl                     ; return start of array
0439                             ;     jp (ix)
0439                             ; arrEnd:
0439                             ;     pop de                      ; de = dup array start
0439                             ;     push de
0439                             ;     push bc                     ; save IP
0439                             ;     ld bc,de                    ; bc = de = array start
0439                             ;     ld hl,(vHeapPtr)            ; hl = array end
0439                             ;     or a                        ; de = array length
0439                             ;     sbc hl,de
0439                             ;     ex de,hl
0439                             ;     ld hl,bc                    ; hl = array start
0439                             ;     dec hl
0439                             ;     ld (hl),d
0439                             ;     dec hl
0439                             ;     ld (hl),e
0439                             ;     pop bc                      ; bc = IP
0439                             ;     jp (ix)
0439                             ; arrItem:
0439                             ;     pop de                      ; new value
0439                             ;     ld hl,(vHeapPtr)
0439                             ;     ld (hl),e
0439                             ;     inc hl
0439                             ;     ld a,(vDataWidth)
0439                             ;     dec a                       ; is it byte?
0439                             ;     jr z,arrItem1
0439                             ;     ld (hl),d
0439                             ;     inc hl
0439                             ; arrItem1:	
0439                             ;     ld (vHeapPtr),hl
0439                             ;     jp (ix)
0439                ARRBEGIN:      
0439   11 00 00               LD   de,0   ; create stack frame
043C   D5                     PUSH   de   ; push null for IP
043D   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0440   FD 56 05               LD   d,(iy+5)   ; 
0443   D5                     PUSH   de   ; 
0444   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
0447   FD 56 03               LD   d,(iy+3)   ; 
044A   D5                     PUSH   de   ; 
044B   FD E5                  PUSH   iy   ; push BP
044D   FD 21 00 00            LD   iy,0   ; BP = SP
0451   FD 39                  ADD   iy,sp   
0453   DD E9                  JP   (ix)   
0455                ARREND:      
0455   FD 54                  LD   d,iyh   ; de = BP
0457   FD 5D                  LD   e,iyl   
0459   ED 43 F8 33            LD   (vTemp1),bc   ; save IP
045D   62 6B                  LD   hl,de   ; hl = de = BP
045F   B7                     OR   a   
0460   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0462   CB 3C                  SRL   h   ; 
0464   CB 1D                  RR   l   
0466   44 4D                  LD   bc,hl   ; bc = count
0468   2A EC 33               LD   hl,(vHeapPtr)   ; hl = array[-2]
046B   71                     LD   (hl),c   ; write num items in length word
046C   23                     INC   hl   
046D   70                     LD   (hl),b   
046E   23                     INC   hl   ; hl = array[0], bc = count
046F                             ; de = BP, hl = array[0], bc = count
046F                ARREND1:      
046F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0472   77                     LD   (hl),a   ; write lsb of array item
0473   23                     INC   hl   ; move to msb of array item
0474   3A E6 33               LD   a,(vDataWidth)   ; vDataWidth=1?
0477   3D                     DEC   a   
0478   28 05                  JR   z,arrEnd2   
047A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047D   77                     LD   (hl),a   ; write msb of array item
047E   23                     INC   hl   ; move to next word in array
047F                ARREND2:      
047F   FD 2B                  DEC   iy   ; move to next word on stack
0481   FD 2B                  DEC   iy   
0483   0B                     DEC   bc   ; dec items count
0484   79                     LD   a,c   ; if not zero loop
0485   B0                     OR   b   
0486   20 E7                  JR   nz,arrEnd1   
0488   EB                     EX   de,hl   ; de = end of array, hl = BP
0489   F9                     LD   sp,hl   ; sp = BP
048A   E1                     POP   hl   ; de = end of array, hl = old BP
048B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048C   FD 62                  LD   iyh,d   
048E   FD 6B                  LD   iyl,e   
0490   D1                     POP   de   ; pop arg_list (discard)
0491   D1                     POP   de   ; pop ScopeBP (discard)
0492   D1                     POP   de   ; pop IP (discard)
0493   ED 5B EC 33            LD   de,(vHeapPtr)   ; de = array[-2]
0497   22 EC 33               LD   (vHeapPtr),hl   ; move heap* to end of array
049A   ED 4B F8 33            LD   bc,(vTemp1)   ; restore IP
049E   13                     INC   de   ; de = array[0]
049F   13                     INC   de   
04A0   D5                     PUSH   de   ; return array[0]
04A1   DD E9                  JP   (ix)   
04A3                             ; index of an array, based on vDataWidth
04A3                             ; array num -- value    ; also sets vPointer to address
04A3                ARRINDEX:      
04A3   E1                     POP   hl   ; hl = index
04A4   D1                     POP   de   ; de = array
04A5   3A E6 33               LD   a,(vDataWidth)   ; a = data width
04A8   3D                     DEC   a   
04A9   28 01                  JR   z,arrIndex1   
04AB                ARRINDEX0:      
04AB   29                     ADD   hl,hl   ; if data width = 2 then double
04AC                ARRINDEX1:      
04AC   19                     ADD   hl,de   ; add addr
04AD   22 F0 33               LD   (vPointer),hl   ; store address in setter
04B0   16 00                  LD   d,0   
04B2   5E                     LD   e,(hl)   
04B3   B7                     OR   a   ; check data width again
04B4   28 02                  JR   z,arrIndex2   
04B6   23                     INC   hl   
04B7   56                     LD   d,(hl)   
04B8                ARRINDEX2:      
04B8   D5                     PUSH   de   
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   D1                     POP   de   ; new value
04BD   2A F0 33               LD   hl,(vPointer)   
04C0   73                     LD   (hl),e   
04C1   3A E6 33               LD   a,(vDataWidth)   
04C4   3D                     DEC   a   ; is it byte?
04C5   28 02                  JR   z,assign1   
04C7   23                     INC   hl   
04C8   72                     LD   (hl),d   
04C9                ASSIGN1:      
04C9   DD E9                  JP   (ix)   
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   $22   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 36               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 F8 33            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EC 33            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EC 33            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B F8 33            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                BLOCKEND:      
0534   D9                     EXX      
0535   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0538   FD 56 01               LD   d,(iy+1)   
053B   FD 4E 06               LD   c,(iy+6)   ; bc = IP
053E   FD 46 07               LD   b,(iy+7)   
0541   D9                     EXX      
0542   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0545   FD 56 03               LD   d,(iy+3)   
0548   EB                     EX   de,hl   
0549   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054C   FD 56 01               LD   d,(iy+1)   
054F                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
054F   13                     INC   de   ; for carry flag <=
0550   B7                     OR   a   
0551   ED 52                  SBC   hl,de   
0553   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0555   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0557   FD 5D                  LD   e,iyl   
0559   21 08 00               LD   hl,8   
055C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055E   18 0C                  JR   blockend2   
0560                BLOCKEND1:      ; same scope
0560   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0563   FD 56 03               LD   d,(iy+3)   
0566   EB                     EX   de,hl   
0567   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0569   FD 5D                  LD   e,iyl   
056B   EB                     EX   de,hl   
056C                BLOCKEND2:      
056C   44 4D                  LD   bc,hl   ; bc = hl = BP
056E   B7                     OR   a   ; hl = BP - SP = count
056F   ED 72                  SBC   hl,sp   
0571   C5                     PUSH   bc   ; bc = count, hl = BP
0572   44 4D                  LD   bc,hl   
0574   E1                     POP   hl   
0575   2B                     DEC   hl   ; hl = BP-1
0576   1B                     DEC   de   ; de = args*-1
0577   ED B8                  LDDR      
0579   13                     INC   de   ; hl = new tos
057A   EB                     EX   de,hl   
057B   F9                     LD   sp,hl   ; sp = new tos
057C   D9                     EXX      ; bc = IP, iy = oldBP
057D   D5                     PUSH   de   
057E   C5                     PUSH   bc   
057F   D9                     EXX      
0580   C1                     POP   bc   
0581   FD E1                  POP   iy   
0583   DD E9                  JP   (ix)   
0585                CHAR:        
0585   21 00 00               LD   hl,0   ; if "" is empty or null
0588                CHAR1:       
0588   03                     INC   bc   ; point to next char
0589   0A                     LD   a,(bc)   
058A   FE 27                  CP   "'"   ; ' is the terminator
058C   28 09                  JR   z,char3   
058E   FE 5C                  CP   $5c   ; \ is the escape
0590   20 02                  JR   nz,char2   
0592   03                     INC   bc   
0593   0A                     LD   a,(bc)   
0594                CHAR2:       
0594   6F                     LD   l,a   
0595   18 F1                  JR   char1   
0597                CHAR3:       
0597   E5                     PUSH   hl   
0598   DD E9                  JP   (ix)   
059A                             ; ; ;
059A                             ; ; block* -- hblock*
059A                             ; ; copies bytes from TOS to IP to the heap
059A                             ; compile:
059A                             ;   ld (vTemp1),bc              ; save IP
059A                             ; pop de                      ; de = block*
059A                             ; ld hl,bc                    ; hl = IP
059A                             ; or a                        ; bc = size
059A                             ; sbc hl,de
059A                             ; ld bc,hl
059A                             ; ex de,hl                    ; hl = block*
059A                             ; ld de,(vHeapPtr)            ; de = heap*
059A                             ; push de                     ; return hblock*
059A                             ; ldir                        ; copy size bytes from block* to hblock*
059A                             ; ld (vHeapPtr),de
059A                             ; ld bc,(vTemp1)              ; restore IP
059A                             ; jp (ix)
059A                DOT:         
059A   E1                     POP   hl   
059B   03                     INC   bc   
059C   0A                     LD   a,(bc)   
059D   FE 68                  CP   "h"   
059F   20 05                  JR   nz,dot1   
05A1   CD 49 08               CALL   prthex   
05A4   18 17                  JR   dot4   
05A6                DOT1:        
05A6   FE 73                  CP   "s"   
05A8   20 05                  JR   nz,dot2   
05AA   CD 6C 08               CALL   prtstr   
05AD   18 0E                  JR   dot4   
05AF                DOT2:        
05AF   FE 63                  CP   "c"   
05B1   20 06                  JR   nz,dot3   
05B3   7D                     LD   a,l   
05B4   CD 85 00               CALL   putchar   
05B7   18 04                  JR   dot4   
05B9                DOT3:        
05B9   0B                     DEC   bc   
05BA   CD 01 08               CALL   prtdec   
05BD                DOT4:        
05BD   3E 20                  LD   a," "   
05BF   CD 85 00               CALL   putchar   
05C2   DD E9                  JP   (ix)   
05C4                             ; division subroutine.
05C4                             ; bc: divisor, de: dividend, hl: remainder
05C4                DIVIDE:      
05C4   21 00 00               LD   hl,0   ; zero the remainder
05C7   3E 10                  LD   a,16   ; loop counter
05C9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05C9   CB 21                  SLA   c   
05CB   CB 10                  RL   b   
05CD   ED 6A                  ADC   hl,hl   
05CF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05D1   38 03                  JR   c,divide2   
05D3   0C                     INC   c   
05D4   18 01                  JR   divide3   
05D6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05D6   19                     ADD   hl,de   
05D7                DIVIDE3:      
05D7   3D                     DEC   a   
05D8   20 EF                  JR   nz,divide1   
05DA   50 59                  LD   de,bc   ; result from bc to de
05DC   C9                     RET      
05DD                             ; hl = value1, de = value2
05DD                             ; hl = result
05DD                EQUALS:      
05DD   B7                     OR   a   ; reset the carry flag
05DE   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05E0   28 10                  JR   z,true1   
05E2   C3 F8 05               JP   false1   
05E5                             ; hl = value1 de = value2
05E5                             ; hl = result
05E5                LESSTHANEQ:      
05E5   B7                     OR   a   
05E6   ED 52                  SBC   hl,de   
05E8   18 05                  JR   lessthan1   
05EA                             ; hl = value1 de = value2
05EA                             ; hl = result
05EA                LESSTHAN:      
05EA   B7                     OR   a   
05EB   ED 52                  SBC   hl,de   
05ED   28 09                  JR   z,false1   
05EF                LESSTHAN1:      
05EF   FA F8 05               JP   m,false1   
05F2                TRUE1:       
05F2   21 FF FF               LD   hl,TRUE   
05F5   E5                     PUSH   hl   
05F6   DD E9                  JP   (ix)   
05F8                NULL1:       
05F8                FALSE1:      
05F8   21 00 00               LD   hl,FALSE   
05FB   E5                     PUSH   hl   
05FC   DD E9                  JP   (ix)   
05FE                             ; execute a block of code which ends with }
05FE                             ; creates a root scope if BP == stack
05FE                             ; else uses outer scope
05FE                GO:          
05FE   D1                     POP   de   ; de = block*
05FF                GO0:         
05FF   7B                     LD   a,e   ; if block* == null, exit
0600   B2                     OR   d   
0601   20 02                  JR   nz,go1   
0603   DD E9                  JP   (ix)   
0605                GO1:         
0605   1A                     LD   a,(de)   
0606   FE 7B                  CP   "{"   
0608   C2 3F 06               JP   nz,goFunc0   
060B   13                     INC   de   
060C   C5                     PUSH   bc   ; push IP
060D   21 80 32               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0610   FD 44                  LD   b,iyh   
0612   FD 4D                  LD   c,iyl   
0614   B7                     OR   a   ; hl = stack - BP = root_scope
0615   ED 42                  SBC   hl,bc   
0617   7D                     LD   a,l   ; if root_scope, skip
0618   B4                     OR   h   
0619   28 11                  JR   z,go2   
061B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
061E   FD 46 05               LD   b,(iy+5)   
0621   C5                     PUSH   bc   
0622   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0625   FD 46 03               LD   b,(iy+3)   
0628   60 69                  LD   hl,bc   
062A   18 05                  JR   go3   
062C                GO2:         
062C   E5                     PUSH   hl   ; push arg_list (null)
062D   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0630   39                     ADD   hl,sp   
0631                GO3:         
0631   1B                     DEC   de   
0632                GO4:         
0632   E5                     PUSH   hl   ; push first_arg
0633   FD E5                  PUSH   iy   ; push BP
0635   FD 21 00 00            LD   iy,0   ; BP = SP
0639   FD 39                  ADD   iy,sp   
063B   42 4B                  LD   bc,de   ; bc = de = block*-1
063D   DD E9                  JP   (ix)   
063F                GOFUNC0:      ; execute code at pointer
063F   EB                     EX   de,hl   ; hl = func*
0640   5E                     LD   e,(hl)   ; de = hblock*
0641   23                     INC   hl   
0642   56                     LD   d,(hl)   
0643   23                     INC   hl   
0644   D5                     PUSH   de   ; save hblock*
0645   5E                     LD   e,(hl)   ; de = arg_list*
0646   23                     INC   hl   
0647   56                     LD   d,(hl)   
0648   23                     INC   hl   
0649   EB                     EX   de,hl   ; hl = arg_list*
064A   D1                     POP   de   ; restore hblock*
064B   7D                     LD   a,l   ; if arg_list* != null skip
064C   B4                     OR   h   
064D   20 03                  JR   nz,goFunc1   
064F   C5                     PUSH   bc   ; push IP
0650   18 DA                  JR   go2   
0652                GOFUNC1:      
0652   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0653   7E                     LD   a,(hl)   
0654   23                     INC   hl   
0655   B7                     OR   a   
0656   28 05                  JR   z,goFunc3   
0658                GOFUNC2:      
0658   3B                     DEC   sp   
0659   3B                     DEC   sp   
065A   3D                     DEC   a   
065B   20 FB                  JR   nz,goFunc2   
065D                GOFUNC3:      
065D   C5                     PUSH   bc   ; push IP
065E   E5                     PUSH   hl   ; push arg_list*
065F   2B                     DEC   hl   ; hl = num_args*
0660   2B                     DEC   hl   
0661   7E                     LD   a,(hl)   ; hl = num_args * 2
0662   87                     ADD   a,a   
0663   C6 04                  ADD   a,4   ; offset for IP and arg_list
0665   6F                     LD   l,a   
0666   26 00                  LD   h,$0   
0668   39                     ADD   hl,sp   ; hl = first_arg*
0669   18 C7                  JR   go4   
066B                HEXNUM:      
066B   21 00 00               LD   hl,0   ; Clear hl to accept the number
066E                HEXNUM1:      
066E   03                     INC   bc   
066F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0670   CB 77                  BIT   6,a   ; is it uppercase alpha?
0672   28 02                  JR   z,hexnum2   ; no a decimal
0674   D6 07                  SUB   7   ; sub 7  to make $a - $F
0676                HEXNUM2:      
0676   D6 30                  SUB   $30   ; form decimal digit
0678   DA F6 06               JP   c,num2   
067B   FE 10                  CP   $0F+1   
067D   D2 F6 06               JP   nc,num2   
0680   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0681   29                     ADD   hl,hl   ; 4X
0682   29                     ADD   hl,hl   ; 8X
0683   29                     ADD   hl,hl   ; 16X
0684   85                     ADD   a,l   ; add into bottom of hl
0685   6F                     LD   l,a   
0686   18 E6                  JR   hexnum1   
0688                IDENTU:      
0688   0A                     LD   a,(bc)   ; a = identifier char
0689   D6 41                  SUB   "A"   ; "A" = 0
068B   18 05                  JR   ident1   
068D                IDENTL:      
068D   0A                     LD   a,(bc)   
068E   D6 61                  SUB   "a"   
0690   C6 1A                  ADD   a,26   
0692                IDENT1:      
0692   87                     ADD   a,a   ; l = a * 2
0693   6F                     LD   l,a   
0694   26 33                  LD   h,msb(vars)   
0696   22 F0 33               LD   (vPointer),hl   ; store address in setter
0699   5E                     LD   e,(hl)   
069A   23                     INC   hl   
069B   56                     LD   d,(hl)   
069C   D5                     PUSH   de   
069D   DD E9                  JP   (ix)   
069F                             ; if
069F                             ; condition then -- value
069F                IF:          
069F   03                     INC   bc   
06A0   0A                     LD   a,(bc)   
06A1   FE 3F                  CP   "?"   
06A3   28 06                  JR   z,ifte   
06A5   0B                     DEC   bc   
06A6   11 00 00               LD   de,0   ; NUL pointer for else
06A9   18 01                  JR   ifte1   
06AB                             ; ifte
06AB                             ; condition then else -- value
06AB                IFTE:        
06AB   D1                     POP   de   ; de = else
06AC                IFTE1:       
06AC   E1                     POP   hl   ; hl = then
06AD   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06AE   7C                     LD   a,h   
06AF   B5                     OR   l   
06B0   E1                     POP   hl   ; hl = then
06B1   CA FF 05               JP   z,go0   ; if z de = else
06B4   EB                     EX   de,hl   ; condition = false, de = then
06B5   C3 FF 05               JP   go0   
06B8                MUL:         
06B8   D1                     POP   de   ; get first value
06B9   E1                     POP   hl   
06BA   C5                     PUSH   bc   ; Preserve the IP
06BB   44                     LD   b,h   ; bc = 2nd value
06BC   4D                     LD   c,l   
06BD   21 00 00               LD   hl,0   
06C0   3E 10                  LD   a,16   
06C2                MUL2:        
06C2   29                     ADD   hl,hl   
06C3   CB 13                  RL   e   
06C5   CB 12                  RL   d   
06C7   30 04                  JR   nc,$+6   
06C9   09                     ADD   hl,bc   
06CA   30 01                  JR   nc,$+3   
06CC   13                     INC   de   
06CD   3D                     DEC   a   
06CE   20 F2                  JR   nz,mul2   
06D0   C1                     POP   bc   ; Restore the IP
06D1   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06D2   DD E9                  JP   (ix)   
06D4                NUM:         
06D4   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06D7   0A                     LD   a,(bc)   ; Get numeral or -
06D8   FE 2D                  CP   "-"   
06DA   20 01                  JR   nz,num0   
06DC   03                     INC   bc   ; move to next char, no flags affected
06DD                NUM0:        
06DD   08                     EX   af,af'   ; save zero flag = 0 for later
06DE                NUM1:        
06DE   0A                     LD   a,(bc)   ; read digit
06DF   D6 30                  SUB   "0"   ; less than 0?
06E1   38 13                  JR   c,num2   ; not a digit, exit loop
06E3   FE 0A                  CP   10   ; greater that 9?
06E5   30 0F                  JR   nc,num2   ; not a digit, exit loop
06E7   03                     INC   bc   ; inc IP
06E8   54 5D                  LD   de,hl   ; multiply hl * 10
06EA   29                     ADD   hl,hl   
06EB   29                     ADD   hl,hl   
06EC   19                     ADD   hl,de   
06ED   29                     ADD   hl,hl   
06EE   85                     ADD   a,l   ; add digit in a to hl
06EF   6F                     LD   l,a   
06F0   3E 00                  LD   a,0   
06F2   8C                     ADC   a,h   
06F3   67                     LD   h,a   
06F4   18 E8                  JR   num1   
06F6                NUM2:        
06F6   0B                     DEC   bc   
06F7   08                     EX   af,af'   ; restore zero flag
06F8   20 07                  JR   nz,num3   
06FA   EB                     EX   de,hl   ; negate the value of hl
06FB   21 00 00               LD   hl,0   
06FE   B7                     OR   a   ; jump to sub2
06FF   ED 52                  SBC   hl,de   
0701                NUM3:        
0701   E5                     PUSH   hl   ; Put the number on the stack
0702   DD E9                  JP   (ix)   ; and process the next character
0704                REMAIN:      
0704   2A F6 33               LD   hl,(vRemain)   
0707   E5                     PUSH   hl   
0708   DD E9                  JP   (ix)   
070A                             ; shiftLeft
070A                             ; value count -- value2          shift left count places
070A                SHIFTLEFT:      
070A   50 59                  LD   de,bc   ; save IP
070C   C1                     POP   bc   ; bc = count
070D   41                     LD   b,c   ; b = loop counter
070E   E1                     POP   hl   
070F   04                     INC   b   ; test for counter=0 case
0710   18 01                  JR   shiftLeft2   
0712                SHIFTLEFT1:      
0712   29                     ADD   hl,hl   ; left shift hl
0713                SHIFTLEFT2:      
0713   10 FD                  DJNZ   shiftLeft1   
0715   E5                     PUSH   hl   
0716   42 4B                  LD   bc,de   ; restore IP
0718   DD E9                  JP   (ix)   
071A                             ; shiftRight
071A                             ; value count -- value2          shift left count places
071A                SHIFTRIGHT:      
071A   50 59                  LD   de,bc   ; save IP
071C   C1                     POP   bc   ; bc = count
071D   41                     LD   b,c   ; b = loop counter
071E   E1                     POP   hl   
071F   04                     INC   b   ; test for counter=0 case
0720   18 04                  JR   shiftRight2   
0722                SHIFTRIGHT1:      
0722   CB 3C                  SRL   h   ; right shift hl
0724   CB 1D                  RR   l   
0726                SHIFTRIGHT2:      
0726   10 FA                  DJNZ   shiftRight1   
0728   E5                     PUSH   hl   
0729   42 4B                  LD   bc,de   ; restore IP
072B   DD E9                  JP   (ix)   
072D                             ; string
072D                             ; -- ptr                        ; points to start of string chars,
072D                             ; length is stored at start - 2 bytes
072D                STRING:      
072D   2A EC 33               LD   hl,(vHeapPtr)   ; hl = heap*
0730   23                     INC   hl   ; skip length field to start
0731   23                     INC   hl   
0732   E5                     PUSH   hl   ; save start of string
0733   03                     INC   bc   ; point to next char
0734   18 03                  JR   string2   
0736                STRING1:      
0736   77                     LD   (hl),a   
0737   23                     INC   hl   ; increase count
0738   03                     INC   bc   ; point to next char
0739                STRING2:      
0739   0A                     LD   a,(bc)   
073A   FE 22                  CP   DQUOTE   ; " is the string terminator
073C   20 F8                  JR   nz,string1   
073E   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0740   20 F4                  JR   nz,string1   
0742   AF                     XOR   a   ; write NUL to terminate string
0743   77                     LD   (hl),a   ; hl = end of string
0744   23                     INC   hl   
0745   22 EC 33               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0748   2B                     DEC   hl   ; hl = end of string without terminator
0749   D1                     POP   de   ; de = start of string
074A   D5                     PUSH   de   ; return start of string
074B   B7                     OR   a   ; hl = length bytes, de = start of string
074C   ED 52                  SBC   hl,de   
074E   EB                     EX   de,hl   
074F   2B                     DEC   hl   ; write length bytes to length field at start - 2
0750   72                     LD   (hl),d   
0751   2B                     DEC   hl   
0752   73                     LD   (hl),e   
0753   DD E9                  JP   (ix)   
0755                             ;*******************************************************************
0755                             ; commands
0755                             ;*******************************************************************
0755                COMMAND:      
0755   03                     INC   bc   
0756   0A                     LD   a,(bc)   
0757   FE 5C                  CP   $5C   ; \\ comment
0759   CA A6 07               JP   z,comment   
075C   FE 61                  CP   "a"   ; \a absolute
075E   CA 99 07               JP   z,abs1   
0761   FE 62                  CP   "b"   ; \b bytes
0763   CA AF 07               JP   z,bytes   
0766   FE 66                  CP   "f"   ; \f func
0768   CA B7 07               JP   z,func   
076B   FE 46                  CP   "F"   ; \F false
076D   CA F8 05               JP   z,false1   
0770   FE 69                  CP   "i"   ; \i input
0772   CA CE 07               JP   z,input   
0775   FE 6B                  CP   "k"   ; \k key
0777   CA D9 07               JP   z,key   
077A   FE 6F                  CP   "o"   ; \o output
077C   CA E2 07               JP   z,output   
077F   FE 72                  CP   "r"   ; \r repeat
0781   CA EB 07               JP   z,repeat   
0784   FE 73                  CP   "s"   ; \s select
0786   CA ED 07               JP   z,select   
0789   FE 54                  CP   "T"   ; \T true
078B   CA F2 05               JP   z,true1   
078E   FE 77                  CP   "w"   ; \w words
0790   CA F7 07               JP   z,words   
0793   21 01 00               LD   hl,1   ; error 1: unknown command
0796   C3 6B 09               JP   error   
0799                ABS1:        
0799   E1                     POP   hl   
079A   CB 7C                  BIT   7,h   
079C   C8                     RET   z   
079D   AF                     XOR   a   
079E   95                     SUB   l   
079F   6F                     LD   l,a   
07A0   9F                     SBC   a,a   
07A1   94                     SUB   h   
07A2   67                     LD   h,a   
07A3   E5                     PUSH   hl   
07A4   DD E9                  JP   (ix)   
07A6                COMMENT:      
07A6   03                     INC   bc   ; point to next char
07A7   0A                     LD   a,(bc)   
07A8   FE 20                  CP   " "   ; terminate on any char less than SP
07AA   30 FA                  JR   nc,comment   
07AC   0B                     DEC   bc   
07AD   DD E9                  JP   (ix)   
07AF                BYTES:       
07AF   21 01 00               LD   hl,1   
07B2                BYTES1:      
07B2   22 E6 33               LD   (vDataWidth),hl   
07B5   DD E9                  JP   (ix)   
07B7                             ; ; arg_list* block* -- ptr
07B7                             ; func:
07B7                             ;     ld hl,(vHeapPtr)                    ; hl = heap*
07B7                             ;     pop de                              ; hl = heap*, de = block
07B7                             ;     ex de,hl                            ; hl = heap*, de = arg_list*, (sp) = block*
07B7                             ;     ex (sp),hl
07B7                             ;     ex de,hl
07B7                             ;     ld (hl),e                           ; compile arg_list*
07B7                             ;     inc hl
07B7                             ;     ld (hl),d
07B7                             ;     inc hl
07B7                             ;     pop de                              ; de = block*
07B7                             ;     inc de
07B7                             ;     push bc                             ; (sp) = IP
07B7                             ;     ld b,1                              ; b = nesting
07B7                             ; func1:
07B7                             ;     ld a,(de)
07B7                             ;     inc de
07B7                             ;     ld (hl),a
07B7                             ;     inc hl
07B7                             ;     cp ")"
07B7                             ;     jr z,func4
07B7                             ;     cp "}"
07B7                             ;     jr z,func4
07B7                             ;     cp "]"
07B7                             ;     jr z,func4
07B7                             ;     cp "("
07B7                             ;     jr z,func2
07B7                             ;     cp "{"
07B7                             ;     jr z,func2
07B7                             ;     cp "["
07B7                             ;     jr z,func2
07B7                             ;     cp DQUOTE
07B7                             ;     jr z,func3
07B7                             ;     cp "'"
07B7                             ;     jr z,func3
07B7                             ;     cp "`"
07B7                             ;     jr z,func3
07B7                             ;     jr func1
07B7                             ; func2:
07B7                             ;     inc b
07B7                             ;     jr func1
07B7                             ; func3:
07B7                             ;     ld a,$80
07B7                             ;     xor b
07B7                             ;     ld b,a
07B7                             ;     jr nz,func1
07B7                             ;     jr func4a
07B7                             ; func4:
07B7                             ;     dec b
07B7                             ;     jr nz, func1                        ; get the next element
07B7                             ; func4a:
07B7                             ;     inc hl
07B7                             ;     pop bc                              ; de = defstart, hl = IP
07B7                             ;     ld de,(vHeapPtr)                    ; de = defstart
07B7                             ;     push de
07B7                             ;     ld (vHeapPtr),hl                    ; update heap* to end of definition
07B7                             ;     jp (ix)
07B7                             ; arg_list* block* -- ptr
07B7                FUNC:        
07B7   D1                     POP   de   ; de = block* hl = heap*
07B8   2A EC 33               LD   hl,(vHeapPtr)   
07BB   73                     LD   (hl),e   ; compile block*
07BC   23                     INC   hl   
07BD   72                     LD   (hl),d   
07BE   23                     INC   hl   
07BF   D1                     POP   de   ; de = block*
07C0   73                     LD   (hl),e   ; compile arg_list*
07C1   23                     INC   hl   
07C2   72                     LD   (hl),d   
07C3   23                     INC   hl   
07C4   ED 5B EC 33            LD   de,(vHeapPtr)   ; return func*
07C8   D5                     PUSH   de   
07C9   22 EC 33               LD   (vHeapPtr),hl   ; heap* += 4
07CC   DD E9                  JP   (ix)   
07CE                             ; Z80 port input
07CE                             ; port -- value
07CE                INPUT:       
07CE   E1                     POP   hl   
07CF   59                     LD   e,c   ; save IP
07D0   4D                     LD   c,l   
07D1   ED 68                  IN   l,(c)   
07D3   26 00                  LD   h,0   
07D5   4B                     LD   c,e   ; restore IP
07D6   E5                     PUSH   hl   
07D7   DD E9                  JP   (ix)   
07D9                KEY:         
07D9   CD 81 00               CALL   getchar   
07DC   26 00                  LD   h,0   
07DE   6F                     LD   l,a   
07DF   E5                     PUSH   hl   
07E0   DD E9                  JP   (ix)   
07E2                             ; Z80 port output
07E2                             ; value port --
07E2                OUTPUT:      
07E2   E1                     POP   hl   
07E3   59                     LD   e,c   ; save IP
07E4   4D                     LD   c,l   
07E5   E1                     POP   hl   
07E6   ED 69                  OUT   (c),l   
07E8   4B                     LD   c,e   ; restore IP
07E9   DD E9                  JP   (ix)   
07EB                REPEAT:      
07EB   DD E9                  JP   (ix)   
07ED                             ; select
07ED                             ; index array -- value
07ED                SELECT:      
07ED   D1                     POP   de   ; de = array
07EE   E1                     POP   hl   ; hl = index
07EF   29                     ADD   hl,hl   ; if data width = 2 then double
07F0   19                     ADD   hl,de   ; add addr
07F1   5E                     LD   e,(hl)   
07F2   23                     INC   hl   
07F3   56                     LD   d,(hl)   
07F4   C3 FF 05               JP   go0   
07F7                WORDS:       
07F7   21 02 00               LD   hl,2   
07FA   C3 B2 07               JP   bytes1   
07FD                             ; 
07FD                             ; 
07FD                             ; 
07FD                             ; 
07FD                             ; c b --
07FD                             ; loops until c = 0
07FD                LOOP:        
07FD   DD E9                  JP   (ix)   
07FF                             ;     pop de                      ; de = block                    c
07FF                             ;     pop hl                      ; hl = condition
07FF                             ;     push de
07FF                             ;     push bc                     ; push IP
07FF                             ;     ld bc,de                    ; bc = block
07FF                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
07FF                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
07FF                             ;     push de                     ; push ScopeBP
07FF                             ;     push iy                     ; push BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ; loop1:
07FF                             ;     ld a,l                      ; bc = block, hl = condition = zero?
07FF                             ;     or h
07FF                             ;     jr z,loop3
07FF                             ;     ld de,loop2-1               ; IP return address
07FF                             ;     push de
07FF                             ;     ld e,(iy+2)                 ; push parent ScopeBP
07FF                             ;     ld d,(iy+3)
07FF                             ;     push de                     ;
07FF                             ;     push iy                     ; push BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ;     push hl                     ; push condition
07FF                             ;     dec bc
07FF                             ;     jp (ix)
07FF                             ; loop2:
07FF                             ;     db ESC                      ; escape from interpreter
07FF                             ;     ld c,(iy+6)                 ; bc = block
07FF                             ;     ld b,(iy+7)
07FF                             ;     pop hl                      ; hl = condition
07FF                             ;     jr loop1
07FF                             ; loop3:
07FF                             ;     ld d,iyh                    ; de = BP
07FF                             ;     ld e,iyl
07FF                             ;     ex de,hl                    ; hl = BP, de = result
07FF                             ;     ld sp,hl                    ; sp = BP
07FF                             ;     pop hl                      ; hl = old BP
07FF                             ;     pop bc                      ; pop ScopeBP (discard)
07FF                             ;     pop bc                      ; bc = IP
07FF                             ;     ld sp,hl                    ; sp = old BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ;     ld ix,(vNext)                  ; needed?
07FF                             ;     jp (ix)
07FF                             ; str -- num
07FF                             ; hash:
07FF                             ; pop hl
07FF                             ; push bc
07FF                             ; ld bc,hl
07FF                             ; call hashStr
07FF                             ; pop bc
07FF                             ; push hl
07FF                             ; jp (ix)
07FF                             ; sqrt1:
07FF                             ;     pop hl
07FF                             ;     push bc
07FF                             ;     call squareRoot
07FF                             ;     ld (vRemain),bc
07FF                             ;     pop bc
07FF                             ;     push de
07FF                             ;     jp (ix)
07FF                FILTER:      
07FF                MAP:         
07FF                SCAN:        
07FF   DD E9                  JP   (ix)   
0801                             ; -------------------------------------------------------------------------------
0801                             ; ; hash C-string
0801                             ; ; BC = str
0801                             ; ; HL = hash
0801                             ; hashStr:
0801                             ;     ld (vHashStr),bc                    ; store source string
0801                             ;     ld hl,0
0801                             ; hashStr1:
0801                             ;     ld a,(bc)                           ; load next char
0801                             ;     inc bc
0801                             ;     cp 0                                ; NUL?
0801                             ;     ret z
0801                             ; hashStr2:
0801                             ;     ld d,0
0801                             ;     ld e,a
0801                             ;     add hl,de
0801                             ;     ld de,hl                            ; hl *= 193 (11000001)
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,de                           ; add
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,de                           ; add
0801                             ;     jr hashStr1
0801                             ; ; squareroot
0801                             ; ; Input: HL = value
0801                             ; ; Result: DE = square root BC = remainder
0801                             ; squareRoot:
0801                             ;     ld bc,0800h
0801                             ;     ld e,c
0801                             ;     xor a
0801                             ; squareRoot1:
0801                             ;     add hl,hl
0801                             ;     rl c
0801                             ;     adc hl,hl
0801                             ;     rl c
0801                             ;     jr nc,$+4
0801                             ;     set 0,l
0801                             ;     ld a,e
0801                             ;     add a,a
0801                             ;     ld e,a
0801                             ;     add a,a
0801                             ;     bit 0,l
0801                             ;     jr nz,$+5
0801                             ;     sub c
0801                             ;     jr nc,squareRoot4
0801                             ;     ld a,c
0801                             ;     sub e
0801                             ;     inc e
0801                             ;     sub e
0801                             ;     ld c,a
0801                             ; squareRoot4:
0801                             ;     djnz squareRoot1
0801                             ;     bit 0,l
0801                             ;     jr z,squareRoot5
0801                             ;     inc b
0801                             ; squareRoot5:
0801                             ;     ld d,0
0801                             ;     ret
0801                             ; print decimal
0801                             ; hl = value
0801                PRTDEC:      
0801   CB 7C                  BIT   7,h   
0803   28 0B                  JR   z,prtdec0   
0805   3E 2D                  LD   a,"-"   
0807   CD 85 00               CALL   putchar   
080A   AF                     XOR   a   
080B   95                     SUB   l   
080C   6F                     LD   l,a   
080D   9F                     SBC   a,a   
080E   94                     SUB   h   
080F   67                     LD   h,a   
0810                PRTDEC0:      
0810   C5                     PUSH   bc   
0811   0E 00                  LD   c,0   ; leading zeros flag = false
0813   11 F0 D8               LD   de,-10000   
0816   CD 32 08               CALL   prtdec1   
0819   11 18 FC               LD   de,-1000   
081C   CD 32 08               CALL   prtdec1   
081F   11 9C FF               LD   de,-100   
0822   CD 32 08               CALL   prtdec1   
0825   1E F6                  LD   e,-10   
0827   CD 32 08               CALL   prtdec1   
082A   0C                     INC   c   ; flag = true for at least digit
082B   1E FF                  LD   e,-1   
082D   CD 32 08               CALL   prtdec1   
0830   C1                     POP   bc   
0831   C9                     RET      
0832                PRTDEC1:      
0832   06 2F                  LD   b,"0"-1   
0834                PRTDEC2:      
0834   04                     INC   b   
0835   19                     ADD   hl,de   
0836   38 FC                  JR   c,prtdec2   
0838   ED 52                  SBC   hl,de   
083A   3E 30                  LD   a,"0"   
083C   B8                     CP   b   
083D   20 05                  JR   nz,prtdec3   
083F   AF                     XOR   a   
0840   B1                     OR   c   
0841   C8                     RET   z   
0842   18 01                  JR   prtdec4   
0844                PRTDEC3:      
0844   0C                     INC   c   
0845                PRTDEC4:      
0845   78                     LD   a,b   
0846   C3 85 00               JP   putchar   
0849                PRTHEX:      ; display hl as a 16-bit number in hex.
0849   C5                     PUSH   bc   ; preserve the IP
084A   7C                     LD   a,h   
084B   CD 54 08               CALL   prthex2   
084E   7D                     LD   a,l   
084F   CD 54 08               CALL   prthex2   
0852   C1                     POP   bc   
0853   C9                     RET      
0854                PRTHEX2:      
0854   4F                     LD   c,a   
0855   1F                     RRA      
0856   1F                     RRA      
0857   1F                     RRA      
0858   1F                     RRA      
0859   CD 5D 08               CALL   prthex3   
085C   79                     LD   a,c   
085D                PRTHEX3:      
085D   E6 0F                  AND   0x0F   
085F   C6 90                  ADD   a,0x90   
0861   27                     DAA      
0862   CE 40                  ADC   a,0x40   
0864   27                     DAA      
0865   C3 85 00               JP   putchar   
0868                PRTSTR0:      
0868   CD 85 00               CALL   putchar   
086B   23                     INC   hl   
086C                PRTSTR:      
086C   7E                     LD   a,(hl)   
086D   B7                     OR   a   
086E   20 F8                  JR   nz,prtstr0   
0870   C9                     RET      
0871                             ; **************************************************************************
0871                             ; calculate nesting value
0871                             ; a is char to be tested,
0871                             ; e is the nesting value (initially 0)
0871                             ; e is increased by ( and [
0871                             ; e is decreased by ) and ]
0871                             ; e has its bit 7 toggled by `
0871                             ; limited to 127 levels
0871                             ; **************************************************************************
0871                NESTING:      
0871   FE 22                  CP   DQUOTE   ; quote char
0873   28 06                  JR   z,nesting0   
0875   FE 60                  CP   "`"   ; quote char
0877   28 02                  JR   z,nesting0   
0879   18 0A                  JR   nesting1   
087B                NESTING0:      
087B   CB 7B                  BIT   7,e   
087D   28 03                  JR   z,nesting1a   
087F   CB BB                  RES   7,e   
0881   C9                     RET      
0882                NESTING1A:      
0882   CB FB                  SET   7,e   
0884   C9                     RET      
0885                NESTING1:      
0885   CB 7B                  BIT   7,e   
0887   C0                     RET   nz   
0888   FE 7B                  CP   "{"   
088A   28 08                  JR   z,nesting2   
088C   FE 5B                  CP   "["   
088E   28 04                  JR   z,nesting2   
0890   FE 28                  CP   "("   
0892   20 02                  JR   nz,nesting3   
0894                NESTING2:      
0894   1C                     INC   e   
0895   C9                     RET      
0896                NESTING3:      
0896   FE 7D                  CP   "}"   
0898   28 07                  JR   z,nesting4   
089A   FE 5D                  CP   "]"   
089C   28 03                  JR   z,nesting4   
089E   FE 29                  CP   ")"   
08A0   C0                     RET   nz   
08A1                NESTING4:      
08A1   1D                     DEC   e   
08A2   C9                     RET      
08A3                PROMPT:      
08A3   CD B3 08               CALL   printStr   
08A6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08AB   C9                     RET      
08AC                CRLF:        
08AC   CD B3 08               CALL   printStr   
08AF   0D 0A 00               .CSTR   "\r\n"   
08B2   C9                     RET      
08B3                             ; prints a null teminated string
08B3                             ; the string should be immedaitely following the call
08B3                PRINTSTR:      
08B3   E3                     EX   (sp),hl   ; swap			
08B4   CD 6C 08               CALL   prtstr   
08B7   23                     INC   hl   ; inc past NUL
08B8   E3                     EX   (sp),hl   ; put it back	
08B9   C9                     RET      
08BA                             ; executes a null teminated string (null executes exit_)
08BA                             ; the string should be immedaitely following the call
08BA                EXECSTR:      ; create a root stack frame
08BA   C1                     POP   bc   ; bc = code*
08BB   0B                     DEC   bc   ; dec to prepare for next routine
08BC   11 00 00               LD   de,0   
08BF   D5                     PUSH   de   ; push fake IP
08C0   D5                     PUSH   de   ; push null arg_list*
08C1   D5                     PUSH   de   ; push null first_arg*
08C2   D5                     PUSH   de   ; push fake BP
08C3   DD E9                  JP   (ix)   
08C5                             ; arg1 .. argn func -- ?
08C5                CALL:        
08C5   E1                     POP   hl   
08C6   E9                     JP   (hl)   
08C7                INIT:        
08C7   DD 2A EA 33            LD   ix,(vNext)   
08CB   FD 21 80 32            LD   iy,STACK   
08CF   21 80 01               LD   hl,isysVars   
08D2   11 E6 33               LD   de,sysVars   
08D5   01 10 00               LD   bc,8 * 2   
08D8   ED B0                  LDIR      
08DA   21 00 33               LD   hl,vars   ; 52 vars LO HI
08DD   06 34                  LD   b,26*2   
08DF   AF                     XOR   a   
08E0                INIT0:       
08E0   77                     LD   (hl),a   
08E1   23                     INC   hl   
08E2   10 FC                  DJNZ   init0   
08E4   C9                     RET      
08E5                START:       
08E5   31 80 32               LD   sp,STACK   ; start of monty
08E8   CD C7 08               CALL   init   ; setups
08EB   CD B3 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08EE   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08FB                INTERPRET:      
08FB   CD A3 08               CALL   prompt   
08FE   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0901   ED 43 E8 33            LD   (vTIBPtr),bc   
0905                INTERPRET2:      ; calc nesting (a macro might have changed it)
0905   1E 00                  LD   e,0   ; initilize nesting value
0907   C5                     PUSH   bc   ; save offset into TIB,
0908                             ; bc is also the count of chars in TIB
0908   21 00 34               LD   hl,TIB   ; hl is start of TIB
090B   18 06                  JR   interpret4   
090D                INTERPRET3:      
090D   7E                     LD   a,(hl)   ; a = char in TIB
090E   23                     INC   hl   ; inc pointer into TIB
090F   0B                     DEC   bc   ; dec count of chars in TIB
0910   CD 71 08               CALL   nesting   ; update nesting value
0913                INTERPRET4:      
0913   79                     LD   a,c   ; is count zero?
0914   B0                     OR   b   
0915   20 F6                  JR   nz,interpret3   ; if not loop
0917   C1                     POP   bc   ; restore offset into TIB
0918                INTERPRET5:      
0918   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
091B   FE 20                  CP   $20   ; compare to space
091D   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
091F   FE 00                  CP   $0   ; is it end of string? NUL end of string
0921                             ; ???? NEEDED?
0921   28 27                  JR   z,interpret8   
0923   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0925   28 10                  JR   z,interpret7   ; if anything else its macro/control
0927                             ; macro
0927                             ;  ld (vTIBPtr),bc
0927                             ;  ld hl,ctrlCodes
0927                             ;  add a,l			            ; look up key of macros
0927                             ;  ld l,a
0927                             ;  ld e,(hl)
0927                             ;  ld a,e
0927                             ;  or a
0927                             ;  jr z,macro1
0927                             ;  ld d,msb(macros)
0927                             ;  push de
0927                             ;  call call		            ; monty exec_ operation and jump to it
0927                             ;  db DC1,0
0927                             ; macro1:
0927                             ;  ld bc,(vTIBPtr)
0927   18 DC                  JR   interpret2   
0929                INTERPRET6:      
0929   21 00 34               LD   hl,TIB   
092C   09                     ADD   hl,bc   
092D   77                     LD   (hl),a   ; store the character in textbuf
092E   03                     INC   bc   
092F   CD 85 00               CALL   putchar   ; echo character to screen
0932   CD 71 08               CALL   nesting   
0935   18 E1                  JR   interpret5   ; wait for next character
0937                INTERPRET7:      
0937   21 00 34               LD   hl,TIB   
093A   09                     ADD   hl,bc   
093B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
093D   23                     INC   hl   
093E   36 0A                  LD   (hl),"\n"   
0940   23                     INC   hl   
0941   03                     INC   bc   
0942   03                     INC   bc   
0943   CD AC 08               CALL   crlf   ; echo character to screen
0946   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0947   B7                     OR   a   
0948   20 CE                  JR   nz,interpret5   
094A                INTERPRET8:      
094A   ED 43 E8 33            LD   (vTIBPtr),bc   
094E   01 00 34               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0951                             ; we pressed enter
0951   0B                     DEC   bc   
0952                NEXT:        
0952   03                     INC   bc   ; Increment the IP
0953   0A                     LD   a,(bc)   ; Get the next character and dispatch
0954   FE 20                  CP   " "   ; whitespace?
0956   28 FA                  JR   z,next   ; space? ignore
0958   38 07                  JR   c,next1   
095A   6F                     LD   l,a   ; index into table
095B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
095D   6E                     LD   l,(hl)   ; get low jump address
095E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0960   E9                     JP   (hl)   ; Jump to routine
0961                NEXT1:       
0961   FE 00                  CP   NUL   ; end of input string?
0963   28 03                  JR   z,exit_   
0965   C3 FB 08               JP   interpret   ; no, other whitespace, macros?
0968                EXIT_:       
0968   60 69                  LD   hl,bc   
096A   E9                     JP   (hl)   
096B                ERROR:       
096B   CD B3 08               CALL   printStr   
096E   45 72 72 6F 72 20 00   .CSTR   "Error "   
0975   CD 01 08               CALL   prtdec   
0978   C3 FB 08               JP   interpret   
097B                             ; .pstr "hash",0
097B                             ; dw hash \hsh
097B                             ; .pstr "input",0
097B                             ; dw input \in ?
097B                             ; call define
097B                             ; .pstr "output",0
097B                             ; dw output \out ?
097B                             ; .pstr "key",0
097B                             ; dw key \k
097B                             ; .pstr "loop",0
097B                             ; dw loop \rpt
097B                             ; .pstr "select",0
097B                             ; dw select. \sw
097B                             ; call define
097B                             ; .pstr "filter",0
097B                             ; dw filter \f ?
097B                             ; call define
097B                             ; .pstr "map",0
097B                             ; dw map \m ?
097B                             ; call define
097B                             ; .pstr "scan",0
097B                             ; dw scan.  \fold ?
097B                             ; call define
097B                             ; .pstr "sqrt",0
097B                             ; dw sqrt1 \sqt
097B                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                             ; test "{1}:", 1
0A00                             ; test "{{2}:}:", 2
0A00                             ; test "() {2} \\f:", 2
0A00                             ; 
0A00                          ;*Macro unroll:  test "\\F", false
0A00   31 80 32               LD   SP,STACK   
0A03   CD C7 08               CALL   init   
0A06   CD BA 08               CALL   execStr   
0A09   5C 46 00               .CSTR   "\\F"   
0A0C                          ;*Macro unroll:  expect "\\F",false
0A0C   E1                     POP   HL   
0A0D   E5                     PUSH   HL   
0A0E   11 00 00               LD   DE,false   
0A11   B7                     OR   A   
0A12   ED 52                  SBC   HL,DE   
0A14   7D                     LD   A,L   
0A15   B4                     OR   H   
0A16   28 4D                  JR   Z,expectM_0_2264S43   
0A18   CD B3 08               CALL   printStr   
0A1B   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0A24   CD B3 08               CALL   printStr   
0A27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A36   21 00 00               LD   HL,false   
0A39   CD 01 08               CALL   prtdec   
0A3C   CD B3 08               CALL   printStr   
0A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A4C   E1                     POP   hl   
0A4D   E5                     PUSH   hl   
0A4E   CD 01 08               CALL   prtdec   
0A51   E1                     POP   hl   
0A52   CD B3 08               CALL   printStr   
0A55   20 28 23 00            .CSTR   " (#"   
0A59   CD 49 08               CALL   prthex   
0A5C   CD B3 08               CALL   printStr   
0A5F   29 0D 0A 00            .CSTR   ")\r\n"   
0A63   76                     HALT      
0A64   00                     .CSTR      
0A65                EXPECTM_0_2264S43:      
0A65   E1                     POP   HL   
0A66                          ;*Macro unroll:  test "\\T", true
0A66   31 80 32               LD   SP,STACK   
0A69   CD C7 08               CALL   init   
0A6C   CD BA 08               CALL   execStr   
0A6F   5C 54 00               .CSTR   "\\T"   
0A72                          ;*Macro unroll:  expect "\\T",true
0A72   E1                     POP   HL   
0A73   E5                     PUSH   HL   
0A74   11 FF FF               LD   DE,true   
0A77   B7                     OR   A   
0A78   ED 52                  SBC   HL,DE   
0A7A   7D                     LD   A,L   
0A7B   B4                     OR   H   
0A7C   28 4D                  JR   Z,expectM_0_2265S43   
0A7E   CD B3 08               CALL   printStr   
0A81   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0A8A   CD B3 08               CALL   printStr   
0A8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A9C   21 FF FF               LD   HL,true   
0A9F   CD 01 08               CALL   prtdec   
0AA2   CD B3 08               CALL   printStr   
0AA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0AB2   E1                     POP   hl   
0AB3   E5                     PUSH   hl   
0AB4   CD 01 08               CALL   prtdec   
0AB7   E1                     POP   hl   
0AB8   CD B3 08               CALL   printStr   
0ABB   20 28 23 00            .CSTR   " (#"   
0ABF   CD 49 08               CALL   prthex   
0AC2   CD B3 08               CALL   printStr   
0AC5   29 0D 0A 00            .CSTR   ")\r\n"   
0AC9   76                     HALT      
0ACA   00                     .CSTR      
0ACB                EXPECTM_0_2265S43:      
0ACB   E1                     POP   HL   
0ACC                          ;*Macro unroll:  test "1", 1
0ACC   31 80 32               LD   SP,STACK   
0ACF   CD C7 08               CALL   init   
0AD2   CD BA 08               CALL   execStr   
0AD5   31 00                  .CSTR   "1"   
0AD7                          ;*Macro unroll:  expect "1",1
0AD7   E1                     POP   HL   
0AD8   E5                     PUSH   HL   
0AD9   11 01 00               LD   DE,1   
0ADC   B7                     OR   A   
0ADD   ED 52                  SBC   HL,DE   
0ADF   7D                     LD   A,L   
0AE0   B4                     OR   H   
0AE1   28 4C                  JR   Z,expectM_0_2266S43   
0AE3   CD B3 08               CALL   printStr   
0AE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0AEE   CD B3 08               CALL   printStr   
0AF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B00   21 01 00               LD   HL,1   
0B03   CD 01 08               CALL   prtdec   
0B06   CD B3 08               CALL   printStr   
0B09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B16   E1                     POP   hl   
0B17   E5                     PUSH   hl   
0B18   CD 01 08               CALL   prtdec   
0B1B   E1                     POP   hl   
0B1C   CD B3 08               CALL   printStr   
0B1F   20 28 23 00            .CSTR   " (#"   
0B23   CD 49 08               CALL   prthex   
0B26   CD B3 08               CALL   printStr   
0B29   29 0D 0A 00            .CSTR   ")\r\n"   
0B2D   76                     HALT      
0B2E   00                     .CSTR      
0B2F                EXPECTM_0_2266S43:      
0B2F   E1                     POP   HL   
0B30                          ;*Macro unroll:  test "2", 2
0B30   31 80 32               LD   SP,STACK   
0B33   CD C7 08               CALL   init   
0B36   CD BA 08               CALL   execStr   
0B39   32 00                  .CSTR   "2"   
0B3B                          ;*Macro unroll:  expect "2",2
0B3B   E1                     POP   HL   
0B3C   E5                     PUSH   HL   
0B3D   11 02 00               LD   DE,2   
0B40   B7                     OR   A   
0B41   ED 52                  SBC   HL,DE   
0B43   7D                     LD   A,L   
0B44   B4                     OR   H   
0B45   28 4C                  JR   Z,expectM_0_2267S43   
0B47   CD B3 08               CALL   printStr   
0B4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0B52   CD B3 08               CALL   printStr   
0B55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B64   21 02 00               LD   HL,2   
0B67   CD 01 08               CALL   prtdec   
0B6A   CD B3 08               CALL   printStr   
0B6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B7A   E1                     POP   hl   
0B7B   E5                     PUSH   hl   
0B7C   CD 01 08               CALL   prtdec   
0B7F   E1                     POP   hl   
0B80   CD B3 08               CALL   printStr   
0B83   20 28 23 00            .CSTR   " (#"   
0B87   CD 49 08               CALL   prthex   
0B8A   CD B3 08               CALL   printStr   
0B8D   29 0D 0A 00            .CSTR   ")\r\n"   
0B91   76                     HALT      
0B92   00                     .CSTR      
0B93                EXPECTM_0_2267S43:      
0B93   E1                     POP   HL   
0B94                          ;*Macro unroll:  test "1", 1
0B94   31 80 32               LD   SP,STACK   
0B97   CD C7 08               CALL   init   
0B9A   CD BA 08               CALL   execStr   
0B9D   31 00                  .CSTR   "1"   
0B9F                          ;*Macro unroll:  expect "1",1
0B9F   E1                     POP   HL   
0BA0   E5                     PUSH   HL   
0BA1   11 01 00               LD   DE,1   
0BA4   B7                     OR   A   
0BA5   ED 52                  SBC   HL,DE   
0BA7   7D                     LD   A,L   
0BA8   B4                     OR   H   
0BA9   28 4C                  JR   Z,expectM_0_2268S43   
0BAB   CD B3 08               CALL   printStr   
0BAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BB6   CD B3 08               CALL   printStr   
0BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BC8   21 01 00               LD   HL,1   
0BCB   CD 01 08               CALL   prtdec   
0BCE   CD B3 08               CALL   printStr   
0BD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BDE   E1                     POP   hl   
0BDF   E5                     PUSH   hl   
0BE0   CD 01 08               CALL   prtdec   
0BE3   E1                     POP   hl   
0BE4   CD B3 08               CALL   printStr   
0BE7   20 28 23 00            .CSTR   " (#"   
0BEB   CD 49 08               CALL   prthex   
0BEE   CD B3 08               CALL   printStr   
0BF1   29 0D 0A 00            .CSTR   ")\r\n"   
0BF5   76                     HALT      
0BF6   00                     .CSTR      
0BF7                EXPECTM_0_2268S43:      
0BF7   E1                     POP   HL   
0BF8                          ;*Macro unroll:  test "0", 0
0BF8   31 80 32               LD   SP,STACK   
0BFB   CD C7 08               CALL   init   
0BFE   CD BA 08               CALL   execStr   
0C01   30 00                  .CSTR   "0"   
0C03                          ;*Macro unroll:  expect "0",0
0C03   E1                     POP   HL   
0C04   E5                     PUSH   HL   
0C05   11 00 00               LD   DE,0   
0C08   B7                     OR   A   
0C09   ED 52                  SBC   HL,DE   
0C0B   7D                     LD   A,L   
0C0C   B4                     OR   H   
0C0D   28 4C                  JR   Z,expectM_0_2269S43   
0C0F   CD B3 08               CALL   printStr   
0C12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0C1A   CD B3 08               CALL   printStr   
0C1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C2C   21 00 00               LD   HL,0   
0C2F   CD 01 08               CALL   prtdec   
0C32   CD B3 08               CALL   printStr   
0C35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C42   E1                     POP   hl   
0C43   E5                     PUSH   hl   
0C44   CD 01 08               CALL   prtdec   
0C47   E1                     POP   hl   
0C48   CD B3 08               CALL   printStr   
0C4B   20 28 23 00            .CSTR   " (#"   
0C4F   CD 49 08               CALL   prthex   
0C52   CD B3 08               CALL   printStr   
0C55   29 0D 0A 00            .CSTR   ")\r\n"   
0C59   76                     HALT      
0C5A   00                     .CSTR      
0C5B                EXPECTM_0_2269S43:      
0C5B   E1                     POP   HL   
0C5C                          ;*Macro unroll:  test "10", 10
0C5C   31 80 32               LD   SP,STACK   
0C5F   CD C7 08               CALL   init   
0C62   CD BA 08               CALL   execStr   
0C65   31 30 00               .CSTR   "10"   
0C68                          ;*Macro unroll:  expect "10",10
0C68   E1                     POP   HL   
0C69   E5                     PUSH   HL   
0C6A   11 0A 00               LD   DE,10   
0C6D   B7                     OR   A   
0C6E   ED 52                  SBC   HL,DE   
0C70   7D                     LD   A,L   
0C71   B4                     OR   H   
0C72   28 4D                  JR   Z,expectM_0_2270S43   
0C74   CD B3 08               CALL   printStr   
0C77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0C80   CD B3 08               CALL   printStr   
0C83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C92   21 0A 00               LD   HL,10   
0C95   CD 01 08               CALL   prtdec   
0C98   CD B3 08               CALL   printStr   
0C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CA8   E1                     POP   hl   
0CA9   E5                     PUSH   hl   
0CAA   CD 01 08               CALL   prtdec   
0CAD   E1                     POP   hl   
0CAE   CD B3 08               CALL   printStr   
0CB1   20 28 23 00            .CSTR   " (#"   
0CB5   CD 49 08               CALL   prthex   
0CB8   CD B3 08               CALL   printStr   
0CBB   29 0D 0A 00            .CSTR   ")\r\n"   
0CBF   76                     HALT      
0CC0   00                     .CSTR      
0CC1                EXPECTM_0_2270S43:      
0CC1   E1                     POP   HL   
0CC2                          ;*Macro unroll:  test "123", 123
0CC2   31 80 32               LD   SP,STACK   
0CC5   CD C7 08               CALL   init   
0CC8   CD BA 08               CALL   execStr   
0CCB   31 32 33 00            .CSTR   "123"   
0CCF                          ;*Macro unroll:  expect "123",123
0CCF   E1                     POP   HL   
0CD0   E5                     PUSH   HL   
0CD1   11 7B 00               LD   DE,123   
0CD4   B7                     OR   A   
0CD5   ED 52                  SBC   HL,DE   
0CD7   7D                     LD   A,L   
0CD8   B4                     OR   H   
0CD9   28 4E                  JR   Z,expectM_0_2271S43   
0CDB   CD B3 08               CALL   printStr   
0CDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0CE8   CD B3 08               CALL   printStr   
0CEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CFA   21 7B 00               LD   HL,123   
0CFD   CD 01 08               CALL   prtdec   
0D00   CD B3 08               CALL   printStr   
0D03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D10   E1                     POP   hl   
0D11   E5                     PUSH   hl   
0D12   CD 01 08               CALL   prtdec   
0D15   E1                     POP   hl   
0D16   CD B3 08               CALL   printStr   
0D19   20 28 23 00            .CSTR   " (#"   
0D1D   CD 49 08               CALL   prthex   
0D20   CD B3 08               CALL   printStr   
0D23   29 0D 0A 00            .CSTR   ")\r\n"   
0D27   76                     HALT      
0D28   00                     .CSTR      
0D29                EXPECTM_0_2271S43:      
0D29   E1                     POP   HL   
0D2A                          ;*Macro unroll:  test "-1",-1
0D2A   31 80 32               LD   SP,STACK   
0D2D   CD C7 08               CALL   init   
0D30   CD BA 08               CALL   execStr   
0D33   2D 31 00               .CSTR   "-1"   
0D36                          ;*Macro unroll:  expect "-1",-1
0D36   E1                     POP   HL   
0D37   E5                     PUSH   HL   
0D38   11 FF FF               LD   DE,-1   
0D3B   B7                     OR   A   
0D3C   ED 52                  SBC   HL,DE   
0D3E   7D                     LD   A,L   
0D3F   B4                     OR   H   
0D40   28 4D                  JR   Z,expectM_0_2272S43   
0D42   CD B3 08               CALL   printStr   
0D45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0D4E   CD B3 08               CALL   printStr   
0D51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D60   21 FF FF               LD   HL,-1   
0D63   CD 01 08               CALL   prtdec   
0D66   CD B3 08               CALL   printStr   
0D69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D76   E1                     POP   hl   
0D77   E5                     PUSH   hl   
0D78   CD 01 08               CALL   prtdec   
0D7B   E1                     POP   hl   
0D7C   CD B3 08               CALL   printStr   
0D7F   20 28 23 00            .CSTR   " (#"   
0D83   CD 49 08               CALL   prthex   
0D86   CD B3 08               CALL   printStr   
0D89   29 0D 0A 00            .CSTR   ")\r\n"   
0D8D   76                     HALT      
0D8E   00                     .CSTR      
0D8F                EXPECTM_0_2272S43:      
0D8F   E1                     POP   HL   
0D90                          ;*Macro unroll:  test "''", 0
0D90   31 80 32               LD   SP,STACK   
0D93   CD C7 08               CALL   init   
0D96   CD BA 08               CALL   execStr   
0D99   27 27 00               .CSTR   "''"   
0D9C                          ;*Macro unroll:  expect "''",0
0D9C   E1                     POP   HL   
0D9D   E5                     PUSH   HL   
0D9E   11 00 00               LD   DE,0   
0DA1   B7                     OR   A   
0DA2   ED 52                  SBC   HL,DE   
0DA4   7D                     LD   A,L   
0DA5   B4                     OR   H   
0DA6   28 4D                  JR   Z,expectM_0_2273S43   
0DA8   CD B3 08               CALL   printStr   
0DAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0DB4   CD B3 08               CALL   printStr   
0DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DC6   21 00 00               LD   HL,0   
0DC9   CD 01 08               CALL   prtdec   
0DCC   CD B3 08               CALL   printStr   
0DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DDC   E1                     POP   hl   
0DDD   E5                     PUSH   hl   
0DDE   CD 01 08               CALL   prtdec   
0DE1   E1                     POP   hl   
0DE2   CD B3 08               CALL   printStr   
0DE5   20 28 23 00            .CSTR   " (#"   
0DE9   CD 49 08               CALL   prthex   
0DEC   CD B3 08               CALL   printStr   
0DEF   29 0D 0A 00            .CSTR   ")\r\n"   
0DF3   76                     HALT      
0DF4   00                     .CSTR      
0DF5                EXPECTM_0_2273S43:      
0DF5   E1                     POP   HL   
0DF6                          ;*Macro unroll:  test "'a'", $61
0DF6   31 80 32               LD   SP,STACK   
0DF9   CD C7 08               CALL   init   
0DFC   CD BA 08               CALL   execStr   
0DFF   27 61 27 00            .CSTR   "'a'"   
0E03                          ;*Macro unroll:  expect "'a'",$61
0E03   E1                     POP   HL   
0E04   E5                     PUSH   HL   
0E05   11 61 00               LD   DE,$61   
0E08   B7                     OR   A   
0E09   ED 52                  SBC   HL,DE   
0E0B   7D                     LD   A,L   
0E0C   B4                     OR   H   
0E0D   28 4E                  JR   Z,expectM_0_2274S43   
0E0F   CD B3 08               CALL   printStr   
0E12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0E1C   CD B3 08               CALL   printStr   
0E1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E2E   21 61 00               LD   HL,$61   
0E31   CD 01 08               CALL   prtdec   
0E34   CD B3 08               CALL   printStr   
0E37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E44   E1                     POP   hl   
0E45   E5                     PUSH   hl   
0E46   CD 01 08               CALL   prtdec   
0E49   E1                     POP   hl   
0E4A   CD B3 08               CALL   printStr   
0E4D   20 28 23 00            .CSTR   " (#"   
0E51   CD 49 08               CALL   prthex   
0E54   CD B3 08               CALL   printStr   
0E57   29 0D 0A 00            .CSTR   ")\r\n"   
0E5B   76                     HALT      
0E5C   00                     .CSTR      
0E5D                EXPECTM_0_2274S43:      
0E5D   E1                     POP   HL   
0E5E                          ;*Macro unroll:  test "'\\''", $27
0E5E   31 80 32               LD   SP,STACK   
0E61   CD C7 08               CALL   init   
0E64   CD BA 08               CALL   execStr   
0E67   27 5C 27 27 00         .CSTR   "'\\''"   
0E6C                          ;*Macro unroll:  expect "'\\''",$27
0E6C   E1                     POP   HL   
0E6D   E5                     PUSH   HL   
0E6E   11 27 00               LD   DE,$27   
0E71   B7                     OR   A   
0E72   ED 52                  SBC   HL,DE   
0E74   7D                     LD   A,L   
0E75   B4                     OR   H   
0E76   28 4F                  JR   Z,expectM_0_2275S43   
0E78   CD B3 08               CALL   printStr   
0E7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0E86   CD B3 08               CALL   printStr   
0E89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E98   21 27 00               LD   HL,$27   
0E9B   CD 01 08               CALL   prtdec   
0E9E   CD B3 08               CALL   printStr   
0EA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EAE   E1                     POP   hl   
0EAF   E5                     PUSH   hl   
0EB0   CD 01 08               CALL   prtdec   
0EB3   E1                     POP   hl   
0EB4   CD B3 08               CALL   printStr   
0EB7   20 28 23 00            .CSTR   " (#"   
0EBB   CD 49 08               CALL   prthex   
0EBE   CD B3 08               CALL   printStr   
0EC1   29 0D 0A 00            .CSTR   ")\r\n"   
0EC5   76                     HALT      
0EC6   00                     .CSTR      
0EC7                EXPECTM_0_2275S43:      
0EC7   E1                     POP   HL   
0EC8                          ;*Macro unroll:  test "#10", $10
0EC8   31 80 32               LD   SP,STACK   
0ECB   CD C7 08               CALL   init   
0ECE   CD BA 08               CALL   execStr   
0ED1   23 31 30 00            .CSTR   "#10"   
0ED5                          ;*Macro unroll:  expect "#10",$10
0ED5   E1                     POP   HL   
0ED6   E5                     PUSH   HL   
0ED7   11 10 00               LD   DE,$10   
0EDA   B7                     OR   A   
0EDB   ED 52                  SBC   HL,DE   
0EDD   7D                     LD   A,L   
0EDE   B4                     OR   H   
0EDF   28 4E                  JR   Z,expectM_0_2276S43   
0EE1   CD B3 08               CALL   printStr   
0EE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0EEE   CD B3 08               CALL   printStr   
0EF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F00   21 10 00               LD   HL,$10   
0F03   CD 01 08               CALL   prtdec   
0F06   CD B3 08               CALL   printStr   
0F09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F16   E1                     POP   hl   
0F17   E5                     PUSH   hl   
0F18   CD 01 08               CALL   prtdec   
0F1B   E1                     POP   hl   
0F1C   CD B3 08               CALL   printStr   
0F1F   20 28 23 00            .CSTR   " (#"   
0F23   CD 49 08               CALL   prthex   
0F26   CD B3 08               CALL   printStr   
0F29   29 0D 0A 00            .CSTR   ")\r\n"   
0F2D   76                     HALT      
0F2E   00                     .CSTR      
0F2F                EXPECTM_0_2276S43:      
0F2F   E1                     POP   HL   
0F30                          ;*Macro unroll:  test "#FF", $FF
0F30   31 80 32               LD   SP,STACK   
0F33   CD C7 08               CALL   init   
0F36   CD BA 08               CALL   execStr   
0F39   23 46 46 00            .CSTR   "#FF"   
0F3D                          ;*Macro unroll:  expect "#FF",$FF
0F3D   E1                     POP   HL   
0F3E   E5                     PUSH   HL   
0F3F   11 FF 00               LD   DE,$FF   
0F42   B7                     OR   A   
0F43   ED 52                  SBC   HL,DE   
0F45   7D                     LD   A,L   
0F46   B4                     OR   H   
0F47   28 4E                  JR   Z,expectM_0_2277S43   
0F49   CD B3 08               CALL   printStr   
0F4C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
0F56   CD B3 08               CALL   printStr   
0F59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F68   21 FF 00               LD   HL,$FF   
0F6B   CD 01 08               CALL   prtdec   
0F6E   CD B3 08               CALL   printStr   
0F71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F7E   E1                     POP   hl   
0F7F   E5                     PUSH   hl   
0F80   CD 01 08               CALL   prtdec   
0F83   E1                     POP   hl   
0F84   CD B3 08               CALL   printStr   
0F87   20 28 23 00            .CSTR   " (#"   
0F8B   CD 49 08               CALL   prthex   
0F8E   CD B3 08               CALL   printStr   
0F91   29 0D 0A 00            .CSTR   ")\r\n"   
0F95   76                     HALT      
0F96   00                     .CSTR      
0F97                EXPECTM_0_2277S43:      
0F97   E1                     POP   HL   
0F98                          ;*Macro unroll:  test "-1 2 +",1
0F98   31 80 32               LD   SP,STACK   
0F9B   CD C7 08               CALL   init   
0F9E   CD BA 08               CALL   execStr   
0FA1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
0FA8                          ;*Macro unroll:  expect "-1 2 +",1
0FA8   E1                     POP   HL   
0FA9   E5                     PUSH   HL   
0FAA   11 01 00               LD   DE,1   
0FAD   B7                     OR   A   
0FAE   ED 52                  SBC   HL,DE   
0FB0   7D                     LD   A,L   
0FB1   B4                     OR   H   
0FB2   28 51                  JR   Z,expectM_0_2278S43   
0FB4   CD B3 08               CALL   printStr   
0FB7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
0FC4   CD B3 08               CALL   printStr   
0FC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FD6   21 01 00               LD   HL,1   
0FD9   CD 01 08               CALL   prtdec   
0FDC   CD B3 08               CALL   printStr   
0FDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FEC   E1                     POP   hl   
0FED   E5                     PUSH   hl   
0FEE   CD 01 08               CALL   prtdec   
0FF1   E1                     POP   hl   
0FF2   CD B3 08               CALL   printStr   
0FF5   20 28 23 00            .CSTR   " (#"   
0FF9   CD 49 08               CALL   prthex   
0FFC   CD B3 08               CALL   printStr   
0FFF   29 0D 0A 00            .CSTR   ")\r\n"   
1003   76                     HALT      
1004   00                     .CSTR      
1005                EXPECTM_0_2278S43:      
1005   E1                     POP   HL   
1006                          ;*Macro unroll:  test "-1 1 +",0
1006   31 80 32               LD   SP,STACK   
1009   CD C7 08               CALL   init   
100C   CD BA 08               CALL   execStr   
100F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1016                          ;*Macro unroll:  expect "-1 1 +",0
1016   E1                     POP   HL   
1017   E5                     PUSH   HL   
1018   11 00 00               LD   DE,0   
101B   B7                     OR   A   
101C   ED 52                  SBC   HL,DE   
101E   7D                     LD   A,L   
101F   B4                     OR   H   
1020   28 51                  JR   Z,expectM_0_2279S43   
1022   CD B3 08               CALL   printStr   
1025   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1032   CD B3 08               CALL   printStr   
1035   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1044   21 00 00               LD   HL,0   
1047   CD 01 08               CALL   prtdec   
104A   CD B3 08               CALL   printStr   
104D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
105A   E1                     POP   hl   
105B   E5                     PUSH   hl   
105C   CD 01 08               CALL   prtdec   
105F   E1                     POP   hl   
1060   CD B3 08               CALL   printStr   
1063   20 28 23 00            .CSTR   " (#"   
1067   CD 49 08               CALL   prthex   
106A   CD B3 08               CALL   printStr   
106D   29 0D 0A 00            .CSTR   ")\r\n"   
1071   76                     HALT      
1072   00                     .CSTR      
1073                EXPECTM_0_2279S43:      
1073   E1                     POP   HL   
1074                          ;*Macro unroll:  test "1 2 +", 3
1074   31 80 32               LD   SP,STACK   
1077   CD C7 08               CALL   init   
107A   CD BA 08               CALL   execStr   
107D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1083                          ;*Macro unroll:  expect "1 2 +",3
1083   E1                     POP   HL   
1084   E5                     PUSH   HL   
1085   11 03 00               LD   DE,3   
1088   B7                     OR   A   
1089   ED 52                  SBC   HL,DE   
108B   7D                     LD   A,L   
108C   B4                     OR   H   
108D   28 50                  JR   Z,expectM_0_2280S43   
108F   CD B3 08               CALL   printStr   
1092   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
109E   CD B3 08               CALL   printStr   
10A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10B0   21 03 00               LD   HL,3   
10B3   CD 01 08               CALL   prtdec   
10B6   CD B3 08               CALL   printStr   
10B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10C6   E1                     POP   hl   
10C7   E5                     PUSH   hl   
10C8   CD 01 08               CALL   prtdec   
10CB   E1                     POP   hl   
10CC   CD B3 08               CALL   printStr   
10CF   20 28 23 00            .CSTR   " (#"   
10D3   CD 49 08               CALL   prthex   
10D6   CD B3 08               CALL   printStr   
10D9   29 0D 0A 00            .CSTR   ")\r\n"   
10DD   76                     HALT      
10DE   00                     .CSTR      
10DF                EXPECTM_0_2280S43:      
10DF   E1                     POP   HL   
10E0                          ;*Macro unroll:  test "4 1 2 +", 3
10E0   31 80 32               LD   SP,STACK   
10E3   CD C7 08               CALL   init   
10E6   CD BA 08               CALL   execStr   
10E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
10F1                          ;*Macro unroll:  expect "4 1 2 +",3
10F1   E1                     POP   HL   
10F2   E5                     PUSH   HL   
10F3   11 03 00               LD   DE,3   
10F6   B7                     OR   A   
10F7   ED 52                  SBC   HL,DE   
10F9   7D                     LD   A,L   
10FA   B4                     OR   H   
10FB   28 52                  JR   Z,expectM_0_2281S43   
10FD   CD B3 08               CALL   printStr   
1100   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
110E   CD B3 08               CALL   printStr   
1111   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1120   21 03 00               LD   HL,3   
1123   CD 01 08               CALL   prtdec   
1126   CD B3 08               CALL   printStr   
1129   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1136   E1                     POP   hl   
1137   E5                     PUSH   hl   
1138   CD 01 08               CALL   prtdec   
113B   E1                     POP   hl   
113C   CD B3 08               CALL   printStr   
113F   20 28 23 00            .CSTR   " (#"   
1143   CD 49 08               CALL   prthex   
1146   CD B3 08               CALL   printStr   
1149   29 0D 0A 00            .CSTR   ")\r\n"   
114D   76                     HALT      
114E   00                     .CSTR      
114F                EXPECTM_0_2281S43:      
114F   E1                     POP   HL   
1150                          ;*Macro unroll:  test "1 2 +", 3
1150   31 80 32               LD   SP,STACK   
1153   CD C7 08               CALL   init   
1156   CD BA 08               CALL   execStr   
1159   31 20 32 20 2B 00      .CSTR   "1 2 +"   
115F                          ;*Macro unroll:  expect "1 2 +",3
115F   E1                     POP   HL   
1160   E5                     PUSH   HL   
1161   11 03 00               LD   DE,3   
1164   B7                     OR   A   
1165   ED 52                  SBC   HL,DE   
1167   7D                     LD   A,L   
1168   B4                     OR   H   
1169   28 50                  JR   Z,expectM_0_2282S43   
116B   CD B3 08               CALL   printStr   
116E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
117A   CD B3 08               CALL   printStr   
117D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
118C   21 03 00               LD   HL,3   
118F   CD 01 08               CALL   prtdec   
1192   CD B3 08               CALL   printStr   
1195   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A2   E1                     POP   hl   
11A3   E5                     PUSH   hl   
11A4   CD 01 08               CALL   prtdec   
11A7   E1                     POP   hl   
11A8   CD B3 08               CALL   printStr   
11AB   20 28 23 00            .CSTR   " (#"   
11AF   CD 49 08               CALL   prthex   
11B2   CD B3 08               CALL   printStr   
11B5   29 0D 0A 00            .CSTR   ")\r\n"   
11B9   76                     HALT      
11BA   00                     .CSTR      
11BB                EXPECTM_0_2282S43:      
11BB   E1                     POP   HL   
11BC                          ;*Macro unroll:  test "123 456 +", 123+456
11BC   31 80 32               LD   SP,STACK   
11BF   CD C7 08               CALL   init   
11C2   CD BA 08               CALL   execStr   
11C5   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
11CF                          ;*Macro unroll:  expect "123 456 +",123+456
11CF   E1                     POP   HL   
11D0   E5                     PUSH   HL   
11D1   11 43 02               LD   DE,123+456   
11D4   B7                     OR   A   
11D5   ED 52                  SBC   HL,DE   
11D7   7D                     LD   A,L   
11D8   B4                     OR   H   
11D9   28 54                  JR   Z,expectM_0_2283S43   
11DB   CD B3 08               CALL   printStr   
11DE   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
11EE   CD B3 08               CALL   printStr   
11F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1200   21 43 02               LD   HL,123+456   
1203   CD 01 08               CALL   prtdec   
1206   CD B3 08               CALL   printStr   
1209   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1216   E1                     POP   hl   
1217   E5                     PUSH   hl   
1218   CD 01 08               CALL   prtdec   
121B   E1                     POP   hl   
121C   CD B3 08               CALL   printStr   
121F   20 28 23 00            .CSTR   " (#"   
1223   CD 49 08               CALL   prthex   
1226   CD B3 08               CALL   printStr   
1229   29 0D 0A 00            .CSTR   ")\r\n"   
122D   76                     HALT      
122E   00                     .CSTR      
122F                EXPECTM_0_2283S43:      
122F   E1                     POP   HL   
1230                          ;*Macro unroll:  test "64 128 +", 64+128
1230   31 80 32               LD   SP,STACK   
1233   CD C7 08               CALL   init   
1236   CD BA 08               CALL   execStr   
1239   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1242                          ;*Macro unroll:  expect "64 128 +",64+128
1242   E1                     POP   HL   
1243   E5                     PUSH   HL   
1244   11 C0 00               LD   DE,64+128   
1247   B7                     OR   A   
1248   ED 52                  SBC   HL,DE   
124A   7D                     LD   A,L   
124B   B4                     OR   H   
124C   28 53                  JR   Z,expectM_0_2284S43   
124E   CD B3 08               CALL   printStr   
1251   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1260   CD B3 08               CALL   printStr   
1263   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1272   21 C0 00               LD   HL,64+128   
1275   CD 01 08               CALL   prtdec   
1278   CD B3 08               CALL   printStr   
127B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1288   E1                     POP   hl   
1289   E5                     PUSH   hl   
128A   CD 01 08               CALL   prtdec   
128D   E1                     POP   hl   
128E   CD B3 08               CALL   printStr   
1291   20 28 23 00            .CSTR   " (#"   
1295   CD 49 08               CALL   prthex   
1298   CD B3 08               CALL   printStr   
129B   29 0D 0A 00            .CSTR   ")\r\n"   
129F   76                     HALT      
12A0   00                     .CSTR      
12A1                EXPECTM_0_2284S43:      
12A1   E1                     POP   HL   
12A2                          ;*Macro unroll:  test "-1 -1 -",0
12A2   31 80 32               LD   SP,STACK   
12A5   CD C7 08               CALL   init   
12A8   CD BA 08               CALL   execStr   
12AB   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
12B3                          ;*Macro unroll:  expect "-1 -1 -",0
12B3   E1                     POP   HL   
12B4   E5                     PUSH   HL   
12B5   11 00 00               LD   DE,0   
12B8   B7                     OR   A   
12B9   ED 52                  SBC   HL,DE   
12BB   7D                     LD   A,L   
12BC   B4                     OR   H   
12BD   28 52                  JR   Z,expectM_0_2285S43   
12BF   CD B3 08               CALL   printStr   
12C2   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
12D0   CD B3 08               CALL   printStr   
12D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E2   21 00 00               LD   HL,0   
12E5   CD 01 08               CALL   prtdec   
12E8   CD B3 08               CALL   printStr   
12EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F8   E1                     POP   hl   
12F9   E5                     PUSH   hl   
12FA   CD 01 08               CALL   prtdec   
12FD   E1                     POP   hl   
12FE   CD B3 08               CALL   printStr   
1301   20 28 23 00            .CSTR   " (#"   
1305   CD 49 08               CALL   prthex   
1308   CD B3 08               CALL   printStr   
130B   29 0D 0A 00            .CSTR   ")\r\n"   
130F   76                     HALT      
1310   00                     .CSTR      
1311                EXPECTM_0_2285S43:      
1311   E1                     POP   HL   
1312                          ;*Macro unroll:  test "5 3 -", 2
1312   31 80 32               LD   SP,STACK   
1315   CD C7 08               CALL   init   
1318   CD BA 08               CALL   execStr   
131B   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1321                          ;*Macro unroll:  expect "5 3 -",2
1321   E1                     POP   HL   
1322   E5                     PUSH   HL   
1323   11 02 00               LD   DE,2   
1326   B7                     OR   A   
1327   ED 52                  SBC   HL,DE   
1329   7D                     LD   A,L   
132A   B4                     OR   H   
132B   28 50                  JR   Z,expectM_0_2286S43   
132D   CD B3 08               CALL   printStr   
1330   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
133C   CD B3 08               CALL   printStr   
133F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134E   21 02 00               LD   HL,2   
1351   CD 01 08               CALL   prtdec   
1354   CD B3 08               CALL   printStr   
1357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1364   E1                     POP   hl   
1365   E5                     PUSH   hl   
1366   CD 01 08               CALL   prtdec   
1369   E1                     POP   hl   
136A   CD B3 08               CALL   printStr   
136D   20 28 23 00            .CSTR   " (#"   
1371   CD 49 08               CALL   prthex   
1374   CD B3 08               CALL   printStr   
1377   29 0D 0A 00            .CSTR   ")\r\n"   
137B   76                     HALT      
137C   00                     .CSTR      
137D                EXPECTM_0_2286S43:      
137D   E1                     POP   HL   
137E                          ;*Macro unroll:  test "3 5 &", 1
137E   31 80 32               LD   SP,STACK   
1381   CD C7 08               CALL   init   
1384   CD BA 08               CALL   execStr   
1387   33 20 35 20 26 00      .CSTR   "3 5 &"   
138D                          ;*Macro unroll:  expect "3 5 &",1
138D   E1                     POP   HL   
138E   E5                     PUSH   HL   
138F   11 01 00               LD   DE,1   
1392   B7                     OR   A   
1393   ED 52                  SBC   HL,DE   
1395   7D                     LD   A,L   
1396   B4                     OR   H   
1397   28 50                  JR   Z,expectM_0_2287S43   
1399   CD B3 08               CALL   printStr   
139C   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
13A8   CD B3 08               CALL   printStr   
13AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13BA   21 01 00               LD   HL,1   
13BD   CD 01 08               CALL   prtdec   
13C0   CD B3 08               CALL   printStr   
13C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13D0   E1                     POP   hl   
13D1   E5                     PUSH   hl   
13D2   CD 01 08               CALL   prtdec   
13D5   E1                     POP   hl   
13D6   CD B3 08               CALL   printStr   
13D9   20 28 23 00            .CSTR   " (#"   
13DD   CD 49 08               CALL   prthex   
13E0   CD B3 08               CALL   printStr   
13E3   29 0D 0A 00            .CSTR   ")\r\n"   
13E7   76                     HALT      
13E8   00                     .CSTR      
13E9                EXPECTM_0_2287S43:      
13E9   E1                     POP   HL   
13EA                          ;*Macro unroll:  test "3 5 |", 7
13EA   31 80 32               LD   SP,STACK   
13ED   CD C7 08               CALL   init   
13F0   CD BA 08               CALL   execStr   
13F3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
13F9                          ;*Macro unroll:  expect "3 5 |",7
13F9   E1                     POP   HL   
13FA   E5                     PUSH   HL   
13FB   11 07 00               LD   DE,7   
13FE   B7                     OR   A   
13FF   ED 52                  SBC   HL,DE   
1401   7D                     LD   A,L   
1402   B4                     OR   H   
1403   28 50                  JR   Z,expectM_0_2288S43   
1405   CD B3 08               CALL   printStr   
1408   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1414   CD B3 08               CALL   printStr   
1417   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1426   21 07 00               LD   HL,7   
1429   CD 01 08               CALL   prtdec   
142C   CD B3 08               CALL   printStr   
142F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
143C   E1                     POP   hl   
143D   E5                     PUSH   hl   
143E   CD 01 08               CALL   prtdec   
1441   E1                     POP   hl   
1442   CD B3 08               CALL   printStr   
1445   20 28 23 00            .CSTR   " (#"   
1449   CD 49 08               CALL   prthex   
144C   CD B3 08               CALL   printStr   
144F   29 0D 0A 00            .CSTR   ")\r\n"   
1453   76                     HALT      
1454   00                     .CSTR      
1455                EXPECTM_0_2288S43:      
1455   E1                     POP   HL   
1456                          ;*Macro unroll:  test "2 3 *", 6
1456   31 80 32               LD   SP,STACK   
1459   CD C7 08               CALL   init   
145C   CD BA 08               CALL   execStr   
145F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1465                          ;*Macro unroll:  expect "2 3 *",6
1465   E1                     POP   HL   
1466   E5                     PUSH   HL   
1467   11 06 00               LD   DE,6   
146A   B7                     OR   A   
146B   ED 52                  SBC   HL,DE   
146D   7D                     LD   A,L   
146E   B4                     OR   H   
146F   28 50                  JR   Z,expectM_0_2289S43   
1471   CD B3 08               CALL   printStr   
1474   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1480   CD B3 08               CALL   printStr   
1483   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1492   21 06 00               LD   HL,6   
1495   CD 01 08               CALL   prtdec   
1498   CD B3 08               CALL   printStr   
149B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A8   E1                     POP   hl   
14A9   E5                     PUSH   hl   
14AA   CD 01 08               CALL   prtdec   
14AD   E1                     POP   hl   
14AE   CD B3 08               CALL   printStr   
14B1   20 28 23 00            .CSTR   " (#"   
14B5   CD 49 08               CALL   prthex   
14B8   CD B3 08               CALL   printStr   
14BB   29 0D 0A 00            .CSTR   ")\r\n"   
14BF   76                     HALT      
14C0   00                     .CSTR      
14C1                EXPECTM_0_2289S43:      
14C1   E1                     POP   HL   
14C2                          ;*Macro unroll:  test "1 2 3 + *", 5
14C2   31 80 32               LD   SP,STACK   
14C5   CD C7 08               CALL   init   
14C8   CD BA 08               CALL   execStr   
14CB   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
14D5                          ;*Macro unroll:  expect "1 2 3 + *",5
14D5   E1                     POP   HL   
14D6   E5                     PUSH   HL   
14D7   11 05 00               LD   DE,5   
14DA   B7                     OR   A   
14DB   ED 52                  SBC   HL,DE   
14DD   7D                     LD   A,L   
14DE   B4                     OR   H   
14DF   28 54                  JR   Z,expectM_0_2290S43   
14E1   CD B3 08               CALL   printStr   
14E4   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
14F4   CD B3 08               CALL   printStr   
14F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1506   21 05 00               LD   HL,5   
1509   CD 01 08               CALL   prtdec   
150C   CD B3 08               CALL   printStr   
150F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
151C   E1                     POP   hl   
151D   E5                     PUSH   hl   
151E   CD 01 08               CALL   prtdec   
1521   E1                     POP   hl   
1522   CD B3 08               CALL   printStr   
1525   20 28 23 00            .CSTR   " (#"   
1529   CD 49 08               CALL   prthex   
152C   CD B3 08               CALL   printStr   
152F   29 0D 0A 00            .CSTR   ")\r\n"   
1533   76                     HALT      
1534   00                     .CSTR      
1535                EXPECTM_0_2290S43:      
1535   E1                     POP   HL   
1536                          ;*Macro unroll:  test "7 3 /", 2
1536   31 80 32               LD   SP,STACK   
1539   CD C7 08               CALL   init   
153C   CD BA 08               CALL   execStr   
153F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1545                          ;*Macro unroll:  expect "7 3 /",2
1545   E1                     POP   HL   
1546   E5                     PUSH   HL   
1547   11 02 00               LD   DE,2   
154A   B7                     OR   A   
154B   ED 52                  SBC   HL,DE   
154D   7D                     LD   A,L   
154E   B4                     OR   H   
154F   28 50                  JR   Z,expectM_0_2291S43   
1551   CD B3 08               CALL   printStr   
1554   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1560   CD B3 08               CALL   printStr   
1563   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1572   21 02 00               LD   HL,2   
1575   CD 01 08               CALL   prtdec   
1578   CD B3 08               CALL   printStr   
157B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1588   E1                     POP   hl   
1589   E5                     PUSH   hl   
158A   CD 01 08               CALL   prtdec   
158D   E1                     POP   hl   
158E   CD B3 08               CALL   printStr   
1591   20 28 23 00            .CSTR   " (#"   
1595   CD 49 08               CALL   prthex   
1598   CD B3 08               CALL   printStr   
159B   29 0D 0A 00            .CSTR   ")\r\n"   
159F   76                     HALT      
15A0   00                     .CSTR      
15A1                EXPECTM_0_2291S43:      
15A1   E1                     POP   HL   
15A2                          ;*Macro unroll:  test "7 3 / _", 1
15A2   31 80 32               LD   SP,STACK   
15A5   CD C7 08               CALL   init   
15A8   CD BA 08               CALL   execStr   
15AB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
15B3                          ;*Macro unroll:  expect "7 3 / _",1
15B3   E1                     POP   HL   
15B4   E5                     PUSH   HL   
15B5   11 01 00               LD   DE,1   
15B8   B7                     OR   A   
15B9   ED 52                  SBC   HL,DE   
15BB   7D                     LD   A,L   
15BC   B4                     OR   H   
15BD   28 52                  JR   Z,expectM_0_2292S43   
15BF   CD B3 08               CALL   printStr   
15C2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
15D0   CD B3 08               CALL   printStr   
15D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15E2   21 01 00               LD   HL,1   
15E5   CD 01 08               CALL   prtdec   
15E8   CD B3 08               CALL   printStr   
15EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15F8   E1                     POP   hl   
15F9   E5                     PUSH   hl   
15FA   CD 01 08               CALL   prtdec   
15FD   E1                     POP   hl   
15FE   CD B3 08               CALL   printStr   
1601   20 28 23 00            .CSTR   " (#"   
1605   CD 49 08               CALL   prthex   
1608   CD B3 08               CALL   printStr   
160B   29 0D 0A 00            .CSTR   ")\r\n"   
160F   76                     HALT      
1610   00                     .CSTR      
1611                EXPECTM_0_2292S43:      
1611   E1                     POP   HL   
1612                          ;*Macro unroll:  test "2 3 ==", FALSE
1612   31 80 32               LD   SP,STACK   
1615   CD C7 08               CALL   init   
1618   CD BA 08               CALL   execStr   
161B   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1622                          ;*Macro unroll:  expect "2 3 ==",FALSE
1622   E1                     POP   HL   
1623   E5                     PUSH   HL   
1624   11 00 00               LD   DE,FALSE   
1627   B7                     OR   A   
1628   ED 52                  SBC   HL,DE   
162A   7D                     LD   A,L   
162B   B4                     OR   H   
162C   28 51                  JR   Z,expectM_0_2293S43   
162E   CD B3 08               CALL   printStr   
1631   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
163E   CD B3 08               CALL   printStr   
1641   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1650   21 00 00               LD   HL,FALSE   
1653   CD 01 08               CALL   prtdec   
1656   CD B3 08               CALL   printStr   
1659   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1666   E1                     POP   hl   
1667   E5                     PUSH   hl   
1668   CD 01 08               CALL   prtdec   
166B   E1                     POP   hl   
166C   CD B3 08               CALL   printStr   
166F   20 28 23 00            .CSTR   " (#"   
1673   CD 49 08               CALL   prthex   
1676   CD B3 08               CALL   printStr   
1679   29 0D 0A 00            .CSTR   ")\r\n"   
167D   76                     HALT      
167E   00                     .CSTR      
167F                EXPECTM_0_2293S43:      
167F   E1                     POP   HL   
1680                          ;*Macro unroll:  test "3 3 ==", TRUE
1680   31 80 32               LD   SP,STACK   
1683   CD C7 08               CALL   init   
1686   CD BA 08               CALL   execStr   
1689   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1690                          ;*Macro unroll:  expect "3 3 ==",TRUE
1690   E1                     POP   HL   
1691   E5                     PUSH   HL   
1692   11 FF FF               LD   DE,TRUE   
1695   B7                     OR   A   
1696   ED 52                  SBC   HL,DE   
1698   7D                     LD   A,L   
1699   B4                     OR   H   
169A   28 51                  JR   Z,expectM_0_2294S43   
169C   CD B3 08               CALL   printStr   
169F   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
16AC   CD B3 08               CALL   printStr   
16AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16BE   21 FF FF               LD   HL,TRUE   
16C1   CD 01 08               CALL   prtdec   
16C4   CD B3 08               CALL   printStr   
16C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16D4   E1                     POP   hl   
16D5   E5                     PUSH   hl   
16D6   CD 01 08               CALL   prtdec   
16D9   E1                     POP   hl   
16DA   CD B3 08               CALL   printStr   
16DD   20 28 23 00            .CSTR   " (#"   
16E1   CD 49 08               CALL   prthex   
16E4   CD B3 08               CALL   printStr   
16E7   29 0D 0A 00            .CSTR   ")\r\n"   
16EB   76                     HALT      
16EC   00                     .CSTR      
16ED                EXPECTM_0_2294S43:      
16ED   E1                     POP   HL   
16EE                          ;*Macro unroll:  test "1 2 <", TRUE
16EE   31 80 32               LD   SP,STACK   
16F1   CD C7 08               CALL   init   
16F4   CD BA 08               CALL   execStr   
16F7   31 20 32 20 3C 00      .CSTR   "1 2 <"   
16FD                          ;*Macro unroll:  expect "1 2 <",TRUE
16FD   E1                     POP   HL   
16FE   E5                     PUSH   HL   
16FF   11 FF FF               LD   DE,TRUE   
1702   B7                     OR   A   
1703   ED 52                  SBC   HL,DE   
1705   7D                     LD   A,L   
1706   B4                     OR   H   
1707   28 50                  JR   Z,expectM_0_2295S43   
1709   CD B3 08               CALL   printStr   
170C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1718   CD B3 08               CALL   printStr   
171B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
172A   21 FF FF               LD   HL,TRUE   
172D   CD 01 08               CALL   prtdec   
1730   CD B3 08               CALL   printStr   
1733   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1740   E1                     POP   hl   
1741   E5                     PUSH   hl   
1742   CD 01 08               CALL   prtdec   
1745   E1                     POP   hl   
1746   CD B3 08               CALL   printStr   
1749   20 28 23 00            .CSTR   " (#"   
174D   CD 49 08               CALL   prthex   
1750   CD B3 08               CALL   printStr   
1753   29 0D 0A 00            .CSTR   ")\r\n"   
1757   76                     HALT      
1758   00                     .CSTR      
1759                EXPECTM_0_2295S43:      
1759   E1                     POP   HL   
175A                          ;*Macro unroll:  test "2 1 <", FALSE
175A   31 80 32               LD   SP,STACK   
175D   CD C7 08               CALL   init   
1760   CD BA 08               CALL   execStr   
1763   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1769                          ;*Macro unroll:  expect "2 1 <",FALSE
1769   E1                     POP   HL   
176A   E5                     PUSH   HL   
176B   11 00 00               LD   DE,FALSE   
176E   B7                     OR   A   
176F   ED 52                  SBC   HL,DE   
1771   7D                     LD   A,L   
1772   B4                     OR   H   
1773   28 50                  JR   Z,expectM_0_2296S43   
1775   CD B3 08               CALL   printStr   
1778   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1784   CD B3 08               CALL   printStr   
1787   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1796   21 00 00               LD   HL,FALSE   
1799   CD 01 08               CALL   prtdec   
179C   CD B3 08               CALL   printStr   
179F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17AC   E1                     POP   hl   
17AD   E5                     PUSH   hl   
17AE   CD 01 08               CALL   prtdec   
17B1   E1                     POP   hl   
17B2   CD B3 08               CALL   printStr   
17B5   20 28 23 00            .CSTR   " (#"   
17B9   CD 49 08               CALL   prthex   
17BC   CD B3 08               CALL   printStr   
17BF   29 0D 0A 00            .CSTR   ")\r\n"   
17C3   76                     HALT      
17C4   00                     .CSTR      
17C5                EXPECTM_0_2296S43:      
17C5   E1                     POP   HL   
17C6                          ;*Macro unroll:  test "2 3 <", TRUE
17C6   31 80 32               LD   SP,STACK   
17C9   CD C7 08               CALL   init   
17CC   CD BA 08               CALL   execStr   
17CF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
17D5                          ;*Macro unroll:  expect "2 3 <",TRUE
17D5   E1                     POP   HL   
17D6   E5                     PUSH   HL   
17D7   11 FF FF               LD   DE,TRUE   
17DA   B7                     OR   A   
17DB   ED 52                  SBC   HL,DE   
17DD   7D                     LD   A,L   
17DE   B4                     OR   H   
17DF   28 50                  JR   Z,expectM_0_2297S43   
17E1   CD B3 08               CALL   printStr   
17E4   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
17F0   CD B3 08               CALL   printStr   
17F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1802   21 FF FF               LD   HL,TRUE   
1805   CD 01 08               CALL   prtdec   
1808   CD B3 08               CALL   printStr   
180B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1818   E1                     POP   hl   
1819   E5                     PUSH   hl   
181A   CD 01 08               CALL   prtdec   
181D   E1                     POP   hl   
181E   CD B3 08               CALL   printStr   
1821   20 28 23 00            .CSTR   " (#"   
1825   CD 49 08               CALL   prthex   
1828   CD B3 08               CALL   printStr   
182B   29 0D 0A 00            .CSTR   ")\r\n"   
182F   76                     HALT      
1830   00                     .CSTR      
1831                EXPECTM_0_2297S43:      
1831   E1                     POP   HL   
1832                          ;*Macro unroll:  test "3 3 <", FALSE
1832   31 80 32               LD   SP,STACK   
1835   CD C7 08               CALL   init   
1838   CD BA 08               CALL   execStr   
183B   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1841                          ;*Macro unroll:  expect "3 3 <",FALSE
1841   E1                     POP   HL   
1842   E5                     PUSH   HL   
1843   11 00 00               LD   DE,FALSE   
1846   B7                     OR   A   
1847   ED 52                  SBC   HL,DE   
1849   7D                     LD   A,L   
184A   B4                     OR   H   
184B   28 50                  JR   Z,expectM_0_2298S43   
184D   CD B3 08               CALL   printStr   
1850   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
185C   CD B3 08               CALL   printStr   
185F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186E   21 00 00               LD   HL,FALSE   
1871   CD 01 08               CALL   prtdec   
1874   CD B3 08               CALL   printStr   
1877   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1884   E1                     POP   hl   
1885   E5                     PUSH   hl   
1886   CD 01 08               CALL   prtdec   
1889   E1                     POP   hl   
188A   CD B3 08               CALL   printStr   
188D   20 28 23 00            .CSTR   " (#"   
1891   CD 49 08               CALL   prthex   
1894   CD B3 08               CALL   printStr   
1897   29 0D 0A 00            .CSTR   ")\r\n"   
189B   76                     HALT      
189C   00                     .CSTR      
189D                EXPECTM_0_2298S43:      
189D   E1                     POP   HL   
189E                          ;*Macro unroll:  test "1 2 >", FALSE
189E   31 80 32               LD   SP,STACK   
18A1   CD C7 08               CALL   init   
18A4   CD BA 08               CALL   execStr   
18A7   31 20 32 20 3E 00      .CSTR   "1 2 >"   
18AD                          ;*Macro unroll:  expect "1 2 >",FALSE
18AD   E1                     POP   HL   
18AE   E5                     PUSH   HL   
18AF   11 00 00               LD   DE,FALSE   
18B2   B7                     OR   A   
18B3   ED 52                  SBC   HL,DE   
18B5   7D                     LD   A,L   
18B6   B4                     OR   H   
18B7   28 50                  JR   Z,expectM_0_2299S43   
18B9   CD B3 08               CALL   printStr   
18BC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
18C8   CD B3 08               CALL   printStr   
18CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18DA   21 00 00               LD   HL,FALSE   
18DD   CD 01 08               CALL   prtdec   
18E0   CD B3 08               CALL   printStr   
18E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F0   E1                     POP   hl   
18F1   E5                     PUSH   hl   
18F2   CD 01 08               CALL   prtdec   
18F5   E1                     POP   hl   
18F6   CD B3 08               CALL   printStr   
18F9   20 28 23 00            .CSTR   " (#"   
18FD   CD 49 08               CALL   prthex   
1900   CD B3 08               CALL   printStr   
1903   29 0D 0A 00            .CSTR   ")\r\n"   
1907   76                     HALT      
1908   00                     .CSTR      
1909                EXPECTM_0_2299S43:      
1909   E1                     POP   HL   
190A                          ;*Macro unroll:  test "2 1 >", TRUE
190A   31 80 32               LD   SP,STACK   
190D   CD C7 08               CALL   init   
1910   CD BA 08               CALL   execStr   
1913   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1919                          ;*Macro unroll:  expect "2 1 >",TRUE
1919   E1                     POP   HL   
191A   E5                     PUSH   HL   
191B   11 FF FF               LD   DE,TRUE   
191E   B7                     OR   A   
191F   ED 52                  SBC   HL,DE   
1921   7D                     LD   A,L   
1922   B4                     OR   H   
1923   28 50                  JR   Z,expectM_0_2300S43   
1925   CD B3 08               CALL   printStr   
1928   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1934   CD B3 08               CALL   printStr   
1937   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1946   21 FF FF               LD   HL,TRUE   
1949   CD 01 08               CALL   prtdec   
194C   CD B3 08               CALL   printStr   
194F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
195C   E1                     POP   hl   
195D   E5                     PUSH   hl   
195E   CD 01 08               CALL   prtdec   
1961   E1                     POP   hl   
1962   CD B3 08               CALL   printStr   
1965   20 28 23 00            .CSTR   " (#"   
1969   CD 49 08               CALL   prthex   
196C   CD B3 08               CALL   printStr   
196F   29 0D 0A 00            .CSTR   ")\r\n"   
1973   76                     HALT      
1974   00                     .CSTR      
1975                EXPECTM_0_2300S43:      
1975   E1                     POP   HL   
1976                          ;*Macro unroll:  test "3 3 >", FALSE
1976   31 80 32               LD   SP,STACK   
1979   CD C7 08               CALL   init   
197C   CD BA 08               CALL   execStr   
197F   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1985                          ;*Macro unroll:  expect "3 3 >",FALSE
1985   E1                     POP   HL   
1986   E5                     PUSH   HL   
1987   11 00 00               LD   DE,FALSE   
198A   B7                     OR   A   
198B   ED 52                  SBC   HL,DE   
198D   7D                     LD   A,L   
198E   B4                     OR   H   
198F   28 50                  JR   Z,expectM_0_2301S43   
1991   CD B3 08               CALL   printStr   
1994   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
19A0   CD B3 08               CALL   printStr   
19A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19B2   21 00 00               LD   HL,FALSE   
19B5   CD 01 08               CALL   prtdec   
19B8   CD B3 08               CALL   printStr   
19BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C8   E1                     POP   hl   
19C9   E5                     PUSH   hl   
19CA   CD 01 08               CALL   prtdec   
19CD   E1                     POP   hl   
19CE   CD B3 08               CALL   printStr   
19D1   20 28 23 00            .CSTR   " (#"   
19D5   CD 49 08               CALL   prthex   
19D8   CD B3 08               CALL   printStr   
19DB   29 0D 0A 00            .CSTR   ")\r\n"   
19DF   76                     HALT      
19E0   00                     .CSTR      
19E1                EXPECTM_0_2301S43:      
19E1   E1                     POP   HL   
19E2                          ;*Macro unroll:  test "4 3 >", TRUE
19E2   31 80 32               LD   SP,STACK   
19E5   CD C7 08               CALL   init   
19E8   CD BA 08               CALL   execStr   
19EB   34 20 33 20 3E 00      .CSTR   "4 3 >"   
19F1                          ;*Macro unroll:  expect "4 3 >",TRUE
19F1   E1                     POP   HL   
19F2   E5                     PUSH   HL   
19F3   11 FF FF               LD   DE,TRUE   
19F6   B7                     OR   A   
19F7   ED 52                  SBC   HL,DE   
19F9   7D                     LD   A,L   
19FA   B4                     OR   H   
19FB   28 50                  JR   Z,expectM_0_2302S43   
19FD   CD B3 08               CALL   printStr   
1A00   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1A0C   CD B3 08               CALL   printStr   
1A0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A1E   21 FF FF               LD   HL,TRUE   
1A21   CD 01 08               CALL   prtdec   
1A24   CD B3 08               CALL   printStr   
1A27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A34   E1                     POP   hl   
1A35   E5                     PUSH   hl   
1A36   CD 01 08               CALL   prtdec   
1A39   E1                     POP   hl   
1A3A   CD B3 08               CALL   printStr   
1A3D   20 28 23 00            .CSTR   " (#"   
1A41   CD 49 08               CALL   prthex   
1A44   CD B3 08               CALL   printStr   
1A47   29 0D 0A 00            .CSTR   ")\r\n"   
1A4B   76                     HALT      
1A4C   00                     .CSTR      
1A4D                EXPECTM_0_2302S43:      
1A4D   E1                     POP   HL   
1A4E                          ;*Macro unroll:  test "2 2 <=", TRUE
1A4E   31 80 32               LD   SP,STACK   
1A51   CD C7 08               CALL   init   
1A54   CD BA 08               CALL   execStr   
1A57   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1A5E                          ;*Macro unroll:  expect "2 2 <=",TRUE
1A5E   E1                     POP   HL   
1A5F   E5                     PUSH   HL   
1A60   11 FF FF               LD   DE,TRUE   
1A63   B7                     OR   A   
1A64   ED 52                  SBC   HL,DE   
1A66   7D                     LD   A,L   
1A67   B4                     OR   H   
1A68   28 51                  JR   Z,expectM_0_2303S43   
1A6A   CD B3 08               CALL   printStr   
1A6D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1A7A   CD B3 08               CALL   printStr   
1A7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A8C   21 FF FF               LD   HL,TRUE   
1A8F   CD 01 08               CALL   prtdec   
1A92   CD B3 08               CALL   printStr   
1A95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AA2   E1                     POP   hl   
1AA3   E5                     PUSH   hl   
1AA4   CD 01 08               CALL   prtdec   
1AA7   E1                     POP   hl   
1AA8   CD B3 08               CALL   printStr   
1AAB   20 28 23 00            .CSTR   " (#"   
1AAF   CD 49 08               CALL   prthex   
1AB2   CD B3 08               CALL   printStr   
1AB5   29 0D 0A 00            .CSTR   ")\r\n"   
1AB9   76                     HALT      
1ABA   00                     .CSTR      
1ABB                EXPECTM_0_2303S43:      
1ABB   E1                     POP   HL   
1ABC                          ;*Macro unroll:  test "2 2 >=", TRUE
1ABC   31 80 32               LD   SP,STACK   
1ABF   CD C7 08               CALL   init   
1AC2   CD BA 08               CALL   execStr   
1AC5   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1ACC                          ;*Macro unroll:  expect "2 2 >=",TRUE
1ACC   E1                     POP   HL   
1ACD   E5                     PUSH   HL   
1ACE   11 FF FF               LD   DE,TRUE   
1AD1   B7                     OR   A   
1AD2   ED 52                  SBC   HL,DE   
1AD4   7D                     LD   A,L   
1AD5   B4                     OR   H   
1AD6   28 51                  JR   Z,expectM_0_2304S43   
1AD8   CD B3 08               CALL   printStr   
1ADB   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1AE8   CD B3 08               CALL   printStr   
1AEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AFA   21 FF FF               LD   HL,TRUE   
1AFD   CD 01 08               CALL   prtdec   
1B00   CD B3 08               CALL   printStr   
1B03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B10   E1                     POP   hl   
1B11   E5                     PUSH   hl   
1B12   CD 01 08               CALL   prtdec   
1B15   E1                     POP   hl   
1B16   CD B3 08               CALL   printStr   
1B19   20 28 23 00            .CSTR   " (#"   
1B1D   CD 49 08               CALL   prthex   
1B20   CD B3 08               CALL   printStr   
1B23   29 0D 0A 00            .CSTR   ")\r\n"   
1B27   76                     HALT      
1B28   00                     .CSTR      
1B29                EXPECTM_0_2304S43:      
1B29   E1                     POP   HL   
1B2A                          ;*Macro unroll:  test "3 1 <<", 6
1B2A   31 80 32               LD   SP,STACK   
1B2D   CD C7 08               CALL   init   
1B30   CD BA 08               CALL   execStr   
1B33   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1B3A                          ;*Macro unroll:  expect "3 1 <<",6
1B3A   E1                     POP   HL   
1B3B   E5                     PUSH   HL   
1B3C   11 06 00               LD   DE,6   
1B3F   B7                     OR   A   
1B40   ED 52                  SBC   HL,DE   
1B42   7D                     LD   A,L   
1B43   B4                     OR   H   
1B44   28 51                  JR   Z,expectM_0_2305S43   
1B46   CD B3 08               CALL   printStr   
1B49   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1B56   CD B3 08               CALL   printStr   
1B59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B68   21 06 00               LD   HL,6   
1B6B   CD 01 08               CALL   prtdec   
1B6E   CD B3 08               CALL   printStr   
1B71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7E   E1                     POP   hl   
1B7F   E5                     PUSH   hl   
1B80   CD 01 08               CALL   prtdec   
1B83   E1                     POP   hl   
1B84   CD B3 08               CALL   printStr   
1B87   20 28 23 00            .CSTR   " (#"   
1B8B   CD 49 08               CALL   prthex   
1B8E   CD B3 08               CALL   printStr   
1B91   29 0D 0A 00            .CSTR   ")\r\n"   
1B95   76                     HALT      
1B96   00                     .CSTR      
1B97                EXPECTM_0_2305S43:      
1B97   E1                     POP   HL   
1B98                          ;*Macro unroll:  test "10 1 >>", 5
1B98   31 80 32               LD   SP,STACK   
1B9B   CD C7 08               CALL   init   
1B9E   CD BA 08               CALL   execStr   
1BA1   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1BA9                          ;*Macro unroll:  expect "10 1 >>",5
1BA9   E1                     POP   HL   
1BAA   E5                     PUSH   HL   
1BAB   11 05 00               LD   DE,5   
1BAE   B7                     OR   A   
1BAF   ED 52                  SBC   HL,DE   
1BB1   7D                     LD   A,L   
1BB2   B4                     OR   H   
1BB3   28 52                  JR   Z,expectM_0_2306S43   
1BB5   CD B3 08               CALL   printStr   
1BB8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1BC6   CD B3 08               CALL   printStr   
1BC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD8   21 05 00               LD   HL,5   
1BDB   CD 01 08               CALL   prtdec   
1BDE   CD B3 08               CALL   printStr   
1BE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEE   E1                     POP   hl   
1BEF   E5                     PUSH   hl   
1BF0   CD 01 08               CALL   prtdec   
1BF3   E1                     POP   hl   
1BF4   CD B3 08               CALL   printStr   
1BF7   20 28 23 00            .CSTR   " (#"   
1BFB   CD 49 08               CALL   prthex   
1BFE   CD B3 08               CALL   printStr   
1C01   29 0D 0A 00            .CSTR   ")\r\n"   
1C05   76                     HALT      
1C06   00                     .CSTR      
1C07                EXPECTM_0_2306S43:      
1C07   E1                     POP   HL   
1C08                          ;*Macro unroll:  test "1 x = x", 1
1C08   31 80 32               LD   SP,STACK   
1C0B   CD C7 08               CALL   init   
1C0E   CD BA 08               CALL   execStr   
1C11   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1C19                          ;*Macro unroll:  expect "1 x = x",1
1C19   E1                     POP   HL   
1C1A   E5                     PUSH   HL   
1C1B   11 01 00               LD   DE,1   
1C1E   B7                     OR   A   
1C1F   ED 52                  SBC   HL,DE   
1C21   7D                     LD   A,L   
1C22   B4                     OR   H   
1C23   28 52                  JR   Z,expectM_0_2307S43   
1C25   CD B3 08               CALL   printStr   
1C28   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1C36   CD B3 08               CALL   printStr   
1C39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C48   21 01 00               LD   HL,1   
1C4B   CD 01 08               CALL   prtdec   
1C4E   CD B3 08               CALL   printStr   
1C51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C5E   E1                     POP   hl   
1C5F   E5                     PUSH   hl   
1C60   CD 01 08               CALL   prtdec   
1C63   E1                     POP   hl   
1C64   CD B3 08               CALL   printStr   
1C67   20 28 23 00            .CSTR   " (#"   
1C6B   CD 49 08               CALL   prthex   
1C6E   CD B3 08               CALL   printStr   
1C71   29 0D 0A 00            .CSTR   ")\r\n"   
1C75   76                     HALT      
1C76   00                     .CSTR      
1C77                EXPECTM_0_2307S43:      
1C77   E1                     POP   HL   
1C78                          ;*Macro unroll:  test "{1}:", 1
1C78   31 80 32               LD   SP,STACK   
1C7B   CD C7 08               CALL   init   
1C7E   CD BA 08               CALL   execStr   
1C81   7B 31 7D 3A 00         .CSTR   "{1}:"   
1C86                          ;*Macro unroll:  expect "{1}:",1
1C86   E1                     POP   HL   
1C87   E5                     PUSH   HL   
1C88   11 01 00               LD   DE,1   
1C8B   B7                     OR   A   
1C8C   ED 52                  SBC   HL,DE   
1C8E   7D                     LD   A,L   
1C8F   B4                     OR   H   
1C90   28 4F                  JR   Z,expectM_0_2308S43   
1C92   CD B3 08               CALL   printStr   
1C95   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
1CA0   CD B3 08               CALL   printStr   
1CA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB2   21 01 00               LD   HL,1   
1CB5   CD 01 08               CALL   prtdec   
1CB8   CD B3 08               CALL   printStr   
1CBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CC8   E1                     POP   hl   
1CC9   E5                     PUSH   hl   
1CCA   CD 01 08               CALL   prtdec   
1CCD   E1                     POP   hl   
1CCE   CD B3 08               CALL   printStr   
1CD1   20 28 23 00            .CSTR   " (#"   
1CD5   CD 49 08               CALL   prthex   
1CD8   CD B3 08               CALL   printStr   
1CDB   29 0D 0A 00            .CSTR   ")\r\n"   
1CDF   76                     HALT      
1CE0   00                     .CSTR      
1CE1                EXPECTM_0_2308S43:      
1CE1   E1                     POP   HL   
1CE2                          ;*Macro unroll:  test "{{1}:}:", 1
1CE2   31 80 32               LD   SP,STACK   
1CE5   CD C7 08               CALL   init   
1CE8   CD BA 08               CALL   execStr   
1CEB   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
1CF3                          ;*Macro unroll:  expect "{{1}:}:",1
1CF3   E1                     POP   HL   
1CF4   E5                     PUSH   HL   
1CF5   11 01 00               LD   DE,1   
1CF8   B7                     OR   A   
1CF9   ED 52                  SBC   HL,DE   
1CFB   7D                     LD   A,L   
1CFC   B4                     OR   H   
1CFD   28 52                  JR   Z,expectM_0_2309S43   
1CFF   CD B3 08               CALL   printStr   
1D02   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
1D10   CD B3 08               CALL   printStr   
1D13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D22   21 01 00               LD   HL,1   
1D25   CD 01 08               CALL   prtdec   
1D28   CD B3 08               CALL   printStr   
1D2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D38   E1                     POP   hl   
1D39   E5                     PUSH   hl   
1D3A   CD 01 08               CALL   prtdec   
1D3D   E1                     POP   hl   
1D3E   CD B3 08               CALL   printStr   
1D41   20 28 23 00            .CSTR   " (#"   
1D45   CD 49 08               CALL   prthex   
1D48   CD B3 08               CALL   printStr   
1D4B   29 0D 0A 00            .CSTR   ")\r\n"   
1D4F   76                     HALT      
1D50   00                     .CSTR      
1D51                EXPECTM_0_2309S43:      
1D51   E1                     POP   HL   
1D52                          ;*Macro unroll:  test "{{{1}:}:}:", 1
1D52   31 80 32               LD   SP,STACK   
1D55   CD C7 08               CALL   init   
1D58   CD BA 08               CALL   execStr   
1D5B   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
1D66                          ;*Macro unroll:  expect "{{{1}:}:}:",1
1D66   E1                     POP   HL   
1D67   E5                     PUSH   HL   
1D68   11 01 00               LD   DE,1   
1D6B   B7                     OR   A   
1D6C   ED 52                  SBC   HL,DE   
1D6E   7D                     LD   A,L   
1D6F   B4                     OR   H   
1D70   28 55                  JR   Z,expectM_0_2310S43   
1D72   CD B3 08               CALL   printStr   
1D75   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
1D86   CD B3 08               CALL   printStr   
1D89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D98   21 01 00               LD   HL,1   
1D9B   CD 01 08               CALL   prtdec   
1D9E   CD B3 08               CALL   printStr   
1DA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DAE   E1                     POP   hl   
1DAF   E5                     PUSH   hl   
1DB0   CD 01 08               CALL   prtdec   
1DB3   E1                     POP   hl   
1DB4   CD B3 08               CALL   printStr   
1DB7   20 28 23 00            .CSTR   " (#"   
1DBB   CD 49 08               CALL   prthex   
1DBE   CD B3 08               CALL   printStr   
1DC1   29 0D 0A 00            .CSTR   ")\r\n"   
1DC5   76                     HALT      
1DC6   00                     .CSTR      
1DC7                EXPECTM_0_2310S43:      
1DC7   E1                     POP   HL   
1DC8                          ;*Macro unroll:  test "5 \\F {10} ?", 5
1DC8   31 80 32               LD   SP,STACK   
1DCB   CD C7 08               CALL   init   
1DCE   CD BA 08               CALL   execStr   
1DD1   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
1DDD                          ;*Macro unroll:  expect "5 \\F {10} ?",5
1DDD   E1                     POP   HL   
1DDE   E5                     PUSH   HL   
1DDF   11 05 00               LD   DE,5   
1DE2   B7                     OR   A   
1DE3   ED 52                  SBC   HL,DE   
1DE5   7D                     LD   A,L   
1DE6   B4                     OR   H   
1DE7   28 56                  JR   Z,expectM_0_2311S43   
1DE9   CD B3 08               CALL   printStr   
1DEC   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
1DFE   CD B3 08               CALL   printStr   
1E01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E10   21 05 00               LD   HL,5   
1E13   CD 01 08               CALL   prtdec   
1E16   CD B3 08               CALL   printStr   
1E19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E26   E1                     POP   hl   
1E27   E5                     PUSH   hl   
1E28   CD 01 08               CALL   prtdec   
1E2B   E1                     POP   hl   
1E2C   CD B3 08               CALL   printStr   
1E2F   20 28 23 00            .CSTR   " (#"   
1E33   CD 49 08               CALL   prthex   
1E36   CD B3 08               CALL   printStr   
1E39   29 0D 0A 00            .CSTR   ")\r\n"   
1E3D   76                     HALT      
1E3E   00                     .CSTR      
1E3F                EXPECTM_0_2311S43:      
1E3F   E1                     POP   HL   
1E40                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
1E40   31 80 32               LD   SP,STACK   
1E43   CD C7 08               CALL   init   
1E46   CD BA 08               CALL   execStr   
1E49   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
1E57                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
1E57   E1                     POP   HL   
1E58   E5                     PUSH   HL   
1E59   11 0F 00               LD   DE,15   
1E5C   B7                     OR   A   
1E5D   ED 52                  SBC   HL,DE   
1E5F   7D                     LD   A,L   
1E60   B4                     OR   H   
1E61   28 58                  JR   Z,expectM_0_2312S43   
1E63   CD B3 08               CALL   printStr   
1E66   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
1E7A   CD B3 08               CALL   printStr   
1E7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E8C   21 0F 00               LD   HL,15   
1E8F   CD 01 08               CALL   prtdec   
1E92   CD B3 08               CALL   printStr   
1E95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA2   E1                     POP   hl   
1EA3   E5                     PUSH   hl   
1EA4   CD 01 08               CALL   prtdec   
1EA7   E1                     POP   hl   
1EA8   CD B3 08               CALL   printStr   
1EAB   20 28 23 00            .CSTR   " (#"   
1EAF   CD 49 08               CALL   prthex   
1EB2   CD B3 08               CALL   printStr   
1EB5   29 0D 0A 00            .CSTR   ")\r\n"   
1EB9   76                     HALT      
1EBA   00                     .CSTR      
1EBB                EXPECTM_0_2312S43:      
1EBB   E1                     POP   HL   
1EBC                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
1EBC   31 80 32               LD   SP,STACK   
1EBF   CD C7 08               CALL   init   
1EC2   CD BA 08               CALL   execStr   
1EC5   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
1ED9                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
1ED9   E1                     POP   HL   
1EDA   E5                     PUSH   HL   
1EDB   11 15 00               LD   DE,21   
1EDE   B7                     OR   A   
1EDF   ED 52                  SBC   HL,DE   
1EE1   7D                     LD   A,L   
1EE2   B4                     OR   H   
1EE3   28 5E                  JR   Z,expectM_0_2313S43   
1EE5   CD B3 08               CALL   printStr   
1EE8   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
1F02   CD B3 08               CALL   printStr   
1F05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F14   21 15 00               LD   HL,21   
1F17   CD 01 08               CALL   prtdec   
1F1A   CD B3 08               CALL   printStr   
1F1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F2A   E1                     POP   hl   
1F2B   E5                     PUSH   hl   
1F2C   CD 01 08               CALL   prtdec   
1F2F   E1                     POP   hl   
1F30   CD B3 08               CALL   printStr   
1F33   20 28 23 00            .CSTR   " (#"   
1F37   CD 49 08               CALL   prthex   
1F3A   CD B3 08               CALL   printStr   
1F3D   29 0D 0A 00            .CSTR   ")\r\n"   
1F41   76                     HALT      
1F42   00                     .CSTR      
1F43                EXPECTM_0_2313S43:      
1F43   E1                     POP   HL   
1F44                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
1F44   31 80 32               LD   SP,STACK   
1F47   CD C7 08               CALL   init   
1F4A   CD BA 08               CALL   execStr   
1F4D   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
1F61                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
1F61   E1                     POP   HL   
1F62   E5                     PUSH   HL   
1F63   11 0B 00               LD   DE,11   
1F66   B7                     OR   A   
1F67   ED 52                  SBC   HL,DE   
1F69   7D                     LD   A,L   
1F6A   B4                     OR   H   
1F6B   28 5E                  JR   Z,expectM_0_2314S43   
1F6D   CD B3 08               CALL   printStr   
1F70   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
1F8A   CD B3 08               CALL   printStr   
1F8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9C   21 0B 00               LD   HL,11   
1F9F   CD 01 08               CALL   prtdec   
1FA2   CD B3 08               CALL   printStr   
1FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB2   E1                     POP   hl   
1FB3   E5                     PUSH   hl   
1FB4   CD 01 08               CALL   prtdec   
1FB7   E1                     POP   hl   
1FB8   CD B3 08               CALL   printStr   
1FBB   20 28 23 00            .CSTR   " (#"   
1FBF   CD 49 08               CALL   prthex   
1FC2   CD B3 08               CALL   printStr   
1FC5   29 0D 0A 00            .CSTR   ")\r\n"   
1FC9   76                     HALT      
1FCA   00                     .CSTR      
1FCB                EXPECTM_0_2314S43:      
1FCB   E1                     POP   HL   
1FCC                          ;*Macro unroll:  test "() -2%", $0000
1FCC   31 80 32               LD   SP,STACK   
1FCF   CD C7 08               CALL   init   
1FD2   CD BA 08               CALL   execStr   
1FD5   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
1FDC                          ;*Macro unroll:  expect "() -2%",$0000
1FDC   E1                     POP   HL   
1FDD   E5                     PUSH   HL   
1FDE   11 00 00               LD   DE,$0000   
1FE1   B7                     OR   A   
1FE2   ED 52                  SBC   HL,DE   
1FE4   7D                     LD   A,L   
1FE5   B4                     OR   H   
1FE6   28 51                  JR   Z,expectM_0_2315S43   
1FE8   CD B3 08               CALL   printStr   
1FEB   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
1FF8   CD B3 08               CALL   printStr   
1FFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
200A   21 00 00               LD   HL,$0000   
200D   CD 01 08               CALL   prtdec   
2010   CD B3 08               CALL   printStr   
2013   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2020   E1                     POP   hl   
2021   E5                     PUSH   hl   
2022   CD 01 08               CALL   prtdec   
2025   E1                     POP   hl   
2026   CD B3 08               CALL   printStr   
2029   20 28 23 00            .CSTR   " (#"   
202D   CD 49 08               CALL   prthex   
2030   CD B3 08               CALL   printStr   
2033   29 0D 0A 00            .CSTR   ")\r\n"   
2037   76                     HALT      
2038   00                     .CSTR      
2039                EXPECTM_0_2315S43:      
2039   E1                     POP   HL   
203A                          ;*Macro unroll:  test "(a) -1%", $0001
203A   31 80 32               LD   SP,STACK   
203D   CD C7 08               CALL   init   
2040   CD BA 08               CALL   execStr   
2043   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
204B                          ;*Macro unroll:  expect "(a) -1%",$0001
204B   E1                     POP   HL   
204C   E5                     PUSH   HL   
204D   11 01 00               LD   DE,$0001   
2050   B7                     OR   A   
2051   ED 52                  SBC   HL,DE   
2053   7D                     LD   A,L   
2054   B4                     OR   H   
2055   28 52                  JR   Z,expectM_0_2316S43   
2057   CD B3 08               CALL   printStr   
205A   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2068   CD B3 08               CALL   printStr   
206B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
207A   21 01 00               LD   HL,$0001   
207D   CD 01 08               CALL   prtdec   
2080   CD B3 08               CALL   printStr   
2083   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2090   E1                     POP   hl   
2091   E5                     PUSH   hl   
2092   CD 01 08               CALL   prtdec   
2095   E1                     POP   hl   
2096   CD B3 08               CALL   printStr   
2099   20 28 23 00            .CSTR   " (#"   
209D   CD 49 08               CALL   prthex   
20A0   CD B3 08               CALL   printStr   
20A3   29 0D 0A 00            .CSTR   ")\r\n"   
20A7   76                     HALT      
20A8   00                     .CSTR      
20A9                EXPECTM_0_2316S43:      
20A9   E1                     POP   HL   
20AA                          ;*Macro unroll:  test "(a:) -1%", $0001
20AA   31 80 32               LD   SP,STACK   
20AD   CD C7 08               CALL   init   
20B0   CD BA 08               CALL   execStr   
20B3   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
20BC                          ;*Macro unroll:  expect "(a:) -1%",$0001
20BC   E1                     POP   HL   
20BD   E5                     PUSH   HL   
20BE   11 01 00               LD   DE,$0001   
20C1   B7                     OR   A   
20C2   ED 52                  SBC   HL,DE   
20C4   7D                     LD   A,L   
20C5   B4                     OR   H   
20C6   28 53                  JR   Z,expectM_0_2317S43   
20C8   CD B3 08               CALL   printStr   
20CB   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
20DA   CD B3 08               CALL   printStr   
20DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20EC   21 01 00               LD   HL,$0001   
20EF   CD 01 08               CALL   prtdec   
20F2   CD B3 08               CALL   printStr   
20F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2102   E1                     POP   hl   
2103   E5                     PUSH   hl   
2104   CD 01 08               CALL   prtdec   
2107   E1                     POP   hl   
2108   CD B3 08               CALL   printStr   
210B   20 28 23 00            .CSTR   " (#"   
210F   CD 49 08               CALL   prthex   
2112   CD B3 08               CALL   printStr   
2115   29 0D 0A 00            .CSTR   ")\r\n"   
2119   76                     HALT      
211A   00                     .CSTR      
211B                EXPECTM_0_2317S43:      
211B   E1                     POP   HL   
211C                          ;*Macro unroll:  test "(a:b) -1%", $0102
211C   31 80 32               LD   SP,STACK   
211F   CD C7 08               CALL   init   
2122   CD BA 08               CALL   execStr   
2125   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
212F                          ;*Macro unroll:  expect "(a:b) -1%",$0102
212F   E1                     POP   HL   
2130   E5                     PUSH   HL   
2131   11 02 01               LD   DE,$0102   
2134   B7                     OR   A   
2135   ED 52                  SBC   HL,DE   
2137   7D                     LD   A,L   
2138   B4                     OR   H   
2139   28 54                  JR   Z,expectM_0_2318S43   
213B   CD B3 08               CALL   printStr   
213E   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
214E   CD B3 08               CALL   printStr   
2151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2160   21 02 01               LD   HL,$0102   
2163   CD 01 08               CALL   prtdec   
2166   CD B3 08               CALL   printStr   
2169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2176   E1                     POP   hl   
2177   E5                     PUSH   hl   
2178   CD 01 08               CALL   prtdec   
217B   E1                     POP   hl   
217C   CD B3 08               CALL   printStr   
217F   20 28 23 00            .CSTR   " (#"   
2183   CD 49 08               CALL   prthex   
2186   CD B3 08               CALL   printStr   
2189   29 0D 0A 00            .CSTR   ")\r\n"   
218D   76                     HALT      
218E   00                     .CSTR      
218F                EXPECTM_0_2318S43:      
218F   E1                     POP   HL   
2190                          ;*Macro unroll:  test "(:b) -1%", $0101
2190   31 80 32               LD   SP,STACK   
2193   CD C7 08               CALL   init   
2196   CD BA 08               CALL   execStr   
2199   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
21A2                          ;*Macro unroll:  expect "(:b) -1%",$0101
21A2   E1                     POP   HL   
21A3   E5                     PUSH   HL   
21A4   11 01 01               LD   DE,$0101   
21A7   B7                     OR   A   
21A8   ED 52                  SBC   HL,DE   
21AA   7D                     LD   A,L   
21AB   B4                     OR   H   
21AC   28 53                  JR   Z,expectM_0_2319S43   
21AE   CD B3 08               CALL   printStr   
21B1   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
21C0   CD B3 08               CALL   printStr   
21C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D2   21 01 01               LD   HL,$0101   
21D5   CD 01 08               CALL   prtdec   
21D8   CD B3 08               CALL   printStr   
21DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E8   E1                     POP   hl   
21E9   E5                     PUSH   hl   
21EA   CD 01 08               CALL   prtdec   
21ED   E1                     POP   hl   
21EE   CD B3 08               CALL   printStr   
21F1   20 28 23 00            .CSTR   " (#"   
21F5   CD 49 08               CALL   prthex   
21F8   CD B3 08               CALL   printStr   
21FB   29 0D 0A 00            .CSTR   ")\r\n"   
21FF   76                     HALT      
2200   00                     .CSTR      
2201                EXPECTM_0_2319S43:      
2201   E1                     POP   HL   
2202                          ;*Macro unroll:  test "() {2} \\f:", 2
2202   31 80 32               LD   SP,STACK   
2205   CD C7 08               CALL   init   
2208   CD BA 08               CALL   execStr   
220B   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
2216                          ;*Macro unroll:  expect "() {2} \\f:",2
2216   E1                     POP   HL   
2217   E5                     PUSH   HL   
2218   11 02 00               LD   DE,2   
221B   B7                     OR   A   
221C   ED 52                  SBC   HL,DE   
221E   7D                     LD   A,L   
221F   B4                     OR   H   
2220   28 55                  JR   Z,expectM_0_2320S43   
2222   CD B3 08               CALL   printStr   
2225   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
2236   CD B3 08               CALL   printStr   
2239   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2248   21 02 00               LD   HL,2   
224B   CD 01 08               CALL   prtdec   
224E   CD B3 08               CALL   printStr   
2251   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
225E   E1                     POP   hl   
225F   E5                     PUSH   hl   
2260   CD 01 08               CALL   prtdec   
2263   E1                     POP   hl   
2264   CD B3 08               CALL   printStr   
2267   20 28 23 00            .CSTR   " (#"   
226B   CD 49 08               CALL   prthex   
226E   CD B3 08               CALL   printStr   
2271   29 0D 0A 00            .CSTR   ")\r\n"   
2275   76                     HALT      
2276   00                     .CSTR      
2277                EXPECTM_0_2320S43:      
2277   E1                     POP   HL   
2278                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2278   31 80 32               LD   SP,STACK   
227B   CD C7 08               CALL   init   
227E   CD BA 08               CALL   execStr   
2281   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
228D                          ;*Macro unroll:  expect "(a) {2} \\f:",2
228D   E1                     POP   HL   
228E   E5                     PUSH   HL   
228F   11 02 00               LD   DE,2   
2292   B7                     OR   A   
2293   ED 52                  SBC   HL,DE   
2295   7D                     LD   A,L   
2296   B4                     OR   H   
2297   28 56                  JR   Z,expectM_0_2321S43   
2299   CD B3 08               CALL   printStr   
229C   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
22AE   CD B3 08               CALL   printStr   
22B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C0   21 02 00               LD   HL,2   
22C3   CD 01 08               CALL   prtdec   
22C6   CD B3 08               CALL   printStr   
22C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22D6   E1                     POP   hl   
22D7   E5                     PUSH   hl   
22D8   CD 01 08               CALL   prtdec   
22DB   E1                     POP   hl   
22DC   CD B3 08               CALL   printStr   
22DF   20 28 23 00            .CSTR   " (#"   
22E3   CD 49 08               CALL   prthex   
22E6   CD B3 08               CALL   printStr   
22E9   29 0D 0A 00            .CSTR   ")\r\n"   
22ED   76                     HALT      
22EE   00                     .CSTR      
22EF                EXPECTM_0_2321S43:      
22EF   E1                     POP   HL   
22F0                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
22F0   31 80 32               LD   SP,STACK   
22F3   CD C7 08               CALL   init   
22F6   CD BA 08               CALL   execStr   
22F9   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2308                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2308   E1                     POP   HL   
2309   E5                     PUSH   HL   
230A   11 05 00               LD   DE,5   
230D   B7                     OR   A   
230E   ED 52                  SBC   HL,DE   
2310   7D                     LD   A,L   
2311   B4                     OR   H   
2312   28 59                  JR   Z,expectM_0_2322S43   
2314   CD B3 08               CALL   printStr   
2317   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
232C   CD B3 08               CALL   printStr   
232F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233E   21 05 00               LD   HL,5   
2341   CD 01 08               CALL   prtdec   
2344   CD B3 08               CALL   printStr   
2347   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2354   E1                     POP   hl   
2355   E5                     PUSH   hl   
2356   CD 01 08               CALL   prtdec   
2359   E1                     POP   hl   
235A   CD B3 08               CALL   printStr   
235D   20 28 23 00            .CSTR   " (#"   
2361   CD 49 08               CALL   prthex   
2364   CD B3 08               CALL   printStr   
2367   29 0D 0A 00            .CSTR   ")\r\n"   
236B   76                     HALT      
236C   00                     .CSTR      
236D                EXPECTM_0_2322S43:      
236D   E1                     POP   HL   
236E                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
236E   31 80 32               LD   SP,STACK   
2371   CD C7 08               CALL   init   
2374   CD BA 08               CALL   execStr   
2377   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2388                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2388   E1                     POP   HL   
2389   E5                     PUSH   HL   
238A   11 05 00               LD   DE,5   
238D   B7                     OR   A   
238E   ED 52                  SBC   HL,DE   
2390   7D                     LD   A,L   
2391   B4                     OR   H   
2392   28 5B                  JR   Z,expectM_0_2323S43   
2394   CD B3 08               CALL   printStr   
2397   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
23AE   CD B3 08               CALL   printStr   
23B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23C0   21 05 00               LD   HL,5   
23C3   CD 01 08               CALL   prtdec   
23C6   CD B3 08               CALL   printStr   
23C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D6   E1                     POP   hl   
23D7   E5                     PUSH   hl   
23D8   CD 01 08               CALL   prtdec   
23DB   E1                     POP   hl   
23DC   CD B3 08               CALL   printStr   
23DF   20 28 23 00            .CSTR   " (#"   
23E3   CD 49 08               CALL   prthex   
23E6   CD B3 08               CALL   printStr   
23E9   29 0D 0A 00            .CSTR   ")\r\n"   
23ED   76                     HALT      
23EE   00                     .CSTR      
23EF                EXPECTM_0_2323S43:      
23EF   E1                     POP   HL   
23F0                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
23F0   31 80 32               LD   SP,STACK   
23F3   CD C7 08               CALL   init   
23F6   CD BA 08               CALL   execStr   
23F9   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2408                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2408   E1                     POP   HL   
2409   E5                     PUSH   HL   
240A   11 02 00               LD   DE,2   
240D   B7                     OR   A   
240E   ED 52                  SBC   HL,DE   
2410   7D                     LD   A,L   
2411   B4                     OR   H   
2412   28 59                  JR   Z,expectM_0_2324S43   
2414   CD B3 08               CALL   printStr   
2417   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
242C   CD B3 08               CALL   printStr   
242F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243E   21 02 00               LD   HL,2   
2441   CD 01 08               CALL   prtdec   
2444   CD B3 08               CALL   printStr   
2447   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2454   E1                     POP   hl   
2455   E5                     PUSH   hl   
2456   CD 01 08               CALL   prtdec   
2459   E1                     POP   hl   
245A   CD B3 08               CALL   printStr   
245D   20 28 23 00            .CSTR   " (#"   
2461   CD 49 08               CALL   prthex   
2464   CD B3 08               CALL   printStr   
2467   29 0D 0A 00            .CSTR   ")\r\n"   
246B   76                     HALT      
246C   00                     .CSTR      
246D                EXPECTM_0_2324S43:      
246D   E1                     POP   HL   
246E                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
246E   31 80 32               LD   SP,STACK   
2471   CD C7 08               CALL   init   
2474   CD BA 08               CALL   execStr   
2477   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
248B                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
248B   E1                     POP   HL   
248C   E5                     PUSH   HL   
248D   11 05 00               LD   DE,5   
2490   B7                     OR   A   
2491   ED 52                  SBC   HL,DE   
2493   7D                     LD   A,L   
2494   B4                     OR   H   
2495   28 5E                  JR   Z,expectM_0_2325S43   
2497   CD B3 08               CALL   printStr   
249A   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
24B4   CD B3 08               CALL   printStr   
24B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C6   21 05 00               LD   HL,5   
24C9   CD 01 08               CALL   prtdec   
24CC   CD B3 08               CALL   printStr   
24CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DC   E1                     POP   hl   
24DD   E5                     PUSH   hl   
24DE   CD 01 08               CALL   prtdec   
24E1   E1                     POP   hl   
24E2   CD B3 08               CALL   printStr   
24E5   20 28 23 00            .CSTR   " (#"   
24E9   CD 49 08               CALL   prthex   
24EC   CD B3 08               CALL   printStr   
24EF   29 0D 0A 00            .CSTR   ")\r\n"   
24F3   76                     HALT      
24F4   00                     .CSTR      
24F5                EXPECTM_0_2325S43:      
24F5   E1                     POP   HL   
24F6                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
24F6   31 80 32               LD   SP,STACK   
24F9   CD C7 08               CALL   init   
24FC   CD BA 08               CALL   execStr   
24FF   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2514                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2514   E1                     POP   HL   
2515   E5                     PUSH   HL   
2516   11 01 00               LD   DE,1   
2519   B7                     OR   A   
251A   ED 52                  SBC   HL,DE   
251C   7D                     LD   A,L   
251D   B4                     OR   H   
251E   28 5F                  JR   Z,expectM_0_2326S43   
2520   CD B3 08               CALL   printStr   
2523   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
253E   CD B3 08               CALL   printStr   
2541   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2550   21 01 00               LD   HL,1   
2553   CD 01 08               CALL   prtdec   
2556   CD B3 08               CALL   printStr   
2559   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2566   E1                     POP   hl   
2567   E5                     PUSH   hl   
2568   CD 01 08               CALL   prtdec   
256B   E1                     POP   hl   
256C   CD B3 08               CALL   printStr   
256F   20 28 23 00            .CSTR   " (#"   
2573   CD 49 08               CALL   prthex   
2576   CD B3 08               CALL   printStr   
2579   29 0D 0A 00            .CSTR   ")\r\n"   
257D   76                     HALT      
257E   00                     .CSTR      
257F                EXPECTM_0_2326S43:      
257F   E1                     POP   HL   
2580                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2580   31 80 32               LD   SP,STACK   
2583   CD C7 08               CALL   init   
2586   CD BA 08               CALL   execStr   
2589   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
25A1                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
25A1   E1                     POP   HL   
25A2   E5                     PUSH   HL   
25A3   11 07 00               LD   DE,7   
25A6   B7                     OR   A   
25A7   ED 52                  SBC   HL,DE   
25A9   7D                     LD   A,L   
25AA   B4                     OR   H   
25AB   28 62                  JR   Z,expectM_0_2327S43   
25AD   CD B3 08               CALL   printStr   
25B0   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
25CE   CD B3 08               CALL   printStr   
25D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25E0   21 07 00               LD   HL,7   
25E3   CD 01 08               CALL   prtdec   
25E6   CD B3 08               CALL   printStr   
25E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F6   E1                     POP   hl   
25F7   E5                     PUSH   hl   
25F8   CD 01 08               CALL   prtdec   
25FB   E1                     POP   hl   
25FC   CD B3 08               CALL   printStr   
25FF   20 28 23 00            .CSTR   " (#"   
2603   CD 49 08               CALL   prthex   
2606   CD B3 08               CALL   printStr   
2609   29 0D 0A 00            .CSTR   ")\r\n"   
260D   76                     HALT      
260E   00                     .CSTR      
260F                EXPECTM_0_2327S43:      
260F   E1                     POP   HL   
2610                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2610   31 80 32               LD   SP,STACK   
2613   CD C7 08               CALL   init   
2616   CD BA 08               CALL   execStr   
2619   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2633                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2633   E1                     POP   HL   
2634   E5                     PUSH   HL   
2635   11 06 00               LD   DE,6   
2638   B7                     OR   A   
2639   ED 52                  SBC   HL,DE   
263B   7D                     LD   A,L   
263C   B4                     OR   H   
263D   28 64                  JR   Z,expectM_0_2328S43   
263F   CD B3 08               CALL   printStr   
2642   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2662   CD B3 08               CALL   printStr   
2665   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2674   21 06 00               LD   HL,6   
2677   CD 01 08               CALL   prtdec   
267A   CD B3 08               CALL   printStr   
267D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268A   E1                     POP   hl   
268B   E5                     PUSH   hl   
268C   CD 01 08               CALL   prtdec   
268F   E1                     POP   hl   
2690   CD B3 08               CALL   printStr   
2693   20 28 23 00            .CSTR   " (#"   
2697   CD 49 08               CALL   prthex   
269A   CD B3 08               CALL   printStr   
269D   29 0D 0A 00            .CSTR   ")\r\n"   
26A1   76                     HALT      
26A2   00                     .CSTR      
26A3                EXPECTM_0_2328S43:      
26A3   E1                     POP   HL   
26A4                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
26A4   31 80 32               LD   SP,STACK   
26A7   CD C7 08               CALL   init   
26AA   CD BA 08               CALL   execStr   
26AD   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
26C0                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
26C0   E1                     POP   HL   
26C1   E5                     PUSH   HL   
26C2   11 02 00               LD   DE,2   
26C5   B7                     OR   A   
26C6   ED 52                  SBC   HL,DE   
26C8   7D                     LD   A,L   
26C9   B4                     OR   H   
26CA   28 5D                  JR   Z,expectM_0_2329S43   
26CC   CD B3 08               CALL   printStr   
26CF   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
26E8   CD B3 08               CALL   printStr   
26EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FA   21 02 00               LD   HL,2   
26FD   CD 01 08               CALL   prtdec   
2700   CD B3 08               CALL   printStr   
2703   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2710   E1                     POP   hl   
2711   E5                     PUSH   hl   
2712   CD 01 08               CALL   prtdec   
2715   E1                     POP   hl   
2716   CD B3 08               CALL   printStr   
2719   20 28 23 00            .CSTR   " (#"   
271D   CD 49 08               CALL   prthex   
2720   CD B3 08               CALL   printStr   
2723   29 0D 0A 00            .CSTR   ")\r\n"   
2727   76                     HALT      
2728   00                     .CSTR      
2729                EXPECTM_0_2329S43:      
2729   E1                     POP   HL   
272A                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
272A   31 80 32               LD   SP,STACK   
272D   CD C7 08               CALL   init   
2730   CD BA 08               CALL   execStr   
2733   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2749                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2749   E1                     POP   HL   
274A   E5                     PUSH   HL   
274B   11 01 00               LD   DE,1   
274E   B7                     OR   A   
274F   ED 52                  SBC   HL,DE   
2751   7D                     LD   A,L   
2752   B4                     OR   H   
2753   28 60                  JR   Z,expectM_0_2330S43   
2755   CD B3 08               CALL   printStr   
2758   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2774   CD B3 08               CALL   printStr   
2777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2786   21 01 00               LD   HL,1   
2789   CD 01 08               CALL   prtdec   
278C   CD B3 08               CALL   printStr   
278F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
279C   E1                     POP   hl   
279D   E5                     PUSH   hl   
279E   CD 01 08               CALL   prtdec   
27A1   E1                     POP   hl   
27A2   CD B3 08               CALL   printStr   
27A5   20 28 23 00            .CSTR   " (#"   
27A9   CD 49 08               CALL   prthex   
27AC   CD B3 08               CALL   printStr   
27AF   29 0D 0A 00            .CSTR   ")\r\n"   
27B3   76                     HALT      
27B4   00                     .CSTR      
27B5                EXPECTM_0_2330S43:      
27B5   E1                     POP   HL   
27B6                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
27B6   31 80 32               LD   SP,STACK   
27B9   CD C7 08               CALL   init   
27BC   CD BA 08               CALL   execStr   
27BF   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
27D6                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
27D6   E1                     POP   HL   
27D7   E5                     PUSH   HL   
27D8   11 02 00               LD   DE,2   
27DB   B7                     OR   A   
27DC   ED 52                  SBC   HL,DE   
27DE   7D                     LD   A,L   
27DF   B4                     OR   H   
27E0   28 61                  JR   Z,expectM_0_2331S43   
27E2   CD B3 08               CALL   printStr   
27E5   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2802   CD B3 08               CALL   printStr   
2805   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2814   21 02 00               LD   HL,2   
2817   CD 01 08               CALL   prtdec   
281A   CD B3 08               CALL   printStr   
281D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
282A   E1                     POP   hl   
282B   E5                     PUSH   hl   
282C   CD 01 08               CALL   prtdec   
282F   E1                     POP   hl   
2830   CD B3 08               CALL   printStr   
2833   20 28 23 00            .CSTR   " (#"   
2837   CD 49 08               CALL   prthex   
283A   CD B3 08               CALL   printStr   
283D   29 0D 0A 00            .CSTR   ")\r\n"   
2841   76                     HALT      
2842   00                     .CSTR      
2843                EXPECTM_0_2331S43:      
2843   E1                     POP   HL   
2844                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2844   31 80 32               LD   SP,STACK   
2847   CD C7 08               CALL   init   
284A   CD BA 08               CALL   execStr   
284D   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2865                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2865   E1                     POP   HL   
2866   E5                     PUSH   HL   
2867   11 02 00               LD   DE,2   
286A   B7                     OR   A   
286B   ED 52                  SBC   HL,DE   
286D   7D                     LD   A,L   
286E   B4                     OR   H   
286F   28 62                  JR   Z,expectM_0_2332S43   
2871   CD B3 08               CALL   printStr   
2874   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2892   CD B3 08               CALL   printStr   
2895   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A4   21 02 00               LD   HL,2   
28A7   CD 01 08               CALL   prtdec   
28AA   CD B3 08               CALL   printStr   
28AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28BA   E1                     POP   hl   
28BB   E5                     PUSH   hl   
28BC   CD 01 08               CALL   prtdec   
28BF   E1                     POP   hl   
28C0   CD B3 08               CALL   printStr   
28C3   20 28 23 00            .CSTR   " (#"   
28C7   CD 49 08               CALL   prthex   
28CA   CD B3 08               CALL   printStr   
28CD   29 0D 0A 00            .CSTR   ")\r\n"   
28D1   76                     HALT      
28D2   00                     .CSTR      
28D3                EXPECTM_0_2332S43:      
28D3   E1                     POP   HL   
28D4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
28D4   31 80 32               LD   SP,STACK   
28D7   CD C7 08               CALL   init   
28DA   CD BA 08               CALL   execStr   
28DD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
28F4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
28F4   E1                     POP   HL   
28F5   E5                     PUSH   HL   
28F6   11 02 00               LD   DE,2   
28F9   B7                     OR   A   
28FA   ED 52                  SBC   HL,DE   
28FC   7D                     LD   A,L   
28FD   B4                     OR   H   
28FE   28 61                  JR   Z,expectM_0_2333S43   
2900   CD B3 08               CALL   printStr   
2903   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2920   CD B3 08               CALL   printStr   
2923   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2932   21 02 00               LD   HL,2   
2935   CD 01 08               CALL   prtdec   
2938   CD B3 08               CALL   printStr   
293B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2948   E1                     POP   hl   
2949   E5                     PUSH   hl   
294A   CD 01 08               CALL   prtdec   
294D   E1                     POP   hl   
294E   CD B3 08               CALL   printStr   
2951   20 28 23 00            .CSTR   " (#"   
2955   CD 49 08               CALL   prthex   
2958   CD B3 08               CALL   printStr   
295B   29 0D 0A 00            .CSTR   ")\r\n"   
295F   76                     HALT      
2960   00                     .CSTR      
2961                EXPECTM_0_2333S43:      
2961   E1                     POP   HL   
2962                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2962   31 80 32               LD   SP,STACK   
2965   CD C7 08               CALL   init   
2968   CD BA 08               CALL   execStr   
296B   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2989                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2989   E1                     POP   HL   
298A   E5                     PUSH   HL   
298B   11 05 00               LD   DE,5   
298E   B7                     OR   A   
298F   ED 52                  SBC   HL,DE   
2991   7D                     LD   A,L   
2992   B4                     OR   H   
2993   28 68                  JR   Z,expectM_0_2334S43   
2995   CD B3 08               CALL   printStr   
2998   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
29BC   CD B3 08               CALL   printStr   
29BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29CE   21 05 00               LD   HL,5   
29D1   CD 01 08               CALL   prtdec   
29D4   CD B3 08               CALL   printStr   
29D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E4   E1                     POP   hl   
29E5   E5                     PUSH   hl   
29E6   CD 01 08               CALL   prtdec   
29E9   E1                     POP   hl   
29EA   CD B3 08               CALL   printStr   
29ED   20 28 23 00            .CSTR   " (#"   
29F1   CD 49 08               CALL   prthex   
29F4   CD B3 08               CALL   printStr   
29F7   29 0D 0A 00            .CSTR   ")\r\n"   
29FB   76                     HALT      
29FC   00                     .CSTR      
29FD                EXPECTM_0_2334S43:      
29FD   E1                     POP   HL   
29FE                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
29FE   31 80 32               LD   SP,STACK   
2A01   CD C7 08               CALL   init   
2A04   CD BA 08               CALL   execStr   
2A07   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2A1C                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2A1C   E1                     POP   HL   
2A1D   E5                     PUSH   HL   
2A1E   11 02 00               LD   DE,2   
2A21   B7                     OR   A   
2A22   ED 52                  SBC   HL,DE   
2A24   7D                     LD   A,L   
2A25   B4                     OR   H   
2A26   28 5F                  JR   Z,expectM_0_2335S43   
2A28   CD B3 08               CALL   printStr   
2A2B   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2A46   CD B3 08               CALL   printStr   
2A49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A58   21 02 00               LD   HL,2   
2A5B   CD 01 08               CALL   prtdec   
2A5E   CD B3 08               CALL   printStr   
2A61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A6E   E1                     POP   hl   
2A6F   E5                     PUSH   hl   
2A70   CD 01 08               CALL   prtdec   
2A73   E1                     POP   hl   
2A74   CD B3 08               CALL   printStr   
2A77   20 28 23 00            .CSTR   " (#"   
2A7B   CD 49 08               CALL   prthex   
2A7E   CD B3 08               CALL   printStr   
2A81   29 0D 0A 00            .CSTR   ")\r\n"   
2A85   76                     HALT      
2A86   00                     .CSTR      
2A87                EXPECTM_0_2335S43:      
2A87   E1                     POP   HL   
2A88                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2A88   31 80 32               LD   SP,STACK   
2A8B   CD C7 08               CALL   init   
2A8E   CD BA 08               CALL   execStr   
2A91   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2AAC                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2AAC   E1                     POP   HL   
2AAD   E5                     PUSH   HL   
2AAE   11 64 00               LD   DE,100   
2AB1   B7                     OR   A   
2AB2   ED 52                  SBC   HL,DE   
2AB4   7D                     LD   A,L   
2AB5   B4                     OR   H   
2AB6   28 65                  JR   Z,expectM_0_2336S43   
2AB8   CD B3 08               CALL   printStr   
2ABB   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2ADC   CD B3 08               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 64 00               LD   HL,100   
2AF1   CD 01 08               CALL   prtdec   
2AF4   CD B3 08               CALL   printStr   
2AF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B04   E1                     POP   hl   
2B05   E5                     PUSH   hl   
2B06   CD 01 08               CALL   prtdec   
2B09   E1                     POP   hl   
2B0A   CD B3 08               CALL   printStr   
2B0D   20 28 23 00            .CSTR   " (#"   
2B11   CD 49 08               CALL   prthex   
2B14   CD B3 08               CALL   printStr   
2B17   29 0D 0A 00            .CSTR   ")\r\n"   
2B1B   76                     HALT      
2B1C   00                     .CSTR      
2B1D                EXPECTM_0_2336S43:      
2B1D   E1                     POP   HL   
2B1E                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2B1E   31 80 32               LD   SP,STACK   
2B21   CD C7 08               CALL   init   
2B24   CD BA 08               CALL   execStr   
2B27   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2B43                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2B43   E1                     POP   HL   
2B44   E5                     PUSH   HL   
2B45   11 01 00               LD   DE,1   
2B48   B7                     OR   A   
2B49   ED 52                  SBC   HL,DE   
2B4B   7D                     LD   A,L   
2B4C   B4                     OR   H   
2B4D   28 66                  JR   Z,expectM_0_2337S43   
2B4F   CD B3 08               CALL   printStr   
2B52   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2B74   CD B3 08               CALL   printStr   
2B77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B86   21 01 00               LD   HL,1   
2B89   CD 01 08               CALL   prtdec   
2B8C   CD B3 08               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   CD 01 08               CALL   prtdec   
2BA1   E1                     POP   hl   
2BA2   CD B3 08               CALL   printStr   
2BA5   20 28 23 00            .CSTR   " (#"   
2BA9   CD 49 08               CALL   prthex   
2BAC   CD B3 08               CALL   printStr   
2BAF   29 0D 0A 00            .CSTR   ")\r\n"   
2BB3   76                     HALT      
2BB4   00                     .CSTR      
2BB5                EXPECTM_0_2337S43:      
2BB5   E1                     POP   HL   
2BB6                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2BB6   31 80 32               LD   SP,STACK   
2BB9   CD C7 08               CALL   init   
2BBC   CD BA 08               CALL   execStr   
2BBF   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2BDC                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2BDC   E1                     POP   HL   
2BDD   E5                     PUSH   HL   
2BDE   11 02 00               LD   DE,2   
2BE1   B7                     OR   A   
2BE2   ED 52                  SBC   HL,DE   
2BE4   7D                     LD   A,L   
2BE5   B4                     OR   H   
2BE6   28 67                  JR   Z,expectM_0_2338S43   
2BE8   CD B3 08               CALL   printStr   
2BEB   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
2C0E   CD B3 08               CALL   printStr   
2C11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C20   21 02 00               LD   HL,2   
2C23   CD 01 08               CALL   prtdec   
2C26   CD B3 08               CALL   printStr   
2C29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C36   E1                     POP   hl   
2C37   E5                     PUSH   hl   
2C38   CD 01 08               CALL   prtdec   
2C3B   E1                     POP   hl   
2C3C   CD B3 08               CALL   printStr   
2C3F   20 28 23 00            .CSTR   " (#"   
2C43   CD 49 08               CALL   prthex   
2C46   CD B3 08               CALL   printStr   
2C49   29 0D 0A 00            .CSTR   ")\r\n"   
2C4D   76                     HALT      
2C4E   00                     .CSTR      
2C4F                EXPECTM_0_2338S43:      
2C4F   E1                     POP   HL   
2C50                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
2C50   31 80 32               LD   SP,STACK   
2C53   CD C7 08               CALL   init   
2C56   CD BA 08               CALL   execStr   
2C59   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2C7E                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
2C7E   E1                     POP   HL   
2C7F   E5                     PUSH   HL   
2C80   11 0B 00               LD   DE,11   
2C83   B7                     OR   A   
2C84   ED 52                  SBC   HL,DE   
2C86   7D                     LD   A,L   
2C87   B4                     OR   H   
2C88   28 6F                  JR   Z,expectM_0_2339S43   
2C8A   CD B3 08               CALL   printStr   
2C8D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2CB8   CD B3 08               CALL   printStr   
2CBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CCA   21 0B 00               LD   HL,11   
2CCD   CD 01 08               CALL   prtdec   
2CD0   CD B3 08               CALL   printStr   
2CD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE0   E1                     POP   hl   
2CE1   E5                     PUSH   hl   
2CE2   CD 01 08               CALL   prtdec   
2CE5   E1                     POP   hl   
2CE6   CD B3 08               CALL   printStr   
2CE9   20 28 23 00            .CSTR   " (#"   
2CED   CD 49 08               CALL   prthex   
2CF0   CD B3 08               CALL   printStr   
2CF3   29 0D 0A 00            .CSTR   ")\r\n"   
2CF7   76                     HALT      
2CF8   00                     .CSTR      
2CF9                EXPECTM_0_2339S43:      
2CF9   E1                     POP   HL   
2CFA                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
2CFA   31 80 32               LD   SP,STACK   
2CFD   CD C7 08               CALL   init   
2D00   CD BA 08               CALL   execStr   
2D03   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2D28                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
2D28   E1                     POP   HL   
2D29   E5                     PUSH   HL   
2D2A   11 15 00               LD   DE,21   
2D2D   B7                     OR   A   
2D2E   ED 52                  SBC   HL,DE   
2D30   7D                     LD   A,L   
2D31   B4                     OR   H   
2D32   28 6F                  JR   Z,expectM_0_2340S43   
2D34   CD B3 08               CALL   printStr   
2D37   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
2D62   CD B3 08               CALL   printStr   
2D65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D74   21 15 00               LD   HL,21   
2D77   CD 01 08               CALL   prtdec   
2D7A   CD B3 08               CALL   printStr   
2D7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D8A   E1                     POP   hl   
2D8B   E5                     PUSH   hl   
2D8C   CD 01 08               CALL   prtdec   
2D8F   E1                     POP   hl   
2D90   CD B3 08               CALL   printStr   
2D93   20 28 23 00            .CSTR   " (#"   
2D97   CD 49 08               CALL   prthex   
2D9A   CD B3 08               CALL   printStr   
2D9D   29 0D 0A 00            .CSTR   ")\r\n"   
2DA1   76                     HALT      
2DA2   00                     .CSTR      
2DA3                EXPECTM_0_2340S43:      
2DA3   E1                     POP   HL   
2DA4                          ;*Macro unroll:  test "[10 20 30] 1%", 20
2DA4   31 80 32               LD   SP,STACK   
2DA7   CD C7 08               CALL   init   
2DAA   CD BA 08               CALL   execStr   
2DAD   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
2DBB                          ;*Macro unroll:  expect "[10 20 30] 1%",20
2DBB   E1                     POP   HL   
2DBC   E5                     PUSH   HL   
2DBD   11 14 00               LD   DE,20   
2DC0   B7                     OR   A   
2DC1   ED 52                  SBC   HL,DE   
2DC3   7D                     LD   A,L   
2DC4   B4                     OR   H   
2DC5   28 58                  JR   Z,expectM_0_2341S43   
2DC7   CD B3 08               CALL   printStr   
2DCA   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
2DDE   CD B3 08               CALL   printStr   
2DE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF0   21 14 00               LD   HL,20   
2DF3   CD 01 08               CALL   prtdec   
2DF6   CD B3 08               CALL   printStr   
2DF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E06   E1                     POP   hl   
2E07   E5                     PUSH   hl   
2E08   CD 01 08               CALL   prtdec   
2E0B   E1                     POP   hl   
2E0C   CD B3 08               CALL   printStr   
2E0F   20 28 23 00            .CSTR   " (#"   
2E13   CD 49 08               CALL   prthex   
2E16   CD B3 08               CALL   printStr   
2E19   29 0D 0A 00            .CSTR   ")\r\n"   
2E1D   76                     HALT      
2E1E   00                     .CSTR      
2E1F                EXPECTM_0_2341S43:      
2E1F   E1                     POP   HL   
2E20                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
2E20   31 80 32               LD   SP,STACK   
2E23   CD C7 08               CALL   init   
2E26   CD BA 08               CALL   execStr   
2E29   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
2E37                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
2E37   E1                     POP   HL   
2E38   E5                     PUSH   HL   
2E39   11 02 00               LD   DE,2   
2E3C   B7                     OR   A   
2E3D   ED 52                  SBC   HL,DE   
2E3F   7D                     LD   A,L   
2E40   B4                     OR   H   
2E41   28 58                  JR   Z,expectM_0_2342S43   
2E43   CD B3 08               CALL   printStr   
2E46   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
2E5A   CD B3 08               CALL   printStr   
2E5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6C   21 02 00               LD   HL,2   
2E6F   CD 01 08               CALL   prtdec   
2E72   CD B3 08               CALL   printStr   
2E75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E82   E1                     POP   hl   
2E83   E5                     PUSH   hl   
2E84   CD 01 08               CALL   prtdec   
2E87   E1                     POP   hl   
2E88   CD B3 08               CALL   printStr   
2E8B   20 28 23 00            .CSTR   " (#"   
2E8F   CD 49 08               CALL   prthex   
2E92   CD B3 08               CALL   printStr   
2E95   29 0D 0A 00            .CSTR   ")\r\n"   
2E99   76                     HALT      
2E9A   00                     .CSTR      
2E9B                EXPECTM_0_2342S43:      
2E9B   E1                     POP   HL   
2E9C                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
2E9C   31 80 32               LD   SP,STACK   
2E9F   CD C7 08               CALL   init   
2EA2   CD BA 08               CALL   execStr   
2EA5   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
2EB9                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
2EB9   E1                     POP   HL   
2EBA   E5                     PUSH   HL   
2EBB   11 42 00               LD   DE,66   
2EBE   B7                     OR   A   
2EBF   ED 52                  SBC   HL,DE   
2EC1   7D                     LD   A,L   
2EC2   B4                     OR   H   
2EC3   28 5E                  JR   Z,expectM_0_2343S43   
2EC5   CD B3 08               CALL   printStr   
2EC8   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
2EE2   CD B3 08               CALL   printStr   
2EE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF4   21 42 00               LD   HL,66   
2EF7   CD 01 08               CALL   prtdec   
2EFA   CD B3 08               CALL   printStr   
2EFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0A   E1                     POP   hl   
2F0B   E5                     PUSH   hl   
2F0C   CD 01 08               CALL   prtdec   
2F0F   E1                     POP   hl   
2F10   CD B3 08               CALL   printStr   
2F13   20 28 23 00            .CSTR   " (#"   
2F17   CD 49 08               CALL   prthex   
2F1A   CD B3 08               CALL   printStr   
2F1D   29 0D 0A 00            .CSTR   ")\r\n"   
2F21   76                     HALT      
2F22   00                     .CSTR      
2F23                EXPECTM_0_2343S43:      
2F23   E1                     POP   HL   
2F24                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
2F24   31 80 32               LD   SP,STACK   
2F27   CD C7 08               CALL   init   
2F2A   CD BA 08               CALL   execStr   
2F2D   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
2F43                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
2F43   E1                     POP   HL   
2F44   E5                     PUSH   HL   
2F45   11 0A 00               LD   DE,10   
2F48   B7                     OR   A   
2F49   ED 52                  SBC   HL,DE   
2F4B   7D                     LD   A,L   
2F4C   B4                     OR   H   
2F4D   28 60                  JR   Z,expectM_0_2344S43   
2F4F   CD B3 08               CALL   printStr   
2F52   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
2F6E   CD B3 08               CALL   printStr   
2F71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F80   21 0A 00               LD   HL,10   
2F83   CD 01 08               CALL   prtdec   
2F86   CD B3 08               CALL   printStr   
2F89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F96   E1                     POP   hl   
2F97   E5                     PUSH   hl   
2F98   CD 01 08               CALL   prtdec   
2F9B   E1                     POP   hl   
2F9C   CD B3 08               CALL   printStr   
2F9F   20 28 23 00            .CSTR   " (#"   
2FA3   CD 49 08               CALL   prthex   
2FA6   CD B3 08               CALL   printStr   
2FA9   29 0D 0A 00            .CSTR   ")\r\n"   
2FAD   76                     HALT      
2FAE   00                     .CSTR      
2FAF                EXPECTM_0_2344S43:      
2FAF   E1                     POP   HL   
2FB0                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
2FB0   31 80 32               LD   SP,STACK   
2FB3   CD C7 08               CALL   init   
2FB6   CD BA 08               CALL   execStr   
2FB9   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
2FDD                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
2FDD   E1                     POP   HL   
2FDE   E5                     PUSH   HL   
2FDF   11 0A 00               LD   DE,10   
2FE2   B7                     OR   A   
2FE3   ED 52                  SBC   HL,DE   
2FE5   7D                     LD   A,L   
2FE6   B4                     OR   H   
2FE7   28 6E                  JR   Z,expectM_0_2345S43   
2FE9   CD B3 08               CALL   printStr   
2FEC   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3016   CD B3 08               CALL   printStr   
3019   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3028   21 0A 00               LD   HL,10   
302B   CD 01 08               CALL   prtdec   
302E   CD B3 08               CALL   printStr   
3031   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303E   E1                     POP   hl   
303F   E5                     PUSH   hl   
3040   CD 01 08               CALL   prtdec   
3043   E1                     POP   hl   
3044   CD B3 08               CALL   printStr   
3047   20 28 23 00            .CSTR   " (#"   
304B   CD 49 08               CALL   prthex   
304E   CD B3 08               CALL   printStr   
3051   29 0D 0A 00            .CSTR   ")\r\n"   
3055   76                     HALT      
3056   00                     .CSTR      
3057                EXPECTM_0_2345S43:      
3057   E1                     POP   HL   
3058                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3058   31 80 32               LD   SP,STACK   
305B   CD C7 08               CALL   init   
305E   CD BA 08               CALL   execStr   
3061   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3087                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
3087   E1                     POP   HL   
3088   E5                     PUSH   HL   
3089   11 0A 00               LD   DE,10   
308C   B7                     OR   A   
308D   ED 52                  SBC   HL,DE   
308F   7D                     LD   A,L   
3090   B4                     OR   H   
3091   28 70                  JR   Z,expectM_0_2346S43   
3093   CD B3 08               CALL   printStr   
3096   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
30C2   CD B3 08               CALL   printStr   
30C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D4   21 0A 00               LD   HL,10   
30D7   CD 01 08               CALL   prtdec   
30DA   CD B3 08               CALL   printStr   
30DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30EA   E1                     POP   hl   
30EB   E5                     PUSH   hl   
30EC   CD 01 08               CALL   prtdec   
30EF   E1                     POP   hl   
30F0   CD B3 08               CALL   printStr   
30F3   20 28 23 00            .CSTR   " (#"   
30F7   CD 49 08               CALL   prthex   
30FA   CD B3 08               CALL   printStr   
30FD   29 0D 0A 00            .CSTR   ")\r\n"   
3101   76                     HALT      
3102   00                     .CSTR      
3103                EXPECTM_0_2346S43:      
3103   E1                     POP   HL   
3104                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3104   31 80 32               LD   SP,STACK   
3107   CD C7 08               CALL   init   
310A   CD BA 08               CALL   execStr   
310D   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3133                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
3133   E1                     POP   HL   
3134   E5                     PUSH   HL   
3135   11 14 00               LD   DE,20   
3138   B7                     OR   A   
3139   ED 52                  SBC   HL,DE   
313B   7D                     LD   A,L   
313C   B4                     OR   H   
313D   28 70                  JR   Z,expectM_0_2347S43   
313F   CD B3 08               CALL   printStr   
3142   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
316E   CD B3 08               CALL   printStr   
3171   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3180   21 14 00               LD   HL,20   
3183   CD 01 08               CALL   prtdec   
3186   CD B3 08               CALL   printStr   
3189   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3196   E1                     POP   hl   
3197   E5                     PUSH   hl   
3198   CD 01 08               CALL   prtdec   
319B   E1                     POP   hl   
319C   CD B3 08               CALL   printStr   
319F   20 28 23 00            .CSTR   " (#"   
31A3   CD 49 08               CALL   prthex   
31A6   CD B3 08               CALL   printStr   
31A9   29 0D 0A 00            .CSTR   ")\r\n"   
31AD   76                     HALT      
31AE   00                     .CSTR      
31AF                EXPECTM_0_2347S43:      
31AF   E1                     POP   HL   
31B0                             ; 
31B0                             ; 
31B0                             ; 
31B0                             ; 
31B0                             ; 
31B0                             ; 
31B0                             ; 
31B0                             ; test "10 sqrt", 3
31B0                             ; test "10 sqrt %", 1
31B0                             ; test "[ 1 ] closure call", 1
31B0                             ; test "[ [ 2 ] ] closure call 0%", 2
31B0   CD B3 08               CALL   printStr   
31B3   44 6F 6E 65 21 00      .CSTR   "Done!"   
31B9   76                     HALT      
31BA                          ALIGN   2   
31BA                PRINTER:      
31BA   E1                     POP   hl   
31BB   CD 01 08               CALL   prtdec   
31BE   DD E9                  JP   (ix)   
31C0                          ALIGN   $100   
3200                             ; .org RAMSTART
3200                          DS   DSIZE   
3280                STACK:       
3280                          ALIGN   $100   
3300                VARS:        
3300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
33D0                RESTARTS:      
33D0                RST08:    DS   2   
33D2                RST10:    DS   2   
33D4                RST18:    DS   2   
33D6                RST20:    DS   2   
33D8                RST28:    DS   2   
33DA                RST30:    DS   2   ; 
33DC                BAUD:     DS   2   ; 
33DE                INTVEC:   DS   2   ; 
33E0                NMIVEC:   DS   2   ; 
33E2                GETCVEC:   DS   2   ; 
33E4                PUTCVEC:   DS   2   ; 
33E6                SYSVARS:      
33E6                             ; initialised sys variables
33E6                VDATAWIDTH:   DS   2   ; 
33E8                VTIBPTR:   DS   2   ; 
33EA                VNEXT:    DS   2   ; 
33EC                VHEAPPTR:   DS   2   ; 
33EE                             ; uninitialised sys variables
33EE                VBLOCKEND:   DS   2   ; 
33F0                VPOINTER:   DS   2   ; 
33F2                VHASHSTR:   DS   2   ; 
33F4                VLASTDEF:   DS   2   ; 
33F6                VREMAIN:   DS   2   ; 
33F8                VTEMP1:   DS   2   ; 
33FA                VTEMP2:   DS   2   ; 
33FC                TBPTR:    DS   2   ; reserved for tests
33FE                          ALIGN   $100   
3400                TIB:      DS   TIBSIZE   
3500                          ALIGN   $100   
3500                PAD:      DS   $100   
3600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07FF DEFINED AT LINE 1410 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1695 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1726 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1762 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
DOT_:               0327 DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 245 IN monty.asm
GO_:                032D DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 251 IN monty.asm
IF_:                0336 DEFINED AT LINE 253 IN monty.asm
INV_:               0339 DEFINED AT LINE 255 IN monty.asm
MUL_:               033F DEFINED AT LINE 258 IN monty.asm
NOT_:               0342 DEFINED AT LINE 260 IN monty.asm
NUM_:               0347 DEFINED AT LINE 263 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 265 IN monty.asm
OR_:                034D DEFINED AT LINE 267 IN monty.asm
XOR_:               0350 DEFINED AT LINE 269 IN monty.asm
STRING_:            0353 DEFINED AT LINE 271 IN monty.asm
SUB_:               0356 DEFINED AT LINE 273 IN monty.asm
SUB1:               0362 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
SUB2:               0364 DEFINED AT LINE 284 IN monty.asm
EQ_:                036A DEFINED AT LINE 290 IN monty.asm
EQ0:                0374 DEFINED AT LINE 297 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
EQ1:                0375 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
GT_:                0379 DEFINED AT LINE 303 IN monty.asm
LT_:                0384 DEFINED AT LINE 312 IN monty.asm
LT1:                038D DEFINED AT LINE 319 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DIV_:               0396 DEFINED AT LINE 325 IN monty.asm
NOP_:               03A5 DEFINED AT LINE 336 IN monty.asm
ADDR:               03A7 DEFINED AT LINE 344 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03BA DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 370 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
OR:                 03BE DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
XOR:                03C7 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR1:               03C8 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
ARG:                03D0 DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03EE DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG0A:              03F7 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 398 IN monty.asm
ARG1:               03FC DEFINED AT LINE 417 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
ARG1A:              0404 DEFINED AT LINE 424 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG_LIST:           0407 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0411 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
ARG_LIST2:          041D DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 445 IN monty.asm
ARG_LIST3:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 447 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARG_LIST4:          0428 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 443 IN monty.asm
ARG_LIST5:          042D DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
ARRBEGIN:           0439 DEFINED AT LINE 514 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0455 DEFINED AT LINE 528 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            046F DEFINED AT LINE 544 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
ARREND2:            047F DEFINED AT LINE 554 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
ARRINDEX:           04A3 DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04AB DEFINED AT LINE 587 IN monty.asm
ARRINDEX1:          04AC DEFINED AT LINE 589 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
ARRINDEX2:          04B8 DEFINED AT LINE 598 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 604 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
ASSIGN1:            04C9 DEFINED AT LINE 614 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK:              04CB DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04CF DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 650 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCK2:             04FB DEFINED AT LINE 648 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
BLOCK3:             04FE DEFINED AT LINE 651 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
BLOCK4:             0506 DEFINED AT LINE 657 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
BLOCK5:             0509 DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 656 IN monty.asm
BLOCK6:             0531 DEFINED AT LINE 679 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
BLOCKEND:           0534 DEFINED AT LINE 684 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCKEND1:          0560 DEFINED AT LINE 707 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
BLOCKEND2:          056C DEFINED AT LINE 714 IN monty.asm
                    > USED AT LINE 706 IN monty.asm
CHAR:               0585 DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              0588 DEFINED AT LINE 737 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
CHAR2:              0594 DEFINED AT LINE 746 IN monty.asm
                    > USED AT LINE 743 IN monty.asm
CHAR3:              0597 DEFINED AT LINE 749 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DOT:                059A DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05A6 DEFINED AT LINE 779 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
DOT2:               05AF DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
DOT3:               05B9 DEFINED AT LINE 790 IN monty.asm
                    > USED AT LINE 786 IN monty.asm
DOT4:               05BD DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 783 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
DIVIDE:             05C4 DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
DIVIDE1:            05C9 DEFINED AT LINE 804 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
DIVIDE2:            05D6 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
DIVIDE3:            05D7 DEFINED AT LINE 814 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
EQUALS:             05DD DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
LESSTHANEQ:         05E5 DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
LESSTHAN:           05EA DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN1:          05EF DEFINED AT LINE 842 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
TRUE1:              05F2 DEFINED AT LINE 845 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
NULL1:              05F8 DEFINED AT LINE 849 IN monty.asm
FALSE1:             05F8 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
                    > USED AT LINE 843 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
GO:                 05FE DEFINED AT LINE 859 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
GO0:                05FF DEFINED AT LINE 861 IN monty.asm
                    > USED AT LINE 1002 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
                    > USED AT LINE 1324 IN monty.asm
GO1:                0605 DEFINED AT LINE 866 IN monty.asm
                    > USED AT LINE 864 IN monty.asm
GO2:                062C DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
GO3:                0631 DEFINED AT LINE 891 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GO4:                0632 DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
GOFUNC0:            063F DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 869 IN monty.asm
GOFUNC1:            0652 DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GOFUNC2:            0658 DEFINED AT LINE 925 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
GOFUNC3:            065D DEFINED AT LINE 930 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
HEXNUM:             066B DEFINED AT LINE 943 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
HEXNUM1:            066E DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
HEXNUM2:            0676 DEFINED AT LINE 951 IN monty.asm
                    > USED AT LINE 949 IN monty.asm
IDENTU:             0688 DEFINED AT LINE 963 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             068D DEFINED AT LINE 967 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0692 DEFINED AT LINE 971 IN monty.asm
                    > USED AT LINE 966 IN monty.asm
IF:                 069F DEFINED AT LINE 984 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               06AB DEFINED AT LINE 994 IN monty.asm
                    > USED AT LINE 988 IN monty.asm
IFTE1:              06AC DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 991 IN monty.asm
MUL:                06B8 DEFINED AT LINE 1006 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
MUL2:               06C2 DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
NUM:                06D4 DEFINED AT LINE 1029 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
NUM0:               06DD DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
NUM1:               06DE DEFINED AT LINE 1037 IN monty.asm
                    > USED AT LINE 1054 IN monty.asm
NUM2:               06F6 DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 953 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
NUM3:               0701 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
REMAIN:             0704 DEFINED AT LINE 1067 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
SHIFTLEFT:          070A DEFINED AT LINE 1074 IN monty.asm
                    > USED AT LINE 316 IN monty.asm
SHIFTLEFT1:         0712 DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
SHIFTLEFT2:         0713 DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 1080 IN monty.asm
SHIFTRIGHT:         071A DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
SHIFTRIGHT1:        0722 DEFINED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1102 IN monty.asm
SHIFTRIGHT2:        0726 DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
STRING:             072D DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
STRING1:            0736 DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
STRING2:            0739 DEFINED AT LINE 1121 IN monty.asm
                    > USED AT LINE 1116 IN monty.asm
COMMAND:            0755 DEFINED AT LINE 1146 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
ABS1:               0799 DEFINED AT LINE 1177 IN monty.asm
                    > USED AT LINE 1152 IN monty.asm
COMMENT:            07A6 DEFINED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
                    > USED AT LINE 1194 IN monty.asm
BYTES:              07AF DEFINED AT LINE 1198 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
BYTES1:             07B2 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
FUNC:               07B7 DEFINED AT LINE 1264 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
INPUT:              07CE DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
KEY:                07D9 DEFINED AT LINE 1293 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
OUTPUT:             07E2 DEFINED AT LINE 1302 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
REPEAT:             07EB DEFINED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
SELECT:             07ED DEFINED AT LINE 1316 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
WORDS:              07F7 DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
LOOP:               07FD DEFINED AT LINE 1339 IN monty.asm
FILTER:             07FF DEFINED AT LINE 1408 IN monty.asm
MAP:                07FF DEFINED AT LINE 1409 IN monty.asm
PRTDEC:             0801 DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 1772 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 129
PRTDEC0:            0810 DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
PRTDEC1:            0832 DEFINED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1507 IN monty.asm
PRTDEC2:            0834 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1515 IN monty.asm
PRTDEC3:            0844 DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
PRTDEC4:            0845 DEFINED AT LINE 1526 IN monty.asm
                    > USED AT LINE 1523 IN monty.asm
PRTHEX:             0849 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0854 DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
PRTHEX3:            085D DEFINED AT LINE 1546 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
PRTSTR0:            0868 DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
PRTSTR:             086C DEFINED AT LINE 1557 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
NESTING:            0871 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1686 IN monty.asm
                    > USED AT LINE 1727 IN monty.asm
NESTING0:           087B DEFINED AT LINE 1579 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
NESTING1A:          0882 DEFINED AT LINE 1584 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
NESTING1:           0885 DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
NESTING2:           0894 DEFINED AT LINE 1596 IN monty.asm
                    > USED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1593 IN monty.asm
NESTING3:           0896 DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
NESTING4:           08A1 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
PROMPT:             08A3 DEFINED AT LINE 1610 IN monty.asm
                    > USED AT LINE 1670 IN monty.asm
CRLF:               08AC DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1739 IN monty.asm
PRINTSTR:           08B3 DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1666 IN monty.asm
                    > USED AT LINE 1770 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 122
EXECSTR:            08BA DEFINED AT LINE 1631 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               08C5 DEFINED AT LINE 1642 IN monty.asm
INIT:               08C7 DEFINED AT LINE 1647 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1665 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08E0 DEFINED AT LINE 1657 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
START:              08E5 DEFINED AT LINE 1663 IN monty.asm
INTERPRET:          08FB DEFINED AT LINE 1669 IN monty.asm
                    > USED AT LINE 1764 IN monty.asm
                    > USED AT LINE 1773 IN monty.asm
INTERPRET2:         0905 DEFINED AT LINE 1675 IN monty.asm
                    > USED AT LINE 1719 IN monty.asm
INTERPRET3:         090D DEFINED AT LINE 1682 IN monty.asm
                    > USED AT LINE 1691 IN monty.asm
INTERPRET4:         0913 DEFINED AT LINE 1688 IN monty.asm
                    > USED AT LINE 1680 IN monty.asm
INTERPRET5:         0918 DEFINED AT LINE 1694 IN monty.asm
                    > USED AT LINE 1728 IN monty.asm
                    > USED AT LINE 1742 IN monty.asm
INTERPRET6:         0929 DEFINED AT LINE 1721 IN monty.asm
                    > USED AT LINE 1697 IN monty.asm
INTERPRET7:         0937 DEFINED AT LINE 1730 IN monty.asm
                    > USED AT LINE 1702 IN monty.asm
INTERPRET8:         094A DEFINED AT LINE 1744 IN monty.asm
                    > USED AT LINE 1700 IN monty.asm
NEXT:               0952 DEFINED AT LINE 1750 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1754 IN monty.asm
NEXT1:              0961 DEFINED AT LINE 1761 IN monty.asm
                    > USED AT LINE 1755 IN monty.asm
EXIT_:              0968 DEFINED AT LINE 1765 IN monty.asm
                    > USED AT LINE 1763 IN monty.asm
ERROR:              096B DEFINED AT LINE 1769 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2264S43:  0A65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  0ACB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  0B2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  0B93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  0BF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  0C5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  0CC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  0D29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  0D8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  0DF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  0E5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  0EC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  0F2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  0F97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  1005 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  1073 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  10DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  114F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  11BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  122F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  12A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  1311 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  137D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  13E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  1455 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  14C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  1535 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  15A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  1611 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  167F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  16ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  1759 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  17C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  1831 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  189D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2299S43:  1909 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2300S43:  1975 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2301S43:  19E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2302S43:  1A4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2303S43:  1ABB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2304S43:  1B29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2305S43:  1B97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2306S43:  1C07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2307S43:  1C77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2308S43:  1CE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2309S43:  1D51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2310S43:  1DC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2311S43:  1E3F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2312S43:  1EBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2313S43:  1F43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2314S43:  1FCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2315S43:  2039 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2316S43:  20A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2317S43:  211B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2318S43:  218F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2319S43:  2201 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2320S43:  2277 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2321S43:  22EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2322S43:  236D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2323S43:  23EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2324S43:  246D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2325S43:  24F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2326S43:  257F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2327S43:  260F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2328S43:  26A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2329S43:  2729 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2330S43:  27B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2331S43:  2843 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2332S43:  28D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2333S43:  2961 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2334S43:  29FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2335S43:  2A87 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2336S43:  2B1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2337S43:  2BB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2338S43:  2C4F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2339S43:  2CF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2340S43:  2DA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2341S43:  2E1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2342S43:  2E9B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2343S43:  2F23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2344S43:  2FAF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2345S43:  3057 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2346S43:  3103 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2347S43:  31AF DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            31BA DEFINED AT LINE 127
STACK:              3280 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 872 IN monty.asm
                    > USED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1664 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3300 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1654 IN monty.asm
RESTARTS:           33D0 DEFINED AT LINE 11 IN ram.asm
RST08:              33D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              33D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              33D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              33D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              33D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              33DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               33DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             33DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             33E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            33E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            33E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            33E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1651 IN monty.asm
VDATAWIDTH:         33E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 548 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
                    > USED AT LINE 1201 IN monty.asm
VTIBPTR:            33E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1745 IN monty.asm
VNEXT:              33EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1648 IN monty.asm
VHEAPPTR:           33EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 435 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
                    > USED AT LINE 674 IN monty.asm
                    > USED AT LINE 677 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
                    > USED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1276 IN monty.asm
                    > USED AT LINE 1278 IN monty.asm
VBLOCKEND:          33EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           33F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 348 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 975 IN monty.asm
VHASHSTR:           33F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           33F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            33F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 331 IN monty.asm
                    > USED AT LINE 1068 IN monty.asm
VTEMP1:             33F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 531 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
VTEMP2:             33FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              33FC DEFINED AT LINE 43 IN ram.asm
TIB:                3400 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1679 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
                    > USED AT LINE 1731 IN monty.asm
                    > USED AT LINE 1746 IN monty.asm
PAD:                3500 DEFINED AT LINE 49 IN ram.asm
HEAP:               3600 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 662 IN monty.asm
