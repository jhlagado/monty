0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 41               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 41               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 41               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 41               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 41               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 41               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 41               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 41               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 41               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 41               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 40               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 41               LD   (RST08),HL   
0094   22 D2 41               LD   (RST10),HL   
0097   22 D4 41               LD   (RST18),HL   
009A   22 D6 41               LD   (RST20),HL   
009D   22 D8 41               LD   (RST28),HL   
00A0   22 DA 41               LD   (RST30),HL   
00A3   22 DE 41               LD   (INTVEC),HL   
00A6   22 E0 41               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 41               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 41               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 40               LD   SP,STACK   
00C6   CD 44 0A               CALL   init   
00C9   C3 00 0C               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; vTIBPtr an offset to the tib
0184   E3 0A                  DW   next   ; nNext
0186   00 45                  DW   heap   ; vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D5 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3E 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 87 07               JP   semicolon   
0324                DOT_:        
0324   C3 D7 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 79 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 FD 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 02 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 14 07               JP   question   
0336                STAR_:       
0336   C3 2D 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 49 07               JP   num   
0341                HASH_:       
0341   C3 E0 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 3E 06               JP   caret   
034A                COMMA_:      
034A   C3 AA 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C6 07               JP   dblquote   
0350                MINUS_:      
0350   C3 EE 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 1A 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B3 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3B 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A3 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 22 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 27 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B9 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7F 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 41               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 41               LD   hl,vPointer   
03AB   22 EE 41               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 41               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 41            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 41               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 41               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 41            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 41               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 41            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 41               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 41               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 41               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 41               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 41               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   0B                     DEC   bc   
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arglist5   
04C8   15                     DEC   d   ; remove initial inc
04C9                ARGLIST5:      
04C9   23                     INC   hl   
04CA   22 EC 41               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CD   E1                     POP   hl   ; hl = start of arg_list
04CE   E5                     PUSH   hl   ; return start of arg_list
04CF   2B                     DEC   hl   ; write number of locals at start - 1
04D0   72                     LD   (hl),d   
04D1   2B                     DEC   hl   ; write number of args + locals at start - 2
04D2   73                     LD   (hl),e   
04D3   DD E9                  JP   (ix)   
04D5                LBRACE:      
04D5                BLOCK:       
04D5   C5                     PUSH   bc   ; return pointer to first { of block
04D6   03                     INC   bc   
04D7   16 01                  LD   d,1   ; nesting: count first parenthesis
04D9                BLOCK1:      ; Skip to end of definition
04D9   0A                     LD   a,(bc)   ; Get the next character
04DA   03                     INC   bc   ; Point to next character
04DB   FE 21                  CP   " " + 1   ; ignore whitespace
04DD   38 FA                  JR   c,block1   
04DF   FE 29                  CP   ")"   
04E1   28 2D                  JR   z,block4   
04E3   FE 7D                  CP   "}"   
04E5   28 29                  JR   z,block4   
04E7   FE 5D                  CP   "]"   
04E9   28 25                  JR   z,block4   
04EB   FE 28                  CP   "("   
04ED   28 16                  JR   z,block2   
04EF   FE 7B                  CP   "{"   
04F1   28 12                  JR   z,block2   
04F3   FE 5B                  CP   "["   
04F5   28 0E                  JR   z,block2   
04F7   FE 27                  CP   "'"   
04F9   28 0D                  JR   z,block3   
04FB   FE 60                  CP   "`"   
04FD   28 09                  JR   z,block3   
04FF   FE 22                  CP   DQUOTE   
0501   28 05                  JR   z,block3   
0503   18 D4                  JR   block1   
0505                BLOCK2:      
0505   14                     INC   d   
0506   18 D1                  JR   block1   
0508                BLOCK3:      
0508   3E 80                  LD   a,$80   
050A   AA                     XOR   d   
050B   47                     LD   b,a   
050C   20 CB                  JR   nz,block1   
050E   18 03                  JR   block5   
0510                BLOCK4:      
0510   15                     DEC   d   
0511   20 C6                  JR   nz,block1   ; get the next element
0513                BLOCK5:      
0513   60 69                  LD   hl,bc   ; hl = IP
0515   11 00 45               LD   de,HEAP   ; is IP pointing to object in heap
0518   B7                     OR   a   ; IP - HEAP
0519   ED 52                  SBC   hl,de   
051B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051D   28 1C                  JR   z,block6   
051F   60 69                  LD   hl,bc   ; hl = IP
0521   D1                     POP   de   ; de = block*
0522   ED 43 FA 41            LD   (vTemp1),bc   ; save IP
0526   B7                     OR   a   ; bc = size
0527   ED 52                  SBC   hl,de   
0529   44 4D                  LD   bc,hl   
052B   EB                     EX   de,hl   ; hl = block* de = heap*
052C   ED 5B EC 41            LD   de,(vHeapPtr)   
0530   D5                     PUSH   de   ; return hblock*
0531   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0533   ED 53 EC 41            LD   (vHeapPtr),de   ; heap* += size
0537   ED 4B FA 41            LD   bc,(vTemp1)   ; restore IP
053B                BLOCK6:      
053B   0B                     DEC   bc   ; balanced, exit
053C   DD E9                  JP   (ix)   
053E                RBRACE:      
053E                BLOCKEND:      
053E   D9                     EXX      ; de" = oldBP bc" = oldIP
053F   FD 5E 00               LD   e,(iy+0)   
0542   FD 56 01               LD   d,(iy+1)   
0545   FD 4E 06               LD   c,(iy+6)   
0548   FD 46 07               LD   b,(iy+7)   
054B   D9                     EXX      
054C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054F   FD 56 03               LD   d,(iy+3)   
0552   EB                     EX   de,hl   
0553   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0556   FD 56 01               LD   d,(iy+1)   
0559   13                     INC   de   ; for carry flag <=
055A   B7                     OR   a   
055B   ED 52                  SBC   hl,de   
055D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0561   FD 5D                  LD   e,iyl   
0563   21 08 00               LD   hl,8   
0566   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0567   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0568   18 0C                  JR   blockEnd2   
056A                BLOCKEND1:      ; same scope
056A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056D   FD 56 03               LD   d,(iy+3)   
0570   EB                     EX   de,hl   
0571   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0573   FD 5D                  LD   e,iyl   
0575   EB                     EX   de,hl   
0576                BLOCKEND2:      
0576   44 4D                  LD   bc,hl   ; bc = hl = BP
0578   B7                     OR   a   ; hl = BP - SP = count
0579   ED 72                  SBC   hl,sp   
057B   7D                     LD   a,l   
057C   B4                     OR   h   
057D   28 09                  JR   z,blockEnd3   
057F   C5                     PUSH   bc   ; bc = count, hl = BP
0580   44 4D                  LD   bc,hl   
0582   E1                     POP   hl   
0583   2B                     DEC   hl   ; hl = BP-1
0584   1B                     DEC   de   ; de = args*-1
0585   ED B8                  LDDR      
0587   13                     INC   de   
0588                BLOCKEND3:      
0588   EB                     EX   de,hl   ; hl = new tos
0589   F9                     LD   sp,hl   ; sp = new tos
058A   D9                     EXX      ; bc = IP, iy = oldBP
058B   D5                     PUSH   de   
058C   C5                     PUSH   bc   
058D   D9                     EXX      
058E   C1                     POP   bc   
058F   FD E1                  POP   iy   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9   03                     INC   bc   
05BA   0A                     LD   a,(bc)   
05BB   FE 5C                  CP   $5C   
05BD   CA 94 08               JP   z,comment   
05C0   FE 41                  CP   "A"   
05C2   D2 0D 08               JP   nc,command   
05C5   0B                     DEC   bc   
05C6   D1                     POP   de   
05C7   E1                     POP   hl   
05C8   C5                     PUSH   bc   ; preserve the IP
05C9   44 4D                  LD   bc,hl   
05CB   CD 01 06               CALL   divide   
05CE   EB                     EX   de,hl   
05CF   ED 53 F0 41            LD   (vRemain),de   
05D3   C1                     POP   bc   
05D4   C3 99 03               JP   add3   
05D7                DOT:         
05D7   03                     INC   bc   
05D8   0A                     LD   a,(bc)   
05D9   E1                     POP   hl   
05DA   FE 68                  CP   "h"   
05DC   20 05                  JR   nz,dot1   
05DE   CD D3 09               CALL   prthex   
05E1   18 17                  JR   dot4   
05E3                DOT1:        
05E3   FE 73                  CP   "s"   
05E5   20 05                  JR   nz,dot2   
05E7   CD F6 09               CALL   prtstr   
05EA   18 0E                  JR   dot4   
05EC                DOT2:        
05EC   FE 63                  CP   "c"   
05EE   20 06                  JR   nz,dot3   
05F0   7D                     LD   a,l   
05F1   CD 85 00               CALL   putchar   
05F4   18 04                  JR   dot4   
05F6                DOT3:        
05F6   0B                     DEC   bc   
05F7   CD 8B 09               CALL   prtdec   
05FA                DOT4:        
05FA   3E 20                  LD   a," "   
05FC   CD 85 00               CALL   putchar   
05FF   DD E9                  JP   (ix)   
0601                             ; division subroutine.
0601                             ; bc: divisor, de: dividend, hl: remainder
0601                DIVIDE:      
0601   21 00 00               LD   hl,0   ; zero the remainder
0604   3E 10                  LD   a,16   ; loop counter
0606                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0606   CB 21                  SLA   c   
0608   CB 10                  RL   b   
060A   ED 6A                  ADC   hl,hl   
060C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060E   38 03                  JR   c,divide2   
0610   0C                     INC   c   
0611   18 01                  JR   divide3   
0613                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0613   19                     ADD   hl,de   
0614                DIVIDE3:      
0614   3D                     DEC   a   
0615   20 EF                  JR   nz,divide1   
0617   50 59                  LD   de,bc   ; result from bc to de
0619   C9                     RET      
061A                             ; hl = value1, de = value2
061A                             ; hl = result
061A                EQUALS:      
061A   B7                     OR   a   ; reset the carry flag
061B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061D   28 10                  JR   z,true1   
061F   C3 35 06               JP   false1   
0622                             ; hl = value1 de = value2
0622                             ; hl = result
0622                LESSTHANEQ:      
0622   B7                     OR   a   
0623   ED 52                  SBC   hl,de   
0625   18 05                  JR   lessthan1   
0627                             ; hl = value1 de = value2
0627                             ; hl = result
0627                LESSTHAN:      
0627   B7                     OR   a   
0628   ED 52                  SBC   hl,de   
062A   28 09                  JR   z,false1   
062C                LESSTHAN1:      
062C   FA 35 06               JP   m,false1   
062F                TRUE1:       
062F   21 FF FF               LD   hl,TRUE   
0632   E5                     PUSH   hl   
0633   DD E9                  JP   (ix)   
0635                NULL1:       
0635                FALSE1:      
0635   21 00 00               LD   hl,FALSE   
0638   E5                     PUSH   hl   
0639   DD E9                  JP   (ix)   
063B                LPAREN:      
063B   C3 D5 04               JP   block   
063E                             ; execute a block of code which ends with }
063E                             ; creates a root scope if BP == stack
063E                             ; else uses outer scope
063E                CARET:       
063E                GO:          
063E   D1                     POP   de   ; de = block*
063F                GO1:         
063F   7B                     LD   a,e   ; if block* == null, exit
0640   B2                     OR   d   
0641   20 02                  JR   nz,go2   
0643   DD E9                  JP   (ix)   
0645                GO2:         
0645   1A                     LD   a,(de)   
0646   FE 7B                  CP   "{"   
0648   28 07                  JR   z,goBlock1   
064A   FE 28                  CP   "("   
064C   C2 84 06               JP   nz,goFunc   
064F   13                     INC   de   ; de is the address to jump back to
0650   D5                     PUSH   de   ; push de just before stack frame
0651                GOBLOCK:      
0651                GOBLOCK1:      
0651   ED 53 FA 41            LD   (vTemp1),de   ; save de
0655   21 80 40               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0658   FD 54                  LD   d,iyh   
065A   FD 5D                  LD   e,iyl   
065C   B7                     OR   a   ; if stack* == BP then this is the root_scope
065D   ED 52                  SBC   hl,de   
065F   ED 5B FA 41            LD   de,(vTemp1)   ; restore de
0663   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0664   B4                     OR   h   
0665   3E 00                  LD   a,0   
0667   28 6C                  JR   z,goFunc8   
0669   C5                     PUSH   bc   ; push IP
066A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066D   FD 46 05               LD   b,(iy+5)   
0670   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0673   FD 66 03               LD   h,(iy+3)   
0676                GOBLOCK2:      
0676   C5                     PUSH   bc   ; arg_list*
0677   E5                     PUSH   hl   ; first_arg*
0678   FD E5                  PUSH   iy   ; push BP
067A   FD 21 00 00            LD   iy,0   ; BP = SP
067E   FD 39                  ADD   iy,sp   
0680   42 4B                  LD   bc,de   ; bc = de = block*-1
0682   DD E9                  JP   (ix)   
0684                GOFUNC:      ; execute function
0684   EB                     EX   de,hl   ; hl = func*
0685   5E                     LD   e,(hl)   ; de = partial_array*
0686   23                     INC   hl   
0687   56                     LD   d,(hl)   
0688   23                     INC   hl   
0689   7B                     LD   a,e   ; if partial_array* == null skip
068A   B2                     OR   d   
068B   28 21                  JR   z,goFunc3   
068D   ED 43 FA 41            LD   (vTemp1),bc   
0691   22 FC 41               LD   (vTemp2),hl   ; save bc,hl
0694   EB                     EX   de,hl   ; hl = partial_array*
0695   2B                     DEC   hl   ; bc = count
0696   46                     LD   b,(hl)   
0697   2B                     DEC   hl   
0698   4E                     LD   c,(hl)   
0699   23                     INC   hl   ; push each item on stack
069A   23                     INC   hl   
069B   18 06                  JR   goFunc2   
069D                GOFUNC1:      
069D   5E                     LD   e,(hl)   ; de = partial item
069E   23                     INC   hl   
069F   56                     LD   d,(hl)   
06A0   23                     INC   hl   
06A1   D5                     PUSH   de   ; push on stack
06A2   0B                     DEC   bc   
06A3                GOFUNC2:      
06A3   79                     LD   a,c   ; if count != 0 then loop
06A4   B0                     OR   b   
06A5   20 F6                  JR   nz,goFunc1   
06A7   ED 4B FA 41            LD   bc,(vTemp1)   ; restore bc
06AB   2A FC 41               LD   hl,(vTemp2)   ; restore hl
06AE                GOFUNC3:      
06AE   5E                     LD   e,(hl)   ; de = block*
06AF   23                     INC   hl   
06B0   56                     LD   d,(hl)   
06B1   23                     INC   hl   
06B2   ED 53 FA 41            LD   (vTemp1),de   ; save block*
06B6   5E                     LD   e,(hl)   ; de = arg_list*
06B7   23                     INC   hl   
06B8   56                     LD   d,(hl)   
06B9   23                     INC   hl   
06BA   EB                     EX   de,hl   ; hl = arg_list*
06BB   ED 5B FA 41            LD   de,(vTemp1)   ; restore de = block*
06BF   7D                     LD   a,l   ; if arg_list* == null a = 0
06C0   B4                     OR   h   
06C1   20 03                  JR   nz,goFunc4   
06C3   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C4   18 0F                  JR   goFunc8   
06C6                GOFUNC4:      ; allocate locals
06C6   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C7   7E                     LD   a,(hl)   
06C8   18 03                  JR   goFunc6   
06CA                GOFUNC5:      ; loop
06CA   3B                     DEC   sp   
06CB   3B                     DEC   sp   
06CC   3D                     DEC   a   
06CD                GOFUNC6:      
06CD   B7                     OR   a   
06CE   20 FA                  JR   nz,goFunc5   ; end loop
06D0                GOFUNC7:      
06D0   2B                     DEC   hl   ; a = num_args* x 2
06D1   7E                     LD   a,(hl)   
06D2   23                     INC   hl   
06D3   23                     INC   hl   
06D4   87                     ADD   a,a   ; a *= 2
06D5                GOFUNC8:      
06D5   C5                     PUSH   bc   ; push IP
06D6   44 4D                  LD   bc,hl   
06D8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DB   85                     ADD   a,l   
06DC   6F                     LD   l,a   
06DD   39                     ADD   hl,sp   
06DE   18 96                  JR   goBlock2   
06E0                HASH:        
06E0                HEXNUM:      
06E0   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E3                HEXNUM1:      
06E3   03                     INC   bc   
06E4   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E5   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E7   28 02                  JR   z,hexnum2   ; no a decimal
06E9   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EB                HEXNUM2:      
06EB   D6 30                  SUB   $30   ; form decimal digit
06ED   DA 6B 07               JP   c,num2   
06F0   FE 10                  CP   $0F+1   
06F2   D2 6B 07               JP   nc,num2   
06F5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F6   29                     ADD   hl,hl   ; 4X
06F7   29                     ADD   hl,hl   ; 8X
06F8   29                     ADD   hl,hl   ; 16X
06F9   85                     ADD   a,l   ; add into bottom of hl
06FA   6F                     LD   l,a   
06FB   18 E6                  JR   hexnum1   
06FD                UPCASE:      
06FD   0A                     LD   a,(bc)   ; a = identifier char
06FE   D6 41                  SUB   "A"   ; "A" = 0
0700   18 05                  JR   ident1   
0702                LOWCASE:      
0702   0A                     LD   a,(bc)   
0703   D6 61                  SUB   "a"   
0705   C6 1A                  ADD   a,26   
0707                IDENT1:      
0707   87                     ADD   a,a   ; l = a * 2
0708   6F                     LD   l,a   
0709   26 41                  LD   h,msb(vars)   
070B   22 EE 41               LD   (vPointer),hl   ; store address in setter
070E   5E                     LD   e,(hl)   
070F   23                     INC   hl   
0710   56                     LD   d,(hl)   
0711   D5                     PUSH   de   
0712   DD E9                  JP   (ix)   
0714                             ; if
0714                             ; condition then -- value
0714                QUESTION:      
0714                IF:          
0714   03                     INC   bc   
0715   0A                     LD   a,(bc)   
0716   FE 3F                  CP   "?"   
0718   28 06                  JR   z,ifte   
071A   0B                     DEC   bc   
071B   11 00 00               LD   de,NUL   ; NUL pointer for else
071E   18 01                  JR   ifte1   
0720                             ; ifte
0720                             ; condition then else -- value
0720                IFTE:        
0720   D1                     POP   de   ; de = else
0721                IFTE1:       
0721   E1                     POP   hl   ; hl = then
0722   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0723   7C                     LD   a,h   
0724   B5                     OR   l   
0725   E1                     POP   hl   ; hl = then
0726   CA 3F 06               JP   z,go1   ; if z de = else
0729   EB                     EX   de,hl   ; condition = false, de = then
072A   C3 3F 06               JP   go1   
072D                STAR:        
072D                MUL:         
072D   D1                     POP   de   ; get first value
072E   E1                     POP   hl   
072F                MUL2:        
072F   C5                     PUSH   bc   ; Preserve the IP
0730   44 4D                  LD   bc,hl   ; bc = 2nd value
0732   21 00 00               LD   hl,0   
0735   3E 10                  LD   a,16   
0737                MUL3:        
0737   29                     ADD   hl,hl   
0738   CB 13                  RL   e   
073A   CB 12                  RL   d   
073C   30 04                  JR   nc,$+6   
073E   09                     ADD   hl,bc   
073F   30 01                  JR   nc,$+3   
0741   13                     INC   de   
0742   3D                     DEC   a   
0743   20 F2                  JR   nz,mul3   
0745   C1                     POP   bc   ; Restore the IP
0746   C3 99 03               JP   add3   
0749                NUM:         
0749   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074C   0A                     LD   a,(bc)   ; Get numeral or -
074D   FE 2D                  CP   "-"   
074F   20 01                  JR   nz,num0   
0751   03                     INC   bc   ; move to next char, no flags affected
0752                NUM0:        
0752   08                     EX   af,af'   ; save zero flag = 0 for later
0753                NUM1:        
0753   0A                     LD   a,(bc)   ; read digit
0754   D6 30                  SUB   "0"   ; less than 0?
0756   38 13                  JR   c,num2   ; not a digit, exit loop
0758   FE 0A                  CP   10   ; greater that 9?
075A   30 0F                  JR   nc,num2   ; not a digit, exit loop
075C   03                     INC   bc   ; inc IP
075D   54 5D                  LD   de,hl   ; multiply hl * 10
075F   29                     ADD   hl,hl   
0760   29                     ADD   hl,hl   
0761   19                     ADD   hl,de   
0762   29                     ADD   hl,hl   
0763   85                     ADD   a,l   ; add digit in a to hl
0764   6F                     LD   l,a   
0765   3E 00                  LD   a,0   
0767   8C                     ADC   a,h   
0768   67                     LD   h,a   
0769   18 E8                  JR   num1   
076B                NUM2:        
076B   0B                     DEC   bc   
076C   08                     EX   af,af'   ; restore zero flag
076D   20 07                  JR   nz,num3   
076F   EB                     EX   de,hl   ; negate the value of hl
0770   21 00 00               LD   hl,0   
0773   B7                     OR   a   ; jump to sub2
0774   ED 52                  SBC   hl,de   
0776                NUM3:        
0776   E5                     PUSH   hl   ; Put the number on the stack
0777   DD E9                  JP   (ix)   ; and process the next character
0779                UNDERSCORE:      
0779                REMAIN:      
0779   2A F0 41               LD   hl,(vRemain)   
077C   E5                     PUSH   hl   
077D   DD E9                  JP   (ix)   
077F                RPAREN:      
077F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0782   FD 46 09               LD   b,(iy+9)   
0785   DD E9                  JP   (ix)   
0787                             ; arg_list* block* -- ptr
0787                SEMICOLON:      
0787   D1                     POP   de   ; de = block* hl = heap*
0788   2A EC 41               LD   hl,(vHeapPtr)   
078B   AF                     XOR   a   
078C   77                     LD   (hl),a   ; compile null partial_array*
078D   23                     INC   hl   
078E   77                     LD   (hl),a   
078F   23                     INC   hl   
0790   73                     LD   (hl),e   ; compile block*
0791   23                     INC   hl   
0792   72                     LD   (hl),d   
0793   23                     INC   hl   
0794   D1                     POP   de   ; de = block*
0795   73                     LD   (hl),e   ; compile arg_list*
0796   23                     INC   hl   
0797   72                     LD   (hl),d   
0798   23                     INC   hl   
0799   ED 5B EC 41            LD   de,(vHeapPtr)   ; return func*
079D   D5                     PUSH   de   
079E   22 EC 41               LD   (vHeapPtr),hl   ; heap* += 4
07A1   DD E9                  JP   (ix)   
07A3                             ; shiftLeft
07A3                             ; value count -- value2          shift left count places
07A3                SHIFTLEFT:      
07A3   50 59                  LD   de,bc   ; save IP
07A5   C1                     POP   bc   ; bc = count
07A6   41                     LD   b,c   ; b = loop counter
07A7   E1                     POP   hl   
07A8   04                     INC   b   ; test for counter=0 case
07A9   18 01                  JR   shiftLeft2   
07AB                SHIFTLEFT1:      
07AB   29                     ADD   hl,hl   ; left shift hl
07AC                SHIFTLEFT2:      
07AC   10 FD                  DJNZ   shiftLeft1   
07AE   E5                     PUSH   hl   
07AF   42 4B                  LD   bc,de   ; restore IP
07B1   DD E9                  JP   (ix)   
07B3                             ; shiftRight
07B3                             ; value count -- value2          shift left count places
07B3                SHIFTRIGHT:      
07B3   50 59                  LD   de,bc   ; save IP
07B5   C1                     POP   bc   ; bc = count
07B6   41                     LD   b,c   ; b = loop counter
07B7   E1                     POP   hl   
07B8   04                     INC   b   ; test for counter=0 case
07B9   18 04                  JR   shiftRight2   
07BB                SHIFTRIGHT1:      
07BB   CB 3C                  SRL   h   ; right shift hl
07BD   CB 1D                  RR   l   
07BF                SHIFTRIGHT2:      
07BF   10 FA                  DJNZ   shiftRight1   
07C1   E5                     PUSH   hl   
07C2   42 4B                  LD   bc,de   ; restore IP
07C4   DD E9                  JP   (ix)   
07C6                             ; string
07C6                             ; -- ptr                        ; points to start of string chars,
07C6                             ; length is stored at start - 2 bytes
07C6                DBLQUOTE:      
07C6                STRING:      
07C6   2A EC 41               LD   hl,(vHeapPtr)   ; hl = heap*
07C9   23                     INC   hl   ; skip length field to start
07CA   23                     INC   hl   
07CB   E5                     PUSH   hl   ; save start of string
07CC   03                     INC   bc   ; point to next char
07CD   18 03                  JR   string2   
07CF                STRING1:      
07CF   77                     LD   (hl),a   
07D0   23                     INC   hl   ; increase count
07D1   03                     INC   bc   ; point to next char
07D2                STRING2:      
07D2   0A                     LD   a,(bc)   
07D3   FE 22                  CP   DQUOTE   ; " is the string terminator
07D5   28 04                  JR   z,string3   
07D7   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D9   20 F4                  JR   nz,string1   
07DB                STRING3:      
07DB   AF                     XOR   a   ; write NUL to terminate string
07DC   77                     LD   (hl),a   ; hl = end of string
07DD   23                     INC   hl   
07DE   22 EC 41               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E1   2B                     DEC   hl   ; hl = end of string without terminator
07E2   D1                     POP   de   ; de = start of string
07E3   D5                     PUSH   de   ; return start of string
07E4   B7                     OR   a   ; hl = length bytes, de = start of string
07E5   ED 52                  SBC   hl,de   
07E7   EB                     EX   de,hl   
07E8   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E9   72                     LD   (hl),d   
07EA   2B                     DEC   hl   
07EB   73                     LD   (hl),e   
07EC   DD E9                  JP   (ix)   
07EE                MINUS:       ; negative sign or subtract
07EE   03                     INC   bc   ; check if sign of a number
07EF   0A                     LD   a,(bc)   
07F0   0B                     DEC   bc   
07F1   FE 30                  CP   "0"   
07F3   38 05                  JR   c,sub   
07F5   FE 3A                  CP   "9"+1   
07F7   DA 3E 03               JP   c,num_   
07FA                SUB:         ; Subtract the value 2nd on stack from top of stack
07FA   03                     INC   bc   
07FB   FE 2D                  CP   "-"   
07FD   20 05                  JR   nz,sub1   
07FF   E1                     POP   hl   
0800   2B                     DEC   hl   
0801   C3 8F 04               JP   assign0   
0804                SUB1:        
0804   0B                     DEC   bc   
0805   D1                     POP   de   
0806   E1                     POP   hl   
0807   B7                     OR   a   
0808   ED 52                  SBC   hl,de   
080A   C3 99 03               JP   add3   
080D                             ;*******************************************************************
080D                             ; commands
080D                             ; a contains command letter
080D                             ; bc points to command letter
080D                             ;*******************************************************************
080D                COMMAND:      
080D   FE 2F                  CP   "/"   ; // comment
080F   CA 94 08               JP   z,comment   
0812   FE 61                  CP   "a"   ; /ab absolute /ad address of
0814   28 3D                  JR   z,command_a   
0816   FE 62                  CP   "b"   ; /b br
0818   CA CB 08               JP   z,break   
081B   FE 63                  CP   "c"   ; /c chars
081D   CA 52 09               JP   z,chars   
0820   FE 66                  CP   "f"   ; /f false
0822   CA 35 06               JP   z,false1   
0825   FE 69                  CP   "i"   ; /in input iv invert
0827   CA 6A 08               JP   z,command_i   
082A   FE 6B                  CP   "k"   ; /k key
082C   CA 71 09               JP   z,key   
082F   FE 6E                  CP   "n"   ; /n numbers
0831   CA 83 09               JP   z,numbers   
0834   FE 6F                  CP   "o"   ; /o output
0836   CA 7A 09               JP   z,output   
0839   FE 70                  CP   "p"   ; /pa partial /ps print stack /pt print tib
083B   CA 78 08               JP   z,command_p   
083E   FE 74                  CP   "t"   ; /t true
0840   CA 2F 06               JP   z,true1   
0843   FE 76                  CP   "v"   ; /vh heap pointer
0845   CA 8B 08               JP   z,command_v   
0848   FE 78                  CP   "x"   ; /x xor
084A   CA C4 03               JP   z,xor   
084D                ERROR1:      
084D   21 01 00               LD   hl,1   ; error 1: unknown command
0850   C3 01 0B               JP   error   
0853                COMMAND_A:      
0853   03                     INC   bc   
0854   0A                     LD   a,(bc)   
0855   FE 62                  CP   "b"   
0857   CA 9D 08               JP   z,absolute   
085A   FE 64                  CP   "d"   
085C   CA AA 08               JP   z,addrOf   
085F   18 EC                  JR   error1   
0861                COMMAND_B:      
0861   03                     INC   bc   
0862   0A                     LD   a,(bc)   
0863   FE 62                  CP   "b"   ; /br br
0865   CA CB 08               JP   z,break   
0868   18 E3                  JR   error1   
086A                COMMAND_I:      
086A   03                     INC   bc   
086B   0A                     LD   a,(bc)   
086C   FE 6E                  CP   "n"   ; /in input
086E   CA 66 09               JP   z,input   
0871   FE 76                  CP   "v"   ; /iv invert
0873   CA CF 03               JP   z,invert   
0876   18 D5                  JR   error1   
0878                COMMAND_P:      
0878   03                     INC   bc   
0879   0A                     LD   a,(bc)   
087A   FE 61                  CP   "a"   
087C   CA E5 08               JP   z,partial   
087F   FE 73                  CP   "s"   
0881   CA 05 09               JP   z,printStack   
0884   FE 74                  CP   "t"   
0886   CA 3C 09               JP   z,printTIB   
0889   18 C2                  JR   error1   
088B                COMMAND_V:      
088B   03                     INC   bc   
088C   0A                     LD   a,(bc)   
088D   FE 68                  CP   "h"   
088F   CA 5A 09               JP   z,heapPtr   
0892   18 B9                  JR   error1   
0894                COMMENT:      
0894   03                     INC   bc   ; point to next char
0895   0A                     LD   a,(bc)   
0896   FE 20                  CP   " "   ; terminate on any char less than SP
0898   30 FA                  JR   nc,comment   
089A   0B                     DEC   bc   
089B   DD E9                  JP   (ix)   
089D                             ; /ab absolute
089D                             ; num -- num
089D                ABSOLUTE:      
089D   E1                     POP   hl   
089E   CB 7C                  BIT   7,h   
08A0   C8                     RET   z   
08A1   AF                     XOR   a   
08A2   95                     SUB   l   
08A3   6F                     LD   l,a   
08A4   9F                     SBC   a,a   
08A5   94                     SUB   h   
08A6   67                     LD   h,a   
08A7   E5                     PUSH   hl   
08A8   DD E9                  JP   (ix)   
08AA                             ; /ad addrOf
08AA                             ; char -- addr
08AA                ADDROF:      
08AA   E1                     POP   hl   ; a = char
08AB   7D                     LD   a,l   
08AC   FE 7B                  CP   "z"+1   ; if a > z then exit
08AE   30 19                  JR   nc,addrOf2   
08B0   D6 41                  SUB   "A"   ; a - 65
08B2   38 15                  JR   c,addrOf2   ; if < A then exit
08B4   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08B6   38 06                  JR   c,addrOf1   
08B8   D6 06                  SUB   "a"-("Z"+1)   
08BA   FE 1A                  CP   "Z"-"A"+1   
08BC   38 0B                  JR   c,addrOf2   ; if < a then exit
08BE                ADDROF1:      
08BE   87                     ADD   a,a   ; double a
08BF   21 00 41               LD   hl,VARS   ; hl = VARS + a
08C2   85                     ADD   a,l   
08C3   6F                     LD   l,a   
08C4   3E 00                  LD   a,0   
08C6   8C                     ADC   a,h   
08C7   67                     LD   h,a   
08C8   E5                     PUSH   hl   
08C9                ADDROF2:      
08C9   DD E9                  JP   (ix)   
08CB                BREAK:       
08CB   E1                     POP   hl   
08CC   7D                     LD   a,l   
08CD   B4                     OR   h   
08CE   28 02                  JR   z,break1   
08D0   DD E9                  JP   (ix)   
08D2                BREAK1:      
08D2   FD 5D                  LD   e,iyl   ; get block* just under stack frame
08D4   FD 54                  LD   d,iyh   
08D6   21 08 00               LD   hl,8   
08D9   19                     ADD   hl,de   
08DA   23                     INC   hl   
08DB   23                     INC   hl   
08DC   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
08DF   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08E2   C3 3E 05               JP   blockEnd   
08E5                             ; partial
08E5                             ; array* func* -- func1*
08E5                PARTIAL:      
08E5   E1                     POP   hl   ; h1 = func*
08E6   ED 5B EC 41            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
08EA   ED 43 FA 41            LD   (vTemp1),bc   ; save IP
08EE   01 06 00               LD   bc,6   ; bc = count
08F1   ED B0                  LDIR      ; clone func
08F3   ED 4B FA 41            LD   bc,(vTemp1)   ; restore IP
08F7   2A EC 41               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
08FA   ED 53 EC 41            LD   (vHeapPtr),de   ; heap* += 6
08FE   D1                     POP   de   ; de = array*
08FF   E5                     PUSH   hl   ; return partial_array*
0900   73                     LD   (hl),e   ; compile array*
0901   23                     INC   hl   
0902   72                     LD   (hl),d   
0903   DD E9                  JP   (ix)   
0905                             ; /ps print stack
0905                             ; --
0905                PRINTSTACK:      
0905   ED 43 FA 41            LD   (vTemp1),bc   
0909   CD 3D 0A               CALL   printStr   
090C   3D 3E 20 00            .CSTR   "=> "   
0910   21 80 40               LD   hl,STACK   
0913   ED 72                  SBC   hl,sp   
0915   CB 3C                  SRL   h   
0917   CB 1D                  RR   l   
0919   44 4D                  LD   bc,hl   
091B   21 80 40               LD   hl,STACK   
091E   18 0F                  JR   printStack2   
0920                PRINTSTACK1:      
0920   0B                     DEC   bc   
0921   2B                     DEC   hl   
0922   56                     LD   d,(hl)   
0923   2B                     DEC   hl   
0924   5E                     LD   e,(hl)   
0925   EB                     EX   de,hl   
0926   CD D3 09               CALL   prthex   
0929   EB                     EX   de,hl   
092A   3E 20                  LD   a," "   
092C   CD 85 00               CALL   putchar   
092F                PRINTSTACK2:      
092F   79                     LD   a,c   
0930   B0                     OR   b   
0931   20 ED                  JR   nz,printStack1   
0933   CD 2D 0A               CALL   prompt   
0936   ED 4B FA 41            LD   bc,(vTemp1)   
093A   DD E9                  JP   (ix)   
093C                             ; printTIB
093C                             ; --
093C                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
093C                PRINTTIB:      
093C   2A E8 41               LD   hl,(vTIBPtr)   
093F   11 00 43               LD   de,TIB   
0942   B7                     OR   a   
0943   ED 52                  SBC   hl,de   
0945   C3 4E 09               JP   printTIB2   
0948                PRINTTIB1:      
0948   1A                     LD   a,(de)   
0949   CD 85 00               CALL   putchar   
094C   7D                     LD   a,l   
094D   B4                     OR   h   
094E                PRINTTIB2:      
094E   20 F8                  JR   nz,printTIB1   
0950   DD E9                  JP   (ix)   
0952                CHARS:       
0952   21 01 00               LD   hl,1   
0955                CHARS1:      
0955   22 E6 41               LD   (vDataWidth),hl   
0958   DD E9                  JP   (ix)   
095A                HEAPPTR:      
095A   2A EC 41               LD   hl,(vHeapPtr)   
095D   E5                     PUSH   hl   
095E   21 EC 41               LD   hl,vHeapPtr   
0961   22 EE 41               LD   (vPointer),hl   
0964   DD E9                  JP   (ix)   
0966                             ; Z80 port input
0966                             ; port -- value
0966                INPUT:       
0966   E1                     POP   hl   
0967   59                     LD   e,c   ; save IP
0968   4D                     LD   c,l   
0969   ED 68                  IN   l,(c)   
096B   26 00                  LD   h,0   
096D   4B                     LD   c,e   ; restore IP
096E   E5                     PUSH   hl   
096F   DD E9                  JP   (ix)   
0971                KEY:         
0971   CD 81 00               CALL   getchar   
0974   26 00                  LD   h,0   
0976   6F                     LD   l,a   
0977   E5                     PUSH   hl   
0978   DD E9                  JP   (ix)   
097A                             ; Z80 port output
097A                             ; value port --
097A                OUTPUT:      
097A   E1                     POP   hl   
097B   59                     LD   e,c   ; save IP
097C   4D                     LD   c,l   
097D   E1                     POP   hl   
097E   ED 69                  OUT   (c),l   
0980   4B                     LD   c,e   ; restore IP
0981   DD E9                  JP   (ix)   
0983                NUMBERS:      
0983   21 02 00               LD   hl,2   
0986   C3 55 09               JP   chars1   
0989                             ; 
0989                             ; 
0989                             ; 
0989                             ; 
0989                FILTER:      
0989                MAP:         
0989                SCAN:        
0989   DD E9                  JP   (ix)   
098B                             ; print decimal
098B                             ; hl = value
098B                PRTDEC:      
098B   CB 7C                  BIT   7,h   
098D   28 0B                  JR   z,prtdec0   
098F   3E 2D                  LD   a,"-"   
0991   CD 85 00               CALL   putchar   
0994   AF                     XOR   a   
0995   95                     SUB   l   
0996   6F                     LD   l,a   
0997   9F                     SBC   a,a   
0998   94                     SUB   h   
0999   67                     LD   h,a   
099A                PRTDEC0:      
099A   C5                     PUSH   bc   
099B   0E 00                  LD   c,0   ; leading zeros flag = false
099D   11 F0 D8               LD   de,-10000   
09A0   CD BC 09               CALL   prtdec1   
09A3   11 18 FC               LD   de,-1000   
09A6   CD BC 09               CALL   prtdec1   
09A9   11 9C FF               LD   de,-100   
09AC   CD BC 09               CALL   prtdec1   
09AF   1E F6                  LD   e,-10   
09B1   CD BC 09               CALL   prtdec1   
09B4   0C                     INC   c   ; flag = true for at least digit
09B5   1E FF                  LD   e,-1   
09B7   CD BC 09               CALL   prtdec1   
09BA   C1                     POP   bc   
09BB   C9                     RET      
09BC                PRTDEC1:      
09BC   06 2F                  LD   b,"0"-1   
09BE                PRTDEC2:      
09BE   04                     INC   b   
09BF   19                     ADD   hl,de   
09C0   38 FC                  JR   c,prtdec2   
09C2   ED 52                  SBC   hl,de   
09C4   3E 30                  LD   a,"0"   
09C6   B8                     CP   b   
09C7   20 05                  JR   nz,prtdec3   
09C9   AF                     XOR   a   
09CA   B1                     OR   c   
09CB   C8                     RET   z   
09CC   18 01                  JR   prtdec4   
09CE                PRTDEC3:      
09CE   0C                     INC   c   
09CF                PRTDEC4:      
09CF   78                     LD   a,b   
09D0   C3 85 00               JP   putchar   
09D3                PRTHEX:      ; display hl as a 16-bit number in hex.
09D3   C5                     PUSH   bc   ; preserve the IP
09D4   7C                     LD   a,h   
09D5   CD DE 09               CALL   prthex2   
09D8   7D                     LD   a,l   
09D9   CD DE 09               CALL   prthex2   
09DC   C1                     POP   bc   
09DD   C9                     RET      
09DE                PRTHEX2:      
09DE   4F                     LD   c,a   
09DF   1F                     RRA      
09E0   1F                     RRA      
09E1   1F                     RRA      
09E2   1F                     RRA      
09E3   CD E7 09               CALL   prthex3   
09E6   79                     LD   a,c   
09E7                PRTHEX3:      
09E7   E6 0F                  AND   0x0F   
09E9   C6 90                  ADD   a,0x90   
09EB   27                     DAA      
09EC   CE 40                  ADC   a,0x40   
09EE   27                     DAA      
09EF   C3 85 00               JP   putchar   
09F2                PRTSTR0:      
09F2   CD 85 00               CALL   putchar   
09F5   23                     INC   hl   
09F6                PRTSTR:      
09F6   7E                     LD   a,(hl)   
09F7   B7                     OR   a   
09F8   20 F8                  JR   nz,prtstr0   
09FA   C9                     RET      
09FB                             ; **************************************************************************
09FB                             ; calculate nesting value
09FB                             ; a is char to be tested,
09FB                             ; e is the nesting value (initially 0)
09FB                             ; e is increased by ( and [
09FB                             ; e is decreased by ) and ]
09FB                             ; e has its bit 7 toggled by `
09FB                             ; limited to 127 levels
09FB                             ; **************************************************************************
09FB                NESTING:      
09FB   FE 22                  CP   DQUOTE   ; quote char
09FD   28 06                  JR   z,nesting0   
09FF   FE 60                  CP   "`"   ; quote char
0A01   28 02                  JR   z,nesting0   
0A03   18 0A                  JR   nesting1   
0A05                NESTING0:      
0A05   CB 7B                  BIT   7,e   
0A07   28 03                  JR   z,nesting1a   
0A09   CB BB                  RES   7,e   
0A0B   C9                     RET      
0A0C                NESTING1A:      
0A0C   CB FB                  SET   7,e   
0A0E   C9                     RET      
0A0F                NESTING1:      
0A0F   CB 7B                  BIT   7,e   
0A11   C0                     RET   nz   
0A12   FE 7B                  CP   "{"   
0A14   28 08                  JR   z,nesting2   
0A16   FE 5B                  CP   "["   
0A18   28 04                  JR   z,nesting2   
0A1A   FE 28                  CP   "("   
0A1C   20 02                  JR   nz,nesting3   
0A1E                NESTING2:      
0A1E   1C                     INC   e   
0A1F   C9                     RET      
0A20                NESTING3:      
0A20   FE 7D                  CP   "}"   
0A22   28 07                  JR   z,nesting4   
0A24   FE 5D                  CP   "]"   
0A26   28 03                  JR   z,nesting4   
0A28   FE 29                  CP   ")"   
0A2A   C0                     RET   nz   
0A2B                NESTING4:      
0A2B   1D                     DEC   e   
0A2C   C9                     RET      
0A2D                PROMPT:      
0A2D   CD 3D 0A               CALL   printStr   
0A30   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0A35   C9                     RET      
0A36                CRLF:        
0A36   CD 3D 0A               CALL   printStr   
0A39   0D 0A 00               .CSTR   "\r\n"   
0A3C   C9                     RET      
0A3D                             ; prints a null teminated string
0A3D                             ; the string should be immedaitely following the call
0A3D                PRINTSTR:      
0A3D   E3                     EX   (sp),hl   ; swap			
0A3E   CD F6 09               CALL   prtstr   
0A41   23                     INC   hl   ; inc past NUL
0A42   E3                     EX   (sp),hl   ; put it back	
0A43   C9                     RET      
0A44                INIT:        
0A44   DD 2A EA 41            LD   ix,(vNext)   
0A48   FD 21 80 40            LD   iy,STACK   
0A4C   21 80 01               LD   hl,isysVars   
0A4F   11 E6 41               LD   de,sysVars   
0A52   01 10 00               LD   bc,8 * 2   
0A55   ED B0                  LDIR      
0A57   21 00 41               LD   hl,vars   ; 52 vars LO HI
0A5A   06 34                  LD   b,26*2   
0A5C   AF                     XOR   a   
0A5D                INIT0:       
0A5D   77                     LD   (hl),a   
0A5E   23                     INC   hl   
0A5F   10 FC                  DJNZ   init0   
0A61   C9                     RET      
0A62                START:       
0A62   31 80 40               LD   sp,STACK   ; start of monty
0A65   CD 44 0A               CALL   init   ; setups
0A68   CD 3D 0A               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A6B   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0A78                INTERPRET:      
0A78   CD 2D 0A               CALL   prompt   
0A7B   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A7E   ED 43 E8 41            LD   (vTIBPtr),bc   
0A82                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A82   1E 00                  LD   e,0   ; initilize nesting value
0A84   C5                     PUSH   bc   ; save offset into TIB,
0A85                             ; bc is also the count of chars in TIB
0A85   21 00 43               LD   hl,TIB   ; hl is start of TIB
0A88   18 06                  JR   interpret4   
0A8A                INTERPRET3:      
0A8A   7E                     LD   a,(hl)   ; a = char in TIB
0A8B   23                     INC   hl   ; inc pointer into TIB
0A8C   0B                     DEC   bc   ; dec count of chars in TIB
0A8D   CD FB 09               CALL   nesting   ; update nesting value
0A90                INTERPRET4:      
0A90   79                     LD   a,c   ; is count zero?
0A91   B0                     OR   b   
0A92   20 F6                  JR   nz,interpret3   ; if not loop
0A94   C1                     POP   bc   ; restore offset into TIB
0A95                INTERPRET5:      
0A95   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A98   FE 20                  CP   $20   ; compare to space
0A9A   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0A9C   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0A9E                             ; ???? NEEDED?
0A9E   28 3B                  JR   z,interpret8   
0AA0   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0AA2   28 24                  JR   z,interpret7   ; if anything else its macro/control
0AA4   FE 05                  CP   CTRL_E   
0AA6   CA 21 0B               JP   z,edit_   
0AA9   FE 08                  CP   CTRL_H   
0AAB   CA 11 0B               JP   z,backSpace_   
0AAE   FE 0A                  CP   CTRL_J   
0AB0   CA 39 0B               JP   z,reEdit_   
0AB3   FE 13                  CP   CTRL_S   
0AB5   CA 3C 0B               JP   z,printStack_   
0AB8                             ; DB     lsb(edit_)       ; ENQ ^E  5
0AB8                             ; DB     lsb(reedit_)     ; LF  ^J 10
0AB8                             ; DB     lsb(list_)       ; FF  ^L 12
0AB8                             ; DB     lsb(printStack_) ; DLE ^P 16
0AB8                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0AB8                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0AB8                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0AB8                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0AB8                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0AB8                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0AB8                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0AB8                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0AB8                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0AB8                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0AB8                INTERPRET5A:      
0AB8                             ; ld (vTIBPtr),bc
0AB8                             ; ld bc,(vTIBPtr)
0AB8   18 C8                  JR   interpret2   
0ABA                INTERPRET6:      
0ABA   21 00 43               LD   hl,TIB   
0ABD   09                     ADD   hl,bc   
0ABE   77                     LD   (hl),a   ; store the character in textbuf
0ABF   03                     INC   bc   
0AC0   CD 85 00               CALL   putchar   ; echo character to screen
0AC3   CD FB 09               CALL   nesting   
0AC6   18 CD                  JR   interpret5   ; wait for next character
0AC8                INTERPRET7:      
0AC8   21 00 43               LD   hl,TIB   
0ACB   09                     ADD   hl,bc   
0ACC   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0ACE   23                     INC   hl   
0ACF   36 0A                  LD   (hl),"\n"   
0AD1   23                     INC   hl   
0AD2   03                     INC   bc   
0AD3   03                     INC   bc   
0AD4   CD 36 0A               CALL   crlf   ; echo character to screen
0AD7   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0AD8   B7                     OR   a   
0AD9   20 BA                  JR   nz,interpret5   
0ADB                INTERPRET8:      
0ADB   ED 43 E8 41            LD   (vTIBPtr),bc   
0ADF   01 00 43               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AE2                             ; we pressed enter
0AE2   0B                     DEC   bc   
0AE3                NEXT:        
0AE3   03                     INC   bc   ; Increment the IP
0AE4   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AE5   FE 20                  CP   " "   ; whitespace?
0AE7   28 FA                  JR   z,next   ; space? ignore
0AE9   38 07                  JR   c,next1   
0AEB   6F                     LD   l,a   ; index into table
0AEC   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AEE   6E                     LD   l,(hl)   ; get low jump address
0AEF   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AF1   E9                     JP   (hl)   ; Jump to routine
0AF2                NEXT1:       
0AF2   FE 00                  CP   NUL   ; end of input string?
0AF4   28 03                  JR   z,exit   
0AF6   C3 78 0A               JP   interpret   ; no, other whitespace, macros?
0AF9                EXIT:        
0AF9   03                     INC   bc   
0AFA   60 69                  LD   hl,bc   
0AFC   E9                     JP   (hl)   
0AFD                RUN:         
0AFD   C1                     POP   bc   
0AFE   0B                     DEC   bc   
0AFF   DD E9                  JP   (ix)   
0B01                ERROR:       
0B01   CD 3D 0A               CALL   printStr   
0B04   45 72 72 6F 72 20 00   .CSTR   "Error "   
0B0B   CD 8B 09               CALL   prtdec   
0B0E   C3 78 0A               JP   interpret   
0B11                BACKSPACE_:      
0B11   79                     LD   a,c   
0B12   B0                     OR   b   
0B13   CA 82 0A               JP   z,interpret2   
0B16   0B                     DEC   bc   
0B17   CD 3D 0A               CALL   printStr   
0B1A   08 20 08 00            .CSTR   "\b \b"   
0B1E   C3 82 0A               JP   interpret2   
0B21                             ; edit
0B21                EDIT_:       
0B21   CD FD 0A               CALL   run   
0B24   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0B36   C3 78 0A               JP   interpret   
0B39                REEDIT_:      
0B39   C3 78 0A               JP   interpret   
0B3C                PRINTSTACK_:      
0B3C   CD FD 0A               CALL   run   
0B3F   2F 70 73 00            .CSTR   "/ps"   
0B43   C3 78 0A               JP   interpret   
0B46                             ; editDef:
0B46                             ;     pop hl                      ; pop ret address
0B46                             ;     ex (sp),hl                  ; swap with TOS
0B46                             ;     push hl                     ; dup TOS
0B46                             ;     ld a,l                      ; a = ident
0B46                             ;     ld de,TIB                   ; de = start of TIB
0B46                             ;     ld (vTIBPtr),de             ; update TIB*
0B46                             ;     push ix                     ; save NEXT
0B46                             ;     ld ix,editDef0              ; NEXT = editDef0
0B46                             ;     jp lookupRef                ; convert letter into address
0B46                             ; editDef0:
0B46                             ;     ld e,(hl)                   ; de = (hl++)
0B46                             ;     inc hl
0B46                             ;     ld d,(hl)
0B46                             ;     ld a,d                      ; de == 0 ?
0B46                             ;     or e
0B46                             ;     jr z,editDef4
0B46                             ;     ld ix,editDef3              ; NEXT = editDef3
0B46                             ;     ex de,hl
0B46                             ;     ld a,(hl)
0B46                             ;     cp "{"
0B46                             ;     jr nz,editDef1
0B46                             ;     jp editBlock0               ; convert letter into address
0B46                             ; editDef1:
0B46                             ;     cp "("
0B46                             ;     jr nz,editDef2
0B46                             ;     jp editBlock0               ; convert letter into address
0B46                             ; editDef2:
0B46                             ;     jp editFunc
0B46                             ; editDef3:
0B46                             ;     ld a," "                    ; write assign
0B46                             ;     call writeChar
0B46                             ;     pop hl                      ; a = ident
0B46                             ;     ld a,l
0B46                             ;     call writeChar
0B46                             ;     ld a,"="                    ; write assign
0B46                             ;     call writeChar
0B46                             ;     ld ix,editDef4              ; NEXT = editDef4
0B46                             ;     jp printTIB
0B46                             ; editDef4:
0B46                             ;     pop ix                      ; restore NEXT
0B46                             ;     jp (ix)
0B46                             ; writeChar:
0B46                             ;     ld de,(vTIBPtr)             ; de = TIB*
0B46                             ;     ld (de),a                   ; write ident
0B46                             ;     inc de
0B46                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0B46                             ;     ret
0B46                             ; ; printTIB
0B46                             ; printTIB:
0B46                             ;     ld hl,(vTIBPtr)
0B46                             ;     ld de,TIB
0B46                             ;     or a
0B46                             ;     sbc hl,de
0B46                             ;     jp printTIB2
0B46                             ; printTIB1:
0B46                             ;     ld a,(de)
0B46                             ;     call putchar
0B46                             ; printTIB2:
0B46                             ;     ld a,l
0B46                             ;     or h
0B46                             ;     jr nz,printTIB1
0B46                             ;     jp (ix)
0B46                             ; editBlock:
0B46                             ;     pop hl                      ; hl = block*
0B46                             ; editBlock0:
0B46                             ;     push ix                     ; save next
0B46                             ;     push hl                     ; push block*
0B46                             ;     push hl                     ; push block*
0B46                             ;     ld ix,(editBlock2)
0B46                             ;     jp blockLength
0B46                             ; editBlock1:
0B46                             ;     pop hl                      ; bc = length, (sp) = IP
0B46                             ;     pop de                      ; de = block*
0B46                             ;     ld a,l
0B46                             ;     or h
0B46                             ;     jr z,editBlock2
0B46                             ;     push bc
0B46                             ;     ld bc,hl
0B46                             ;     ex de,hl                    ; hl = block*
0B46                             ;     ld de,(vTIBPtr)              ; de = TIB*
0B46                             ;     ldir                        ; copy block to TIB
0B46                             ;     ld (vTIBPtr),de              ; save TIB*
0B46                             ;     pop bc
0B46                             ; editBlock2:
0B46                             ;     pop ix                      ; restore next
0B46                             ;     jp (ix)
0B46                             ; editFunc:
0B46                             ;     jp (ix)
0B46                             ; editArray:
0B46                             ;     jp (ix)
0B46                             ; editArglist:
0B46                             ;     jp (ix)
0B46                             ; ; blockLength
0B46                             ; ; addr1 -- length
0B46                             ; blockLength:
0B46                             ;     pop hl                      ; block*
0B46                             ;     push hl                     ; save block*
0B46                             ;     inc hl                      ; skip first char
0B46                             ;     ld d,1                      ; increase nesting
0B46                             ; blockLength1:                   ; Skip to end of definition
0B46                             ;     ld a,(hl)                   ; Get the next character
0B46                             ;     inc hl                      ; Point to next character
0B46                             ;     cp " " + 1                  ; ignore whitespace
0B46                             ;     jr c,blockLength1
0B46                             ;     cp ")"
0B46                             ;     jr z,blockLength4
0B46                             ;     cp "}"
0B46                             ;     jr z,blockLength4
0B46                             ;     cp "]"
0B46                             ;     jr z,blockLength4
0B46                             ;     cp "("
0B46                             ;     jr z,blockLength2
0B46                             ;     cp "{"
0B46                             ;     jr z,blockLength2
0B46                             ;     cp "["
0B46                             ;     jr z,blockLength2
0B46                             ;     cp "'"
0B46                             ;     jr z,blockLength3
0B46                             ;     cp "`"
0B46                             ;     jr z,blockLength3
0B46                             ;     cp DQUOTE
0B46                             ;     jr z,blockLength3
0B46                             ;     jr blockLength1
0B46                             ; blockLength2:
0B46                             ;     inc d
0B46                             ;     jr blockLength1
0B46                             ; blockLength4:
0B46                             ;     dec d
0B46                             ;     jr nz, blockLength1         ; get the next element
0B46                             ; blockLength3:
0B46                             ;     ld a,$80
0B46                             ;     xor d
0B46                             ;     ld d,a
0B46                             ;     jr nz, blockLength1
0B46                             ;     pop hl                      ; hl = block*
0B46                             ;     or a
0B46                             ;     sbc hl,de
0B46                             ;     push hl
0B46                             ;     jp (ix)
0B46                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0B46                             ; \a start of stack \#3 depth \b base \$ prompt
0B46                             ; DW dStack               ; a vS0 start of datastack			
0B46                             ; DW FALSE                ; b vBase16
0B46                             ; DW 0                    ; c vTIBPtr an offset to the tib
0B46                             ; DW 0                    ; d
0B46                             ; DW 65                   ; e vLastDef "A" last command u defined
0B46                             ; DW 0                    ; f
0B46                             ; DW page6                ; g 256 bytes limits
0B46                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0B46                          ALIGN   $100   
0C00                TESTSSTART:      
0C00                             ; call printStr
0C00                             ; .cstr "Done!"
0C00                             ; HALT
0C00                             ; 
0C00                          ;*Macro unroll:  test "/f", false
0C00   31 80 40               LD   SP,STACK   
0C03   CD 44 0A               CALL   init   
0C06   CD 42 3F               CALL   execStr   
0C09   2F 66 00               .CSTR   "/f"   
0C0C                          ;*Macro unroll:  expect "/f",false
0C0C   E1                     POP   HL   
0C0D   E5                     PUSH   HL   
0C0E   11 00 00               LD   DE,false   
0C11   B7                     OR   A   
0C12   ED 52                  SBC   HL,DE   
0C14   7D                     LD   A,L   
0C15   B4                     OR   H   
0C16   28 4D                  JR   Z,expectM_0_2442S43   
0C18   CD 3D 0A               CALL   printStr   
0C1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0C24   CD 3D 0A               CALL   printStr   
0C27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C36   21 00 00               LD   HL,false   
0C39   CD 8B 09               CALL   prtdec   
0C3C   CD 3D 0A               CALL   printStr   
0C3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C4C   E1                     POP   hl   
0C4D   E5                     PUSH   hl   
0C4E   CD 8B 09               CALL   prtdec   
0C51   E1                     POP   hl   
0C52   CD 3D 0A               CALL   printStr   
0C55   20 28 23 00            .CSTR   " (#"   
0C59   CD D3 09               CALL   prthex   
0C5C   CD 3D 0A               CALL   printStr   
0C5F   29 0D 0A 00            .CSTR   ")\r\n"   
0C63   76                     HALT      
0C64   00                     .CSTR      
0C65                EXPECTM_0_2442S43:      
0C65   E1                     POP   HL   
0C66                          ;*Macro unroll:  test "/t", true
0C66   31 80 40               LD   SP,STACK   
0C69   CD 44 0A               CALL   init   
0C6C   CD 42 3F               CALL   execStr   
0C6F   2F 74 00               .CSTR   "/t"   
0C72                          ;*Macro unroll:  expect "/t",true
0C72   E1                     POP   HL   
0C73   E5                     PUSH   HL   
0C74   11 FF FF               LD   DE,true   
0C77   B7                     OR   A   
0C78   ED 52                  SBC   HL,DE   
0C7A   7D                     LD   A,L   
0C7B   B4                     OR   H   
0C7C   28 4D                  JR   Z,expectM_0_2443S43   
0C7E   CD 3D 0A               CALL   printStr   
0C81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0C8A   CD 3D 0A               CALL   printStr   
0C8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C9C   21 FF FF               LD   HL,true   
0C9F   CD 8B 09               CALL   prtdec   
0CA2   CD 3D 0A               CALL   printStr   
0CA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CB2   E1                     POP   hl   
0CB3   E5                     PUSH   hl   
0CB4   CD 8B 09               CALL   prtdec   
0CB7   E1                     POP   hl   
0CB8   CD 3D 0A               CALL   printStr   
0CBB   20 28 23 00            .CSTR   " (#"   
0CBF   CD D3 09               CALL   prthex   
0CC2   CD 3D 0A               CALL   printStr   
0CC5   29 0D 0A 00            .CSTR   ")\r\n"   
0CC9   76                     HALT      
0CCA   00                     .CSTR      
0CCB                EXPECTM_0_2443S43:      
0CCB   E1                     POP   HL   
0CCC                          ;*Macro unroll:  test "1", 1
0CCC   31 80 40               LD   SP,STACK   
0CCF   CD 44 0A               CALL   init   
0CD2   CD 42 3F               CALL   execStr   
0CD5   31 00                  .CSTR   "1"   
0CD7                          ;*Macro unroll:  expect "1",1
0CD7   E1                     POP   HL   
0CD8   E5                     PUSH   HL   
0CD9   11 01 00               LD   DE,1   
0CDC   B7                     OR   A   
0CDD   ED 52                  SBC   HL,DE   
0CDF   7D                     LD   A,L   
0CE0   B4                     OR   H   
0CE1   28 4C                  JR   Z,expectM_0_2444S43   
0CE3   CD 3D 0A               CALL   printStr   
0CE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CEE   CD 3D 0A               CALL   printStr   
0CF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D00   21 01 00               LD   HL,1   
0D03   CD 8B 09               CALL   prtdec   
0D06   CD 3D 0A               CALL   printStr   
0D09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D16   E1                     POP   hl   
0D17   E5                     PUSH   hl   
0D18   CD 8B 09               CALL   prtdec   
0D1B   E1                     POP   hl   
0D1C   CD 3D 0A               CALL   printStr   
0D1F   20 28 23 00            .CSTR   " (#"   
0D23   CD D3 09               CALL   prthex   
0D26   CD 3D 0A               CALL   printStr   
0D29   29 0D 0A 00            .CSTR   ")\r\n"   
0D2D   76                     HALT      
0D2E   00                     .CSTR      
0D2F                EXPECTM_0_2444S43:      
0D2F   E1                     POP   HL   
0D30                          ;*Macro unroll:  test "2", 2
0D30   31 80 40               LD   SP,STACK   
0D33   CD 44 0A               CALL   init   
0D36   CD 42 3F               CALL   execStr   
0D39   32 00                  .CSTR   "2"   
0D3B                          ;*Macro unroll:  expect "2",2
0D3B   E1                     POP   HL   
0D3C   E5                     PUSH   HL   
0D3D   11 02 00               LD   DE,2   
0D40   B7                     OR   A   
0D41   ED 52                  SBC   HL,DE   
0D43   7D                     LD   A,L   
0D44   B4                     OR   H   
0D45   28 4C                  JR   Z,expectM_0_2445S43   
0D47   CD 3D 0A               CALL   printStr   
0D4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0D52   CD 3D 0A               CALL   printStr   
0D55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D64   21 02 00               LD   HL,2   
0D67   CD 8B 09               CALL   prtdec   
0D6A   CD 3D 0A               CALL   printStr   
0D6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D7A   E1                     POP   hl   
0D7B   E5                     PUSH   hl   
0D7C   CD 8B 09               CALL   prtdec   
0D7F   E1                     POP   hl   
0D80   CD 3D 0A               CALL   printStr   
0D83   20 28 23 00            .CSTR   " (#"   
0D87   CD D3 09               CALL   prthex   
0D8A   CD 3D 0A               CALL   printStr   
0D8D   29 0D 0A 00            .CSTR   ")\r\n"   
0D91   76                     HALT      
0D92   00                     .CSTR      
0D93                EXPECTM_0_2445S43:      
0D93   E1                     POP   HL   
0D94                          ;*Macro unroll:  test "1", 1
0D94   31 80 40               LD   SP,STACK   
0D97   CD 44 0A               CALL   init   
0D9A   CD 42 3F               CALL   execStr   
0D9D   31 00                  .CSTR   "1"   
0D9F                          ;*Macro unroll:  expect "1",1
0D9F   E1                     POP   HL   
0DA0   E5                     PUSH   HL   
0DA1   11 01 00               LD   DE,1   
0DA4   B7                     OR   A   
0DA5   ED 52                  SBC   HL,DE   
0DA7   7D                     LD   A,L   
0DA8   B4                     OR   H   
0DA9   28 4C                  JR   Z,expectM_0_2446S43   
0DAB   CD 3D 0A               CALL   printStr   
0DAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0DB6   CD 3D 0A               CALL   printStr   
0DB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DC8   21 01 00               LD   HL,1   
0DCB   CD 8B 09               CALL   prtdec   
0DCE   CD 3D 0A               CALL   printStr   
0DD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DDE   E1                     POP   hl   
0DDF   E5                     PUSH   hl   
0DE0   CD 8B 09               CALL   prtdec   
0DE3   E1                     POP   hl   
0DE4   CD 3D 0A               CALL   printStr   
0DE7   20 28 23 00            .CSTR   " (#"   
0DEB   CD D3 09               CALL   prthex   
0DEE   CD 3D 0A               CALL   printStr   
0DF1   29 0D 0A 00            .CSTR   ")\r\n"   
0DF5   76                     HALT      
0DF6   00                     .CSTR      
0DF7                EXPECTM_0_2446S43:      
0DF7   E1                     POP   HL   
0DF8                          ;*Macro unroll:  test "0", 0
0DF8   31 80 40               LD   SP,STACK   
0DFB   CD 44 0A               CALL   init   
0DFE   CD 42 3F               CALL   execStr   
0E01   30 00                  .CSTR   "0"   
0E03                          ;*Macro unroll:  expect "0",0
0E03   E1                     POP   HL   
0E04   E5                     PUSH   HL   
0E05   11 00 00               LD   DE,0   
0E08   B7                     OR   A   
0E09   ED 52                  SBC   HL,DE   
0E0B   7D                     LD   A,L   
0E0C   B4                     OR   H   
0E0D   28 4C                  JR   Z,expectM_0_2447S43   
0E0F   CD 3D 0A               CALL   printStr   
0E12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0E1A   CD 3D 0A               CALL   printStr   
0E1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E2C   21 00 00               LD   HL,0   
0E2F   CD 8B 09               CALL   prtdec   
0E32   CD 3D 0A               CALL   printStr   
0E35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E42   E1                     POP   hl   
0E43   E5                     PUSH   hl   
0E44   CD 8B 09               CALL   prtdec   
0E47   E1                     POP   hl   
0E48   CD 3D 0A               CALL   printStr   
0E4B   20 28 23 00            .CSTR   " (#"   
0E4F   CD D3 09               CALL   prthex   
0E52   CD 3D 0A               CALL   printStr   
0E55   29 0D 0A 00            .CSTR   ")\r\n"   
0E59   76                     HALT      
0E5A   00                     .CSTR      
0E5B                EXPECTM_0_2447S43:      
0E5B   E1                     POP   HL   
0E5C                          ;*Macro unroll:  test "10", 10
0E5C   31 80 40               LD   SP,STACK   
0E5F   CD 44 0A               CALL   init   
0E62   CD 42 3F               CALL   execStr   
0E65   31 30 00               .CSTR   "10"   
0E68                          ;*Macro unroll:  expect "10",10
0E68   E1                     POP   HL   
0E69   E5                     PUSH   HL   
0E6A   11 0A 00               LD   DE,10   
0E6D   B7                     OR   A   
0E6E   ED 52                  SBC   HL,DE   
0E70   7D                     LD   A,L   
0E71   B4                     OR   H   
0E72   28 4D                  JR   Z,expectM_0_2448S43   
0E74   CD 3D 0A               CALL   printStr   
0E77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0E80   CD 3D 0A               CALL   printStr   
0E83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E92   21 0A 00               LD   HL,10   
0E95   CD 8B 09               CALL   prtdec   
0E98   CD 3D 0A               CALL   printStr   
0E9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EA8   E1                     POP   hl   
0EA9   E5                     PUSH   hl   
0EAA   CD 8B 09               CALL   prtdec   
0EAD   E1                     POP   hl   
0EAE   CD 3D 0A               CALL   printStr   
0EB1   20 28 23 00            .CSTR   " (#"   
0EB5   CD D3 09               CALL   prthex   
0EB8   CD 3D 0A               CALL   printStr   
0EBB   29 0D 0A 00            .CSTR   ")\r\n"   
0EBF   76                     HALT      
0EC0   00                     .CSTR      
0EC1                EXPECTM_0_2448S43:      
0EC1   E1                     POP   HL   
0EC2                          ;*Macro unroll:  test "123", 123
0EC2   31 80 40               LD   SP,STACK   
0EC5   CD 44 0A               CALL   init   
0EC8   CD 42 3F               CALL   execStr   
0ECB   31 32 33 00            .CSTR   "123"   
0ECF                          ;*Macro unroll:  expect "123",123
0ECF   E1                     POP   HL   
0ED0   E5                     PUSH   HL   
0ED1   11 7B 00               LD   DE,123   
0ED4   B7                     OR   A   
0ED5   ED 52                  SBC   HL,DE   
0ED7   7D                     LD   A,L   
0ED8   B4                     OR   H   
0ED9   28 4E                  JR   Z,expectM_0_2449S43   
0EDB   CD 3D 0A               CALL   printStr   
0EDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0EE8   CD 3D 0A               CALL   printStr   
0EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EFA   21 7B 00               LD   HL,123   
0EFD   CD 8B 09               CALL   prtdec   
0F00   CD 3D 0A               CALL   printStr   
0F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F10   E1                     POP   hl   
0F11   E5                     PUSH   hl   
0F12   CD 8B 09               CALL   prtdec   
0F15   E1                     POP   hl   
0F16   CD 3D 0A               CALL   printStr   
0F19   20 28 23 00            .CSTR   " (#"   
0F1D   CD D3 09               CALL   prthex   
0F20   CD 3D 0A               CALL   printStr   
0F23   29 0D 0A 00            .CSTR   ")\r\n"   
0F27   76                     HALT      
0F28   00                     .CSTR      
0F29                EXPECTM_0_2449S43:      
0F29   E1                     POP   HL   
0F2A                          ;*Macro unroll:  test "-1",-1
0F2A   31 80 40               LD   SP,STACK   
0F2D   CD 44 0A               CALL   init   
0F30   CD 42 3F               CALL   execStr   
0F33   2D 31 00               .CSTR   "-1"   
0F36                          ;*Macro unroll:  expect "-1",-1
0F36   E1                     POP   HL   
0F37   E5                     PUSH   HL   
0F38   11 FF FF               LD   DE,-1   
0F3B   B7                     OR   A   
0F3C   ED 52                  SBC   HL,DE   
0F3E   7D                     LD   A,L   
0F3F   B4                     OR   H   
0F40   28 4D                  JR   Z,expectM_0_2450S43   
0F42   CD 3D 0A               CALL   printStr   
0F45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0F4E   CD 3D 0A               CALL   printStr   
0F51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F60   21 FF FF               LD   HL,-1   
0F63   CD 8B 09               CALL   prtdec   
0F66   CD 3D 0A               CALL   printStr   
0F69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F76   E1                     POP   hl   
0F77   E5                     PUSH   hl   
0F78   CD 8B 09               CALL   prtdec   
0F7B   E1                     POP   hl   
0F7C   CD 3D 0A               CALL   printStr   
0F7F   20 28 23 00            .CSTR   " (#"   
0F83   CD D3 09               CALL   prthex   
0F86   CD 3D 0A               CALL   printStr   
0F89   29 0D 0A 00            .CSTR   ")\r\n"   
0F8D   76                     HALT      
0F8E   00                     .CSTR      
0F8F                EXPECTM_0_2450S43:      
0F8F   E1                     POP   HL   
0F90                          ;*Macro unroll:  test "''", 0
0F90   31 80 40               LD   SP,STACK   
0F93   CD 44 0A               CALL   init   
0F96   CD 42 3F               CALL   execStr   
0F99   27 27 00               .CSTR   "''"   
0F9C                          ;*Macro unroll:  expect "''",0
0F9C   E1                     POP   HL   
0F9D   E5                     PUSH   HL   
0F9E   11 00 00               LD   DE,0   
0FA1   B7                     OR   A   
0FA2   ED 52                  SBC   HL,DE   
0FA4   7D                     LD   A,L   
0FA5   B4                     OR   H   
0FA6   28 4D                  JR   Z,expectM_0_2451S43   
0FA8   CD 3D 0A               CALL   printStr   
0FAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0FB4   CD 3D 0A               CALL   printStr   
0FB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FC6   21 00 00               LD   HL,0   
0FC9   CD 8B 09               CALL   prtdec   
0FCC   CD 3D 0A               CALL   printStr   
0FCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FDC   E1                     POP   hl   
0FDD   E5                     PUSH   hl   
0FDE   CD 8B 09               CALL   prtdec   
0FE1   E1                     POP   hl   
0FE2   CD 3D 0A               CALL   printStr   
0FE5   20 28 23 00            .CSTR   " (#"   
0FE9   CD D3 09               CALL   prthex   
0FEC   CD 3D 0A               CALL   printStr   
0FEF   29 0D 0A 00            .CSTR   ")\r\n"   
0FF3   76                     HALT      
0FF4   00                     .CSTR      
0FF5                EXPECTM_0_2451S43:      
0FF5   E1                     POP   HL   
0FF6                          ;*Macro unroll:  test "'a'", $61
0FF6   31 80 40               LD   SP,STACK   
0FF9   CD 44 0A               CALL   init   
0FFC   CD 42 3F               CALL   execStr   
0FFF   27 61 27 00            .CSTR   "'a'"   
1003                          ;*Macro unroll:  expect "'a'",$61
1003   E1                     POP   HL   
1004   E5                     PUSH   HL   
1005   11 61 00               LD   DE,$61   
1008   B7                     OR   A   
1009   ED 52                  SBC   HL,DE   
100B   7D                     LD   A,L   
100C   B4                     OR   H   
100D   28 4E                  JR   Z,expectM_0_2452S43   
100F   CD 3D 0A               CALL   printStr   
1012   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
101C   CD 3D 0A               CALL   printStr   
101F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
102E   21 61 00               LD   HL,$61   
1031   CD 8B 09               CALL   prtdec   
1034   CD 3D 0A               CALL   printStr   
1037   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1044   E1                     POP   hl   
1045   E5                     PUSH   hl   
1046   CD 8B 09               CALL   prtdec   
1049   E1                     POP   hl   
104A   CD 3D 0A               CALL   printStr   
104D   20 28 23 00            .CSTR   " (#"   
1051   CD D3 09               CALL   prthex   
1054   CD 3D 0A               CALL   printStr   
1057   29 0D 0A 00            .CSTR   ")\r\n"   
105B   76                     HALT      
105C   00                     .CSTR      
105D                EXPECTM_0_2452S43:      
105D   E1                     POP   HL   
105E                          ;*Macro unroll:  test "'\\''", $27
105E   31 80 40               LD   SP,STACK   
1061   CD 44 0A               CALL   init   
1064   CD 42 3F               CALL   execStr   
1067   27 5C 27 27 00         .CSTR   "'\\''"   
106C                          ;*Macro unroll:  expect "'\\''",$27
106C   E1                     POP   HL   
106D   E5                     PUSH   HL   
106E   11 27 00               LD   DE,$27   
1071   B7                     OR   A   
1072   ED 52                  SBC   HL,DE   
1074   7D                     LD   A,L   
1075   B4                     OR   H   
1076   28 4F                  JR   Z,expectM_0_2453S43   
1078   CD 3D 0A               CALL   printStr   
107B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1086   CD 3D 0A               CALL   printStr   
1089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1098   21 27 00               LD   HL,$27   
109B   CD 8B 09               CALL   prtdec   
109E   CD 3D 0A               CALL   printStr   
10A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10AE   E1                     POP   hl   
10AF   E5                     PUSH   hl   
10B0   CD 8B 09               CALL   prtdec   
10B3   E1                     POP   hl   
10B4   CD 3D 0A               CALL   printStr   
10B7   20 28 23 00            .CSTR   " (#"   
10BB   CD D3 09               CALL   prthex   
10BE   CD 3D 0A               CALL   printStr   
10C1   29 0D 0A 00            .CSTR   ")\r\n"   
10C5   76                     HALT      
10C6   00                     .CSTR      
10C7                EXPECTM_0_2453S43:      
10C7   E1                     POP   HL   
10C8                          ;*Macro unroll:  test "#10", $10
10C8   31 80 40               LD   SP,STACK   
10CB   CD 44 0A               CALL   init   
10CE   CD 42 3F               CALL   execStr   
10D1   23 31 30 00            .CSTR   "#10"   
10D5                          ;*Macro unroll:  expect "#10",$10
10D5   E1                     POP   HL   
10D6   E5                     PUSH   HL   
10D7   11 10 00               LD   DE,$10   
10DA   B7                     OR   A   
10DB   ED 52                  SBC   HL,DE   
10DD   7D                     LD   A,L   
10DE   B4                     OR   H   
10DF   28 4E                  JR   Z,expectM_0_2454S43   
10E1   CD 3D 0A               CALL   printStr   
10E4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
10EE   CD 3D 0A               CALL   printStr   
10F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1100   21 10 00               LD   HL,$10   
1103   CD 8B 09               CALL   prtdec   
1106   CD 3D 0A               CALL   printStr   
1109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1116   E1                     POP   hl   
1117   E5                     PUSH   hl   
1118   CD 8B 09               CALL   prtdec   
111B   E1                     POP   hl   
111C   CD 3D 0A               CALL   printStr   
111F   20 28 23 00            .CSTR   " (#"   
1123   CD D3 09               CALL   prthex   
1126   CD 3D 0A               CALL   printStr   
1129   29 0D 0A 00            .CSTR   ")\r\n"   
112D   76                     HALT      
112E   00                     .CSTR      
112F                EXPECTM_0_2454S43:      
112F   E1                     POP   HL   
1130                          ;*Macro unroll:  test "#FF", $FF
1130   31 80 40               LD   SP,STACK   
1133   CD 44 0A               CALL   init   
1136   CD 42 3F               CALL   execStr   
1139   23 46 46 00            .CSTR   "#FF"   
113D                          ;*Macro unroll:  expect "#FF",$FF
113D   E1                     POP   HL   
113E   E5                     PUSH   HL   
113F   11 FF 00               LD   DE,$FF   
1142   B7                     OR   A   
1143   ED 52                  SBC   HL,DE   
1145   7D                     LD   A,L   
1146   B4                     OR   H   
1147   28 4E                  JR   Z,expectM_0_2455S43   
1149   CD 3D 0A               CALL   printStr   
114C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1156   CD 3D 0A               CALL   printStr   
1159   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1168   21 FF 00               LD   HL,$FF   
116B   CD 8B 09               CALL   prtdec   
116E   CD 3D 0A               CALL   printStr   
1171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
117E   E1                     POP   hl   
117F   E5                     PUSH   hl   
1180   CD 8B 09               CALL   prtdec   
1183   E1                     POP   hl   
1184   CD 3D 0A               CALL   printStr   
1187   20 28 23 00            .CSTR   " (#"   
118B   CD D3 09               CALL   prthex   
118E   CD 3D 0A               CALL   printStr   
1191   29 0D 0A 00            .CSTR   ")\r\n"   
1195   76                     HALT      
1196   00                     .CSTR      
1197                EXPECTM_0_2455S43:      
1197   E1                     POP   HL   
1198                          ;*Macro unroll:  test "-1 2 +",1
1198   31 80 40               LD   SP,STACK   
119B   CD 44 0A               CALL   init   
119E   CD 42 3F               CALL   execStr   
11A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
11A8                          ;*Macro unroll:  expect "-1 2 +",1
11A8   E1                     POP   HL   
11A9   E5                     PUSH   HL   
11AA   11 01 00               LD   DE,1   
11AD   B7                     OR   A   
11AE   ED 52                  SBC   HL,DE   
11B0   7D                     LD   A,L   
11B1   B4                     OR   H   
11B2   28 51                  JR   Z,expectM_0_2456S43   
11B4   CD 3D 0A               CALL   printStr   
11B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
11C4   CD 3D 0A               CALL   printStr   
11C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D6   21 01 00               LD   HL,1   
11D9   CD 8B 09               CALL   prtdec   
11DC   CD 3D 0A               CALL   printStr   
11DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11EC   E1                     POP   hl   
11ED   E5                     PUSH   hl   
11EE   CD 8B 09               CALL   prtdec   
11F1   E1                     POP   hl   
11F2   CD 3D 0A               CALL   printStr   
11F5   20 28 23 00            .CSTR   " (#"   
11F9   CD D3 09               CALL   prthex   
11FC   CD 3D 0A               CALL   printStr   
11FF   29 0D 0A 00            .CSTR   ")\r\n"   
1203   76                     HALT      
1204   00                     .CSTR      
1205                EXPECTM_0_2456S43:      
1205   E1                     POP   HL   
1206                          ;*Macro unroll:  test "-1 1 +",0
1206   31 80 40               LD   SP,STACK   
1209   CD 44 0A               CALL   init   
120C   CD 42 3F               CALL   execStr   
120F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1216                          ;*Macro unroll:  expect "-1 1 +",0
1216   E1                     POP   HL   
1217   E5                     PUSH   HL   
1218   11 00 00               LD   DE,0   
121B   B7                     OR   A   
121C   ED 52                  SBC   HL,DE   
121E   7D                     LD   A,L   
121F   B4                     OR   H   
1220   28 51                  JR   Z,expectM_0_2457S43   
1222   CD 3D 0A               CALL   printStr   
1225   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1232   CD 3D 0A               CALL   printStr   
1235   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1244   21 00 00               LD   HL,0   
1247   CD 8B 09               CALL   prtdec   
124A   CD 3D 0A               CALL   printStr   
124D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125A   E1                     POP   hl   
125B   E5                     PUSH   hl   
125C   CD 8B 09               CALL   prtdec   
125F   E1                     POP   hl   
1260   CD 3D 0A               CALL   printStr   
1263   20 28 23 00            .CSTR   " (#"   
1267   CD D3 09               CALL   prthex   
126A   CD 3D 0A               CALL   printStr   
126D   29 0D 0A 00            .CSTR   ")\r\n"   
1271   76                     HALT      
1272   00                     .CSTR      
1273                EXPECTM_0_2457S43:      
1273   E1                     POP   HL   
1274                          ;*Macro unroll:  test "1 2 +", 3
1274   31 80 40               LD   SP,STACK   
1277   CD 44 0A               CALL   init   
127A   CD 42 3F               CALL   execStr   
127D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1283                          ;*Macro unroll:  expect "1 2 +",3
1283   E1                     POP   HL   
1284   E5                     PUSH   HL   
1285   11 03 00               LD   DE,3   
1288   B7                     OR   A   
1289   ED 52                  SBC   HL,DE   
128B   7D                     LD   A,L   
128C   B4                     OR   H   
128D   28 50                  JR   Z,expectM_0_2458S43   
128F   CD 3D 0A               CALL   printStr   
1292   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
129E   CD 3D 0A               CALL   printStr   
12A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B0   21 03 00               LD   HL,3   
12B3   CD 8B 09               CALL   prtdec   
12B6   CD 3D 0A               CALL   printStr   
12B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C6   E1                     POP   hl   
12C7   E5                     PUSH   hl   
12C8   CD 8B 09               CALL   prtdec   
12CB   E1                     POP   hl   
12CC   CD 3D 0A               CALL   printStr   
12CF   20 28 23 00            .CSTR   " (#"   
12D3   CD D3 09               CALL   prthex   
12D6   CD 3D 0A               CALL   printStr   
12D9   29 0D 0A 00            .CSTR   ")\r\n"   
12DD   76                     HALT      
12DE   00                     .CSTR      
12DF                EXPECTM_0_2458S43:      
12DF   E1                     POP   HL   
12E0                          ;*Macro unroll:  test "4 1 2 +", 3
12E0   31 80 40               LD   SP,STACK   
12E3   CD 44 0A               CALL   init   
12E6   CD 42 3F               CALL   execStr   
12E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
12F1                          ;*Macro unroll:  expect "4 1 2 +",3
12F1   E1                     POP   HL   
12F2   E5                     PUSH   HL   
12F3   11 03 00               LD   DE,3   
12F6   B7                     OR   A   
12F7   ED 52                  SBC   HL,DE   
12F9   7D                     LD   A,L   
12FA   B4                     OR   H   
12FB   28 52                  JR   Z,expectM_0_2459S43   
12FD   CD 3D 0A               CALL   printStr   
1300   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
130E   CD 3D 0A               CALL   printStr   
1311   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1320   21 03 00               LD   HL,3   
1323   CD 8B 09               CALL   prtdec   
1326   CD 3D 0A               CALL   printStr   
1329   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1336   E1                     POP   hl   
1337   E5                     PUSH   hl   
1338   CD 8B 09               CALL   prtdec   
133B   E1                     POP   hl   
133C   CD 3D 0A               CALL   printStr   
133F   20 28 23 00            .CSTR   " (#"   
1343   CD D3 09               CALL   prthex   
1346   CD 3D 0A               CALL   printStr   
1349   29 0D 0A 00            .CSTR   ")\r\n"   
134D   76                     HALT      
134E   00                     .CSTR      
134F                EXPECTM_0_2459S43:      
134F   E1                     POP   HL   
1350                          ;*Macro unroll:  test "123 456 +", 123+456
1350   31 80 40               LD   SP,STACK   
1353   CD 44 0A               CALL   init   
1356   CD 42 3F               CALL   execStr   
1359   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1363                          ;*Macro unroll:  expect "123 456 +",123+456
1363   E1                     POP   HL   
1364   E5                     PUSH   HL   
1365   11 43 02               LD   DE,123+456   
1368   B7                     OR   A   
1369   ED 52                  SBC   HL,DE   
136B   7D                     LD   A,L   
136C   B4                     OR   H   
136D   28 54                  JR   Z,expectM_0_2460S43   
136F   CD 3D 0A               CALL   printStr   
1372   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1382   CD 3D 0A               CALL   printStr   
1385   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1394   21 43 02               LD   HL,123+456   
1397   CD 8B 09               CALL   prtdec   
139A   CD 3D 0A               CALL   printStr   
139D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AA   E1                     POP   hl   
13AB   E5                     PUSH   hl   
13AC   CD 8B 09               CALL   prtdec   
13AF   E1                     POP   hl   
13B0   CD 3D 0A               CALL   printStr   
13B3   20 28 23 00            .CSTR   " (#"   
13B7   CD D3 09               CALL   prthex   
13BA   CD 3D 0A               CALL   printStr   
13BD   29 0D 0A 00            .CSTR   ")\r\n"   
13C1   76                     HALT      
13C2   00                     .CSTR      
13C3                EXPECTM_0_2460S43:      
13C3   E1                     POP   HL   
13C4                          ;*Macro unroll:  test "64 128 +", 64+128
13C4   31 80 40               LD   SP,STACK   
13C7   CD 44 0A               CALL   init   
13CA   CD 42 3F               CALL   execStr   
13CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
13D6                          ;*Macro unroll:  expect "64 128 +",64+128
13D6   E1                     POP   HL   
13D7   E5                     PUSH   HL   
13D8   11 C0 00               LD   DE,64+128   
13DB   B7                     OR   A   
13DC   ED 52                  SBC   HL,DE   
13DE   7D                     LD   A,L   
13DF   B4                     OR   H   
13E0   28 53                  JR   Z,expectM_0_2461S43   
13E2   CD 3D 0A               CALL   printStr   
13E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
13F4   CD 3D 0A               CALL   printStr   
13F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1406   21 C0 00               LD   HL,64+128   
1409   CD 8B 09               CALL   prtdec   
140C   CD 3D 0A               CALL   printStr   
140F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
141C   E1                     POP   hl   
141D   E5                     PUSH   hl   
141E   CD 8B 09               CALL   prtdec   
1421   E1                     POP   hl   
1422   CD 3D 0A               CALL   printStr   
1425   20 28 23 00            .CSTR   " (#"   
1429   CD D3 09               CALL   prthex   
142C   CD 3D 0A               CALL   printStr   
142F   29 0D 0A 00            .CSTR   ")\r\n"   
1433   76                     HALT      
1434   00                     .CSTR      
1435                EXPECTM_0_2461S43:      
1435   E1                     POP   HL   
1436                          ;*Macro unroll:  test "1 2 +", 3
1436   31 80 40               LD   SP,STACK   
1439   CD 44 0A               CALL   init   
143C   CD 42 3F               CALL   execStr   
143F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1445                          ;*Macro unroll:  expect "1 2 +",3
1445   E1                     POP   HL   
1446   E5                     PUSH   HL   
1447   11 03 00               LD   DE,3   
144A   B7                     OR   A   
144B   ED 52                  SBC   HL,DE   
144D   7D                     LD   A,L   
144E   B4                     OR   H   
144F   28 50                  JR   Z,expectM_0_2462S43   
1451   CD 3D 0A               CALL   printStr   
1454   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1460   CD 3D 0A               CALL   printStr   
1463   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1472   21 03 00               LD   HL,3   
1475   CD 8B 09               CALL   prtdec   
1478   CD 3D 0A               CALL   printStr   
147B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1488   E1                     POP   hl   
1489   E5                     PUSH   hl   
148A   CD 8B 09               CALL   prtdec   
148D   E1                     POP   hl   
148E   CD 3D 0A               CALL   printStr   
1491   20 28 23 00            .CSTR   " (#"   
1495   CD D3 09               CALL   prthex   
1498   CD 3D 0A               CALL   printStr   
149B   29 0D 0A 00            .CSTR   ")\r\n"   
149F   76                     HALT      
14A0   00                     .CSTR      
14A1                EXPECTM_0_2462S43:      
14A1   E1                     POP   HL   
14A2                          ;*Macro unroll:  test "1a= a++ a",2
14A2   31 80 40               LD   SP,STACK   
14A5   CD 44 0A               CALL   init   
14A8   CD 42 3F               CALL   execStr   
14AB   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
14B5                          ;*Macro unroll:  expect "1a= a++ a",2
14B5   E1                     POP   HL   
14B6   E5                     PUSH   HL   
14B7   11 02 00               LD   DE,2   
14BA   B7                     OR   A   
14BB   ED 52                  SBC   HL,DE   
14BD   7D                     LD   A,L   
14BE   B4                     OR   H   
14BF   28 54                  JR   Z,expectM_0_2463S43   
14C1   CD 3D 0A               CALL   printStr   
14C4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
14D4   CD 3D 0A               CALL   printStr   
14D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14E6   21 02 00               LD   HL,2   
14E9   CD 8B 09               CALL   prtdec   
14EC   CD 3D 0A               CALL   printStr   
14EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14FC   E1                     POP   hl   
14FD   E5                     PUSH   hl   
14FE   CD 8B 09               CALL   prtdec   
1501   E1                     POP   hl   
1502   CD 3D 0A               CALL   printStr   
1505   20 28 23 00            .CSTR   " (#"   
1509   CD D3 09               CALL   prthex   
150C   CD 3D 0A               CALL   printStr   
150F   29 0D 0A 00            .CSTR   ")\r\n"   
1513   76                     HALT      
1514   00                     .CSTR      
1515                EXPECTM_0_2463S43:      
1515   E1                     POP   HL   
1516                          ;*Macro unroll:  test "1a= 2 a+= a",3
1516   31 80 40               LD   SP,STACK   
1519   CD 44 0A               CALL   init   
151C   CD 42 3F               CALL   execStr   
151F   31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "1a= 2 a+= a"   
152B                          ;*Macro unroll:  expect "1a= 2 a+= a",3
152B   E1                     POP   HL   
152C   E5                     PUSH   HL   
152D   11 03 00               LD   DE,3   
1530   B7                     OR   A   
1531   ED 52                  SBC   HL,DE   
1533   7D                     LD   A,L   
1534   B4                     OR   H   
1535   28 56                  JR   Z,expectM_0_2464S43   
1537   CD 3D 0A               CALL   printStr   
153A   43 6F 64 65 3A 20 31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "Code: ","1a= 2 a+= a"   
154C   CD 3D 0A               CALL   printStr   
154F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155E   21 03 00               LD   HL,3   
1561   CD 8B 09               CALL   prtdec   
1564   CD 3D 0A               CALL   printStr   
1567   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1574   E1                     POP   hl   
1575   E5                     PUSH   hl   
1576   CD 8B 09               CALL   prtdec   
1579   E1                     POP   hl   
157A   CD 3D 0A               CALL   printStr   
157D   20 28 23 00            .CSTR   " (#"   
1581   CD D3 09               CALL   prthex   
1584   CD 3D 0A               CALL   printStr   
1587   29 0D 0A 00            .CSTR   ")\r\n"   
158B   76                     HALT      
158C   00                     .CSTR      
158D                EXPECTM_0_2464S43:      
158D   E1                     POP   HL   
158E                          ;*Macro unroll:  test "-1 -1 -",0
158E   31 80 40               LD   SP,STACK   
1591   CD 44 0A               CALL   init   
1594   CD 42 3F               CALL   execStr   
1597   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
159F                          ;*Macro unroll:  expect "-1 -1 -",0
159F   E1                     POP   HL   
15A0   E5                     PUSH   HL   
15A1   11 00 00               LD   DE,0   
15A4   B7                     OR   A   
15A5   ED 52                  SBC   HL,DE   
15A7   7D                     LD   A,L   
15A8   B4                     OR   H   
15A9   28 52                  JR   Z,expectM_0_2465S43   
15AB   CD 3D 0A               CALL   printStr   
15AE   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
15BC   CD 3D 0A               CALL   printStr   
15BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CE   21 00 00               LD   HL,0   
15D1   CD 8B 09               CALL   prtdec   
15D4   CD 3D 0A               CALL   printStr   
15D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E4   E1                     POP   hl   
15E5   E5                     PUSH   hl   
15E6   CD 8B 09               CALL   prtdec   
15E9   E1                     POP   hl   
15EA   CD 3D 0A               CALL   printStr   
15ED   20 28 23 00            .CSTR   " (#"   
15F1   CD D3 09               CALL   prthex   
15F4   CD 3D 0A               CALL   printStr   
15F7   29 0D 0A 00            .CSTR   ")\r\n"   
15FB   76                     HALT      
15FC   00                     .CSTR      
15FD                EXPECTM_0_2465S43:      
15FD   E1                     POP   HL   
15FE                          ;*Macro unroll:  test "5 3 -", 2
15FE   31 80 40               LD   SP,STACK   
1601   CD 44 0A               CALL   init   
1604   CD 42 3F               CALL   execStr   
1607   35 20 33 20 2D 00      .CSTR   "5 3 -"   
160D                          ;*Macro unroll:  expect "5 3 -",2
160D   E1                     POP   HL   
160E   E5                     PUSH   HL   
160F   11 02 00               LD   DE,2   
1612   B7                     OR   A   
1613   ED 52                  SBC   HL,DE   
1615   7D                     LD   A,L   
1616   B4                     OR   H   
1617   28 50                  JR   Z,expectM_0_2466S43   
1619   CD 3D 0A               CALL   printStr   
161C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1628   CD 3D 0A               CALL   printStr   
162B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
163A   21 02 00               LD   HL,2   
163D   CD 8B 09               CALL   prtdec   
1640   CD 3D 0A               CALL   printStr   
1643   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1650   E1                     POP   hl   
1651   E5                     PUSH   hl   
1652   CD 8B 09               CALL   prtdec   
1655   E1                     POP   hl   
1656   CD 3D 0A               CALL   printStr   
1659   20 28 23 00            .CSTR   " (#"   
165D   CD D3 09               CALL   prthex   
1660   CD 3D 0A               CALL   printStr   
1663   29 0D 0A 00            .CSTR   ")\r\n"   
1667   76                     HALT      
1668   00                     .CSTR      
1669                EXPECTM_0_2466S43:      
1669   E1                     POP   HL   
166A                          ;*Macro unroll:  test "2 1 -",1
166A   31 80 40               LD   SP,STACK   
166D   CD 44 0A               CALL   init   
1670   CD 42 3F               CALL   execStr   
1673   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1679                          ;*Macro unroll:  expect "2 1 -",1
1679   E1                     POP   HL   
167A   E5                     PUSH   HL   
167B   11 01 00               LD   DE,1   
167E   B7                     OR   A   
167F   ED 52                  SBC   HL,DE   
1681   7D                     LD   A,L   
1682   B4                     OR   H   
1683   28 50                  JR   Z,expectM_0_2467S43   
1685   CD 3D 0A               CALL   printStr   
1688   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1694   CD 3D 0A               CALL   printStr   
1697   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A6   21 01 00               LD   HL,1   
16A9   CD 8B 09               CALL   prtdec   
16AC   CD 3D 0A               CALL   printStr   
16AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16BC   E1                     POP   hl   
16BD   E5                     PUSH   hl   
16BE   CD 8B 09               CALL   prtdec   
16C1   E1                     POP   hl   
16C2   CD 3D 0A               CALL   printStr   
16C5   20 28 23 00            .CSTR   " (#"   
16C9   CD D3 09               CALL   prthex   
16CC   CD 3D 0A               CALL   printStr   
16CF   29 0D 0A 00            .CSTR   ")\r\n"   
16D3   76                     HALT      
16D4   00                     .CSTR      
16D5                EXPECTM_0_2467S43:      
16D5   E1                     POP   HL   
16D6                          ;*Macro unroll:  test "3a= a-- a",2
16D6   31 80 40               LD   SP,STACK   
16D9   CD 44 0A               CALL   init   
16DC   CD 42 3F               CALL   execStr   
16DF   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
16E9                          ;*Macro unroll:  expect "3a= a-- a",2
16E9   E1                     POP   HL   
16EA   E5                     PUSH   HL   
16EB   11 02 00               LD   DE,2   
16EE   B7                     OR   A   
16EF   ED 52                  SBC   HL,DE   
16F1   7D                     LD   A,L   
16F2   B4                     OR   H   
16F3   28 54                  JR   Z,expectM_0_2468S43   
16F5   CD 3D 0A               CALL   printStr   
16F8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1708   CD 3D 0A               CALL   printStr   
170B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
171A   21 02 00               LD   HL,2   
171D   CD 8B 09               CALL   prtdec   
1720   CD 3D 0A               CALL   printStr   
1723   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1730   E1                     POP   hl   
1731   E5                     PUSH   hl   
1732   CD 8B 09               CALL   prtdec   
1735   E1                     POP   hl   
1736   CD 3D 0A               CALL   printStr   
1739   20 28 23 00            .CSTR   " (#"   
173D   CD D3 09               CALL   prthex   
1740   CD 3D 0A               CALL   printStr   
1743   29 0D 0A 00            .CSTR   ")\r\n"   
1747   76                     HALT      
1748   00                     .CSTR      
1749                EXPECTM_0_2468S43:      
1749   E1                     POP   HL   
174A                          ;*Macro unroll:  test "4a= a 2 -= a",2
174A   31 80 40               LD   SP,STACK   
174D   CD 44 0A               CALL   init   
1750   CD 42 3F               CALL   execStr   
1753   34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4a= a 2 -= a"   
1760                          ;*Macro unroll:  expect "4a= a 2 -= a",2
1760   E1                     POP   HL   
1761   E5                     PUSH   HL   
1762   11 02 00               LD   DE,2   
1765   B7                     OR   A   
1766   ED 52                  SBC   HL,DE   
1768   7D                     LD   A,L   
1769   B4                     OR   H   
176A   28 57                  JR   Z,expectM_0_2469S43   
176C   CD 3D 0A               CALL   printStr   
176F   43 6F 64 65 3A 20 34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4a= a 2 -= a"   
1782   CD 3D 0A               CALL   printStr   
1785   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1794   21 02 00               LD   HL,2   
1797   CD 8B 09               CALL   prtdec   
179A   CD 3D 0A               CALL   printStr   
179D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17AA   E1                     POP   hl   
17AB   E5                     PUSH   hl   
17AC   CD 8B 09               CALL   prtdec   
17AF   E1                     POP   hl   
17B0   CD 3D 0A               CALL   printStr   
17B3   20 28 23 00            .CSTR   " (#"   
17B7   CD D3 09               CALL   prthex   
17BA   CD 3D 0A               CALL   printStr   
17BD   29 0D 0A 00            .CSTR   ")\r\n"   
17C1   76                     HALT      
17C2   00                     .CSTR      
17C3                EXPECTM_0_2469S43:      
17C3   E1                     POP   HL   
17C4                          ;*Macro unroll:  test "3 5 &", 1
17C4   31 80 40               LD   SP,STACK   
17C7   CD 44 0A               CALL   init   
17CA   CD 42 3F               CALL   execStr   
17CD   33 20 35 20 26 00      .CSTR   "3 5 &"   
17D3                          ;*Macro unroll:  expect "3 5 &",1
17D3   E1                     POP   HL   
17D4   E5                     PUSH   HL   
17D5   11 01 00               LD   DE,1   
17D8   B7                     OR   A   
17D9   ED 52                  SBC   HL,DE   
17DB   7D                     LD   A,L   
17DC   B4                     OR   H   
17DD   28 50                  JR   Z,expectM_0_2470S43   
17DF   CD 3D 0A               CALL   printStr   
17E2   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
17EE   CD 3D 0A               CALL   printStr   
17F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1800   21 01 00               LD   HL,1   
1803   CD 8B 09               CALL   prtdec   
1806   CD 3D 0A               CALL   printStr   
1809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1816   E1                     POP   hl   
1817   E5                     PUSH   hl   
1818   CD 8B 09               CALL   prtdec   
181B   E1                     POP   hl   
181C   CD 3D 0A               CALL   printStr   
181F   20 28 23 00            .CSTR   " (#"   
1823   CD D3 09               CALL   prthex   
1826   CD 3D 0A               CALL   printStr   
1829   29 0D 0A 00            .CSTR   ")\r\n"   
182D   76                     HALT      
182E   00                     .CSTR      
182F                EXPECTM_0_2470S43:      
182F   E1                     POP   HL   
1830                          ;*Macro unroll:  test "3a= 5 a &= a",1
1830   31 80 40               LD   SP,STACK   
1833   CD 44 0A               CALL   init   
1836   CD 42 3F               CALL   execStr   
1839   33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3a= 5 a &= a"   
1846                          ;*Macro unroll:  expect "3a= 5 a &= a",1
1846   E1                     POP   HL   
1847   E5                     PUSH   HL   
1848   11 01 00               LD   DE,1   
184B   B7                     OR   A   
184C   ED 52                  SBC   HL,DE   
184E   7D                     LD   A,L   
184F   B4                     OR   H   
1850   28 57                  JR   Z,expectM_0_2471S43   
1852   CD 3D 0A               CALL   printStr   
1855   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3a= 5 a &= a"   
1868   CD 3D 0A               CALL   printStr   
186B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187A   21 01 00               LD   HL,1   
187D   CD 8B 09               CALL   prtdec   
1880   CD 3D 0A               CALL   printStr   
1883   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1890   E1                     POP   hl   
1891   E5                     PUSH   hl   
1892   CD 8B 09               CALL   prtdec   
1895   E1                     POP   hl   
1896   CD 3D 0A               CALL   printStr   
1899   20 28 23 00            .CSTR   " (#"   
189D   CD D3 09               CALL   prthex   
18A0   CD 3D 0A               CALL   printStr   
18A3   29 0D 0A 00            .CSTR   ")\r\n"   
18A7   76                     HALT      
18A8   00                     .CSTR      
18A9                EXPECTM_0_2471S43:      
18A9   E1                     POP   HL   
18AA                          ;*Macro unroll:  test "3 5 |", 7
18AA   31 80 40               LD   SP,STACK   
18AD   CD 44 0A               CALL   init   
18B0   CD 42 3F               CALL   execStr   
18B3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
18B9                          ;*Macro unroll:  expect "3 5 |",7
18B9   E1                     POP   HL   
18BA   E5                     PUSH   HL   
18BB   11 07 00               LD   DE,7   
18BE   B7                     OR   A   
18BF   ED 52                  SBC   HL,DE   
18C1   7D                     LD   A,L   
18C2   B4                     OR   H   
18C3   28 50                  JR   Z,expectM_0_2472S43   
18C5   CD 3D 0A               CALL   printStr   
18C8   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
18D4   CD 3D 0A               CALL   printStr   
18D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E6   21 07 00               LD   HL,7   
18E9   CD 8B 09               CALL   prtdec   
18EC   CD 3D 0A               CALL   printStr   
18EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FC   E1                     POP   hl   
18FD   E5                     PUSH   hl   
18FE   CD 8B 09               CALL   prtdec   
1901   E1                     POP   hl   
1902   CD 3D 0A               CALL   printStr   
1905   20 28 23 00            .CSTR   " (#"   
1909   CD D3 09               CALL   prthex   
190C   CD 3D 0A               CALL   printStr   
190F   29 0D 0A 00            .CSTR   ")\r\n"   
1913   76                     HALT      
1914   00                     .CSTR      
1915                EXPECTM_0_2472S43:      
1915   E1                     POP   HL   
1916                          ;*Macro unroll:  test "3a= 5 a |= a",7
1916   31 80 40               LD   SP,STACK   
1919   CD 44 0A               CALL   init   
191C   CD 42 3F               CALL   execStr   
191F   33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3a= 5 a |= a"   
192C                          ;*Macro unroll:  expect "3a= 5 a |= a",7
192C   E1                     POP   HL   
192D   E5                     PUSH   HL   
192E   11 07 00               LD   DE,7   
1931   B7                     OR   A   
1932   ED 52                  SBC   HL,DE   
1934   7D                     LD   A,L   
1935   B4                     OR   H   
1936   28 57                  JR   Z,expectM_0_2473S43   
1938   CD 3D 0A               CALL   printStr   
193B   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3a= 5 a |= a"   
194E   CD 3D 0A               CALL   printStr   
1951   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1960   21 07 00               LD   HL,7   
1963   CD 8B 09               CALL   prtdec   
1966   CD 3D 0A               CALL   printStr   
1969   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1976   E1                     POP   hl   
1977   E5                     PUSH   hl   
1978   CD 8B 09               CALL   prtdec   
197B   E1                     POP   hl   
197C   CD 3D 0A               CALL   printStr   
197F   20 28 23 00            .CSTR   " (#"   
1983   CD D3 09               CALL   prthex   
1986   CD 3D 0A               CALL   printStr   
1989   29 0D 0A 00            .CSTR   ")\r\n"   
198D   76                     HALT      
198E   00                     .CSTR      
198F                EXPECTM_0_2473S43:      
198F   E1                     POP   HL   
1990                          ;*Macro unroll:  test "3 5/x", 6
1990   31 80 40               LD   SP,STACK   
1993   CD 44 0A               CALL   init   
1996   CD 42 3F               CALL   execStr   
1999   33 20 35 2F 78 00      .CSTR   "3 5/x"   
199F                          ;*Macro unroll:  expect "3 5/x",6
199F   E1                     POP   HL   
19A0   E5                     PUSH   HL   
19A1   11 06 00               LD   DE,6   
19A4   B7                     OR   A   
19A5   ED 52                  SBC   HL,DE   
19A7   7D                     LD   A,L   
19A8   B4                     OR   H   
19A9   28 50                  JR   Z,expectM_0_2474S43   
19AB   CD 3D 0A               CALL   printStr   
19AE   43 6F 64 65 3A 20 33 20 35 2F 78 00 .CSTR   "Code: ","3 5/x"   
19BA   CD 3D 0A               CALL   printStr   
19BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CC   21 06 00               LD   HL,6   
19CF   CD 8B 09               CALL   prtdec   
19D2   CD 3D 0A               CALL   printStr   
19D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E2   E1                     POP   hl   
19E3   E5                     PUSH   hl   
19E4   CD 8B 09               CALL   prtdec   
19E7   E1                     POP   hl   
19E8   CD 3D 0A               CALL   printStr   
19EB   20 28 23 00            .CSTR   " (#"   
19EF   CD D3 09               CALL   prthex   
19F2   CD 3D 0A               CALL   printStr   
19F5   29 0D 0A 00            .CSTR   ")\r\n"   
19F9   76                     HALT      
19FA   00                     .CSTR      
19FB                EXPECTM_0_2474S43:      
19FB   E1                     POP   HL   
19FC                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
19FC   31 80 40               LD   SP,STACK   
19FF   CD 44 0A               CALL   init   
1A02   CD 42 3F               CALL   execStr   
1A05   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1A14                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1A14   E1                     POP   HL   
1A15   E5                     PUSH   HL   
1A16   11 06 00               LD   DE,6   
1A19   B7                     OR   A   
1A1A   ED 52                  SBC   HL,DE   
1A1C   7D                     LD   A,L   
1A1D   B4                     OR   H   
1A1E   28 59                  JR   Z,expectM_0_2475S43   
1A20   CD 3D 0A               CALL   printStr   
1A23   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1A38   CD 3D 0A               CALL   printStr   
1A3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4A   21 06 00               LD   HL,6   
1A4D   CD 8B 09               CALL   prtdec   
1A50   CD 3D 0A               CALL   printStr   
1A53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A60   E1                     POP   hl   
1A61   E5                     PUSH   hl   
1A62   CD 8B 09               CALL   prtdec   
1A65   E1                     POP   hl   
1A66   CD 3D 0A               CALL   printStr   
1A69   20 28 23 00            .CSTR   " (#"   
1A6D   CD D3 09               CALL   prthex   
1A70   CD 3D 0A               CALL   printStr   
1A73   29 0D 0A 00            .CSTR   ")\r\n"   
1A77   76                     HALT      
1A78   00                     .CSTR      
1A79                EXPECTM_0_2475S43:      
1A79   E1                     POP   HL   
1A7A                          ;*Macro unroll:  test "2 3 *", 6
1A7A   31 80 40               LD   SP,STACK   
1A7D   CD 44 0A               CALL   init   
1A80   CD 42 3F               CALL   execStr   
1A83   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1A89                          ;*Macro unroll:  expect "2 3 *",6
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 06 00               LD   DE,6   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   28 50                  JR   Z,expectM_0_2476S43   
1A95   CD 3D 0A               CALL   printStr   
1A98   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1AA4   CD 3D 0A               CALL   printStr   
1AA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB6   21 06 00               LD   HL,6   
1AB9   CD 8B 09               CALL   prtdec   
1ABC   CD 3D 0A               CALL   printStr   
1ABF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ACC   E1                     POP   hl   
1ACD   E5                     PUSH   hl   
1ACE   CD 8B 09               CALL   prtdec   
1AD1   E1                     POP   hl   
1AD2   CD 3D 0A               CALL   printStr   
1AD5   20 28 23 00            .CSTR   " (#"   
1AD9   CD D3 09               CALL   prthex   
1ADC   CD 3D 0A               CALL   printStr   
1ADF   29 0D 0A 00            .CSTR   ")\r\n"   
1AE3   76                     HALT      
1AE4   00                     .CSTR      
1AE5                EXPECTM_0_2476S43:      
1AE5   E1                     POP   HL   
1AE6                          ;*Macro unroll:  test "3 x= 2 x *= x",6
1AE6   31 80 40               LD   SP,STACK   
1AE9   CD 44 0A               CALL   init   
1AEC   CD 42 3F               CALL   execStr   
1AEF   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
1AFD                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
1AFD   E1                     POP   HL   
1AFE   E5                     PUSH   HL   
1AFF   11 06 00               LD   DE,6   
1B02   B7                     OR   A   
1B03   ED 52                  SBC   HL,DE   
1B05   7D                     LD   A,L   
1B06   B4                     OR   H   
1B07   28 58                  JR   Z,expectM_0_2477S43   
1B09   CD 3D 0A               CALL   printStr   
1B0C   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1B20   CD 3D 0A               CALL   printStr   
1B23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B32   21 06 00               LD   HL,6   
1B35   CD 8B 09               CALL   prtdec   
1B38   CD 3D 0A               CALL   printStr   
1B3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B48   E1                     POP   hl   
1B49   E5                     PUSH   hl   
1B4A   CD 8B 09               CALL   prtdec   
1B4D   E1                     POP   hl   
1B4E   CD 3D 0A               CALL   printStr   
1B51   20 28 23 00            .CSTR   " (#"   
1B55   CD D3 09               CALL   prthex   
1B58   CD 3D 0A               CALL   printStr   
1B5B   29 0D 0A 00            .CSTR   ")\r\n"   
1B5F   76                     HALT      
1B60   00                     .CSTR      
1B61                EXPECTM_0_2477S43:      
1B61   E1                     POP   HL   
1B62                          ;*Macro unroll:  test "1 2 3 + *", 5
1B62   31 80 40               LD   SP,STACK   
1B65   CD 44 0A               CALL   init   
1B68   CD 42 3F               CALL   execStr   
1B6B   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1B75                          ;*Macro unroll:  expect "1 2 3 + *",5
1B75   E1                     POP   HL   
1B76   E5                     PUSH   HL   
1B77   11 05 00               LD   DE,5   
1B7A   B7                     OR   A   
1B7B   ED 52                  SBC   HL,DE   
1B7D   7D                     LD   A,L   
1B7E   B4                     OR   H   
1B7F   28 54                  JR   Z,expectM_0_2478S43   
1B81   CD 3D 0A               CALL   printStr   
1B84   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1B94   CD 3D 0A               CALL   printStr   
1B97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA6   21 05 00               LD   HL,5   
1BA9   CD 8B 09               CALL   prtdec   
1BAC   CD 3D 0A               CALL   printStr   
1BAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBC   E1                     POP   hl   
1BBD   E5                     PUSH   hl   
1BBE   CD 8B 09               CALL   prtdec   
1BC1   E1                     POP   hl   
1BC2   CD 3D 0A               CALL   printStr   
1BC5   20 28 23 00            .CSTR   " (#"   
1BC9   CD D3 09               CALL   prthex   
1BCC   CD 3D 0A               CALL   printStr   
1BCF   29 0D 0A 00            .CSTR   ")\r\n"   
1BD3   76                     HALT      
1BD4   00                     .CSTR      
1BD5                EXPECTM_0_2478S43:      
1BD5   E1                     POP   HL   
1BD6                          ;*Macro unroll:  test "7 3 /", 2
1BD6   31 80 40               LD   SP,STACK   
1BD9   CD 44 0A               CALL   init   
1BDC   CD 42 3F               CALL   execStr   
1BDF   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1BE5                          ;*Macro unroll:  expect "7 3 /",2
1BE5   E1                     POP   HL   
1BE6   E5                     PUSH   HL   
1BE7   11 02 00               LD   DE,2   
1BEA   B7                     OR   A   
1BEB   ED 52                  SBC   HL,DE   
1BED   7D                     LD   A,L   
1BEE   B4                     OR   H   
1BEF   28 50                  JR   Z,expectM_0_2479S43   
1BF1   CD 3D 0A               CALL   printStr   
1BF4   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C00   CD 3D 0A               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 02 00               LD   HL,2   
1C15   CD 8B 09               CALL   prtdec   
1C18   CD 3D 0A               CALL   printStr   
1C1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C28   E1                     POP   hl   
1C29   E5                     PUSH   hl   
1C2A   CD 8B 09               CALL   prtdec   
1C2D   E1                     POP   hl   
1C2E   CD 3D 0A               CALL   printStr   
1C31   20 28 23 00            .CSTR   " (#"   
1C35   CD D3 09               CALL   prthex   
1C38   CD 3D 0A               CALL   printStr   
1C3B   29 0D 0A 00            .CSTR   ")\r\n"   
1C3F   76                     HALT      
1C40   00                     .CSTR      
1C41                EXPECTM_0_2479S43:      
1C41   E1                     POP   HL   
1C42                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1C42   31 80 40               LD   SP,STACK   
1C45   CD 44 0A               CALL   init   
1C48   CD 42 3F               CALL   execStr   
1C4B   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1C59                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1C59   E1                     POP   HL   
1C5A   E5                     PUSH   HL   
1C5B   11 02 00               LD   DE,2   
1C5E   B7                     OR   A   
1C5F   ED 52                  SBC   HL,DE   
1C61   7D                     LD   A,L   
1C62   B4                     OR   H   
1C63   28 58                  JR   Z,expectM_0_2480S43   
1C65   CD 3D 0A               CALL   printStr   
1C68   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1C7C   CD 3D 0A               CALL   printStr   
1C7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C8E   21 02 00               LD   HL,2   
1C91   CD 8B 09               CALL   prtdec   
1C94   CD 3D 0A               CALL   printStr   
1C97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA4   E1                     POP   hl   
1CA5   E5                     PUSH   hl   
1CA6   CD 8B 09               CALL   prtdec   
1CA9   E1                     POP   hl   
1CAA   CD 3D 0A               CALL   printStr   
1CAD   20 28 23 00            .CSTR   " (#"   
1CB1   CD D3 09               CALL   prthex   
1CB4   CD 3D 0A               CALL   printStr   
1CB7   29 0D 0A 00            .CSTR   ")\r\n"   
1CBB   76                     HALT      
1CBC   00                     .CSTR      
1CBD                EXPECTM_0_2480S43:      
1CBD   E1                     POP   HL   
1CBE                          ;*Macro unroll:  test "7 3 / _", 1
1CBE   31 80 40               LD   SP,STACK   
1CC1   CD 44 0A               CALL   init   
1CC4   CD 42 3F               CALL   execStr   
1CC7   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1CCF                          ;*Macro unroll:  expect "7 3 / _",1
1CCF   E1                     POP   HL   
1CD0   E5                     PUSH   HL   
1CD1   11 01 00               LD   DE,1   
1CD4   B7                     OR   A   
1CD5   ED 52                  SBC   HL,DE   
1CD7   7D                     LD   A,L   
1CD8   B4                     OR   H   
1CD9   28 52                  JR   Z,expectM_0_2481S43   
1CDB   CD 3D 0A               CALL   printStr   
1CDE   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1CEC   CD 3D 0A               CALL   printStr   
1CEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CFE   21 01 00               LD   HL,1   
1D01   CD 8B 09               CALL   prtdec   
1D04   CD 3D 0A               CALL   printStr   
1D07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D14   E1                     POP   hl   
1D15   E5                     PUSH   hl   
1D16   CD 8B 09               CALL   prtdec   
1D19   E1                     POP   hl   
1D1A   CD 3D 0A               CALL   printStr   
1D1D   20 28 23 00            .CSTR   " (#"   
1D21   CD D3 09               CALL   prthex   
1D24   CD 3D 0A               CALL   printStr   
1D27   29 0D 0A 00            .CSTR   ")\r\n"   
1D2B   76                     HALT      
1D2C   00                     .CSTR      
1D2D                EXPECTM_0_2481S43:      
1D2D   E1                     POP   HL   
1D2E                          ;*Macro unroll:  test "7 3 /", 2
1D2E   31 80 40               LD   SP,STACK   
1D31   CD 44 0A               CALL   init   
1D34   CD 42 3F               CALL   execStr   
1D37   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D3D                          ;*Macro unroll:  expect "7 3 /",2
1D3D   E1                     POP   HL   
1D3E   E5                     PUSH   HL   
1D3F   11 02 00               LD   DE,2   
1D42   B7                     OR   A   
1D43   ED 52                  SBC   HL,DE   
1D45   7D                     LD   A,L   
1D46   B4                     OR   H   
1D47   28 50                  JR   Z,expectM_0_2482S43   
1D49   CD 3D 0A               CALL   printStr   
1D4C   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D58   CD 3D 0A               CALL   printStr   
1D5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D6A   21 02 00               LD   HL,2   
1D6D   CD 8B 09               CALL   prtdec   
1D70   CD 3D 0A               CALL   printStr   
1D73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D80   E1                     POP   hl   
1D81   E5                     PUSH   hl   
1D82   CD 8B 09               CALL   prtdec   
1D85   E1                     POP   hl   
1D86   CD 3D 0A               CALL   printStr   
1D89   20 28 23 00            .CSTR   " (#"   
1D8D   CD D3 09               CALL   prthex   
1D90   CD 3D 0A               CALL   printStr   
1D93   29 0D 0A 00            .CSTR   ")\r\n"   
1D97   76                     HALT      
1D98   00                     .CSTR      
1D99                EXPECTM_0_2482S43:      
1D99   E1                     POP   HL   
1D9A                          ;*Macro unroll:  test "2 3 ==", FALSE
1D9A   31 80 40               LD   SP,STACK   
1D9D   CD 44 0A               CALL   init   
1DA0   CD 42 3F               CALL   execStr   
1DA3   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1DAA                          ;*Macro unroll:  expect "2 3 ==",FALSE
1DAA   E1                     POP   HL   
1DAB   E5                     PUSH   HL   
1DAC   11 00 00               LD   DE,FALSE   
1DAF   B7                     OR   A   
1DB0   ED 52                  SBC   HL,DE   
1DB2   7D                     LD   A,L   
1DB3   B4                     OR   H   
1DB4   28 51                  JR   Z,expectM_0_2483S43   
1DB6   CD 3D 0A               CALL   printStr   
1DB9   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1DC6   CD 3D 0A               CALL   printStr   
1DC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD8   21 00 00               LD   HL,FALSE   
1DDB   CD 8B 09               CALL   prtdec   
1DDE   CD 3D 0A               CALL   printStr   
1DE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DEE   E1                     POP   hl   
1DEF   E5                     PUSH   hl   
1DF0   CD 8B 09               CALL   prtdec   
1DF3   E1                     POP   hl   
1DF4   CD 3D 0A               CALL   printStr   
1DF7   20 28 23 00            .CSTR   " (#"   
1DFB   CD D3 09               CALL   prthex   
1DFE   CD 3D 0A               CALL   printStr   
1E01   29 0D 0A 00            .CSTR   ")\r\n"   
1E05   76                     HALT      
1E06   00                     .CSTR      
1E07                EXPECTM_0_2483S43:      
1E07   E1                     POP   HL   
1E08                          ;*Macro unroll:  test "3 3 ==", TRUE
1E08   31 80 40               LD   SP,STACK   
1E0B   CD 44 0A               CALL   init   
1E0E   CD 42 3F               CALL   execStr   
1E11   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1E18                          ;*Macro unroll:  expect "3 3 ==",TRUE
1E18   E1                     POP   HL   
1E19   E5                     PUSH   HL   
1E1A   11 FF FF               LD   DE,TRUE   
1E1D   B7                     OR   A   
1E1E   ED 52                  SBC   HL,DE   
1E20   7D                     LD   A,L   
1E21   B4                     OR   H   
1E22   28 51                  JR   Z,expectM_0_2484S43   
1E24   CD 3D 0A               CALL   printStr   
1E27   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1E34   CD 3D 0A               CALL   printStr   
1E37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E46   21 FF FF               LD   HL,TRUE   
1E49   CD 8B 09               CALL   prtdec   
1E4C   CD 3D 0A               CALL   printStr   
1E4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E5C   E1                     POP   hl   
1E5D   E5                     PUSH   hl   
1E5E   CD 8B 09               CALL   prtdec   
1E61   E1                     POP   hl   
1E62   CD 3D 0A               CALL   printStr   
1E65   20 28 23 00            .CSTR   " (#"   
1E69   CD D3 09               CALL   prthex   
1E6C   CD 3D 0A               CALL   printStr   
1E6F   29 0D 0A 00            .CSTR   ")\r\n"   
1E73   76                     HALT      
1E74   00                     .CSTR      
1E75                EXPECTM_0_2484S43:      
1E75   E1                     POP   HL   
1E76                          ;*Macro unroll:  test "1 2 <", TRUE
1E76   31 80 40               LD   SP,STACK   
1E79   CD 44 0A               CALL   init   
1E7C   CD 42 3F               CALL   execStr   
1E7F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1E85                          ;*Macro unroll:  expect "1 2 <",TRUE
1E85   E1                     POP   HL   
1E86   E5                     PUSH   HL   
1E87   11 FF FF               LD   DE,TRUE   
1E8A   B7                     OR   A   
1E8B   ED 52                  SBC   HL,DE   
1E8D   7D                     LD   A,L   
1E8E   B4                     OR   H   
1E8F   28 50                  JR   Z,expectM_0_2485S43   
1E91   CD 3D 0A               CALL   printStr   
1E94   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1EA0   CD 3D 0A               CALL   printStr   
1EA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB2   21 FF FF               LD   HL,TRUE   
1EB5   CD 8B 09               CALL   prtdec   
1EB8   CD 3D 0A               CALL   printStr   
1EBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC8   E1                     POP   hl   
1EC9   E5                     PUSH   hl   
1ECA   CD 8B 09               CALL   prtdec   
1ECD   E1                     POP   hl   
1ECE   CD 3D 0A               CALL   printStr   
1ED1   20 28 23 00            .CSTR   " (#"   
1ED5   CD D3 09               CALL   prthex   
1ED8   CD 3D 0A               CALL   printStr   
1EDB   29 0D 0A 00            .CSTR   ")\r\n"   
1EDF   76                     HALT      
1EE0   00                     .CSTR      
1EE1                EXPECTM_0_2485S43:      
1EE1   E1                     POP   HL   
1EE2                          ;*Macro unroll:  test "2 1 <", FALSE
1EE2   31 80 40               LD   SP,STACK   
1EE5   CD 44 0A               CALL   init   
1EE8   CD 42 3F               CALL   execStr   
1EEB   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1EF1                          ;*Macro unroll:  expect "2 1 <",FALSE
1EF1   E1                     POP   HL   
1EF2   E5                     PUSH   HL   
1EF3   11 00 00               LD   DE,FALSE   
1EF6   B7                     OR   A   
1EF7   ED 52                  SBC   HL,DE   
1EF9   7D                     LD   A,L   
1EFA   B4                     OR   H   
1EFB   28 50                  JR   Z,expectM_0_2486S43   
1EFD   CD 3D 0A               CALL   printStr   
1F00   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1F0C   CD 3D 0A               CALL   printStr   
1F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1E   21 00 00               LD   HL,FALSE   
1F21   CD 8B 09               CALL   prtdec   
1F24   CD 3D 0A               CALL   printStr   
1F27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F34   E1                     POP   hl   
1F35   E5                     PUSH   hl   
1F36   CD 8B 09               CALL   prtdec   
1F39   E1                     POP   hl   
1F3A   CD 3D 0A               CALL   printStr   
1F3D   20 28 23 00            .CSTR   " (#"   
1F41   CD D3 09               CALL   prthex   
1F44   CD 3D 0A               CALL   printStr   
1F47   29 0D 0A 00            .CSTR   ")\r\n"   
1F4B   76                     HALT      
1F4C   00                     .CSTR      
1F4D                EXPECTM_0_2486S43:      
1F4D   E1                     POP   HL   
1F4E                          ;*Macro unroll:  test "2 3 <", TRUE
1F4E   31 80 40               LD   SP,STACK   
1F51   CD 44 0A               CALL   init   
1F54   CD 42 3F               CALL   execStr   
1F57   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F5D                          ;*Macro unroll:  expect "2 3 <",TRUE
1F5D   E1                     POP   HL   
1F5E   E5                     PUSH   HL   
1F5F   11 FF FF               LD   DE,TRUE   
1F62   B7                     OR   A   
1F63   ED 52                  SBC   HL,DE   
1F65   7D                     LD   A,L   
1F66   B4                     OR   H   
1F67   28 50                  JR   Z,expectM_0_2487S43   
1F69   CD 3D 0A               CALL   printStr   
1F6C   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1F78   CD 3D 0A               CALL   printStr   
1F7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F8A   21 FF FF               LD   HL,TRUE   
1F8D   CD 8B 09               CALL   prtdec   
1F90   CD 3D 0A               CALL   printStr   
1F93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FA0   E1                     POP   hl   
1FA1   E5                     PUSH   hl   
1FA2   CD 8B 09               CALL   prtdec   
1FA5   E1                     POP   hl   
1FA6   CD 3D 0A               CALL   printStr   
1FA9   20 28 23 00            .CSTR   " (#"   
1FAD   CD D3 09               CALL   prthex   
1FB0   CD 3D 0A               CALL   printStr   
1FB3   29 0D 0A 00            .CSTR   ")\r\n"   
1FB7   76                     HALT      
1FB8   00                     .CSTR      
1FB9                EXPECTM_0_2487S43:      
1FB9   E1                     POP   HL   
1FBA                          ;*Macro unroll:  test "3 3 <", FALSE
1FBA   31 80 40               LD   SP,STACK   
1FBD   CD 44 0A               CALL   init   
1FC0   CD 42 3F               CALL   execStr   
1FC3   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1FC9                          ;*Macro unroll:  expect "3 3 <",FALSE
1FC9   E1                     POP   HL   
1FCA   E5                     PUSH   HL   
1FCB   11 00 00               LD   DE,FALSE   
1FCE   B7                     OR   A   
1FCF   ED 52                  SBC   HL,DE   
1FD1   7D                     LD   A,L   
1FD2   B4                     OR   H   
1FD3   28 50                  JR   Z,expectM_0_2488S43   
1FD5   CD 3D 0A               CALL   printStr   
1FD8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1FE4   CD 3D 0A               CALL   printStr   
1FE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FF6   21 00 00               LD   HL,FALSE   
1FF9   CD 8B 09               CALL   prtdec   
1FFC   CD 3D 0A               CALL   printStr   
1FFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
200C   E1                     POP   hl   
200D   E5                     PUSH   hl   
200E   CD 8B 09               CALL   prtdec   
2011   E1                     POP   hl   
2012   CD 3D 0A               CALL   printStr   
2015   20 28 23 00            .CSTR   " (#"   
2019   CD D3 09               CALL   prthex   
201C   CD 3D 0A               CALL   printStr   
201F   29 0D 0A 00            .CSTR   ")\r\n"   
2023   76                     HALT      
2024   00                     .CSTR      
2025                EXPECTM_0_2488S43:      
2025   E1                     POP   HL   
2026                          ;*Macro unroll:  test "1 2 >", FALSE
2026   31 80 40               LD   SP,STACK   
2029   CD 44 0A               CALL   init   
202C   CD 42 3F               CALL   execStr   
202F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2035                          ;*Macro unroll:  expect "1 2 >",FALSE
2035   E1                     POP   HL   
2036   E5                     PUSH   HL   
2037   11 00 00               LD   DE,FALSE   
203A   B7                     OR   A   
203B   ED 52                  SBC   HL,DE   
203D   7D                     LD   A,L   
203E   B4                     OR   H   
203F   28 50                  JR   Z,expectM_0_2489S43   
2041   CD 3D 0A               CALL   printStr   
2044   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2050   CD 3D 0A               CALL   printStr   
2053   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2062   21 00 00               LD   HL,FALSE   
2065   CD 8B 09               CALL   prtdec   
2068   CD 3D 0A               CALL   printStr   
206B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2078   E1                     POP   hl   
2079   E5                     PUSH   hl   
207A   CD 8B 09               CALL   prtdec   
207D   E1                     POP   hl   
207E   CD 3D 0A               CALL   printStr   
2081   20 28 23 00            .CSTR   " (#"   
2085   CD D3 09               CALL   prthex   
2088   CD 3D 0A               CALL   printStr   
208B   29 0D 0A 00            .CSTR   ")\r\n"   
208F   76                     HALT      
2090   00                     .CSTR      
2091                EXPECTM_0_2489S43:      
2091   E1                     POP   HL   
2092                          ;*Macro unroll:  test "2 1 >", TRUE
2092   31 80 40               LD   SP,STACK   
2095   CD 44 0A               CALL   init   
2098   CD 42 3F               CALL   execStr   
209B   32 20 31 20 3E 00      .CSTR   "2 1 >"   
20A1                          ;*Macro unroll:  expect "2 1 >",TRUE
20A1   E1                     POP   HL   
20A2   E5                     PUSH   HL   
20A3   11 FF FF               LD   DE,TRUE   
20A6   B7                     OR   A   
20A7   ED 52                  SBC   HL,DE   
20A9   7D                     LD   A,L   
20AA   B4                     OR   H   
20AB   28 50                  JR   Z,expectM_0_2490S43   
20AD   CD 3D 0A               CALL   printStr   
20B0   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
20BC   CD 3D 0A               CALL   printStr   
20BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20CE   21 FF FF               LD   HL,TRUE   
20D1   CD 8B 09               CALL   prtdec   
20D4   CD 3D 0A               CALL   printStr   
20D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E4   E1                     POP   hl   
20E5   E5                     PUSH   hl   
20E6   CD 8B 09               CALL   prtdec   
20E9   E1                     POP   hl   
20EA   CD 3D 0A               CALL   printStr   
20ED   20 28 23 00            .CSTR   " (#"   
20F1   CD D3 09               CALL   prthex   
20F4   CD 3D 0A               CALL   printStr   
20F7   29 0D 0A 00            .CSTR   ")\r\n"   
20FB   76                     HALT      
20FC   00                     .CSTR      
20FD                EXPECTM_0_2490S43:      
20FD   E1                     POP   HL   
20FE                          ;*Macro unroll:  test "3 3 >", FALSE
20FE   31 80 40               LD   SP,STACK   
2101   CD 44 0A               CALL   init   
2104   CD 42 3F               CALL   execStr   
2107   33 20 33 20 3E 00      .CSTR   "3 3 >"   
210D                          ;*Macro unroll:  expect "3 3 >",FALSE
210D   E1                     POP   HL   
210E   E5                     PUSH   HL   
210F   11 00 00               LD   DE,FALSE   
2112   B7                     OR   A   
2113   ED 52                  SBC   HL,DE   
2115   7D                     LD   A,L   
2116   B4                     OR   H   
2117   28 50                  JR   Z,expectM_0_2491S43   
2119   CD 3D 0A               CALL   printStr   
211C   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2128   CD 3D 0A               CALL   printStr   
212B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
213A   21 00 00               LD   HL,FALSE   
213D   CD 8B 09               CALL   prtdec   
2140   CD 3D 0A               CALL   printStr   
2143   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2150   E1                     POP   hl   
2151   E5                     PUSH   hl   
2152   CD 8B 09               CALL   prtdec   
2155   E1                     POP   hl   
2156   CD 3D 0A               CALL   printStr   
2159   20 28 23 00            .CSTR   " (#"   
215D   CD D3 09               CALL   prthex   
2160   CD 3D 0A               CALL   printStr   
2163   29 0D 0A 00            .CSTR   ")\r\n"   
2167   76                     HALT      
2168   00                     .CSTR      
2169                EXPECTM_0_2491S43:      
2169   E1                     POP   HL   
216A                          ;*Macro unroll:  test "4 3 >", TRUE
216A   31 80 40               LD   SP,STACK   
216D   CD 44 0A               CALL   init   
2170   CD 42 3F               CALL   execStr   
2173   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2179                          ;*Macro unroll:  expect "4 3 >",TRUE
2179   E1                     POP   HL   
217A   E5                     PUSH   HL   
217B   11 FF FF               LD   DE,TRUE   
217E   B7                     OR   A   
217F   ED 52                  SBC   HL,DE   
2181   7D                     LD   A,L   
2182   B4                     OR   H   
2183   28 50                  JR   Z,expectM_0_2492S43   
2185   CD 3D 0A               CALL   printStr   
2188   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2194   CD 3D 0A               CALL   printStr   
2197   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21A6   21 FF FF               LD   HL,TRUE   
21A9   CD 8B 09               CALL   prtdec   
21AC   CD 3D 0A               CALL   printStr   
21AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21BC   E1                     POP   hl   
21BD   E5                     PUSH   hl   
21BE   CD 8B 09               CALL   prtdec   
21C1   E1                     POP   hl   
21C2   CD 3D 0A               CALL   printStr   
21C5   20 28 23 00            .CSTR   " (#"   
21C9   CD D3 09               CALL   prthex   
21CC   CD 3D 0A               CALL   printStr   
21CF   29 0D 0A 00            .CSTR   ")\r\n"   
21D3   76                     HALT      
21D4   00                     .CSTR      
21D5                EXPECTM_0_2492S43:      
21D5   E1                     POP   HL   
21D6                          ;*Macro unroll:  test "2 2 <=", TRUE
21D6   31 80 40               LD   SP,STACK   
21D9   CD 44 0A               CALL   init   
21DC   CD 42 3F               CALL   execStr   
21DF   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
21E6                          ;*Macro unroll:  expect "2 2 <=",TRUE
21E6   E1                     POP   HL   
21E7   E5                     PUSH   HL   
21E8   11 FF FF               LD   DE,TRUE   
21EB   B7                     OR   A   
21EC   ED 52                  SBC   HL,DE   
21EE   7D                     LD   A,L   
21EF   B4                     OR   H   
21F0   28 51                  JR   Z,expectM_0_2493S43   
21F2   CD 3D 0A               CALL   printStr   
21F5   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2202   CD 3D 0A               CALL   printStr   
2205   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2214   21 FF FF               LD   HL,TRUE   
2217   CD 8B 09               CALL   prtdec   
221A   CD 3D 0A               CALL   printStr   
221D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
222A   E1                     POP   hl   
222B   E5                     PUSH   hl   
222C   CD 8B 09               CALL   prtdec   
222F   E1                     POP   hl   
2230   CD 3D 0A               CALL   printStr   
2233   20 28 23 00            .CSTR   " (#"   
2237   CD D3 09               CALL   prthex   
223A   CD 3D 0A               CALL   printStr   
223D   29 0D 0A 00            .CSTR   ")\r\n"   
2241   76                     HALT      
2242   00                     .CSTR      
2243                EXPECTM_0_2493S43:      
2243   E1                     POP   HL   
2244                          ;*Macro unroll:  test "2 2 >=", TRUE
2244   31 80 40               LD   SP,STACK   
2247   CD 44 0A               CALL   init   
224A   CD 42 3F               CALL   execStr   
224D   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2254                          ;*Macro unroll:  expect "2 2 >=",TRUE
2254   E1                     POP   HL   
2255   E5                     PUSH   HL   
2256   11 FF FF               LD   DE,TRUE   
2259   B7                     OR   A   
225A   ED 52                  SBC   HL,DE   
225C   7D                     LD   A,L   
225D   B4                     OR   H   
225E   28 51                  JR   Z,expectM_0_2494S43   
2260   CD 3D 0A               CALL   printStr   
2263   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2270   CD 3D 0A               CALL   printStr   
2273   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2282   21 FF FF               LD   HL,TRUE   
2285   CD 8B 09               CALL   prtdec   
2288   CD 3D 0A               CALL   printStr   
228B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2298   E1                     POP   hl   
2299   E5                     PUSH   hl   
229A   CD 8B 09               CALL   prtdec   
229D   E1                     POP   hl   
229E   CD 3D 0A               CALL   printStr   
22A1   20 28 23 00            .CSTR   " (#"   
22A5   CD D3 09               CALL   prthex   
22A8   CD 3D 0A               CALL   printStr   
22AB   29 0D 0A 00            .CSTR   ")\r\n"   
22AF   76                     HALT      
22B0   00                     .CSTR      
22B1                EXPECTM_0_2494S43:      
22B1   E1                     POP   HL   
22B2                          ;*Macro unroll:  test "3 1 <<", 6
22B2   31 80 40               LD   SP,STACK   
22B5   CD 44 0A               CALL   init   
22B8   CD 42 3F               CALL   execStr   
22BB   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
22C2                          ;*Macro unroll:  expect "3 1 <<",6
22C2   E1                     POP   HL   
22C3   E5                     PUSH   HL   
22C4   11 06 00               LD   DE,6   
22C7   B7                     OR   A   
22C8   ED 52                  SBC   HL,DE   
22CA   7D                     LD   A,L   
22CB   B4                     OR   H   
22CC   28 51                  JR   Z,expectM_0_2495S43   
22CE   CD 3D 0A               CALL   printStr   
22D1   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
22DE   CD 3D 0A               CALL   printStr   
22E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F0   21 06 00               LD   HL,6   
22F3   CD 8B 09               CALL   prtdec   
22F6   CD 3D 0A               CALL   printStr   
22F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2306   E1                     POP   hl   
2307   E5                     PUSH   hl   
2308   CD 8B 09               CALL   prtdec   
230B   E1                     POP   hl   
230C   CD 3D 0A               CALL   printStr   
230F   20 28 23 00            .CSTR   " (#"   
2313   CD D3 09               CALL   prthex   
2316   CD 3D 0A               CALL   printStr   
2319   29 0D 0A 00            .CSTR   ")\r\n"   
231D   76                     HALT      
231E   00                     .CSTR      
231F                EXPECTM_0_2495S43:      
231F   E1                     POP   HL   
2320                          ;*Macro unroll:  test "10 1 >>", 5
2320   31 80 40               LD   SP,STACK   
2323   CD 44 0A               CALL   init   
2326   CD 42 3F               CALL   execStr   
2329   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2331                          ;*Macro unroll:  expect "10 1 >>",5
2331   E1                     POP   HL   
2332   E5                     PUSH   HL   
2333   11 05 00               LD   DE,5   
2336   B7                     OR   A   
2337   ED 52                  SBC   HL,DE   
2339   7D                     LD   A,L   
233A   B4                     OR   H   
233B   28 52                  JR   Z,expectM_0_2496S43   
233D   CD 3D 0A               CALL   printStr   
2340   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
234E   CD 3D 0A               CALL   printStr   
2351   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2360   21 05 00               LD   HL,5   
2363   CD 8B 09               CALL   prtdec   
2366   CD 3D 0A               CALL   printStr   
2369   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2376   E1                     POP   hl   
2377   E5                     PUSH   hl   
2378   CD 8B 09               CALL   prtdec   
237B   E1                     POP   hl   
237C   CD 3D 0A               CALL   printStr   
237F   20 28 23 00            .CSTR   " (#"   
2383   CD D3 09               CALL   prthex   
2386   CD 3D 0A               CALL   printStr   
2389   29 0D 0A 00            .CSTR   ")\r\n"   
238D   76                     HALT      
238E   00                     .CSTR      
238F                EXPECTM_0_2496S43:      
238F   E1                     POP   HL   
2390                          ;*Macro unroll:  test "1 x = x", 1
2390   31 80 40               LD   SP,STACK   
2393   CD 44 0A               CALL   init   
2396   CD 42 3F               CALL   execStr   
2399   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
23A1                          ;*Macro unroll:  expect "1 x = x",1
23A1   E1                     POP   HL   
23A2   E5                     PUSH   HL   
23A3   11 01 00               LD   DE,1   
23A6   B7                     OR   A   
23A7   ED 52                  SBC   HL,DE   
23A9   7D                     LD   A,L   
23AA   B4                     OR   H   
23AB   28 52                  JR   Z,expectM_0_2497S43   
23AD   CD 3D 0A               CALL   printStr   
23B0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
23BE   CD 3D 0A               CALL   printStr   
23C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D0   21 01 00               LD   HL,1   
23D3   CD 8B 09               CALL   prtdec   
23D6   CD 3D 0A               CALL   printStr   
23D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E6   E1                     POP   hl   
23E7   E5                     PUSH   hl   
23E8   CD 8B 09               CALL   prtdec   
23EB   E1                     POP   hl   
23EC   CD 3D 0A               CALL   printStr   
23EF   20 28 23 00            .CSTR   " (#"   
23F3   CD D3 09               CALL   prthex   
23F6   CD 3D 0A               CALL   printStr   
23F9   29 0D 0A 00            .CSTR   ")\r\n"   
23FD   76                     HALT      
23FE   00                     .CSTR      
23FF                EXPECTM_0_2497S43:      
23FF   E1                     POP   HL   
2400                          ;*Macro unroll:  test "1{}^", 1
2400   31 80 40               LD   SP,STACK   
2403   CD 44 0A               CALL   init   
2406   CD 42 3F               CALL   execStr   
2409   31 7B 7D 5E 00         .CSTR   "1{}^"   
240E                          ;*Macro unroll:  expect "1{}^",1
240E   E1                     POP   HL   
240F   E5                     PUSH   HL   
2410   11 01 00               LD   DE,1   
2413   B7                     OR   A   
2414   ED 52                  SBC   HL,DE   
2416   7D                     LD   A,L   
2417   B4                     OR   H   
2418   28 4F                  JR   Z,expectM_0_2498S43   
241A   CD 3D 0A               CALL   printStr   
241D   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2428   CD 3D 0A               CALL   printStr   
242B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243A   21 01 00               LD   HL,1   
243D   CD 8B 09               CALL   prtdec   
2440   CD 3D 0A               CALL   printStr   
2443   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2450   E1                     POP   hl   
2451   E5                     PUSH   hl   
2452   CD 8B 09               CALL   prtdec   
2455   E1                     POP   hl   
2456   CD 3D 0A               CALL   printStr   
2459   20 28 23 00            .CSTR   " (#"   
245D   CD D3 09               CALL   prthex   
2460   CD 3D 0A               CALL   printStr   
2463   29 0D 0A 00            .CSTR   ")\r\n"   
2467   76                     HALT      
2468   00                     .CSTR      
2469                EXPECTM_0_2498S43:      
2469   E1                     POP   HL   
246A                          ;*Macro unroll:  test "{1}^", 1
246A   31 80 40               LD   SP,STACK   
246D   CD 44 0A               CALL   init   
2470   CD 42 3F               CALL   execStr   
2473   7B 31 7D 5E 00         .CSTR   "{1}^"   
2478                          ;*Macro unroll:  expect "{1}^",1
2478   E1                     POP   HL   
2479   E5                     PUSH   HL   
247A   11 01 00               LD   DE,1   
247D   B7                     OR   A   
247E   ED 52                  SBC   HL,DE   
2480   7D                     LD   A,L   
2481   B4                     OR   H   
2482   28 4F                  JR   Z,expectM_0_2499S43   
2484   CD 3D 0A               CALL   printStr   
2487   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2492   CD 3D 0A               CALL   printStr   
2495   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A4   21 01 00               LD   HL,1   
24A7   CD 8B 09               CALL   prtdec   
24AA   CD 3D 0A               CALL   printStr   
24AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24BA   E1                     POP   hl   
24BB   E5                     PUSH   hl   
24BC   CD 8B 09               CALL   prtdec   
24BF   E1                     POP   hl   
24C0   CD 3D 0A               CALL   printStr   
24C3   20 28 23 00            .CSTR   " (#"   
24C7   CD D3 09               CALL   prthex   
24CA   CD 3D 0A               CALL   printStr   
24CD   29 0D 0A 00            .CSTR   ")\r\n"   
24D1   76                     HALT      
24D2   00                     .CSTR      
24D3                EXPECTM_0_2499S43:      
24D3   E1                     POP   HL   
24D4                          ;*Macro unroll:  test "{{1}^}^", 1
24D4   31 80 40               LD   SP,STACK   
24D7   CD 44 0A               CALL   init   
24DA   CD 42 3F               CALL   execStr   
24DD   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
24E5                          ;*Macro unroll:  expect "{{1}^}^",1
24E5   E1                     POP   HL   
24E6   E5                     PUSH   HL   
24E7   11 01 00               LD   DE,1   
24EA   B7                     OR   A   
24EB   ED 52                  SBC   HL,DE   
24ED   7D                     LD   A,L   
24EE   B4                     OR   H   
24EF   28 52                  JR   Z,expectM_0_2500S43   
24F1   CD 3D 0A               CALL   printStr   
24F4   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2502   CD 3D 0A               CALL   printStr   
2505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2514   21 01 00               LD   HL,1   
2517   CD 8B 09               CALL   prtdec   
251A   CD 3D 0A               CALL   printStr   
251D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
252A   E1                     POP   hl   
252B   E5                     PUSH   hl   
252C   CD 8B 09               CALL   prtdec   
252F   E1                     POP   hl   
2530   CD 3D 0A               CALL   printStr   
2533   20 28 23 00            .CSTR   " (#"   
2537   CD D3 09               CALL   prthex   
253A   CD 3D 0A               CALL   printStr   
253D   29 0D 0A 00            .CSTR   ")\r\n"   
2541   76                     HALT      
2542   00                     .CSTR      
2543                EXPECTM_0_2500S43:      
2543   E1                     POP   HL   
2544                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2544   31 80 40               LD   SP,STACK   
2547   CD 44 0A               CALL   init   
254A   CD 42 3F               CALL   execStr   
254D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2558                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2558   E1                     POP   HL   
2559   E5                     PUSH   HL   
255A   11 01 00               LD   DE,1   
255D   B7                     OR   A   
255E   ED 52                  SBC   HL,DE   
2560   7D                     LD   A,L   
2561   B4                     OR   H   
2562   28 55                  JR   Z,expectM_0_2501S43   
2564   CD 3D 0A               CALL   printStr   
2567   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2578   CD 3D 0A               CALL   printStr   
257B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
258A   21 01 00               LD   HL,1   
258D   CD 8B 09               CALL   prtdec   
2590   CD 3D 0A               CALL   printStr   
2593   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A0   E1                     POP   hl   
25A1   E5                     PUSH   hl   
25A2   CD 8B 09               CALL   prtdec   
25A5   E1                     POP   hl   
25A6   CD 3D 0A               CALL   printStr   
25A9   20 28 23 00            .CSTR   " (#"   
25AD   CD D3 09               CALL   prthex   
25B0   CD 3D 0A               CALL   printStr   
25B3   29 0D 0A 00            .CSTR   ")\r\n"   
25B7   76                     HALT      
25B8   00                     .CSTR      
25B9                EXPECTM_0_2501S43:      
25B9   E1                     POP   HL   
25BA                          ;*Macro unroll:  test "5 /f{10} ?", 5
25BA   31 80 40               LD   SP,STACK   
25BD   CD 44 0A               CALL   init   
25C0   CD 42 3F               CALL   execStr   
25C3   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
25CE                          ;*Macro unroll:  expect "5 /f{10} ?",5
25CE   E1                     POP   HL   
25CF   E5                     PUSH   HL   
25D0   11 05 00               LD   DE,5   
25D3   B7                     OR   A   
25D4   ED 52                  SBC   HL,DE   
25D6   7D                     LD   A,L   
25D7   B4                     OR   H   
25D8   28 55                  JR   Z,expectM_0_2502S43   
25DA   CD 3D 0A               CALL   printStr   
25DD   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
25EE   CD 3D 0A               CALL   printStr   
25F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2600   21 05 00               LD   HL,5   
2603   CD 8B 09               CALL   prtdec   
2606   CD 3D 0A               CALL   printStr   
2609   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2616   E1                     POP   hl   
2617   E5                     PUSH   hl   
2618   CD 8B 09               CALL   prtdec   
261B   E1                     POP   hl   
261C   CD 3D 0A               CALL   printStr   
261F   20 28 23 00            .CSTR   " (#"   
2623   CD D3 09               CALL   prthex   
2626   CD 3D 0A               CALL   printStr   
2629   29 0D 0A 00            .CSTR   ")\r\n"   
262D   76                     HALT      
262E   00                     .CSTR      
262F                EXPECTM_0_2502S43:      
262F   E1                     POP   HL   
2630                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2630   31 80 40               LD   SP,STACK   
2633   CD 44 0A               CALL   init   
2636   CD 42 3F               CALL   execStr   
2639   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
2646                          ;*Macro unroll:  expect "5 /t{10} ? +",15
2646   E1                     POP   HL   
2647   E5                     PUSH   HL   
2648   11 0F 00               LD   DE,15   
264B   B7                     OR   A   
264C   ED 52                  SBC   HL,DE   
264E   7D                     LD   A,L   
264F   B4                     OR   H   
2650   28 57                  JR   Z,expectM_0_2503S43   
2652   CD 3D 0A               CALL   printStr   
2655   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2668   CD 3D 0A               CALL   printStr   
266B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267A   21 0F 00               LD   HL,15   
267D   CD 8B 09               CALL   prtdec   
2680   CD 3D 0A               CALL   printStr   
2683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2690   E1                     POP   hl   
2691   E5                     PUSH   hl   
2692   CD 8B 09               CALL   prtdec   
2695   E1                     POP   hl   
2696   CD 3D 0A               CALL   printStr   
2699   20 28 23 00            .CSTR   " (#"   
269D   CD D3 09               CALL   prthex   
26A0   CD 3D 0A               CALL   printStr   
26A3   29 0D 0A 00            .CSTR   ")\r\n"   
26A7   76                     HALT      
26A8   00                     .CSTR      
26A9                EXPECTM_0_2503S43:      
26A9   E1                     POP   HL   
26AA                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
26AA   31 80 40               LD   SP,STACK   
26AD   CD 44 0A               CALL   init   
26B0   CD 42 3F               CALL   execStr   
26B3   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
26C5                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
26C5   E1                     POP   HL   
26C6   E5                     PUSH   HL   
26C7   11 15 00               LD   DE,21   
26CA   B7                     OR   A   
26CB   ED 52                  SBC   HL,DE   
26CD   7D                     LD   A,L   
26CE   B4                     OR   H   
26CF   28 5C                  JR   Z,expectM_0_2504S43   
26D1   CD 3D 0A               CALL   printStr   
26D4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
26EC   CD 3D 0A               CALL   printStr   
26EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FE   21 15 00               LD   HL,21   
2701   CD 8B 09               CALL   prtdec   
2704   CD 3D 0A               CALL   printStr   
2707   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2714   E1                     POP   hl   
2715   E5                     PUSH   hl   
2716   CD 8B 09               CALL   prtdec   
2719   E1                     POP   hl   
271A   CD 3D 0A               CALL   printStr   
271D   20 28 23 00            .CSTR   " (#"   
2721   CD D3 09               CALL   prthex   
2724   CD 3D 0A               CALL   printStr   
2727   29 0D 0A 00            .CSTR   ")\r\n"   
272B   76                     HALT      
272C   00                     .CSTR      
272D                EXPECTM_0_2504S43:      
272D   E1                     POP   HL   
272E                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
272E   31 80 40               LD   SP,STACK   
2731   CD 44 0A               CALL   init   
2734   CD 42 3F               CALL   execStr   
2737   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
2749                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
2749   E1                     POP   HL   
274A   E5                     PUSH   HL   
274B   11 0B 00               LD   DE,11   
274E   B7                     OR   A   
274F   ED 52                  SBC   HL,DE   
2751   7D                     LD   A,L   
2752   B4                     OR   H   
2753   28 5C                  JR   Z,expectM_0_2505S43   
2755   CD 3D 0A               CALL   printStr   
2758   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2770   CD 3D 0A               CALL   printStr   
2773   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2782   21 0B 00               LD   HL,11   
2785   CD 8B 09               CALL   prtdec   
2788   CD 3D 0A               CALL   printStr   
278B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2798   E1                     POP   hl   
2799   E5                     PUSH   hl   
279A   CD 8B 09               CALL   prtdec   
279D   E1                     POP   hl   
279E   CD 3D 0A               CALL   printStr   
27A1   20 28 23 00            .CSTR   " (#"   
27A5   CD D3 09               CALL   prthex   
27A8   CD 3D 0A               CALL   printStr   
27AB   29 0D 0A 00            .CSTR   ")\r\n"   
27AF   76                     HALT      
27B0   00                     .CSTR      
27B1                EXPECTM_0_2505S43:      
27B1   E1                     POP   HL   
27B2                          ;*Macro unroll:  test ": -2%", $0000
27B2   31 80 40               LD   SP,STACK   
27B5   CD 44 0A               CALL   init   
27B8   CD 42 3F               CALL   execStr   
27BB   3A 20 2D 32 25 00      .CSTR   ": -2%"   
27C1                          ;*Macro unroll:  expect ": -2%",$0000
27C1   E1                     POP   HL   
27C2   E5                     PUSH   HL   
27C3   11 00 00               LD   DE,$0000   
27C6   B7                     OR   A   
27C7   ED 52                  SBC   HL,DE   
27C9   7D                     LD   A,L   
27CA   B4                     OR   H   
27CB   28 50                  JR   Z,expectM_0_2506S43   
27CD   CD 3D 0A               CALL   printStr   
27D0   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
27DC   CD 3D 0A               CALL   printStr   
27DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27EE   21 00 00               LD   HL,$0000   
27F1   CD 8B 09               CALL   prtdec   
27F4   CD 3D 0A               CALL   printStr   
27F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2804   E1                     POP   hl   
2805   E5                     PUSH   hl   
2806   CD 8B 09               CALL   prtdec   
2809   E1                     POP   hl   
280A   CD 3D 0A               CALL   printStr   
280D   20 28 23 00            .CSTR   " (#"   
2811   CD D3 09               CALL   prthex   
2814   CD 3D 0A               CALL   printStr   
2817   29 0D 0A 00            .CSTR   ")\r\n"   
281B   76                     HALT      
281C   00                     .CSTR      
281D                EXPECTM_0_2506S43:      
281D   E1                     POP   HL   
281E                          ;*Macro unroll:  test ":a -1%", $0001
281E   31 80 40               LD   SP,STACK   
2821   CD 44 0A               CALL   init   
2824   CD 42 3F               CALL   execStr   
2827   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
282E                          ;*Macro unroll:  expect ":a -1%",$0001
282E   E1                     POP   HL   
282F   E5                     PUSH   HL   
2830   11 01 00               LD   DE,$0001   
2833   B7                     OR   A   
2834   ED 52                  SBC   HL,DE   
2836   7D                     LD   A,L   
2837   B4                     OR   H   
2838   28 51                  JR   Z,expectM_0_2507S43   
283A   CD 3D 0A               CALL   printStr   
283D   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
284A   CD 3D 0A               CALL   printStr   
284D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285C   21 01 00               LD   HL,$0001   
285F   CD 8B 09               CALL   prtdec   
2862   CD 3D 0A               CALL   printStr   
2865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2872   E1                     POP   hl   
2873   E5                     PUSH   hl   
2874   CD 8B 09               CALL   prtdec   
2877   E1                     POP   hl   
2878   CD 3D 0A               CALL   printStr   
287B   20 28 23 00            .CSTR   " (#"   
287F   CD D3 09               CALL   prthex   
2882   CD 3D 0A               CALL   printStr   
2885   29 0D 0A 00            .CSTR   ")\r\n"   
2889   76                     HALT      
288A   00                     .CSTR      
288B                EXPECTM_0_2507S43:      
288B   E1                     POP   HL   
288C                          ;*Macro unroll:  test ":a: -1%", $0001
288C   31 80 40               LD   SP,STACK   
288F   CD 44 0A               CALL   init   
2892   CD 42 3F               CALL   execStr   
2895   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
289D                          ;*Macro unroll:  expect ":a: -1%",$0001
289D   E1                     POP   HL   
289E   E5                     PUSH   HL   
289F   11 01 00               LD   DE,$0001   
28A2   B7                     OR   A   
28A3   ED 52                  SBC   HL,DE   
28A5   7D                     LD   A,L   
28A6   B4                     OR   H   
28A7   28 52                  JR   Z,expectM_0_2508S43   
28A9   CD 3D 0A               CALL   printStr   
28AC   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
28BA   CD 3D 0A               CALL   printStr   
28BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28CC   21 01 00               LD   HL,$0001   
28CF   CD 8B 09               CALL   prtdec   
28D2   CD 3D 0A               CALL   printStr   
28D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E2   E1                     POP   hl   
28E3   E5                     PUSH   hl   
28E4   CD 8B 09               CALL   prtdec   
28E7   E1                     POP   hl   
28E8   CD 3D 0A               CALL   printStr   
28EB   20 28 23 00            .CSTR   " (#"   
28EF   CD D3 09               CALL   prthex   
28F2   CD 3D 0A               CALL   printStr   
28F5   29 0D 0A 00            .CSTR   ")\r\n"   
28F9   76                     HALT      
28FA   00                     .CSTR      
28FB                EXPECTM_0_2508S43:      
28FB   E1                     POP   HL   
28FC                          ;*Macro unroll:  test ":a:b -1%", $0102
28FC   31 80 40               LD   SP,STACK   
28FF   CD 44 0A               CALL   init   
2902   CD 42 3F               CALL   execStr   
2905   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
290E                          ;*Macro unroll:  expect ":a:b -1%",$0102
290E   E1                     POP   HL   
290F   E5                     PUSH   HL   
2910   11 02 01               LD   DE,$0102   
2913   B7                     OR   A   
2914   ED 52                  SBC   HL,DE   
2916   7D                     LD   A,L   
2917   B4                     OR   H   
2918   28 53                  JR   Z,expectM_0_2509S43   
291A   CD 3D 0A               CALL   printStr   
291D   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
292C   CD 3D 0A               CALL   printStr   
292F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
293E   21 02 01               LD   HL,$0102   
2941   CD 8B 09               CALL   prtdec   
2944   CD 3D 0A               CALL   printStr   
2947   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2954   E1                     POP   hl   
2955   E5                     PUSH   hl   
2956   CD 8B 09               CALL   prtdec   
2959   E1                     POP   hl   
295A   CD 3D 0A               CALL   printStr   
295D   20 28 23 00            .CSTR   " (#"   
2961   CD D3 09               CALL   prthex   
2964   CD 3D 0A               CALL   printStr   
2967   29 0D 0A 00            .CSTR   ")\r\n"   
296B   76                     HALT      
296C   00                     .CSTR      
296D                EXPECTM_0_2509S43:      
296D   E1                     POP   HL   
296E                          ;*Macro unroll:  test "::b -1%", $0101
296E   31 80 40               LD   SP,STACK   
2971   CD 44 0A               CALL   init   
2974   CD 42 3F               CALL   execStr   
2977   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
297F                          ;*Macro unroll:  expect "::b -1%",$0101
297F   E1                     POP   HL   
2980   E5                     PUSH   HL   
2981   11 01 01               LD   DE,$0101   
2984   B7                     OR   A   
2985   ED 52                  SBC   HL,DE   
2987   7D                     LD   A,L   
2988   B4                     OR   H   
2989   28 52                  JR   Z,expectM_0_2510S43   
298B   CD 3D 0A               CALL   printStr   
298E   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
299C   CD 3D 0A               CALL   printStr   
299F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29AE   21 01 01               LD   HL,$0101   
29B1   CD 8B 09               CALL   prtdec   
29B4   CD 3D 0A               CALL   printStr   
29B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C4   E1                     POP   hl   
29C5   E5                     PUSH   hl   
29C6   CD 8B 09               CALL   prtdec   
29C9   E1                     POP   hl   
29CA   CD 3D 0A               CALL   printStr   
29CD   20 28 23 00            .CSTR   " (#"   
29D1   CD D3 09               CALL   prthex   
29D4   CD 3D 0A               CALL   printStr   
29D7   29 0D 0A 00            .CSTR   ")\r\n"   
29DB   76                     HALT      
29DC   00                     .CSTR      
29DD                EXPECTM_0_2510S43:      
29DD   E1                     POP   HL   
29DE                          ;*Macro unroll:  test ":{2};^", 2
29DE   31 80 40               LD   SP,STACK   
29E1   CD 44 0A               CALL   init   
29E4   CD 42 3F               CALL   execStr   
29E7   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
29EE                          ;*Macro unroll:  expect ":{2};^",2
29EE   E1                     POP   HL   
29EF   E5                     PUSH   HL   
29F0   11 02 00               LD   DE,2   
29F3   B7                     OR   A   
29F4   ED 52                  SBC   HL,DE   
29F6   7D                     LD   A,L   
29F7   B4                     OR   H   
29F8   28 51                  JR   Z,expectM_0_2511S43   
29FA   CD 3D 0A               CALL   printStr   
29FD   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2A0A   CD 3D 0A               CALL   printStr   
2A0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A1C   21 02 00               LD   HL,2   
2A1F   CD 8B 09               CALL   prtdec   
2A22   CD 3D 0A               CALL   printStr   
2A25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A32   E1                     POP   hl   
2A33   E5                     PUSH   hl   
2A34   CD 8B 09               CALL   prtdec   
2A37   E1                     POP   hl   
2A38   CD 3D 0A               CALL   printStr   
2A3B   20 28 23 00            .CSTR   " (#"   
2A3F   CD D3 09               CALL   prthex   
2A42   CD 3D 0A               CALL   printStr   
2A45   29 0D 0A 00            .CSTR   ")\r\n"   
2A49   76                     HALT      
2A4A   00                     .CSTR      
2A4B                EXPECTM_0_2511S43:      
2A4B   E1                     POP   HL   
2A4C                          ;*Macro unroll:  test ":a{2};^", 2
2A4C   31 80 40               LD   SP,STACK   
2A4F   CD 44 0A               CALL   init   
2A52   CD 42 3F               CALL   execStr   
2A55   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2A5D                          ;*Macro unroll:  expect ":a{2};^",2
2A5D   E1                     POP   HL   
2A5E   E5                     PUSH   HL   
2A5F   11 02 00               LD   DE,2   
2A62   B7                     OR   A   
2A63   ED 52                  SBC   HL,DE   
2A65   7D                     LD   A,L   
2A66   B4                     OR   H   
2A67   28 52                  JR   Z,expectM_0_2512S43   
2A69   CD 3D 0A               CALL   printStr   
2A6C   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2A7A   CD 3D 0A               CALL   printStr   
2A7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A8C   21 02 00               LD   HL,2   
2A8F   CD 8B 09               CALL   prtdec   
2A92   CD 3D 0A               CALL   printStr   
2A95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA2   E1                     POP   hl   
2AA3   E5                     PUSH   hl   
2AA4   CD 8B 09               CALL   prtdec   
2AA7   E1                     POP   hl   
2AA8   CD 3D 0A               CALL   printStr   
2AAB   20 28 23 00            .CSTR   " (#"   
2AAF   CD D3 09               CALL   prthex   
2AB2   CD 3D 0A               CALL   printStr   
2AB5   29 0D 0A 00            .CSTR   ")\r\n"   
2AB9   76                     HALT      
2ABA   00                     .CSTR      
2ABB                EXPECTM_0_2512S43:      
2ABB   E1                     POP   HL   
2ABC                          ;*Macro unroll:  test "5 :a{$a};^", 5
2ABC   31 80 40               LD   SP,STACK   
2ABF   CD 44 0A               CALL   init   
2AC2   CD 42 3F               CALL   execStr   
2AC5   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2AD0                          ;*Macro unroll:  expect "5 :a{$a};^",5
2AD0   E1                     POP   HL   
2AD1   E5                     PUSH   HL   
2AD2   11 05 00               LD   DE,5   
2AD5   B7                     OR   A   
2AD6   ED 52                  SBC   HL,DE   
2AD8   7D                     LD   A,L   
2AD9   B4                     OR   H   
2ADA   28 55                  JR   Z,expectM_0_2513S43   
2ADC   CD 3D 0A               CALL   printStr   
2ADF   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2AF0   CD 3D 0A               CALL   printStr   
2AF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B02   21 05 00               LD   HL,5   
2B05   CD 8B 09               CALL   prtdec   
2B08   CD 3D 0A               CALL   printStr   
2B0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B18   E1                     POP   hl   
2B19   E5                     PUSH   hl   
2B1A   CD 8B 09               CALL   prtdec   
2B1D   E1                     POP   hl   
2B1E   CD 3D 0A               CALL   printStr   
2B21   20 28 23 00            .CSTR   " (#"   
2B25   CD D3 09               CALL   prthex   
2B28   CD 3D 0A               CALL   printStr   
2B2B   29 0D 0A 00            .CSTR   ")\r\n"   
2B2F   76                     HALT      
2B30   00                     .CSTR      
2B31                EXPECTM_0_2513S43:      
2B31   E1                     POP   HL   
2B32                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2B32   31 80 40               LD   SP,STACK   
2B35   CD 44 0A               CALL   init   
2B38   CD 42 3F               CALL   execStr   
2B3B   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2B48                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2B48   E1                     POP   HL   
2B49   E5                     PUSH   HL   
2B4A   11 05 00               LD   DE,5   
2B4D   B7                     OR   A   
2B4E   ED 52                  SBC   HL,DE   
2B50   7D                     LD   A,L   
2B51   B4                     OR   H   
2B52   28 57                  JR   Z,expectM_0_2514S43   
2B54   CD 3D 0A               CALL   printStr   
2B57   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2B6A   CD 3D 0A               CALL   printStr   
2B6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B7C   21 05 00               LD   HL,5   
2B7F   CD 8B 09               CALL   prtdec   
2B82   CD 3D 0A               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   CD 8B 09               CALL   prtdec   
2B97   E1                     POP   hl   
2B98   CD 3D 0A               CALL   printStr   
2B9B   20 28 23 00            .CSTR   " (#"   
2B9F   CD D3 09               CALL   prthex   
2BA2   CD 3D 0A               CALL   printStr   
2BA5   29 0D 0A 00            .CSTR   ")\r\n"   
2BA9   76                     HALT      
2BAA   00                     .CSTR      
2BAB                EXPECTM_0_2514S43:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test ":a{{2}^};^", 2
2BAC   31 80 40               LD   SP,STACK   
2BAF   CD 44 0A               CALL   init   
2BB2   CD 42 3F               CALL   execStr   
2BB5   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2BC0                          ;*Macro unroll:  expect ":a{{2}^};^",2
2BC0   E1                     POP   HL   
2BC1   E5                     PUSH   HL   
2BC2   11 02 00               LD   DE,2   
2BC5   B7                     OR   A   
2BC6   ED 52                  SBC   HL,DE   
2BC8   7D                     LD   A,L   
2BC9   B4                     OR   H   
2BCA   28 55                  JR   Z,expectM_0_2515S43   
2BCC   CD 3D 0A               CALL   printStr   
2BCF   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2BE0   CD 3D 0A               CALL   printStr   
2BE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF2   21 02 00               LD   HL,2   
2BF5   CD 8B 09               CALL   prtdec   
2BF8   CD 3D 0A               CALL   printStr   
2BFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C08   E1                     POP   hl   
2C09   E5                     PUSH   hl   
2C0A   CD 8B 09               CALL   prtdec   
2C0D   E1                     POP   hl   
2C0E   CD 3D 0A               CALL   printStr   
2C11   20 28 23 00            .CSTR   " (#"   
2C15   CD D3 09               CALL   prthex   
2C18   CD 3D 0A               CALL   printStr   
2C1B   29 0D 0A 00            .CSTR   ")\r\n"   
2C1F   76                     HALT      
2C20   00                     .CSTR      
2C21                EXPECTM_0_2515S43:      
2C21   E1                     POP   HL   
2C22                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2C22   31 80 40               LD   SP,STACK   
2C25   CD 44 0A               CALL   init   
2C28   CD 42 3F               CALL   execStr   
2C2B   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2C3B                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2C3B   E1                     POP   HL   
2C3C   E5                     PUSH   HL   
2C3D   11 05 00               LD   DE,5   
2C40   B7                     OR   A   
2C41   ED 52                  SBC   HL,DE   
2C43   7D                     LD   A,L   
2C44   B4                     OR   H   
2C45   28 5A                  JR   Z,expectM_0_2516S43   
2C47   CD 3D 0A               CALL   printStr   
2C4A   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2C60   CD 3D 0A               CALL   printStr   
2C63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C72   21 05 00               LD   HL,5   
2C75   CD 8B 09               CALL   prtdec   
2C78   CD 3D 0A               CALL   printStr   
2C7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C88   E1                     POP   hl   
2C89   E5                     PUSH   hl   
2C8A   CD 8B 09               CALL   prtdec   
2C8D   E1                     POP   hl   
2C8E   CD 3D 0A               CALL   printStr   
2C91   20 28 23 00            .CSTR   " (#"   
2C95   CD D3 09               CALL   prthex   
2C98   CD 3D 0A               CALL   printStr   
2C9B   29 0D 0A 00            .CSTR   ")\r\n"   
2C9F   76                     HALT      
2CA0   00                     .CSTR      
2CA1                EXPECTM_0_2516S43:      
2CA1   E1                     POP   HL   
2CA2                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2CA2   31 80 40               LD   SP,STACK   
2CA5   CD 44 0A               CALL   init   
2CA8   CD 42 3F               CALL   execStr   
2CAB   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2CBC                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2CBC   E1                     POP   HL   
2CBD   E5                     PUSH   HL   
2CBE   11 01 00               LD   DE,1   
2CC1   B7                     OR   A   
2CC2   ED 52                  SBC   HL,DE   
2CC4   7D                     LD   A,L   
2CC5   B4                     OR   H   
2CC6   28 5B                  JR   Z,expectM_0_2517S43   
2CC8   CD 3D 0A               CALL   printStr   
2CCB   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2CE2   CD 3D 0A               CALL   printStr   
2CE5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF4   21 01 00               LD   HL,1   
2CF7   CD 8B 09               CALL   prtdec   
2CFA   CD 3D 0A               CALL   printStr   
2CFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D0A   E1                     POP   hl   
2D0B   E5                     PUSH   hl   
2D0C   CD 8B 09               CALL   prtdec   
2D0F   E1                     POP   hl   
2D10   CD 3D 0A               CALL   printStr   
2D13   20 28 23 00            .CSTR   " (#"   
2D17   CD D3 09               CALL   prthex   
2D1A   CD 3D 0A               CALL   printStr   
2D1D   29 0D 0A 00            .CSTR   ")\r\n"   
2D21   76                     HALT      
2D22   00                     .CSTR      
2D23                EXPECTM_0_2517S43:      
2D23   E1                     POP   HL   
2D24                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2D24   31 80 40               LD   SP,STACK   
2D27   CD 44 0A               CALL   init   
2D2A   CD 42 3F               CALL   execStr   
2D2D   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2D41                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2D41   E1                     POP   HL   
2D42   E5                     PUSH   HL   
2D43   11 07 00               LD   DE,7   
2D46   B7                     OR   A   
2D47   ED 52                  SBC   HL,DE   
2D49   7D                     LD   A,L   
2D4A   B4                     OR   H   
2D4B   28 5E                  JR   Z,expectM_0_2518S43   
2D4D   CD 3D 0A               CALL   printStr   
2D50   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2D6A   CD 3D 0A               CALL   printStr   
2D6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7C   21 07 00               LD   HL,7   
2D7F   CD 8B 09               CALL   prtdec   
2D82   CD 3D 0A               CALL   printStr   
2D85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D92   E1                     POP   hl   
2D93   E5                     PUSH   hl   
2D94   CD 8B 09               CALL   prtdec   
2D97   E1                     POP   hl   
2D98   CD 3D 0A               CALL   printStr   
2D9B   20 28 23 00            .CSTR   " (#"   
2D9F   CD D3 09               CALL   prthex   
2DA2   CD 3D 0A               CALL   printStr   
2DA5   29 0D 0A 00            .CSTR   ")\r\n"   
2DA9   76                     HALT      
2DAA   00                     .CSTR      
2DAB                EXPECTM_0_2518S43:      
2DAB   E1                     POP   HL   
2DAC                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2DAC   31 80 40               LD   SP,STACK   
2DAF   CD 44 0A               CALL   init   
2DB2   CD 42 3F               CALL   execStr   
2DB5   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2DCB                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2DCB   E1                     POP   HL   
2DCC   E5                     PUSH   HL   
2DCD   11 06 00               LD   DE,6   
2DD0   B7                     OR   A   
2DD1   ED 52                  SBC   HL,DE   
2DD3   7D                     LD   A,L   
2DD4   B4                     OR   H   
2DD5   28 60                  JR   Z,expectM_0_2519S43   
2DD7   CD 3D 0A               CALL   printStr   
2DDA   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2DF6   CD 3D 0A               CALL   printStr   
2DF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E08   21 06 00               LD   HL,6   
2E0B   CD 8B 09               CALL   prtdec   
2E0E   CD 3D 0A               CALL   printStr   
2E11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E1E   E1                     POP   hl   
2E1F   E5                     PUSH   hl   
2E20   CD 8B 09               CALL   prtdec   
2E23   E1                     POP   hl   
2E24   CD 3D 0A               CALL   printStr   
2E27   20 28 23 00            .CSTR   " (#"   
2E2B   CD D3 09               CALL   prthex   
2E2E   CD 3D 0A               CALL   printStr   
2E31   29 0D 0A 00            .CSTR   ")\r\n"   
2E35   76                     HALT      
2E36   00                     .CSTR      
2E37                EXPECTM_0_2519S43:      
2E37   E1                     POP   HL   
2E38                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2E38   31 80 40               LD   SP,STACK   
2E3B   CD 44 0A               CALL   init   
2E3E   CD 42 3F               CALL   execStr   
2E41   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2E50                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2E50   E1                     POP   HL   
2E51   E5                     PUSH   HL   
2E52   11 02 00               LD   DE,2   
2E55   B7                     OR   A   
2E56   ED 52                  SBC   HL,DE   
2E58   7D                     LD   A,L   
2E59   B4                     OR   H   
2E5A   28 59                  JR   Z,expectM_0_2520S43   
2E5C   CD 3D 0A               CALL   printStr   
2E5F   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2E74   CD 3D 0A               CALL   printStr   
2E77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E86   21 02 00               LD   HL,2   
2E89   CD 8B 09               CALL   prtdec   
2E8C   CD 3D 0A               CALL   printStr   
2E8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9C   E1                     POP   hl   
2E9D   E5                     PUSH   hl   
2E9E   CD 8B 09               CALL   prtdec   
2EA1   E1                     POP   hl   
2EA2   CD 3D 0A               CALL   printStr   
2EA5   20 28 23 00            .CSTR   " (#"   
2EA9   CD D3 09               CALL   prthex   
2EAC   CD 3D 0A               CALL   printStr   
2EAF   29 0D 0A 00            .CSTR   ")\r\n"   
2EB3   76                     HALT      
2EB4   00                     .CSTR      
2EB5                EXPECTM_0_2520S43:      
2EB5   E1                     POP   HL   
2EB6                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2EB6   31 80 40               LD   SP,STACK   
2EB9   CD 44 0A               CALL   init   
2EBC   CD 42 3F               CALL   execStr   
2EBF   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2ED1                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2ED1   E1                     POP   HL   
2ED2   E5                     PUSH   HL   
2ED3   11 01 00               LD   DE,1   
2ED6   B7                     OR   A   
2ED7   ED 52                  SBC   HL,DE   
2ED9   7D                     LD   A,L   
2EDA   B4                     OR   H   
2EDB   28 5C                  JR   Z,expectM_0_2521S43   
2EDD   CD 3D 0A               CALL   printStr   
2EE0   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
2EF8   CD 3D 0A               CALL   printStr   
2EFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F0A   21 01 00               LD   HL,1   
2F0D   CD 8B 09               CALL   prtdec   
2F10   CD 3D 0A               CALL   printStr   
2F13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F20   E1                     POP   hl   
2F21   E5                     PUSH   hl   
2F22   CD 8B 09               CALL   prtdec   
2F25   E1                     POP   hl   
2F26   CD 3D 0A               CALL   printStr   
2F29   20 28 23 00            .CSTR   " (#"   
2F2D   CD D3 09               CALL   prthex   
2F30   CD 3D 0A               CALL   printStr   
2F33   29 0D 0A 00            .CSTR   ")\r\n"   
2F37   76                     HALT      
2F38   00                     .CSTR      
2F39                EXPECTM_0_2521S43:      
2F39   E1                     POP   HL   
2F3A                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
2F3A   31 80 40               LD   SP,STACK   
2F3D   CD 44 0A               CALL   init   
2F40   CD 42 3F               CALL   execStr   
2F43   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
2F56                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
2F56   E1                     POP   HL   
2F57   E5                     PUSH   HL   
2F58   11 02 00               LD   DE,2   
2F5B   B7                     OR   A   
2F5C   ED 52                  SBC   HL,DE   
2F5E   7D                     LD   A,L   
2F5F   B4                     OR   H   
2F60   28 5D                  JR   Z,expectM_0_2522S43   
2F62   CD 3D 0A               CALL   printStr   
2F65   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
2F7E   CD 3D 0A               CALL   printStr   
2F81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F90   21 02 00               LD   HL,2   
2F93   CD 8B 09               CALL   prtdec   
2F96   CD 3D 0A               CALL   printStr   
2F99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FA6   E1                     POP   hl   
2FA7   E5                     PUSH   hl   
2FA8   CD 8B 09               CALL   prtdec   
2FAB   E1                     POP   hl   
2FAC   CD 3D 0A               CALL   printStr   
2FAF   20 28 23 00            .CSTR   " (#"   
2FB3   CD D3 09               CALL   prthex   
2FB6   CD 3D 0A               CALL   printStr   
2FB9   29 0D 0A 00            .CSTR   ")\r\n"   
2FBD   76                     HALT      
2FBE   00                     .CSTR      
2FBF                EXPECTM_0_2522S43:      
2FBF   E1                     POP   HL   
2FC0                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
2FC0   31 80 40               LD   SP,STACK   
2FC3   CD 44 0A               CALL   init   
2FC6   CD 42 3F               CALL   execStr   
2FC9   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
2FDD                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
2FDD   E1                     POP   HL   
2FDE   E5                     PUSH   HL   
2FDF   11 02 00               LD   DE,2   
2FE2   B7                     OR   A   
2FE3   ED 52                  SBC   HL,DE   
2FE5   7D                     LD   A,L   
2FE6   B4                     OR   H   
2FE7   28 5E                  JR   Z,expectM_0_2523S43   
2FE9   CD 3D 0A               CALL   printStr   
2FEC   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3006   CD 3D 0A               CALL   printStr   
3009   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3018   21 02 00               LD   HL,2   
301B   CD 8B 09               CALL   prtdec   
301E   CD 3D 0A               CALL   printStr   
3021   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
302E   E1                     POP   hl   
302F   E5                     PUSH   hl   
3030   CD 8B 09               CALL   prtdec   
3033   E1                     POP   hl   
3034   CD 3D 0A               CALL   printStr   
3037   20 28 23 00            .CSTR   " (#"   
303B   CD D3 09               CALL   prthex   
303E   CD 3D 0A               CALL   printStr   
3041   29 0D 0A 00            .CSTR   ")\r\n"   
3045   76                     HALT      
3046   00                     .CSTR      
3047                EXPECTM_0_2523S43:      
3047   E1                     POP   HL   
3048                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3048   31 80 40               LD   SP,STACK   
304B   CD 44 0A               CALL   init   
304E   CD 42 3F               CALL   execStr   
3051   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
3064                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
3064   E1                     POP   HL   
3065   E5                     PUSH   HL   
3066   11 02 00               LD   DE,2   
3069   B7                     OR   A   
306A   ED 52                  SBC   HL,DE   
306C   7D                     LD   A,L   
306D   B4                     OR   H   
306E   28 5D                  JR   Z,expectM_0_2524S43   
3070   CD 3D 0A               CALL   printStr   
3073   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
308C   CD 3D 0A               CALL   printStr   
308F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
309E   21 02 00               LD   HL,2   
30A1   CD 8B 09               CALL   prtdec   
30A4   CD 3D 0A               CALL   printStr   
30A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30B4   E1                     POP   hl   
30B5   E5                     PUSH   hl   
30B6   CD 8B 09               CALL   prtdec   
30B9   E1                     POP   hl   
30BA   CD 3D 0A               CALL   printStr   
30BD   20 28 23 00            .CSTR   " (#"   
30C1   CD D3 09               CALL   prthex   
30C4   CD 3D 0A               CALL   printStr   
30C7   29 0D 0A 00            .CSTR   ")\r\n"   
30CB   76                     HALT      
30CC   00                     .CSTR      
30CD                EXPECTM_0_2524S43:      
30CD   E1                     POP   HL   
30CE                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
30CE   31 80 40               LD   SP,STACK   
30D1   CD 44 0A               CALL   init   
30D4   CD 42 3F               CALL   execStr   
30D7   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
30F1                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
30F1   E1                     POP   HL   
30F2   E5                     PUSH   HL   
30F3   11 05 00               LD   DE,5   
30F6   B7                     OR   A   
30F7   ED 52                  SBC   HL,DE   
30F9   7D                     LD   A,L   
30FA   B4                     OR   H   
30FB   28 64                  JR   Z,expectM_0_2525S43   
30FD   CD 3D 0A               CALL   printStr   
3100   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
3120   CD 3D 0A               CALL   printStr   
3123   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3132   21 05 00               LD   HL,5   
3135   CD 8B 09               CALL   prtdec   
3138   CD 3D 0A               CALL   printStr   
313B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3148   E1                     POP   hl   
3149   E5                     PUSH   hl   
314A   CD 8B 09               CALL   prtdec   
314D   E1                     POP   hl   
314E   CD 3D 0A               CALL   printStr   
3151   20 28 23 00            .CSTR   " (#"   
3155   CD D3 09               CALL   prthex   
3158   CD 3D 0A               CALL   printStr   
315B   29 0D 0A 00            .CSTR   ")\r\n"   
315F   76                     HALT      
3160   00                     .CSTR      
3161                EXPECTM_0_2525S43:      
3161   E1                     POP   HL   
3162                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3162   31 80 40               LD   SP,STACK   
3165   CD 44 0A               CALL   init   
3168   CD 42 3F               CALL   execStr   
316B   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
317C                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
317C   E1                     POP   HL   
317D   E5                     PUSH   HL   
317E   11 02 00               LD   DE,2   
3181   B7                     OR   A   
3182   ED 52                  SBC   HL,DE   
3184   7D                     LD   A,L   
3185   B4                     OR   H   
3186   28 5B                  JR   Z,expectM_0_2526S43   
3188   CD 3D 0A               CALL   printStr   
318B   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
31A2   CD 3D 0A               CALL   printStr   
31A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B4   21 02 00               LD   HL,2   
31B7   CD 8B 09               CALL   prtdec   
31BA   CD 3D 0A               CALL   printStr   
31BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31CA   E1                     POP   hl   
31CB   E5                     PUSH   hl   
31CC   CD 8B 09               CALL   prtdec   
31CF   E1                     POP   hl   
31D0   CD 3D 0A               CALL   printStr   
31D3   20 28 23 00            .CSTR   " (#"   
31D7   CD D3 09               CALL   prthex   
31DA   CD 3D 0A               CALL   printStr   
31DD   29 0D 0A 00            .CSTR   ")\r\n"   
31E1   76                     HALT      
31E2   00                     .CSTR      
31E3                EXPECTM_0_2526S43:      
31E3   E1                     POP   HL   
31E4                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
31E4   31 80 40               LD   SP,STACK   
31E7   CD 44 0A               CALL   init   
31EA   CD 42 3F               CALL   execStr   
31ED   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3204                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3204   E1                     POP   HL   
3205   E5                     PUSH   HL   
3206   11 64 00               LD   DE,100   
3209   B7                     OR   A   
320A   ED 52                  SBC   HL,DE   
320C   7D                     LD   A,L   
320D   B4                     OR   H   
320E   28 61                  JR   Z,expectM_0_2527S43   
3210   CD 3D 0A               CALL   printStr   
3213   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
3230   CD 3D 0A               CALL   printStr   
3233   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3242   21 64 00               LD   HL,100   
3245   CD 8B 09               CALL   prtdec   
3248   CD 3D 0A               CALL   printStr   
324B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3258   E1                     POP   hl   
3259   E5                     PUSH   hl   
325A   CD 8B 09               CALL   prtdec   
325D   E1                     POP   hl   
325E   CD 3D 0A               CALL   printStr   
3261   20 28 23 00            .CSTR   " (#"   
3265   CD D3 09               CALL   prthex   
3268   CD 3D 0A               CALL   printStr   
326B   29 0D 0A 00            .CSTR   ")\r\n"   
326F   76                     HALT      
3270   00                     .CSTR      
3271                EXPECTM_0_2527S43:      
3271   E1                     POP   HL   
3272                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3272   31 80 40               LD   SP,STACK   
3275   CD 44 0A               CALL   init   
3278   CD 42 3F               CALL   execStr   
327B   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3293                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3293   E1                     POP   HL   
3294   E5                     PUSH   HL   
3295   11 01 00               LD   DE,1   
3298   B7                     OR   A   
3299   ED 52                  SBC   HL,DE   
329B   7D                     LD   A,L   
329C   B4                     OR   H   
329D   28 62                  JR   Z,expectM_0_2528S43   
329F   CD 3D 0A               CALL   printStr   
32A2   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
32C0   CD 3D 0A               CALL   printStr   
32C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32D2   21 01 00               LD   HL,1   
32D5   CD 8B 09               CALL   prtdec   
32D8   CD 3D 0A               CALL   printStr   
32DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32E8   E1                     POP   hl   
32E9   E5                     PUSH   hl   
32EA   CD 8B 09               CALL   prtdec   
32ED   E1                     POP   hl   
32EE   CD 3D 0A               CALL   printStr   
32F1   20 28 23 00            .CSTR   " (#"   
32F5   CD D3 09               CALL   prthex   
32F8   CD 3D 0A               CALL   printStr   
32FB   29 0D 0A 00            .CSTR   ")\r\n"   
32FF   76                     HALT      
3300   00                     .CSTR      
3301                EXPECTM_0_2528S43:      
3301   E1                     POP   HL   
3302                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
3302   31 80 40               LD   SP,STACK   
3305   CD 44 0A               CALL   init   
3308   CD 42 3F               CALL   execStr   
330B   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
3324                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
3324   E1                     POP   HL   
3325   E5                     PUSH   HL   
3326   11 02 00               LD   DE,2   
3329   B7                     OR   A   
332A   ED 52                  SBC   HL,DE   
332C   7D                     LD   A,L   
332D   B4                     OR   H   
332E   28 63                  JR   Z,expectM_0_2529S43   
3330   CD 3D 0A               CALL   printStr   
3333   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3352   CD 3D 0A               CALL   printStr   
3355   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3364   21 02 00               LD   HL,2   
3367   CD 8B 09               CALL   prtdec   
336A   CD 3D 0A               CALL   printStr   
336D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
337A   E1                     POP   hl   
337B   E5                     PUSH   hl   
337C   CD 8B 09               CALL   prtdec   
337F   E1                     POP   hl   
3380   CD 3D 0A               CALL   printStr   
3383   20 28 23 00            .CSTR   " (#"   
3387   CD D3 09               CALL   prthex   
338A   CD 3D 0A               CALL   printStr   
338D   29 0D 0A 00            .CSTR   ")\r\n"   
3391   76                     HALT      
3392   00                     .CSTR      
3393                EXPECTM_0_2529S43:      
3393   E1                     POP   HL   
3394                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
3394   31 80 40               LD   SP,STACK   
3397   CD 44 0A               CALL   init   
339A   CD 42 3F               CALL   execStr   
339D   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
33BC                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
33BC   E1                     POP   HL   
33BD   E5                     PUSH   HL   
33BE   11 0B 00               LD   DE,11   
33C1   B7                     OR   A   
33C2   ED 52                  SBC   HL,DE   
33C4   7D                     LD   A,L   
33C5   B4                     OR   H   
33C6   28 69                  JR   Z,expectM_0_2530S43   
33C8   CD 3D 0A               CALL   printStr   
33CB   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
33F0   CD 3D 0A               CALL   printStr   
33F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3402   21 0B 00               LD   HL,11   
3405   CD 8B 09               CALL   prtdec   
3408   CD 3D 0A               CALL   printStr   
340B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3418   E1                     POP   hl   
3419   E5                     PUSH   hl   
341A   CD 8B 09               CALL   prtdec   
341D   E1                     POP   hl   
341E   CD 3D 0A               CALL   printStr   
3421   20 28 23 00            .CSTR   " (#"   
3425   CD D3 09               CALL   prthex   
3428   CD 3D 0A               CALL   printStr   
342B   29 0D 0A 00            .CSTR   ")\r\n"   
342F   76                     HALT      
3430   00                     .CSTR      
3431                EXPECTM_0_2530S43:      
3431   E1                     POP   HL   
3432                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3432   31 80 40               LD   SP,STACK   
3435   CD 44 0A               CALL   init   
3438   CD 42 3F               CALL   execStr   
343B   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
345A                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
345A   E1                     POP   HL   
345B   E5                     PUSH   HL   
345C   11 15 00               LD   DE,21   
345F   B7                     OR   A   
3460   ED 52                  SBC   HL,DE   
3462   7D                     LD   A,L   
3463   B4                     OR   H   
3464   28 69                  JR   Z,expectM_0_2531S43   
3466   CD 3D 0A               CALL   printStr   
3469   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
348E   CD 3D 0A               CALL   printStr   
3491   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34A0   21 15 00               LD   HL,21   
34A3   CD 8B 09               CALL   prtdec   
34A6   CD 3D 0A               CALL   printStr   
34A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34B6   E1                     POP   hl   
34B7   E5                     PUSH   hl   
34B8   CD 8B 09               CALL   prtdec   
34BB   E1                     POP   hl   
34BC   CD 3D 0A               CALL   printStr   
34BF   20 28 23 00            .CSTR   " (#"   
34C3   CD D3 09               CALL   prthex   
34C6   CD 3D 0A               CALL   printStr   
34C9   29 0D 0A 00            .CSTR   ")\r\n"   
34CD   76                     HALT      
34CE   00                     .CSTR      
34CF                EXPECTM_0_2531S43:      
34CF   E1                     POP   HL   
34D0                          ;*Macro unroll:  test "[10 20 30] 1%", 20
34D0   31 80 40               LD   SP,STACK   
34D3   CD 44 0A               CALL   init   
34D6   CD 42 3F               CALL   execStr   
34D9   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
34E7                          ;*Macro unroll:  expect "[10 20 30] 1%",20
34E7   E1                     POP   HL   
34E8   E5                     PUSH   HL   
34E9   11 14 00               LD   DE,20   
34EC   B7                     OR   A   
34ED   ED 52                  SBC   HL,DE   
34EF   7D                     LD   A,L   
34F0   B4                     OR   H   
34F1   28 58                  JR   Z,expectM_0_2532S43   
34F3   CD 3D 0A               CALL   printStr   
34F6   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
350A   CD 3D 0A               CALL   printStr   
350D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
351C   21 14 00               LD   HL,20   
351F   CD 8B 09               CALL   prtdec   
3522   CD 3D 0A               CALL   printStr   
3525   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3532   E1                     POP   hl   
3533   E5                     PUSH   hl   
3534   CD 8B 09               CALL   prtdec   
3537   E1                     POP   hl   
3538   CD 3D 0A               CALL   printStr   
353B   20 28 23 00            .CSTR   " (#"   
353F   CD D3 09               CALL   prthex   
3542   CD 3D 0A               CALL   printStr   
3545   29 0D 0A 00            .CSTR   ")\r\n"   
3549   76                     HALT      
354A   00                     .CSTR      
354B                EXPECTM_0_2532S43:      
354B   E1                     POP   HL   
354C                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
354C   31 80 40               LD   SP,STACK   
354F   CD 44 0A               CALL   init   
3552   CD 42 3F               CALL   execStr   
3555   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3563                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3563   E1                     POP   HL   
3564   E5                     PUSH   HL   
3565   11 02 00               LD   DE,2   
3568   B7                     OR   A   
3569   ED 52                  SBC   HL,DE   
356B   7D                     LD   A,L   
356C   B4                     OR   H   
356D   28 58                  JR   Z,expectM_0_2533S43   
356F   CD 3D 0A               CALL   printStr   
3572   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3586   CD 3D 0A               CALL   printStr   
3589   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3598   21 02 00               LD   HL,2   
359B   CD 8B 09               CALL   prtdec   
359E   CD 3D 0A               CALL   printStr   
35A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35AE   E1                     POP   hl   
35AF   E5                     PUSH   hl   
35B0   CD 8B 09               CALL   prtdec   
35B3   E1                     POP   hl   
35B4   CD 3D 0A               CALL   printStr   
35B7   20 28 23 00            .CSTR   " (#"   
35BB   CD D3 09               CALL   prthex   
35BE   CD 3D 0A               CALL   printStr   
35C1   29 0D 0A 00            .CSTR   ")\r\n"   
35C5   76                     HALT      
35C6   00                     .CSTR      
35C7                EXPECTM_0_2533S43:      
35C7   E1                     POP   HL   
35C8                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
35C8   31 80 40               LD   SP,STACK   
35CB   CD 44 0A               CALL   init   
35CE   CD 42 3F               CALL   execStr   
35D1   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
35E5                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
35E5   E1                     POP   HL   
35E6   E5                     PUSH   HL   
35E7   11 42 00               LD   DE,66   
35EA   B7                     OR   A   
35EB   ED 52                  SBC   HL,DE   
35ED   7D                     LD   A,L   
35EE   B4                     OR   H   
35EF   28 5E                  JR   Z,expectM_0_2534S43   
35F1   CD 3D 0A               CALL   printStr   
35F4   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
360E   CD 3D 0A               CALL   printStr   
3611   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3620   21 42 00               LD   HL,66   
3623   CD 8B 09               CALL   prtdec   
3626   CD 3D 0A               CALL   printStr   
3629   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3636   E1                     POP   hl   
3637   E5                     PUSH   hl   
3638   CD 8B 09               CALL   prtdec   
363B   E1                     POP   hl   
363C   CD 3D 0A               CALL   printStr   
363F   20 28 23 00            .CSTR   " (#"   
3643   CD D3 09               CALL   prthex   
3646   CD 3D 0A               CALL   printStr   
3649   29 0D 0A 00            .CSTR   ")\r\n"   
364D   76                     HALT      
364E   00                     .CSTR      
364F                EXPECTM_0_2534S43:      
364F   E1                     POP   HL   
3650                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
3650   31 80 40               LD   SP,STACK   
3653   CD 44 0A               CALL   init   
3656   CD 42 3F               CALL   execStr   
3659   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
366D                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
366D   E1                     POP   HL   
366E   E5                     PUSH   HL   
366F   11 0A 00               LD   DE,10   
3672   B7                     OR   A   
3673   ED 52                  SBC   HL,DE   
3675   7D                     LD   A,L   
3676   B4                     OR   H   
3677   28 5E                  JR   Z,expectM_0_2535S43   
3679   CD 3D 0A               CALL   printStr   
367C   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3696   CD 3D 0A               CALL   printStr   
3699   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36A8   21 0A 00               LD   HL,10   
36AB   CD 8B 09               CALL   prtdec   
36AE   CD 3D 0A               CALL   printStr   
36B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36BE   E1                     POP   hl   
36BF   E5                     PUSH   hl   
36C0   CD 8B 09               CALL   prtdec   
36C3   E1                     POP   hl   
36C4   CD 3D 0A               CALL   printStr   
36C7   20 28 23 00            .CSTR   " (#"   
36CB   CD D3 09               CALL   prthex   
36CE   CD 3D 0A               CALL   printStr   
36D1   29 0D 0A 00            .CSTR   ")\r\n"   
36D5   76                     HALT      
36D6   00                     .CSTR      
36D7                EXPECTM_0_2535S43:      
36D7   E1                     POP   HL   
36D8                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
36D8   31 80 40               LD   SP,STACK   
36DB   CD 44 0A               CALL   init   
36DE   CD 42 3F               CALL   execStr   
36E1   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
36FD                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
36FD   E1                     POP   HL   
36FE   E5                     PUSH   HL   
36FF   11 0A 00               LD   DE,10   
3702   B7                     OR   A   
3703   ED 52                  SBC   HL,DE   
3705   7D                     LD   A,L   
3706   B4                     OR   H   
3707   28 66                  JR   Z,expectM_0_2536S43   
3709   CD 3D 0A               CALL   printStr   
370C   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
372E   CD 3D 0A               CALL   printStr   
3731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3740   21 0A 00               LD   HL,10   
3743   CD 8B 09               CALL   prtdec   
3746   CD 3D 0A               CALL   printStr   
3749   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3756   E1                     POP   hl   
3757   E5                     PUSH   hl   
3758   CD 8B 09               CALL   prtdec   
375B   E1                     POP   hl   
375C   CD 3D 0A               CALL   printStr   
375F   20 28 23 00            .CSTR   " (#"   
3763   CD D3 09               CALL   prthex   
3766   CD 3D 0A               CALL   printStr   
3769   29 0D 0A 00            .CSTR   ")\r\n"   
376D   76                     HALT      
376E   00                     .CSTR      
376F                EXPECTM_0_2536S43:      
376F   E1                     POP   HL   
3770                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3770   31 80 40               LD   SP,STACK   
3773   CD 44 0A               CALL   init   
3776   CD 42 3F               CALL   execStr   
3779   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3799                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3799   E1                     POP   HL   
379A   E5                     PUSH   HL   
379B   11 0A 00               LD   DE,10   
379E   B7                     OR   A   
379F   ED 52                  SBC   HL,DE   
37A1   7D                     LD   A,L   
37A2   B4                     OR   H   
37A3   28 6A                  JR   Z,expectM_0_2537S43   
37A5   CD 3D 0A               CALL   printStr   
37A8   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
37CE   CD 3D 0A               CALL   printStr   
37D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37E0   21 0A 00               LD   HL,10   
37E3   CD 8B 09               CALL   prtdec   
37E6   CD 3D 0A               CALL   printStr   
37E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F6   E1                     POP   hl   
37F7   E5                     PUSH   hl   
37F8   CD 8B 09               CALL   prtdec   
37FB   E1                     POP   hl   
37FC   CD 3D 0A               CALL   printStr   
37FF   20 28 23 00            .CSTR   " (#"   
3803   CD D3 09               CALL   prthex   
3806   CD 3D 0A               CALL   printStr   
3809   29 0D 0A 00            .CSTR   ")\r\n"   
380D   76                     HALT      
380E   00                     .CSTR      
380F                EXPECTM_0_2537S43:      
380F   E1                     POP   HL   
3810                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3810   31 80 40               LD   SP,STACK   
3813   CD 44 0A               CALL   init   
3816   CD 42 3F               CALL   execStr   
3819   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3839                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3839   E1                     POP   HL   
383A   E5                     PUSH   HL   
383B   11 14 00               LD   DE,20   
383E   B7                     OR   A   
383F   ED 52                  SBC   HL,DE   
3841   7D                     LD   A,L   
3842   B4                     OR   H   
3843   28 6A                  JR   Z,expectM_0_2538S43   
3845   CD 3D 0A               CALL   printStr   
3848   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
386E   CD 3D 0A               CALL   printStr   
3871   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3880   21 14 00               LD   HL,20   
3883   CD 8B 09               CALL   prtdec   
3886   CD 3D 0A               CALL   printStr   
3889   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3896   E1                     POP   hl   
3897   E5                     PUSH   hl   
3898   CD 8B 09               CALL   prtdec   
389B   E1                     POP   hl   
389C   CD 3D 0A               CALL   printStr   
389F   20 28 23 00            .CSTR   " (#"   
38A3   CD D3 09               CALL   prthex   
38A6   CD 3D 0A               CALL   printStr   
38A9   29 0D 0A 00            .CSTR   ")\r\n"   
38AD   76                     HALT      
38AE   00                     .CSTR      
38AF                EXPECTM_0_2538S43:      
38AF   E1                     POP   HL   
38B0                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
38B0   31 80 40               LD   SP,STACK   
38B3   CD 44 0A               CALL   init   
38B6   CD 42 3F               CALL   execStr   
38B9   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
38CD                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
38CD   E1                     POP   HL   
38CE   E5                     PUSH   HL   
38CF   11 04 00               LD   DE,4   
38D2   B7                     OR   A   
38D3   ED 52                  SBC   HL,DE   
38D5   7D                     LD   A,L   
38D6   B4                     OR   H   
38D7   28 5E                  JR   Z,expectM_0_2539S43   
38D9   CD 3D 0A               CALL   printStr   
38DC   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
38F6   CD 3D 0A               CALL   printStr   
38F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3908   21 04 00               LD   HL,4   
390B   CD 8B 09               CALL   prtdec   
390E   CD 3D 0A               CALL   printStr   
3911   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
391E   E1                     POP   hl   
391F   E5                     PUSH   hl   
3920   CD 8B 09               CALL   prtdec   
3923   E1                     POP   hl   
3924   CD 3D 0A               CALL   printStr   
3927   20 28 23 00            .CSTR   " (#"   
392B   CD D3 09               CALL   prthex   
392E   CD 3D 0A               CALL   printStr   
3931   29 0D 0A 00            .CSTR   ")\r\n"   
3935   76                     HALT      
3936   00                     .CSTR      
3937                EXPECTM_0_2539S43:      
3937   E1                     POP   HL   
3938                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3938   31 80 40               LD   SP,STACK   
393B   CD 44 0A               CALL   init   
393E   CD 42 3F               CALL   execStr   
3941   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
395B                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
395B   E1                     POP   HL   
395C   E5                     PUSH   HL   
395D   11 09 00               LD   DE,9   
3960   B7                     OR   A   
3961   ED 52                  SBC   HL,DE   
3963   7D                     LD   A,L   
3964   B4                     OR   H   
3965   28 64                  JR   Z,expectM_0_2540S43   
3967   CD 3D 0A               CALL   printStr   
396A   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
398A   CD 3D 0A               CALL   printStr   
398D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
399C   21 09 00               LD   HL,9   
399F   CD 8B 09               CALL   prtdec   
39A2   CD 3D 0A               CALL   printStr   
39A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39B2   E1                     POP   hl   
39B3   E5                     PUSH   hl   
39B4   CD 8B 09               CALL   prtdec   
39B7   E1                     POP   hl   
39B8   CD 3D 0A               CALL   printStr   
39BB   20 28 23 00            .CSTR   " (#"   
39BF   CD D3 09               CALL   prthex   
39C2   CD 3D 0A               CALL   printStr   
39C5   29 0D 0A 00            .CSTR   ")\r\n"   
39C9   76                     HALT      
39CA   00                     .CSTR      
39CB                EXPECTM_0_2540S43:      
39CB   E1                     POP   HL   
39CC                          ;*Macro unroll:  test "3i= ( i i-- i/b )^ + +", 6
39CC   31 80 40               LD   SP,STACK   
39CF   CD 44 0A               CALL   init   
39D2   CD 42 3F               CALL   execStr   
39D5   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/b )^ + +"   
39EC                          ;*Macro unroll:  expect "3i= ( i i-- i/b )^ + +",6
39EC   E1                     POP   HL   
39ED   E5                     PUSH   HL   
39EE   11 06 00               LD   DE,6   
39F1   B7                     OR   A   
39F2   ED 52                  SBC   HL,DE   
39F4   7D                     LD   A,L   
39F5   B4                     OR   H   
39F6   28 61                  JR   Z,expectM_0_2541S43   
39F8   CD 3D 0A               CALL   printStr   
39FB   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/b )^ + +"   
3A18   CD 3D 0A               CALL   printStr   
3A1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A2A   21 06 00               LD   HL,6   
3A2D   CD 8B 09               CALL   prtdec   
3A30   CD 3D 0A               CALL   printStr   
3A33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A40   E1                     POP   hl   
3A41   E5                     PUSH   hl   
3A42   CD 8B 09               CALL   prtdec   
3A45   E1                     POP   hl   
3A46   CD 3D 0A               CALL   printStr   
3A49   20 28 23 00            .CSTR   " (#"   
3A4D   CD D3 09               CALL   prthex   
3A50   CD 3D 0A               CALL   printStr   
3A53   29 0D 0A 00            .CSTR   ")\r\n"   
3A57   76                     HALT      
3A58   00                     .CSTR      
3A59                EXPECTM_0_2541S43:      
3A59   E1                     POP   HL   
3A5A                          ;*Macro unroll:  test "3i= [ ( i i-- i/b )^ ] 1%", 2
3A5A   31 80 40               LD   SP,STACK   
3A5D   CD 44 0A               CALL   init   
3A60   CD 42 3F               CALL   execStr   
3A63   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/b )^ ] 1%"   
3A7D                          ;*Macro unroll:  expect "3i= [ ( i i-- i/b )^ ] 1%",2
3A7D   E1                     POP   HL   
3A7E   E5                     PUSH   HL   
3A7F   11 02 00               LD   DE,2   
3A82   B7                     OR   A   
3A83   ED 52                  SBC   HL,DE   
3A85   7D                     LD   A,L   
3A86   B4                     OR   H   
3A87   28 64                  JR   Z,expectM_0_2542S43   
3A89   CD 3D 0A               CALL   printStr   
3A8C   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/b )^ ] 1%"   
3AAC   CD 3D 0A               CALL   printStr   
3AAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ABE   21 02 00               LD   HL,2   
3AC1   CD 8B 09               CALL   prtdec   
3AC4   CD 3D 0A               CALL   printStr   
3AC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AD4   E1                     POP   hl   
3AD5   E5                     PUSH   hl   
3AD6   CD 8B 09               CALL   prtdec   
3AD9   E1                     POP   hl   
3ADA   CD 3D 0A               CALL   printStr   
3ADD   20 28 23 00            .CSTR   " (#"   
3AE1   CD D3 09               CALL   prthex   
3AE4   CD 3D 0A               CALL   printStr   
3AE7   29 0D 0A 00            .CSTR   ")\r\n"   
3AEB   76                     HALT      
3AEC   00                     .CSTR      
3AED                EXPECTM_0_2542S43:      
3AED   E1                     POP   HL   
3AEE                          ;*Macro unroll:  test "0 j= 4 i= ( i j+= i i-- i/b )^ j ", 10
3AEE   31 80 40               LD   SP,STACK   
3AF1   CD 44 0A               CALL   init   
3AF4   CD 42 3F               CALL   execStr   
3AF7   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3B19                          ;*Macro unroll:  expect "0 j= 4 i= ( i j+= i i-- i/b )^ j ",10
3B19   E1                     POP   HL   
3B1A   E5                     PUSH   HL   
3B1B   11 0A 00               LD   DE,10   
3B1E   B7                     OR   A   
3B1F   ED 52                  SBC   HL,DE   
3B21   7D                     LD   A,L   
3B22   B4                     OR   H   
3B23   28 6C                  JR   Z,expectM_0_2543S43   
3B25   CD 3D 0A               CALL   printStr   
3B28   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3B50   CD 3D 0A               CALL   printStr   
3B53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B62   21 0A 00               LD   HL,10   
3B65   CD 8B 09               CALL   prtdec   
3B68   CD 3D 0A               CALL   printStr   
3B6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B78   E1                     POP   hl   
3B79   E5                     PUSH   hl   
3B7A   CD 8B 09               CALL   prtdec   
3B7D   E1                     POP   hl   
3B7E   CD 3D 0A               CALL   printStr   
3B81   20 28 23 00            .CSTR   " (#"   
3B85   CD D3 09               CALL   prthex   
3B88   CD 3D 0A               CALL   printStr   
3B8B   29 0D 0A 00            .CSTR   ")\r\n"   
3B8F   76                     HALT      
3B90   00                     .CSTR      
3B91                EXPECTM_0_2543S43:      
3B91   E1                     POP   HL   
3B92                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3B92   31 80 40               LD   SP,STACK   
3B95   CD 44 0A               CALL   init   
3B98   CD 42 3F               CALL   execStr   
3B9B   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3BA7                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3BA7   E1                     POP   HL   
3BA8   E5                     PUSH   HL   
3BA9   11 00 00               LD   DE,NUL   
3BAC   B7                     OR   A   
3BAD   ED 52                  SBC   HL,DE   
3BAF   7D                     LD   A,L   
3BB0   B4                     OR   H   
3BB1   28 56                  JR   Z,expectM_0_2544S43   
3BB3   CD 3D 0A               CALL   printStr   
3BB6   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3BC8   CD 3D 0A               CALL   printStr   
3BCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BDA   21 00 00               LD   HL,NUL   
3BDD   CD 8B 09               CALL   prtdec   
3BE0   CD 3D 0A               CALL   printStr   
3BE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BF0   E1                     POP   hl   
3BF1   E5                     PUSH   hl   
3BF2   CD 8B 09               CALL   prtdec   
3BF5   E1                     POP   hl   
3BF6   CD 3D 0A               CALL   printStr   
3BF9   20 28 23 00            .CSTR   " (#"   
3BFD   CD D3 09               CALL   prthex   
3C00   CD 3D 0A               CALL   printStr   
3C03   29 0D 0A 00            .CSTR   ")\r\n"   
3C07   76                     HALT      
3C08   00                     .CSTR      
3C09                EXPECTM_0_2544S43:      
3C09   E1                     POP   HL   
3C0A                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3C0A   31 80 40               LD   SP,STACK   
3C0D   CD 44 0A               CALL   init   
3C10   CD 42 3F               CALL   execStr   
3C13   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3C1F                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3C1F   E1                     POP   HL   
3C20   E5                     PUSH   HL   
3C21   11 00 00               LD   DE,NUL   
3C24   B7                     OR   A   
3C25   ED 52                  SBC   HL,DE   
3C27   7D                     LD   A,L   
3C28   B4                     OR   H   
3C29   28 56                  JR   Z,expectM_0_2545S43   
3C2B   CD 3D 0A               CALL   printStr   
3C2E   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3C40   CD 3D 0A               CALL   printStr   
3C43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C52   21 00 00               LD   HL,NUL   
3C55   CD 8B 09               CALL   prtdec   
3C58   CD 3D 0A               CALL   printStr   
3C5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C68   E1                     POP   hl   
3C69   E5                     PUSH   hl   
3C6A   CD 8B 09               CALL   prtdec   
3C6D   E1                     POP   hl   
3C6E   CD 3D 0A               CALL   printStr   
3C71   20 28 23 00            .CSTR   " (#"   
3C75   CD D3 09               CALL   prthex   
3C78   CD 3D 0A               CALL   printStr   
3C7B   29 0D 0A 00            .CSTR   ")\r\n"   
3C7F   76                     HALT      
3C80   00                     .CSTR      
3C81                EXPECTM_0_2545S43:      
3C81   E1                     POP   HL   
3C82                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3C82   31 80 40               LD   SP,STACK   
3C85   CD 44 0A               CALL   init   
3C88   CD 42 3F               CALL   execStr   
3C8B   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3C97                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3C97   E1                     POP   HL   
3C98   E5                     PUSH   HL   
3C99   11 00 00               LD   DE,NUL   
3C9C   B7                     OR   A   
3C9D   ED 52                  SBC   HL,DE   
3C9F   7D                     LD   A,L   
3CA0   B4                     OR   H   
3CA1   28 56                  JR   Z,expectM_0_2546S43   
3CA3   CD 3D 0A               CALL   printStr   
3CA6   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3CB8   CD 3D 0A               CALL   printStr   
3CBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CCA   21 00 00               LD   HL,NUL   
3CCD   CD 8B 09               CALL   prtdec   
3CD0   CD 3D 0A               CALL   printStr   
3CD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CE0   E1                     POP   hl   
3CE1   E5                     PUSH   hl   
3CE2   CD 8B 09               CALL   prtdec   
3CE5   E1                     POP   hl   
3CE6   CD 3D 0A               CALL   printStr   
3CE9   20 28 23 00            .CSTR   " (#"   
3CED   CD D3 09               CALL   prthex   
3CF0   CD 3D 0A               CALL   printStr   
3CF3   29 0D 0A 00            .CSTR   ")\r\n"   
3CF7   76                     HALT      
3CF8   00                     .CSTR      
3CF9                EXPECTM_0_2546S43:      
3CF9   E1                     POP   HL   
3CFA                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
3CFA   31 80 40               LD   SP,STACK   
3CFD   CD 44 0A               CALL   init   
3D00   CD 42 3F               CALL   execStr   
3D03   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
3D0F                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
3D0F   E1                     POP   HL   
3D10   E5                     PUSH   HL   
3D11   11 00 00               LD   DE,NUL   
3D14   B7                     OR   A   
3D15   ED 52                  SBC   HL,DE   
3D17   7D                     LD   A,L   
3D18   B4                     OR   H   
3D19   28 56                  JR   Z,expectM_0_2547S43   
3D1B   CD 3D 0A               CALL   printStr   
3D1E   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
3D30   CD 3D 0A               CALL   printStr   
3D33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D42   21 00 00               LD   HL,NUL   
3D45   CD 8B 09               CALL   prtdec   
3D48   CD 3D 0A               CALL   printStr   
3D4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D58   E1                     POP   hl   
3D59   E5                     PUSH   hl   
3D5A   CD 8B 09               CALL   prtdec   
3D5D   E1                     POP   hl   
3D5E   CD 3D 0A               CALL   printStr   
3D61   20 28 23 00            .CSTR   " (#"   
3D65   CD D3 09               CALL   prthex   
3D68   CD 3D 0A               CALL   printStr   
3D6B   29 0D 0A 00            .CSTR   ")\r\n"   
3D6F   76                     HALT      
3D70   00                     .CSTR      
3D71                EXPECTM_0_2547S43:      
3D71   E1                     POP   HL   
3D72                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
3D72   31 80 40               LD   SP,STACK   
3D75   CD 44 0A               CALL   init   
3D78   CD 42 3F               CALL   execStr   
3D7B   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
3D83                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
3D83   E1                     POP   HL   
3D84   E5                     PUSH   HL   
3D85   11 66 41               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3D88   B7                     OR   A   
3D89   ED 52                  SBC   HL,DE   
3D8B   7D                     LD   A,L   
3D8C   B4                     OR   H   
3D8D   28 52                  JR   Z,expectM_0_2548S43   
3D8F   CD 3D 0A               CALL   printStr   
3D92   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
3DA0   CD 3D 0A               CALL   printStr   
3DA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB2   21 66 41               LD   HL,VARS + (("z"-"a")+("Z"-"A")+1)*2   
3DB5   CD 8B 09               CALL   prtdec   
3DB8   CD 3D 0A               CALL   printStr   
3DBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC8   E1                     POP   hl   
3DC9   E5                     PUSH   hl   
3DCA   CD 8B 09               CALL   prtdec   
3DCD   E1                     POP   hl   
3DCE   CD 3D 0A               CALL   printStr   
3DD1   20 28 23 00            .CSTR   " (#"   
3DD5   CD D3 09               CALL   prthex   
3DD8   CD 3D 0A               CALL   printStr   
3DDB   29 0D 0A 00            .CSTR   ")\r\n"   
3DDF   76                     HALT      
3DE0   00                     .CSTR      
3DE1                EXPECTM_0_2548S43:      
3DE1   E1                     POP   HL   
3DE2                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
3DE2   31 80 40               LD   SP,STACK   
3DE5   CD 44 0A               CALL   init   
3DE8   CD 42 3F               CALL   execStr   
3DEB   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
3DF3                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
3DF3   E1                     POP   HL   
3DF4   E5                     PUSH   HL   
3DF5   11 34 41               LD   DE,VARS + ("Z"-"A"+1)*2   
3DF8   B7                     OR   A   
3DF9   ED 52                  SBC   HL,DE   
3DFB   7D                     LD   A,L   
3DFC   B4                     OR   H   
3DFD   28 52                  JR   Z,expectM_0_2549S43   
3DFF   CD 3D 0A               CALL   printStr   
3E02   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
3E10   CD 3D 0A               CALL   printStr   
3E13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E22   21 34 41               LD   HL,VARS + ("Z"-"A"+1)*2   
3E25   CD 8B 09               CALL   prtdec   
3E28   CD 3D 0A               CALL   printStr   
3E2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E38   E1                     POP   hl   
3E39   E5                     PUSH   hl   
3E3A   CD 8B 09               CALL   prtdec   
3E3D   E1                     POP   hl   
3E3E   CD 3D 0A               CALL   printStr   
3E41   20 28 23 00            .CSTR   " (#"   
3E45   CD D3 09               CALL   prthex   
3E48   CD 3D 0A               CALL   printStr   
3E4B   29 0D 0A 00            .CSTR   ")\r\n"   
3E4F   76                     HALT      
3E50   00                     .CSTR      
3E51                EXPECTM_0_2549S43:      
3E51   E1                     POP   HL   
3E52                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
3E52   31 80 40               LD   SP,STACK   
3E55   CD 44 0A               CALL   init   
3E58   CD 42 3F               CALL   execStr   
3E5B   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
3E63                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
3E63   E1                     POP   HL   
3E64   E5                     PUSH   HL   
3E65   11 32 41               LD   DE,VARS + ("Z"-"A")*2   
3E68   B7                     OR   A   
3E69   ED 52                  SBC   HL,DE   
3E6B   7D                     LD   A,L   
3E6C   B4                     OR   H   
3E6D   28 52                  JR   Z,expectM_0_2550S43   
3E6F   CD 3D 0A               CALL   printStr   
3E72   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
3E80   CD 3D 0A               CALL   printStr   
3E83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E92   21 32 41               LD   HL,VARS + ("Z"-"A")*2   
3E95   CD 8B 09               CALL   prtdec   
3E98   CD 3D 0A               CALL   printStr   
3E9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EA8   E1                     POP   hl   
3EA9   E5                     PUSH   hl   
3EAA   CD 8B 09               CALL   prtdec   
3EAD   E1                     POP   hl   
3EAE   CD 3D 0A               CALL   printStr   
3EB1   20 28 23 00            .CSTR   " (#"   
3EB5   CD D3 09               CALL   prthex   
3EB8   CD 3D 0A               CALL   printStr   
3EBB   29 0D 0A 00            .CSTR   ")\r\n"   
3EBF   76                     HALT      
3EC0   00                     .CSTR      
3EC1                EXPECTM_0_2550S43:      
3EC1   E1                     POP   HL   
3EC2                          ;*Macro unroll:  test "'A' /ad", VARS
3EC2   31 80 40               LD   SP,STACK   
3EC5   CD 44 0A               CALL   init   
3EC8   CD 42 3F               CALL   execStr   
3ECB   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
3ED3                          ;*Macro unroll:  expect "'A' /ad",VARS
3ED3   E1                     POP   HL   
3ED4   E5                     PUSH   HL   
3ED5   11 00 41               LD   DE,VARS   
3ED8   B7                     OR   A   
3ED9   ED 52                  SBC   HL,DE   
3EDB   7D                     LD   A,L   
3EDC   B4                     OR   H   
3EDD   28 52                  JR   Z,expectM_0_2551S43   
3EDF   CD 3D 0A               CALL   printStr   
3EE2   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
3EF0   CD 3D 0A               CALL   printStr   
3EF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F02   21 00 41               LD   HL,VARS   
3F05   CD 8B 09               CALL   prtdec   
3F08   CD 3D 0A               CALL   printStr   
3F0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F18   E1                     POP   hl   
3F19   E5                     PUSH   hl   
3F1A   CD 8B 09               CALL   prtdec   
3F1D   E1                     POP   hl   
3F1E   CD 3D 0A               CALL   printStr   
3F21   20 28 23 00            .CSTR   " (#"   
3F25   CD D3 09               CALL   prthex   
3F28   CD 3D 0A               CALL   printStr   
3F2B   29 0D 0A 00            .CSTR   ")\r\n"   
3F2F   76                     HALT      
3F30   00                     .CSTR      
3F31                EXPECTM_0_2551S43:      
3F31   E1                     POP   HL   
3F32                             ; 
3F32   CD 3D 0A               CALL   printStr   
3F35   44 6F 6E 65 21 00      .CSTR   "Done!"   
3F3B   76                     HALT      
3F3C                          ALIGN   2   
3F3C                PRINTER:      
3F3C   E1                     POP   hl   
3F3D   CD 8B 09               CALL   prtdec   
3F40   DD E9                  JP   (ix)   
3F42                             ; executes a null teminated string (null executes exit_)
3F42                             ; the string should be immedaitely following the call
3F42                EXECSTR:      ; create a root stack frame
3F42   C1                     POP   bc   ; bc = code*
3F43   0B                     DEC   bc   ; dec to prepare for next routine
3F44   11 00 00               LD   de,0   
3F47   D5                     PUSH   de   ; push fake IP
3F48   D5                     PUSH   de   ; push null arg_list*
3F49   D5                     PUSH   de   ; push null first_arg*
3F4A   D5                     PUSH   de   ; push fake BP
3F4B   DD E9                  JP   (ix)   
3F4D                          ALIGN   $100   
4000                             ; .org RAMSTART
4000                          DS   DSIZE   
4080                STACK:       
4080                          ALIGN   $100   
4100                VARS:        
4100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
41D0                RESTARTS:      
41D0                RST08:    DS   2   
41D2                RST10:    DS   2   
41D4                RST18:    DS   2   
41D6                RST20:    DS   2   
41D8                RST28:    DS   2   
41DA                RST30:    DS   2   ; 
41DC                BAUD:     DS   2   ; 
41DE                INTVEC:   DS   2   ; 
41E0                NMIVEC:   DS   2   ; 
41E2                GETCVEC:   DS   2   ; 
41E4                PUTCVEC:   DS   2   ; 
41E6                SYSVARS:      
41E6                             ; initialised sys variables (preserved)
41E6                VDATAWIDTH:   DS   2   ; 
41E8                VTIBPTR:   DS   2   ; 
41EA                VNEXT:    DS   2   ; 
41EC                VHEAPPTR:   DS   2   ; 
41EE                             ; uninitialised sys variables (preserved)
41EE                VPOINTER:   DS   2   ; 
41F0                VREMAIN:   DS   2   ; 
41F2                VSAVEDIP:   DS   2   ; 
41F4                VSAVEDSP:   DS   2   ; 
41F6                VSAVEDBP:   DS   2   ; 
41F8                VCHECKSUM:   DS   2   ; 
41FA                             ; uninitialised sys variables (unpreserved)
41FA                VTEMP1:   DS   2   ; 
41FC                VTEMP2:   DS   2   ; 
41FE                VLASTDEF:   DS   2   ; 
4200                VHASHSTR:   DS   2   ; 
4202                TBPTR:    DS   2   ; reserved for tests
4204                          ALIGN   $100   
4300                TIB:      DS   TIBSIZE   
4400                          ALIGN   $100   
4400                PAD:      DS   $100   
4500                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 58 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0989 DEFINED AT LINE 1504 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 29 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 22 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 26 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 27 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 28 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 31 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 63 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 68 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 112 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 215 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 217 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 219 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 221 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 223 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 225 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 227 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 229 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 231 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 233 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 235 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 237 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 239 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 241 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 243 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 245 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 247 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 249 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 251 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 253 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 255 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 260 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 262 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 264 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 266 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 268 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 270 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 272 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 285 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 293 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 295 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 307 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 309 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 311 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
ADD:                038A DEFINED AT LINE 319 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
AT:                 03A4 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADDR:               03A4 DEFINED AT LINE 344 IN MAIN.asm
AMPER:              03B0 DEFINED AT LINE 351 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
AND:                03B0 DEFINED AT LINE 352 IN MAIN.asm
AND1:               03B7 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
PIPE:               03BB DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
OR:                 03BB DEFINED AT LINE 365 IN MAIN.asm
XOR:                03C4 DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
XOR1:               03C5 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
INVERT:             03CF DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
DOLLAR:             03D4 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARG:                03D4 DEFINED AT LINE 395 IN MAIN.asm
ARG0:               03F2 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARG0A:              03FB DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
ARG1:               0400 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG1A:              0408 DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
LBRACK:             040B DEFINED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARRBEGIN:           040B DEFINED AT LINE 439 IN MAIN.asm
RBRACK:             0427 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARREND:             0427 DEFINED AT LINE 454 IN MAIN.asm
ARREND1:            0441 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARREND2:            0451 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
ARRINDEX:           0475 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARRINDEX0:          047D DEFINED AT LINE 513 IN MAIN.asm
ARRINDEX1:          047E DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRINDEX2:          048A DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ASSIGN:             048D DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ASSIGN0:            048F DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
ASSIGNX:            0490 DEFINED AT LINE 534 IN MAIN.asm
ASSIGN1:            049C DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
COLON:              049E DEFINED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
ARGLIST:            049E DEFINED AT LINE 550 IN MAIN.asm
ARGLIST1:           04A8 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
ARGLIST1A:          04B0 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
ARGLIST2:           04B8 DEFINED AT LINE 568 IN MAIN.asm
ARGLIST3:           04C0 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
ARGLIST4:           04C3 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
ARGLIST5:           04C9 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
LBRACE:             04D5 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
BLOCK:              04D5 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
BLOCK1:             04D9 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCK2:             0505 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
BLOCK3:             0508 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
BLOCK4:             0510 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
BLOCK5:             0513 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCK6:             053B DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
RBRACE:             053E DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCKEND:           053E DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
BLOCKEND1:          056A DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND2:          0576 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
BLOCKEND3:          0588 DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
TICK:               0593 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
CHAR:               0593 DEFINED AT LINE 719 IN MAIN.asm
CHAR1:              0596 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
CHAR2:              05A2 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
CHAR3:              05A5 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
BACKSLASH:          05A8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
COMMA:              05AA DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
DISCARD:            05AA DEFINED AT LINE 743 IN MAIN.asm
DISCARD1:           05B7 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
SLASH:              05B9 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
DOT:                05D7 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
DOT1:               05E3 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
DOT2:               05EC DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
DOT3:               05F6 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DOT4:               05FA DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
DIVIDE:             0601 DEFINED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DIVIDE1:            0606 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
DIVIDE2:            0613 DEFINED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
DIVIDE3:            0614 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
EQUALS:             061A DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LESSTHANEQ:         0622 DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
LESSTHAN:           0627 DEFINED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN1:          062C DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
TRUE1:              062F DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
NULL1:              0635 DEFINED AT LINE 851 IN MAIN.asm
FALSE1:             0635 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
LPAREN:             063B DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
CARET:              063E DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
GO:                 063E DEFINED AT LINE 864 IN MAIN.asm
GO1:                063F DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
GO2:                0645 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
GOBLOCK:            0651 DEFINED AT LINE 879 IN MAIN.asm
GOBLOCK1:           0651 DEFINED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
GOBLOCK2:           0676 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
GOFUNC:             0684 DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
GOFUNC1:            069D DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOFUNC2:            06A3 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
GOFUNC3:            06AE DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
GOFUNC4:            06C6 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
GOFUNC5:            06CA DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
GOFUNC6:            06CD DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
GOFUNC7:            06D0 DEFINED AT LINE 966 IN MAIN.asm
GOFUNC8:            06D5 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
HASH:               06E0 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
HEXNUM:             06E0 DEFINED AT LINE 982 IN MAIN.asm
HEXNUM1:            06E3 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
HEXNUM2:            06EB DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
UPCASE:             06FD DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
LOWCASE:            0702 DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
IDENT1:             0707 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
QUESTION:           0714 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IF:                 0714 DEFINED AT LINE 1024 IN MAIN.asm
IFTE:               0720 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
IFTE1:              0721 DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
STAR:               072D DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
MUL:                072D DEFINED AT LINE 1047 IN MAIN.asm
MUL2:               072F DEFINED AT LINE 1050 IN MAIN.asm
MUL3:               0737 DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
NUM:                0749 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
NUM0:               0752 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
NUM1:               0753 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
NUM2:               076B DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
NUM3:               0776 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
UNDERSCORE:         0779 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
REMAIN:             0779 DEFINED AT LINE 1107 IN MAIN.asm
RPAREN:             077F DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SEMICOLON:          0787 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
SHIFTLEFT:          07A3 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
SHIFTLEFT1:         07AB DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
SHIFTLEFT2:         07AC DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
SHIFTRIGHT:         07B3 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
SHIFTRIGHT1:        07BB DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
SHIFTRIGHT2:        07BF DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
DBLQUOTE:           07C6 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
STRING:             07C6 DEFINED AT LINE 1179 IN MAIN.asm
STRING1:            07CF DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRING2:            07D2 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
STRING3:            07DB DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
MINUS:              07EE DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
SUB:                07FA DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
SUB1:               0804 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
COMMAND:            080D DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
ERROR1:             084D DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
COMMAND_A:          0853 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
COMMAND_B:          0861 DEFINED AT LINE 1281 IN MAIN.asm
COMMAND_I:          086A DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
COMMAND_P:          0878 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
COMMAND_V:          088B DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
COMMENT:            0894 DEFINED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
ABSOLUTE:           089D DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
ADDROF:             08AA DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
ADDROF1:            08BE DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1348 IN MAIN.asm
ADDROF2:            08C9 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
BREAK:              08CB DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
BREAK1:             08D2 DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
PARTIAL:            08E5 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
PRINTSTACK:         0905 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
PRINTSTACK1:        0920 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
PRINTSTACK2:        092F DEFINED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
PRINTTIB:           093C DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
PRINTTIB1:          0948 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
PRINTTIB2:          094E DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
CHARS:              0952 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
CHARS1:             0955 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
HEAPPTR:            095A DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
INPUT:              0966 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
KEY:                0971 DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
OUTPUT:             097A DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
NUMBERS:            0983 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
FILTER:             0989 DEFINED AT LINE 1502 IN MAIN.asm
MAP:                0989 DEFINED AT LINE 1503 IN MAIN.asm
PRTDEC:             098B DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 143
PRTDEC0:            099A DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
PRTDEC1:            09BC DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
PRTDEC2:            09BE DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
PRTDEC3:            09CE DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRTDEC4:            09CF DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
PRTHEX:             09D3 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            09DE DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
PRTHEX3:            09E7 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
PRTSTR0:            09F2 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
PRTSTR:             09F6 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
NESTING:            09FB DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
NESTING0:           0A05 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
NESTING1A:          0A0C DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
NESTING1:           0A0F DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
NESTING2:           0A1E DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
NESTING3:           0A20 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
NESTING4:           0A2B DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
PROMPT:             0A2D DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
CRLF:               0A36 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
PRINTSTR:           0A3D DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 136
INIT:               0A44 DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0A5D DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
START:              0A62 DEFINED AT LINE 1673 IN MAIN.asm
INTERPRET:          0A78 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
INTERPRET2:         0A82 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
INTERPRET3:         0A8A DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
INTERPRET4:         0A90 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
INTERPRET5:         0A95 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
INTERPRET5A:        0AB8 DEFINED AT LINE 1740 IN MAIN.asm
INTERPRET6:         0ABA DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
INTERPRET7:         0AC8 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
INTERPRET8:         0ADB DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
NEXT:               0AE3 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
NEXT1:              0AF2 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
EXIT:               0AF9 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
RUN:                0AFD DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
ERROR:              0B01 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
BACKSPACE_:         0B11 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
EDIT_:              0B21 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
REEDIT_:            0B39 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
PRINTSTACK_:        0B3C DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
TESTSSTART:         0C00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2442S43:  0C65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2443S43:  0CCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2444S43:  0D2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2445S43:  0D93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2446S43:  0DF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2447S43:  0E5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2448S43:  0EC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2449S43:  0F29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2450S43:  0F8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2451S43:  0FF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2452S43:  105D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2453S43:  10C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2454S43:  112F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2455S43:  1197 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2456S43:  1205 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2457S43:  1273 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2458S43:  12DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2459S43:  134F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2460S43:  13C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2461S43:  1435 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2462S43:  14A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2463S43:  1515 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2464S43:  158D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2465S43:  15FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2466S43:  1669 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2467S43:  16D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2468S43:  1749 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2469S43:  17C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2470S43:  182F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2471S43:  18A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2472S43:  1915 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2473S43:  198F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2474S43:  19FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2475S43:  1A79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2476S43:  1AE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2477S43:  1B61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2478S43:  1BD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2479S43:  1C41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2480S43:  1CBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2481S43:  1D2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2482S43:  1D99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2483S43:  1E07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2484S43:  1E75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2485S43:  1EE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2486S43:  1F4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2487S43:  1FB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2488S43:  2025 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2489S43:  2091 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2490S43:  20FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2491S43:  2169 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2492S43:  21D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2493S43:  2243 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2494S43:  22B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2495S43:  231F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2496S43:  238F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2497S43:  23FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2498S43:  2469 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2499S43:  24D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2500S43:  2543 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2501S43:  25B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2502S43:  262F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2503S43:  26A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2504S43:  272D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2505S43:  27B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2506S43:  281D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2507S43:  288B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2508S43:  28FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2509S43:  296D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2510S43:  29DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2511S43:  2A4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2512S43:  2ABB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2513S43:  2B31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2514S43:  2BAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2515S43:  2C21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2516S43:  2CA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2517S43:  2D23 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2518S43:  2DAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2519S43:  2E37 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2520S43:  2EB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2521S43:  2F39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2522S43:  2FBF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2523S43:  3047 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2524S43:  30CD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2525S43:  3161 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2526S43:  31E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2527S43:  3271 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2528S43:  3301 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2529S43:  3393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2530S43:  3431 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2531S43:  34CF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2532S43:  354B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2533S43:  35C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2534S43:  364F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2535S43:  36D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2536S43:  376F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2537S43:  380F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2538S43:  38AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2539S43:  3937 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2540S43:  39CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2541S43:  3A59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2542S43:  3AED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2543S43:  3B91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2544S43:  3C09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2545S43:  3C81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2546S43:  3CF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2547S43:  3D71 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2548S43:  3DE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2549S43:  3E51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2550S43:  3EC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2551S43:  3F31 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3F3C DEFINED AT LINE 141
EXECSTR:            3F42 DEFINED AT LINE 148
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              4080 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               4100 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           41D0 DEFINED AT LINE 11 IN ram.asm
RST08:              41D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              41D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              41D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              41D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              41D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              41DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               41DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             41DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             41E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            41E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            41E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            41E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1661 IN MAIN.asm
VDATAWIDTH:         41E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
VTIBPTR:            41E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
VNEXT:              41EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1658 IN MAIN.asm
VHEAPPTR:           41EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
VPOINTER:           41EE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
VREMAIN:            41F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
VSAVEDIP:           41F2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           41F4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           41F6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          41F8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             41FA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
VTEMP2:             41FC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
VLASTDEF:           41FE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           4200 DEFINED AT LINE 49 IN ram.asm
TBPTR:              4202 DEFINED AT LINE 50 IN ram.asm
TIB:                4300 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
PAD:                4400 DEFINED AT LINE 56 IN ram.asm
HEAP:               4500 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
