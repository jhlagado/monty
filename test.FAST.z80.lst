0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 55               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 55               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 55               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 55               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 55               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 55               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 55               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 55               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 55               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 55               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 53               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 55               LD   (RST08),HL   
0094   22 D2 55               LD   (RST10),HL   
0097   22 D4 55               LD   (RST18),HL   
009A   22 D6 55               LD   (RST20),HL   
009D   22 D8 55               LD   (RST28),HL   
00A0   22 DA 55               LD   (RST30),HL   
00A3   22 DE 55               LD   (INTVEC),HL   
00A6   22 E0 55               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 55               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 55               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 53                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 54                  DW   BUF   ; vBUFPtr pointer into BUF
0188   FB 0D                  DW   next   ; nNext
018A   1C 56                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 7E 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 15 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 31 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 E0 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 0E 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 77 05               JP   rbrace   
031B                TICK_:       
031B   C3 FE 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 E7 06               JP   semicolon   
0321                DOT_:        
0321   C3 B1 07               JP   dot   
0324                COLON_:      
0324   C3 99 04               JP   colon   
0327                UPCASE_:      
0327   C3 9B 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 A0 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 B2 0A               JP   question   
0330                STAR_:       
0330   C3 38 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 0D 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 54 0B               JP   num   
0347                HASH_:       
0347   C3 81 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 DF 09               JP   caret   
0350                COMMA_:      
0350   C3 83 07               JP   comma   
0353                DQUOTE_:      
0353   C3 B9 0B               JP   dquote   
0356                MINUS_:      
0356   C3 E1 0B               JP   minus   
0359                EQ_:         
0359   CD 97 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   CF 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 05 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA A6 0B               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 96 0B               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 16 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1B 09               JP   lessthan   
0384                SLASH_:      
0384   C3 13 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 8E 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D1 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D1 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 55            LD   de,(vPointer)   
03AD   21 F4 55               LD   hl,vPointer   
03B0   C3 78 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   CD 97 0C               CALL   jumpTable   
03C1   3E                     DB   ">"   
03C2   84 0B                  DW   pipeStream   
03C4   00                     DB   NUL   
03C5   C7 03                  DW   or   
03C7                OR:          
03C7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   B5                     OR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   B4                     OR   h   
03CE   18 EA                  JR   and1   
03D0                XOR:         
03D0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D1                XOR1:        
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   AD                     XOR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   AC                     XOR   h   
03D7   67                     LD   h,a   
03D8   E5                     PUSH   hl   
03D9   DD E9                  JP   (ix)   
03DB                INVERT:      ; Bitwise INVert the top member of the stack
03DB   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03DE   18 F1                  JR   xor1   
03E0                             ; %a .. %z
03E0                             ; -- value
03E0                             ; returns value of arg
03E0                PERCENT:      
03E0                ARG:         
03E0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03E3   FD 56 05               LD   d,(iy+5)   
03E6   EB                     EX   de,hl   
03E7   7D                     LD   a,l   ; arg_list* == null, skip
03E8   B4                     OR   h   
03E9   28 1A                  JR   z,arg0a   
03EB   23                     INC   hl   ; a = num_args, hl = arg_list*
03EC   7E                     LD   a,(hl)   
03ED   23                     INC   hl   
03EE   B7                     OR   a   
03EF   28 14                  JR   z,arg0a   ; num_args == 0, skip
03F1   5F                     LD   e,a   ; e = a = num_args
03F2   03                     INC   bc   ; a = next char = dollar_name
03F3   0A                     LD   a,(bc)   
03F4   C5                     PUSH   bc   ; save IP
03F5   43                     LD   b,e   ; b = e = num_args
03F6   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F9   FD 56 03               LD   d,(iy+3)   
03FC                ARG0:        
03FC   1B                     DEC   de   ; a = dollar_name, de = next arg*
03FD   1B                     DEC   de   
03FE   BE                     CP   (hl)   
03FF   28 09                  JR   z,arg1   
0401   23                     INC   hl   ; hl = next arg_list*
0402   10 F8                  DJNZ   arg0   
0404   C1                     POP   bc   ; no match, restore IP
0405                ARG0A:       
0405   11 00 00               LD   de,0   ; return 0
0408   18 08                  JR   arg1a   
040A                ARG1:        
040A   C1                     POP   bc   ; restore IP
040B   EB                     EX   de,hl   ; hl = arg*
040C   22 F4 55               LD   (vPointer),hl   ; store arg* in setter
040F   5E                     LD   e,(hl)   
0410   23                     INC   hl   
0411   56                     LD   d,(hl)   ; de = arg
0412                ARG1A:       
0412   D5                     PUSH   de   ; push arg
0413   DD E9                  JP   (ix)   
0415                LBRACK:      
0415                ARRAYSTART:      
0415   11 00 00               LD   de,0   ; create stack frame
0418   D5                     PUSH   de   ; push null for IP
0419   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
041C   FD 56 05               LD   d,(iy+5)   ; 
041F   D5                     PUSH   de   ; 
0420   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0423   FD 56 03               LD   d,(iy+3)   ; 
0426   D5                     PUSH   de   ; 
0427   FD E5                  PUSH   iy   ; push BP
0429   FD 21 00 00            LD   iy,0   ; BP = SP
042D   FD 39                  ADD   iy,sp   
042F   DD E9                  JP   (ix)   
0431                RBRACK:      
0431                ARRAYEND:      
0431   FD 54                  LD   d,iyh   ; de = BP
0433   FD 5D                  LD   e,iyl   
0435   ED 43 00 56            LD   (vTemp1),bc   ; save IP
0439   62 6B                  LD   hl,de   ; hl = de = BP
043B   B7                     OR   a   
043C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
043E   CB 3C                  SRL   h   ; 
0440   CB 1D                  RR   l   
0442   44 4D                  LD   bc,hl   ; bc = count
0444   2A F0 55               LD   hl,(vHeapPtr)   ; hl = array[-4]
0447   71                     LD   (hl),c   ; write num items in length word
0448   23                     INC   hl   
0449   70                     LD   (hl),b   
044A   23                     INC   hl   ; hl = array[0], bc = count
044B                             ; de = BP, hl = array[0], bc = count
044B   18 15                  JR   arrayEnd3   
044D                ARRAYEND1:      
044D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0450   77                     LD   (hl),a   ; write lsb of array item
0451   23                     INC   hl   ; move to msb of array item
0452   3A E6 55               LD   a,(vDataWidth)   ; vDataWidth=1?
0455   3D                     DEC   a   
0456   28 05                  JR   z,arrayEnd2   
0458   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
045B   77                     LD   (hl),a   ; write msb of array item
045C   23                     INC   hl   ; move to next word in array
045D                ARRAYEND2:      
045D   FD 2B                  DEC   iy   ; move to next word on stack
045F   FD 2B                  DEC   iy   
0461   0B                     DEC   bc   ; dec items count
0462                ARRAYEND3:      
0462   79                     LD   a,c   ; if not zero loop
0463   B0                     OR   b   
0464   20 E7                  JR   nz,arrayEnd1   
0466   EB                     EX   de,hl   ; de = end of array, hl = BP
0467   F9                     LD   sp,hl   ; sp = BP
0468   E1                     POP   hl   ; de = end of array, hl = old BP
0469   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
046A   FD 62                  LD   iyh,d   
046C   FD 6B                  LD   iyl,e   
046E   D1                     POP   de   ; pop arg_list (discard)
046F   D1                     POP   de   ; pop first_arg* (discard)
0470   D1                     POP   de   ; pop IP (discard)
0471   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = array[-2]
0475   13                     INC   de   
0476   13                     INC   de   
0477   D5                     PUSH   de   ; return array[0]
0478   22 F0 55               LD   (vHeapPtr),hl   ; move heap* to end of array
047B   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
047F   DD E9                  JP   (ix)   
0481                             ; index of an array, based on vDataWidth
0481                             ; array num -- value    ; also sets vPointer to address
0481                HASH:        
0481                ARRAYINDEX:      
0481   E1                     POP   hl   ; hl = index
0482   D1                     POP   de   ; de = array
0483   3A E6 55               LD   a,(vDataWidth)   ; a = data width
0486   3D                     DEC   a   
0487   28 01                  JR   z,arrayIndex1   
0489                ARRAYINDEX0:      
0489   29                     ADD   hl,hl   ; if data width = 2 then double
048A                ARRAYINDEX1:      
048A   19                     ADD   hl,de   ; add addr
048B   22 F4 55               LD   (vPointer),hl   ; store address in setter
048E   16 00                  LD   d,0   
0490   5E                     LD   e,(hl)   
0491   B7                     OR   a   ; check data width again
0492   28 02                  JR   z,arrayIndex2   
0494   23                     INC   hl   
0495   56                     LD   d,(hl)   
0496                ARRAYINDEX2:      
0496   D5                     PUSH   de   
0497   DD E9                  JP   (ix)   
0499                             ; arg_list - parses input (ab:c)
0499                             ; names after the : represent uninitialised locals
0499                             ; return values are the state of the stack after the block ends
0499                             ; format: numLocals totNumArgs argChars...
0499                COLON:       
0499                ARGLIST:      
0499   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049C   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
049F   E5                     PUSH   hl   ; save start of arg_list
04A0   23                     INC   hl   ; skip length fields to start of string
04A1   23                     INC   hl   
04A2   03                     INC   bc   ; point to next char
04A3                ARGLIST1:      
04A3   0A                     LD   a,(bc)   
04A4   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A6   20 03                  JR   nz,arglist1a   
04A8   14                     INC   d   ; non zero value local count acts as flag
04A9   18 10                  JR   arglist3   
04AB                ARGLIST1A:      
04AB   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AD   38 0F                  JR   c,arglist4   
04AF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B1   30 0B                  JR   nc,arglist4   
04B3                ARGLIST2:      
04B3   77                     LD   (hl),a   
04B4   23                     INC   hl   
04B5   1C                     INC   e   ; increase arg count
04B6   AF                     XOR   a   
04B7   B2                     OR   d   
04B8   28 01                  JR   z,arglist3   
04BA   14                     INC   d   ; if d > 0 increase local count
04BB                ARGLIST3:      
04BB   03                     INC   bc   ; point to next char
04BC   18 E5                  JR   arglist1   
04BE                ARGLIST4:      
04BE   0B                     DEC   bc   
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arglist5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARGLIST5:      
04C4   23                     INC   hl   
04C5   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of arg_list
04CA   72                     LD   (hl),d   ; write number of locals at start - 1
04CB   23                     INC   hl   
04CC   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CD   DD E9                  JP   (ix)   
04CF                             ; value _oldValue --            ; uses address in vPointer
04CF                ASSIGN:      
04CF   E1                     POP   hl   ; discard last accessed value
04D0   E1                     POP   hl   ; hl = new value
04D1                ASSIGN0:      
04D1   EB                     EX   de,hl   ; de = new value
04D2                ASSIGNX:      
04D2   2A F4 55               LD   hl,(vPointer)   
04D5   73                     LD   (hl),e   
04D6   3A E6 55               LD   a,(vDataWidth)   
04D9   3D                     DEC   a   ; is it byte?
04DA   28 02                  JR   z,assign1   
04DC   23                     INC   hl   
04DD   72                     LD   (hl),d   
04DE                ASSIGN1:      
04DE   DD E9                  JP   (ix)   
04E0                             ; /ab absolute
04E0                             ; num -- num
04E0                ABSOLUTE:      
04E0   E1                     POP   hl   
04E1   CB 7C                  BIT   7,h   
04E3   C8                     RET   z   
04E4   AF                     XOR   a   
04E5   95                     SUB   l   
04E6   6F                     LD   l,a   
04E7   9F                     SBC   a,a   
04E8   94                     SUB   h   
04E9   67                     LD   h,a   
04EA   E5                     PUSH   hl   
04EB   DD E9                  JP   (ix)   
04ED                             ; /ad addrOf
04ED                             ; char -- addr
04ED                ADDROF:      
04ED   E1                     POP   hl   ; a = char
04EE   7D                     LD   a,l   
04EF   FE 7B                  CP   "z"+1   ; if a > z then exit
04F1   30 19                  JR   nc,addrOf2   
04F3   D6 41                  SUB   "A"   ; a - 65
04F5   38 15                  JR   c,addrOf2   ; if < A then exit
04F7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F9   38 06                  JR   c,addrOf1   
04FB   D6 06                  SUB   "a"-("Z"+1)   
04FD   FE 1A                  CP   "Z"-"A"+1   
04FF   38 0B                  JR   c,addrOf2   ; if < a then exit
0501                ADDROF1:      
0501   87                     ADD   a,a   ; double a
0502   21 00 55               LD   hl,VARS   ; hl = VARS + a
0505   85                     ADD   a,l   
0506   6F                     LD   l,a   
0507   3E 00                  LD   a,0   
0509   8C                     ADC   a,h   
050A   67                     LD   h,a   
050B   E5                     PUSH   hl   
050C                ADDROF2:      
050C   DD E9                  JP   (ix)   
050E                LBRACE:      
050E                BLOCKSTART:      
050E   C5                     PUSH   bc   ; return pointer to first { of block
050F   03                     INC   bc   
0510   16 01                  LD   d,1   ; nesting: count first parenthesis
0512                BLOCKSTART1:      ; Skip to end of definition
0512   0A                     LD   a,(bc)   ; Get the next character
0513   03                     INC   bc   ; Point to next character
0514   FE 21                  CP   " " + 1   ; ignore whitespace
0516   38 FA                  JR   c,blockStart1   
0518   FE 29                  CP   ")"   
051A   28 2D                  JR   z,blockStart4   
051C   FE 7D                  CP   "}"   
051E   28 29                  JR   z,blockStart4   
0520   FE 5D                  CP   "]"   
0522   28 25                  JR   z,blockStart4   
0524   FE 28                  CP   "("   
0526   28 16                  JR   z,blockStart2   
0528   FE 7B                  CP   "{"   
052A   28 12                  JR   z,blockStart2   
052C   FE 5B                  CP   "["   
052E   28 0E                  JR   z,blockStart2   
0530   FE 27                  CP   "'"   
0532   28 0D                  JR   z,blockStart3   
0534   FE 60                  CP   "`"   
0536   28 09                  JR   z,blockStart3   
0538   FE 22                  CP   DQ   
053A   28 05                  JR   z,blockStart3   
053C   18 D4                  JR   blockStart1   
053E                BLOCKSTART2:      
053E   14                     INC   d   
053F   18 D1                  JR   blockStart1   
0541                BLOCKSTART3:      
0541   3E 80                  LD   a,$80   
0543   AA                     XOR   d   
0544   57                     LD   d,a   
0545   20 CB                  JR   nz,blockStart1   
0547   18 03                  JR   blockStart5   
0549                BLOCKSTART4:      
0549   15                     DEC   d   
054A   20 C6                  JR   nz,blockStart1   ; get the next element
054C                BLOCKSTART5:      
054C   60 69                  LD   hl,bc   ; hl = IP
054E   11 1C 56               LD   de,HEAP   ; is IP pointing to object in heap
0551   B7                     OR   a   ; IP - HEAP
0552   ED 52                  SBC   hl,de   
0554   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0556   28 1C                  JR   z,blockStart6   
0558   60 69                  LD   hl,bc   ; hl = IP
055A   D1                     POP   de   ; de = block*
055B   ED 43 00 56            LD   (vTemp1),bc   ; save IP
055F   B7                     OR   a   ; bc = size
0560   ED 52                  SBC   hl,de   
0562   44 4D                  LD   bc,hl   
0564   EB                     EX   de,hl   ; hl = block* de = heap*
0565   ED 5B F0 55            LD   de,(vHeapPtr)   
0569   D5                     PUSH   de   ; return hblock*
056A   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056C   ED 53 F0 55            LD   (vHeapPtr),de   ; heap* += size
0570   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0574                BLOCKSTART6:      
0574   0B                     DEC   bc   ; balanced, exit
0575   DD E9                  JP   (ix)   
0577                RBRACE:      
0577                BLOCKEND:      
0577   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057A   FD 56 01               LD   d,(iy+1)   
057D   ED 53 00 56            LD   (vTemp1),de   
0581   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0584   FD 56 07               LD   d,(iy+7)   
0587   ED 53 02 56            LD   (vTemp2),de   
058B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
058E   FD 56 03               LD   d,(iy+3)   
0591   EB                     EX   de,hl   
0592   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0595   FD 56 01               LD   d,(iy+1)   
0598   13                     INC   de   ; for carry flag <=
0599   B7                     OR   a   
059A   ED 52                  SBC   hl,de   
059C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
059E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A0   FD 5D                  LD   e,iyl   
05A2   21 08 00               LD   hl,8   
05A5   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A6   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A7   18 0C                  JR   blockEnd2   
05A9                BLOCKEND1:      ; same scope
05A9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AC   FD 56 03               LD   d,(iy+3)   
05AF   EB                     EX   de,hl   
05B0   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B2   FD 5D                  LD   e,iyl   
05B4   EB                     EX   de,hl   
05B5                BLOCKEND2:      
05B5   44 4D                  LD   bc,hl   ; bc = hl = BP
05B7   B7                     OR   a   ; hl = BP - SP = count
05B8   ED 72                  SBC   hl,sp   
05BA   7D                     LD   a,l   
05BB   B4                     OR   h   
05BC   28 09                  JR   z,blockEnd3   
05BE   C5                     PUSH   bc   ; bc = count, hl = BP
05BF   44 4D                  LD   bc,hl   
05C1   E1                     POP   hl   
05C2   2B                     DEC   hl   ; hl = BP-1
05C3   1B                     DEC   de   ; de = args*-1
05C4   ED B8                  LDDR      
05C6   13                     INC   de   
05C7                BLOCKEND3:      
05C7   EB                     EX   de,hl   ; sp = de = new tos*
05C8   F9                     LD   sp,hl   
05C9   ED 4B 02 56            LD   bc,(vTemp2)   
05CD   FD 2A 00 56            LD   iy,(vTemp1)   
05D1   ED 5B F2 55            LD   de,(vRecur)   ; de = recur vector
05D5   7B                     LD   a,e   ; check for NUL
05D6   B2                     OR   d   
05D7   20 02                  JR   nz,blockEnd4   
05D9   DD E9                  JP   (ix)   
05DB                BLOCKEND4:      
05DB   21 00 00               LD   hl,0   ; clear recur vector
05DE   22 F2 55               LD   (vRecur),hl   
05E1   C3 E0 09               JP   go1   ; execute de
05E4                             ; /br break from loop
05E4                             ; --
05E4                BREAK:       
05E4   E1                     POP   hl   
05E5   7D                     LD   a,l   
05E6   B4                     OR   h   
05E7   28 02                  JR   z,break1   
05E9   DD E9                  JP   (ix)   
05EB                BREAK1:      
05EB   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05ED   FD 54                  LD   d,iyh   
05EF   21 08 00               LD   hl,8   
05F2   19                     ADD   hl,de   
05F3   23                     INC   hl   
05F4   23                     INC   hl   
05F5   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F8   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FB   C3 77 05               JP   blockEnd   
05FE                TICK:        
05FE                CHAR:        
05FE   21 00 00               LD   hl,0   ; if "" is empty or null
0601                CHAR1:       
0601   03                     INC   bc   ; point to next char
0602   0A                     LD   a,(bc)   
0603   FE 27                  CP   "'"   ; ' is the terminator
0605   28 09                  JR   z,char3   
0607   FE 5C                  CP   $5c   ; \ is the escape
0609   20 02                  JR   nz,char2   
060B   03                     INC   bc   
060C   0A                     LD   a,(bc)   
060D                CHAR2:       
060D   6F                     LD   l,a   
060E   18 F1                  JR   char1   
0610                CHAR3:       
0610   E5                     PUSH   hl   
0611   DD E9                  JP   (ix)   
0613                SLASH:       
0613                COMMAND:      
0613   CD 97 0C               CALL   jumpTable   
0616   2F                     DB   "/"   ; // comment
0617   DE 06                  DW   comment   
0619   61                     DB   "a"   
061A   52 06                  DW   command_a   
061C   62                     DB   "b"   
061D   5E 06                  DW   command_b   
061F   63                     DB   "c"   ; /c chars
0620   D0 06                  DW   chars   
0622   64                     DB   "d"   ; /d decimal
0623   A3 07                  DW   decimal   
0625   66                     DB   "f"   
0626   6A 06                  DW   command_f   
0628   68                     DB   "h"   ; /h hexadecimal
0629   AB 07                  DW   hexadecimal   
062B   69                     DB   "i"   
062C   82 06                  DW   command_i   
062E   6B                     DB   "k"   ; /k key
062F   D6 0A                  DW   key   
0631   6C                     DB   "l"   
0632   8E 06                  DW   command_l   
0634   6D                     DB   "m"   
0635   97 06                  DW   command_m   
0637   6E                     DB   "n"   ; /n numbers
0638   D8 06                  DW   numbers   
063A   6F                     DB   "o"   ; /o output
063B   E8 0A                  DW   output   
063D   70                     DB   "p"   
063E   A0 06                  DW   command_p   
0640   72                     DB   "r"   
0641   AF 06                  DW   command_r   
0643   73                     DB   "s"   ; /s size
0644   46 0C                  DW   size   
0646   74                     DB   "t"   ; /t true
0647   23 09                  DW   true1   
0649   76                     DB   "v"   
064A   BB 06                  DW   command_v   
064C   78                     DB   "x"   ; /x xor
064D   D0 03                  DW   xor   
064F   00                     DB   NUL   
0650   92 07                  DW   div   
0652                COMMAND_A:      
0652   CD 97 0C               CALL   jumpTable   
0655   62                     DB   "b"   ; /ab absolute
0656   E0 04                  DW   absolute   
0658   64                     DB   "d"   ; /ad address of
0659   ED 04                  DW   addrOf   
065B   00                     DB   NUL   
065C   2F 09                  DW   error1   
065E                COMMAND_B:      
065E   CD 97 0C               CALL   jumpTable   
0661   72                     DB   "r"   ; /br break
0662   E4 05                  DW   break   
0664   79                     DB   "y"   ; /by cold boot
0665   5E 0D                  DW   coldStart   
0667   00                     DB   NUL   
0668   2F 09                  DW   error1   
066A                COMMAND_F:      
066A   CD 97 0C               CALL   jumpTable   
066D   65                     DB   "e"   ; /fe forEach
066E   36 09                  DW   forEach   
0670   73                     DB   "s"   ; /fs funcSrc
0671   A4 09                  DW   funcSrc   
0673   31                     DB   "1"   
0674   63 0E                  DW   f1   
0676   32                     DB   "2"   
0677   E5 0E                  DW   f2   
0679   33                     DB   "3"   
067A   2B 0F                  DW   f3   
067C   34                     DB   "4"   
067D   78 0F                  DW   f4   
067F   00                     DB   NUL   
0680   29 09                  DW   false1   
0682                COMMAND_I:      
0682   CD 97 0C               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   CB 0A                  DW   input   
0688   76                     DB   "v"   ; /iv invert
0689   DB 03                  DW   invert   
068B   00                     DB   NUL   
068C   2F 09                  DW   error1   
068E                COMMAND_L:      
068E   CD 97 0C               CALL   jumpTable   
0691   69                     DB   "i"   ; /li literal
0692   DF 0A                  DW   literal   
0694   00                     DB   NUL   
0695   2F 09                  DW   error1   
0697                COMMAND_M:      
0697   CD 97 0C               CALL   jumpTable   
069A   70                     DB   "p"   ; /mp map
069B   F1 0A                  DW   map   
069D   00                     DB   NUL   
069E   2F 09                  DW   error1   
06A0                COMMAND_P:      
06A0   CD 97 0C               CALL   jumpTable   
06A3   62                     DB   "b"   ; /pb print buffer
06A4   00 0C                  DW   printBuffer   
06A6   63                     DB   "c"   ; /pc print chars
06A7   26 0C                  DW   printChars   
06A9   6B                     DB   "k"   ; /pk print stack
06AA   38 0C                  DW   printStack   
06AC   00                     DB   NUL   
06AD   2F 09                  DW   error1   
06AF                COMMAND_R:      
06AF   CD 97 0C               CALL   jumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   3A 0C                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   40 0C                  DW   remain   
06B8   00                     DB   NUL   
06B9   2F 09                  DW   error1   
06BB                COMMAND_V:      
06BB   CD 97 0C               CALL   jumpTable   
06BE   62                     DB   "b"   
06BF   5D 0C                  DW   varBufPtr   
06C1   68                     DB   "h"   
06C2   66 0C                  DW   varHeapPtr   
06C4   74                     DB   "t"   
06C5   6F 0C                  DW   varTIBPtr   
06C7   42                     DB   "B"   
06C8   4E 0C                  DW   constBufStart   
06CA   54                     DB   "T"   
06CB   58 0C                  DW   constTIBStart   
06CD   00                     DB   NUL   
06CE   2F 09                  DW   error1   
06D0                CHARS:       
06D0   21 01 00               LD   hl,1   
06D3                CHARS1:      
06D3   22 E6 55               LD   (vDataWidth),hl   
06D6   DD E9                  JP   (ix)   
06D8                NUMBERS:      
06D8   21 02 00               LD   hl,2   
06DB   C3 D3 06               JP   chars1   
06DE                COMMENT:      
06DE   03                     INC   bc   ; point to next char
06DF   0A                     LD   a,(bc)   
06E0   FE 20                  CP   " "   ; terminate on any char less than SP
06E2   30 FA                  JR   nc,comment   
06E4   0B                     DEC   bc   
06E5   DD E9                  JP   (ix)   
06E7                             ; ";" createFunc
06E7                             ; arg_list* block* -- func*
06E7                SEMICOLON:      
06E7                CREATEFUNC:      
06E7   ED 43 00 56            LD   (vTemp1),bc   ; save IP
06EB   E1                     POP   hl   ; hl = block*
06EC   22 02 56               LD   (vTemp2),hl   ; save block*
06EF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F2   FD 56 05               LD   d,(iy+5)   
06F5   7B                     LD   a,e   ; if arg_list == null then make a func
06F6   B2                     OR   d   
06F7   20 09                  JR   nz,createFunc0   
06F9   21 00 00               LD   hl,0   ; partial_array = null
06FC   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0700   18 65                  JR   createFunc5   
0702                CREATEFUNC0:      
0702   E1                     POP   hl   ; hl = inner_arg_list*
0703   E5                     PUSH   hl   ; save inner_arg_list
0704   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0708   7E                     LD   a,(hl)   ; compile inner_num_locals
0709   4F                     LD   c,a   ; b = inner_num_locals
070A   12                     LD   (de),a   
070B   23                     INC   hl   
070C   13                     INC   de   
070D   7E                     LD   a,(hl)   ; compile inner_length
070E   12                     LD   (de),a   
070F   91                     SUB   c   ; a = inner_num args
0710   23                     INC   hl   
0711   13                     INC   de   
0712   B7                     OR   a   ; compile args if inner_length > 0
0713   28 05                  JR   z,createFunc1   
0715   4F                     LD   c,a   ; bc = a
0716   06 00                  LD   b,0   
0718   ED B0                  LDIR      
071A                CREATEFUNC1:      
071A   EB                     EX   de,hl   ; hl = outer_arg_list
071B   FD 5E 04               LD   e,(iy+4)   
071E   FD 56 05               LD   d,(iy+5)   
0721   EB                     EX   de,hl   
0722   23                     INC   hl   ; a = outer_length
0723   7E                     LD   a,(hl)   
0724   23                     INC   hl   
0725   B7                     OR   a   
0726   28 05                  JR   z,createFunc2   
0728   4F                     LD   c,a   
0729   06 00                  LD   b,0   
072B   ED B0                  LDIR      ; append outer_args
072D                CREATEFUNC2:      ; a = outer_length
072D   47                     LD   b,a   ; b = a = outer_length
072E   2A F0 55               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0731   23                     INC   hl   
0732   7E                     LD   a,(hl)   ; add outer_length to new length
0733   80                     ADD   a,b   
0734   77                     LD   (hl),a   
0735   2B                     DEC   hl   
0736   78                     LD   a,b   ; save outer_length in a'
0737   08                     EX   af,af'   
0738   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0739   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073A   B7                     OR   a   
073B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
073D   4F                     LD   c,a   ; c = inner_num_locals
073E   06 00                  LD   b,0   ; bc = inner_num_locals
0740   23                     INC   hl   ; a = inner_length
0741   7E                     LD   a,(hl)   
0742   91                     SUB   c   ; a = inner_num_args
0743   23                     INC   hl   ; hl = inner_arg_chars
0744   85                     ADD   a,l   ; hl += a
0745   6F                     LD   l,a   
0746   3E 00                  LD   a,0   
0748   84                     ADD   a,h   
0749   67                     LD   h,a   
074A   ED B0                  LDIR      ; append inner_locals
074C                CREATEFUNC2A:      
074C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
074D   12                     LD   (de),a   ; compile partial_array length field
074E   13                     INC   de   
074F   AF                     XOR   a   
0750   12                     LD   (de),a   
0751   13                     INC   de   
0752   D5                     PUSH   de   ; push partial_array*
0753   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0754   FD 5E 02               LD   e,(iy+2)   
0757   FD 56 03               LD   d,(iy+3)   
075A   EB                     EX   de,hl   
075B                CREATEFUNC3:      
075B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075C   4E                     LD   c,(hl)   
075D   2B                     DEC   hl   
075E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
075F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0760   13                     INC   de   
0761   79                     LD   a,c   
0762   12                     LD   (de),a   
0763   13                     INC   de   
0764   10 F5                  DJNZ   createFunc3   ; b = outer_length
0766                CREATEFUNC4:      
0766   E1                     POP   hl   ; hl = partial_array*
0767                CREATEFUNC5:      
0767   C1                     POP   bc   ; bc = new_arg_list*
0768   D5                     PUSH   de   ; return new func*
0769   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076A   73                     LD   (hl),e   ; compile partial_array* to func
076B   23                     INC   hl   
076C   72                     LD   (hl),d   
076D   23                     INC   hl   
076E   ED 5B 02 56            LD   de,(vTemp2)   ; de = block*
0772   73                     LD   (hl),e   ; compile block* to func
0773   23                     INC   hl   
0774   72                     LD   (hl),d   
0775   23                     INC   hl   
0776   71                     LD   (hl),c   ; compile new_arg_list* to func
0777   23                     INC   hl   
0778   70                     LD   (hl),b   
0779   23                     INC   hl   
077A   22 F0 55               LD   (vHeapPtr),hl   ; bump heap ptr
077D   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0781   DD E9                  JP   (ix)   
0783                             ; , discard stack item
0783                             ; x y -- x
0783                COMMA:       
0783                DISCARD:      
0783   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0785   FD 5D                  LD   e,iyl   
0787   EB                     EX   de,hl   
0788   B7                     OR   a   
0789   ED 72                  SBC   hl,sp   
078B   CB 7C                  BIT   7,h   
078D   20 01                  JR   nz,discard1   
078F   E1                     POP   hl   
0790                DISCARD1:      
0790   DD E9                  JP   (ix)   
0792                DIV:         
0792   D1                     POP   de   
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   ; preserve the IP
0795   44 4D                  LD   bc,hl   
0797   CD EC 08               CALL   divide   
079A   EB                     EX   de,hl   
079B   ED 53 F6 55            LD   (vRemain),de   
079F   C1                     POP   bc   
07A0   C3 9B 03               JP   add3   
07A3                DECIMAL:      
07A3   21 0A 00               LD   hl,10   
07A6                DECIMAL1:      
07A6   22 E8 55               LD   (vNumBase),hl   
07A9   DD E9                  JP   (ix)   
07AB                HEXADECIMAL:      
07AB   21 10 00               LD   hl,16   
07AE   C3 A6 07               JP   decimal1   
07B1                DOT:         
07B1   CD 97 0C               CALL   jumpTable   
07B4   61                     DB   "a"   ; .a print array
07B5   C3 07                  DW   bufferArray   
07B7   63                     DB   "c"   ; .c print char
07B8   CB 08                  DW   bufferChar   
07BA   73                     DB   "s"   ; .s print string
07BB   B1 08                  DW   bufferString   
07BD   78                     DB   "x"   ; .x print x chars
07BE   D0 08                  DW   bufferXChars   
07C0   00                     DB   NUL   ; .  print number
07C1   0C 08                  DW   bufferNumber   
07C3                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C3                BUFFERARRAY:      
07C3   CD DF 09               CALL   go   
07C6   00 00                  DW   NUL   
07C8   D1 07                  DW   bufferArrayM_1609S1094   
07CA   CC 07                  DW   $+2   
07CC   02                     DB   2   
07CD   03 61 62 63            .PSTR   "abc"   
07D1                BUFFERARRAYM_1609S1094:      
07D1   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
080C                             ; /bd buffer decimal
080C                             ; value --
080C                BUFFERNUMBER:      
080C   3A E8 55               LD   a,(vNumBase)   
080F   FE 10                  CP   16   
0811   28 66                  JR   z,bufferHex   ; else falls through
0813                             ; /bd buffer decimal
0813                             ; value --
0813                BUFFERDEC:      
0813   ED 5B EC 55            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0817   D9                     EXX      
0818   E1                     POP   hl   ; hl = value
0819   CD 2D 08               CALL   bufferDec0   
081C   D9                     EXX      ; de = buffer*' bc = IP
081D   3E 20                  LD   a," "   ; append space to buffer
081F   12                     LD   (de),a   
0820   1C                     INC   e   ; buffer*++, wraparound
0821   CC 80 0C               CALL   z,flushBuffer   
0824   2A EC 55               LD   hl,(vBufPtr)   ; hl = buffer*
0827   ED 53 EC 55            LD   (vBufPtr),de   ; update buffer* with buffer*'
082B   DD E9                  JP   (ix)   
082D                             ; hl = value
082D                             ; de' = buffer*
082D                             ; a, bc, de, hl destroyed
082D                BUFFERDEC0:      
082D   CB 7C                  BIT   7,h   
082F   28 0C                  JR   z,bufferDec1   
0831   D9                     EXX      
0832   3E 2D                  LD   a,"-"   
0834   12                     LD   (de),a   
0835   13                     INC   de   
0836   D9                     EXX      
0837   AF                     XOR   a   
0838   95                     SUB   l   
0839   6F                     LD   l,a   
083A   9F                     SBC   a,a   
083B   94                     SUB   h   
083C   67                     LD   h,a   
083D                BUFFERDEC1:      
083D   0E 00                  LD   c,0   ; leading zeros flag = false
083F   11 F0 D8               LD   de,-10000   
0842   CD 5D 08               CALL   bufferDec2   
0845   11 18 FC               LD   de,-1000   
0848   CD 5D 08               CALL   bufferDec2   
084B   11 9C FF               LD   de,-100   
084E   CD 5D 08               CALL   bufferDec2   
0851   1E F6                  LD   e,-10   
0853   CD 5D 08               CALL   bufferDec2   
0856   0C                     INC   c   ; flag = true for at least digit
0857   1E FF                  LD   e,-1   
0859   CD 5D 08               CALL   bufferDec2   
085C   C9                     RET      
085D                BUFFERDEC2:      
085D   06 2F                  LD   b,"0"-1   
085F                BUFFERDEC3:      
085F   04                     INC   b   
0860   19                     ADD   hl,de   
0861   38 FC                  JR   c,bufferDec3   
0863   ED 52                  SBC   hl,de   
0865   3E 30                  LD   a,"0"   
0867   B8                     CP   b   
0868   20 05                  JR   nz,bufferDec4   
086A   AF                     XOR   a   
086B   B1                     OR   c   
086C   C8                     RET   z   
086D   18 01                  JR   bufferDec5   
086F                BUFFERDEC4:      
086F   0C                     INC   c   
0870                BUFFERDEC5:      
0870   78                     LD   a,b   
0871   D9                     EXX      
0872   12                     LD   (de),a   
0873   1C                     INC   e   
0874   CC 80 0C               CALL   z,flushBuffer   
0877   D9                     EXX      
0878   C9                     RET      
0879                             ; /bh buffer hex
0879                             ; value --
0879                BUFFERHEX:      
0879   E1                     POP   hl   ; hl = value
087A   ED 5B EC 55            LD   de,(vBufPtr)   
087E   3E 24                  LD   a,"$"   ; # prefix
0880   12                     LD   (de),a   
0881   1C                     INC   e   ; buffer*++, wraparound
0882   CC 80 0C               CALL   z,flushBuffer   
0885   7C                     LD   a,h   
0886   CD 9A 08               CALL   bufferHex1   
0889   7D                     LD   a,l   
088A   CD 9A 08               CALL   bufferHex1   
088D   3E 20                  LD   a," "   ; append space to buffer
088F   12                     LD   (de),a   
0890   1C                     INC   e   ; buffer*++, wraparound
0891   CC 80 0C               CALL   z,flushBuffer   
0894   ED 53 EC 55            LD   (vBufPtr),de   
0898   DD E9                  JP   (ix)   
089A                BUFFERHEX1:      
089A   F5                     PUSH   af   
089B   1F                     RRA      
089C   1F                     RRA      
089D   1F                     RRA      
089E   1F                     RRA      
089F   CD A3 08               CALL   bufferHex2   
08A2   F1                     POP   af   
08A3                BUFFERHEX2:      
08A3   E6 0F                  AND   0x0F   
08A5   C6 90                  ADD   a,0x90   
08A7   27                     DAA      
08A8   CE 40                  ADC   a,0x40   
08AA   27                     DAA      
08AB   12                     LD   (de),a   
08AC   1C                     INC   e   ; buffer*++, wraparound
08AD   CC 80 0C               CALL   z,flushBuffer   
08B0   C9                     RET      
08B1                             ; /bs buffered string
08B1                             ; string* --
08B1                BUFFERSTRING:      
08B1   E1                     POP   hl   ; hl = string*
08B2   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08B6   18 06                  JR   bufferString1   
08B8                BUFFERSTRING0:      
08B8   12                     LD   (de),a   ; a -> buffer*
08B9   1C                     INC   e   ; buffer*++, wraparound
08BA   CC 80 0C               CALL   z,flushBuffer   
08BD   23                     INC   hl   
08BE                BUFFERSTRING1:      
08BE   7E                     LD   a,(hl)   ; a <- string*
08BF   B7                     OR   a   ; if NUL exit loop
08C0   20 F6                  JR   nz,bufferString0   
08C2   2A EC 55               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C5   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*' in pointer
08C9   DD E9                  JP   (ix)   
08CB                             ; /bc buffer char
08CB                             ; char --
08CB                BUFFERCHAR:      
08CB   21 01 00               LD   hl,1   
08CE   18 01                  JR   bufferXChars0   
08D0                             ; /bx buffered x chars
08D0                             ; char length --
08D0                BUFFERXCHARS:      
08D0   E1                     POP   hl   ; hl = length
08D1                BUFFERXCHARS0:      
08D1   D1                     POP   de   ; a' = char
08D2   7B                     LD   a,e   
08D3   08                     EX   af,af'   
08D4   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08D8   18 08                  JR   bufferXChars2   
08DA                BUFFERXCHARS1:      
08DA   08                     EX   af,af'   
08DB   12                     LD   (de),a   
08DC   08                     EX   af,af'   
08DD   1C                     INC   e   ; buffer*++, wraparound
08DE   CC 80 0C               CALL   z,flushBuffer   
08E1   2B                     DEC   hl   
08E2                BUFFERXCHARS2:      
08E2   7D                     LD   a,l   
08E3   B4                     OR   h   
08E4   20 F4                  JR   nz,bufferXChars1   
08E6   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*'
08EA   DD E9                  JP   (ix)   
08EC                             ; division subroutine.
08EC                             ; bc: divisor, de: dividend, hl: remainder
08EC                DIVIDE:      
08EC   21 00 00               LD   hl,0   ; zero the remainder
08EF   3E 10                  LD   a,16   ; loop counter
08F1                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F1   CB 21                  SLA   c   
08F3   CB 10                  RL   b   
08F5   ED 6A                  ADC   hl,hl   
08F7   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08F9   38 03                  JR   c,divide2   
08FB   0C                     INC   c   
08FC   18 01                  JR   divide3   
08FE                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08FE   19                     ADD   hl,de   
08FF                DIVIDE3:      
08FF   3D                     DEC   a   
0900   20 EF                  JR   nz,divide1   
0902   50 59                  LD   de,bc   ; result from bc to de
0904   C9                     RET      
0905                             ; hl = value1, de = value2
0905                             ; hl = result
0905                EQUALS:      
0905   B7                     OR   a   ; reset the carry flag
0906   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0908   28 19                  JR   z,true1   
090A   C3 29 09               JP   false1   
090D                NOTEQUALS:      
090D   B7                     OR   a   ; reset the carry flag
090E   ED 52                  SBC   hl,de   
0910   C2 23 09               JP   nz,true1   
0913   C3 29 09               JP   false1   
0916                             ; hl = value1 de = value2
0916                             ; hl = result
0916                LESSTHANEQ:      
0916   B7                     OR   a   
0917   ED 52                  SBC   hl,de   
0919   18 05                  JR   lessthan1   
091B                             ; hl = value1 de = value2
091B                             ; hl = result
091B                LESSTHAN:      
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   28 09                  JR   z,false1   
0920                LESSTHAN1:      
0920   FA 29 09               JP   m,false1   
0923                TRUE1:       
0923   21 FF FF               LD   hl,TRUE   
0926   E5                     PUSH   hl   
0927   DD E9                  JP   (ix)   
0929                NULL1:       
0929                FALSE1:      
0929   21 00 00               LD   hl,FALSE   
092C   E5                     PUSH   hl   
092D   DD E9                  JP   (ix)   
092F                ERROR1:      
092F   21 01 00               LD   hl,1   ; error 1: unknown command
0932   E5                     PUSH   hl   
0933   C3 1B 0E               JP   error   
0936                             ; /fe forEach
0936                             ; :o -- :s
0936                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
0936                FOREACH:      ; :p proc
0936   CD DF 09               CALL   go   
0939   00 00                  DW   NUL   
093B   42 09                  DW   forEachM_1831S1334   
093D   3F 09                  DW   $+2   
093F   00                     DB   0   
0940   01 70                  .PSTR   "p"   
0942                FOREACHM_1831S1334:      
0942   7B                     DB   "{"   
0943   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
0948   5B 30 5D 25 54 3D      DB   "[0]%T="   
094E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0956   3A 64 74 7B            DB   ":dt{"   
095A   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
096F   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
0982   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0998   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
09A0   7D 3B                  DB   "};"   
09A2   7D                     DB   "}"   
09A3   00                     DB   0   
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                             ; FUNC funcSrc, 1, "f"                      ; :f func or block
09A4                             ; db "{"
09A4                             ; db    ":kt{"                              ; :kt sink, type
09A4                             ; db         "0%t==/br"                     ; break if t != 0
09A4                             ; db         ":dt{"
09A4                             ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
09A4                             ; db         "}; 0 %k^"                      ; init sink
09A4                             ; db     "};"
09A4                             ; db "}"
09A4                             ; db 0
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09A4                FUNCSRC:      ; :f func or block
09A4   CD DF 09               CALL   go   
09A7   00 00                  DW   NUL   
09A9   B0 09                  DW   funcSrcM_1858S1363   
09AB   AD 09                  DW   $+2   
09AD   00                     DB   0   
09AE   01 66                  .PSTR   "f"   
09B0                FUNCSRCM_1858S1363:      
09B0   7B                     DB   "{"   
09B1   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
09B5   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09BD   3A 64 74 7B            DB   ":dt{"   
09C1   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09D3   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09DB   7D 3B                  DB   "};"   
09DD   7D                     DB   "}"   
09DE   00                     DB   0   
09DF                             ; execute a block of code which ends with }
09DF                             ; creates a root scope if BP == stack
09DF                             ; else uses outer scope
09DF                CARET:       
09DF                GO:          
09DF   D1                     POP   de   ; de = block*
09E0                GO1:         
09E0   7B                     LD   a,e   ; if block* == null, exit
09E1   B2                     OR   d   
09E2   20 02                  JR   nz,go2   
09E4   DD E9                  JP   (ix)   
09E6                GO2:         
09E6   1A                     LD   a,(de)   
09E7   FE 7B                  CP   "{"   
09E9   28 06                  JR   z,goBlock   
09EB   FE 28                  CP   "("   
09ED   C2 24 0A               JP   nz,goFunc   
09F0   D5                     PUSH   de   ; push de just before stack frame
09F1                GOBLOCK:      
09F1   ED 53 00 56            LD   (vTemp1),de   ; save de
09F5   21 00 53               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09F8   FD 54                  LD   d,iyh   
09FA   FD 5D                  LD   e,iyl   
09FC   B7                     OR   a   ; if stack* == BP then this is the root_scope
09FD   ED 52                  SBC   hl,de   
09FF   ED 5B 00 56            LD   de,(vTemp1)   ; restore de
0A03   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A04   B4                     OR   h   
0A05   3E 00                  LD   a,0   
0A07   28 6A                  JR   z,goFunc8   
0A09   C5                     PUSH   bc   ; push IP
0A0A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A0D   FD 46 05               LD   b,(iy+5)   
0A10   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A13   FD 66 03               LD   h,(iy+3)   
0A16                GOBLOCK2:      
0A16   C5                     PUSH   bc   ; arg_list*
0A17   E5                     PUSH   hl   ; first_arg*
0A18   FD E5                  PUSH   iy   ; push BP
0A1A   FD 21 00 00            LD   iy,0   ; BP = SP
0A1E   FD 39                  ADD   iy,sp   
0A20                GOBLOCK3:      
0A20   42 4B                  LD   bc,de   ; bc = de = block*-1
0A22   DD E9                  JP   (ix)   
0A24                GOFUNC:      ; execute func
0A24   EB                     EX   de,hl   ; hl = func*
0A25   5E                     LD   e,(hl)   ; de = partial_array*
0A26   23                     INC   hl   
0A27   56                     LD   d,(hl)   
0A28   23                     INC   hl   
0A29   7B                     LD   a,e   ; if partial_array* == null skip
0A2A   B2                     OR   d   
0A2B   28 21                  JR   z,goFunc3   
0A2D   ED 43 00 56            LD   (vTemp1),bc   
0A31   22 02 56               LD   (vTemp2),hl   ; save bc,hl
0A34   EB                     EX   de,hl   ; hl = partial_array*
0A35   2B                     DEC   hl   ; bc = count
0A36   46                     LD   b,(hl)   
0A37   2B                     DEC   hl   
0A38   4E                     LD   c,(hl)   
0A39   23                     INC   hl   ; hl = array data*
0A3A   23                     INC   hl   
0A3B   18 06                  JR   goFunc2   ; push each item on stack
0A3D                GOFUNC1:      
0A3D   5E                     LD   e,(hl)   ; de = partial item
0A3E   23                     INC   hl   
0A3F   56                     LD   d,(hl)   
0A40   23                     INC   hl   
0A41   D5                     PUSH   de   ; push on stack
0A42   0B                     DEC   bc   
0A43                GOFUNC2:      
0A43   79                     LD   a,c   ; if count != 0 then loop
0A44   B0                     OR   b   
0A45   20 F6                  JR   nz,goFunc1   
0A47   ED 4B 00 56            LD   bc,(vTemp1)   ; restore bc
0A4B   2A 02 56               LD   hl,(vTemp2)   ; restore hl
0A4E                GOFUNC3:      
0A4E   5E                     LD   e,(hl)   ; de = block*
0A4F   23                     INC   hl   
0A50   56                     LD   d,(hl)   
0A51   23                     INC   hl   
0A52   ED 53 00 56            LD   (vTemp1),de   ; save block*
0A56   5E                     LD   e,(hl)   ; de = arg_list*
0A57   23                     INC   hl   
0A58   56                     LD   d,(hl)   
0A59   23                     INC   hl   
0A5A   EB                     EX   de,hl   ; hl = arg_list*
0A5B   ED 5B 00 56            LD   de,(vTemp1)   ; restore de = block*
0A5F   7D                     LD   a,l   ; if arg_list* == null a = 0
0A60   B4                     OR   h   
0A61   20 03                  JR   nz,goFunc4   
0A63   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A64   18 0D                  JR   goFunc8   
0A66                GOFUNC4:      ; allocate locals
0A66   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A67   18 03                  JR   goFunc6   
0A69                GOFUNC5:      ; loop
0A69   3B                     DEC   sp   
0A6A   3B                     DEC   sp   
0A6B   3D                     DEC   a   
0A6C                GOFUNC6:      
0A6C   B7                     OR   a   
0A6D   20 FA                  JR   nz,goFunc5   ; end loop
0A6F                GOFUNC7:      
0A6F   23                     INC   hl   ; a = num_args* x 2
0A70   7E                     LD   a,(hl)   
0A71   2B                     DEC   hl   
0A72   87                     ADD   a,a   ; a *= 2
0A73                GOFUNC8:      
0A73   C5                     PUSH   bc   ; push IP
0A74   44 4D                  LD   bc,hl   
0A76   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A79   85                     ADD   a,l   
0A7A   6F                     LD   l,a   
0A7B   39                     ADD   hl,sp   
0A7C   18 98                  JR   goBlock2   
0A7E                DOLLAR:      
0A7E                HEXNUM:      
0A7E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A81                HEXNUM1:      
0A81   03                     INC   bc   
0A82   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A83   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A85   28 02                  JR   z,hexnum2   ; no a decimal
0A87   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A89                HEXNUM2:      
0A89   D6 30                  SUB   $30   ; form decimal digit
0A8B   DA 76 0B               JP   c,num2   
0A8E   FE 10                  CP   $0F+1   
0A90   D2 76 0B               JP   nc,num2   
0A93   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A94   29                     ADD   hl,hl   ; 4X
0A95   29                     ADD   hl,hl   ; 8X
0A96   29                     ADD   hl,hl   ; 16X
0A97   85                     ADD   a,l   ; add into bottom of hl
0A98   6F                     LD   l,a   
0A99   18 E6                  JR   hexnum1   
0A9B                UPCASE:      
0A9B   0A                     LD   a,(bc)   ; a = identifier char
0A9C   D6 41                  SUB   "A"   ; "A" = 0
0A9E   18 05                  JR   ident1   
0AA0                LOWCASE:      
0AA0   0A                     LD   a,(bc)   
0AA1   D6 61                  SUB   "a"   
0AA3   C6 1A                  ADD   a,26   
0AA5                IDENT1:      
0AA5   87                     ADD   a,a   ; l = a * 2
0AA6   6F                     LD   l,a   
0AA7   26 55                  LD   h,msb(vars)   
0AA9   22 F4 55               LD   (vPointer),hl   ; store address in setter
0AAC   5E                     LD   e,(hl)   
0AAD   23                     INC   hl   
0AAE   56                     LD   d,(hl)   
0AAF   D5                     PUSH   de   
0AB0   DD E9                  JP   (ix)   
0AB2                             ; if
0AB2                             ; condition then -- value
0AB2                QUESTION:      
0AB2                IF:          
0AB2   03                     INC   bc   
0AB3   0A                     LD   a,(bc)   
0AB4   FE 3F                  CP   "?"   
0AB6   28 06                  JR   z,ifte   
0AB8   0B                     DEC   bc   
0AB9   11 00 00               LD   de,NUL   ; NUL pointer for else
0ABC   18 01                  JR   ifte1   
0ABE                             ; ifte
0ABE                             ; condition then else -- value
0ABE                IFTE:        
0ABE   D1                     POP   de   ; de = else
0ABF                IFTE1:       
0ABF   E1                     POP   hl   ; hl = then
0AC0   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AC1   7C                     LD   a,h   
0AC2   B5                     OR   l   
0AC3   E1                     POP   hl   ; hl = then
0AC4   CA E0 09               JP   z,go1   ; if z de = else
0AC7   EB                     EX   de,hl   ; condition = false, de = then
0AC8   C3 E0 09               JP   go1   
0ACB                             ; Z80 port input
0ACB                             ; port -- value
0ACB                INPUT:       
0ACB   E1                     POP   hl   
0ACC   59                     LD   e,c   ; save IP
0ACD   4D                     LD   c,l   
0ACE   ED 68                  IN   l,(c)   
0AD0   26 00                  LD   h,0   
0AD2   4B                     LD   c,e   ; restore IP
0AD3   E5                     PUSH   hl   
0AD4   DD E9                  JP   (ix)   
0AD6                KEY:         
0AD6   CD 81 00               CALL   getchar   
0AD9   26 00                  LD   h,0   
0ADB   6F                     LD   l,a   
0ADC   E5                     PUSH   hl   
0ADD   DD E9                  JP   (ix)   
0ADF                             ; /li literal
0ADF                             ; low level operation
0ADF                             ; reads the next two bytes and
0ADF                             ; pushes a word on the stack
0ADF                             ; -- value
0ADF                LITERAL:      
0ADF   03                     INC   bc   
0AE0   0A                     LD   a,(bc)   
0AE1   6F                     LD   l,a   
0AE2   03                     INC   bc   
0AE3   0A                     LD   a,(bc)   
0AE4   67                     LD   h,a   
0AE5   E5                     PUSH   hl   
0AE6   DD E9                  JP   (ix)   
0AE8                             ; Z80 port output
0AE8                             ; value port --
0AE8                OUTPUT:      
0AE8   E1                     POP   hl   
0AE9   59                     LD   e,c   ; save IP
0AEA   4D                     LD   c,l   
0AEB   E1                     POP   hl   
0AEC   ED 69                  OUT   (c),l   
0AEE   4B                     LD   c,e   ; restore IP
0AEF   DD E9                  JP   (ix)   
0AF1                             ; /mp map
0AF1                             ; func -- :s00bbOm1r
0AF1                          ;*Macro unroll: FUNC map, 0, "f"                            ; :f func
0AF1                MAP:         ; :f func
0AF1   CD DF 09               CALL   go   
0AF4   00 00                  DW   NUL   
0AF6   FD 0A                  DW   mapM_2090S1606   
0AF8   FA 0A                  DW   $+2   
0AFA   00                     DB   0   
0AFB   01 66                  .PSTR   "f"   
0AFD                MAPM_2090S1606:      
0AFD   7B                     DB   "{"   
0AFE   3A 73 7B               DB   ":s{"   ; :s source
0B01   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0B05   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0B0D   3A 64 74 7B            DB   ":dt{"   
0B11   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0B24   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0B2A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0B32   7D 3B                  DB   "};"   
0B34   7D 3B                  DB   "};"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                STAR:        
0B38                MUL:         
0B38   D1                     POP   de   ; get first value
0B39   E1                     POP   hl   
0B3A                MUL2:        
0B3A   C5                     PUSH   bc   ; Preserve the IP
0B3B   44 4D                  LD   bc,hl   ; bc = 2nd value
0B3D   21 00 00               LD   hl,0   
0B40   3E 10                  LD   a,16   
0B42                MUL3:        
0B42   29                     ADD   hl,hl   
0B43   CB 13                  RL   e   
0B45   CB 12                  RL   d   
0B47   30 04                  JR   nc,$+6   
0B49   09                     ADD   hl,bc   
0B4A   30 01                  JR   nc,$+3   
0B4C   13                     INC   de   
0B4D   3D                     DEC   a   
0B4E   20 F2                  JR   nz,mul3   
0B50   C1                     POP   bc   ; Restore the IP
0B51   C3 9B 03               JP   add3   
0B54                NUM:         
0B54   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B57   0A                     LD   a,(bc)   ; Get numeral or -
0B58   FE 2D                  CP   "-"   
0B5A   20 01                  JR   nz,num0   
0B5C   03                     INC   bc   ; move to next char, no flags affected
0B5D                NUM0:        
0B5D   08                     EX   af,af'   ; save zero flag = 0 for later
0B5E                NUM1:        
0B5E   0A                     LD   a,(bc)   ; read digit
0B5F   D6 30                  SUB   "0"   ; less than 0?
0B61   38 13                  JR   c,num2   ; not a digit, exit loop
0B63   FE 0A                  CP   10   ; greater that 9?
0B65   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B67   03                     INC   bc   ; inc IP
0B68   54 5D                  LD   de,hl   ; multiply hl * 10
0B6A   29                     ADD   hl,hl   
0B6B   29                     ADD   hl,hl   
0B6C   19                     ADD   hl,de   
0B6D   29                     ADD   hl,hl   
0B6E   85                     ADD   a,l   ; add digit in a to hl
0B6F   6F                     LD   l,a   
0B70   3E 00                  LD   a,0   
0B72   8C                     ADC   a,h   
0B73   67                     LD   h,a   
0B74   18 E8                  JR   num1   
0B76                NUM2:        
0B76   0B                     DEC   bc   
0B77   08                     EX   af,af'   ; restore zero flag
0B78   20 07                  JR   nz,num3   
0B7A   EB                     EX   de,hl   ; negate the value of hl
0B7B   21 00 00               LD   hl,0   
0B7E   B7                     OR   a   ; jump to sub2
0B7F   ED 52                  SBC   hl,de   
0B81                NUM3:        
0B81   E5                     PUSH   hl   ; Put the number on the stack
0B82   DD E9                  JP   (ix)   ; and process the next character
0B84                             ; |> pipeStream
0B84                             ; source sink -- source
0B84                             ; connects a sink with a source
0B84                PIPESTREAM:      
0B84   E1                     POP   hl   ; hl = sink
0B85   D1                     POP   de   ; de = src
0B86   E5                     PUSH   hl   ; push sink
0B87   21 00 00               LD   hl,0   ; push type = greet
0B8A   E5                     PUSH   hl   
0B8B   C3 E0 09               JP   go1   ; go to address in de
0B8E                RPAREN:      
0B8E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B91   FD 46 09               LD   b,(iy+9)   
0B94   DD E9                  JP   (ix)   
0B96                             ; shiftLeft
0B96                             ; value count -- value2          shift left count places
0B96                SHIFTLEFT:      
0B96   50 59                  LD   de,bc   ; save IP
0B98   C1                     POP   bc   ; bc = count
0B99   41                     LD   b,c   ; b = loop counter
0B9A   E1                     POP   hl   
0B9B   04                     INC   b   ; test for counter=0 case
0B9C   18 01                  JR   shiftLeft2   
0B9E                SHIFTLEFT1:      
0B9E   29                     ADD   hl,hl   ; left shift hl
0B9F                SHIFTLEFT2:      
0B9F   10 FD                  DJNZ   shiftLeft1   
0BA1   E5                     PUSH   hl   
0BA2   42 4B                  LD   bc,de   ; restore IP
0BA4   DD E9                  JP   (ix)   
0BA6                             ; shiftRight
0BA6                             ; value count -- value2          shift left count places
0BA6                SHIFTRIGHT:      
0BA6   50 59                  LD   de,bc   ; save IP
0BA8   C1                     POP   bc   ; bc = count
0BA9   41                     LD   b,c   ; b = loop counter
0BAA   E1                     POP   hl   
0BAB   04                     INC   b   ; test for counter=0 case
0BAC   18 04                  JR   shiftRight2   
0BAE                SHIFTRIGHT1:      
0BAE   CB 3C                  SRL   h   ; right shift hl
0BB0   CB 1D                  RR   l   
0BB2                SHIFTRIGHT2:      
0BB2   10 FA                  DJNZ   shiftRight1   
0BB4   E5                     PUSH   hl   
0BB5   42 4B                  LD   bc,de   ; restore IP
0BB7   DD E9                  JP   (ix)   
0BB9                             ; string
0BB9                             ; -- ptr                        ; points to start of string chars,
0BB9                             ; length is stored at start - 2 bytes
0BB9                DQUOTE:      
0BB9                STRING:      
0BB9   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
0BBC   23                     INC   hl   ; skip length field to start
0BBD   23                     INC   hl   
0BBE   E5                     PUSH   hl   ; save start of string
0BBF   03                     INC   bc   ; point to next char
0BC0   18 03                  JR   string2   
0BC2                STRING1:      
0BC2   77                     LD   (hl),a   
0BC3   23                     INC   hl   ; increase count
0BC4   03                     INC   bc   ; point to next char
0BC5                STRING2:      
0BC5   0A                     LD   a,(bc)   
0BC6   FE 22                  CP   DQ   ; " is the string terminator
0BC8   28 04                  JR   z,string3   
0BCA   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BCC   20 F4                  JR   nz,string1   
0BCE                STRING3:      
0BCE   AF                     XOR   a   ; write NUL to terminate string
0BCF   77                     LD   (hl),a   ; hl = end of string
0BD0   23                     INC   hl   
0BD1   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BD4   2B                     DEC   hl   ; hl = end of string without terminator
0BD5   D1                     POP   de   ; de = start of string
0BD6   D5                     PUSH   de   ; return start of string
0BD7   B7                     OR   a   ; hl = length bytes, de = start of string
0BD8   ED 52                  SBC   hl,de   
0BDA   EB                     EX   de,hl   
0BDB   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BDC   72                     LD   (hl),d   
0BDD   2B                     DEC   hl   
0BDE   73                     LD   (hl),e   
0BDF   DD E9                  JP   (ix)   
0BE1                MINUS:       ; negative sign or subtract
0BE1   03                     INC   bc   ; check if sign of a number
0BE2   0A                     LD   a,(bc)   
0BE3   0B                     DEC   bc   
0BE4   FE 30                  CP   "0"   
0BE6   38 05                  JR   c,sub   
0BE8   FE 3A                  CP   "9"+1   
0BEA   DA 44 03               JP   c,num_   
0BED                SUB:         ; Subtract the value 2nd on stack from top of stack
0BED   03                     INC   bc   
0BEE   FE 2D                  CP   "-"   
0BF0   20 05                  JR   nz,sub1   
0BF2   E1                     POP   hl   
0BF3   2B                     DEC   hl   
0BF4   C3 D1 04               JP   assign0   
0BF7                SUB1:        
0BF7   0B                     DEC   bc   
0BF8   D1                     POP   de   
0BF9   E1                     POP   hl   
0BFA   B7                     OR   a   
0BFB   ED 52                  SBC   hl,de   
0BFD   C3 9B 03               JP   add3   
0C00                             ; /pb printBuffer
0C00                             ; --
0C00                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C00                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C00                PRINTBUFFER:      
0C00   CD DF 09               CALL   go   
0C03   00 00                  DW   NUL   
0C05   0C 0C                  DW   printBufferM_2270S1796   
0C07   09 0C                  DW   $+2   
0C09   00                     DB   0   
0C0A   01 61                  .PSTR   "a"   
0C0C                PRINTBUFFERM_2270S1796:      
0C0C   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C26                             ; printChars
0C26                             ; char* len --
0C26                PRINTCHARS:      
0C26   E1                     POP   hl   ; hl = count
0C27   D1                     POP   de   ; de = char*
0C28   CD 33 0C               CALL   printChars2   
0C2B   DD E9                  JP   (ix)   
0C2D                PRINTCHARS1:      
0C2D   1A                     LD   a,(de)   ; print char at char*
0C2E   CD 85 00               CALL   putchar   
0C31   13                     INC   de   ; char*++
0C32   2B                     DEC   hl   ; count--
0C33                PRINTCHARS2:      
0C33   7D                     LD   a,l   ; count == 0?
0C34   B4                     OR   h   
0C35   C8                     RET   z   
0C36   18 F5                  JR   printChars1   ; if not loop
0C38                             ; /pk print stack
0C38                             ; --
0C38                PRINTSTACK:      
0C38                             ;     ld (vTemp1),bc
0C38                             ;     call printStr
0C38                             ;     .cstr "=> "
0C38                             ;     ld hl,STACK
0C38                             ;     sbc hl,sp
0C38                             ;     srl h
0C38                             ;     rr l
0C38                             ;     ld bc,hl
0C38                             ;     ld hl,STACK
0C38                             ;     jr printStack2
0C38                             ; printStack1:
0C38                             ;     dec bc
0C38                             ;     dec hl
0C38                             ;     ld d,(hl)
0C38                             ;     dec hl
0C38                             ;     ld e,(hl)
0C38                             ;     ex de,hl
0C38                             ;     call prthex
0C38                             ;     ex de,hl
0C38                             ;     ld a," "
0C38                             ;     call putchar
0C38                             ; printStack2:
0C38                             ;     ld a,c
0C38                             ;     or b
0C38                             ;     jr nz,printStack1
0C38                             ;     call prompt
0C38                             ;     ld bc,(vTemp1)
0C38   DD E9                  JP   (ix)   
0C3A                RECUR:       
0C3A   E1                     POP   hl   
0C3B   22 F2 55               LD   (vRecur),hl   
0C3E   DD E9                  JP   (ix)   
0C40                REMAIN:      
0C40   2A F6 55               LD   hl,(vRemain)   
0C43   E5                     PUSH   hl   
0C44   DD E9                  JP   (ix)   
0C46                SIZE:        
0C46   E1                     POP   hl   
0C47   2B                     DEC   hl   ; msb size
0C48   56                     LD   d,(hl)   
0C49   2B                     DEC   hl   ; lsb size
0C4A   5E                     LD   e,(hl)   
0C4B   D5                     PUSH   de   
0C4C   DD E9                  JP   (ix)   
0C4E                CONSTBUFSTART:      
0C4E   11 00 54               LD   de,BUF   
0C51   18 28                  JR   constant   
0C53                CONSTHEAPSTART:      
0C53   11 1C 56               LD   de,HEAP   
0C56   18 23                  JR   constant   
0C58                CONSTTIBSTART:      
0C58   11 00 53               LD   de,TIB   
0C5B   18 1E                  JR   constant   
0C5D                VARBUFPTR:      
0C5D   ED 5B EC 55            LD   de,(vBufPtr)   
0C61   21 EC 55               LD   hl,vBufPtr   
0C64   18 12                  JR   variable   
0C66                VARHEAPPTR:      
0C66   ED 5B F0 55            LD   de,(vHeapPtr)   
0C6A   21 F0 55               LD   hl,vHeapPtr   
0C6D   18 09                  JR   variable   
0C6F                VARTIBPTR:      
0C6F   ED 5B EA 55            LD   de,(vTIBPtr)   
0C73   21 EA 55               LD   hl,vTIBPtr   
0C76   18 00                  JR   variable   
0C78                VARIABLE:      
0C78   22 F4 55               LD   (vPointer),hl   
0C7B                CONSTANT:      
0C7B   D5                     PUSH   de   
0C7C   DD E9                  JP   (ix)   
0C7E                             ; 
0C7E                FILTER:      
0C7E                SCAN:        
0C7E   DD E9                  JP   (ix)   
0C80                             ;*******************************************************************
0C80                             ; general routines
0C80                             ;*******************************************************************
0C80                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C80                FLUSHBUFFER:      
0C80   F5                     PUSH   af   
0C81   D5                     PUSH   de   
0C82   E5                     PUSH   hl   
0C83   2A EC 55               LD   hl,(vBufPtr)   
0C86   11 00 54               LD   de,BUF   
0C89   ED 53 EC 55            LD   (vBufPtr),de   
0C8D   B7                     OR   a   
0C8E   ED 52                  SBC   hl,de   
0C90   CD 33 0C               CALL   printChars2   
0C93   E1                     POP   hl   
0C94   D1                     POP   de   
0C95   F1                     POP   af   
0C96   C9                     RET      
0C97                             ; followed by a table
0C97                             ; db char
0C97                             ; dw addr
0C97                             ; the final item must have char == NUL
0C97                JUMPTABLE:      
0C97   03                     INC   bc   
0C98   E1                     POP   hl   
0C99                JUMPTABLE0:      
0C99   AF                     XOR   a   
0C9A   BE                     CP   (hl)   
0C9B   28 09                  JR   z,jumpTable1   
0C9D   0A                     LD   a,(bc)   
0C9E   BE                     CP   (hl)   
0C9F   28 06                  JR   z,jumpTable2   
0CA1   23                     INC   hl   
0CA2   23                     INC   hl   
0CA3   23                     INC   hl   
0CA4   18 F3                  JR   jumpTable0   
0CA6                JUMPTABLE1:      
0CA6   0B                     DEC   bc   
0CA7                JUMPTABLE2:      
0CA7   23                     INC   hl   
0CA8   5E                     LD   e,(hl)   
0CA9   23                     INC   hl   
0CAA   56                     LD   d,(hl)   
0CAB   EB                     EX   de,hl   
0CAC   E9                     JP   (hl)   
0CAD                PRTSTR0:      
0CAD   CD 85 00               CALL   putchar   
0CB0   23                     INC   hl   
0CB1                PRTSTR:      
0CB1   7E                     LD   a,(hl)   
0CB2   B7                     OR   a   
0CB3   20 F8                  JR   nz,prtstr0   
0CB5   C9                     RET      
0CB6                             ; **************************************************************************
0CB6                             ; calculate nesting value
0CB6                             ; a is char to be tested,
0CB6                             ; e is the nesting value (initially 0)
0CB6                             ; e is increased by ( and [
0CB6                             ; e is decreased by ) and ]
0CB6                             ; e has its bit 7 toggled by `
0CB6                             ; limited to 127 levels
0CB6                             ; **************************************************************************
0CB6                NESTING:      
0CB6   FE 22                  CP   DQ   ; quote char
0CB8   28 06                  JR   z,nesting0   
0CBA   FE 60                  CP   "`"   ; quote char
0CBC   28 02                  JR   z,nesting0   
0CBE   18 0A                  JR   nesting1   
0CC0                NESTING0:      
0CC0   CB 7B                  BIT   7,e   
0CC2   28 03                  JR   z,nesting1a   
0CC4   CB BB                  RES   7,e   
0CC6   C9                     RET      
0CC7                NESTING1A:      
0CC7   CB FB                  SET   7,e   
0CC9   C9                     RET      
0CCA                NESTING1:      
0CCA   CB 7B                  BIT   7,e   
0CCC   C0                     RET   nz   
0CCD   FE 7B                  CP   "{"   
0CCF   28 08                  JR   z,nesting2   
0CD1   FE 5B                  CP   "["   
0CD3   28 04                  JR   z,nesting2   
0CD5   FE 28                  CP   "("   
0CD7   20 02                  JR   nz,nesting3   
0CD9                NESTING2:      
0CD9   1C                     INC   e   
0CDA   C9                     RET      
0CDB                NESTING3:      
0CDB   FE 7D                  CP   "}"   
0CDD   28 07                  JR   z,nesting4   
0CDF   FE 5D                  CP   "]"   
0CE1   28 03                  JR   z,nesting4   
0CE3   FE 29                  CP   ")"   
0CE5   C0                     RET   nz   
0CE6                NESTING4:      
0CE6   1D                     DEC   e   
0CE7   C9                     RET      
0CE8                PROMPT:      
0CE8   CD F8 0C               CALL   printStr   
0CEB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CF0   C9                     RET      
0CF1                CRLF:        
0CF1   CD F8 0C               CALL   printStr   
0CF4   0D 0A 00               .CSTR   "\r\n"   
0CF7   C9                     RET      
0CF8                             ; prints a null teminated string
0CF8                             ; the string should be immediately following the call
0CF8                PRINTSTR:      
0CF8   E3                     EX   (sp),hl   ; swap			
0CF9   CD B1 0C               CALL   prtstr   
0CFC   23                     INC   hl   ; inc past NUL
0CFD   E3                     EX   (sp),hl   ; put it back	
0CFE   C9                     RET      
0CFF                TITLESTR:      
0CFF   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D13                INIT:        
0D13   21 FF 0C               LD   hl,titleStr   
0D16   11 08 56               LD   de,titleBuf   
0D19   06 14                  LD   b,20   
0D1B                INIT1:       
0D1B   1A                     LD   a,(de)   
0D1C   BE                     CP   (hl)   
0D1D   20 17                  JR   nz,coldBoot0   
0D1F   13                     INC   de   
0D20   23                     INC   hl   
0D21   10 F8                  DJNZ   init1   
0D23                WARMINIT:      
0D23   ED 4B F8 55            LD   bc,(vSavedIP)   ; restore IP
0D27   ED 7B FA 55            LD   sp,(vSavedSP)   ; restore SP
0D2B   DD 2A FC 55            LD   ix,(vSavedNext)   ; restore Next
0D2F   FD 2A FE 55            LD   iy,(vSavedBP)   ; restore BP
0D33   C3 6D 0D               JP   start1   
0D36                COLDBOOT0:      
0D36   21 FF 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0D39   11 08 56               LD   de,titleBuf   
0D3C   06 14                  LD   b,20   
0D3E   ED B0                  LDIR      
0D40                COLDINIT:      
0D40   21 80 01               LD   hl,isysVars   
0D43   11 E6 55               LD   de,sysVars   
0D46   01 10 00               LD   bc,8 * 2   
0D49   ED B0                  LDIR      
0D4B   21 00 55               LD   hl,vars   ; 52 vars LO HI
0D4E   06 34                  LD   b,26*2   
0D50   AF                     XOR   a   
0D51                COLDBOOT1:      
0D51   77                     LD   (hl),a   
0D52   23                     INC   hl   
0D53   10 FC                  DJNZ   coldBoot1   
0D55   DD 2A EE 55            LD   ix,(vNext)   
0D59   FD 21 00 53            LD   iy,STACK   
0D5D   C9                     RET      
0D5E                COLDSTART:      
0D5E   31 00 53               LD   sp,STACK   
0D61   CD 36 0D               CALL   coldBoot0   
0D64   C3 6D 0D               JP   start1   
0D67                START:       
0D67   31 00 53               LD   sp,STACK   ; start Monty
0D6A   CD 13 0D               CALL   init   ; setups
0D6D                START1:      
0D6D   21 08 56               LD   hl,titleBuf   
0D70   CD B1 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0D73                INTERPRET:      
0D73   CD 80 0C               CALL   flushBuffer   
0D76   CD E8 0C               CALL   prompt   
0D79   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D7C   21 00 53               LD   hl,TIB   
0D7F   22 EA 55               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D82                INTERPRET2:      ; calculate nesting
0D82   1E 00                  LD   e,0   ; initilize nesting value
0D84   C5                     PUSH   bc   ; save offset into TIB,
0D85                             ; bc is also the count of chars in TIB
0D85   21 00 53               LD   hl,TIB   ; hl is start of TIB
0D88   18 0B                  JR   interpret4   
0D8A                INTERPRET3:      
0D8A   3E 33                  LD   a,"3"   
0D8C   CD 85 00               CALL   putchar   
0D8F   7E                     LD   a,(hl)   ; a = char in TIB
0D90   23                     INC   hl   ; inc pointer into TIB
0D91   0B                     DEC   bc   ; dec count of chars in TIB
0D92   CD B6 0C               CALL   nesting   ; update nesting value
0D95                INTERPRET4:      
0D95   79                     LD   a,c   ; is count zero?
0D96   B0                     OR   b   
0D97   20 F1                  JR   nz,interpret3   ; if not loop
0D99   C1                     POP   bc   ; restore offset into TIB
0D9A                INTERPRET5:      
0D9A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D9D   FE 20                  CP   $20   ; compare to space
0D9F   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA1   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA3                             ; ???? NEEDED?
0DA3   28 3B                  JR   z,interpret8   
0DA5   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DA7   28 24                  JR   z,interpret7   ; if anything else its macro/control
0DA9   FE 05                  CP   CTRL_E   
0DAB   CA 3E 0E               JP   z,edit_   
0DAE   FE 08                  CP   CTRL_H   
0DB0   CA 2E 0E               JP   z,backSpace_   
0DB3   FE 0A                  CP   CTRL_J   
0DB5   CA 56 0E               JP   z,reEdit_   
0DB8   FE 13                  CP   CTRL_S   
0DBA   CA 59 0E               JP   z,printStack_   
0DBD                             ; DB     lsb(edit_)       ; ENQ ^E  5
0DBD                             ; DB     lsb(reedit_)     ; LF  ^J 10
0DBD                             ; DB     lsb(list_)       ; FF  ^L 12
0DBD                             ; DB     lsb(printStack_) ; DLE ^P 16
0DBD                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0DBD                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0DBD                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0DBD                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0DBD                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0DBD                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0DBD                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0DBD                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0DBD                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0DBD                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0DBD                INTERPRET5A:      
0DBD                             ; ld (vTIBPtr),bc
0DBD                             ; ld bc,(vTIBPtr)
0DBD   18 C3                  JR   interpret2   
0DBF                INTERPRET6:      
0DBF   21 00 53               LD   hl,TIB   
0DC2   09                     ADD   hl,bc   
0DC3   77                     LD   (hl),a   ; store the character in textbuf
0DC4   03                     INC   bc   
0DC5   CD 85 00               CALL   putchar   ; echo character to screen
0DC8   CD B6 0C               CALL   nesting   
0DCB   18 CD                  JR   interpret5   ; wait for next character
0DCD                INTERPRET7:      
0DCD   21 00 53               LD   hl,TIB   
0DD0   09                     ADD   hl,bc   
0DD1   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DD3   23                     INC   hl   
0DD4   36 0A                  LD   (hl),"\n"   
0DD6   23                     INC   hl   
0DD7   03                     INC   bc   
0DD8   03                     INC   bc   
0DD9   CD F1 0C               CALL   crlf   ; echo character to screen
0DDC   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DDD   B7                     OR   a   
0DDE   20 BA                  JR   nz,interpret5   
0DE0                INTERPRET8:      
0DE0   21 00 53               LD   hl,TIB   
0DE3   09                     ADD   hl,bc   
0DE4   22 EA 55               LD   (vTIBPtr),hl   
0DE7   01 00 53               LD   bc,TIB   
0DEA   ED 43 F8 55            LD   (vSavedIP),bc   ; save IP
0DEE   ED 73 FA 55            LD   (vSavedSP),sp   ; save SP
0DF2   DD 22 FC 55            LD   (vSavedNext),ix   ; save Next
0DF6   FD 22 FE 55            LD   (vSavedBP),iy   ; save BP
0DFA   0B                     DEC   bc   
0DFB                NEXT:        
0DFB   03                     INC   bc   ; Increment the IP
0DFC   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DFD   FE 20                  CP   " "   ; whitespace?
0DFF   28 FA                  JR   z,next   ; space? ignore
0E01   38 09                  JR   c,next1   
0E03   D6 20                  SUB   " "   
0E05   6F                     LD   l,a   ; index into table
0E06   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E08   6E                     LD   l,(hl)   ; get low jump address
0E09   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E0B   E9                     JP   (hl)   ; Jump to routine
0E0C                NEXT1:       
0E0C   FE 00                  CP   NUL   ; end of input string?
0E0E   28 03                  JR   z,exit   
0E10   C3 73 0D               JP   interpret   ; no, other whitespace, macros?
0E13                EXIT:        
0E13   03                     INC   bc   
0E14   60 69                  LD   hl,bc   
0E16   E9                     JP   (hl)   
0E17                RUN:         
0E17   C1                     POP   bc   
0E18   0B                     DEC   bc   
0E19   DD E9                  JP   (ix)   
0E1B                ERROR:       
0E1B   CD 17 0E               CALL   run   
0E1E   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0E2B   C3 73 0D               JP   interpret   
0E2E                BACKSPACE_:      
0E2E   79                     LD   a,c   
0E2F   B0                     OR   b   
0E30   CA 82 0D               JP   z,interpret2   
0E33   0B                     DEC   bc   
0E34   CD F8 0C               CALL   printStr   
0E37   08 20 08 00            .CSTR   "\b \b"   
0E3B   C3 82 0D               JP   interpret2   
0E3E                             ; edit
0E3E                EDIT_:       
0E3E   CD 17 0E               CALL   run   
0E41   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0E53   C3 73 0D               JP   interpret   
0E56                REEDIT_:      
0E56   C3 73 0D               JP   interpret   
0E59                PRINTSTACK_:      
0E59   CD 17 0E               CALL   run   
0E5C   2F 70 6B 00            .CSTR   "/pk"   
0E60   C3 73 0D               JP   interpret   
0E63                             ; editDef:
0E63                             ;     pop hl                      ; pop ret address
0E63                             ;     ex (sp),hl                  ; swap with TOS
0E63                             ;     push hl                     ; dup TOS
0E63                             ;     ld a,l                      ; a = ident
0E63                             ;     ld de,TIB                   ; de = start of TIB
0E63                             ;     ld (vTIBPtr),de             ; update TIB*
0E63                             ;     push ix                     ; save NEXT
0E63                             ;     ld ix,editDef0              ; NEXT = editDef0
0E63                             ;     jp lookupRef                ; convert letter into address
0E63                             ; editDef0:
0E63                             ;     ld e,(hl)                   ; de = (hl++)
0E63                             ;     inc hl
0E63                             ;     ld d,(hl)
0E63                             ;     ld a,d                      ; de == 0 ?
0E63                             ;     or e
0E63                             ;     jr z,editDef4
0E63                             ;     ld ix,editDef3              ; NEXT = editDef3
0E63                             ;     ex de,hl
0E63                             ;     ld a,(hl)
0E63                             ;     cp "{"
0E63                             ;     jr nz,editDef1
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef1:
0E63                             ;     cp "("
0E63                             ;     jr nz,editDef2
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef2:
0E63                             ;     jp editFunc
0E63                             ; editDef3:
0E63                             ;     ld a," "                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     pop hl                      ; a = ident
0E63                             ;     ld a,l
0E63                             ;     call writeChar
0E63                             ;     ld a,"="                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     ld ix,editDef4              ; NEXT = editDef4
0E63                             ;     jp printTIB
0E63                             ; editDef4:
0E63                             ;     pop ix                      ; restore NEXT
0E63                             ;     jp (ix)
0E63                             ; writeChar:
0E63                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E63                             ;     ld (de),a                   ; write ident
0E63                             ;     inc de
0E63                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E63                             ;     ret
0E63                             ; ; printTIB
0E63                             ; printTIB:
0E63                             ;     ld hl,(vTIBPtr)
0E63                             ;     ld de,TIB
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     jp printTIB2
0E63                             ; printTIB1:
0E63                             ;     ld a,(de)
0E63                             ;     call putchar
0E63                             ; printTIB2:
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr nz,printTIB1
0E63                             ;     jp (ix)
0E63                             ; editBlock:
0E63                             ;     pop hl                      ; hl = block*
0E63                             ; editBlock0:
0E63                             ;     push ix                     ; save next
0E63                             ;     push hl                     ; push block*
0E63                             ;     push hl                     ; push block*
0E63                             ;     ld ix,(editBlock2)
0E63                             ;     jp blockLength
0E63                             ; editBlock1:
0E63                             ;     pop hl                      ; bc = length, (sp) = IP
0E63                             ;     pop de                      ; de = block*
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr z,editBlock2
0E63                             ;     push bc
0E63                             ;     ld bc,hl
0E63                             ;     ex de,hl                    ; hl = block*
0E63                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E63                             ;     ldir                        ; copy block to TIB
0E63                             ;     ld (vTIBPtr),de              ; save TIB*
0E63                             ;     pop bc
0E63                             ; editBlock2:
0E63                             ;     pop ix                      ; restore next
0E63                             ;     jp (ix)
0E63                             ; editFunc:
0E63                             ;     jp (ix)
0E63                             ; editArray:
0E63                             ;     jp (ix)
0E63                             ; editArglist:
0E63                             ;     jp (ix)
0E63                             ; ; blockLength
0E63                             ; ; addr1 -- length
0E63                             ; blockLength:
0E63                             ;     pop hl                      ; block*
0E63                             ;     push hl                     ; save block*
0E63                             ;     inc hl                      ; skip first char
0E63                             ;     ld d,1                      ; increase nesting
0E63                             ; blockLength1:                   ; Skip to end of definition
0E63                             ;     ld a,(hl)                   ; Get the next character
0E63                             ;     inc hl                      ; Point to next character
0E63                             ;     cp " " + 1                  ; ignore whitespace
0E63                             ;     jr c,blockLength1
0E63                             ;     cp ")"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "}"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "]"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "("
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "{"
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "["
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "'"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp "`"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp DQ
0E63                             ;     jr z,blockLength3
0E63                             ;     jr blockLength1
0E63                             ; blockLength2:
0E63                             ;     inc d
0E63                             ;     jr blockLength1
0E63                             ; blockLength4:
0E63                             ;     dec d
0E63                             ;     jr nz, blockLength1         ; get the next element
0E63                             ; blockLength3:
0E63                             ;     ld a,$80
0E63                             ;     xor d
0E63                             ;     ld d,a
0E63                             ;     jr nz, blockLength1
0E63                             ;     pop hl                      ; hl = block*
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     push hl
0E63                             ;     jp (ix)
0E63                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E63                             ; \a start of stack \#3 depth \b base \$ prompt
0E63                             ; DW dStack               ; a vS0 start of datastack			
0E63                             ; DW FALSE                ; b vBase16
0E63                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E63                             ; DW 0                    ; d
0E63                             ; DW 65                   ; e vLastDef "A" last command u defined
0E63                             ; DW 0                    ; f
0E63                             ; DW page6                ; g 256 bytes limits
0E63                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E63                          ;*Macro unroll: FUNC f1, 1, "besL"                          ; range source (begin end step)
0E63                F1:          ; range source (begin end step)
0E63   CD DF 09               CALL   go   
0E66   00 00                  DW   NUL   
0E68   72 0E                  DW   f1M_2816S12   
0E6A   6C 0E                  DW   $+2   
0E6C   01                     DB   1   
0E6D   04 62 65 73 4C         .PSTR   "besL"   
0E72                F1M_2816S12:      
0E72   7B                     DB   "{"   
0E73   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0E7E   3A 6B 74 7B            DB   ":kt{"   
0E82   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0E8A   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0E90   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0E97   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0E9F   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0EAE   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0EB6   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0EBD   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0ED1   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0ED9   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0EE1   7D 3B                  DB   "};"   
0EE3   7D                     DB   "}"   
0EE4   00                     DB   0   
0EE5                          ;*Macro unroll: FUNC f2, 0, "sf"                            ; map
0EE5                F2:          ; map
0EE5   CD DF 09               CALL   go   
0EE8   00 00                  DW   NUL   
0EEA   F2 0E                  DW   f2M_2833S30   
0EEC   EE 0E                  DW   $+2   
0EEE   00                     DB   0   
0EEF   02 73 66               .PSTR   "sf"   
0EF2                F2M_2833S30:      
0EF2   7B                     DB   "{"   
0EF3   3A 6B 74 7B            DB   ":kt{"   ; line 24
0EF7   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0EFF   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0F03   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0F08   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0F14   3F 3F 20 25 74 20 25 6B 2F 72 63 DB   "?? %t %k/rc"   ; ifte: send to sink
0F1F   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0F27   7D 3B                  DB   "};"   
0F29   7D                     DB   "}"   
0F2A   00                     DB   0   
0F2B                          ;*Macro unroll: FUNC f3, 1, "spT"                           ; forEach
0F2B                F3:          ; forEach
0F2B   CD DF 09               CALL   go   
0F2E   00 00                  DW   NUL   
0F30   39 0F                  DW   f3M_2845S43   
0F32   34 0F                  DW   $+2   
0F34   01                     DB   1   
0F35   03 73 70 54            .PSTR   "spT"   
0F39                F3M_2845S43:      
0F39   7B                     DB   "{"   
0F3A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0F40   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0F44   32 25 74 21 3D 2F 62 72 DB   "2%t!=/br"   ; break if type = 2
0F4C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0F51   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0F63   3F 3F                  DB   "??"   ; ifte:
0F65   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0F6E   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0F76   7D                     DB   "}"   
0F77   00                     DB   0   
0F78                          ;*Macro unroll: FUNC f4, 1, "sT"                            ; sink
0F78                F4:          ; sink
0F78   CD DF 09               CALL   go   
0F7B   00 00                  DW   NUL   
0F7D   85 0F                  DW   f4M_2857S56   
0F7F   81 0F                  DW   $+2   
0F81   01                     DB   1   
0F82   02 73 54               .PSTR   "sT"   
0F85                F4M_2857S56:      
0F85   00                     DB   0   
0F86                          ALIGN   $100   
1000                TESTSSTART:      
1000                             ; test "0 10 1 /f1 :a{%a.}; /f3", 0
1000                          ;*Macro unroll:  test "0 10 1 /f1 :a{%a 1 + 10 *}; /f2 :a{%a.}; /f3", 0
1000   31 00 53               LD   SP,STACK   
1003   CD 40 0D               CALL   coldInit   
1006   CD 70 51               CALL   execStr   
1009   30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 66 32 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 33 00 DB   "0 10 1 /f1 :a{%a 1 + 10 *}; /f2 :a{%a.}; /f3",0   
1036   CD 80 0C               CALL   flushBuffer   
1039   E1                     POP   HL   
103A   E5                     PUSH   HL   
103B   11 00 00               LD   DE,0   
103E   B7                     OR   A   
103F   ED 52                  SBC   HL,DE   
1041   7D                     LD   A,L   
1042   B4                     OR   H   
1043   CA CA 10               JP   Z,expectM_2862S63   
1046   CD F8 0C               CALL   printStr   
1049   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 66 32 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 33 00 .CSTR   "Code: ","0 10 1 /f1 :a{%a 1 + 10 *}; /f2 :a{%a.}; /f3"   
107C   CD F8 0C               CALL   printStr   
107F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
108E   21 00 00               LD   hl,0   
1091   E5                     PUSH   hl   
1092   E5                     PUSH   hl   
1093   CD 17 0E               CALL   run   
1096   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
109E   CD 80 0C               CALL   flushBuffer   
10A1   CD F8 0C               CALL   printStr   
10A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10B1   E1                     POP   hl   
10B2   E5                     PUSH   hl   
10B3   E5                     PUSH   hl   
10B4   CD 17 0E               CALL   run   
10B7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10C6   CD 80 0C               CALL   flushBuffer   
10C9   76                     HALT      
10CA                EXPECTM_2862S63:      
10CA   E1                     POP   HL   
10CB   CD F8 0C               CALL   printStr   
10CE   44 6F 6E 65 21 00      .CSTR   "Done!"   
10D4   76                     HALT      
10D5                             ; 
10D5                          ;*Macro unroll:  test "/f", false
10D5   31 00 53               LD   SP,STACK   
10D8   CD 40 0D               CALL   coldInit   
10DB   CD 70 51               CALL   execStr   
10DE   2F 66 00               DB   "/f",0   
10E1   CD 80 0C               CALL   flushBuffer   
10E4   E1                     POP   HL   
10E5   E5                     PUSH   HL   
10E6   11 00 00               LD   DE,false   
10E9   B7                     OR   A   
10EA   ED 52                  SBC   HL,DE   
10EC   7D                     LD   A,L   
10ED   B4                     OR   H   
10EE   CA 4B 11               JP   Z,expectM_2867S71   
10F1   CD F8 0C               CALL   printStr   
10F4   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
10FD   CD F8 0C               CALL   printStr   
1100   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
110F   21 00 00               LD   hl,false   
1112   E5                     PUSH   hl   
1113   E5                     PUSH   hl   
1114   CD 17 0E               CALL   run   
1117   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
111F   CD 80 0C               CALL   flushBuffer   
1122   CD F8 0C               CALL   printStr   
1125   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1132   E1                     POP   hl   
1133   E5                     PUSH   hl   
1134   E5                     PUSH   hl   
1135   CD 17 0E               CALL   run   
1138   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1147   CD 80 0C               CALL   flushBuffer   
114A   76                     HALT      
114B                EXPECTM_2867S71:      
114B   E1                     POP   HL   
114C                          ;*Macro unroll:  test "/t", true
114C   31 00 53               LD   SP,STACK   
114F   CD 40 0D               CALL   coldInit   
1152   CD 70 51               CALL   execStr   
1155   2F 74 00               DB   "/t",0   
1158   CD 80 0C               CALL   flushBuffer   
115B   E1                     POP   HL   
115C   E5                     PUSH   HL   
115D   11 FF FF               LD   DE,true   
1160   B7                     OR   A   
1161   ED 52                  SBC   HL,DE   
1163   7D                     LD   A,L   
1164   B4                     OR   H   
1165   CA C2 11               JP   Z,expectM_2868S72   
1168   CD F8 0C               CALL   printStr   
116B   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1174   CD F8 0C               CALL   printStr   
1177   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1186   21 FF FF               LD   hl,true   
1189   E5                     PUSH   hl   
118A   E5                     PUSH   hl   
118B   CD 17 0E               CALL   run   
118E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1196   CD 80 0C               CALL   flushBuffer   
1199   CD F8 0C               CALL   printStr   
119C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11A9   E1                     POP   hl   
11AA   E5                     PUSH   hl   
11AB   E5                     PUSH   hl   
11AC   CD 17 0E               CALL   run   
11AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11BE   CD 80 0C               CALL   flushBuffer   
11C1   76                     HALT      
11C2                EXPECTM_2868S72:      
11C2   E1                     POP   HL   
11C3                          ;*Macro unroll:  test "1", 1
11C3   31 00 53               LD   SP,STACK   
11C6   CD 40 0D               CALL   coldInit   
11C9   CD 70 51               CALL   execStr   
11CC   31 00                  DB   "1",0   
11CE   CD 80 0C               CALL   flushBuffer   
11D1   E1                     POP   HL   
11D2   E5                     PUSH   HL   
11D3   11 01 00               LD   DE,1   
11D6   B7                     OR   A   
11D7   ED 52                  SBC   HL,DE   
11D9   7D                     LD   A,L   
11DA   B4                     OR   H   
11DB   CA 37 12               JP   Z,expectM_2869S73   
11DE   CD F8 0C               CALL   printStr   
11E1   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11E9   CD F8 0C               CALL   printStr   
11EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11FB   21 01 00               LD   hl,1   
11FE   E5                     PUSH   hl   
11FF   E5                     PUSH   hl   
1200   CD 17 0E               CALL   run   
1203   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
120B   CD 80 0C               CALL   flushBuffer   
120E   CD F8 0C               CALL   printStr   
1211   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121E   E1                     POP   hl   
121F   E5                     PUSH   hl   
1220   E5                     PUSH   hl   
1221   CD 17 0E               CALL   run   
1224   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1233   CD 80 0C               CALL   flushBuffer   
1236   76                     HALT      
1237                EXPECTM_2869S73:      
1237   E1                     POP   HL   
1238                          ;*Macro unroll:  test "2", 2
1238   31 00 53               LD   SP,STACK   
123B   CD 40 0D               CALL   coldInit   
123E   CD 70 51               CALL   execStr   
1241   32 00                  DB   "2",0   
1243   CD 80 0C               CALL   flushBuffer   
1246   E1                     POP   HL   
1247   E5                     PUSH   HL   
1248   11 02 00               LD   DE,2   
124B   B7                     OR   A   
124C   ED 52                  SBC   HL,DE   
124E   7D                     LD   A,L   
124F   B4                     OR   H   
1250   CA AC 12               JP   Z,expectM_2870S74   
1253   CD F8 0C               CALL   printStr   
1256   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
125E   CD F8 0C               CALL   printStr   
1261   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1270   21 02 00               LD   hl,2   
1273   E5                     PUSH   hl   
1274   E5                     PUSH   hl   
1275   CD 17 0E               CALL   run   
1278   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1280   CD 80 0C               CALL   flushBuffer   
1283   CD F8 0C               CALL   printStr   
1286   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1293   E1                     POP   hl   
1294   E5                     PUSH   hl   
1295   E5                     PUSH   hl   
1296   CD 17 0E               CALL   run   
1299   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12A8   CD 80 0C               CALL   flushBuffer   
12AB   76                     HALT      
12AC                EXPECTM_2870S74:      
12AC   E1                     POP   HL   
12AD                          ;*Macro unroll:  test "1", 1
12AD   31 00 53               LD   SP,STACK   
12B0   CD 40 0D               CALL   coldInit   
12B3   CD 70 51               CALL   execStr   
12B6   31 00                  DB   "1",0   
12B8   CD 80 0C               CALL   flushBuffer   
12BB   E1                     POP   HL   
12BC   E5                     PUSH   HL   
12BD   11 01 00               LD   DE,1   
12C0   B7                     OR   A   
12C1   ED 52                  SBC   HL,DE   
12C3   7D                     LD   A,L   
12C4   B4                     OR   H   
12C5   CA 21 13               JP   Z,expectM_2871S75   
12C8   CD F8 0C               CALL   printStr   
12CB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12D3   CD F8 0C               CALL   printStr   
12D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E5   21 01 00               LD   hl,1   
12E8   E5                     PUSH   hl   
12E9   E5                     PUSH   hl   
12EA   CD 17 0E               CALL   run   
12ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12F5   CD 80 0C               CALL   flushBuffer   
12F8   CD F8 0C               CALL   printStr   
12FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1308   E1                     POP   hl   
1309   E5                     PUSH   hl   
130A   E5                     PUSH   hl   
130B   CD 17 0E               CALL   run   
130E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
131D   CD 80 0C               CALL   flushBuffer   
1320   76                     HALT      
1321                EXPECTM_2871S75:      
1321   E1                     POP   HL   
1322                          ;*Macro unroll:  test "0", 0
1322   31 00 53               LD   SP,STACK   
1325   CD 40 0D               CALL   coldInit   
1328   CD 70 51               CALL   execStr   
132B   30 00                  DB   "0",0   
132D   CD 80 0C               CALL   flushBuffer   
1330   E1                     POP   HL   
1331   E5                     PUSH   HL   
1332   11 00 00               LD   DE,0   
1335   B7                     OR   A   
1336   ED 52                  SBC   HL,DE   
1338   7D                     LD   A,L   
1339   B4                     OR   H   
133A   CA 96 13               JP   Z,expectM_2872S76   
133D   CD F8 0C               CALL   printStr   
1340   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1348   CD F8 0C               CALL   printStr   
134B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
135A   21 00 00               LD   hl,0   
135D   E5                     PUSH   hl   
135E   E5                     PUSH   hl   
135F   CD 17 0E               CALL   run   
1362   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
136A   CD 80 0C               CALL   flushBuffer   
136D   CD F8 0C               CALL   printStr   
1370   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137D   E1                     POP   hl   
137E   E5                     PUSH   hl   
137F   E5                     PUSH   hl   
1380   CD 17 0E               CALL   run   
1383   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1392   CD 80 0C               CALL   flushBuffer   
1395   76                     HALT      
1396                EXPECTM_2872S76:      
1396   E1                     POP   HL   
1397                          ;*Macro unroll:  test "10", 10
1397   31 00 53               LD   SP,STACK   
139A   CD 40 0D               CALL   coldInit   
139D   CD 70 51               CALL   execStr   
13A0   31 30 00               DB   "10",0   
13A3   CD 80 0C               CALL   flushBuffer   
13A6   E1                     POP   HL   
13A7   E5                     PUSH   HL   
13A8   11 0A 00               LD   DE,10   
13AB   B7                     OR   A   
13AC   ED 52                  SBC   HL,DE   
13AE   7D                     LD   A,L   
13AF   B4                     OR   H   
13B0   CA 0D 14               JP   Z,expectM_2873S77   
13B3   CD F8 0C               CALL   printStr   
13B6   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13BF   CD F8 0C               CALL   printStr   
13C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D1   21 0A 00               LD   hl,10   
13D4   E5                     PUSH   hl   
13D5   E5                     PUSH   hl   
13D6   CD 17 0E               CALL   run   
13D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E1   CD 80 0C               CALL   flushBuffer   
13E4   CD F8 0C               CALL   printStr   
13E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F4   E1                     POP   hl   
13F5   E5                     PUSH   hl   
13F6   E5                     PUSH   hl   
13F7   CD 17 0E               CALL   run   
13FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1409   CD 80 0C               CALL   flushBuffer   
140C   76                     HALT      
140D                EXPECTM_2873S77:      
140D   E1                     POP   HL   
140E                          ;*Macro unroll:  test "123", 123
140E   31 00 53               LD   SP,STACK   
1411   CD 40 0D               CALL   coldInit   
1414   CD 70 51               CALL   execStr   
1417   31 32 33 00            DB   "123",0   
141B   CD 80 0C               CALL   flushBuffer   
141E   E1                     POP   HL   
141F   E5                     PUSH   HL   
1420   11 7B 00               LD   DE,123   
1423   B7                     OR   A   
1424   ED 52                  SBC   HL,DE   
1426   7D                     LD   A,L   
1427   B4                     OR   H   
1428   CA 86 14               JP   Z,expectM_2874S78   
142B   CD F8 0C               CALL   printStr   
142E   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1438   CD F8 0C               CALL   printStr   
143B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144A   21 7B 00               LD   hl,123   
144D   E5                     PUSH   hl   
144E   E5                     PUSH   hl   
144F   CD 17 0E               CALL   run   
1452   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
145A   CD 80 0C               CALL   flushBuffer   
145D   CD F8 0C               CALL   printStr   
1460   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146D   E1                     POP   hl   
146E   E5                     PUSH   hl   
146F   E5                     PUSH   hl   
1470   CD 17 0E               CALL   run   
1473   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1482   CD 80 0C               CALL   flushBuffer   
1485   76                     HALT      
1486                EXPECTM_2874S78:      
1486   E1                     POP   HL   
1487                          ;*Macro unroll:  test "-1",-1
1487   31 00 53               LD   SP,STACK   
148A   CD 40 0D               CALL   coldInit   
148D   CD 70 51               CALL   execStr   
1490   2D 31 00               DB   "-1",0   
1493   CD 80 0C               CALL   flushBuffer   
1496   E1                     POP   HL   
1497   E5                     PUSH   HL   
1498   11 FF FF               LD   DE,-1   
149B   B7                     OR   A   
149C   ED 52                  SBC   HL,DE   
149E   7D                     LD   A,L   
149F   B4                     OR   H   
14A0   CA FD 14               JP   Z,expectM_2875S79   
14A3   CD F8 0C               CALL   printStr   
14A6   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14AF   CD F8 0C               CALL   printStr   
14B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C1   21 FF FF               LD   hl,-1   
14C4   E5                     PUSH   hl   
14C5   E5                     PUSH   hl   
14C6   CD 17 0E               CALL   run   
14C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D1   CD 80 0C               CALL   flushBuffer   
14D4   CD F8 0C               CALL   printStr   
14D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E4   E1                     POP   hl   
14E5   E5                     PUSH   hl   
14E6   E5                     PUSH   hl   
14E7   CD 17 0E               CALL   run   
14EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14F9   CD 80 0C               CALL   flushBuffer   
14FC   76                     HALT      
14FD                EXPECTM_2875S79:      
14FD   E1                     POP   HL   
14FE                          ;*Macro unroll:  test "''", 0
14FE   31 00 53               LD   SP,STACK   
1501   CD 40 0D               CALL   coldInit   
1504   CD 70 51               CALL   execStr   
1507   27 27 00               DB   "''",0   
150A   CD 80 0C               CALL   flushBuffer   
150D   E1                     POP   HL   
150E   E5                     PUSH   HL   
150F   11 00 00               LD   DE,0   
1512   B7                     OR   A   
1513   ED 52                  SBC   HL,DE   
1515   7D                     LD   A,L   
1516   B4                     OR   H   
1517   CA 74 15               JP   Z,expectM_2876S80   
151A   CD F8 0C               CALL   printStr   
151D   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1526   CD F8 0C               CALL   printStr   
1529   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1538   21 00 00               LD   hl,0   
153B   E5                     PUSH   hl   
153C   E5                     PUSH   hl   
153D   CD 17 0E               CALL   run   
1540   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1548   CD 80 0C               CALL   flushBuffer   
154B   CD F8 0C               CALL   printStr   
154E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
155B   E1                     POP   hl   
155C   E5                     PUSH   hl   
155D   E5                     PUSH   hl   
155E   CD 17 0E               CALL   run   
1561   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1570   CD 80 0C               CALL   flushBuffer   
1573   76                     HALT      
1574                EXPECTM_2876S80:      
1574   E1                     POP   HL   
1575                          ;*Macro unroll:  test "'a'", $61
1575   31 00 53               LD   SP,STACK   
1578   CD 40 0D               CALL   coldInit   
157B   CD 70 51               CALL   execStr   
157E   27 61 27 00            DB   "'a'",0   
1582   CD 80 0C               CALL   flushBuffer   
1585   E1                     POP   HL   
1586   E5                     PUSH   HL   
1587   11 61 00               LD   DE,$61   
158A   B7                     OR   A   
158B   ED 52                  SBC   HL,DE   
158D   7D                     LD   A,L   
158E   B4                     OR   H   
158F   CA ED 15               JP   Z,expectM_2877S81   
1592   CD F8 0C               CALL   printStr   
1595   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
159F   CD F8 0C               CALL   printStr   
15A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15B1   21 61 00               LD   hl,$61   
15B4   E5                     PUSH   hl   
15B5   E5                     PUSH   hl   
15B6   CD 17 0E               CALL   run   
15B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15C1   CD 80 0C               CALL   flushBuffer   
15C4   CD F8 0C               CALL   printStr   
15C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15D4   E1                     POP   hl   
15D5   E5                     PUSH   hl   
15D6   E5                     PUSH   hl   
15D7   CD 17 0E               CALL   run   
15DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15E9   CD 80 0C               CALL   flushBuffer   
15EC   76                     HALT      
15ED                EXPECTM_2877S81:      
15ED   E1                     POP   HL   
15EE                          ;*Macro unroll:  test "'\\''", $27
15EE   31 00 53               LD   SP,STACK   
15F1   CD 40 0D               CALL   coldInit   
15F4   CD 70 51               CALL   execStr   
15F7   27 5C 27 27 00         DB   "'\\''",0   
15FC   CD 80 0C               CALL   flushBuffer   
15FF   E1                     POP   HL   
1600   E5                     PUSH   HL   
1601   11 27 00               LD   DE,$27   
1604   B7                     OR   A   
1605   ED 52                  SBC   HL,DE   
1607   7D                     LD   A,L   
1608   B4                     OR   H   
1609   CA 68 16               JP   Z,expectM_2878S82   
160C   CD F8 0C               CALL   printStr   
160F   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
161A   CD F8 0C               CALL   printStr   
161D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
162C   21 27 00               LD   hl,$27   
162F   E5                     PUSH   hl   
1630   E5                     PUSH   hl   
1631   CD 17 0E               CALL   run   
1634   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
163C   CD 80 0C               CALL   flushBuffer   
163F   CD F8 0C               CALL   printStr   
1642   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164F   E1                     POP   hl   
1650   E5                     PUSH   hl   
1651   E5                     PUSH   hl   
1652   CD 17 0E               CALL   run   
1655   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1664   CD 80 0C               CALL   flushBuffer   
1667   76                     HALT      
1668                EXPECTM_2878S82:      
1668   E1                     POP   HL   
1669                          ;*Macro unroll:  test "$10", $10
1669   31 00 53               LD   SP,STACK   
166C   CD 40 0D               CALL   coldInit   
166F   CD 70 51               CALL   execStr   
1672   24 31 30 00            DB   "$10",0   
1676   CD 80 0C               CALL   flushBuffer   
1679   E1                     POP   HL   
167A   E5                     PUSH   HL   
167B   11 10 00               LD   DE,$10   
167E   B7                     OR   A   
167F   ED 52                  SBC   HL,DE   
1681   7D                     LD   A,L   
1682   B4                     OR   H   
1683   CA E1 16               JP   Z,expectM_2879S83   
1686   CD F8 0C               CALL   printStr   
1689   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1693   CD F8 0C               CALL   printStr   
1696   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16A5   21 10 00               LD   hl,$10   
16A8   E5                     PUSH   hl   
16A9   E5                     PUSH   hl   
16AA   CD 17 0E               CALL   run   
16AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16B5   CD 80 0C               CALL   flushBuffer   
16B8   CD F8 0C               CALL   printStr   
16BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C8   E1                     POP   hl   
16C9   E5                     PUSH   hl   
16CA   E5                     PUSH   hl   
16CB   CD 17 0E               CALL   run   
16CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16DD   CD 80 0C               CALL   flushBuffer   
16E0   76                     HALT      
16E1                EXPECTM_2879S83:      
16E1   E1                     POP   HL   
16E2                          ;*Macro unroll:  test "$FF", $FF
16E2   31 00 53               LD   SP,STACK   
16E5   CD 40 0D               CALL   coldInit   
16E8   CD 70 51               CALL   execStr   
16EB   24 46 46 00            DB   "$FF",0   
16EF   CD 80 0C               CALL   flushBuffer   
16F2   E1                     POP   HL   
16F3   E5                     PUSH   HL   
16F4   11 FF 00               LD   DE,$FF   
16F7   B7                     OR   A   
16F8   ED 52                  SBC   HL,DE   
16FA   7D                     LD   A,L   
16FB   B4                     OR   H   
16FC   CA 5A 17               JP   Z,expectM_2880S84   
16FF   CD F8 0C               CALL   printStr   
1702   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
170C   CD F8 0C               CALL   printStr   
170F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
171E   21 FF 00               LD   hl,$FF   
1721   E5                     PUSH   hl   
1722   E5                     PUSH   hl   
1723   CD 17 0E               CALL   run   
1726   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
172E   CD 80 0C               CALL   flushBuffer   
1731   CD F8 0C               CALL   printStr   
1734   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1741   E1                     POP   hl   
1742   E5                     PUSH   hl   
1743   E5                     PUSH   hl   
1744   CD 17 0E               CALL   run   
1747   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1756   CD 80 0C               CALL   flushBuffer   
1759   76                     HALT      
175A                EXPECTM_2880S84:      
175A   E1                     POP   HL   
175B                          ;*Macro unroll:  test "-1 2 +",1
175B   31 00 53               LD   SP,STACK   
175E   CD 40 0D               CALL   coldInit   
1761   CD 70 51               CALL   execStr   
1764   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
176B   CD 80 0C               CALL   flushBuffer   
176E   E1                     POP   HL   
176F   E5                     PUSH   HL   
1770   11 01 00               LD   DE,1   
1773   B7                     OR   A   
1774   ED 52                  SBC   HL,DE   
1776   7D                     LD   A,L   
1777   B4                     OR   H   
1778   CA D9 17               JP   Z,expectM_2881S85   
177B   CD F8 0C               CALL   printStr   
177E   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
178B   CD F8 0C               CALL   printStr   
178E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
179D   21 01 00               LD   hl,1   
17A0   E5                     PUSH   hl   
17A1   E5                     PUSH   hl   
17A2   CD 17 0E               CALL   run   
17A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17AD   CD 80 0C               CALL   flushBuffer   
17B0   CD F8 0C               CALL   printStr   
17B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17C0   E1                     POP   hl   
17C1   E5                     PUSH   hl   
17C2   E5                     PUSH   hl   
17C3   CD 17 0E               CALL   run   
17C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17D5   CD 80 0C               CALL   flushBuffer   
17D8   76                     HALT      
17D9                EXPECTM_2881S85:      
17D9   E1                     POP   HL   
17DA                          ;*Macro unroll:  test "-1 1 +",0
17DA   31 00 53               LD   SP,STACK   
17DD   CD 40 0D               CALL   coldInit   
17E0   CD 70 51               CALL   execStr   
17E3   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17EA   CD 80 0C               CALL   flushBuffer   
17ED   E1                     POP   HL   
17EE   E5                     PUSH   HL   
17EF   11 00 00               LD   DE,0   
17F2   B7                     OR   A   
17F3   ED 52                  SBC   HL,DE   
17F5   7D                     LD   A,L   
17F6   B4                     OR   H   
17F7   CA 58 18               JP   Z,expectM_2882S86   
17FA   CD F8 0C               CALL   printStr   
17FD   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
180A   CD F8 0C               CALL   printStr   
180D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
181C   21 00 00               LD   hl,0   
181F   E5                     PUSH   hl   
1820   E5                     PUSH   hl   
1821   CD 17 0E               CALL   run   
1824   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
182C   CD 80 0C               CALL   flushBuffer   
182F   CD F8 0C               CALL   printStr   
1832   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
183F   E1                     POP   hl   
1840   E5                     PUSH   hl   
1841   E5                     PUSH   hl   
1842   CD 17 0E               CALL   run   
1845   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1854   CD 80 0C               CALL   flushBuffer   
1857   76                     HALT      
1858                EXPECTM_2882S86:      
1858   E1                     POP   HL   
1859                          ;*Macro unroll:  test "1 2 +", 3
1859   31 00 53               LD   SP,STACK   
185C   CD 40 0D               CALL   coldInit   
185F   CD 70 51               CALL   execStr   
1862   31 20 32 20 2B 00      DB   "1 2 +",0   
1868   CD 80 0C               CALL   flushBuffer   
186B   E1                     POP   HL   
186C   E5                     PUSH   HL   
186D   11 03 00               LD   DE,3   
1870   B7                     OR   A   
1871   ED 52                  SBC   HL,DE   
1873   7D                     LD   A,L   
1874   B4                     OR   H   
1875   CA D5 18               JP   Z,expectM_2883S87   
1878   CD F8 0C               CALL   printStr   
187B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1887   CD F8 0C               CALL   printStr   
188A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1899   21 03 00               LD   hl,3   
189C   E5                     PUSH   hl   
189D   E5                     PUSH   hl   
189E   CD 17 0E               CALL   run   
18A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18A9   CD 80 0C               CALL   flushBuffer   
18AC   CD F8 0C               CALL   printStr   
18AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18BC   E1                     POP   hl   
18BD   E5                     PUSH   hl   
18BE   E5                     PUSH   hl   
18BF   CD 17 0E               CALL   run   
18C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18D1   CD 80 0C               CALL   flushBuffer   
18D4   76                     HALT      
18D5                EXPECTM_2883S87:      
18D5   E1                     POP   HL   
18D6                          ;*Macro unroll:  test "4 1 2 +", 3
18D6   31 00 53               LD   SP,STACK   
18D9   CD 40 0D               CALL   coldInit   
18DC   CD 70 51               CALL   execStr   
18DF   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18E7   CD 80 0C               CALL   flushBuffer   
18EA   E1                     POP   HL   
18EB   E5                     PUSH   HL   
18EC   11 03 00               LD   DE,3   
18EF   B7                     OR   A   
18F0   ED 52                  SBC   HL,DE   
18F2   7D                     LD   A,L   
18F3   B4                     OR   H   
18F4   CA 56 19               JP   Z,expectM_2884S88   
18F7   CD F8 0C               CALL   printStr   
18FA   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1908   CD F8 0C               CALL   printStr   
190B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
191A   21 03 00               LD   hl,3   
191D   E5                     PUSH   hl   
191E   E5                     PUSH   hl   
191F   CD 17 0E               CALL   run   
1922   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
192A   CD 80 0C               CALL   flushBuffer   
192D   CD F8 0C               CALL   printStr   
1930   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
193D   E1                     POP   hl   
193E   E5                     PUSH   hl   
193F   E5                     PUSH   hl   
1940   CD 17 0E               CALL   run   
1943   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1952   CD 80 0C               CALL   flushBuffer   
1955   76                     HALT      
1956                EXPECTM_2884S88:      
1956   E1                     POP   HL   
1957                          ;*Macro unroll:  test "123 456 +", 123+456
1957   31 00 53               LD   SP,STACK   
195A   CD 40 0D               CALL   coldInit   
195D   CD 70 51               CALL   execStr   
1960   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
196A   CD 80 0C               CALL   flushBuffer   
196D   E1                     POP   HL   
196E   E5                     PUSH   HL   
196F   11 43 02               LD   DE,123+456   
1972   B7                     OR   A   
1973   ED 52                  SBC   HL,DE   
1975   7D                     LD   A,L   
1976   B4                     OR   H   
1977   CA DB 19               JP   Z,expectM_2885S89   
197A   CD F8 0C               CALL   printStr   
197D   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
198D   CD F8 0C               CALL   printStr   
1990   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199F   21 43 02               LD   hl,123+456   
19A2   E5                     PUSH   hl   
19A3   E5                     PUSH   hl   
19A4   CD 17 0E               CALL   run   
19A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19AF   CD 80 0C               CALL   flushBuffer   
19B2   CD F8 0C               CALL   printStr   
19B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C2   E1                     POP   hl   
19C3   E5                     PUSH   hl   
19C4   E5                     PUSH   hl   
19C5   CD 17 0E               CALL   run   
19C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19D7   CD 80 0C               CALL   flushBuffer   
19DA   76                     HALT      
19DB                EXPECTM_2885S89:      
19DB   E1                     POP   HL   
19DC                          ;*Macro unroll:  test "64 128 +", 64+128
19DC   31 00 53               LD   SP,STACK   
19DF   CD 40 0D               CALL   coldInit   
19E2   CD 70 51               CALL   execStr   
19E5   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19EE   CD 80 0C               CALL   flushBuffer   
19F1   E1                     POP   HL   
19F2   E5                     PUSH   HL   
19F3   11 C0 00               LD   DE,64+128   
19F6   B7                     OR   A   
19F7   ED 52                  SBC   HL,DE   
19F9   7D                     LD   A,L   
19FA   B4                     OR   H   
19FB   CA 5E 1A               JP   Z,expectM_2886S90   
19FE   CD F8 0C               CALL   printStr   
1A01   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1A10   CD F8 0C               CALL   printStr   
1A13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A22   21 C0 00               LD   hl,64+128   
1A25   E5                     PUSH   hl   
1A26   E5                     PUSH   hl   
1A27   CD 17 0E               CALL   run   
1A2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A32   CD 80 0C               CALL   flushBuffer   
1A35   CD F8 0C               CALL   printStr   
1A38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A45   E1                     POP   hl   
1A46   E5                     PUSH   hl   
1A47   E5                     PUSH   hl   
1A48   CD 17 0E               CALL   run   
1A4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A5A   CD 80 0C               CALL   flushBuffer   
1A5D   76                     HALT      
1A5E                EXPECTM_2886S90:      
1A5E   E1                     POP   HL   
1A5F                          ;*Macro unroll:  test "1 2 +", 3
1A5F   31 00 53               LD   SP,STACK   
1A62   CD 40 0D               CALL   coldInit   
1A65   CD 70 51               CALL   execStr   
1A68   31 20 32 20 2B 00      DB   "1 2 +",0   
1A6E   CD 80 0C               CALL   flushBuffer   
1A71   E1                     POP   HL   
1A72   E5                     PUSH   HL   
1A73   11 03 00               LD   DE,3   
1A76   B7                     OR   A   
1A77   ED 52                  SBC   HL,DE   
1A79   7D                     LD   A,L   
1A7A   B4                     OR   H   
1A7B   CA DB 1A               JP   Z,expectM_2887S91   
1A7E   CD F8 0C               CALL   printStr   
1A81   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A8D   CD F8 0C               CALL   printStr   
1A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A9F   21 03 00               LD   hl,3   
1AA2   E5                     PUSH   hl   
1AA3   E5                     PUSH   hl   
1AA4   CD 17 0E               CALL   run   
1AA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AAF   CD 80 0C               CALL   flushBuffer   
1AB2   CD F8 0C               CALL   printStr   
1AB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC2   E1                     POP   hl   
1AC3   E5                     PUSH   hl   
1AC4   E5                     PUSH   hl   
1AC5   CD 17 0E               CALL   run   
1AC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AD7   CD 80 0C               CALL   flushBuffer   
1ADA   76                     HALT      
1ADB                EXPECTM_2887S91:      
1ADB   E1                     POP   HL   
1ADC                          ;*Macro unroll:  test "1a= a++ a",2
1ADC   31 00 53               LD   SP,STACK   
1ADF   CD 40 0D               CALL   coldInit   
1AE2   CD 70 51               CALL   execStr   
1AE5   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1AEF   CD 80 0C               CALL   flushBuffer   
1AF2   E1                     POP   HL   
1AF3   E5                     PUSH   HL   
1AF4   11 02 00               LD   DE,2   
1AF7   B7                     OR   A   
1AF8   ED 52                  SBC   HL,DE   
1AFA   7D                     LD   A,L   
1AFB   B4                     OR   H   
1AFC   CA 60 1B               JP   Z,expectM_2888S92   
1AFF   CD F8 0C               CALL   printStr   
1B02   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1B12   CD F8 0C               CALL   printStr   
1B15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B24   21 02 00               LD   hl,2   
1B27   E5                     PUSH   hl   
1B28   E5                     PUSH   hl   
1B29   CD 17 0E               CALL   run   
1B2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B34   CD 80 0C               CALL   flushBuffer   
1B37   CD F8 0C               CALL   printStr   
1B3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B47   E1                     POP   hl   
1B48   E5                     PUSH   hl   
1B49   E5                     PUSH   hl   
1B4A   CD 17 0E               CALL   run   
1B4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B5C   CD 80 0C               CALL   flushBuffer   
1B5F   76                     HALT      
1B60                EXPECTM_2888S92:      
1B60   E1                     POP   HL   
1B61                          ;*Macro unroll:  test "-1 -1 -",0
1B61   31 00 53               LD   SP,STACK   
1B64   CD 40 0D               CALL   coldInit   
1B67   CD 70 51               CALL   execStr   
1B6A   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B72   CD 80 0C               CALL   flushBuffer   
1B75   E1                     POP   HL   
1B76   E5                     PUSH   HL   
1B77   11 00 00               LD   DE,0   
1B7A   B7                     OR   A   
1B7B   ED 52                  SBC   HL,DE   
1B7D   7D                     LD   A,L   
1B7E   B4                     OR   H   
1B7F   CA E1 1B               JP   Z,expectM_2889S93   
1B82   CD F8 0C               CALL   printStr   
1B85   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B93   CD F8 0C               CALL   printStr   
1B96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA5   21 00 00               LD   hl,0   
1BA8   E5                     PUSH   hl   
1BA9   E5                     PUSH   hl   
1BAA   CD 17 0E               CALL   run   
1BAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BB5   CD 80 0C               CALL   flushBuffer   
1BB8   CD F8 0C               CALL   printStr   
1BBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC8   E1                     POP   hl   
1BC9   E5                     PUSH   hl   
1BCA   E5                     PUSH   hl   
1BCB   CD 17 0E               CALL   run   
1BCE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BDD   CD 80 0C               CALL   flushBuffer   
1BE0   76                     HALT      
1BE1                EXPECTM_2889S93:      
1BE1   E1                     POP   HL   
1BE2                          ;*Macro unroll:  test "5 3 -", 2
1BE2   31 00 53               LD   SP,STACK   
1BE5   CD 40 0D               CALL   coldInit   
1BE8   CD 70 51               CALL   execStr   
1BEB   35 20 33 20 2D 00      DB   "5 3 -",0   
1BF1   CD 80 0C               CALL   flushBuffer   
1BF4   E1                     POP   HL   
1BF5   E5                     PUSH   HL   
1BF6   11 02 00               LD   DE,2   
1BF9   B7                     OR   A   
1BFA   ED 52                  SBC   HL,DE   
1BFC   7D                     LD   A,L   
1BFD   B4                     OR   H   
1BFE   CA 5E 1C               JP   Z,expectM_2890S94   
1C01   CD F8 0C               CALL   printStr   
1C04   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1C10   CD F8 0C               CALL   printStr   
1C13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C22   21 02 00               LD   hl,2   
1C25   E5                     PUSH   hl   
1C26   E5                     PUSH   hl   
1C27   CD 17 0E               CALL   run   
1C2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C32   CD 80 0C               CALL   flushBuffer   
1C35   CD F8 0C               CALL   printStr   
1C38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C45   E1                     POP   hl   
1C46   E5                     PUSH   hl   
1C47   E5                     PUSH   hl   
1C48   CD 17 0E               CALL   run   
1C4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C5A   CD 80 0C               CALL   flushBuffer   
1C5D   76                     HALT      
1C5E                EXPECTM_2890S94:      
1C5E   E1                     POP   HL   
1C5F                          ;*Macro unroll:  test "2 1 -",1
1C5F   31 00 53               LD   SP,STACK   
1C62   CD 40 0D               CALL   coldInit   
1C65   CD 70 51               CALL   execStr   
1C68   32 20 31 20 2D 00      DB   "2 1 -",0   
1C6E   CD 80 0C               CALL   flushBuffer   
1C71   E1                     POP   HL   
1C72   E5                     PUSH   HL   
1C73   11 01 00               LD   DE,1   
1C76   B7                     OR   A   
1C77   ED 52                  SBC   HL,DE   
1C79   7D                     LD   A,L   
1C7A   B4                     OR   H   
1C7B   CA DB 1C               JP   Z,expectM_2891S95   
1C7E   CD F8 0C               CALL   printStr   
1C81   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C8D   CD F8 0C               CALL   printStr   
1C90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C9F   21 01 00               LD   hl,1   
1CA2   E5                     PUSH   hl   
1CA3   E5                     PUSH   hl   
1CA4   CD 17 0E               CALL   run   
1CA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CAF   CD 80 0C               CALL   flushBuffer   
1CB2   CD F8 0C               CALL   printStr   
1CB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CC2   E1                     POP   hl   
1CC3   E5                     PUSH   hl   
1CC4   E5                     PUSH   hl   
1CC5   CD 17 0E               CALL   run   
1CC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CD7   CD 80 0C               CALL   flushBuffer   
1CDA   76                     HALT      
1CDB                EXPECTM_2891S95:      
1CDB   E1                     POP   HL   
1CDC                          ;*Macro unroll:  test "3a= a-- a",2
1CDC   31 00 53               LD   SP,STACK   
1CDF   CD 40 0D               CALL   coldInit   
1CE2   CD 70 51               CALL   execStr   
1CE5   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1CEF   CD 80 0C               CALL   flushBuffer   
1CF2   E1                     POP   HL   
1CF3   E5                     PUSH   HL   
1CF4   11 02 00               LD   DE,2   
1CF7   B7                     OR   A   
1CF8   ED 52                  SBC   HL,DE   
1CFA   7D                     LD   A,L   
1CFB   B4                     OR   H   
1CFC   CA 60 1D               JP   Z,expectM_2892S96   
1CFF   CD F8 0C               CALL   printStr   
1D02   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1D12   CD F8 0C               CALL   printStr   
1D15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D24   21 02 00               LD   hl,2   
1D27   E5                     PUSH   hl   
1D28   E5                     PUSH   hl   
1D29   CD 17 0E               CALL   run   
1D2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D34   CD 80 0C               CALL   flushBuffer   
1D37   CD F8 0C               CALL   printStr   
1D3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D47   E1                     POP   hl   
1D48   E5                     PUSH   hl   
1D49   E5                     PUSH   hl   
1D4A   CD 17 0E               CALL   run   
1D4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D5C   CD 80 0C               CALL   flushBuffer   
1D5F   76                     HALT      
1D60                EXPECTM_2892S96:      
1D60   E1                     POP   HL   
1D61                          ;*Macro unroll:  test "3 5 &", 1
1D61   31 00 53               LD   SP,STACK   
1D64   CD 40 0D               CALL   coldInit   
1D67   CD 70 51               CALL   execStr   
1D6A   33 20 35 20 26 00      DB   "3 5 &",0   
1D70   CD 80 0C               CALL   flushBuffer   
1D73   E1                     POP   HL   
1D74   E5                     PUSH   HL   
1D75   11 01 00               LD   DE,1   
1D78   B7                     OR   A   
1D79   ED 52                  SBC   HL,DE   
1D7B   7D                     LD   A,L   
1D7C   B4                     OR   H   
1D7D   CA DD 1D               JP   Z,expectM_2893S97   
1D80   CD F8 0C               CALL   printStr   
1D83   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D8F   CD F8 0C               CALL   printStr   
1D92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DA1   21 01 00               LD   hl,1   
1DA4   E5                     PUSH   hl   
1DA5   E5                     PUSH   hl   
1DA6   CD 17 0E               CALL   run   
1DA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DB1   CD 80 0C               CALL   flushBuffer   
1DB4   CD F8 0C               CALL   printStr   
1DB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC4   E1                     POP   hl   
1DC5   E5                     PUSH   hl   
1DC6   E5                     PUSH   hl   
1DC7   CD 17 0E               CALL   run   
1DCA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DD9   CD 80 0C               CALL   flushBuffer   
1DDC   76                     HALT      
1DDD                EXPECTM_2893S97:      
1DDD   E1                     POP   HL   
1DDE                          ;*Macro unroll:  test "3 5 |", 7
1DDE   31 00 53               LD   SP,STACK   
1DE1   CD 40 0D               CALL   coldInit   
1DE4   CD 70 51               CALL   execStr   
1DE7   33 20 35 20 7C 00      DB   "3 5 |",0   
1DED   CD 80 0C               CALL   flushBuffer   
1DF0   E1                     POP   HL   
1DF1   E5                     PUSH   HL   
1DF2   11 07 00               LD   DE,7   
1DF5   B7                     OR   A   
1DF6   ED 52                  SBC   HL,DE   
1DF8   7D                     LD   A,L   
1DF9   B4                     OR   H   
1DFA   CA 5A 1E               JP   Z,expectM_2894S98   
1DFD   CD F8 0C               CALL   printStr   
1E00   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1E0C   CD F8 0C               CALL   printStr   
1E0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E1E   21 07 00               LD   hl,7   
1E21   E5                     PUSH   hl   
1E22   E5                     PUSH   hl   
1E23   CD 17 0E               CALL   run   
1E26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E2E   CD 80 0C               CALL   flushBuffer   
1E31   CD F8 0C               CALL   printStr   
1E34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E41   E1                     POP   hl   
1E42   E5                     PUSH   hl   
1E43   E5                     PUSH   hl   
1E44   CD 17 0E               CALL   run   
1E47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E56   CD 80 0C               CALL   flushBuffer   
1E59   76                     HALT      
1E5A                EXPECTM_2894S98:      
1E5A   E1                     POP   HL   
1E5B                          ;*Macro unroll:  test "3 5 /x", 6
1E5B   31 00 53               LD   SP,STACK   
1E5E   CD 40 0D               CALL   coldInit   
1E61   CD 70 51               CALL   execStr   
1E64   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1E6B   CD 80 0C               CALL   flushBuffer   
1E6E   E1                     POP   HL   
1E6F   E5                     PUSH   HL   
1E70   11 06 00               LD   DE,6   
1E73   B7                     OR   A   
1E74   ED 52                  SBC   HL,DE   
1E76   7D                     LD   A,L   
1E77   B4                     OR   H   
1E78   CA D9 1E               JP   Z,expectM_2895S99   
1E7B   CD F8 0C               CALL   printStr   
1E7E   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1E8B   CD F8 0C               CALL   printStr   
1E8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E9D   21 06 00               LD   hl,6   
1EA0   E5                     PUSH   hl   
1EA1   E5                     PUSH   hl   
1EA2   CD 17 0E               CALL   run   
1EA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EAD   CD 80 0C               CALL   flushBuffer   
1EB0   CD F8 0C               CALL   printStr   
1EB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC0   E1                     POP   hl   
1EC1   E5                     PUSH   hl   
1EC2   E5                     PUSH   hl   
1EC3   CD 17 0E               CALL   run   
1EC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ED5   CD 80 0C               CALL   flushBuffer   
1ED8   76                     HALT      
1ED9                EXPECTM_2895S99:      
1ED9   E1                     POP   HL   
1EDA                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1EDA   31 00 53               LD   SP,STACK   
1EDD   CD 40 0D               CALL   coldInit   
1EE0   CD 70 51               CALL   execStr   
1EE3   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1EF2   CD 80 0C               CALL   flushBuffer   
1EF5   E1                     POP   HL   
1EF6   E5                     PUSH   HL   
1EF7   11 06 00               LD   DE,6   
1EFA   B7                     OR   A   
1EFB   ED 52                  SBC   HL,DE   
1EFD   7D                     LD   A,L   
1EFE   B4                     OR   H   
1EFF   CA 68 1F               JP   Z,expectM_2896S100   
1F02   CD F8 0C               CALL   printStr   
1F05   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1F1A   CD F8 0C               CALL   printStr   
1F1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F2C   21 06 00               LD   hl,6   
1F2F   E5                     PUSH   hl   
1F30   E5                     PUSH   hl   
1F31   CD 17 0E               CALL   run   
1F34   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F3C   CD 80 0C               CALL   flushBuffer   
1F3F   CD F8 0C               CALL   printStr   
1F42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4F   E1                     POP   hl   
1F50   E5                     PUSH   hl   
1F51   E5                     PUSH   hl   
1F52   CD 17 0E               CALL   run   
1F55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F64   CD 80 0C               CALL   flushBuffer   
1F67   76                     HALT      
1F68                EXPECTM_2896S100:      
1F68   E1                     POP   HL   
1F69                          ;*Macro unroll:  test "2 3 *", 6
1F69   31 00 53               LD   SP,STACK   
1F6C   CD 40 0D               CALL   coldInit   
1F6F   CD 70 51               CALL   execStr   
1F72   32 20 33 20 2A 00      DB   "2 3 *",0   
1F78   CD 80 0C               CALL   flushBuffer   
1F7B   E1                     POP   HL   
1F7C   E5                     PUSH   HL   
1F7D   11 06 00               LD   DE,6   
1F80   B7                     OR   A   
1F81   ED 52                  SBC   HL,DE   
1F83   7D                     LD   A,L   
1F84   B4                     OR   H   
1F85   CA E5 1F               JP   Z,expectM_2897S101   
1F88   CD F8 0C               CALL   printStr   
1F8B   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1F97   CD F8 0C               CALL   printStr   
1F9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA9   21 06 00               LD   hl,6   
1FAC   E5                     PUSH   hl   
1FAD   E5                     PUSH   hl   
1FAE   CD 17 0E               CALL   run   
1FB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FB9   CD 80 0C               CALL   flushBuffer   
1FBC   CD F8 0C               CALL   printStr   
1FBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FCC   E1                     POP   hl   
1FCD   E5                     PUSH   hl   
1FCE   E5                     PUSH   hl   
1FCF   CD 17 0E               CALL   run   
1FD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FE1   CD 80 0C               CALL   flushBuffer   
1FE4   76                     HALT      
1FE5                EXPECTM_2897S101:      
1FE5   E1                     POP   HL   
1FE6                          ;*Macro unroll:  test "1 2 3 + *", 5
1FE6   31 00 53               LD   SP,STACK   
1FE9   CD 40 0D               CALL   coldInit   
1FEC   CD 70 51               CALL   execStr   
1FEF   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1FF9   CD 80 0C               CALL   flushBuffer   
1FFC   E1                     POP   HL   
1FFD   E5                     PUSH   HL   
1FFE   11 05 00               LD   DE,5   
2001   B7                     OR   A   
2002   ED 52                  SBC   HL,DE   
2004   7D                     LD   A,L   
2005   B4                     OR   H   
2006   CA 6A 20               JP   Z,expectM_2898S102   
2009   CD F8 0C               CALL   printStr   
200C   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
201C   CD F8 0C               CALL   printStr   
201F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
202E   21 05 00               LD   hl,5   
2031   E5                     PUSH   hl   
2032   E5                     PUSH   hl   
2033   CD 17 0E               CALL   run   
2036   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
203E   CD 80 0C               CALL   flushBuffer   
2041   CD F8 0C               CALL   printStr   
2044   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2051   E1                     POP   hl   
2052   E5                     PUSH   hl   
2053   E5                     PUSH   hl   
2054   CD 17 0E               CALL   run   
2057   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2066   CD 80 0C               CALL   flushBuffer   
2069   76                     HALT      
206A                EXPECTM_2898S102:      
206A   E1                     POP   HL   
206B                          ;*Macro unroll:  test "7 3 /", 2
206B   31 00 53               LD   SP,STACK   
206E   CD 40 0D               CALL   coldInit   
2071   CD 70 51               CALL   execStr   
2074   37 20 33 20 2F 00      DB   "7 3 /",0   
207A   CD 80 0C               CALL   flushBuffer   
207D   E1                     POP   HL   
207E   E5                     PUSH   HL   
207F   11 02 00               LD   DE,2   
2082   B7                     OR   A   
2083   ED 52                  SBC   HL,DE   
2085   7D                     LD   A,L   
2086   B4                     OR   H   
2087   CA E7 20               JP   Z,expectM_2899S103   
208A   CD F8 0C               CALL   printStr   
208D   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2099   CD F8 0C               CALL   printStr   
209C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20AB   21 02 00               LD   hl,2   
20AE   E5                     PUSH   hl   
20AF   E5                     PUSH   hl   
20B0   CD 17 0E               CALL   run   
20B3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20BB   CD 80 0C               CALL   flushBuffer   
20BE   CD F8 0C               CALL   printStr   
20C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20CE   E1                     POP   hl   
20CF   E5                     PUSH   hl   
20D0   E5                     PUSH   hl   
20D1   CD 17 0E               CALL   run   
20D4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20E3   CD 80 0C               CALL   flushBuffer   
20E6   76                     HALT      
20E7                EXPECTM_2899S103:      
20E7   E1                     POP   HL   
20E8                          ;*Macro unroll:  test "100a= 1a+= a", 101
20E8   31 00 53               LD   SP,STACK   
20EB   CD 40 0D               CALL   coldInit   
20EE   CD 70 51               CALL   execStr   
20F1   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
20FE   CD 80 0C               CALL   flushBuffer   
2101   E1                     POP   HL   
2102   E5                     PUSH   HL   
2103   11 65 00               LD   DE,101   
2106   B7                     OR   A   
2107   ED 52                  SBC   HL,DE   
2109   7D                     LD   A,L   
210A   B4                     OR   H   
210B   CA 72 21               JP   Z,expectM_2900S104   
210E   CD F8 0C               CALL   printStr   
2111   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2124   CD F8 0C               CALL   printStr   
2127   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2136   21 65 00               LD   hl,101   
2139   E5                     PUSH   hl   
213A   E5                     PUSH   hl   
213B   CD 17 0E               CALL   run   
213E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2146   CD 80 0C               CALL   flushBuffer   
2149   CD F8 0C               CALL   printStr   
214C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2159   E1                     POP   hl   
215A   E5                     PUSH   hl   
215B   E5                     PUSH   hl   
215C   CD 17 0E               CALL   run   
215F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
216E   CD 80 0C               CALL   flushBuffer   
2171   76                     HALT      
2172                EXPECTM_2900S104:      
2172   E1                     POP   HL   
2173                          ;*Macro unroll:  test "100a= a1-= a", 99
2173   31 00 53               LD   SP,STACK   
2176   CD 40 0D               CALL   coldInit   
2179   CD 70 51               CALL   execStr   
217C   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
2189   CD 80 0C               CALL   flushBuffer   
218C   E1                     POP   HL   
218D   E5                     PUSH   HL   
218E   11 63 00               LD   DE,99   
2191   B7                     OR   A   
2192   ED 52                  SBC   HL,DE   
2194   7D                     LD   A,L   
2195   B4                     OR   H   
2196   CA FD 21               JP   Z,expectM_2901S105   
2199   CD F8 0C               CALL   printStr   
219C   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
21AF   CD F8 0C               CALL   printStr   
21B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C1   21 63 00               LD   hl,99   
21C4   E5                     PUSH   hl   
21C5   E5                     PUSH   hl   
21C6   CD 17 0E               CALL   run   
21C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D1   CD 80 0C               CALL   flushBuffer   
21D4   CD F8 0C               CALL   printStr   
21D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E4   E1                     POP   hl   
21E5   E5                     PUSH   hl   
21E6   E5                     PUSH   hl   
21E7   CD 17 0E               CALL   run   
21EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F9   CD 80 0C               CALL   flushBuffer   
21FC   76                     HALT      
21FD                EXPECTM_2901S105:      
21FD   E1                     POP   HL   
21FE                          ;*Macro unroll:  test "100a= a2*= a", 200
21FE   31 00 53               LD   SP,STACK   
2201   CD 40 0D               CALL   coldInit   
2204   CD 70 51               CALL   execStr   
2207   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2214   CD 80 0C               CALL   flushBuffer   
2217   E1                     POP   HL   
2218   E5                     PUSH   HL   
2219   11 C8 00               LD   DE,200   
221C   B7                     OR   A   
221D   ED 52                  SBC   HL,DE   
221F   7D                     LD   A,L   
2220   B4                     OR   H   
2221   CA 88 22               JP   Z,expectM_2902S106   
2224   CD F8 0C               CALL   printStr   
2227   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
223A   CD F8 0C               CALL   printStr   
223D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
224C   21 C8 00               LD   hl,200   
224F   E5                     PUSH   hl   
2250   E5                     PUSH   hl   
2251   CD 17 0E               CALL   run   
2254   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
225C   CD 80 0C               CALL   flushBuffer   
225F   CD F8 0C               CALL   printStr   
2262   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226F   E1                     POP   hl   
2270   E5                     PUSH   hl   
2271   E5                     PUSH   hl   
2272   CD 17 0E               CALL   run   
2275   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2284   CD 80 0C               CALL   flushBuffer   
2287   76                     HALT      
2288                EXPECTM_2902S106:      
2288   E1                     POP   HL   
2289                          ;*Macro unroll:  test "100a= a2/= a", 50
2289   31 00 53               LD   SP,STACK   
228C   CD 40 0D               CALL   coldInit   
228F   CD 70 51               CALL   execStr   
2292   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
229F   CD 80 0C               CALL   flushBuffer   
22A2   E1                     POP   HL   
22A3   E5                     PUSH   HL   
22A4   11 32 00               LD   DE,50   
22A7   B7                     OR   A   
22A8   ED 52                  SBC   HL,DE   
22AA   7D                     LD   A,L   
22AB   B4                     OR   H   
22AC   CA 13 23               JP   Z,expectM_2903S107   
22AF   CD F8 0C               CALL   printStr   
22B2   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
22C5   CD F8 0C               CALL   printStr   
22C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D7   21 32 00               LD   hl,50   
22DA   E5                     PUSH   hl   
22DB   E5                     PUSH   hl   
22DC   CD 17 0E               CALL   run   
22DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22E7   CD 80 0C               CALL   flushBuffer   
22EA   CD F8 0C               CALL   printStr   
22ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FA   E1                     POP   hl   
22FB   E5                     PUSH   hl   
22FC   E5                     PUSH   hl   
22FD   CD 17 0E               CALL   run   
2300   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
230F   CD 80 0C               CALL   flushBuffer   
2312   76                     HALT      
2313                EXPECTM_2903S107:      
2313   E1                     POP   HL   
2314                          ;*Macro unroll:  test "7 3 / /re", 1
2314   31 00 53               LD   SP,STACK   
2317   CD 40 0D               CALL   coldInit   
231A   CD 70 51               CALL   execStr   
231D   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2327   CD 80 0C               CALL   flushBuffer   
232A   E1                     POP   HL   
232B   E5                     PUSH   HL   
232C   11 01 00               LD   DE,1   
232F   B7                     OR   A   
2330   ED 52                  SBC   HL,DE   
2332   7D                     LD   A,L   
2333   B4                     OR   H   
2334   CA 98 23               JP   Z,expectM_2904S108   
2337   CD F8 0C               CALL   printStr   
233A   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
234A   CD F8 0C               CALL   printStr   
234D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
235C   21 01 00               LD   hl,1   
235F   E5                     PUSH   hl   
2360   E5                     PUSH   hl   
2361   CD 17 0E               CALL   run   
2364   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
236C   CD 80 0C               CALL   flushBuffer   
236F   CD F8 0C               CALL   printStr   
2372   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237F   E1                     POP   hl   
2380   E5                     PUSH   hl   
2381   E5                     PUSH   hl   
2382   CD 17 0E               CALL   run   
2385   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2394   CD 80 0C               CALL   flushBuffer   
2397   76                     HALT      
2398                EXPECTM_2904S108:      
2398   E1                     POP   HL   
2399                          ;*Macro unroll:  test "7 3 /", 2
2399   31 00 53               LD   SP,STACK   
239C   CD 40 0D               CALL   coldInit   
239F   CD 70 51               CALL   execStr   
23A2   37 20 33 20 2F 00      DB   "7 3 /",0   
23A8   CD 80 0C               CALL   flushBuffer   
23AB   E1                     POP   HL   
23AC   E5                     PUSH   HL   
23AD   11 02 00               LD   DE,2   
23B0   B7                     OR   A   
23B1   ED 52                  SBC   HL,DE   
23B3   7D                     LD   A,L   
23B4   B4                     OR   H   
23B5   CA 15 24               JP   Z,expectM_2905S109   
23B8   CD F8 0C               CALL   printStr   
23BB   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
23C7   CD F8 0C               CALL   printStr   
23CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D9   21 02 00               LD   hl,2   
23DC   E5                     PUSH   hl   
23DD   E5                     PUSH   hl   
23DE   CD 17 0E               CALL   run   
23E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E9   CD 80 0C               CALL   flushBuffer   
23EC   CD F8 0C               CALL   printStr   
23EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23FC   E1                     POP   hl   
23FD   E5                     PUSH   hl   
23FE   E5                     PUSH   hl   
23FF   CD 17 0E               CALL   run   
2402   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2411   CD 80 0C               CALL   flushBuffer   
2414   76                     HALT      
2415                EXPECTM_2905S109:      
2415   E1                     POP   HL   
2416                          ;*Macro unroll:  test "2 3 ==", FALSE
2416   31 00 53               LD   SP,STACK   
2419   CD 40 0D               CALL   coldInit   
241C   CD 70 51               CALL   execStr   
241F   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2426   CD 80 0C               CALL   flushBuffer   
2429   E1                     POP   HL   
242A   E5                     PUSH   HL   
242B   11 00 00               LD   DE,FALSE   
242E   B7                     OR   A   
242F   ED 52                  SBC   HL,DE   
2431   7D                     LD   A,L   
2432   B4                     OR   H   
2433   CA 94 24               JP   Z,expectM_2906S110   
2436   CD F8 0C               CALL   printStr   
2439   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2446   CD F8 0C               CALL   printStr   
2449   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2458   21 00 00               LD   hl,FALSE   
245B   E5                     PUSH   hl   
245C   E5                     PUSH   hl   
245D   CD 17 0E               CALL   run   
2460   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2468   CD 80 0C               CALL   flushBuffer   
246B   CD F8 0C               CALL   printStr   
246E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
247B   E1                     POP   hl   
247C   E5                     PUSH   hl   
247D   E5                     PUSH   hl   
247E   CD 17 0E               CALL   run   
2481   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2490   CD 80 0C               CALL   flushBuffer   
2493   76                     HALT      
2494                EXPECTM_2906S110:      
2494   E1                     POP   HL   
2495                          ;*Macro unroll:  test "3 3 ==", TRUE
2495   31 00 53               LD   SP,STACK   
2498   CD 40 0D               CALL   coldInit   
249B   CD 70 51               CALL   execStr   
249E   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
24A5   CD 80 0C               CALL   flushBuffer   
24A8   E1                     POP   HL   
24A9   E5                     PUSH   HL   
24AA   11 FF FF               LD   DE,TRUE   
24AD   B7                     OR   A   
24AE   ED 52                  SBC   HL,DE   
24B0   7D                     LD   A,L   
24B1   B4                     OR   H   
24B2   CA 13 25               JP   Z,expectM_2907S111   
24B5   CD F8 0C               CALL   printStr   
24B8   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
24C5   CD F8 0C               CALL   printStr   
24C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D7   21 FF FF               LD   hl,TRUE   
24DA   E5                     PUSH   hl   
24DB   E5                     PUSH   hl   
24DC   CD 17 0E               CALL   run   
24DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24E7   CD 80 0C               CALL   flushBuffer   
24EA   CD F8 0C               CALL   printStr   
24ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24FA   E1                     POP   hl   
24FB   E5                     PUSH   hl   
24FC   E5                     PUSH   hl   
24FD   CD 17 0E               CALL   run   
2500   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
250F   CD 80 0C               CALL   flushBuffer   
2512   76                     HALT      
2513                EXPECTM_2907S111:      
2513   E1                     POP   HL   
2514                          ;*Macro unroll:  test "1 2 <", TRUE
2514   31 00 53               LD   SP,STACK   
2517   CD 40 0D               CALL   coldInit   
251A   CD 70 51               CALL   execStr   
251D   31 20 32 20 3C 00      DB   "1 2 <",0   
2523   CD 80 0C               CALL   flushBuffer   
2526   E1                     POP   HL   
2527   E5                     PUSH   HL   
2528   11 FF FF               LD   DE,TRUE   
252B   B7                     OR   A   
252C   ED 52                  SBC   HL,DE   
252E   7D                     LD   A,L   
252F   B4                     OR   H   
2530   CA 90 25               JP   Z,expectM_2908S112   
2533   CD F8 0C               CALL   printStr   
2536   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2542   CD F8 0C               CALL   printStr   
2545   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2554   21 FF FF               LD   hl,TRUE   
2557   E5                     PUSH   hl   
2558   E5                     PUSH   hl   
2559   CD 17 0E               CALL   run   
255C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2564   CD 80 0C               CALL   flushBuffer   
2567   CD F8 0C               CALL   printStr   
256A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2577   E1                     POP   hl   
2578   E5                     PUSH   hl   
2579   E5                     PUSH   hl   
257A   CD 17 0E               CALL   run   
257D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
258C   CD 80 0C               CALL   flushBuffer   
258F   76                     HALT      
2590                EXPECTM_2908S112:      
2590   E1                     POP   HL   
2591                          ;*Macro unroll:  test "2 1 <", FALSE
2591   31 00 53               LD   SP,STACK   
2594   CD 40 0D               CALL   coldInit   
2597   CD 70 51               CALL   execStr   
259A   32 20 31 20 3C 00      DB   "2 1 <",0   
25A0   CD 80 0C               CALL   flushBuffer   
25A3   E1                     POP   HL   
25A4   E5                     PUSH   HL   
25A5   11 00 00               LD   DE,FALSE   
25A8   B7                     OR   A   
25A9   ED 52                  SBC   HL,DE   
25AB   7D                     LD   A,L   
25AC   B4                     OR   H   
25AD   CA 0D 26               JP   Z,expectM_2909S113   
25B0   CD F8 0C               CALL   printStr   
25B3   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
25BF   CD F8 0C               CALL   printStr   
25C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25D1   21 00 00               LD   hl,FALSE   
25D4   E5                     PUSH   hl   
25D5   E5                     PUSH   hl   
25D6   CD 17 0E               CALL   run   
25D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25E1   CD 80 0C               CALL   flushBuffer   
25E4   CD F8 0C               CALL   printStr   
25E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F4   E1                     POP   hl   
25F5   E5                     PUSH   hl   
25F6   E5                     PUSH   hl   
25F7   CD 17 0E               CALL   run   
25FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2609   CD 80 0C               CALL   flushBuffer   
260C   76                     HALT      
260D                EXPECTM_2909S113:      
260D   E1                     POP   HL   
260E                          ;*Macro unroll:  test "2 3 <", TRUE
260E   31 00 53               LD   SP,STACK   
2611   CD 40 0D               CALL   coldInit   
2614   CD 70 51               CALL   execStr   
2617   32 20 33 20 3C 00      DB   "2 3 <",0   
261D   CD 80 0C               CALL   flushBuffer   
2620   E1                     POP   HL   
2621   E5                     PUSH   HL   
2622   11 FF FF               LD   DE,TRUE   
2625   B7                     OR   A   
2626   ED 52                  SBC   HL,DE   
2628   7D                     LD   A,L   
2629   B4                     OR   H   
262A   CA 8A 26               JP   Z,expectM_2910S114   
262D   CD F8 0C               CALL   printStr   
2630   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
263C   CD F8 0C               CALL   printStr   
263F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264E   21 FF FF               LD   hl,TRUE   
2651   E5                     PUSH   hl   
2652   E5                     PUSH   hl   
2653   CD 17 0E               CALL   run   
2656   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
265E   CD 80 0C               CALL   flushBuffer   
2661   CD F8 0C               CALL   printStr   
2664   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2671   E1                     POP   hl   
2672   E5                     PUSH   hl   
2673   E5                     PUSH   hl   
2674   CD 17 0E               CALL   run   
2677   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2686   CD 80 0C               CALL   flushBuffer   
2689   76                     HALT      
268A                EXPECTM_2910S114:      
268A   E1                     POP   HL   
268B                          ;*Macro unroll:  test "3 3 <", FALSE
268B   31 00 53               LD   SP,STACK   
268E   CD 40 0D               CALL   coldInit   
2691   CD 70 51               CALL   execStr   
2694   33 20 33 20 3C 00      DB   "3 3 <",0   
269A   CD 80 0C               CALL   flushBuffer   
269D   E1                     POP   HL   
269E   E5                     PUSH   HL   
269F   11 00 00               LD   DE,FALSE   
26A2   B7                     OR   A   
26A3   ED 52                  SBC   HL,DE   
26A5   7D                     LD   A,L   
26A6   B4                     OR   H   
26A7   CA 07 27               JP   Z,expectM_2911S115   
26AA   CD F8 0C               CALL   printStr   
26AD   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
26B9   CD F8 0C               CALL   printStr   
26BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26CB   21 00 00               LD   hl,FALSE   
26CE   E5                     PUSH   hl   
26CF   E5                     PUSH   hl   
26D0   CD 17 0E               CALL   run   
26D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26DB   CD 80 0C               CALL   flushBuffer   
26DE   CD F8 0C               CALL   printStr   
26E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26EE   E1                     POP   hl   
26EF   E5                     PUSH   hl   
26F0   E5                     PUSH   hl   
26F1   CD 17 0E               CALL   run   
26F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2703   CD 80 0C               CALL   flushBuffer   
2706   76                     HALT      
2707                EXPECTM_2911S115:      
2707   E1                     POP   HL   
2708                          ;*Macro unroll:  test "1 2 >", FALSE
2708   31 00 53               LD   SP,STACK   
270B   CD 40 0D               CALL   coldInit   
270E   CD 70 51               CALL   execStr   
2711   31 20 32 20 3E 00      DB   "1 2 >",0   
2717   CD 80 0C               CALL   flushBuffer   
271A   E1                     POP   HL   
271B   E5                     PUSH   HL   
271C   11 00 00               LD   DE,FALSE   
271F   B7                     OR   A   
2720   ED 52                  SBC   HL,DE   
2722   7D                     LD   A,L   
2723   B4                     OR   H   
2724   CA 84 27               JP   Z,expectM_2912S116   
2727   CD F8 0C               CALL   printStr   
272A   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2736   CD F8 0C               CALL   printStr   
2739   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2748   21 00 00               LD   hl,FALSE   
274B   E5                     PUSH   hl   
274C   E5                     PUSH   hl   
274D   CD 17 0E               CALL   run   
2750   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2758   CD 80 0C               CALL   flushBuffer   
275B   CD F8 0C               CALL   printStr   
275E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276B   E1                     POP   hl   
276C   E5                     PUSH   hl   
276D   E5                     PUSH   hl   
276E   CD 17 0E               CALL   run   
2771   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2780   CD 80 0C               CALL   flushBuffer   
2783   76                     HALT      
2784                EXPECTM_2912S116:      
2784   E1                     POP   HL   
2785                          ;*Macro unroll:  test "2 1 >", TRUE
2785   31 00 53               LD   SP,STACK   
2788   CD 40 0D               CALL   coldInit   
278B   CD 70 51               CALL   execStr   
278E   32 20 31 20 3E 00      DB   "2 1 >",0   
2794   CD 80 0C               CALL   flushBuffer   
2797   E1                     POP   HL   
2798   E5                     PUSH   HL   
2799   11 FF FF               LD   DE,TRUE   
279C   B7                     OR   A   
279D   ED 52                  SBC   HL,DE   
279F   7D                     LD   A,L   
27A0   B4                     OR   H   
27A1   CA 01 28               JP   Z,expectM_2913S117   
27A4   CD F8 0C               CALL   printStr   
27A7   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
27B3   CD F8 0C               CALL   printStr   
27B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C5   21 FF FF               LD   hl,TRUE   
27C8   E5                     PUSH   hl   
27C9   E5                     PUSH   hl   
27CA   CD 17 0E               CALL   run   
27CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27D5   CD 80 0C               CALL   flushBuffer   
27D8   CD F8 0C               CALL   printStr   
27DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E8   E1                     POP   hl   
27E9   E5                     PUSH   hl   
27EA   E5                     PUSH   hl   
27EB   CD 17 0E               CALL   run   
27EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27FD   CD 80 0C               CALL   flushBuffer   
2800   76                     HALT      
2801                EXPECTM_2913S117:      
2801   E1                     POP   HL   
2802                          ;*Macro unroll:  test "3 3 >", FALSE
2802   31 00 53               LD   SP,STACK   
2805   CD 40 0D               CALL   coldInit   
2808   CD 70 51               CALL   execStr   
280B   33 20 33 20 3E 00      DB   "3 3 >",0   
2811   CD 80 0C               CALL   flushBuffer   
2814   E1                     POP   HL   
2815   E5                     PUSH   HL   
2816   11 00 00               LD   DE,FALSE   
2819   B7                     OR   A   
281A   ED 52                  SBC   HL,DE   
281C   7D                     LD   A,L   
281D   B4                     OR   H   
281E   CA 7E 28               JP   Z,expectM_2914S118   
2821   CD F8 0C               CALL   printStr   
2824   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2830   CD F8 0C               CALL   printStr   
2833   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2842   21 00 00               LD   hl,FALSE   
2845   E5                     PUSH   hl   
2846   E5                     PUSH   hl   
2847   CD 17 0E               CALL   run   
284A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2852   CD 80 0C               CALL   flushBuffer   
2855   CD F8 0C               CALL   printStr   
2858   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2865   E1                     POP   hl   
2866   E5                     PUSH   hl   
2867   E5                     PUSH   hl   
2868   CD 17 0E               CALL   run   
286B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
287A   CD 80 0C               CALL   flushBuffer   
287D   76                     HALT      
287E                EXPECTM_2914S118:      
287E   E1                     POP   HL   
287F                          ;*Macro unroll:  test "4 3 >", TRUE
287F   31 00 53               LD   SP,STACK   
2882   CD 40 0D               CALL   coldInit   
2885   CD 70 51               CALL   execStr   
2888   34 20 33 20 3E 00      DB   "4 3 >",0   
288E   CD 80 0C               CALL   flushBuffer   
2891   E1                     POP   HL   
2892   E5                     PUSH   HL   
2893   11 FF FF               LD   DE,TRUE   
2896   B7                     OR   A   
2897   ED 52                  SBC   HL,DE   
2899   7D                     LD   A,L   
289A   B4                     OR   H   
289B   CA FB 28               JP   Z,expectM_2915S119   
289E   CD F8 0C               CALL   printStr   
28A1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
28AD   CD F8 0C               CALL   printStr   
28B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28BF   21 FF FF               LD   hl,TRUE   
28C2   E5                     PUSH   hl   
28C3   E5                     PUSH   hl   
28C4   CD 17 0E               CALL   run   
28C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28CF   CD 80 0C               CALL   flushBuffer   
28D2   CD F8 0C               CALL   printStr   
28D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E2   E1                     POP   hl   
28E3   E5                     PUSH   hl   
28E4   E5                     PUSH   hl   
28E5   CD 17 0E               CALL   run   
28E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28F7   CD 80 0C               CALL   flushBuffer   
28FA   76                     HALT      
28FB                EXPECTM_2915S119:      
28FB   E1                     POP   HL   
28FC                          ;*Macro unroll:  test "2 2 <=", TRUE
28FC   31 00 53               LD   SP,STACK   
28FF   CD 40 0D               CALL   coldInit   
2902   CD 70 51               CALL   execStr   
2905   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
290C   CD 80 0C               CALL   flushBuffer   
290F   E1                     POP   HL   
2910   E5                     PUSH   HL   
2911   11 FF FF               LD   DE,TRUE   
2914   B7                     OR   A   
2915   ED 52                  SBC   HL,DE   
2917   7D                     LD   A,L   
2918   B4                     OR   H   
2919   CA 7A 29               JP   Z,expectM_2916S120   
291C   CD F8 0C               CALL   printStr   
291F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
292C   CD F8 0C               CALL   printStr   
292F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
293E   21 FF FF               LD   hl,TRUE   
2941   E5                     PUSH   hl   
2942   E5                     PUSH   hl   
2943   CD 17 0E               CALL   run   
2946   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
294E   CD 80 0C               CALL   flushBuffer   
2951   CD F8 0C               CALL   printStr   
2954   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2961   E1                     POP   hl   
2962   E5                     PUSH   hl   
2963   E5                     PUSH   hl   
2964   CD 17 0E               CALL   run   
2967   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2976   CD 80 0C               CALL   flushBuffer   
2979   76                     HALT      
297A                EXPECTM_2916S120:      
297A   E1                     POP   HL   
297B                          ;*Macro unroll:  test "2 2 >=", TRUE
297B   31 00 53               LD   SP,STACK   
297E   CD 40 0D               CALL   coldInit   
2981   CD 70 51               CALL   execStr   
2984   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
298B   CD 80 0C               CALL   flushBuffer   
298E   E1                     POP   HL   
298F   E5                     PUSH   HL   
2990   11 FF FF               LD   DE,TRUE   
2993   B7                     OR   A   
2994   ED 52                  SBC   HL,DE   
2996   7D                     LD   A,L   
2997   B4                     OR   H   
2998   CA F9 29               JP   Z,expectM_2917S121   
299B   CD F8 0C               CALL   printStr   
299E   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
29AB   CD F8 0C               CALL   printStr   
29AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29BD   21 FF FF               LD   hl,TRUE   
29C0   E5                     PUSH   hl   
29C1   E5                     PUSH   hl   
29C2   CD 17 0E               CALL   run   
29C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29CD   CD 80 0C               CALL   flushBuffer   
29D0   CD F8 0C               CALL   printStr   
29D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E0   E1                     POP   hl   
29E1   E5                     PUSH   hl   
29E2   E5                     PUSH   hl   
29E3   CD 17 0E               CALL   run   
29E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29F5   CD 80 0C               CALL   flushBuffer   
29F8   76                     HALT      
29F9                EXPECTM_2917S121:      
29F9   E1                     POP   HL   
29FA                          ;*Macro unroll:  test "3 1 <<", 6
29FA   31 00 53               LD   SP,STACK   
29FD   CD 40 0D               CALL   coldInit   
2A00   CD 70 51               CALL   execStr   
2A03   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2A0A   CD 80 0C               CALL   flushBuffer   
2A0D   E1                     POP   HL   
2A0E   E5                     PUSH   HL   
2A0F   11 06 00               LD   DE,6   
2A12   B7                     OR   A   
2A13   ED 52                  SBC   HL,DE   
2A15   7D                     LD   A,L   
2A16   B4                     OR   H   
2A17   CA 78 2A               JP   Z,expectM_2918S122   
2A1A   CD F8 0C               CALL   printStr   
2A1D   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2A2A   CD F8 0C               CALL   printStr   
2A2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3C   21 06 00               LD   hl,6   
2A3F   E5                     PUSH   hl   
2A40   E5                     PUSH   hl   
2A41   CD 17 0E               CALL   run   
2A44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A4C   CD 80 0C               CALL   flushBuffer   
2A4F   CD F8 0C               CALL   printStr   
2A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A5F   E1                     POP   hl   
2A60   E5                     PUSH   hl   
2A61   E5                     PUSH   hl   
2A62   CD 17 0E               CALL   run   
2A65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A74   CD 80 0C               CALL   flushBuffer   
2A77   76                     HALT      
2A78                EXPECTM_2918S122:      
2A78   E1                     POP   HL   
2A79                          ;*Macro unroll:  test "10 1 >>", 5
2A79   31 00 53               LD   SP,STACK   
2A7C   CD 40 0D               CALL   coldInit   
2A7F   CD 70 51               CALL   execStr   
2A82   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2A8A   CD 80 0C               CALL   flushBuffer   
2A8D   E1                     POP   HL   
2A8E   E5                     PUSH   HL   
2A8F   11 05 00               LD   DE,5   
2A92   B7                     OR   A   
2A93   ED 52                  SBC   HL,DE   
2A95   7D                     LD   A,L   
2A96   B4                     OR   H   
2A97   CA F9 2A               JP   Z,expectM_2919S123   
2A9A   CD F8 0C               CALL   printStr   
2A9D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2AAB   CD F8 0C               CALL   printStr   
2AAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ABD   21 05 00               LD   hl,5   
2AC0   E5                     PUSH   hl   
2AC1   E5                     PUSH   hl   
2AC2   CD 17 0E               CALL   run   
2AC5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2ACD   CD 80 0C               CALL   flushBuffer   
2AD0   CD F8 0C               CALL   printStr   
2AD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AE0   E1                     POP   hl   
2AE1   E5                     PUSH   hl   
2AE2   E5                     PUSH   hl   
2AE3   CD 17 0E               CALL   run   
2AE6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AF5   CD 80 0C               CALL   flushBuffer   
2AF8   76                     HALT      
2AF9                EXPECTM_2919S123:      
2AF9   E1                     POP   HL   
2AFA                          ;*Macro unroll:  test "1 x = x", 1
2AFA   31 00 53               LD   SP,STACK   
2AFD   CD 40 0D               CALL   coldInit   
2B00   CD 70 51               CALL   execStr   
2B03   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2B0B   CD 80 0C               CALL   flushBuffer   
2B0E   E1                     POP   HL   
2B0F   E5                     PUSH   HL   
2B10   11 01 00               LD   DE,1   
2B13   B7                     OR   A   
2B14   ED 52                  SBC   HL,DE   
2B16   7D                     LD   A,L   
2B17   B4                     OR   H   
2B18   CA 7A 2B               JP   Z,expectM_2920S124   
2B1B   CD F8 0C               CALL   printStr   
2B1E   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2B2C   CD F8 0C               CALL   printStr   
2B2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B3E   21 01 00               LD   hl,1   
2B41   E5                     PUSH   hl   
2B42   E5                     PUSH   hl   
2B43   CD 17 0E               CALL   run   
2B46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B4E   CD 80 0C               CALL   flushBuffer   
2B51   CD F8 0C               CALL   printStr   
2B54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B61   E1                     POP   hl   
2B62   E5                     PUSH   hl   
2B63   E5                     PUSH   hl   
2B64   CD 17 0E               CALL   run   
2B67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B76   CD 80 0C               CALL   flushBuffer   
2B79   76                     HALT      
2B7A                EXPECTM_2920S124:      
2B7A   E1                     POP   HL   
2B7B                          ;*Macro unroll:  test "1{}^", 1
2B7B   31 00 53               LD   SP,STACK   
2B7E   CD 40 0D               CALL   coldInit   
2B81   CD 70 51               CALL   execStr   
2B84   31 7B 7D 5E 00         DB   "1{}^",0   
2B89   CD 80 0C               CALL   flushBuffer   
2B8C   E1                     POP   HL   
2B8D   E5                     PUSH   HL   
2B8E   11 01 00               LD   DE,1   
2B91   B7                     OR   A   
2B92   ED 52                  SBC   HL,DE   
2B94   7D                     LD   A,L   
2B95   B4                     OR   H   
2B96   CA F5 2B               JP   Z,expectM_2921S125   
2B99   CD F8 0C               CALL   printStr   
2B9C   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2BA7   CD F8 0C               CALL   printStr   
2BAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BB9   21 01 00               LD   hl,1   
2BBC   E5                     PUSH   hl   
2BBD   E5                     PUSH   hl   
2BBE   CD 17 0E               CALL   run   
2BC1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BC9   CD 80 0C               CALL   flushBuffer   
2BCC   CD F8 0C               CALL   printStr   
2BCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BDC   E1                     POP   hl   
2BDD   E5                     PUSH   hl   
2BDE   E5                     PUSH   hl   
2BDF   CD 17 0E               CALL   run   
2BE2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BF1   CD 80 0C               CALL   flushBuffer   
2BF4   76                     HALT      
2BF5                EXPECTM_2921S125:      
2BF5   E1                     POP   HL   
2BF6                          ;*Macro unroll:  test "{1}^", 1
2BF6   31 00 53               LD   SP,STACK   
2BF9   CD 40 0D               CALL   coldInit   
2BFC   CD 70 51               CALL   execStr   
2BFF   7B 31 7D 5E 00         DB   "{1}^",0   
2C04   CD 80 0C               CALL   flushBuffer   
2C07   E1                     POP   HL   
2C08   E5                     PUSH   HL   
2C09   11 01 00               LD   DE,1   
2C0C   B7                     OR   A   
2C0D   ED 52                  SBC   HL,DE   
2C0F   7D                     LD   A,L   
2C10   B4                     OR   H   
2C11   CA 70 2C               JP   Z,expectM_2922S126   
2C14   CD F8 0C               CALL   printStr   
2C17   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2C22   CD F8 0C               CALL   printStr   
2C25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C34   21 01 00               LD   hl,1   
2C37   E5                     PUSH   hl   
2C38   E5                     PUSH   hl   
2C39   CD 17 0E               CALL   run   
2C3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C44   CD 80 0C               CALL   flushBuffer   
2C47   CD F8 0C               CALL   printStr   
2C4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C57   E1                     POP   hl   
2C58   E5                     PUSH   hl   
2C59   E5                     PUSH   hl   
2C5A   CD 17 0E               CALL   run   
2C5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C6C   CD 80 0C               CALL   flushBuffer   
2C6F   76                     HALT      
2C70                EXPECTM_2922S126:      
2C70   E1                     POP   HL   
2C71                          ;*Macro unroll:  test "{{1}^}^", 1
2C71   31 00 53               LD   SP,STACK   
2C74   CD 40 0D               CALL   coldInit   
2C77   CD 70 51               CALL   execStr   
2C7A   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2C82   CD 80 0C               CALL   flushBuffer   
2C85   E1                     POP   HL   
2C86   E5                     PUSH   HL   
2C87   11 01 00               LD   DE,1   
2C8A   B7                     OR   A   
2C8B   ED 52                  SBC   HL,DE   
2C8D   7D                     LD   A,L   
2C8E   B4                     OR   H   
2C8F   CA F1 2C               JP   Z,expectM_2923S127   
2C92   CD F8 0C               CALL   printStr   
2C95   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2CA3   CD F8 0C               CALL   printStr   
2CA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CB5   21 01 00               LD   hl,1   
2CB8   E5                     PUSH   hl   
2CB9   E5                     PUSH   hl   
2CBA   CD 17 0E               CALL   run   
2CBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CC5   CD 80 0C               CALL   flushBuffer   
2CC8   CD F8 0C               CALL   printStr   
2CCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CD8   E1                     POP   hl   
2CD9   E5                     PUSH   hl   
2CDA   E5                     PUSH   hl   
2CDB   CD 17 0E               CALL   run   
2CDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CED   CD 80 0C               CALL   flushBuffer   
2CF0   76                     HALT      
2CF1                EXPECTM_2923S127:      
2CF1   E1                     POP   HL   
2CF2                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2CF2   31 00 53               LD   SP,STACK   
2CF5   CD 40 0D               CALL   coldInit   
2CF8   CD 70 51               CALL   execStr   
2CFB   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2D06   CD 80 0C               CALL   flushBuffer   
2D09   E1                     POP   HL   
2D0A   E5                     PUSH   HL   
2D0B   11 01 00               LD   DE,1   
2D0E   B7                     OR   A   
2D0F   ED 52                  SBC   HL,DE   
2D11   7D                     LD   A,L   
2D12   B4                     OR   H   
2D13   CA 78 2D               JP   Z,expectM_2924S128   
2D16   CD F8 0C               CALL   printStr   
2D19   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2D2A   CD F8 0C               CALL   printStr   
2D2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D3C   21 01 00               LD   hl,1   
2D3F   E5                     PUSH   hl   
2D40   E5                     PUSH   hl   
2D41   CD 17 0E               CALL   run   
2D44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D4C   CD 80 0C               CALL   flushBuffer   
2D4F   CD F8 0C               CALL   printStr   
2D52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D5F   E1                     POP   hl   
2D60   E5                     PUSH   hl   
2D61   E5                     PUSH   hl   
2D62   CD 17 0E               CALL   run   
2D65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D74   CD 80 0C               CALL   flushBuffer   
2D77   76                     HALT      
2D78                EXPECTM_2924S128:      
2D78   E1                     POP   HL   
2D79                          ;*Macro unroll:  test "5 /f{10} ?", 5
2D79   31 00 53               LD   SP,STACK   
2D7C   CD 40 0D               CALL   coldInit   
2D7F   CD 70 51               CALL   execStr   
2D82   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2D8D   CD 80 0C               CALL   flushBuffer   
2D90   E1                     POP   HL   
2D91   E5                     PUSH   HL   
2D92   11 05 00               LD   DE,5   
2D95   B7                     OR   A   
2D96   ED 52                  SBC   HL,DE   
2D98   7D                     LD   A,L   
2D99   B4                     OR   H   
2D9A   CA FF 2D               JP   Z,expectM_2925S129   
2D9D   CD F8 0C               CALL   printStr   
2DA0   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2DB1   CD F8 0C               CALL   printStr   
2DB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC3   21 05 00               LD   hl,5   
2DC6   E5                     PUSH   hl   
2DC7   E5                     PUSH   hl   
2DC8   CD 17 0E               CALL   run   
2DCB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DD3   CD 80 0C               CALL   flushBuffer   
2DD6   CD F8 0C               CALL   printStr   
2DD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DE6   E1                     POP   hl   
2DE7   E5                     PUSH   hl   
2DE8   E5                     PUSH   hl   
2DE9   CD 17 0E               CALL   run   
2DEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DFB   CD 80 0C               CALL   flushBuffer   
2DFE   76                     HALT      
2DFF                EXPECTM_2925S129:      
2DFF   E1                     POP   HL   
2E00                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2E00   31 00 53               LD   SP,STACK   
2E03   CD 40 0D               CALL   coldInit   
2E06   CD 70 51               CALL   execStr   
2E09   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2E16   CD 80 0C               CALL   flushBuffer   
2E19   E1                     POP   HL   
2E1A   E5                     PUSH   HL   
2E1B   11 0F 00               LD   DE,15   
2E1E   B7                     OR   A   
2E1F   ED 52                  SBC   HL,DE   
2E21   7D                     LD   A,L   
2E22   B4                     OR   H   
2E23   CA 8A 2E               JP   Z,expectM_2926S130   
2E26   CD F8 0C               CALL   printStr   
2E29   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2E3C   CD F8 0C               CALL   printStr   
2E3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E4E   21 0F 00               LD   hl,15   
2E51   E5                     PUSH   hl   
2E52   E5                     PUSH   hl   
2E53   CD 17 0E               CALL   run   
2E56   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E5E   CD 80 0C               CALL   flushBuffer   
2E61   CD F8 0C               CALL   printStr   
2E64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E71   E1                     POP   hl   
2E72   E5                     PUSH   hl   
2E73   E5                     PUSH   hl   
2E74   CD 17 0E               CALL   run   
2E77   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E86   CD 80 0C               CALL   flushBuffer   
2E89   76                     HALT      
2E8A                EXPECTM_2926S130:      
2E8A   E1                     POP   HL   
2E8B                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2E8B   31 00 53               LD   SP,STACK   
2E8E   CD 40 0D               CALL   coldInit   
2E91   CD 70 51               CALL   execStr   
2E94   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2EA6   CD 80 0C               CALL   flushBuffer   
2EA9   E1                     POP   HL   
2EAA   E5                     PUSH   HL   
2EAB   11 15 00               LD   DE,21   
2EAE   B7                     OR   A   
2EAF   ED 52                  SBC   HL,DE   
2EB1   7D                     LD   A,L   
2EB2   B4                     OR   H   
2EB3   CA 1F 2F               JP   Z,expectM_2927S131   
2EB6   CD F8 0C               CALL   printStr   
2EB9   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2ED1   CD F8 0C               CALL   printStr   
2ED4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EE3   21 15 00               LD   hl,21   
2EE6   E5                     PUSH   hl   
2EE7   E5                     PUSH   hl   
2EE8   CD 17 0E               CALL   run   
2EEB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EF3   CD 80 0C               CALL   flushBuffer   
2EF6   CD F8 0C               CALL   printStr   
2EF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F06   E1                     POP   hl   
2F07   E5                     PUSH   hl   
2F08   E5                     PUSH   hl   
2F09   CD 17 0E               CALL   run   
2F0C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F1B   CD 80 0C               CALL   flushBuffer   
2F1E   76                     HALT      
2F1F                EXPECTM_2927S131:      
2F1F   E1                     POP   HL   
2F20                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2F20   31 00 53               LD   SP,STACK   
2F23   CD 40 0D               CALL   coldInit   
2F26   CD 70 51               CALL   execStr   
2F29   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2F3B   CD 80 0C               CALL   flushBuffer   
2F3E   E1                     POP   HL   
2F3F   E5                     PUSH   HL   
2F40   11 0B 00               LD   DE,11   
2F43   B7                     OR   A   
2F44   ED 52                  SBC   HL,DE   
2F46   7D                     LD   A,L   
2F47   B4                     OR   H   
2F48   CA B4 2F               JP   Z,expectM_2928S132   
2F4B   CD F8 0C               CALL   printStr   
2F4E   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2F66   CD F8 0C               CALL   printStr   
2F69   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F78   21 0B 00               LD   hl,11   
2F7B   E5                     PUSH   hl   
2F7C   E5                     PUSH   hl   
2F7D   CD 17 0E               CALL   run   
2F80   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F88   CD 80 0C               CALL   flushBuffer   
2F8B   CD F8 0C               CALL   printStr   
2F8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F9B   E1                     POP   hl   
2F9C   E5                     PUSH   hl   
2F9D   E5                     PUSH   hl   
2F9E   CD 17 0E               CALL   run   
2FA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FB0   CD 80 0C               CALL   flushBuffer   
2FB3   76                     HALT      
2FB4                EXPECTM_2928S132:      
2FB4   E1                     POP   HL   
2FB5                          ;*Macro unroll:  test ": 0#", $0000
2FB5   31 00 53               LD   SP,STACK   
2FB8   CD 40 0D               CALL   coldInit   
2FBB   CD 70 51               CALL   execStr   
2FBE   3A 20 30 23 00         DB   ": 0#",0   
2FC3   CD 80 0C               CALL   flushBuffer   
2FC6   E1                     POP   HL   
2FC7   E5                     PUSH   HL   
2FC8   11 00 00               LD   DE,$0000   
2FCB   B7                     OR   A   
2FCC   ED 52                  SBC   HL,DE   
2FCE   7D                     LD   A,L   
2FCF   B4                     OR   H   
2FD0   CA 2F 30               JP   Z,expectM_2929S133   
2FD3   CD F8 0C               CALL   printStr   
2FD6   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2FE1   CD F8 0C               CALL   printStr   
2FE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FF3   21 00 00               LD   hl,$0000   
2FF6   E5                     PUSH   hl   
2FF7   E5                     PUSH   hl   
2FF8   CD 17 0E               CALL   run   
2FFB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3003   CD 80 0C               CALL   flushBuffer   
3006   CD F8 0C               CALL   printStr   
3009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3016   E1                     POP   hl   
3017   E5                     PUSH   hl   
3018   E5                     PUSH   hl   
3019   CD 17 0E               CALL   run   
301C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
302B   CD 80 0C               CALL   flushBuffer   
302E   76                     HALT      
302F                EXPECTM_2929S133:      
302F   E1                     POP   HL   
3030                          ;*Macro unroll:  test ":a 0#", $0100
3030   31 00 53               LD   SP,STACK   
3033   CD 40 0D               CALL   coldInit   
3036   CD 70 51               CALL   execStr   
3039   3A 61 20 30 23 00      DB   ":a 0#",0   
303F   CD 80 0C               CALL   flushBuffer   
3042   E1                     POP   HL   
3043   E5                     PUSH   HL   
3044   11 00 01               LD   DE,$0100   
3047   B7                     OR   A   
3048   ED 52                  SBC   HL,DE   
304A   7D                     LD   A,L   
304B   B4                     OR   H   
304C   CA AC 30               JP   Z,expectM_2930S134   
304F   CD F8 0C               CALL   printStr   
3052   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
305E   CD F8 0C               CALL   printStr   
3061   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3070   21 00 01               LD   hl,$0100   
3073   E5                     PUSH   hl   
3074   E5                     PUSH   hl   
3075   CD 17 0E               CALL   run   
3078   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3080   CD 80 0C               CALL   flushBuffer   
3083   CD F8 0C               CALL   printStr   
3086   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3093   E1                     POP   hl   
3094   E5                     PUSH   hl   
3095   E5                     PUSH   hl   
3096   CD 17 0E               CALL   run   
3099   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30A8   CD 80 0C               CALL   flushBuffer   
30AB   76                     HALT      
30AC                EXPECTM_2930S134:      
30AC   E1                     POP   HL   
30AD                          ;*Macro unroll:  test ":a: 0#", $0100
30AD   31 00 53               LD   SP,STACK   
30B0   CD 40 0D               CALL   coldInit   
30B3   CD 70 51               CALL   execStr   
30B6   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
30BD   CD 80 0C               CALL   flushBuffer   
30C0   E1                     POP   HL   
30C1   E5                     PUSH   HL   
30C2   11 00 01               LD   DE,$0100   
30C5   B7                     OR   A   
30C6   ED 52                  SBC   HL,DE   
30C8   7D                     LD   A,L   
30C9   B4                     OR   H   
30CA   CA 2B 31               JP   Z,expectM_2931S135   
30CD   CD F8 0C               CALL   printStr   
30D0   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
30DD   CD F8 0C               CALL   printStr   
30E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30EF   21 00 01               LD   hl,$0100   
30F2   E5                     PUSH   hl   
30F3   E5                     PUSH   hl   
30F4   CD 17 0E               CALL   run   
30F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30FF   CD 80 0C               CALL   flushBuffer   
3102   CD F8 0C               CALL   printStr   
3105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3112   E1                     POP   hl   
3113   E5                     PUSH   hl   
3114   E5                     PUSH   hl   
3115   CD 17 0E               CALL   run   
3118   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3127   CD 80 0C               CALL   flushBuffer   
312A   76                     HALT      
312B                EXPECTM_2931S135:      
312B   E1                     POP   HL   
312C                          ;*Macro unroll:  test ":a:b 0#", $0201
312C   31 00 53               LD   SP,STACK   
312F   CD 40 0D               CALL   coldInit   
3132   CD 70 51               CALL   execStr   
3135   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
313D   CD 80 0C               CALL   flushBuffer   
3140   E1                     POP   HL   
3141   E5                     PUSH   HL   
3142   11 01 02               LD   DE,$0201   
3145   B7                     OR   A   
3146   ED 52                  SBC   HL,DE   
3148   7D                     LD   A,L   
3149   B4                     OR   H   
314A   CA AC 31               JP   Z,expectM_2932S136   
314D   CD F8 0C               CALL   printStr   
3150   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
315E   CD F8 0C               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 01 02               LD   hl,$0201   
3173   E5                     PUSH   hl   
3174   E5                     PUSH   hl   
3175   CD 17 0E               CALL   run   
3178   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3180   CD 80 0C               CALL   flushBuffer   
3183   CD F8 0C               CALL   printStr   
3186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3193   E1                     POP   hl   
3194   E5                     PUSH   hl   
3195   E5                     PUSH   hl   
3196   CD 17 0E               CALL   run   
3199   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A8   CD 80 0C               CALL   flushBuffer   
31AB   76                     HALT      
31AC                EXPECTM_2932S136:      
31AC   E1                     POP   HL   
31AD                          ;*Macro unroll:  test "::b 0#", $0101
31AD   31 00 53               LD   SP,STACK   
31B0   CD 40 0D               CALL   coldInit   
31B3   CD 70 51               CALL   execStr   
31B6   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
31BD   CD 80 0C               CALL   flushBuffer   
31C0   E1                     POP   HL   
31C1   E5                     PUSH   HL   
31C2   11 01 01               LD   DE,$0101   
31C5   B7                     OR   A   
31C6   ED 52                  SBC   HL,DE   
31C8   7D                     LD   A,L   
31C9   B4                     OR   H   
31CA   CA 2B 32               JP   Z,expectM_2933S137   
31CD   CD F8 0C               CALL   printStr   
31D0   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
31DD   CD F8 0C               CALL   printStr   
31E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EF   21 01 01               LD   hl,$0101   
31F2   E5                     PUSH   hl   
31F3   E5                     PUSH   hl   
31F4   CD 17 0E               CALL   run   
31F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FF   CD 80 0C               CALL   flushBuffer   
3202   CD F8 0C               CALL   printStr   
3205   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3212   E1                     POP   hl   
3213   E5                     PUSH   hl   
3214   E5                     PUSH   hl   
3215   CD 17 0E               CALL   run   
3218   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3227   CD 80 0C               CALL   flushBuffer   
322A   76                     HALT      
322B                EXPECTM_2933S137:      
322B   E1                     POP   HL   
322C                          ;*Macro unroll:  test ":{2};^", 2
322C   31 00 53               LD   SP,STACK   
322F   CD 40 0D               CALL   coldInit   
3232   CD 70 51               CALL   execStr   
3235   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
323C   CD 80 0C               CALL   flushBuffer   
323F   E1                     POP   HL   
3240   E5                     PUSH   HL   
3241   11 02 00               LD   DE,2   
3244   B7                     OR   A   
3245   ED 52                  SBC   HL,DE   
3247   7D                     LD   A,L   
3248   B4                     OR   H   
3249   CA AA 32               JP   Z,expectM_2934S138   
324C   CD F8 0C               CALL   printStr   
324F   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
325C   CD F8 0C               CALL   printStr   
325F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
326E   21 02 00               LD   hl,2   
3271   E5                     PUSH   hl   
3272   E5                     PUSH   hl   
3273   CD 17 0E               CALL   run   
3276   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
327E   CD 80 0C               CALL   flushBuffer   
3281   CD F8 0C               CALL   printStr   
3284   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3291   E1                     POP   hl   
3292   E5                     PUSH   hl   
3293   E5                     PUSH   hl   
3294   CD 17 0E               CALL   run   
3297   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32A6   CD 80 0C               CALL   flushBuffer   
32A9   76                     HALT      
32AA                EXPECTM_2934S138:      
32AA   E1                     POP   HL   
32AB                          ;*Macro unroll:  test ":a{2};^", 2
32AB   31 00 53               LD   SP,STACK   
32AE   CD 40 0D               CALL   coldInit   
32B1   CD 70 51               CALL   execStr   
32B4   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
32BC   CD 80 0C               CALL   flushBuffer   
32BF   E1                     POP   HL   
32C0   E5                     PUSH   HL   
32C1   11 02 00               LD   DE,2   
32C4   B7                     OR   A   
32C5   ED 52                  SBC   HL,DE   
32C7   7D                     LD   A,L   
32C8   B4                     OR   H   
32C9   CA 2B 33               JP   Z,expectM_2935S139   
32CC   CD F8 0C               CALL   printStr   
32CF   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
32DD   CD F8 0C               CALL   printStr   
32E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32EF   21 02 00               LD   hl,2   
32F2   E5                     PUSH   hl   
32F3   E5                     PUSH   hl   
32F4   CD 17 0E               CALL   run   
32F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32FF   CD 80 0C               CALL   flushBuffer   
3302   CD F8 0C               CALL   printStr   
3305   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3312   E1                     POP   hl   
3313   E5                     PUSH   hl   
3314   E5                     PUSH   hl   
3315   CD 17 0E               CALL   run   
3318   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3327   CD 80 0C               CALL   flushBuffer   
332A   76                     HALT      
332B                EXPECTM_2935S139:      
332B   E1                     POP   HL   
332C                          ;*Macro unroll:  test "5 :a{%a};^", 5
332C   31 00 53               LD   SP,STACK   
332F   CD 40 0D               CALL   coldInit   
3332   CD 70 51               CALL   execStr   
3335   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3340   CD 80 0C               CALL   flushBuffer   
3343   E1                     POP   HL   
3344   E5                     PUSH   HL   
3345   11 05 00               LD   DE,5   
3348   B7                     OR   A   
3349   ED 52                  SBC   HL,DE   
334B   7D                     LD   A,L   
334C   B4                     OR   H   
334D   CA B2 33               JP   Z,expectM_2936S140   
3350   CD F8 0C               CALL   printStr   
3353   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
3364   CD F8 0C               CALL   printStr   
3367   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3376   21 05 00               LD   hl,5   
3379   E5                     PUSH   hl   
337A   E5                     PUSH   hl   
337B   CD 17 0E               CALL   run   
337E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3386   CD 80 0C               CALL   flushBuffer   
3389   CD F8 0C               CALL   printStr   
338C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3399   E1                     POP   hl   
339A   E5                     PUSH   hl   
339B   E5                     PUSH   hl   
339C   CD 17 0E               CALL   run   
339F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33AE   CD 80 0C               CALL   flushBuffer   
33B1   76                     HALT      
33B2                EXPECTM_2936S140:      
33B2   E1                     POP   HL   
33B3                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
33B3   31 00 53               LD   SP,STACK   
33B6   CD 40 0D               CALL   coldInit   
33B9   CD 70 51               CALL   execStr   
33BC   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
33C9   CD 80 0C               CALL   flushBuffer   
33CC   E1                     POP   HL   
33CD   E5                     PUSH   HL   
33CE   11 05 00               LD   DE,5   
33D1   B7                     OR   A   
33D2   ED 52                  SBC   HL,DE   
33D4   7D                     LD   A,L   
33D5   B4                     OR   H   
33D6   CA 3D 34               JP   Z,expectM_2937S141   
33D9   CD F8 0C               CALL   printStr   
33DC   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
33EF   CD F8 0C               CALL   printStr   
33F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3401   21 05 00               LD   hl,5   
3404   E5                     PUSH   hl   
3405   E5                     PUSH   hl   
3406   CD 17 0E               CALL   run   
3409   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3411   CD 80 0C               CALL   flushBuffer   
3414   CD F8 0C               CALL   printStr   
3417   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3424   E1                     POP   hl   
3425   E5                     PUSH   hl   
3426   E5                     PUSH   hl   
3427   CD 17 0E               CALL   run   
342A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3439   CD 80 0C               CALL   flushBuffer   
343C   76                     HALT      
343D                EXPECTM_2937S141:      
343D   E1                     POP   HL   
343E                          ;*Macro unroll:  test ":a{{2}^};^", 2
343E   31 00 53               LD   SP,STACK   
3441   CD 40 0D               CALL   coldInit   
3444   CD 70 51               CALL   execStr   
3447   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3452   CD 80 0C               CALL   flushBuffer   
3455   E1                     POP   HL   
3456   E5                     PUSH   HL   
3457   11 02 00               LD   DE,2   
345A   B7                     OR   A   
345B   ED 52                  SBC   HL,DE   
345D   7D                     LD   A,L   
345E   B4                     OR   H   
345F   CA C4 34               JP   Z,expectM_2938S142   
3462   CD F8 0C               CALL   printStr   
3465   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
3476   CD F8 0C               CALL   printStr   
3479   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3488   21 02 00               LD   hl,2   
348B   E5                     PUSH   hl   
348C   E5                     PUSH   hl   
348D   CD 17 0E               CALL   run   
3490   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3498   CD 80 0C               CALL   flushBuffer   
349B   CD F8 0C               CALL   printStr   
349E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34AB   E1                     POP   hl   
34AC   E5                     PUSH   hl   
34AD   E5                     PUSH   hl   
34AE   CD 17 0E               CALL   run   
34B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34C0   CD 80 0C               CALL   flushBuffer   
34C3   76                     HALT      
34C4                EXPECTM_2938S142:      
34C4   E1                     POP   HL   
34C5                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
34C5   31 00 53               LD   SP,STACK   
34C8   CD 40 0D               CALL   coldInit   
34CB   CD 70 51               CALL   execStr   
34CE   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
34DE   CD 80 0C               CALL   flushBuffer   
34E1   E1                     POP   HL   
34E2   E5                     PUSH   HL   
34E3   11 05 00               LD   DE,5   
34E6   B7                     OR   A   
34E7   ED 52                  SBC   HL,DE   
34E9   7D                     LD   A,L   
34EA   B4                     OR   H   
34EB   CA 55 35               JP   Z,expectM_2939S143   
34EE   CD F8 0C               CALL   printStr   
34F1   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3507   CD F8 0C               CALL   printStr   
350A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3519   21 05 00               LD   hl,5   
351C   E5                     PUSH   hl   
351D   E5                     PUSH   hl   
351E   CD 17 0E               CALL   run   
3521   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3529   CD 80 0C               CALL   flushBuffer   
352C   CD F8 0C               CALL   printStr   
352F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
353C   E1                     POP   hl   
353D   E5                     PUSH   hl   
353E   E5                     PUSH   hl   
353F   CD 17 0E               CALL   run   
3542   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3551   CD 80 0C               CALL   flushBuffer   
3554   76                     HALT      
3555                EXPECTM_2939S143:      
3555   E1                     POP   HL   
3556                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3556   31 00 53               LD   SP,STACK   
3559   CD 40 0D               CALL   coldInit   
355C   CD 70 51               CALL   execStr   
355F   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3570   CD 80 0C               CALL   flushBuffer   
3573   E1                     POP   HL   
3574   E5                     PUSH   HL   
3575   11 01 00               LD   DE,1   
3578   B7                     OR   A   
3579   ED 52                  SBC   HL,DE   
357B   7D                     LD   A,L   
357C   B4                     OR   H   
357D   CA E8 35               JP   Z,expectM_2940S144   
3580   CD F8 0C               CALL   printStr   
3583   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
359A   CD F8 0C               CALL   printStr   
359D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35AC   21 01 00               LD   hl,1   
35AF   E5                     PUSH   hl   
35B0   E5                     PUSH   hl   
35B1   CD 17 0E               CALL   run   
35B4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35BC   CD 80 0C               CALL   flushBuffer   
35BF   CD F8 0C               CALL   printStr   
35C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35CF   E1                     POP   hl   
35D0   E5                     PUSH   hl   
35D1   E5                     PUSH   hl   
35D2   CD 17 0E               CALL   run   
35D5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35E4   CD 80 0C               CALL   flushBuffer   
35E7   76                     HALT      
35E8                EXPECTM_2940S144:      
35E8   E1                     POP   HL   
35E9                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
35E9   31 00 53               LD   SP,STACK   
35EC   CD 40 0D               CALL   coldInit   
35EF   CD 70 51               CALL   execStr   
35F2   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3606   CD 80 0C               CALL   flushBuffer   
3609   E1                     POP   HL   
360A   E5                     PUSH   HL   
360B   11 07 00               LD   DE,7   
360E   B7                     OR   A   
360F   ED 52                  SBC   HL,DE   
3611   7D                     LD   A,L   
3612   B4                     OR   H   
3613   CA 81 36               JP   Z,expectM_2941S145   
3616   CD F8 0C               CALL   printStr   
3619   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3633   CD F8 0C               CALL   printStr   
3636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3645   21 07 00               LD   hl,7   
3648   E5                     PUSH   hl   
3649   E5                     PUSH   hl   
364A   CD 17 0E               CALL   run   
364D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3655   CD 80 0C               CALL   flushBuffer   
3658   CD F8 0C               CALL   printStr   
365B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3668   E1                     POP   hl   
3669   E5                     PUSH   hl   
366A   E5                     PUSH   hl   
366B   CD 17 0E               CALL   run   
366E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
367D   CD 80 0C               CALL   flushBuffer   
3680   76                     HALT      
3681                EXPECTM_2941S145:      
3681   E1                     POP   HL   
3682                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3682   31 00 53               LD   SP,STACK   
3685   CD 40 0D               CALL   coldInit   
3688   CD 70 51               CALL   execStr   
368B   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
36A1   CD 80 0C               CALL   flushBuffer   
36A4   E1                     POP   HL   
36A5   E5                     PUSH   HL   
36A6   11 06 00               LD   DE,6   
36A9   B7                     OR   A   
36AA   ED 52                  SBC   HL,DE   
36AC   7D                     LD   A,L   
36AD   B4                     OR   H   
36AE   CA 1E 37               JP   Z,expectM_2942S146   
36B1   CD F8 0C               CALL   printStr   
36B4   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
36D0   CD F8 0C               CALL   printStr   
36D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36E2   21 06 00               LD   hl,6   
36E5   E5                     PUSH   hl   
36E6   E5                     PUSH   hl   
36E7   CD 17 0E               CALL   run   
36EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36F2   CD 80 0C               CALL   flushBuffer   
36F5   CD F8 0C               CALL   printStr   
36F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3705   E1                     POP   hl   
3706   E5                     PUSH   hl   
3707   E5                     PUSH   hl   
3708   CD 17 0E               CALL   run   
370B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
371A   CD 80 0C               CALL   flushBuffer   
371D   76                     HALT      
371E                EXPECTM_2942S146:      
371E   E1                     POP   HL   
371F                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
371F   31 00 53               LD   SP,STACK   
3722   CD 40 0D               CALL   coldInit   
3725   CD 70 51               CALL   execStr   
3728   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3737   CD 80 0C               CALL   flushBuffer   
373A   E1                     POP   HL   
373B   E5                     PUSH   HL   
373C   11 02 00               LD   DE,2   
373F   B7                     OR   A   
3740   ED 52                  SBC   HL,DE   
3742   7D                     LD   A,L   
3743   B4                     OR   H   
3744   CA AD 37               JP   Z,expectM_2943S147   
3747   CD F8 0C               CALL   printStr   
374A   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
375F   CD F8 0C               CALL   printStr   
3762   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3771   21 02 00               LD   hl,2   
3774   E5                     PUSH   hl   
3775   E5                     PUSH   hl   
3776   CD 17 0E               CALL   run   
3779   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3781   CD 80 0C               CALL   flushBuffer   
3784   CD F8 0C               CALL   printStr   
3787   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3794   E1                     POP   hl   
3795   E5                     PUSH   hl   
3796   E5                     PUSH   hl   
3797   CD 17 0E               CALL   run   
379A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37A9   CD 80 0C               CALL   flushBuffer   
37AC   76                     HALT      
37AD                EXPECTM_2943S147:      
37AD   E1                     POP   HL   
37AE                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
37AE   31 00 53               LD   SP,STACK   
37B1   CD 40 0D               CALL   coldInit   
37B4   CD 70 51               CALL   execStr   
37B7   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
37C9   CD 80 0C               CALL   flushBuffer   
37CC   E1                     POP   HL   
37CD   E5                     PUSH   HL   
37CE   11 01 00               LD   DE,1   
37D1   B7                     OR   A   
37D2   ED 52                  SBC   HL,DE   
37D4   7D                     LD   A,L   
37D5   B4                     OR   H   
37D6   CA 42 38               JP   Z,expectM_2944S148   
37D9   CD F8 0C               CALL   printStr   
37DC   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
37F4   CD F8 0C               CALL   printStr   
37F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3806   21 01 00               LD   hl,1   
3809   E5                     PUSH   hl   
380A   E5                     PUSH   hl   
380B   CD 17 0E               CALL   run   
380E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3816   CD 80 0C               CALL   flushBuffer   
3819   CD F8 0C               CALL   printStr   
381C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3829   E1                     POP   hl   
382A   E5                     PUSH   hl   
382B   E5                     PUSH   hl   
382C   CD 17 0E               CALL   run   
382F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
383E   CD 80 0C               CALL   flushBuffer   
3841   76                     HALT      
3842                EXPECTM_2944S148:      
3842   E1                     POP   HL   
3843                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3843   31 00 53               LD   SP,STACK   
3846   CD 40 0D               CALL   coldInit   
3849   CD 70 51               CALL   execStr   
384C   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
385F   CD 80 0C               CALL   flushBuffer   
3862   E1                     POP   HL   
3863   E5                     PUSH   HL   
3864   11 02 00               LD   DE,2   
3867   B7                     OR   A   
3868   ED 52                  SBC   HL,DE   
386A   7D                     LD   A,L   
386B   B4                     OR   H   
386C   CA D9 38               JP   Z,expectM_2945S149   
386F   CD F8 0C               CALL   printStr   
3872   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
388B   CD F8 0C               CALL   printStr   
388E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
389D   21 02 00               LD   hl,2   
38A0   E5                     PUSH   hl   
38A1   E5                     PUSH   hl   
38A2   CD 17 0E               CALL   run   
38A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38AD   CD 80 0C               CALL   flushBuffer   
38B0   CD F8 0C               CALL   printStr   
38B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38C0   E1                     POP   hl   
38C1   E5                     PUSH   hl   
38C2   E5                     PUSH   hl   
38C3   CD 17 0E               CALL   run   
38C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38D5   CD 80 0C               CALL   flushBuffer   
38D8   76                     HALT      
38D9                EXPECTM_2945S149:      
38D9   E1                     POP   HL   
38DA                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
38DA   31 00 53               LD   SP,STACK   
38DD   CD 40 0D               CALL   coldInit   
38E0   CD 70 51               CALL   execStr   
38E3   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
38F7   CD 80 0C               CALL   flushBuffer   
38FA   E1                     POP   HL   
38FB   E5                     PUSH   HL   
38FC   11 02 00               LD   DE,2   
38FF   B7                     OR   A   
3900   ED 52                  SBC   HL,DE   
3902   7D                     LD   A,L   
3903   B4                     OR   H   
3904   CA 72 39               JP   Z,expectM_2946S150   
3907   CD F8 0C               CALL   printStr   
390A   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3924   CD F8 0C               CALL   printStr   
3927   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3936   21 02 00               LD   hl,2   
3939   E5                     PUSH   hl   
393A   E5                     PUSH   hl   
393B   CD 17 0E               CALL   run   
393E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3946   CD 80 0C               CALL   flushBuffer   
3949   CD F8 0C               CALL   printStr   
394C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3959   E1                     POP   hl   
395A   E5                     PUSH   hl   
395B   E5                     PUSH   hl   
395C   CD 17 0E               CALL   run   
395F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
396E   CD 80 0C               CALL   flushBuffer   
3971   76                     HALT      
3972                EXPECTM_2946S150:      
3972   E1                     POP   HL   
3973                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3973   31 00 53               LD   SP,STACK   
3976   CD 40 0D               CALL   coldInit   
3979   CD 70 51               CALL   execStr   
397C   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
398F   CD 80 0C               CALL   flushBuffer   
3992   E1                     POP   HL   
3993   E5                     PUSH   HL   
3994   11 02 00               LD   DE,2   
3997   B7                     OR   A   
3998   ED 52                  SBC   HL,DE   
399A   7D                     LD   A,L   
399B   B4                     OR   H   
399C   CA 09 3A               JP   Z,expectM_2947S151   
399F   CD F8 0C               CALL   printStr   
39A2   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
39BB   CD F8 0C               CALL   printStr   
39BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39CD   21 02 00               LD   hl,2   
39D0   E5                     PUSH   hl   
39D1   E5                     PUSH   hl   
39D2   CD 17 0E               CALL   run   
39D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39DD   CD 80 0C               CALL   flushBuffer   
39E0   CD F8 0C               CALL   printStr   
39E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39F0   E1                     POP   hl   
39F1   E5                     PUSH   hl   
39F2   E5                     PUSH   hl   
39F3   CD 17 0E               CALL   run   
39F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A05   CD 80 0C               CALL   flushBuffer   
3A08   76                     HALT      
3A09                EXPECTM_2947S151:      
3A09   E1                     POP   HL   
3A0A                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3A0A   31 00 53               LD   SP,STACK   
3A0D   CD 40 0D               CALL   coldInit   
3A10   CD 70 51               CALL   execStr   
3A13   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3A2D   CD 80 0C               CALL   flushBuffer   
3A30   E1                     POP   HL   
3A31   E5                     PUSH   HL   
3A32   11 05 00               LD   DE,5   
3A35   B7                     OR   A   
3A36   ED 52                  SBC   HL,DE   
3A38   7D                     LD   A,L   
3A39   B4                     OR   H   
3A3A   CA AE 3A               JP   Z,expectM_2948S152   
3A3D   CD F8 0C               CALL   printStr   
3A40   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3A60   CD F8 0C               CALL   printStr   
3A63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A72   21 05 00               LD   hl,5   
3A75   E5                     PUSH   hl   
3A76   E5                     PUSH   hl   
3A77   CD 17 0E               CALL   run   
3A7A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A82   CD 80 0C               CALL   flushBuffer   
3A85   CD F8 0C               CALL   printStr   
3A88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A95   E1                     POP   hl   
3A96   E5                     PUSH   hl   
3A97   E5                     PUSH   hl   
3A98   CD 17 0E               CALL   run   
3A9B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AAA   CD 80 0C               CALL   flushBuffer   
3AAD   76                     HALT      
3AAE                EXPECTM_2948S152:      
3AAE   E1                     POP   HL   
3AAF                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3AAF   31 00 53               LD   SP,STACK   
3AB2   CD 40 0D               CALL   coldInit   
3AB5   CD 70 51               CALL   execStr   
3AB8   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3AC9   CD 80 0C               CALL   flushBuffer   
3ACC   E1                     POP   HL   
3ACD   E5                     PUSH   HL   
3ACE   11 02 00               LD   DE,2   
3AD1   B7                     OR   A   
3AD2   ED 52                  SBC   HL,DE   
3AD4   7D                     LD   A,L   
3AD5   B4                     OR   H   
3AD6   CA 41 3B               JP   Z,expectM_2949S153   
3AD9   CD F8 0C               CALL   printStr   
3ADC   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3AF3   CD F8 0C               CALL   printStr   
3AF6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B05   21 02 00               LD   hl,2   
3B08   E5                     PUSH   hl   
3B09   E5                     PUSH   hl   
3B0A   CD 17 0E               CALL   run   
3B0D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B15   CD 80 0C               CALL   flushBuffer   
3B18   CD F8 0C               CALL   printStr   
3B1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B28   E1                     POP   hl   
3B29   E5                     PUSH   hl   
3B2A   E5                     PUSH   hl   
3B2B   CD 17 0E               CALL   run   
3B2E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B3D   CD 80 0C               CALL   flushBuffer   
3B40   76                     HALT      
3B41                EXPECTM_2949S153:      
3B41   E1                     POP   HL   
3B42                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3B42   31 00 53               LD   SP,STACK   
3B45   CD 40 0D               CALL   coldInit   
3B48   CD 70 51               CALL   execStr   
3B4B   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3B63   CD 80 0C               CALL   flushBuffer   
3B66   E1                     POP   HL   
3B67   E5                     PUSH   HL   
3B68   11 64 00               LD   DE,100   
3B6B   B7                     OR   A   
3B6C   ED 52                  SBC   HL,DE   
3B6E   7D                     LD   A,L   
3B6F   B4                     OR   H   
3B70   CA E2 3B               JP   Z,expectM_2950S154   
3B73   CD F8 0C               CALL   printStr   
3B76   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3B94   CD F8 0C               CALL   printStr   
3B97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BA6   21 64 00               LD   hl,100   
3BA9   E5                     PUSH   hl   
3BAA   E5                     PUSH   hl   
3BAB   CD 17 0E               CALL   run   
3BAE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BB6   CD 80 0C               CALL   flushBuffer   
3BB9   CD F8 0C               CALL   printStr   
3BBC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BC9   E1                     POP   hl   
3BCA   E5                     PUSH   hl   
3BCB   E5                     PUSH   hl   
3BCC   CD 17 0E               CALL   run   
3BCF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BDE   CD 80 0C               CALL   flushBuffer   
3BE1   76                     HALT      
3BE2                EXPECTM_2950S154:      
3BE2   E1                     POP   HL   
3BE3                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3BE3   31 00 53               LD   SP,STACK   
3BE6   CD 40 0D               CALL   coldInit   
3BE9   CD 70 51               CALL   execStr   
3BEC   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3C05   CD 80 0C               CALL   flushBuffer   
3C08   E1                     POP   HL   
3C09   E5                     PUSH   HL   
3C0A   11 01 00               LD   DE,1   
3C0D   B7                     OR   A   
3C0E   ED 52                  SBC   HL,DE   
3C10   7D                     LD   A,L   
3C11   B4                     OR   H   
3C12   CA 85 3C               JP   Z,expectM_2951S155   
3C15   CD F8 0C               CALL   printStr   
3C18   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3C37   CD F8 0C               CALL   printStr   
3C3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C49   21 01 00               LD   hl,1   
3C4C   E5                     PUSH   hl   
3C4D   E5                     PUSH   hl   
3C4E   CD 17 0E               CALL   run   
3C51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C59   CD 80 0C               CALL   flushBuffer   
3C5C   CD F8 0C               CALL   printStr   
3C5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C6C   E1                     POP   hl   
3C6D   E5                     PUSH   hl   
3C6E   E5                     PUSH   hl   
3C6F   CD 17 0E               CALL   run   
3C72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C81   CD 80 0C               CALL   flushBuffer   
3C84   76                     HALT      
3C85                EXPECTM_2951S155:      
3C85   E1                     POP   HL   
3C86                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3C86   31 00 53               LD   SP,STACK   
3C89   CD 40 0D               CALL   coldInit   
3C8C   CD 70 51               CALL   execStr   
3C8F   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3CA9   CD 80 0C               CALL   flushBuffer   
3CAC   E1                     POP   HL   
3CAD   E5                     PUSH   HL   
3CAE   11 02 00               LD   DE,2   
3CB1   B7                     OR   A   
3CB2   ED 52                  SBC   HL,DE   
3CB4   7D                     LD   A,L   
3CB5   B4                     OR   H   
3CB6   CA 2A 3D               JP   Z,expectM_2952S156   
3CB9   CD F8 0C               CALL   printStr   
3CBC   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3CDC   CD F8 0C               CALL   printStr   
3CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CEE   21 02 00               LD   hl,2   
3CF1   E5                     PUSH   hl   
3CF2   E5                     PUSH   hl   
3CF3   CD 17 0E               CALL   run   
3CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CFE   CD 80 0C               CALL   flushBuffer   
3D01   CD F8 0C               CALL   printStr   
3D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D11   E1                     POP   hl   
3D12   E5                     PUSH   hl   
3D13   E5                     PUSH   hl   
3D14   CD 17 0E               CALL   run   
3D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D26   CD 80 0C               CALL   flushBuffer   
3D29   76                     HALT      
3D2A                EXPECTM_2952S156:      
3D2A   E1                     POP   HL   
3D2B                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3D2B   31 00 53               LD   SP,STACK   
3D2E   CD 40 0D               CALL   coldInit   
3D31   CD 70 51               CALL   execStr   
3D34   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3D53   CD 80 0C               CALL   flushBuffer   
3D56   E1                     POP   HL   
3D57   E5                     PUSH   HL   
3D58   11 0B 00               LD   DE,11   
3D5B   B7                     OR   A   
3D5C   ED 52                  SBC   HL,DE   
3D5E   7D                     LD   A,L   
3D5F   B4                     OR   H   
3D60   CA D9 3D               JP   Z,expectM_2953S157   
3D63   CD F8 0C               CALL   printStr   
3D66   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3D8B   CD F8 0C               CALL   printStr   
3D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D9D   21 0B 00               LD   hl,11   
3DA0   E5                     PUSH   hl   
3DA1   E5                     PUSH   hl   
3DA2   CD 17 0E               CALL   run   
3DA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DAD   CD 80 0C               CALL   flushBuffer   
3DB0   CD F8 0C               CALL   printStr   
3DB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DC0   E1                     POP   hl   
3DC1   E5                     PUSH   hl   
3DC2   E5                     PUSH   hl   
3DC3   CD 17 0E               CALL   run   
3DC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DD5   CD 80 0C               CALL   flushBuffer   
3DD8   76                     HALT      
3DD9                EXPECTM_2953S157:      
3DD9   E1                     POP   HL   
3DDA                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3DDA   31 00 53               LD   SP,STACK   
3DDD   CD 40 0D               CALL   coldInit   
3DE0   CD 70 51               CALL   execStr   
3DE3   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3E02   CD 80 0C               CALL   flushBuffer   
3E05   E1                     POP   HL   
3E06   E5                     PUSH   HL   
3E07   11 15 00               LD   DE,21   
3E0A   B7                     OR   A   
3E0B   ED 52                  SBC   HL,DE   
3E0D   7D                     LD   A,L   
3E0E   B4                     OR   H   
3E0F   CA 88 3E               JP   Z,expectM_2954S158   
3E12   CD F8 0C               CALL   printStr   
3E15   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3E3A   CD F8 0C               CALL   printStr   
3E3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4C   21 15 00               LD   hl,21   
3E4F   E5                     PUSH   hl   
3E50   E5                     PUSH   hl   
3E51   CD 17 0E               CALL   run   
3E54   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E5C   CD 80 0C               CALL   flushBuffer   
3E5F   CD F8 0C               CALL   printStr   
3E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6F   E1                     POP   hl   
3E70   E5                     PUSH   hl   
3E71   E5                     PUSH   hl   
3E72   CD 17 0E               CALL   run   
3E75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E84   CD 80 0C               CALL   flushBuffer   
3E87   76                     HALT      
3E88                EXPECTM_2954S158:      
3E88   E1                     POP   HL   
3E89                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E89   31 00 53               LD   SP,STACK   
3E8C   CD 40 0D               CALL   coldInit   
3E8F   CD 70 51               CALL   execStr   
3E92   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3EA0   CD 80 0C               CALL   flushBuffer   
3EA3   E1                     POP   HL   
3EA4   E5                     PUSH   HL   
3EA5   11 14 00               LD   DE,20   
3EA8   B7                     OR   A   
3EA9   ED 52                  SBC   HL,DE   
3EAB   7D                     LD   A,L   
3EAC   B4                     OR   H   
3EAD   CA 15 3F               JP   Z,expectM_2955S159   
3EB0   CD F8 0C               CALL   printStr   
3EB3   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3EC7   CD F8 0C               CALL   printStr   
3ECA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ED9   21 14 00               LD   hl,20   
3EDC   E5                     PUSH   hl   
3EDD   E5                     PUSH   hl   
3EDE   CD 17 0E               CALL   run   
3EE1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EE9   CD 80 0C               CALL   flushBuffer   
3EEC   CD F8 0C               CALL   printStr   
3EEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EFC   E1                     POP   hl   
3EFD   E5                     PUSH   hl   
3EFE   E5                     PUSH   hl   
3EFF   CD 17 0E               CALL   run   
3F02   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F11   CD 80 0C               CALL   flushBuffer   
3F14   76                     HALT      
3F15                EXPECTM_2955S159:      
3F15   E1                     POP   HL   
3F16                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3F16   31 00 53               LD   SP,STACK   
3F19   CD 40 0D               CALL   coldInit   
3F1C   CD 70 51               CALL   execStr   
3F1F   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3F30   CD 80 0C               CALL   flushBuffer   
3F33   E1                     POP   HL   
3F34   E5                     PUSH   HL   
3F35   11 04 00               LD   DE,4   
3F38   B7                     OR   A   
3F39   ED 52                  SBC   HL,DE   
3F3B   7D                     LD   A,L   
3F3C   B4                     OR   H   
3F3D   CA A8 3F               JP   Z,expectM_2956S160   
3F40   CD F8 0C               CALL   printStr   
3F43   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3F5A   CD F8 0C               CALL   printStr   
3F5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F6C   21 04 00               LD   hl,4   
3F6F   E5                     PUSH   hl   
3F70   E5                     PUSH   hl   
3F71   CD 17 0E               CALL   run   
3F74   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F7C   CD 80 0C               CALL   flushBuffer   
3F7F   CD F8 0C               CALL   printStr   
3F82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F8F   E1                     POP   hl   
3F90   E5                     PUSH   hl   
3F91   E5                     PUSH   hl   
3F92   CD 17 0E               CALL   run   
3F95   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FA4   CD 80 0C               CALL   flushBuffer   
3FA7   76                     HALT      
3FA8                EXPECTM_2956S160:      
3FA8   E1                     POP   HL   
3FA9                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3FA9   31 00 53               LD   SP,STACK   
3FAC   CD 40 0D               CALL   coldInit   
3FAF   CD 70 51               CALL   execStr   
3FB2   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3FC0   CD 80 0C               CALL   flushBuffer   
3FC3   E1                     POP   HL   
3FC4   E5                     PUSH   HL   
3FC5   11 02 00               LD   DE,2   
3FC8   B7                     OR   A   
3FC9   ED 52                  SBC   HL,DE   
3FCB   7D                     LD   A,L   
3FCC   B4                     OR   H   
3FCD   CA 35 40               JP   Z,expectM_2957S161   
3FD0   CD F8 0C               CALL   printStr   
3FD3   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3FE7   CD F8 0C               CALL   printStr   
3FEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FF9   21 02 00               LD   hl,2   
3FFC   E5                     PUSH   hl   
3FFD   E5                     PUSH   hl   
3FFE   CD 17 0E               CALL   run   
4001   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4009   CD 80 0C               CALL   flushBuffer   
400C   CD F8 0C               CALL   printStr   
400F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
401C   E1                     POP   hl   
401D   E5                     PUSH   hl   
401E   E5                     PUSH   hl   
401F   CD 17 0E               CALL   run   
4022   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4031   CD 80 0C               CALL   flushBuffer   
4034   76                     HALT      
4035                EXPECTM_2957S161:      
4035   E1                     POP   HL   
4036                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
4036   31 00 53               LD   SP,STACK   
4039   CD 40 0D               CALL   coldInit   
403C   CD 70 51               CALL   execStr   
403F   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
4053   CD 80 0C               CALL   flushBuffer   
4056   E1                     POP   HL   
4057   E5                     PUSH   HL   
4058   11 42 00               LD   DE,66   
405B   B7                     OR   A   
405C   ED 52                  SBC   HL,DE   
405E   7D                     LD   A,L   
405F   B4                     OR   H   
4060   CA CE 40               JP   Z,expectM_2958S162   
4063   CD F8 0C               CALL   printStr   
4066   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
4080   CD F8 0C               CALL   printStr   
4083   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4092   21 42 00               LD   hl,66   
4095   E5                     PUSH   hl   
4096   E5                     PUSH   hl   
4097   CD 17 0E               CALL   run   
409A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40A2   CD 80 0C               CALL   flushBuffer   
40A5   CD F8 0C               CALL   printStr   
40A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40B5   E1                     POP   hl   
40B6   E5                     PUSH   hl   
40B7   E5                     PUSH   hl   
40B8   CD 17 0E               CALL   run   
40BB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40CA   CD 80 0C               CALL   flushBuffer   
40CD   76                     HALT      
40CE                EXPECTM_2958S162:      
40CE   E1                     POP   HL   
40CF                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
40CF   31 00 53               LD   SP,STACK   
40D2   CD 40 0D               CALL   coldInit   
40D5   CD 70 51               CALL   execStr   
40D8   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
40EC   CD 80 0C               CALL   flushBuffer   
40EF   E1                     POP   HL   
40F0   E5                     PUSH   HL   
40F1   11 0A 00               LD   DE,10   
40F4   B7                     OR   A   
40F5   ED 52                  SBC   HL,DE   
40F7   7D                     LD   A,L   
40F8   B4                     OR   H   
40F9   CA 67 41               JP   Z,expectM_2959S163   
40FC   CD F8 0C               CALL   printStr   
40FF   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
4119   CD F8 0C               CALL   printStr   
411C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
412B   21 0A 00               LD   hl,10   
412E   E5                     PUSH   hl   
412F   E5                     PUSH   hl   
4130   CD 17 0E               CALL   run   
4133   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
413B   CD 80 0C               CALL   flushBuffer   
413E   CD F8 0C               CALL   printStr   
4141   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
414E   E1                     POP   hl   
414F   E5                     PUSH   hl   
4150   E5                     PUSH   hl   
4151   CD 17 0E               CALL   run   
4154   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4163   CD 80 0C               CALL   flushBuffer   
4166   76                     HALT      
4167                EXPECTM_2959S163:      
4167   E1                     POP   HL   
4168                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
4168   31 00 53               LD   SP,STACK   
416B   CD 40 0D               CALL   coldInit   
416E   CD 70 51               CALL   execStr   
4171   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
418E   CD 80 0C               CALL   flushBuffer   
4191   E1                     POP   HL   
4192   E5                     PUSH   HL   
4193   11 0A 00               LD   DE,10   
4196   B7                     OR   A   
4197   ED 52                  SBC   HL,DE   
4199   7D                     LD   A,L   
419A   B4                     OR   H   
419B   CA 12 42               JP   Z,expectM_2960S164   
419E   CD F8 0C               CALL   printStr   
41A1   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
41C4   CD F8 0C               CALL   printStr   
41C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D6   21 0A 00               LD   hl,10   
41D9   E5                     PUSH   hl   
41DA   E5                     PUSH   hl   
41DB   CD 17 0E               CALL   run   
41DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41E6   CD 80 0C               CALL   flushBuffer   
41E9   CD F8 0C               CALL   printStr   
41EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41F9   E1                     POP   hl   
41FA   E5                     PUSH   hl   
41FB   E5                     PUSH   hl   
41FC   CD 17 0E               CALL   run   
41FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
420E   CD 80 0C               CALL   flushBuffer   
4211   76                     HALT      
4212                EXPECTM_2960S164:      
4212   E1                     POP   HL   
4213                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
4213   31 00 53               LD   SP,STACK   
4216   CD 40 0D               CALL   coldInit   
4219   CD 70 51               CALL   execStr   
421C   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
423D   CD 80 0C               CALL   flushBuffer   
4240   E1                     POP   HL   
4241   E5                     PUSH   HL   
4242   11 0A 00               LD   DE,10   
4245   B7                     OR   A   
4246   ED 52                  SBC   HL,DE   
4248   7D                     LD   A,L   
4249   B4                     OR   H   
424A   CA C5 42               JP   Z,expectM_2961S165   
424D   CD F8 0C               CALL   printStr   
4250   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
4277   CD F8 0C               CALL   printStr   
427A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4289   21 0A 00               LD   hl,10   
428C   E5                     PUSH   hl   
428D   E5                     PUSH   hl   
428E   CD 17 0E               CALL   run   
4291   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4299   CD 80 0C               CALL   flushBuffer   
429C   CD F8 0C               CALL   printStr   
429F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AC   E1                     POP   hl   
42AD   E5                     PUSH   hl   
42AE   E5                     PUSH   hl   
42AF   CD 17 0E               CALL   run   
42B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42C1   CD 80 0C               CALL   flushBuffer   
42C4   76                     HALT      
42C5                EXPECTM_2961S165:      
42C5   E1                     POP   HL   
42C6                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
42C6   31 00 53               LD   SP,STACK   
42C9   CD 40 0D               CALL   coldInit   
42CC   CD 70 51               CALL   execStr   
42CF   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
42F0   CD 80 0C               CALL   flushBuffer   
42F3   E1                     POP   HL   
42F4   E5                     PUSH   HL   
42F5   11 14 00               LD   DE,20   
42F8   B7                     OR   A   
42F9   ED 52                  SBC   HL,DE   
42FB   7D                     LD   A,L   
42FC   B4                     OR   H   
42FD   CA 78 43               JP   Z,expectM_2962S166   
4300   CD F8 0C               CALL   printStr   
4303   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
432A   CD F8 0C               CALL   printStr   
432D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
433C   21 14 00               LD   hl,20   
433F   E5                     PUSH   hl   
4340   E5                     PUSH   hl   
4341   CD 17 0E               CALL   run   
4344   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
434C   CD 80 0C               CALL   flushBuffer   
434F   CD F8 0C               CALL   printStr   
4352   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
435F   E1                     POP   hl   
4360   E5                     PUSH   hl   
4361   E5                     PUSH   hl   
4362   CD 17 0E               CALL   run   
4365   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4374   CD 80 0C               CALL   flushBuffer   
4377   76                     HALT      
4378                EXPECTM_2962S166:      
4378   E1                     POP   HL   
4379                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4379   31 00 53               LD   SP,STACK   
437C   CD 40 0D               CALL   coldInit   
437F   CD 70 51               CALL   execStr   
4382   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
439A   CD 80 0C               CALL   flushBuffer   
439D   E1                     POP   HL   
439E   E5                     PUSH   HL   
439F   11 06 00               LD   DE,6   
43A2   B7                     OR   A   
43A3   ED 52                  SBC   HL,DE   
43A5   7D                     LD   A,L   
43A6   B4                     OR   H   
43A7   CA 19 44               JP   Z,expectM_2963S167   
43AA   CD F8 0C               CALL   printStr   
43AD   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
43CB   CD F8 0C               CALL   printStr   
43CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DD   21 06 00               LD   hl,6   
43E0   E5                     PUSH   hl   
43E1   E5                     PUSH   hl   
43E2   CD 17 0E               CALL   run   
43E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43ED   CD 80 0C               CALL   flushBuffer   
43F0   CD F8 0C               CALL   printStr   
43F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4400   E1                     POP   hl   
4401   E5                     PUSH   hl   
4402   E5                     PUSH   hl   
4403   CD 17 0E               CALL   run   
4406   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4415   CD 80 0C               CALL   flushBuffer   
4418   76                     HALT      
4419                EXPECTM_2963S167:      
4419   E1                     POP   HL   
441A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
441A   31 00 53               LD   SP,STACK   
441D   CD 40 0D               CALL   coldInit   
4420   CD 70 51               CALL   execStr   
4423   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
443E   CD 80 0C               CALL   flushBuffer   
4441   E1                     POP   HL   
4442   E5                     PUSH   HL   
4443   11 02 00               LD   DE,2   
4446   B7                     OR   A   
4447   ED 52                  SBC   HL,DE   
4449   7D                     LD   A,L   
444A   B4                     OR   H   
444B   CA C0 44               JP   Z,expectM_2964S168   
444E   CD F8 0C               CALL   printStr   
4451   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4472   CD F8 0C               CALL   printStr   
4475   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4484   21 02 00               LD   hl,2   
4487   E5                     PUSH   hl   
4488   E5                     PUSH   hl   
4489   CD 17 0E               CALL   run   
448C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4494   CD 80 0C               CALL   flushBuffer   
4497   CD F8 0C               CALL   printStr   
449A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44A7   E1                     POP   hl   
44A8   E5                     PUSH   hl   
44A9   E5                     PUSH   hl   
44AA   CD 17 0E               CALL   run   
44AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44BC   CD 80 0C               CALL   flushBuffer   
44BF   76                     HALT      
44C0                EXPECTM_2964S168:      
44C0   E1                     POP   HL   
44C1                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
44C1   31 00 53               LD   SP,STACK   
44C4   CD 40 0D               CALL   coldInit   
44C7   CD 70 51               CALL   execStr   
44CA   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
44F0   CD 80 0C               CALL   flushBuffer   
44F3   E1                     POP   HL   
44F4   E5                     PUSH   HL   
44F5   11 0A 00               LD   DE,10   
44F8   B7                     OR   A   
44F9   ED 52                  SBC   HL,DE   
44FB   7D                     LD   A,L   
44FC   B4                     OR   H   
44FD   CA 7D 45               JP   Z,expectM_2965S169   
4500   CD F8 0C               CALL   printStr   
4503   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
452F   CD F8 0C               CALL   printStr   
4532   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4541   21 0A 00               LD   hl,10   
4544   E5                     PUSH   hl   
4545   E5                     PUSH   hl   
4546   CD 17 0E               CALL   run   
4549   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4551   CD 80 0C               CALL   flushBuffer   
4554   CD F8 0C               CALL   printStr   
4557   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4564   E1                     POP   hl   
4565   E5                     PUSH   hl   
4566   E5                     PUSH   hl   
4567   CD 17 0E               CALL   run   
456A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4579   CD 80 0C               CALL   flushBuffer   
457C   76                     HALT      
457D                EXPECTM_2965S169:      
457D   E1                     POP   HL   
457E                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
457E   31 00 53               LD   SP,STACK   
4581   CD 40 0D               CALL   coldInit   
4584   CD 70 51               CALL   execStr   
4587   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
45B4   CD 80 0C               CALL   flushBuffer   
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 06 00               LD   DE,6   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   CA 48 46               JP   Z,expectM_2966S170   
45C4   CD F8 0C               CALL   printStr   
45C7   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
45FA   CD F8 0C               CALL   printStr   
45FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
460C   21 06 00               LD   hl,6   
460F   E5                     PUSH   hl   
4610   E5                     PUSH   hl   
4611   CD 17 0E               CALL   run   
4614   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
461C   CD 80 0C               CALL   flushBuffer   
461F   CD F8 0C               CALL   printStr   
4622   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
462F   E1                     POP   hl   
4630   E5                     PUSH   hl   
4631   E5                     PUSH   hl   
4632   CD 17 0E               CALL   run   
4635   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4644   CD 80 0C               CALL   flushBuffer   
4647   76                     HALT      
4648                EXPECTM_2966S170:      
4648   E1                     POP   HL   
4649                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
4649   31 00 53               LD   SP,STACK   
464C   CD 40 0D               CALL   coldInit   
464F   CD 70 51               CALL   execStr   
4652   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
4667   CD 80 0C               CALL   flushBuffer   
466A   E1                     POP   HL   
466B   E5                     PUSH   HL   
466C   11 03 00               LD   DE,3   
466F   B7                     OR   A   
4670   ED 52                  SBC   HL,DE   
4672   7D                     LD   A,L   
4673   B4                     OR   H   
4674   CA E3 46               JP   Z,expectM_2967S171   
4677   CD F8 0C               CALL   printStr   
467A   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
4695   CD F8 0C               CALL   printStr   
4698   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46A7   21 03 00               LD   hl,3   
46AA   E5                     PUSH   hl   
46AB   E5                     PUSH   hl   
46AC   CD 17 0E               CALL   run   
46AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46B7   CD 80 0C               CALL   flushBuffer   
46BA   CD F8 0C               CALL   printStr   
46BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46CA   E1                     POP   hl   
46CB   E5                     PUSH   hl   
46CC   E5                     PUSH   hl   
46CD   CD 17 0E               CALL   run   
46D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46DF   CD 80 0C               CALL   flushBuffer   
46E2   76                     HALT      
46E3                EXPECTM_2967S171:      
46E3   E1                     POP   HL   
46E4                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
46E4   31 00 53               LD   SP,STACK   
46E7   CD 40 0D               CALL   coldInit   
46EA   CD 70 51               CALL   execStr   
46ED   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
4702   CD 80 0C               CALL   flushBuffer   
4705   E1                     POP   HL   
4706   E5                     PUSH   HL   
4707   11 01 00               LD   DE,1   
470A   B7                     OR   A   
470B   ED 52                  SBC   HL,DE   
470D   7D                     LD   A,L   
470E   B4                     OR   H   
470F   CA 7E 47               JP   Z,expectM_2968S172   
4712   CD F8 0C               CALL   printStr   
4715   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4730   CD F8 0C               CALL   printStr   
4733   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4742   21 01 00               LD   hl,1   
4745   E5                     PUSH   hl   
4746   E5                     PUSH   hl   
4747   CD 17 0E               CALL   run   
474A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4752   CD 80 0C               CALL   flushBuffer   
4755   CD F8 0C               CALL   printStr   
4758   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4765   E1                     POP   hl   
4766   E5                     PUSH   hl   
4767   E5                     PUSH   hl   
4768   CD 17 0E               CALL   run   
476B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
477A   CD 80 0C               CALL   flushBuffer   
477D   76                     HALT      
477E                EXPECTM_2968S172:      
477E   E1                     POP   HL   
477F                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
477F   31 00 53               LD   SP,STACK   
4782   CD 40 0D               CALL   coldInit   
4785   CD 70 51               CALL   execStr   
4788   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
4794   CD 80 0C               CALL   flushBuffer   
4797   E1                     POP   HL   
4798   E5                     PUSH   HL   
4799   11 00 00               LD   DE,NUL   
479C   B7                     OR   A   
479D   ED 52                  SBC   HL,DE   
479F   7D                     LD   A,L   
47A0   B4                     OR   H   
47A1   CA 07 48               JP   Z,expectM_2969S173   
47A4   CD F8 0C               CALL   printStr   
47A7   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
47B9   CD F8 0C               CALL   printStr   
47BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47CB   21 00 00               LD   hl,NUL   
47CE   E5                     PUSH   hl   
47CF   E5                     PUSH   hl   
47D0   CD 17 0E               CALL   run   
47D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47DB   CD 80 0C               CALL   flushBuffer   
47DE   CD F8 0C               CALL   printStr   
47E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47EE   E1                     POP   hl   
47EF   E5                     PUSH   hl   
47F0   E5                     PUSH   hl   
47F1   CD 17 0E               CALL   run   
47F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4803   CD 80 0C               CALL   flushBuffer   
4806   76                     HALT      
4807                EXPECTM_2969S173:      
4807   E1                     POP   HL   
4808                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4808   31 00 53               LD   SP,STACK   
480B   CD 40 0D               CALL   coldInit   
480E   CD 70 51               CALL   execStr   
4811   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
481D   CD 80 0C               CALL   flushBuffer   
4820   E1                     POP   HL   
4821   E5                     PUSH   HL   
4822   11 00 00               LD   DE,NUL   
4825   B7                     OR   A   
4826   ED 52                  SBC   HL,DE   
4828   7D                     LD   A,L   
4829   B4                     OR   H   
482A   CA 90 48               JP   Z,expectM_2970S174   
482D   CD F8 0C               CALL   printStr   
4830   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4842   CD F8 0C               CALL   printStr   
4845   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4854   21 00 00               LD   hl,NUL   
4857   E5                     PUSH   hl   
4858   E5                     PUSH   hl   
4859   CD 17 0E               CALL   run   
485C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4864   CD 80 0C               CALL   flushBuffer   
4867   CD F8 0C               CALL   printStr   
486A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4877   E1                     POP   hl   
4878   E5                     PUSH   hl   
4879   E5                     PUSH   hl   
487A   CD 17 0E               CALL   run   
487D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
488C   CD 80 0C               CALL   flushBuffer   
488F   76                     HALT      
4890                EXPECTM_2970S174:      
4890   E1                     POP   HL   
4891                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4891   31 00 53               LD   SP,STACK   
4894   CD 40 0D               CALL   coldInit   
4897   CD 70 51               CALL   execStr   
489A   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
48A6   CD 80 0C               CALL   flushBuffer   
48A9   E1                     POP   HL   
48AA   E5                     PUSH   HL   
48AB   11 00 00               LD   DE,NUL   
48AE   B7                     OR   A   
48AF   ED 52                  SBC   HL,DE   
48B1   7D                     LD   A,L   
48B2   B4                     OR   H   
48B3   CA 19 49               JP   Z,expectM_2971S175   
48B6   CD F8 0C               CALL   printStr   
48B9   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
48CB   CD F8 0C               CALL   printStr   
48CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48DD   21 00 00               LD   hl,NUL   
48E0   E5                     PUSH   hl   
48E1   E5                     PUSH   hl   
48E2   CD 17 0E               CALL   run   
48E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48ED   CD 80 0C               CALL   flushBuffer   
48F0   CD F8 0C               CALL   printStr   
48F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4900   E1                     POP   hl   
4901   E5                     PUSH   hl   
4902   E5                     PUSH   hl   
4903   CD 17 0E               CALL   run   
4906   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4915   CD 80 0C               CALL   flushBuffer   
4918   76                     HALT      
4919                EXPECTM_2971S175:      
4919   E1                     POP   HL   
491A                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
491A   31 00 53               LD   SP,STACK   
491D   CD 40 0D               CALL   coldInit   
4920   CD 70 51               CALL   execStr   
4923   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
492F   CD 80 0C               CALL   flushBuffer   
4932   E1                     POP   HL   
4933   E5                     PUSH   HL   
4934   11 00 00               LD   DE,NUL   
4937   B7                     OR   A   
4938   ED 52                  SBC   HL,DE   
493A   7D                     LD   A,L   
493B   B4                     OR   H   
493C   CA A2 49               JP   Z,expectM_2972S176   
493F   CD F8 0C               CALL   printStr   
4942   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4954   CD F8 0C               CALL   printStr   
4957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4966   21 00 00               LD   hl,NUL   
4969   E5                     PUSH   hl   
496A   E5                     PUSH   hl   
496B   CD 17 0E               CALL   run   
496E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4976   CD 80 0C               CALL   flushBuffer   
4979   CD F8 0C               CALL   printStr   
497C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4989   E1                     POP   hl   
498A   E5                     PUSH   hl   
498B   E5                     PUSH   hl   
498C   CD 17 0E               CALL   run   
498F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
499E   CD 80 0C               CALL   flushBuffer   
49A1   76                     HALT      
49A2                EXPECTM_2972S176:      
49A2   E1                     POP   HL   
49A3                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
49A3   31 00 53               LD   SP,STACK   
49A6   CD 40 0D               CALL   coldInit   
49A9   CD 70 51               CALL   execStr   
49AC   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
49B4   CD 80 0C               CALL   flushBuffer   
49B7   E1                     POP   HL   
49B8   E5                     PUSH   HL   
49B9   11 66 55               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49BC   B7                     OR   A   
49BD   ED 52                  SBC   HL,DE   
49BF   7D                     LD   A,L   
49C0   B4                     OR   H   
49C1   CA 23 4A               JP   Z,expectM_2973S177   
49C4   CD F8 0C               CALL   printStr   
49C7   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
49D5   CD F8 0C               CALL   printStr   
49D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49E7   21 66 55               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49EA   E5                     PUSH   hl   
49EB   E5                     PUSH   hl   
49EC   CD 17 0E               CALL   run   
49EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49F7   CD 80 0C               CALL   flushBuffer   
49FA   CD F8 0C               CALL   printStr   
49FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0A   E1                     POP   hl   
4A0B   E5                     PUSH   hl   
4A0C   E5                     PUSH   hl   
4A0D   CD 17 0E               CALL   run   
4A10   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A1F   CD 80 0C               CALL   flushBuffer   
4A22   76                     HALT      
4A23                EXPECTM_2973S177:      
4A23   E1                     POP   HL   
4A24                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4A24   31 00 53               LD   SP,STACK   
4A27   CD 40 0D               CALL   coldInit   
4A2A   CD 70 51               CALL   execStr   
4A2D   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4A35   CD 80 0C               CALL   flushBuffer   
4A38   E1                     POP   HL   
4A39   E5                     PUSH   HL   
4A3A   11 34 55               LD   DE,VARS + ("Z"-"A"+1)*2   
4A3D   B7                     OR   A   
4A3E   ED 52                  SBC   HL,DE   
4A40   7D                     LD   A,L   
4A41   B4                     OR   H   
4A42   CA A4 4A               JP   Z,expectM_2974S178   
4A45   CD F8 0C               CALL   printStr   
4A48   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4A56   CD F8 0C               CALL   printStr   
4A59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A68   21 34 55               LD   hl,VARS + ("Z"-"A"+1)*2   
4A6B   E5                     PUSH   hl   
4A6C   E5                     PUSH   hl   
4A6D   CD 17 0E               CALL   run   
4A70   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A78   CD 80 0C               CALL   flushBuffer   
4A7B   CD F8 0C               CALL   printStr   
4A7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A8B   E1                     POP   hl   
4A8C   E5                     PUSH   hl   
4A8D   E5                     PUSH   hl   
4A8E   CD 17 0E               CALL   run   
4A91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AA0   CD 80 0C               CALL   flushBuffer   
4AA3   76                     HALT      
4AA4                EXPECTM_2974S178:      
4AA4   E1                     POP   HL   
4AA5                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4AA5   31 00 53               LD   SP,STACK   
4AA8   CD 40 0D               CALL   coldInit   
4AAB   CD 70 51               CALL   execStr   
4AAE   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4AB6   CD 80 0C               CALL   flushBuffer   
4AB9   E1                     POP   HL   
4ABA   E5                     PUSH   HL   
4ABB   11 32 55               LD   DE,VARS + ("Z"-"A")*2   
4ABE   B7                     OR   A   
4ABF   ED 52                  SBC   HL,DE   
4AC1   7D                     LD   A,L   
4AC2   B4                     OR   H   
4AC3   CA 25 4B               JP   Z,expectM_2975S179   
4AC6   CD F8 0C               CALL   printStr   
4AC9   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4AD7   CD F8 0C               CALL   printStr   
4ADA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AE9   21 32 55               LD   hl,VARS + ("Z"-"A")*2   
4AEC   E5                     PUSH   hl   
4AED   E5                     PUSH   hl   
4AEE   CD 17 0E               CALL   run   
4AF1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AF9   CD 80 0C               CALL   flushBuffer   
4AFC   CD F8 0C               CALL   printStr   
4AFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B0C   E1                     POP   hl   
4B0D   E5                     PUSH   hl   
4B0E   E5                     PUSH   hl   
4B0F   CD 17 0E               CALL   run   
4B12   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B21   CD 80 0C               CALL   flushBuffer   
4B24   76                     HALT      
4B25                EXPECTM_2975S179:      
4B25   E1                     POP   HL   
4B26                          ;*Macro unroll:  test "'A' /ad", VARS
4B26   31 00 53               LD   SP,STACK   
4B29   CD 40 0D               CALL   coldInit   
4B2C   CD 70 51               CALL   execStr   
4B2F   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4B37   CD 80 0C               CALL   flushBuffer   
4B3A   E1                     POP   HL   
4B3B   E5                     PUSH   HL   
4B3C   11 00 55               LD   DE,VARS   
4B3F   B7                     OR   A   
4B40   ED 52                  SBC   HL,DE   
4B42   7D                     LD   A,L   
4B43   B4                     OR   H   
4B44   CA A6 4B               JP   Z,expectM_2976S180   
4B47   CD F8 0C               CALL   printStr   
4B4A   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4B58   CD F8 0C               CALL   printStr   
4B5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B6A   21 00 55               LD   hl,VARS   
4B6D   E5                     PUSH   hl   
4B6E   E5                     PUSH   hl   
4B6F   CD 17 0E               CALL   run   
4B72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B7A   CD 80 0C               CALL   flushBuffer   
4B7D   CD F8 0C               CALL   printStr   
4B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B8D   E1                     POP   hl   
4B8E   E5                     PUSH   hl   
4B8F   E5                     PUSH   hl   
4B90   CD 17 0E               CALL   run   
4B93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BA2   CD 80 0C               CALL   flushBuffer   
4BA5   76                     HALT      
4BA6                EXPECTM_2976S180:      
4BA6   E1                     POP   HL   
4BA7                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4BA7   31 00 53               LD   SP,STACK   
4BAA   CD 40 0D               CALL   coldInit   
4BAD   CD 70 51               CALL   execStr   
4BB0   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4BBD   CD 80 0C               CALL   flushBuffer   
4BC0   E1                     POP   HL   
4BC1   E5                     PUSH   HL   
4BC2   11 2D 00               LD   DE,$2D   
4BC5   B7                     OR   A   
4BC6   ED 52                  SBC   HL,DE   
4BC8   7D                     LD   A,L   
4BC9   B4                     OR   H   
4BCA   CA 31 4C               JP   Z,expectM_2977S181   
4BCD   CD F8 0C               CALL   printStr   
4BD0   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4BE3   CD F8 0C               CALL   printStr   
4BE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BF5   21 2D 00               LD   hl,$2D   
4BF8   E5                     PUSH   hl   
4BF9   E5                     PUSH   hl   
4BFA   CD 17 0E               CALL   run   
4BFD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C05   CD 80 0C               CALL   flushBuffer   
4C08   CD F8 0C               CALL   printStr   
4C0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C18   E1                     POP   hl   
4C19   E5                     PUSH   hl   
4C1A   E5                     PUSH   hl   
4C1B   CD 17 0E               CALL   run   
4C1E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C2D   CD 80 0C               CALL   flushBuffer   
4C30   76                     HALT      
4C31                EXPECTM_2977S181:      
4C31   E1                     POP   HL   
4C32                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
4C32   31 00 53               LD   SP,STACK   
4C35   CD 40 0D               CALL   coldInit   
4C38   CD 70 51               CALL   execStr   
4C3B   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4C4A   CD 80 0C               CALL   flushBuffer   
4C4D   E1                     POP   HL   
4C4E   E5                     PUSH   HL   
4C4F   11 41 00               LD   DE,65   
4C52   B7                     OR   A   
4C53   ED 52                  SBC   HL,DE   
4C55   7D                     LD   A,L   
4C56   B4                     OR   H   
4C57   CA C0 4C               JP   Z,expectM_2978S182   
4C5A   CD F8 0C               CALL   printStr   
4C5D   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
4C72   CD F8 0C               CALL   printStr   
4C75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C84   21 41 00               LD   hl,65   
4C87   E5                     PUSH   hl   
4C88   E5                     PUSH   hl   
4C89   CD 17 0E               CALL   run   
4C8C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C94   CD 80 0C               CALL   flushBuffer   
4C97   CD F8 0C               CALL   printStr   
4C9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CA7   E1                     POP   hl   
4CA8   E5                     PUSH   hl   
4CA9   E5                     PUSH   hl   
4CAA   CD 17 0E               CALL   run   
4CAD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CBC   CD 80 0C               CALL   flushBuffer   
4CBF   76                     HALT      
4CC0                EXPECTM_2978S182:      
4CC0   E1                     POP   HL   
4CC1                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4CC1   31 00 53               LD   SP,STACK   
4CC4   CD 40 0D               CALL   coldInit   
4CC7   CD 70 51               CALL   execStr   
4CCA   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4CD8   CD 80 0C               CALL   flushBuffer   
4CDB   E1                     POP   HL   
4CDC   E5                     PUSH   HL   
4CDD   11 32 00               LD   DE,$32   
4CE0   B7                     OR   A   
4CE1   ED 52                  SBC   HL,DE   
4CE3   7D                     LD   A,L   
4CE4   B4                     OR   H   
4CE5   CA 4D 4D               JP   Z,expectM_2979S183   
4CE8   CD F8 0C               CALL   printStr   
4CEB   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
4CFF   CD F8 0C               CALL   printStr   
4D02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D11   21 32 00               LD   hl,$32   
4D14   E5                     PUSH   hl   
4D15   E5                     PUSH   hl   
4D16   CD 17 0E               CALL   run   
4D19   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D21   CD 80 0C               CALL   flushBuffer   
4D24   CD F8 0C               CALL   printStr   
4D27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D34   E1                     POP   hl   
4D35   E5                     PUSH   hl   
4D36   E5                     PUSH   hl   
4D37   CD 17 0E               CALL   run   
4D3A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D49   CD 80 0C               CALL   flushBuffer   
4D4C   76                     HALT      
4D4D                EXPECTM_2979S183:      
4D4D   E1                     POP   HL   
4D4E                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4D4E   31 00 53               LD   SP,STACK   
4D51   CD 40 0D               CALL   coldInit   
4D54   CD 70 51               CALL   execStr   
4D57   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4D65   CD 80 0C               CALL   flushBuffer   
4D68   E1                     POP   HL   
4D69   E5                     PUSH   HL   
4D6A   11 01 00               LD   DE,1   
4D6D   B7                     OR   A   
4D6E   ED 52                  SBC   HL,DE   
4D70   7D                     LD   A,L   
4D71   B4                     OR   H   
4D72   CA DA 4D               JP   Z,expectM_2980S184   
4D75   CD F8 0C               CALL   printStr   
4D78   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4D8C   CD F8 0C               CALL   printStr   
4D8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D9E   21 01 00               LD   hl,1   
4DA1   E5                     PUSH   hl   
4DA2   E5                     PUSH   hl   
4DA3   CD 17 0E               CALL   run   
4DA6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DAE   CD 80 0C               CALL   flushBuffer   
4DB1   CD F8 0C               CALL   printStr   
4DB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DC1   E1                     POP   hl   
4DC2   E5                     PUSH   hl   
4DC3   E5                     PUSH   hl   
4DC4   CD 17 0E               CALL   run   
4DC7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DD6   CD 80 0C               CALL   flushBuffer   
4DD9   76                     HALT      
4DDA                EXPECTM_2980S184:      
4DDA   E1                     POP   HL   
4DDB                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4DDB   31 00 53               LD   SP,STACK   
4DDE   CD 40 0D               CALL   coldInit   
4DE1   CD 70 51               CALL   execStr   
4DE4   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4DFA   CD 80 0C               CALL   flushBuffer   
4DFD   E1                     POP   HL   
4DFE   E5                     PUSH   HL   
4DFF   11 03 00               LD   DE,3   
4E02   B7                     OR   A   
4E03   ED 52                  SBC   HL,DE   
4E05   7D                     LD   A,L   
4E06   B4                     OR   H   
4E07   CA 77 4E               JP   Z,expectM_2981S185   
4E0A   CD F8 0C               CALL   printStr   
4E0D   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4E29   CD F8 0C               CALL   printStr   
4E2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E3B   21 03 00               LD   hl,3   
4E3E   E5                     PUSH   hl   
4E3F   E5                     PUSH   hl   
4E40   CD 17 0E               CALL   run   
4E43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E4B   CD 80 0C               CALL   flushBuffer   
4E4E   CD F8 0C               CALL   printStr   
4E51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E5E   E1                     POP   hl   
4E5F   E5                     PUSH   hl   
4E60   E5                     PUSH   hl   
4E61   CD 17 0E               CALL   run   
4E64   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E73   CD 80 0C               CALL   flushBuffer   
4E76   76                     HALT      
4E77                EXPECTM_2981S185:      
4E77   E1                     POP   HL   
4E78                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4E78   31 00 53               LD   SP,STACK   
4E7B   CD 40 0D               CALL   coldInit   
4E7E   CD 70 51               CALL   execStr   
4E81   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4E9A   CD 80 0C               CALL   flushBuffer   
4E9D   E1                     POP   HL   
4E9E   E5                     PUSH   HL   
4E9F   11 02 00               LD   DE,2   
4EA2   B7                     OR   A   
4EA3   ED 52                  SBC   HL,DE   
4EA5   7D                     LD   A,L   
4EA6   B4                     OR   H   
4EA7   CA 1A 4F               JP   Z,expectM_2982S186   
4EAA   CD F8 0C               CALL   printStr   
4EAD   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4ECC   CD F8 0C               CALL   printStr   
4ECF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EDE   21 02 00               LD   hl,2   
4EE1   E5                     PUSH   hl   
4EE2   E5                     PUSH   hl   
4EE3   CD 17 0E               CALL   run   
4EE6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4EEE   CD 80 0C               CALL   flushBuffer   
4EF1   CD F8 0C               CALL   printStr   
4EF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F01   E1                     POP   hl   
4F02   E5                     PUSH   hl   
4F03   E5                     PUSH   hl   
4F04   CD 17 0E               CALL   run   
4F07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F16   CD 80 0C               CALL   flushBuffer   
4F19   76                     HALT      
4F1A                EXPECTM_2982S186:      
4F1A   E1                     POP   HL   
4F1B                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4F1B   31 00 53               LD   SP,STACK   
4F1E   CD 40 0D               CALL   coldInit   
4F21   CD 70 51               CALL   execStr   
4F24   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4F49   CD 80 0C               CALL   flushBuffer   
4F4C   E1                     POP   HL   
4F4D   E5                     PUSH   HL   
4F4E   11 01 00               LD   DE,1   
4F51   B7                     OR   A   
4F52   ED 52                  SBC   HL,DE   
4F54   7D                     LD   A,L   
4F55   B4                     OR   H   
4F56   CA D5 4F               JP   Z,expectM_2983S187   
4F59   CD F8 0C               CALL   printStr   
4F5C   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4F87   CD F8 0C               CALL   printStr   
4F8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F99   21 01 00               LD   hl,1   
4F9C   E5                     PUSH   hl   
4F9D   E5                     PUSH   hl   
4F9E   CD 17 0E               CALL   run   
4FA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4FA9   CD 80 0C               CALL   flushBuffer   
4FAC   CD F8 0C               CALL   printStr   
4FAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FBC   E1                     POP   hl   
4FBD   E5                     PUSH   hl   
4FBE   E5                     PUSH   hl   
4FBF   CD 17 0E               CALL   run   
4FC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4FD1   CD 80 0C               CALL   flushBuffer   
4FD4   76                     HALT      
4FD5                EXPECTM_2983S187:      
4FD5   E1                     POP   HL   
4FD6                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4FD6   31 00 53               LD   SP,STACK   
4FD9   CD 40 0D               CALL   coldInit   
4FDC   CD 70 51               CALL   execStr   
4FDF   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
5004   CD 80 0C               CALL   flushBuffer   
5007   E1                     POP   HL   
5008   E5                     PUSH   HL   
5009   11 01 00               LD   DE,1   
500C   B7                     OR   A   
500D   ED 52                  SBC   HL,DE   
500F   7D                     LD   A,L   
5010   B4                     OR   H   
5011   CA 90 50               JP   Z,expectM_2984S188   
5014   CD F8 0C               CALL   printStr   
5017   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
5042   CD F8 0C               CALL   printStr   
5045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5054   21 01 00               LD   hl,1   
5057   E5                     PUSH   hl   
5058   E5                     PUSH   hl   
5059   CD 17 0E               CALL   run   
505C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
5064   CD 80 0C               CALL   flushBuffer   
5067   CD F8 0C               CALL   printStr   
506A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5077   E1                     POP   hl   
5078   E5                     PUSH   hl   
5079   E5                     PUSH   hl   
507A   CD 17 0E               CALL   run   
507D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
508C   CD 80 0C               CALL   flushBuffer   
508F   76                     HALT      
5090                EXPECTM_2984S188:      
5090   E1                     POP   HL   
5091                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
5091   31 00 53               LD   SP,STACK   
5094   CD 40 0D               CALL   coldInit   
5097   CD 70 51               CALL   execStr   
509A   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
50CC   CD 80 0C               CALL   flushBuffer   
50CF   E1                     POP   HL   
50D0   E5                     PUSH   HL   
50D1   11 02 00               LD   DE,2   
50D4   B7                     OR   A   
50D5   ED 52                  SBC   HL,DE   
50D7   7D                     LD   A,L   
50D8   B4                     OR   H   
50D9   CA 65 51               JP   Z,expectM_2985S189   
50DC   CD F8 0C               CALL   printStr   
50DF   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
5117   CD F8 0C               CALL   printStr   
511A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5129   21 02 00               LD   hl,2   
512C   E5                     PUSH   hl   
512D   E5                     PUSH   hl   
512E   CD 17 0E               CALL   run   
5131   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
5139   CD 80 0C               CALL   flushBuffer   
513C   CD F8 0C               CALL   printStr   
513F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
514C   E1                     POP   hl   
514D   E5                     PUSH   hl   
514E   E5                     PUSH   hl   
514F   CD 17 0E               CALL   run   
5152   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5161   CD 80 0C               CALL   flushBuffer   
5164   76                     HALT      
5165                EXPECTM_2985S189:      
5165   E1                     POP   HL   
5166                             ; 
5166   CD F8 0C               CALL   printStr   
5169   44 6F 6E 65 21 00      .CSTR   "Done!"   
516F   76                     HALT      
5170                             ; executes a null teminated string (null executes exit_)
5170                             ; the string should be immedaitely following the call
5170                EXECSTR:      ; create a root stack frame
5170   C1                     POP   bc   ; bc = code*
5171   0B                     DEC   bc   ; dec to prepare for next routine
5172   11 00 00               LD   de,0   
5175   D5                     PUSH   de   ; push fake IP
5176   D5                     PUSH   de   ; push null arg_list*
5177   D5                     PUSH   de   ; push null first_arg*
5178   D5                     PUSH   de   ; push fake BP
5179   DD E9                  JP   (ix)   
517B                STKSIZE:   EQU   $100   ; Stack size
517B                TIBSIZE:   EQU   $100   ; 256 bytes
517B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
517B                          ALIGN   $100   
5200                          DS   STKSIZE   
5300                STACK:       
5300                          ALIGN   $100   
5300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5400                          ALIGN   $100   
5400                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5500                          ALIGN   $100   
5500                VARS:        
5500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
55D0                RESTARTS:      
55D0                RST08:    DS   2   
55D2                RST10:    DS   2   
55D4                RST18:    DS   2   
55D6                RST20:    DS   2   
55D8                RST28:    DS   2   
55DA                RST30:    DS   2   ; 
55DC                BAUD:     DS   2   ; 
55DE                INTVEC:   DS   2   ; 
55E0                NMIVEC:   DS   2   ; 
55E2                GETCVEC:   DS   2   ; 
55E4                PUTCVEC:   DS   2   ; 
55E6                SYSVARS:      
55E6                             ; initialised sys variables (preserved)
55E6                VDATAWIDTH:   DS   2   ; 
55E8                VNUMBASE:   DS   2   ; 
55EA                VTIBPTR:   DS   2   ; 
55EC                VBUFPTR:   DS   2   ; 
55EE                VNEXT:    DS   2   ; 
55F0                VHEAPPTR:   DS   2   ; 
55F2                VRECUR:   DS   2   ; 
55F4                             ; uninitialised sys variables (preserved)
55F4                VPOINTER:   DS   2   ; 
55F6                VREMAIN:   DS   2   ; 
55F8                VSAVEDIP:   DS   2   ; 
55FA                VSAVEDSP:   DS   2   ; 
55FC                VSAVEDNEXT:   DS   2   ; 
55FE                VSAVEDBP:   DS   2   ; 
5600                             ; uninitialised sys variables (unpreserved)
5600                VTEMP1:   DS   2   ; 
5602                VTEMP2:   DS   2   ; 
5604                VLASTDEF:   DS   2   ; 
5606                TBPTR:    DS   2   ; reserved for tests
5608                TITLEBUF:   DS   20   
561C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C7E DEFINED AT LINE 1908 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C7 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
XOR:                03D0 DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
XOR1:               03D1 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
INVERT:             03DB DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
PERCENT:            03E0 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03E0 DEFINED AT LINE 367 IN MAIN.asm
ARG0:               03FC DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ARG0A:              0405 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARG1:               040A DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
ARG1A:              0412 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
LBRACK:             0415 DEFINED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         0415 DEFINED AT LINE 409 IN MAIN.asm
RBRACK:             0431 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           0431 DEFINED AT LINE 424 IN MAIN.asm
ARRAYEND1:          044D DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
ARRAYEND2:          045D DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
ARRAYEND3:          0462 DEFINED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
HASH:               0481 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         0481 DEFINED AT LINE 479 IN MAIN.asm
ARRAYINDEX0:        0489 DEFINED AT LINE 485 IN MAIN.asm
ARRAYINDEX1:        048A DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
ARRAYINDEX2:        0496 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              0499 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0499 DEFINED AT LINE 505 IN MAIN.asm
ARGLIST1:           04A3 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
ARGLIST1A:          04AB DEFINED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
ARGLIST2:           04B3 DEFINED AT LINE 523 IN MAIN.asm
ARGLIST3:           04BB DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST4:           04BE DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST5:           04C4 DEFINED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
ASSIGN:             04CF DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D1 DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
ASSIGNX:            04D2 DEFINED AT LINE 556 IN MAIN.asm
ASSIGN1:            04DE DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ABSOLUTE:           04E0 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ADDROF:             04ED DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ADDROF1:            0501 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
ADDROF2:            050C DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
LBRACE:             050E DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         050E DEFINED AT LINE 610 IN MAIN.asm
BLOCKSTART1:        0512 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
BLOCKSTART2:        053E DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART3:        0541 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART4:        0549 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKSTART5:        054C DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
BLOCKSTART6:        0574 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
RBRACE:             0577 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0577 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
BLOCKEND1:          05A9 DEFINED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
BLOCKEND2:          05B5 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
BLOCKEND3:          05C7 DEFINED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BLOCKEND4:          05DB DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
BREAK:              05E4 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
BREAK1:             05EB DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
TICK:               05FE DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05FE DEFINED AT LINE 755 IN MAIN.asm
CHAR1:              0601 DEFINED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
CHAR2:              060D DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
CHAR3:              0610 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
SLASH:              0613 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            0613 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A:          0652 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
COMMAND_B:          065E DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
COMMAND_F:          066A DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_I:          0682 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_L:          068E DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMAND_M:          0697 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
COMMAND_P:          06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
COMMAND_R:          06AF DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
COMMAND_V:          06BB DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CHARS:              06D0 DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
CHARS1:             06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
NUMBERS:            06D8 DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMENT:            06DE DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
SEMICOLON:          06E7 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06E7 DEFINED AT LINE 930 IN MAIN.asm
CREATEFUNC0:        0702 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
CREATEFUNC1:        071A DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
CREATEFUNC2:        072D DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
CREATEFUNC2A:       074C DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
CREATEFUNC3:        075B DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
CREATEFUNC4:        0766 DEFINED AT LINE 1023 IN MAIN.asm
CREATEFUNC5:        0767 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
COMMA:              0783 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0783 DEFINED AT LINE 1049 IN MAIN.asm
DISCARD1:           0790 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
DIV:                0792 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DECIMAL:            07A3 DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DECIMAL1:           07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
HEXADECIMAL:        07AB DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DOT:                07B1 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C3 DEFINED AT LINE 32
                    > USED AT LINE 1084 IN MAIN.asm
BUFFERARRAYM_1609S1094: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
BUFFERDEC:          0813 DEFINED AT LINE 1106 IN MAIN.asm
BUFFERDEC0:         082D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
BUFFERDEC1:         083D DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
BUFFERDEC2:         085D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
BUFFERDEC3:         085F DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC4:         086F DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BUFFERDEC5:         0870 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BUFFERHEX:          0879 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
BUFFERHEX1:         089A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BUFFERHEX2:         08A3 DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
BUFFERSTRING:       08B1 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERSTRING0:      08B8 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
BUFFERSTRING1:      08BE DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
BUFFERCHAR:         08CB DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERXCHARS:       08D0 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERXCHARS0:      08D1 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
BUFFERXCHARS1:      08DA DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
BUFFERXCHARS2:      08E2 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
DIVIDE:             08EC DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
DIVIDE1:            08F1 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
DIVIDE2:            08FE DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
DIVIDE3:            08FF DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
EQUALS:             0905 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          090D DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0916 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091B DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0920 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
TRUE1:              0923 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
NULL1:              0929 DEFINED AT LINE 1321 IN MAIN.asm
FALSE1:             0929 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
ERROR1:             092F DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
FOREACH:            0936 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FOREACHM_1831S1334: 0942 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09A4 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
FUNCSRCM_1858S1363: 09B0 DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              09DF DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09DF DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09E0 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
GO2:                09E6 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
GOBLOCK:            09F1 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
GOBLOCK2:           0A16 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
GOBLOCK3:           0A20 DEFINED AT LINE 1416 IN MAIN.asm
GOFUNC:             0A24 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
GOFUNC1:            0A3D DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
GOFUNC2:            0A43 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
GOFUNC3:            0A4E DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
GOFUNC4:            0A66 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GOFUNC5:            0A69 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
GOFUNC6:            0A6C DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
GOFUNC7:            0A6F DEFINED AT LINE 1479 IN MAIN.asm
GOFUNC8:            0A73 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
DOLLAR:             0A7E DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A7E DEFINED AT LINE 1494 IN MAIN.asm
HEXNUM1:            0A81 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
HEXNUM2:            0A89 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
UPCASE:             0A9B DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0AA0 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0AA5 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
QUESTION:           0AB2 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AB2 DEFINED AT LINE 1537 IN MAIN.asm
IFTE:               0ABE DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
IFTE1:              0ABF DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
INPUT:              0ACB DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
KEY:                0AD6 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
LITERAL:            0ADF DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
OUTPUT:             0AE8 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
MAP:                0AF1 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
MAPM_2090S1606:     0AFD DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B38 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B38 DEFINED AT LINE 1621 IN MAIN.asm
MUL2:               0B3A DEFINED AT LINE 1624 IN MAIN.asm
MUL3:               0B42 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
NUM:                0B54 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B5D DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
NUM1:               0B5E DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
NUM2:               0B76 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
NUM3:               0B81 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
PIPESTREAM:         0B84 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
RPAREN:             0B8E DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0B96 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0B9E DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
SHIFTLEFT2:         0B9F DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
SHIFTRIGHT:         0BA6 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0BAE DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
SHIFTRIGHT2:        0BB2 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DQUOTE:             0BB9 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0BB9 DEFINED AT LINE 1735 IN MAIN.asm
STRING1:            0BC2 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
STRING2:            0BC5 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
STRING3:            0BCE DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
MINUS:              0BE1 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0BED DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
SUB1:               0BF7 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
PRINTBUFFER:        0C00 DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
PRINTBUFFERM_2270S1796: 0C0C DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C26 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
PRINTCHARS1:        0C2D DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
PRINTCHARS2:        0C33 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PRINTSTACK:         0C38 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
RECUR:              0C3A DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
REMAIN:             0C40 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
SIZE:               0C46 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CONSTBUFSTART:      0C4E DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
CONSTHEAPSTART:     0C53 DEFINED AT LINE 1873 IN MAIN.asm
CONSTTIBSTART:      0C58 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VARBUFPTR:          0C5D DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
VARHEAPPTR:         0C66 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARTIBPTR:          0C6F DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARIABLE:           0C78 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CONSTANT:           0C7B DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
FILTER:             0C7E DEFINED AT LINE 1907 IN MAIN.asm
FLUSHBUFFER:        0C80 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0C97 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
JUMPTABLE0:         0C99 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
JUMPTABLE1:         0CA6 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
JUMPTABLE2:         0CA7 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PRTSTR0:            0CAD DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PRTSTR:             0CB1 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
NESTING:            0CB6 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING0:           0CC0 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
NESTING1A:          0CC7 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
NESTING1:           0CCA DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
NESTING2:           0CD9 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
NESTING3:           0CDB DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
NESTING4:           0CE6 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PROMPT:             0CE8 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CRLF:               0CF1 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PRINTSTR:           0CF8 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 65
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 193
TITLESTR:           0CFF DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
INIT:               0D13 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
INIT1:              0D1B DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
WARMINIT:           0D23 DEFINED AT LINE 2049 IN MAIN.asm
COLDBOOT0:          0D36 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
COLDINIT:           0D40 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D51 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
COLDSTART:          0D5E DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
START:              0D67 DEFINED AT LINE 2084 IN MAIN.asm
START1:             0D6D DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
INTERPRET:          0D73 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
INTERPRET2:         0D82 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
INTERPRET3:         0D8A DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
INTERPRET4:         0D95 DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
INTERPRET5:         0D9A DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
INTERPRET5A:        0DBD DEFINED AT LINE 2161 IN MAIN.asm
INTERPRET6:         0DBF DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
INTERPRET7:         0DCD DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
INTERPRET8:         0DE0 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
NEXT:               0DFB DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
NEXT1:              0E0C DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
EXIT:               0E13 DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
RUN:                0E17 DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E1B DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
BACKSPACE_:         0E2E DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
EDIT_:              0E3E DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
REEDIT_:            0E56 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
PRINTSTACK_:        0E59 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
F1:                 0E63 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
F1M_2816S12:        0E72 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0EE5 DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
F2M_2833S30:        0EF2 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0F2B DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
F3M_2845S43:        0F39 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0F78 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
F4M_2857S56:        0F85 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 60
                    > USED AT LINE 8
EXPECTM_2862S63:    10CA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S71:    114B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S72:    11C2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S73:    1237 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S74:    12AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S75:    1321 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S76:    1396 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S77:    140D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S78:    1486 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S79:    14FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S80:    1574 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S81:    15ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S82:    1668 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S83:    16E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S84:    175A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S85:    17D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S86:    1858 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S87:    18D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S88:    1956 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S89:    19DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S90:    1A5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S91:    1ADB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S92:    1B60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S93:    1BE1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S94:    1C5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S95:    1CDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S96:    1D60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S97:    1DDD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S98:    1E5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S99:    1ED9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S100:   1F68 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S101:   1FE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S102:   206A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S103:   20E7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S104:   2172 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S105:   21FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S106:   2288 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S107:   2313 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S108:   2398 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S109:   2415 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S110:   2494 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S111:   2513 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S112:   2590 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S113:   260D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S114:   268A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S115:   2707 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S116:   2784 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S117:   2801 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S118:   287E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S119:   28FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S120:   297A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S121:   29F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S122:   2A78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S123:   2AF9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S124:   2B7A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S125:   2BF5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S126:   2C70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S127:   2CF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S128:   2D78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S129:   2DFF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S130:   2E8A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S131:   2F1F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S132:   2FB4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S133:   302F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S134:   30AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S135:   312B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S136:   31AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S137:   322B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S138:   32AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S139:   332B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S140:   33B2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S141:   343D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S142:   34C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S143:   3555 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S144:   35E8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S145:   3681 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S146:   371E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S147:   37AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S148:   3842 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S149:   38D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S150:   3972 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S151:   3A09 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S152:   3AAE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S153:   3B41 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S154:   3BE2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S155:   3C85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S156:   3D2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S157:   3DD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S158:   3E88 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S159:   3F15 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S160:   3FA8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S161:   4035 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S162:   40CE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S163:   4167 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S164:   4212 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S165:   42C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S166:   4378 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S167:   4419 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S168:   44C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S169:   457D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S170:   4648 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S171:   46E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S172:   477E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S173:   4807 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S174:   4890 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S175:   4919 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S176:   49A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S177:   4A23 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S178:   4AA4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S179:   4B25 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S180:   4BA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S181:   4C31 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S182:   4CC0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S183:   4D4D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S184:   4DDA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2981S185:   4E77 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2982S186:   4F1A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2983S187:   4FD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2984S188:   5090 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2985S189:   5165 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5170 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5300 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5300 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
BUF:                5400 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
VARS:               5500 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           55D0 DEFINED AT LINE 18 IN ram.asm
RST08:              55D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              55D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              55D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              55D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              55D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              55DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               55DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             55DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             55E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            55E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            55E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            55E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2064 IN MAIN.asm
VDATAWIDTH:         55E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
VNUMBASE:           55E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
VTIBPTR:            55EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
VBUFPTR:            55EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
VNEXT:              55EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2076 IN MAIN.asm
VHEAPPTR:           55F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
VRECUR:             55F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
VPOINTER:           55F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
VREMAIN:            55F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
VSAVEDIP:           55F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VSAVEDSP:           55FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
VSAVEDNEXT:         55FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
VSAVEDBP:           55FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
VTEMP1:             5600 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
VTEMP2:             5602 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
VLASTDEF:           5604 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5606 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5608 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
HEAP:               561C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
