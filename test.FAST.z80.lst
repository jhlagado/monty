0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   C2                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   DE                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   F6                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   1F                     DB   lsb(lbrack_)   ; [     2
01BB   3B                     DB   lsb(backslash_)   ; \     2
01BC   5C                     DB   lsb(rbrack_)   ; ]     2
01BD   AC                     DB   lsb(caret_)   ; ^     1
01BE   EE                     DB   lsb(underscore_)   ; _     2
01BF   C2                     DB   lsb(grave_)   ; `     2   	
01C0   0D                     DB   lsb(lowcase_)   ; a     1
01C1   0D                     DB   lsb(lowcase_)   ; b
01C2   0D                     DB   lsb(lowcase_)   ; c
01C3   0D                     DB   lsb(lowcase_)   ; d
01C4   0D                     DB   lsb(lowcase_)   ; e
01C5   0D                     DB   lsb(lowcase_)   ; f
01C6   0D                     DB   lsb(lowcase_)   ; g
01C7   0D                     DB   lsb(lowcase_)   ; h
01C8   0D                     DB   lsb(lowcase_)   ; i
01C9   0D                     DB   lsb(lowcase_)   ; j
01CA   0D                     DB   lsb(lowcase_)   ; k
01CB   0D                     DB   lsb(lowcase_)   ; l
01CC   0D                     DB   lsb(lowcase_)   ; m
01CD   0D                     DB   lsb(lowcase_)   ; n
01CE   0D                     DB   lsb(lowcase_)   ; o
01CF   0D                     DB   lsb(lowcase_)   ; p
01D0   0D                     DB   lsb(lowcase_)   ; q
01D1   0D                     DB   lsb(lowcase_)   ; r
01D2   0D                     DB   lsb(lowcase_)   ; s
01D3   0D                     DB   lsb(lowcase_)   ; t
01D4   0D                     DB   lsb(lowcase_)   ; u
01D5   0D                     DB   lsb(lowcase_)   ; v
01D6   0D                     DB   lsb(lowcase_)   ; w
01D7   0D                     DB   lsb(lowcase_)   ; x
01D8   0D                     DB   lsb(lowcase_)   ; y
01D9   0D                     DB   lsb(lowcase_)   ; z
01DA   D8                     DB   lsb(lbrace_)   ; {     1
01DB   DD                     DB   lsb(pipe_)   ; |     1
01DC   E8                     DB   lsb(rbrace_)   ; }     1
01DD   EB                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4C                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   83 0F                  DW   next   ; nNext
01E8   22 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 98 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 E8 0A               JP   percent   
020C                QUOTE_:      
020C   C3 CE 0A               JP   quote   
020F                LPAREN_:      
020F   C3 D8 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 1D 0B               JP   num   
021B                SEMICOLON_:      
021B   C3 F9 02               JP   semicolon   
021E                QUESTION_:      
021E   C3 B5 0A               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 5F 0C               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 47 0C               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 58 0C               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 8F 0C               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 7F 0C               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 66 0C               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 6B 0C               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 4D               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 49                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 1D 0B               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 49 0C               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 2B                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6                MUL:         
02A6   D1                     POP   de   ; get first value
02A7   E1                     POP   hl   
02A8                MUL2:        
02A8   C5                     PUSH   bc   ; Preserve the IP
02A9   44 4D                  LD   bc,hl   ; bc = 2nd value
02AB   21 00 00               LD   hl,0   
02AE   3E 10                  LD   a,16   
02B0                MUL3:        
02B0   29                     ADD   hl,hl   
02B1   CB 13                  RL   e   
02B3   CB 12                  RL   d   
02B5   30 04                  JR   nc,$+6   
02B7   09                     ADD   hl,bc   
02B8   30 01                  JR   nc,$+3   
02BA   13                     INC   de   
02BB   3D                     DEC   a   
02BC   20 F2                  JR   nz,mul3   
02BE   C1                     POP   bc   ; Restore the IP
02BF   C3 D1 02               JP   add3   
02C2                             ; + add                         25
02C2                             ; a b -- c
02C2                PLUS_:       
02C2                PLUS:        
02C2                ADD:         
02C2   03                     INC   bc   
02C3   0A                     LD   a,(bc)   
02C4   FE 2B                  CP   "+"   ; ++ increment variable
02C6   20 05                  JR   nz,add1   
02C8   E1                     POP   hl   
02C9   23                     INC   hl   
02CA   C3 49 0C               JP   assign0   
02CD                ADD1:        
02CD   0B                     DEC   bc   
02CE   D1                     POP   de   ; second term
02CF   E1                     POP   hl   ; first term
02D0   19                     ADD   hl,de   
02D1                ADD3:        
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 3D                  CP   "="   
02D5   28 04                  JR   z,add4   
02D7   0B                     DEC   bc   
02D8   E5                     PUSH   hl   
02D9   DD E9                  JP   (ix)   
02DB                ADD4:        
02DB   C3 49 0C               JP   assign0   
02DE                COLON_:      
02DE                COLON:       
02DE   03                     INC   bc   ; arg_list must ve immediately followed by {
02DF   0A                     LD   a,(bc)   
02E0   FE 3D                  CP   "="   ; := definition
02E2   28 07                  JR   z,defineStart   
02E4   0B                     DEC   bc   
02E5   21 01 00               LD   hl,1   
02E8   C3 A7 0F               JP   error   
02EB                DEFINESTART:      
02EB   E1                     POP   hl   ; discard variable value
02EC   2A F8 4D               LD   hl,(vPointer)   ; vDefine = vPointer
02EF   22 F4 4D               LD   (vDefine),hl   
02F2   DD E9                  JP   (ix)   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 19                  JR   ident1   
02F9                             ; ;
02F9                SEMICOLON:      
02F9                DEFINEEND:      
02F9   2A F4 4D               LD   hl,(vDefine)   ; hl = define*
02FC   7D                     LD   a,l   
02FD   B4                     OR   h   
02FE   28 0B                  JR   z,defineEnd1   
0300   11 00 00               LD   de,NUL   ; set vDefine=NUL
0303   ED 53 F4 4D            LD   (vDefine),de   
0307   D1                     POP   de   ; de = value
0308   C3 4D 0C               JP   assign1   
030B                DEFINEEND1:      
030B   DD E9                  JP   (ix)   
030D                             ;********************** PAGE 2 END *********************************************
030D                             ; .align $100
030D                             ;********************** PAGE 3 BEGIN *********************************************
030D                LOWCASE_:      
030D                LOWCASE:      
030D   0A                     LD   a,(bc)   
030E   D6 61                  SUB   "a"   
0310   C6 1A                  ADD   a,26   
0312                IDENT1:      
0312   87                     ADD   a,a   ; l = a * 2
0313   6F                     LD   l,a   
0314   26 4D                  LD   h,msb(vars)   
0316   22 F8 4D               LD   (vPointer),hl   ; store address in setter
0319   5E                     LD   e,(hl)   
031A   23                     INC   hl   
031B   56                     LD   d,(hl)   
031C   D5                     PUSH   de   
031D   DD E9                  JP   (ix)   
031F                             ; [                             14
031F                LBRACK_:      
031F                LBRACK:      
031F                ARRAYSTART:      
031F   11 00 00               LD   de,0   ; create stack frame
0322   D5                     PUSH   de   ; push null for IP
0323   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0326   FD 56 05               LD   d,(iy+5)   ; 
0329   D5                     PUSH   de   ; 
032A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
032D   FD 56 03               LD   d,(iy+3)   ; 
0330   D5                     PUSH   de   ; 
0331   FD E5                  PUSH   iy   ; push BP
0333   FD 21 00 00            LD   iy,0   ; BP = SP
0337   FD 39                  ADD   iy,sp   
0339   DD E9                  JP   (ix)   
033B                             ; \                             19
033B                BACKSLASH_:      
033B                BACKSLASH:      
033B                LAMBDA:      
033B   DD E5                  PUSH   ix   
033D   CD E1 0C               CALL   parseArgs   
0340                LAMBDA1:      
0340   03                     INC   bc   ; arg_list must ve immediately followed by {
0341   0A                     LD   a,(bc)   
0342   FE 21                  CP   " "+1   ; skip white space
0344   38 FA                  JR   c,lambda1   
0346   FE 7B                  CP   "{"   
0348   28 06                  JR   z,lambda2   
034A   21 02 00               LD   hl,2   ; error 2: parse error
034D   C3 A7 0F               JP   error   
0350                LAMBDA2:      
0350   CD 17 0D               CALL   parseBlock   
0353   CD 81 0D               CALL   createFunc   
0356   E1                     POP   hl   
0357   DD E1                  POP   ix   
0359   E5                     PUSH   hl   
035A   DD E9                  JP   (ix)   
035C                RBRACK_:      
035C                RBRACK:      
035C                ARRAYEND:      ; 53
035C   FD 54                  LD   d,iyh   ; de = BP
035E   FD 5D                  LD   e,iyl   
0360   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0364   62 6B                  LD   hl,de   ; hl = de = BP
0366   B7                     OR   a   
0367   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0369   CB 3C                  SRL   h   ; 
036B   CB 1D                  RR   l   
036D   44 4D                  LD   bc,hl   ; bc = count
036F   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
0372   71                     LD   (hl),c   ; write num items in length word
0373   23                     INC   hl   
0374   70                     LD   (hl),b   
0375   23                     INC   hl   ; hl = array[0], bc = count
0376                             ; de = BP, hl = array[0], bc = count
0376   18 15                  JR   arrayEnd3   
0378                ARRAYEND1:      
0378   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
037B   77                     LD   (hl),a   ; write lsb of array item
037C   23                     INC   hl   ; move to msb of array item
037D   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0380   3D                     DEC   a   
0381   28 05                  JR   z,arrayEnd2   
0383   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0386   77                     LD   (hl),a   ; write msb of array item
0387   23                     INC   hl   ; move to next word in array
0388                ARRAYEND2:      
0388   FD 2B                  DEC   iy   ; move to next word on stack
038A   FD 2B                  DEC   iy   
038C   0B                     DEC   bc   ; dec items count
038D                ARRAYEND3:      
038D   79                     LD   a,c   ; if not zero loop
038E   B0                     OR   b   
038F   20 E7                  JR   nz,arrayEnd1   
0391   EB                     EX   de,hl   ; de = end of array, hl = BP
0392   F9                     LD   sp,hl   ; sp = BP
0393   E1                     POP   hl   ; de = end of array, hl = old BP
0394   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0395   FD 62                  LD   iyh,d   
0397   FD 6B                  LD   iyl,e   
0399   D1                     POP   de   ; pop arg_list (discard)
039A   D1                     POP   de   ; pop first_arg* (discard)
039B   D1                     POP   de   ; pop IP (discard)
039C   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
03A0   13                     INC   de   
03A1   13                     INC   de   
03A2   D5                     PUSH   de   ; return array[0]
03A3   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
03A6   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
03AA   DD E9                  JP   (ix)   
03AC                CARET_:      
03AC                             ; execute a block of code which ends with } 116
03AC                             ; creates a root scope if BP == stack
03AC                             ; else uses outer scope
03AC                CARET:       
03AC                GO:          
03AC   D1                     POP   de   ; de = block*
03AD                GO1:         
03AD   7B                     LD   a,e   ; if block* == null, exit
03AE   B2                     OR   d   
03AF   20 02                  JR   nz,go2   
03B1   DD E9                  JP   (ix)   
03B3                GO2:         
03B3   1A                     LD   a,(de)   
03B4   FE 7B                  CP   "{"   
03B6   CA BA 0B               JP   z,goBlock   
03B9   FE 28                  CP   "("   
03BB   C2 ED 0B               JP   nz,goFunc   
03BE   D5                     PUSH   de   ; push de just before stack frame
03BF   CA BA 0B               JP   z,goBlock   
03C2                GRAVE_:      
03C2                GRAVE:       
03C2                PRINTLITERAL:      
03C2   03                     INC   bc   ; move to first char
03C3   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
03C7   18 03                  JR   printLiteral1   
03C9                PRINTLITERAL0:      
03C9   12                     LD   (de),a   ; a -> buffer*
03CA   13                     INC   de   ; string*++,
03CB   03                     INC   bc   
03CC                PRINTLITERAL1:      
03CC   0A                     LD   a,(bc)   ; a <- string*
03CD   FE 60                  CP   "`"   ; if ` exit loop
03CF   20 F8                  JR   nz,printLiteral0   
03D1   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
03D5   C3 BB 0C               JP   dotNext   
03D8                LBRACE_:      
03D8                LBRACE:      
03D8   CD 17 0D               CALL   parseBlock   
03DB   DD E9                  JP   (ix)   
03DD                             ; | or                          11
03DD                             ; a b -- c
03DD                PIPE_:       
03DD                PIPE:        
03DD                OR:          
03DD   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03DE   E1                     POP   hl   
03DF   7B                     LD   a,e   
03E0   B5                     OR   l   
03E1   6F                     LD   l,a   
03E2   7A                     LD   a,d   
03E3   B4                     OR   h   
03E4   67                     LD   h,a   
03E5   C3 D1 02               JP   add3   
03E8                RBRACE_:      
03E8   C3 4D 0B               JP   rbrace   
03EB                             ; ~ char                        8
03EB                TILDE_:      
03EB   C3 8E 0A               JP   tilde   
03EE                UNDERSCORE_:      
03EE                CHAR:        
03EE   03                     INC   bc   ; point to next char
03EF   0A                     LD   a,(bc)   
03F0   6F                     LD   l,a   
03F1   26 00                  LD   h,0   
03F3   E5                     PUSH   hl   
03F4   DD E9                  JP   (ix)   
03F6                AT_:         
03F6                AT:          
03F6                ADDR:        
03F6   ED 5B F8 4D            LD   de,(vPointer)   
03FA   21 F8 4D               LD   hl,vPointer   
03FD   C3 1B 07               JP   variable   
0400                             ;********************** PAGE 3 END *********************************************
0400                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 39 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   46 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
041E   C3 BB 0C               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 BB 0C               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 4D               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 4D               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 BB 0C               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 4D            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 4D            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 4D               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 4D            LD   (vBufPtr),de   
04CC   C3 BB 0C               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4C 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 23 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C5                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C5                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C5                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C5                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C5                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C5                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   C5                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   BC                     DB   lsb(command_w_)   
0522   C2                     DB   lsb(xor_)   
0523   C5                     DB   lsb(command_nop_)   
0524   C5                     DB   lsb(command_nop_)   
0525   C8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   DE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EC 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   C6 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   0D 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   16 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6F 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   EE 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   44 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2A 06                  DW   break   
0541   00                     DB   NUL   
0542   6F 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   67 06                  DW   decBase   
0547   00                     DB   NUL   
0548   67 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   6F 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0D 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   11 09                  DW   filter   
0556   31                     DB   "1"   
0557   CF 0F                  DW   f1   
0559   32                     DB   "2"   
055A   DB 0F                  DW   f2   
055C   33                     DB   "3"   
055D   E7 0F                  DW   f3   
055F   34                     DB   "4"   
0560   F3 0F                  DW   f4   
0562   00                     DB   NUL   
0563   79 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   75 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   6F 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7B 06                  DW   input   
056E   00                     DB   NUL   
056F   6F 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   86 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   CF 08                  DW   map   
0577   00                     DB   NUL   
0578   6F 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   8F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6F 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   98 06                  DW   quit   
0583   00                     DB   NUL   
0584   6F 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A2 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   A8 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   32 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6F 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   AE 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   B6 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   47 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   E5 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   F4 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   6F 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   73 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   00 07                  DW   varBufPtr   
05AA   68                     DB   "h"   
05AB   09 07                  DW   varHeapPtr   
05AD   74                     DB   "t"   
05AE   12 07                  DW   varTIBPtr   
05B0   42                     DB   "B"   
05B1   61 06                  DW   constBufStart   
05B3   48                     DB   "H"   
05B4   55 06                  DW   constHeapStart   
05B6   54                     DB   "T"   
05B7   5B 06                  DW   constTIBStart   
05B9   00                     DB   NUL   
05BA   6F 06                  DW   error1   
05BC                COMMAND_W_:      
05BC   6D                     DB   "m"   ; /wm word mode
05BD   21 07                  DW   wordMode   
05BF   00                     DB   NUL   
05C0   6F 06                  DW   error1   
05C2                XOR_:        
05C2   00                     DB   NUL   
05C3   27 07                  DW   xor   
05C5                             ; 2
05C5                COMMAND_NOP_:      
05C5   00                     DB   NUL   
05C6   CB 05                  DW   nop   
05C8                             ; 3
05C8                COMMAND_DEFAULT_:      
05C8   00                     DB   NUL   
05C9   CD 05                  DW   div   
05CB                             ;********************** PAGE 5 END *********************************************
05CB                NOP:         
05CB   DD E9                  JP   (ix)   
05CD                             ;                               32
05CD                DIV:         
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD A2 0C               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 FA 4D            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 D1 02               JP   add3   
05DE                             ; /ab absolute
05DE                             ; num -- num
05DE                ABSOLUTE:      
05DE   E1                     POP   hl   
05DF   CB 7C                  BIT   7,h   
05E1   28 06                  JR   z,absolute1   
05E3   AF                     XOR   a   
05E4   95                     SUB   l   
05E5   6F                     LD   l,a   
05E6   9F                     SBC   a,a   
05E7   94                     SUB   h   
05E8   67                     LD   h,a   
05E9                ABSOLUTE1:      
05E9   E5                     PUSH   hl   
05EA   DD E9                  JP   (ix)   
05EC                             ; /ad addrOf                    24
05EC                             ; char -- addr
05EC                ADDROF:      
05EC   E1                     POP   hl   ; a = char
05ED   7D                     LD   a,l   
05EE   FE 7B                  CP   "z"+1   ; if a > z then exit
05F0   30 19                  JR   nc,addrOf2   
05F2   D6 41                  SUB   "A"   ; a - 65
05F4   38 15                  JR   c,addrOf2   ; if < A then exit
05F6   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F8   38 06                  JR   c,addrOf1   
05FA   D6 06                  SUB   "a"-("Z"+1)   
05FC   FE 1A                  CP   "Z"-"A"+1   
05FE   38 0B                  JR   c,addrOf2   ; if < a then exit
0600                ADDROF1:      
0600   87                     ADD   a,a   ; double a
0601   21 00 4D               LD   hl,VARS   ; hl = VARS + a
0604   85                     ADD   a,l   
0605   6F                     LD   l,a   
0606   3E 00                  LD   a,0   
0608   8C                     ADC   a,h   
0609   67                     LD   h,a   
060A   E5                     PUSH   hl   
060B                ADDROF2:      
060B   DD E9                  JP   (ix)   
060D                             ; /al length of an array, num elements
060D                             ; array* -- num
060D                ARRAYLENGTH:      
060D   E1                     POP   hl   
060E   2B                     DEC   hl   ; msb size
060F   56                     LD   d,(hl)   
0610   2B                     DEC   hl   ; lsb size
0611   5E                     LD   e,(hl)   
0612   EB                     EX   de,hl   
0613                ARRAYLENGTH1:      
0613   E5                     PUSH   hl   
0614   DD E9                  JP   (ix)   
0616                             ; /as size in bytes of an array, based on current data width
0616                             ; array* -- num
0616                ARRAYSIZE:      
0616                          ;*Macro unroll:  PERFORM arrayLength
0616   DD 21 1D 06            LD   ix,performM_1540S1061   
061A   C3 0D 06               JP   arrayLength   
061D                PERFORMM_1540S1061:      
061D   E1                     POP   hl   
061E   3A E6 4D               LD   a,(vDataWidth)   
0621   3D                     DEC   a   
0622   28 EF                  JR   z,arrayLength1   
0624   CB 3C                  SRL   h   
0626   CB 1D                  RR   l   
0628   18 E9                  JR   arrayLength1   
062A                             ; 13
062A                             ; /br break from loop
062A                             ; --
062A                BREAK:       
062A   E1                     POP   hl   ; hl = condition, break if false
062B   7D                     LD   a,l   
062C   B4                     OR   h   
062D   28 02                  JR   z,break1   
062F   DD E9                  JP   (ix)   
0631                BREAK1:      
0631   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0633   FD 54                  LD   d,iyh   
0635   21 08 00               LD   hl,8   
0638   19                     ADD   hl,de   
0639   23                     INC   hl   
063A   23                     INC   hl   
063B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
063E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0641   C3 4D 0B               JP   blockEnd   
0644                             ; /b
0644                BYTEMODE:      
0644   21 01 00               LD   hl,1   
0647                BYTEMODE1:      
0647   22 E6 4D               LD   (vDataWidth),hl   
064A   DD E9                  JP   (ix)   
064C                             ; //
064C                COMMENT:      
064C   03                     INC   bc   ; point to next char
064D   0A                     LD   a,(bc)   
064E   FE 20                  CP   " "   ; terminate on any char less than SP
0650   30 FA                  JR   nc,comment   
0652   0B                     DEC   bc   
0653   DD E9                  JP   (ix)   
0655                CONSTHEAPSTART:      
0655   11 22 4E               LD   de,HEAP   
0658   C3 1E 07               JP   constant   
065B                CONSTTIBSTART:      
065B   11 00 4B               LD   de,TIB   
065E   C3 1E 07               JP   constant   
0661                CONSTBUFSTART:      
0661   11 00 4C               LD   de,BUFFER   
0664   C3 1E 07               JP   constant   
0667                DECBASE:      
0667   21 0A 00               LD   hl,10   
066A                DECBASE1:      
066A   22 E8 4D               LD   (vNumBase),hl   
066D   DD E9                  JP   (ix)   
066F                ERROR1:      
066F   21 01 00               LD   hl,1   ; error 1: unknown command
0672   C3 A7 0F               JP   error   
0675                HEXBASE:      
0675   21 10 00               LD   hl,16   
0678   C3 6A 06               JP   decBase1   
067B                             ; Z80 port input
067B                             ; port -- value
067B                INPUT:       
067B   E1                     POP   hl   
067C   59                     LD   e,c   ; save IP
067D   4D                     LD   c,l   
067E   ED 68                  IN   l,(c)   
0680   26 00                  LD   h,0   
0682   4B                     LD   c,e   ; restore IP
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; /k                              6
0686                KEY:         
0686   CD 81 00               CALL   getchar   
0689   26 00                  LD   h,0   
068B   6F                     LD   l,a   
068C   E5                     PUSH   hl   
068D   DD E9                  JP   (ix)   
068F                             ; /o Z80 port output
068F                             ; value port --
068F                OUTPUT:      
068F   E1                     POP   hl   
0690   59                     LD   e,c   ; save IP
0691   4D                     LD   c,l   
0692   E1                     POP   hl   
0693   ED 69                  OUT   (c),l   
0695   4B                     LD   c,e   ; restore IP
0696   DD E9                  JP   (ix)   
0698                             ; /qt
0698                             ; bool --
0698                QUIT:        
0698   E1                     POP   hl   ; hl = condition, exit if true
0699   7D                     LD   a,l   
069A   B4                     OR   h   
069B   20 02                  JR   nz,quit1   
069D   DD E9                  JP   (ix)   
069F                QUIT1:       
069F   C3 4D 0B               JP   blockEnd   
06A2                RECUR:       
06A2   E1                     POP   hl   
06A3   22 F2 4D               LD   (vRecur),hl   
06A6   DD E9                  JP   (ix)   
06A8                REMAIN:      
06A8   2A FA 4D               LD   hl,(vRemain)   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                STRINGBEGIN:      
06AE   21 FF FF               LD   hl,TRUE   ; string mode = true
06B1   22 F6 4D               LD   (vStrMode),hl   
06B4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B6                STRINGEND:      
06B6   21 00 00               LD   hl,FALSE   ; string mode = false
06B9   22 F6 4D               LD   (vStrMode),hl   
06BC   2A EC 4D               LD   hl,(vBufPtr)   ; append NUL to string
06BF   AF                     XOR   a   
06C0   77                     LD   (hl),a   
06C1   23                     INC   hl   ; hl = string_end*
06C2   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
06C6   11 00 4C               LD   de,BUFFER   ; de = string*
06C9   B7                     OR   a   ; bc = size
06CA   ED 52                  SBC   hl,de   
06CC   44 4D                  LD   bc,hl   
06CE   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = hstring*
06D1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D2   D5                     PUSH   de   ; return hstring*
06D3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D5   ED 53 F0 4D            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06D9   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
06DD                STRINGEND1:      
06DD   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr
06E0   22 EC 4D               LD   (vBufPtr),hl   
06E3   DD E9                  JP   (ix)   
06E5                STRINGLENGTH:      
06E5   D1                     POP   de   
06E6   21 00 00               LD   hl,0   
06E9   18 02                  JR   stringLength2   
06EB                STRINGLENGTH1:      
06EB   13                     INC   de   
06EC   23                     INC   hl   
06ED                STRINGLENGTH2:      
06ED   1A                     LD   a,(de)   
06EE   B7                     OR   a   
06EF   20 FA                  JR   nz,stringLength1   
06F1                STRINGLENGTH3:      
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                STRINGSIZE:      
06F4                          ;*Macro unroll:  PERFORM stringLength
06F4   DD 21 FB 06            LD   ix,performM_1688S1235   
06F8   C3 E5 06               JP   stringLength   
06FB                PERFORMM_1688S1235:      
06FB   E1                     POP   hl   
06FC   23                     INC   hl   
06FD   C3 F1 06               JP   stringLength3   
0700                VARBUFPTR:      
0700   ED 5B EC 4D            LD   de,(vBufPtr)   
0704   21 EC 4D               LD   hl,vBufPtr   
0707   18 12                  JR   variable   
0709                VARHEAPPTR:      
0709   ED 5B F0 4D            LD   de,(vHeapPtr)   
070D   21 F0 4D               LD   hl,vHeapPtr   
0710   18 09                  JR   variable   
0712                VARTIBPTR:      
0712   ED 5B EA 4D            LD   de,(vTIBPtr)   
0716   21 EA 4D               LD   hl,vTIBPtr   
0719   18 00                  JR   variable   
071B                VARIABLE:      
071B   22 F8 4D               LD   (vPointer),hl   
071E                CONSTANT:      
071E   D5                     PUSH   de   
071F   DD E9                  JP   (ix)   
0721                             ; /wm
0721                WORDMODE:      
0721   21 02 00               LD   hl,2   
0724   C3 47 06               JP   byteMode1   
0727                             ; /x
0727                XOR:         
0727   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0728                XOR1:        
0728   E1                     POP   hl   
0729   7B                     LD   a,e   
072A   AD                     XOR   l   
072B   6F                     LD   l,a   
072C   7A                     LD   a,d   
072D   AC                     XOR   h   
072E   67                     LD   h,a   
072F   C3 D1 02               JP   add3   
0732                             ;*******************************************************************
0732                             ; Monty implementations
0732                             ;*******************************************************************
0732                             ; /rg rangeSrc
0732                             ; begin end step -- src
0732                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0732                RANGESRC:      ; range source: begin, end, step, local: L
0732   CD AC 03               CALL   go   
0735   00 00                  DW   NUL   
0737   41 07                  DW   rangeSrcM_1730S1285   
0739   3B 07                  DW   $+2   
073B   01                     DB   1   
073C   04 62 65 73 4C         .PSTR   "besL"   
0741                RANGESRCM_1730S1285:      
0741   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0742   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0767   5C 6B 74 7B            DB   "\\kt{"   
076B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0773   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0779   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0781   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0789   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0793   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
079B   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07B4   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07BC   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C3   7D                     DB   "}"   
07C4   7D                     DB   "}"   
07C5   00                     DB   0   
07C6                             ; /ai arrayIter
07C6                             ; array* -- src
07C6                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07C6                ARRAYITER:      
07C6   CD AC 03               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D3 07                  DW   arrayIterM_1749S1305   
07CD   CF 07                  DW   $+2   
07CF   01                     DB   1   
07D0   02 61 4C               .PSTR   "aL"   
07D3                ARRAYITERM_1749S1305:      
07D3   7B                     DB   "{"   
07D4   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E4   5C 6B 74 7B            DB   "\\kt{"   
07E8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07F6   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07FE   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0806   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
080D   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0815   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
081E   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0835   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
083D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0844   7D                     DB   "}"   
0845   7D                     DB   "}"   
0846   00                     DB   0   
0847                             ; /si stringIter
0847                             ; string* -- src
0847                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0847                STRINGITER:      
0847   CD AC 03               CALL   go   
084A   00 00                  DW   NUL   
084C   54 08                  DW   stringIterM_1768S1325   
084E   50 08                  DW   $+2   
0850   01                     DB   1   
0851   02 73 4C               .PSTR   "sL"   
0854                STRINGITERM_1768S1325:      
0854   7B                     DB   "{"   
0855   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
085F   5C 6B 74 7B            DB   "\\kt{"   
0863   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086B   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0872   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087A   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0882   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0889   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089A   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A2   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08A9   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08BD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08C5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CC   7D                     DB   "}"   
08CD   7D                     DB   "}"   
08CE   00                     DB   0   
08CF                             ; /mp map
08CF                             ; src func -- src1
08CF                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08CF                MAP:         ; map: source, function
08CF   CD AC 03               CALL   go   
08D2   00 00                  DW   NUL   
08D4   DC 08                  DW   mapM_1788S1347   
08D6   D8 08                  DW   $+2   
08D8   00                     DB   0   
08D9   02 73 66               .PSTR   "sf"   
08DC                MAPM_1788S1347:      
08DC   7B                     DB   "{"   
08DD   5C 6B 74 7B            DB   "\\kt{"   
08E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08ED   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F2   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08FE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0907   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
090E   7D                     DB   "}"   
090F   7D                     DB   "}"   
0910   00                     DB   0   
0911                             ; /ft filter
0911                             ; src pred -- src1
0911                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0911                FILTER:      ; filter: source, predicate, local: T
0911   CD AC 03               CALL   go   
0914   00 00                  DW   NUL   
0916   1F 09                  DW   filterM_1802S1362   
0918   1A 09                  DW   $+2   
091A   01                     DB   1   
091B   03 73 70 54            .PSTR   "spT"   
091F                FILTERM_1802S1362:      
091F   7B                     DB   "{"   
0920   5B 30 5D 25 54 3D      DB   "[0]%T="   
0926   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
092E   5B                     DB   "["   
092F   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093C   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0944   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0948   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094D   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0963   3F 3F                  DB   "??"   
0965   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096C   7D                     DB   "}"   
096D   7D                     DB   "}"   
096E   00                     DB   0   
096F                             ; /fd fold
096F                             ; reducer is a function like: \\da00bbLi4u
096F                             ; src init reducer -- src1
096F                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
096F                FOLD:        ; src, init, reducer
096F   CD AC 03               CALL   go   
0972   00 00                  DW   NUL   
0974   7E 09                  DW   foldM_1821S1382   
0976   78 09                  DW   $+2   
0978   01                     DB   1   
0979   04 73 69 72 41         .PSTR   "sirA"   
097E                FOLDM_1821S1382:      
097E   7B                     DB   "{"   ; reducer: \\da00bbLi4u
097F   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0986   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098E   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0993   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD AC 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1835S1397   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1835S1397:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F 3F                  DB   "??"   ; ifte:
09FB   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A04   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0B   7D                     DB   "}"   
0A0C   00                     DB   0   
0A0D                             ; ; /fs funcSrc
0A0D                             ; ; func -- src
0A0D                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0D                FUNCSRC:      ; :f func or block
0A0D   CD AC 03               CALL   go   
0A10   00 00                  DW   NUL   
0A12   19 0A                  DW   funcSrcM_1849S1412   
0A14   16 0A                  DW   $+2   
0A16   00                     DB   0   
0A17   01 66                  .PSTR   "f"   
0A19                FUNCSRCM_1849S1412:      
0A19   7B                     DB   "{"   
0A1A   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A26   5C 64 74 7B            DB   "\\dt{"   
0A2A   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A43   7D                     DB   "}"   
0A44   7D                     DB   "}"   
0A45   00                     DB   0   
0A46                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A46                PRINTARRAY:      
0A46   CD AC 03               CALL   go   
0A49   00 00                  DW   NUL   
0A4B   54 0A                  DW   printArrayM_1859S1423   
0A4D   4F 0A                  DW   $+2   
0A4F   02                     DB   2   
0A50   03 61 62 63            .PSTR   "abc"   
0A54                PRINTARRAYM_1859S1423:      
0A54   7B                     DB   "{"   
0A55   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8C   7D                     DB   "}"   
0A8D   00                     DB   0   
0A8E                             ;*******************************************************************
0A8E                             ; implementations continued
0A8E                             ;*******************************************************************
0A8E                             ; ~ bitwise invert
0A8E                TILDE:       
0A8E                INVERT:      
0A8E   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0A8F   7D                     LD   a,l   
0A90   2F                     CPL      
0A91   6F                     LD   l,a   
0A92   7C                     LD   a,h   
0A93   2F                     CPL      
0A94   67                     LD   h,a   
0A95   C3 D1 02               JP   add3   
0A98                             ; $ hex                         ; 22
0A98                DOLLAR:      
0A98                HEXNUM:      
0A98   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A9B                HEXNUM1:      
0A9B   03                     INC   bc   
0A9C   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A9D   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A9F   28 02                  JR   z,hexnum2   ; no a decimal
0AA1   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AA3                HEXNUM2:      
0AA3   D6 30                  SUB   $30   ; form decimal digit
0AA5   DA 3F 0B               JP   c,num2   
0AA8   FE 10                  CP   $0F+1   
0AAA   D2 3F 0B               JP   nc,num2   
0AAD   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AAE   29                     ADD   hl,hl   ; 4X
0AAF   29                     ADD   hl,hl   ; 8X
0AB0   29                     ADD   hl,hl   ; 16X
0AB1   85                     ADD   a,l   ; add into bottom of hl
0AB2   6F                     LD   l,a   
0AB3   18 E6                  JR   hexnum1   
0AB5                             ; ? if                            23
0AB5                             ; condition then -- value
0AB5                QUESTION:      
0AB5                IF:          
0AB5   03                     INC   bc   
0AB6   0A                     LD   a,(bc)   
0AB7   FE 3F                  CP   "?"   
0AB9   28 06                  JR   z,ifte   
0ABB   0B                     DEC   bc   
0ABC   11 00 00               LD   de,NUL   ; NUL pointer for else
0ABF   18 01                  JR   ifte1   
0AC1                             ; ?? ifte
0AC1                             ; condition then else -- value
0AC1                IFTE:        
0AC1   D1                     POP   de   ; de = else
0AC2                IFTE1:       
0AC2   E1                     POP   hl   ; hl = then
0AC3   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AC4   7C                     LD   a,h   
0AC5   B5                     OR   l   
0AC6   E1                     POP   hl   ; hl = then
0AC7   CA AD 03               JP   z,go1   ; if z de = else
0ACA   EB                     EX   de,hl   ; condition = false, de = then
0ACB   C3 AD 03               JP   go1   
0ACE                             ; string                        ;38
0ACE                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0ACE                QUOTE:       
0ACE                STRING:      
0ACE   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0AD1   E5                     PUSH   hl   ; save start of string
0AD2   0A                     LD   a,(bc)   
0AD3   5F                     LD   e,a   ; e = matching terminator
0AD4   03                     INC   bc   ; point to next char
0AD5   18 03                  JR   string2   
0AD7                STRING1:      
0AD7   77                     LD   (hl),a   
0AD8   23                     INC   hl   ; increase count
0AD9   03                     INC   bc   ; point to next char
0ADA                STRING2:      
0ADA   0A                     LD   a,(bc)   
0ADB   BB                     CP   e   ; is it the string terminator
0ADC   28 02                  JR   z,string3   
0ADE   18 F7                  JR   string1   
0AE0                STRING3:      
0AE0   AF                     XOR   a   ; write NUL to terminate string
0AE1   77                     LD   (hl),a   ; hl = end of string
0AE2   23                     INC   hl   
0AE3   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0AE6   DD E9                  JP   (ix)   
0AE8                             ; %a .. %z                      43
0AE8                             ; -- value
0AE8                             ; returns value of arg
0AE8                PERCENT:      
0AE8                ARG:         
0AE8   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0AEB   FD 56 05               LD   d,(iy+5)   
0AEE   EB                     EX   de,hl   
0AEF   7D                     LD   a,l   ; arg_list* == null, skip
0AF0   B4                     OR   h   
0AF1   28 1A                  JR   z,arg0a   
0AF3   23                     INC   hl   ; a = num_args, hl = arg_list*
0AF4   7E                     LD   a,(hl)   
0AF5   23                     INC   hl   
0AF6   B7                     OR   a   
0AF7   28 14                  JR   z,arg0a   ; num_args == 0, skip
0AF9   5F                     LD   e,a   ; e = a = num_args
0AFA   03                     INC   bc   ; a = next char = dollar_name
0AFB   0A                     LD   a,(bc)   
0AFC   C5                     PUSH   bc   ; save IP
0AFD   43                     LD   b,e   ; b = e = num_args
0AFE   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B01   FD 56 03               LD   d,(iy+3)   
0B04                ARG0:        
0B04   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B05   1B                     DEC   de   
0B06   BE                     CP   (hl)   
0B07   28 09                  JR   z,arg1   
0B09   23                     INC   hl   ; hl = next arg_list*
0B0A   10 F8                  DJNZ   arg0   
0B0C   C1                     POP   bc   ; no match, restore IP
0B0D                ARG0A:       
0B0D   11 00 00               LD   de,0   ; return 0
0B10   18 08                  JR   arg1a   
0B12                ARG1:        
0B12   C1                     POP   bc   ; restore IP
0B13   EB                     EX   de,hl   ; hl = arg*
0B14   22 F8 4D               LD   (vPointer),hl   ; store arg* in setter
0B17   5E                     LD   e,(hl)   
0B18   23                     INC   hl   
0B19   56                     LD   d,(hl)   ; de = arg
0B1A                ARG1A:       
0B1A   D5                     PUSH   de   ; push arg
0B1B   DD E9                  JP   (ix)   
0B1D                             ; 0..9 number                   37
0B1D                NUM:         
0B1D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B20   0A                     LD   a,(bc)   ; Get numeral or -
0B21   FE 2D                  CP   "-"   
0B23   20 01                  JR   nz,num0   
0B25   03                     INC   bc   ; move to next char, no flags affected
0B26                NUM0:        
0B26   08                     EX   af,af'   ; save zero flag = 0 for later
0B27                NUM1:        
0B27   0A                     LD   a,(bc)   ; read digit
0B28   D6 30                  SUB   "0"   ; less than 0?
0B2A   38 13                  JR   c,num2   ; not a digit, exit loop
0B2C   FE 0A                  CP   10   ; greater that 9?
0B2E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B30   03                     INC   bc   ; inc IP
0B31   54 5D                  LD   de,hl   ; multiply hl * 10
0B33   29                     ADD   hl,hl   
0B34   29                     ADD   hl,hl   
0B35   19                     ADD   hl,de   
0B36   29                     ADD   hl,hl   
0B37   85                     ADD   a,l   ; add digit in a to hl
0B38   6F                     LD   l,a   
0B39   3E 00                  LD   a,0   
0B3B   8C                     ADC   a,h   
0B3C   67                     LD   h,a   
0B3D   18 E8                  JR   num1   
0B3F                NUM2:        
0B3F   0B                     DEC   bc   
0B40   08                     EX   af,af'   ; restore zero flag
0B41   20 07                  JR   nz,num3   
0B43   EB                     EX   de,hl   ; negate the value of hl
0B44   21 00 00               LD   hl,0   
0B47   B7                     OR   a   ; jump to sub2
0B48   ED 52                  SBC   hl,de   
0B4A                NUM3:        
0B4A   E5                     PUSH   hl   ; Put the number on the stack
0B4B   DD E9                  JP   (ix)   ; and process the next character
0B4D                             ; }                               58
0B4D                RBRACE:      
0B4D                BLOCKEND:      
0B4D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B50   FD 56 01               LD   d,(iy+1)   
0B53   ED 53 04 4E            LD   (vTemp1),de   
0B57   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B5A   FD 56 07               LD   d,(iy+7)   
0B5D   ED 53 06 4E            LD   (vTemp2),de   
0B61   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B64   FD 56 03               LD   d,(iy+3)   
0B67   EB                     EX   de,hl   
0B68   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B6B   FD 56 01               LD   d,(iy+1)   
0B6E   13                     INC   de   ; for carry flag <=
0B6F   B7                     OR   a   
0B70   ED 52                  SBC   hl,de   
0B72   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B74   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B76   FD 5D                  LD   e,iyl   
0B78   21 08 00               LD   hl,8   
0B7B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B7C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B7D   18 0C                  JR   blockEnd2   
0B7F                BLOCKEND1:      ; same scope
0B7F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B82   FD 56 03               LD   d,(iy+3)   
0B85   EB                     EX   de,hl   
0B86   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B88   FD 5D                  LD   e,iyl   
0B8A   EB                     EX   de,hl   
0B8B                BLOCKEND2:      
0B8B   44 4D                  LD   bc,hl   ; bc = hl = BP
0B8D   B7                     OR   a   ; hl = BP - SP = count
0B8E   ED 72                  SBC   hl,sp   
0B90   7D                     LD   a,l   
0B91   B4                     OR   h   
0B92   28 09                  JR   z,blockEnd3   
0B94   C5                     PUSH   bc   ; bc = count, hl = BP
0B95   44 4D                  LD   bc,hl   
0B97   E1                     POP   hl   
0B98   2B                     DEC   hl   ; hl = BP-1
0B99   1B                     DEC   de   ; de = args*-1
0B9A   ED B8                  LDDR      
0B9C   13                     INC   de   
0B9D                BLOCKEND3:      
0B9D   EB                     EX   de,hl   ; sp = de = new tos*
0B9E   F9                     LD   sp,hl   
0B9F   ED 4B 06 4E            LD   bc,(vTemp2)   
0BA3   FD 2A 04 4E            LD   iy,(vTemp1)   
0BA7   ED 5B F2 4D            LD   de,(vRecur)   ; de = recur vector
0BAB   7B                     LD   a,e   ; check for NUL
0BAC   B2                     OR   d   
0BAD   20 02                  JR   nz,blockEnd4   
0BAF   DD E9                  JP   (ix)   
0BB1                BLOCKEND4:      
0BB1   21 00 00               LD   hl,0   ; clear recur vector
0BB4   22 F2 4D               LD   (vRecur),hl   
0BB7   C3 AD 03               JP   go1   ; execute de
0BBA                GOBLOCK:      
0BBA   ED 53 04 4E            LD   (vTemp1),de   ; save de
0BBE   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BC1   FD 54                  LD   d,iyh   
0BC3   FD 5D                  LD   e,iyl   
0BC5   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BC6   ED 52                  SBC   hl,de   
0BC8   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de
0BCC   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0BCD   B4                     OR   h   
0BCE   3E 00                  LD   a,0   
0BD0   28 6A                  JR   z,goFunc8   
0BD2   C5                     PUSH   bc   ; push IP
0BD3   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0BD6   FD 46 05               LD   b,(iy+5)   
0BD9   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0BDC   FD 66 03               LD   h,(iy+3)   
0BDF                GOBLOCK2:      
0BDF   C5                     PUSH   bc   ; arg_list*
0BE0   E5                     PUSH   hl   ; first_arg*
0BE1   FD E5                  PUSH   iy   ; push BP
0BE3   FD 21 00 00            LD   iy,0   ; BP = SP
0BE7   FD 39                  ADD   iy,sp   
0BE9                GOBLOCK3:      
0BE9   42 4B                  LD   bc,de   ; bc = de = block*-1
0BEB   DD E9                  JP   (ix)   
0BED                GOFUNC:      ; execute func
0BED   EB                     EX   de,hl   ; hl = func*
0BEE   5E                     LD   e,(hl)   ; de = partial_array*
0BEF   23                     INC   hl   
0BF0   56                     LD   d,(hl)   
0BF1   23                     INC   hl   
0BF2   7B                     LD   a,e   ; if partial_array* == null skip
0BF3   B2                     OR   d   
0BF4   28 21                  JR   z,goFunc3   
0BF6   ED 43 04 4E            LD   (vTemp1),bc   
0BFA   22 06 4E               LD   (vTemp2),hl   ; save bc,hl
0BFD   EB                     EX   de,hl   ; hl = partial_array*
0BFE   2B                     DEC   hl   ; bc = count
0BFF   46                     LD   b,(hl)   
0C00   2B                     DEC   hl   
0C01   4E                     LD   c,(hl)   
0C02   23                     INC   hl   ; hl = array data*
0C03   23                     INC   hl   
0C04   18 06                  JR   goFunc2   ; push each item on stack
0C06                GOFUNC1:      
0C06   5E                     LD   e,(hl)   ; de = partial item
0C07   23                     INC   hl   
0C08   56                     LD   d,(hl)   
0C09   23                     INC   hl   
0C0A   D5                     PUSH   de   ; push on stack
0C0B   0B                     DEC   bc   
0C0C                GOFUNC2:      
0C0C   79                     LD   a,c   ; if count != 0 then loop
0C0D   B0                     OR   b   
0C0E   20 F6                  JR   nz,goFunc1   
0C10   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore bc
0C14   2A 06 4E               LD   hl,(vTemp2)   ; restore hl
0C17                GOFUNC3:      
0C17   5E                     LD   e,(hl)   ; de = block*
0C18   23                     INC   hl   
0C19   56                     LD   d,(hl)   
0C1A   23                     INC   hl   
0C1B   ED 53 04 4E            LD   (vTemp1),de   ; save block*
0C1F   5E                     LD   e,(hl)   ; de = arg_list*
0C20   23                     INC   hl   
0C21   56                     LD   d,(hl)   
0C22   23                     INC   hl   
0C23   EB                     EX   de,hl   ; hl = arg_list*
0C24   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de = block*
0C28   7D                     LD   a,l   ; if arg_list* == null a = 0
0C29   B4                     OR   h   
0C2A   20 03                  JR   nz,goFunc4   
0C2C   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C2D   18 0D                  JR   goFunc8   
0C2F                GOFUNC4:      ; allocate locals
0C2F   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C30   18 03                  JR   goFunc6   
0C32                GOFUNC5:      ; loop
0C32   3B                     DEC   sp   
0C33   3B                     DEC   sp   
0C34   3D                     DEC   a   
0C35                GOFUNC6:      
0C35   B7                     OR   a   
0C36   20 FA                  JR   nz,goFunc5   ; end loop
0C38                GOFUNC7:      
0C38   23                     INC   hl   ; a = num_args* x 2
0C39   7E                     LD   a,(hl)   
0C3A   2B                     DEC   hl   
0C3B   87                     ADD   a,a   ; a *= 2
0C3C                GOFUNC8:      
0C3C   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C3D   44 4D                  LD   bc,hl   
0C3F   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C42   85                     ADD   a,l   
0C43   6F                     LD   l,a   
0C44   39                     ADD   hl,sp   
0C45   18 98                  JR   goBlock2   
0C47                             ; =                              21
0C47                             ; value _oldValue --            ; uses address in vPointer 15
0C47                ASSIGN:      
0C47   E1                     POP   hl   ; discard last accessed value
0C48   E1                     POP   hl   ; hl = new value
0C49                ASSIGN0:      
0C49   EB                     EX   de,hl   ; de = new value
0C4A   2A F8 4D               LD   hl,(vPointer)   
0C4D                ASSIGN1:      ; entry point from defineEnd
0C4D   73                     LD   (hl),e   
0C4E   3A E6 4D               LD   a,(vDataWidth)   
0C51   3D                     DEC   a   ; is it byte?
0C52   28 02                  JR   z,assign2   
0C54   23                     INC   hl   
0C55   72                     LD   (hl),d   
0C56                ASSIGN2:      
0C56   DD E9                  JP   (ix)   
0C58                             ; hl = value1, de = value2
0C58                             ; hl = result
0C58                EQUALS:      
0C58   B7                     OR   a   ; reset the carry flag
0C59   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C5B   28 16                  JR   z,true1   
0C5D   18 1A                  JR   false1   
0C5F                NOTEQUALS:      
0C5F   B7                     OR   a   ; reset the carry flag
0C60   ED 52                  SBC   hl,de   
0C62   20 0F                  JR   nz,true1   
0C64   18 13                  JR   false1   
0C66                             ; hl = value1 de = value2
0C66                             ; hl = result
0C66                LESSTHANEQ:      
0C66   B7                     OR   a   
0C67   ED 52                  SBC   hl,de   
0C69   18 05                  JR   lessthan1   
0C6B                             ; hl = value1 de = value2
0C6B                             ; hl = result
0C6B                LESSTHAN:      
0C6B   B7                     OR   a   
0C6C   ED 52                  SBC   hl,de   
0C6E   28 09                  JR   z,false1   
0C70                LESSTHAN1:      
0C70   FA 79 0C               JP   m,false1   
0C73                TRUE1:       
0C73   21 FF FF               LD   hl,TRUE   
0C76   E5                     PUSH   hl   
0C77   DD E9                  JP   (ix)   
0C79                NULL1:       
0C79                FALSE1:      
0C79   21 00 00               LD   hl,FALSE   
0C7C   E5                     PUSH   hl   
0C7D   DD E9                  JP   (ix)   
0C7F                             ; shiftLeft                     15
0C7F                             ; value count -- value2          shift left count places
0C7F                SHIFTLEFT:      
0C7F   50 59                  LD   de,bc   ; save IP
0C81   C1                     POP   bc   ; bc = count
0C82   41                     LD   b,c   ; b = loop counter
0C83   E1                     POP   hl   
0C84   04                     INC   b   ; test for counter=0 case
0C85   18 01                  JR   shiftLeft2   
0C87                SHIFTLEFT1:      
0C87   29                     ADD   hl,hl   ; left shift hl
0C88                SHIFTLEFT2:      
0C88   10 FD                  DJNZ   shiftLeft1   
0C8A   E5                     PUSH   hl   
0C8B   42 4B                  LD   bc,de   ; restore IP
0C8D   DD E9                  JP   (ix)   
0C8F                             ; shiftRight                    16
0C8F                             ; value count -- value2          shift left count places
0C8F                SHIFTRIGHT:      
0C8F   50 59                  LD   de,bc   ; save IP
0C91   C1                     POP   bc   ; bc = count
0C92   41                     LD   b,c   ; b = loop counter
0C93   E1                     POP   hl   
0C94   04                     INC   b   ; test for counter=0 case
0C95   18 04                  JR   shiftRight2   
0C97                SHIFTRIGHT1:      
0C97   CB 3C                  SRL   h   ; right shift hl
0C99   CB 1D                  RR   l   
0C9B                SHIFTRIGHT2:      
0C9B   10 FA                  DJNZ   shiftRight1   
0C9D   E5                     PUSH   hl   
0C9E   42 4B                  LD   bc,de   ; restore IP
0CA0   DD E9                  JP   (ix)   
0CA2                             ; division subroutine.
0CA2                             ; bc: divisor, de: dividend, hl: remainder
0CA2                DIVIDE:      
0CA2   21 00 00               LD   hl,0   ; zero the remainder
0CA5   3E 10                  LD   a,16   ; loop counter
0CA7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CA7   CB 21                  SLA   c   
0CA9   CB 10                  RL   b   
0CAB   ED 6A                  ADC   hl,hl   
0CAD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CAF   38 03                  JR   c,divide2   
0CB1   0C                     INC   c   
0CB2   18 01                  JR   divide3   
0CB4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CB4   19                     ADD   hl,de   
0CB5                DIVIDE3:      
0CB5   3D                     DEC   a   
0CB6   20 EF                  JR   nz,divide1   
0CB8   50 59                  LD   de,bc   ; result from bc to de
0CBA   C9                     RET      
0CBB                DOTNEXT:      
0CBB   3A F6 4D               LD   a,(vStrMode)   ; if string mode then exit
0CBE   3C                     INC   a   
0CBF   20 02                  JR   nz,dotNext1   
0CC1   DD E9                  JP   (ix)   
0CC3                DOTNEXT1:      
0CC3   11 00 4C               LD   de,BUFFER   
0CC6   2A EC 4D               LD   hl,(vBufPtr)   
0CC9   B7                     OR   a   ; hl = count, de = vHeapPtr
0CCA   ED 52                  SBC   hl,de   
0CCC   C3 D5 0C               JP   dotNext3   
0CCF                DOTNEXT2:      
0CCF   1A                     LD   a,(de)   ; print char at char*
0CD0   CD 85 00               CALL   putchar   
0CD3   13                     INC   de   ; char*++
0CD4   2B                     DEC   hl   ; count--
0CD5                DOTNEXT3:      
0CD5   7D                     LD   a,l   ; count == 0?
0CD6   B4                     OR   h   
0CD7   20 F6                  JR   nz,dotNext2   ; if not loop
0CD9   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CDC   22 EC 4D               LD   (vBufPtr),hl   
0CDF   DD E9                  JP   (ix)   
0CE1                             ; arg_list - parses arg_list e.g. ab:c
0CE1                             ; -- arg_list*
0CE1                PARSEARGS:      
0CE1   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CE4   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0CE7   E5                     PUSH   hl   ; save start of arg_list
0CE8   23                     INC   hl   ; skip length fields to start of string
0CE9   23                     INC   hl   
0CEA   03                     INC   bc   ; point to next char
0CEB                PARSEARGS1:      
0CEB   0A                     LD   a,(bc)   
0CEC   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CEE   20 03                  JR   nz,parseArgs1a   
0CF0   14                     INC   d   ; non zero value local count acts as flag
0CF1   18 10                  JR   parseArgs3   
0CF3                PARSEARGS1A:      
0CF3   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CF5   38 0F                  JR   c,parseArgs4   
0CF7   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CF9   30 0B                  JR   nc,parseArgs4   
0CFB                PARSEARGS2:      
0CFB   77                     LD   (hl),a   
0CFC   23                     INC   hl   
0CFD   1C                     INC   e   ; increase arg count
0CFE   AF                     XOR   a   
0CFF   B2                     OR   d   
0D00   28 01                  JR   z,parseArgs3   
0D02   14                     INC   d   ; if d > 0 increase local count
0D03                PARSEARGS3:      
0D03   03                     INC   bc   ; point to next char
0D04   18 E5                  JR   parseArgs1   
0D06                PARSEARGS4:      
0D06   0B                     DEC   bc   
0D07   AF                     XOR   a   
0D08   B2                     OR   d   
0D09   28 01                  JR   z,parseArgs5   
0D0B   15                     DEC   d   ; remove initial inc
0D0C                PARSEARGS5:      
0D0C   23                     INC   hl   
0D0D   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D10   E1                     POP   hl   ; hl = start of arg_list
0D11   72                     LD   (hl),d   ; write number of locals at start - 1
0D12   23                     INC   hl   
0D13   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D14   2B                     DEC   hl   
0D15   E3                     EX   (sp),hl   
0D16   E9                     JP   (hl)   
0D17                             ; create block: parses block e.g. 00bbIC4uLi4g
0D17                             ; -- block*
0D17                PARSEBLOCK:      
0D17   C5                     PUSH   bc   ; return pointer to first { of block
0D18   03                     INC   bc   
0D19   16 01                  LD   d,1   ; nesting: count first parenthesis
0D1B                PARSEBLOCK1:      ; Skip to end of definition
0D1B   0A                     LD   a,(bc)   ; Get the next character
0D1C   03                     INC   bc   ; Point to next character
0D1D   FE 21                  CP   " " + 1   ; ignore whitespace
0D1F   38 FA                  JR   c,parseBlock1   
0D21   FE 29                  CP   ")"   
0D23   28 2D                  JR   z,parseBlock4   
0D25   FE 7D                  CP   "}"   
0D27   28 29                  JR   z,parseBlock4   
0D29   FE 5D                  CP   "]"   
0D2B   28 25                  JR   z,parseBlock4   
0D2D   FE 28                  CP   "("   
0D2F   28 16                  JR   z,parseBlock2   
0D31   FE 7B                  CP   "{"   
0D33   28 12                  JR   z,parseBlock2   
0D35   FE 5B                  CP   "["   
0D37   28 0E                  JR   z,parseBlock2   
0D39   FE 27                  CP   "'"   
0D3B   28 0D                  JR   z,parseBlock3   
0D3D   FE 60                  CP   "`"   
0D3F   28 09                  JR   z,parseBlock3   
0D41   FE 22                  CP   DQ   
0D43   28 05                  JR   z,parseBlock3   
0D45   18 D4                  JR   parseBlock1   
0D47                PARSEBLOCK2:      
0D47   14                     INC   d   
0D48   18 D1                  JR   parseBlock1   
0D4A                PARSEBLOCK3:      
0D4A   3E 80                  LD   a,$80   
0D4C   AA                     XOR   d   
0D4D   57                     LD   d,a   
0D4E   20 CB                  JR   nz,parseBlock1   
0D50   18 03                  JR   parseBlock5   
0D52                PARSEBLOCK4:      
0D52   15                     DEC   d   
0D53   20 C6                  JR   nz,parseBlock1   ; get the next element
0D55                PARSEBLOCK5:      
0D55   60 69                  LD   hl,bc   ; hl = IP
0D57   11 22 4E               LD   de,HEAP   ; is IP pointing to object in heap
0D5A   B7                     OR   a   ; IP - HEAP
0D5B   ED 52                  SBC   hl,de   
0D5D   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D5F   28 1C                  JR   z,parseBlock6   
0D61   60 69                  LD   hl,bc   ; hl = IP
0D63   D1                     POP   de   ; de = block*
0D64   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D68   B7                     OR   a   ; bc = size
0D69   ED 52                  SBC   hl,de   
0D6B   44 4D                  LD   bc,hl   
0D6D   EB                     EX   de,hl   ; hl = block* de = heap*
0D6E   ED 5B F0 4D            LD   de,(vHeapPtr)   
0D72   D5                     PUSH   de   ; return hblock*
0D73   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D75   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0D79   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0D7D                PARSEBLOCK6:      
0D7D   0B                     DEC   bc   ; balanced, exit
0D7E   E1                     POP   hl   ; hl = block*
0D7F   E3                     EX   (sp),hl   ; return to caller
0D80   E9                     JP   (hl)   
0D81                             ; create function
0D81                             ; arg_list* block* -- func*
0D81                CREATEFUNC:      
0D81   E1                     POP   hl   ; save retrn address
0D82   22 08 4E               LD   (vTemp3),hl   
0D85   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D89   E1                     POP   hl   ; hl = block*
0D8A   22 06 4E               LD   (vTemp2),hl   ; save block*
0D8D   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D90   FD 56 05               LD   d,(iy+5)   
0D93   7B                     LD   a,e   ; if arg_list == null then make a func
0D94   B2                     OR   d   
0D95   20 09                  JR   nz,createFunc0   
0D97   21 00 00               LD   hl,0   ; partial_array = null
0D9A   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0D9E   18 65                  JR   createFunc5   
0DA0                CREATEFUNC0:      
0DA0   E1                     POP   hl   ; hl = inner_arg_list*
0DA1   E5                     PUSH   hl   ; save inner_arg_list
0DA2   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0DA6   7E                     LD   a,(hl)   ; compile inner_num_locals
0DA7   4F                     LD   c,a   ; b = inner_num_locals
0DA8   12                     LD   (de),a   
0DA9   23                     INC   hl   
0DAA   13                     INC   de   
0DAB   7E                     LD   a,(hl)   ; compile inner_length
0DAC   12                     LD   (de),a   
0DAD   91                     SUB   c   ; a = inner_num args
0DAE   23                     INC   hl   
0DAF   13                     INC   de   
0DB0   B7                     OR   a   ; compile args if inner_length > 0
0DB1   28 05                  JR   z,createFunc1   
0DB3   4F                     LD   c,a   ; bc = a
0DB4   06 00                  LD   b,0   
0DB6   ED B0                  LDIR      
0DB8                CREATEFUNC1:      
0DB8   EB                     EX   de,hl   ; hl = outer_arg_list
0DB9   FD 5E 04               LD   e,(iy+4)   
0DBC   FD 56 05               LD   d,(iy+5)   
0DBF   EB                     EX   de,hl   
0DC0   23                     INC   hl   ; a = outer_length
0DC1   7E                     LD   a,(hl)   
0DC2   23                     INC   hl   
0DC3   B7                     OR   a   
0DC4   28 05                  JR   z,createFunc2   
0DC6   4F                     LD   c,a   
0DC7   06 00                  LD   b,0   
0DC9   ED B0                  LDIR      ; append outer_args
0DCB                CREATEFUNC2:      ; a = outer_length
0DCB   47                     LD   b,a   ; b = a = outer_length
0DCC   2A F0 4D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DCF   23                     INC   hl   
0DD0   7E                     LD   a,(hl)   ; add outer_length to new length
0DD1   80                     ADD   a,b   
0DD2   77                     LD   (hl),a   
0DD3   2B                     DEC   hl   
0DD4   78                     LD   a,b   ; save outer_length in a'
0DD5   08                     EX   af,af'   
0DD6   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DD7   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DD8   B7                     OR   a   
0DD9   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DDB   4F                     LD   c,a   ; c = inner_num_locals
0DDC   06 00                  LD   b,0   ; bc = inner_num_locals
0DDE   23                     INC   hl   ; a = inner_length
0DDF   7E                     LD   a,(hl)   
0DE0   91                     SUB   c   ; a = inner_num_args
0DE1   23                     INC   hl   ; hl = inner_arg_chars
0DE2   85                     ADD   a,l   ; hl += a
0DE3   6F                     LD   l,a   
0DE4   3E 00                  LD   a,0   
0DE6   84                     ADD   a,h   
0DE7   67                     LD   h,a   
0DE8   ED B0                  LDIR      ; append inner_locals
0DEA                CREATEFUNC2A:      
0DEA   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DEB   12                     LD   (de),a   ; compile partial_array length field
0DEC   13                     INC   de   
0DED   AF                     XOR   a   
0DEE   12                     LD   (de),a   
0DEF   13                     INC   de   
0DF0   D5                     PUSH   de   ; push partial_array*
0DF1   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DF2   FD 5E 02               LD   e,(iy+2)   
0DF5   FD 56 03               LD   d,(iy+3)   
0DF8   EB                     EX   de,hl   
0DF9                CREATEFUNC3:      
0DF9   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DFA   4E                     LD   c,(hl)   
0DFB   2B                     DEC   hl   
0DFC   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DFD   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DFE   13                     INC   de   
0DFF   79                     LD   a,c   
0E00   12                     LD   (de),a   
0E01   13                     INC   de   
0E02   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E04                CREATEFUNC4:      
0E04   E1                     POP   hl   ; hl = partial_array*
0E05                CREATEFUNC5:      
0E05   C1                     POP   bc   ; bc = new_arg_list*
0E06   D5                     PUSH   de   ; return new func*
0E07   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E08   73                     LD   (hl),e   ; compile partial_array* to func
0E09   23                     INC   hl   
0E0A   72                     LD   (hl),d   
0E0B   23                     INC   hl   
0E0C   ED 5B 06 4E            LD   de,(vTemp2)   ; de = block*
0E10   73                     LD   (hl),e   ; compile block* to func
0E11   23                     INC   hl   
0E12   72                     LD   (hl),d   
0E13   23                     INC   hl   
0E14   71                     LD   (hl),c   ; compile new_arg_list* to func
0E15   23                     INC   hl   
0E16   70                     LD   (hl),b   
0E17   23                     INC   hl   
0E18   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap ptr
0E1B   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0E1F   2A 08 4E               LD   hl,(vTemp3)   ; jump to return address
0E22   E9                     JP   (hl)   
0E23                             ;*******************************************************************
0E23                             ; general routines
0E23                             ;*******************************************************************
0E23                             ; followed by a table
0E23                             ; indexed on the 0-25 lowercase letter
0E23                             ; db lsb(addr)
0E23                             ; the final item index 26 matches any other char
0E23                COMMANDTABLE:      
0E23   03                     INC   bc   
0E24   0A                     LD   a,(bc)   
0E25   FE 7B                  CP   "z"+1   
0E27   30 0B                  JR   nc,commandTable2   
0E29   D6 61                  SUB   "a"   
0E2B   38 07                  JR   c,commandTable2   
0E2D                COMMANDTABLE1:      
0E2D   E1                     POP   hl   
0E2E   85                     ADD   a,l   
0E2F   6F                     LD   l,a   
0E30   6E                     LD   l,(hl)   ; must have the same msb as the table
0E31   C3 3A 0E               JP   jumpTable1   
0E34                COMMANDTABLE2:      
0E34   3E 1A                  LD   a,26   
0E36   0B                     DEC   bc   
0E37   18 F4                  JR   commandTable1   
0E39                             ; followed by a table
0E39                             ; db char
0E39                             ; dw addr
0E39                             ; the final item must have char == NUL
0E39                JUMPTABLE:      
0E39   E1                     POP   hl   
0E3A                JUMPTABLE1:      
0E3A   03                     INC   bc   
0E3B                JUMPTABLE2:      
0E3B   AF                     XOR   a   
0E3C   BE                     CP   (hl)   
0E3D   20 03                  JR   nz,jumpTable3   
0E3F   0B                     DEC   bc   
0E40   18 09                  JR   jumpTable4   
0E42                JUMPTABLE3:      
0E42   0A                     LD   a,(bc)   
0E43   BE                     CP   (hl)   
0E44   28 05                  JR   z,jumpTable4   
0E46   23                     INC   hl   
0E47   23                     INC   hl   
0E48   23                     INC   hl   
0E49   18 F0                  JR   jumpTable2   
0E4B                JUMPTABLE4:      
0E4B   23                     INC   hl   
0E4C   5E                     LD   e,(hl)   
0E4D   23                     INC   hl   
0E4E   56                     LD   d,(hl)   
0E4F   EB                     EX   de,hl   
0E50   E9                     JP   (hl)   
0E51                PRTSTR0:      
0E51   CD 85 00               CALL   putchar   
0E54   23                     INC   hl   
0E55                PRTSTR:      
0E55   7E                     LD   a,(hl)   
0E56   B7                     OR   a   
0E57   20 F8                  JR   nz,prtstr0   
0E59   C9                     RET      
0E5A                             ; **************************************************************************
0E5A                             ; calculate nesting value
0E5A                             ; a is char to be tested,
0E5A                             ; e is the nesting value (initially 0)
0E5A                             ; e is increased by ( and [
0E5A                             ; e is decreased by ) and ]
0E5A                             ; e has its bit 7 toggled by `
0E5A                             ; limited to 127 levels
0E5A                             ; **************************************************************************
0E5A                NESTING:      
0E5A   FE 22                  CP   DQ   ; quote char
0E5C   28 06                  JR   z,nesting0   
0E5E   FE 60                  CP   "`"   ; quote char
0E60   28 02                  JR   z,nesting0   
0E62   18 0A                  JR   nesting1   
0E64                NESTING0:      
0E64   CB 7B                  BIT   7,e   
0E66   28 03                  JR   z,nesting1a   
0E68   CB BB                  RES   7,e   
0E6A   C9                     RET      
0E6B                NESTING1A:      
0E6B   CB FB                  SET   7,e   
0E6D   C9                     RET      
0E6E                NESTING1:      
0E6E   CB 7B                  BIT   7,e   
0E70   C0                     RET   nz   
0E71   FE 7B                  CP   "{"   
0E73   28 08                  JR   z,nesting2   
0E75   FE 5B                  CP   "["   
0E77   28 04                  JR   z,nesting2   
0E79   FE 28                  CP   "("   
0E7B   20 02                  JR   nz,nesting3   
0E7D                NESTING2:      
0E7D   1C                     INC   e   
0E7E   C9                     RET      
0E7F                NESTING3:      
0E7F   FE 7D                  CP   "}"   
0E81   28 07                  JR   z,nesting4   
0E83   FE 5D                  CP   "]"   
0E85   28 03                  JR   z,nesting4   
0E87   FE 29                  CP   ")"   
0E89   C0                     RET   nz   
0E8A                NESTING4:      
0E8A   1D                     DEC   e   
0E8B   C9                     RET      
0E8C                PROMPT:      
0E8C   CD 9C 0E               CALL   printStr   
0E8F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E94   C9                     RET      
0E95                CRLF:        
0E95   CD 9C 0E               CALL   printStr   
0E98   0D 0A 00               .CSTR   "\r\n"   
0E9B   C9                     RET      
0E9C                             ; prints a null teminated string
0E9C                             ; the string should be immediately following the call
0E9C                PRINTSTR:      
0E9C   E3                     EX   (sp),hl   ; swap			
0E9D   CD 55 0E               CALL   prtstr   
0EA0   23                     INC   hl   ; inc past NUL
0EA1   E3                     EX   (sp),hl   ; put it back	
0EA2   C9                     RET      
0EA3                INIT:        
0EA3   21 F0 01               LD   hl,titleStr   
0EA6   11 0E 4E               LD   de,titleBuf   
0EA9   06 14                  LD   b,20   
0EAB                INIT1:       
0EAB   1A                     LD   a,(de)   
0EAC   BE                     CP   (hl)   
0EAD   20 17                  JR   nz,coldBoot0   
0EAF   13                     INC   de   
0EB0   23                     INC   hl   
0EB1   10 F8                  DJNZ   init1   
0EB3                WARMINIT:      
0EB3   ED 4B FC 4D            LD   bc,(vSavedIP)   ; restore IP
0EB7   ED 7B FE 4D            LD   sp,(vSavedSP)   ; restore SP
0EBB   DD 2A 00 4E            LD   ix,(vSavedNext)   ; restore Next
0EBF   FD 2A 02 4E            LD   iy,(vSavedBP)   ; restore BP
0EC3   C3 FD 0E               JP   start1   
0EC6                COLDBOOT0:      
0EC6   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EC9   11 0E 4E               LD   de,titleBuf   
0ECC   06 14                  LD   b,20   
0ECE   ED B0                  LDIR      
0ED0                COLDINIT:      
0ED0   21 DE 01               LD   hl,isysVars   
0ED3   11 E6 4D               LD   de,sysVars   
0ED6   01 12 00               LD   bc,9 * 2   
0ED9   ED B0                  LDIR      
0EDB   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0EDE   06 34                  LD   b,26*2   
0EE0   AF                     XOR   a   
0EE1                COLDBOOT1:      
0EE1   77                     LD   (hl),a   
0EE2   23                     INC   hl   
0EE3   10 FC                  DJNZ   coldBoot1   
0EE5   DD 2A EE 4D            LD   ix,(vNext)   
0EE9   FD 21 00 4B            LD   iy,STACK   
0EED   C9                     RET      
0EEE                COLDSTART:      
0EEE   31 00 4B               LD   sp,STACK   
0EF1   CD C6 0E               CALL   coldBoot0   
0EF4   C3 FD 0E               JP   start1   
0EF7                START:       
0EF7   31 00 4B               LD   sp,STACK   ; start Monty
0EFA   CD A3 0E               CALL   init   ; setups
0EFD                START1:      
0EFD   21 0E 4E               LD   hl,titleBuf   
0F00   CD 55 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F03                INTERPRET:      
0F03   CD 8C 0E               CALL   prompt   
0F06   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F09   21 00 4B               LD   hl,TIB   
0F0C   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F0F                INTERPRET2:      ; calculate nesting
0F0F   1E 00                  LD   e,0   ; initilize nesting value
0F11   C5                     PUSH   bc   ; save offset into TIB,
0F12                             ; bc is also the count of chars in TIB
0F12   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0F15   18 0B                  JR   interpret4   
0F17                INTERPRET3:      
0F17   3E 33                  LD   a,"3"   
0F19   CD 85 00               CALL   putchar   
0F1C   7E                     LD   a,(hl)   ; a = char in TIB
0F1D   23                     INC   hl   ; inc pointer into TIB
0F1E   0B                     DEC   bc   ; dec count of chars in TIB
0F1F   CD 5A 0E               CALL   nesting   ; update nesting value
0F22                INTERPRET4:      
0F22   79                     LD   a,c   ; is count zero?
0F23   B0                     OR   b   
0F24   20 F1                  JR   nz,interpret3   ; if not loop
0F26   C1                     POP   bc   ; restore offset into TIB
0F27                INTERPRET5:      
0F27   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F2A   FE 20                  CP   $20   ; compare to space
0F2C   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F2E   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F30                             ; ???? NEEDED?
0F30   28 36                  JR   z,interpret8   
0F32   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F34   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F36   FE 05                  CP   CTRL_E   
0F38   CA C9 0F               JP   z,edit_   
0F3B   FE 08                  CP   CTRL_H   
0F3D   CA B9 0F               JP   z,backSpace_   
0F40   FE 0A                  CP   CTRL_J   
0F42   CA CC 0F               JP   z,reEdit_   
0F45                             ; cp CTRL_S
0F45                             ; jp z,printStack_
0F45                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F45                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F45                             ; DB     lsb(list_)       ; FF  ^L 12
0F45                             ; DB     lsb(printStack_) ; DLE ^P 16
0F45                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F45                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F45                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F45                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F45                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F45                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F45                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F45                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F45                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F45                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F45                INTERPRET5A:      
0F45                             ; ld (vTIBPtr),bc
0F45                             ; ld bc,(vTIBPtr)
0F45   18 C8                  JR   interpret2   
0F47                INTERPRET6:      
0F47   21 00 4B               LD   hl,TIB   
0F4A   09                     ADD   hl,bc   
0F4B   77                     LD   (hl),a   ; store the character in textbuf
0F4C   03                     INC   bc   
0F4D   CD 85 00               CALL   putchar   ; echo character to screen
0F50   CD 5A 0E               CALL   nesting   
0F53   18 D2                  JR   interpret5   ; wait for next character
0F55                INTERPRET7:      
0F55   21 00 4B               LD   hl,TIB   
0F58   09                     ADD   hl,bc   
0F59   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F5B   23                     INC   hl   
0F5C   36 0A                  LD   (hl),"\n"   
0F5E   23                     INC   hl   
0F5F   03                     INC   bc   
0F60   03                     INC   bc   
0F61   CD 95 0E               CALL   crlf   ; echo character to screen
0F64   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F65   B7                     OR   a   
0F66   20 BF                  JR   nz,interpret5   
0F68                INTERPRET8:      
0F68   21 00 4B               LD   hl,TIB   
0F6B   09                     ADD   hl,bc   
0F6C   22 EA 4D               LD   (vTIBPtr),hl   
0F6F   01 00 4B               LD   bc,TIB   
0F72   ED 43 FC 4D            LD   (vSavedIP),bc   ; save IP
0F76   ED 73 FE 4D            LD   (vSavedSP),sp   ; save SP
0F7A   DD 22 00 4E            LD   (vSavedNext),ix   ; save Next
0F7E   FD 22 02 4E            LD   (vSavedBP),iy   ; save BP
0F82   0B                     DEC   bc   
0F83                NEXT:        
0F83   03                     INC   bc   ; Increment the IP
0F84   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F85   FE 20                  CP   " "   ; whitespace?
0F87   28 FA                  JR   z,next   ; space? ignore
0F89   38 0D                  JR   c,next1   
0F8B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F8D   6F                     LD   l,a   ; index into table
0F8E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F90   6E                     LD   l,(hl)   ; get low jump address
0F91   24                     INC   h   ; page 2
0F92   FE BA                  CP   "Z" - "!" + 1 + $80   
0F94   38 01                  JR   c,next0   
0F96   24                     INC   h   ; page 3
0F97                NEXT0:       
0F97   E9                     JP   (hl)   ; Jump to routine
0F98                NEXT1:       
0F98   FE 00                  CP   NUL   ; end of input string?
0F9A   28 03                  JR   z,exit   
0F9C   C3 03 0F               JP   interpret   ; no, other whitespace, macros?
0F9F                EXIT:        
0F9F   03                     INC   bc   
0FA0   60 69                  LD   hl,bc   
0FA2   E9                     JP   (hl)   
0FA3                RUN:         
0FA3   C1                     POP   bc   
0FA4   0B                     DEC   bc   
0FA5   DD E9                  JP   (ix)   
0FA7                ERROR:       
0FA7   E5                     PUSH   hl   
0FA8   CD A3 0F               CALL   run   
0FAB   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FB6   C3 03 0F               JP   interpret   
0FB9                BACKSPACE_:      
0FB9   79                     LD   a,c   
0FBA   B0                     OR   b   
0FBB   CA 0F 0F               JP   z,interpret2   
0FBE   0B                     DEC   bc   
0FBF   CD 9C 0E               CALL   printStr   
0FC2   08 20 08 00            .CSTR   "\b \b"   
0FC6   C3 0F 0F               JP   interpret2   
0FC9                             ; edit
0FC9                EDIT_:       
0FC9   C3 03 0F               JP   interpret   
0FCC                REEDIT_:      
0FCC   C3 03 0F               JP   interpret   
0FCF                             ; editDef:
0FCF                             ;     pop hl                      ; pop ret address
0FCF                             ;     ex (sp),hl                  ; swap with TOS
0FCF                             ;     push hl                     ; dup TOS
0FCF                             ;     ld a,l                      ; a = ident
0FCF                             ;     ld de,TIB                   ; de = start of TIB
0FCF                             ;     ld (vTIBPtr),de             ; update TIB*
0FCF                             ;     push ix                     ; save NEXT
0FCF                             ;     ld ix,editDef0              ; NEXT = editDef0
0FCF                             ;     jp lookupRef                ; convert letter into address
0FCF                             ; editDef0:
0FCF                             ;     ld e,(hl)                   ; de = (hl++)
0FCF                             ;     inc hl
0FCF                             ;     ld d,(hl)
0FCF                             ;     ld a,d                      ; de == 0 ?
0FCF                             ;     or e
0FCF                             ;     jr z,editDef4
0FCF                             ;     ld ix,editDef3              ; NEXT = editDef3
0FCF                             ;     ex de,hl
0FCF                             ;     ld a,(hl)
0FCF                             ;     cp "{"
0FCF                             ;     jr nz,editDef1
0FCF                             ;     jp editBlock0               ; convert letter into address
0FCF                             ; editDef1:
0FCF                             ;     cp "("
0FCF                             ;     jr nz,editDef2
0FCF                             ;     jp editBlock0               ; convert letter into address
0FCF                             ; editDef2:
0FCF                             ;     jp editFunc
0FCF                             ; editDef3:
0FCF                             ;     ld a," "                    ; write assign
0FCF                             ;     call writeChar
0FCF                             ;     pop hl                      ; a = ident
0FCF                             ;     ld a,l
0FCF                             ;     call writeChar
0FCF                             ;     ld a,"="                    ; write assign
0FCF                             ;     call writeChar
0FCF                             ;     ld ix,editDef4              ; NEXT = editDef4
0FCF                             ;     jp printTIB
0FCF                             ; editDef4:
0FCF                             ;     pop ix                      ; restore NEXT
0FCF                             ;     jp (ix)
0FCF                             ; writeChar:
0FCF                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FCF                             ;     ld (de),a                   ; write ident
0FCF                             ;     inc de
0FCF                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FCF                             ;     ret
0FCF                             ; ; printTIB
0FCF                             ; printTIB:
0FCF                             ;     ld hl,(vTIBPtr)
0FCF                             ;     ld de,TIB
0FCF                             ;     or a
0FCF                             ;     sbc hl,de
0FCF                             ;     jp printTIB2
0FCF                             ; printTIB1:
0FCF                             ;     ld a,(de)
0FCF                             ;     call putchar
0FCF                             ; printTIB2:
0FCF                             ;     ld a,l
0FCF                             ;     or h
0FCF                             ;     jr nz,printTIB1
0FCF                             ;     jp (ix)
0FCF                             ; editBlock:
0FCF                             ;     pop hl                      ; hl = block*
0FCF                             ; editBlock0:
0FCF                             ;     push ix                     ; save next
0FCF                             ;     push hl                     ; push block*
0FCF                             ;     push hl                     ; push block*
0FCF                             ;     ld ix,(editBlock2)
0FCF                             ;     jp blockLength
0FCF                             ; editBlock1:
0FCF                             ;     pop hl                      ; bc = length, (sp) = IP
0FCF                             ;     pop de                      ; de = block*
0FCF                             ;     ld a,l
0FCF                             ;     or h
0FCF                             ;     jr z,editBlock2
0FCF                             ;     push bc
0FCF                             ;     ld bc,hl
0FCF                             ;     ex de,hl                    ; hl = block*
0FCF                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FCF                             ;     ldir                        ; copy block to TIB
0FCF                             ;     ld (vTIBPtr),de              ; save TIB*
0FCF                             ;     pop bc
0FCF                             ; editBlock2:
0FCF                             ;     pop ix                      ; restore next
0FCF                             ;     jp (ix)
0FCF                             ; editFunc:
0FCF                             ;     jp (ix)
0FCF                             ; editArray:
0FCF                             ;     jp (ix)
0FCF                             ; editparseArgs:
0FCF                             ;     jp (ix)
0FCF                             ; ; blockLength
0FCF                             ; ; addr1 -- length
0FCF                             ; blockLength:
0FCF                             ;     pop hl                      ; block*
0FCF                             ;     push hl                     ; save block*
0FCF                             ;     inc hl                      ; skip first char
0FCF                             ;     ld d,1                      ; increase nesting
0FCF                             ; blockLength1:                   ; Skip to end of definition
0FCF                             ;     ld a,(hl)                   ; Get the next character
0FCF                             ;     inc hl                      ; Point to next character
0FCF                             ;     cp " " + 1                  ; ignore whitespace
0FCF                             ;     jr c,blockLength1
0FCF                             ;     cp ")"
0FCF                             ;     jr z,blockLength4
0FCF                             ;     cp "}"
0FCF                             ;     jr z,blockLength4
0FCF                             ;     cp "]"
0FCF                             ;     jr z,blockLength4
0FCF                             ;     cp "("
0FCF                             ;     jr z,blockLength2
0FCF                             ;     cp "{"
0FCF                             ;     jr z,blockLength2
0FCF                             ;     cp "["
0FCF                             ;     jr z,blockLength2
0FCF                             ;     cp "'"
0FCF                             ;     jr z,blockLength3
0FCF                             ;     cp "`"
0FCF                             ;     jr z,blockLength3
0FCF                             ;     cp DQ
0FCF                             ;     jr z,blockLength3
0FCF                             ;     jr blockLength1
0FCF                             ; blockLength2:
0FCF                             ;     inc d
0FCF                             ;     jr blockLength1
0FCF                             ; blockLength4:
0FCF                             ;     dec d
0FCF                             ;     jr nz, blockLength1         ; get the next element
0FCF                             ; blockLength3:
0FCF                             ;     ld a,$80
0FCF                             ;     xor d
0FCF                             ;     ld d,a
0FCF                             ;     jr nz, blockLength1
0FCF                             ;     pop hl                      ; hl = block*
0FCF                             ;     or a
0FCF                             ;     sbc hl,de
0FCF                             ;     push hl
0FCF                             ;     jp (ix)
0FCF                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FCF                             ; \a start of stack \#3 depth \b base \$ prompt
0FCF                             ; DW dStack               ; a vS0 start of datastack			
0FCF                             ; DW FALSE                ; b vBase16
0FCF                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FCF                             ; DW 0                    ; d
0FCF                             ; DW 65                   ; e vLastDef "A" last command u defined
0FCF                             ; DW 0                    ; f
0FCF                             ; DW page6                ; g 256 bytes limits
0FCF                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FCF                          ;*Macro unroll: FUNC f1, 0, ""
0FCF                F1:          
0FCF   CD AC 03               CALL   go   
0FD2   00 00                  DW   NUL   
0FD4   DA 0F                  DW   f1M_3003S12   
0FD6   D8 0F                  DW   $+2   
0FD8   00                     DB   0   
0FD9   00                     .PSTR   ""   
0FDA                F1M_3003S12:      
0FDA   00                     DB   0   
0FDB                          ;*Macro unroll: FUNC f2, 0, ""
0FDB                F2:          
0FDB   CD AC 03               CALL   go   
0FDE   00 00                  DW   NUL   
0FE0   E6 0F                  DW   f2M_3005S15   
0FE2   E4 0F                  DW   $+2   
0FE4   00                     DB   0   
0FE5   00                     .PSTR   ""   
0FE6                F2M_3005S15:      
0FE6   00                     DB   0   
0FE7                          ;*Macro unroll: FUNC f3, 0, ""
0FE7                F3:          
0FE7   CD AC 03               CALL   go   
0FEA   00 00                  DW   NUL   
0FEC   F2 0F                  DW   f3M_3007S18   
0FEE   F0 0F                  DW   $+2   
0FF0   00                     DB   0   
0FF1   00                     .PSTR   ""   
0FF2                F3M_3007S18:      
0FF2   00                     DB   0   
0FF3                          ;*Macro unroll: FUNC f4, 0, ""
0FF3                F4:          
0FF3   CD AC 03               CALL   go   
0FF6   00 00                  DW   NUL   
0FF8   FE 0F                  DW   f4M_3009S21   
0FFA   FC 0F                  DW   $+2   
0FFC   00                     DB   0   
0FFD   00                     .PSTR   ""   
0FFE                F4M_3009S21:      
0FFE   00                     DB   0   
0FFF                          ALIGN   $100   
1000                TESTSSTART:      
1000                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1000                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1000                             ; test "[1 2 3].a", 0
1000                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1000                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1000                             ; test "/hb/bm$1234.",0
1000                             ; test "/bm257.",0
1000                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1000                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1000                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1000                             ; test "[1 2 3 /ab].a",0
1000                             ; call printStr
1000                             ; .cstr "Done!"
1000                             ; HALT
1000                          ;*Macro unroll:  test "/f", false
1000   31 00 4B               LD   SP,STACK   
1003   CD D0 0E               CALL   coldInit   
1006   CD 84 49               CALL   execStr   
1009   2F 66 00               DB   "/f",0   
100C   E1                     POP   HL   
100D   E5                     PUSH   HL   
100E   11 00 00               LD   DE,false   
1011   B7                     OR   A   
1012   ED 52                  SBC   HL,DE   
1014   7D                     LD   A,L   
1015   B4                     OR   H   
1016   CA 68 10               JP   Z,expectM_3030S48   
1019   CD 9C 0E               CALL   printStr   
101C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1025   CD 9C 0E               CALL   printStr   
1028   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1037   21 00 00               LD   hl,false   
103A   E5                     PUSH   hl   
103B   E5                     PUSH   hl   
103C   CD A3 0F               CALL   run   
103F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1046   CD 9C 0E               CALL   printStr   
1049   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1056   E1                     POP   hl   
1057   E5                     PUSH   hl   
1058   E5                     PUSH   hl   
1059   CD A3 0F               CALL   run   
105C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1067   76                     HALT      
1068                EXPECTM_3030S48:      
1068   E1                     POP   HL   
1069                          ;*Macro unroll:  test "/t", true
1069   31 00 4B               LD   SP,STACK   
106C   CD D0 0E               CALL   coldInit   
106F   CD 84 49               CALL   execStr   
1072   2F 74 00               DB   "/t",0   
1075   E1                     POP   HL   
1076   E5                     PUSH   HL   
1077   11 FF FF               LD   DE,true   
107A   B7                     OR   A   
107B   ED 52                  SBC   HL,DE   
107D   7D                     LD   A,L   
107E   B4                     OR   H   
107F   CA D1 10               JP   Z,expectM_3031S49   
1082   CD 9C 0E               CALL   printStr   
1085   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
108E   CD 9C 0E               CALL   printStr   
1091   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10A0   21 FF FF               LD   hl,true   
10A3   E5                     PUSH   hl   
10A4   E5                     PUSH   hl   
10A5   CD A3 0F               CALL   run   
10A8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
10AF   CD 9C 0E               CALL   printStr   
10B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10BF   E1                     POP   hl   
10C0   E5                     PUSH   hl   
10C1   E5                     PUSH   hl   
10C2   CD A3 0F               CALL   run   
10C5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
10D0   76                     HALT      
10D1                EXPECTM_3031S49:      
10D1   E1                     POP   HL   
10D2                          ;*Macro unroll:  test "1", 1
10D2   31 00 4B               LD   SP,STACK   
10D5   CD D0 0E               CALL   coldInit   
10D8   CD 84 49               CALL   execStr   
10DB   31 00                  DB   "1",0   
10DD   E1                     POP   HL   
10DE   E5                     PUSH   HL   
10DF   11 01 00               LD   DE,1   
10E2   B7                     OR   A   
10E3   ED 52                  SBC   HL,DE   
10E5   7D                     LD   A,L   
10E6   B4                     OR   H   
10E7   CA 38 11               JP   Z,expectM_3032S50   
10EA   CD 9C 0E               CALL   printStr   
10ED   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10F5   CD 9C 0E               CALL   printStr   
10F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1107   21 01 00               LD   hl,1   
110A   E5                     PUSH   hl   
110B   E5                     PUSH   hl   
110C   CD A3 0F               CALL   run   
110F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1116   CD 9C 0E               CALL   printStr   
1119   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1126   E1                     POP   hl   
1127   E5                     PUSH   hl   
1128   E5                     PUSH   hl   
1129   CD A3 0F               CALL   run   
112C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1137   76                     HALT      
1138                EXPECTM_3032S50:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "2", 2
1139   31 00 4B               LD   SP,STACK   
113C   CD D0 0E               CALL   coldInit   
113F   CD 84 49               CALL   execStr   
1142   32 00                  DB   "2",0   
1144   E1                     POP   HL   
1145   E5                     PUSH   HL   
1146   11 02 00               LD   DE,2   
1149   B7                     OR   A   
114A   ED 52                  SBC   HL,DE   
114C   7D                     LD   A,L   
114D   B4                     OR   H   
114E   CA 9F 11               JP   Z,expectM_3033S51   
1151   CD 9C 0E               CALL   printStr   
1154   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
115C   CD 9C 0E               CALL   printStr   
115F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
116E   21 02 00               LD   hl,2   
1171   E5                     PUSH   hl   
1172   E5                     PUSH   hl   
1173   CD A3 0F               CALL   run   
1176   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
117D   CD 9C 0E               CALL   printStr   
1180   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
118D   E1                     POP   hl   
118E   E5                     PUSH   hl   
118F   E5                     PUSH   hl   
1190   CD A3 0F               CALL   run   
1193   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
119E   76                     HALT      
119F                EXPECTM_3033S51:      
119F   E1                     POP   HL   
11A0                          ;*Macro unroll:  test "1", 1
11A0   31 00 4B               LD   SP,STACK   
11A3   CD D0 0E               CALL   coldInit   
11A6   CD 84 49               CALL   execStr   
11A9   31 00                  DB   "1",0   
11AB   E1                     POP   HL   
11AC   E5                     PUSH   HL   
11AD   11 01 00               LD   DE,1   
11B0   B7                     OR   A   
11B1   ED 52                  SBC   HL,DE   
11B3   7D                     LD   A,L   
11B4   B4                     OR   H   
11B5   CA 06 12               JP   Z,expectM_3034S52   
11B8   CD 9C 0E               CALL   printStr   
11BB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11C3   CD 9C 0E               CALL   printStr   
11C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11D5   21 01 00               LD   hl,1   
11D8   E5                     PUSH   hl   
11D9   E5                     PUSH   hl   
11DA   CD A3 0F               CALL   run   
11DD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11E4   CD 9C 0E               CALL   printStr   
11E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11F4   E1                     POP   hl   
11F5   E5                     PUSH   hl   
11F6   E5                     PUSH   hl   
11F7   CD A3 0F               CALL   run   
11FA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1205   76                     HALT      
1206                EXPECTM_3034S52:      
1206   E1                     POP   HL   
1207                          ;*Macro unroll:  test "0", 0
1207   31 00 4B               LD   SP,STACK   
120A   CD D0 0E               CALL   coldInit   
120D   CD 84 49               CALL   execStr   
1210   30 00                  DB   "0",0   
1212   E1                     POP   HL   
1213   E5                     PUSH   HL   
1214   11 00 00               LD   DE,0   
1217   B7                     OR   A   
1218   ED 52                  SBC   HL,DE   
121A   7D                     LD   A,L   
121B   B4                     OR   H   
121C   CA 6D 12               JP   Z,expectM_3035S53   
121F   CD 9C 0E               CALL   printStr   
1222   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
122A   CD 9C 0E               CALL   printStr   
122D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123C   21 00 00               LD   hl,0   
123F   E5                     PUSH   hl   
1240   E5                     PUSH   hl   
1241   CD A3 0F               CALL   run   
1244   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
124B   CD 9C 0E               CALL   printStr   
124E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125B   E1                     POP   hl   
125C   E5                     PUSH   hl   
125D   E5                     PUSH   hl   
125E   CD A3 0F               CALL   run   
1261   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
126C   76                     HALT      
126D                EXPECTM_3035S53:      
126D   E1                     POP   HL   
126E                          ;*Macro unroll:  test "10", 10
126E   31 00 4B               LD   SP,STACK   
1271   CD D0 0E               CALL   coldInit   
1274   CD 84 49               CALL   execStr   
1277   31 30 00               DB   "10",0   
127A   E1                     POP   HL   
127B   E5                     PUSH   HL   
127C   11 0A 00               LD   DE,10   
127F   B7                     OR   A   
1280   ED 52                  SBC   HL,DE   
1282   7D                     LD   A,L   
1283   B4                     OR   H   
1284   CA D6 12               JP   Z,expectM_3036S54   
1287   CD 9C 0E               CALL   printStr   
128A   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
1293   CD 9C 0E               CALL   printStr   
1296   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A5   21 0A 00               LD   hl,10   
12A8   E5                     PUSH   hl   
12A9   E5                     PUSH   hl   
12AA   CD A3 0F               CALL   run   
12AD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12B4   CD 9C 0E               CALL   printStr   
12B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C4   E1                     POP   hl   
12C5   E5                     PUSH   hl   
12C6   E5                     PUSH   hl   
12C7   CD A3 0F               CALL   run   
12CA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12D5   76                     HALT      
12D6                EXPECTM_3036S54:      
12D6   E1                     POP   HL   
12D7                          ;*Macro unroll:  test "123", 123
12D7   31 00 4B               LD   SP,STACK   
12DA   CD D0 0E               CALL   coldInit   
12DD   CD 84 49               CALL   execStr   
12E0   31 32 33 00            DB   "123",0   
12E4   E1                     POP   HL   
12E5   E5                     PUSH   HL   
12E6   11 7B 00               LD   DE,123   
12E9   B7                     OR   A   
12EA   ED 52                  SBC   HL,DE   
12EC   7D                     LD   A,L   
12ED   B4                     OR   H   
12EE   CA 41 13               JP   Z,expectM_3037S55   
12F1   CD 9C 0E               CALL   printStr   
12F4   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
12FE   CD 9C 0E               CALL   printStr   
1301   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1310   21 7B 00               LD   hl,123   
1313   E5                     PUSH   hl   
1314   E5                     PUSH   hl   
1315   CD A3 0F               CALL   run   
1318   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
131F   CD 9C 0E               CALL   printStr   
1322   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
132F   E1                     POP   hl   
1330   E5                     PUSH   hl   
1331   E5                     PUSH   hl   
1332   CD A3 0F               CALL   run   
1335   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1340   76                     HALT      
1341                EXPECTM_3037S55:      
1341   E1                     POP   HL   
1342                          ;*Macro unroll:  test "-1",-1
1342   31 00 4B               LD   SP,STACK   
1345   CD D0 0E               CALL   coldInit   
1348   CD 84 49               CALL   execStr   
134B   2D 31 00               DB   "-1",0   
134E   E1                     POP   HL   
134F   E5                     PUSH   HL   
1350   11 FF FF               LD   DE,-1   
1353   B7                     OR   A   
1354   ED 52                  SBC   HL,DE   
1356   7D                     LD   A,L   
1357   B4                     OR   H   
1358   CA AA 13               JP   Z,expectM_3038S56   
135B   CD 9C 0E               CALL   printStr   
135E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1367   CD 9C 0E               CALL   printStr   
136A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1379   21 FF FF               LD   hl,-1   
137C   E5                     PUSH   hl   
137D   E5                     PUSH   hl   
137E   CD A3 0F               CALL   run   
1381   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1388   CD 9C 0E               CALL   printStr   
138B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1398   E1                     POP   hl   
1399   E5                     PUSH   hl   
139A   E5                     PUSH   hl   
139B   CD A3 0F               CALL   run   
139E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13A9   76                     HALT      
13AA                EXPECTM_3038S56:      
13AA   E1                     POP   HL   
13AB                          ;*Macro unroll:  test "_a", $61
13AB   31 00 4B               LD   SP,STACK   
13AE   CD D0 0E               CALL   coldInit   
13B1   CD 84 49               CALL   execStr   
13B4   5F 61 00               DB   "_a",0   
13B7   E1                     POP   HL   
13B8   E5                     PUSH   HL   
13B9   11 61 00               LD   DE,$61   
13BC   B7                     OR   A   
13BD   ED 52                  SBC   HL,DE   
13BF   7D                     LD   A,L   
13C0   B4                     OR   H   
13C1   CA 13 14               JP   Z,expectM_3039S57   
13C4   CD 9C 0E               CALL   printStr   
13C7   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
13D0   CD 9C 0E               CALL   printStr   
13D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E2   21 61 00               LD   hl,$61   
13E5   E5                     PUSH   hl   
13E6   E5                     PUSH   hl   
13E7   CD A3 0F               CALL   run   
13EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13F1   CD 9C 0E               CALL   printStr   
13F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1401   E1                     POP   hl   
1402   E5                     PUSH   hl   
1403   E5                     PUSH   hl   
1404   CD A3 0F               CALL   run   
1407   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1412   76                     HALT      
1413                EXPECTM_3039S57:      
1413   E1                     POP   HL   
1414                          ;*Macro unroll:  test "__", $5F
1414   31 00 4B               LD   SP,STACK   
1417   CD D0 0E               CALL   coldInit   
141A   CD 84 49               CALL   execStr   
141D   5F 5F 00               DB   "__",0   
1420   E1                     POP   HL   
1421   E5                     PUSH   HL   
1422   11 5F 00               LD   DE,$5F   
1425   B7                     OR   A   
1426   ED 52                  SBC   HL,DE   
1428   7D                     LD   A,L   
1429   B4                     OR   H   
142A   CA 7C 14               JP   Z,expectM_3040S58   
142D   CD 9C 0E               CALL   printStr   
1430   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1439   CD 9C 0E               CALL   printStr   
143C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144B   21 5F 00               LD   hl,$5F   
144E   E5                     PUSH   hl   
144F   E5                     PUSH   hl   
1450   CD A3 0F               CALL   run   
1453   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
145A   CD 9C 0E               CALL   printStr   
145D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146A   E1                     POP   hl   
146B   E5                     PUSH   hl   
146C   E5                     PUSH   hl   
146D   CD A3 0F               CALL   run   
1470   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
147B   76                     HALT      
147C                EXPECTM_3040S58:      
147C   E1                     POP   HL   
147D                          ;*Macro unroll:  test "$10", $10
147D   31 00 4B               LD   SP,STACK   
1480   CD D0 0E               CALL   coldInit   
1483   CD 84 49               CALL   execStr   
1486   24 31 30 00            DB   "$10",0   
148A   E1                     POP   HL   
148B   E5                     PUSH   HL   
148C   11 10 00               LD   DE,$10   
148F   B7                     OR   A   
1490   ED 52                  SBC   HL,DE   
1492   7D                     LD   A,L   
1493   B4                     OR   H   
1494   CA E7 14               JP   Z,expectM_3041S59   
1497   CD 9C 0E               CALL   printStr   
149A   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
14A4   CD 9C 0E               CALL   printStr   
14A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B6   21 10 00               LD   hl,$10   
14B9   E5                     PUSH   hl   
14BA   E5                     PUSH   hl   
14BB   CD A3 0F               CALL   run   
14BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14C5   CD 9C 0E               CALL   printStr   
14C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D5   E1                     POP   hl   
14D6   E5                     PUSH   hl   
14D7   E5                     PUSH   hl   
14D8   CD A3 0F               CALL   run   
14DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14E6   76                     HALT      
14E7                EXPECTM_3041S59:      
14E7   E1                     POP   HL   
14E8                          ;*Macro unroll:  test "$FF", $FF
14E8   31 00 4B               LD   SP,STACK   
14EB   CD D0 0E               CALL   coldInit   
14EE   CD 84 49               CALL   execStr   
14F1   24 46 46 00            DB   "$FF",0   
14F5   E1                     POP   HL   
14F6   E5                     PUSH   HL   
14F7   11 FF 00               LD   DE,$FF   
14FA   B7                     OR   A   
14FB   ED 52                  SBC   HL,DE   
14FD   7D                     LD   A,L   
14FE   B4                     OR   H   
14FF   CA 52 15               JP   Z,expectM_3042S60   
1502   CD 9C 0E               CALL   printStr   
1505   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
150F   CD 9C 0E               CALL   printStr   
1512   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1521   21 FF 00               LD   hl,$FF   
1524   E5                     PUSH   hl   
1525   E5                     PUSH   hl   
1526   CD A3 0F               CALL   run   
1529   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1530   CD 9C 0E               CALL   printStr   
1533   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1540   E1                     POP   hl   
1541   E5                     PUSH   hl   
1542   E5                     PUSH   hl   
1543   CD A3 0F               CALL   run   
1546   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1551   76                     HALT      
1552                EXPECTM_3042S60:      
1552   E1                     POP   HL   
1553                          ;*Macro unroll:  test "-1 2 +",1
1553   31 00 4B               LD   SP,STACK   
1556   CD D0 0E               CALL   coldInit   
1559   CD 84 49               CALL   execStr   
155C   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1563   E1                     POP   HL   
1564   E5                     PUSH   HL   
1565   11 01 00               LD   DE,1   
1568   B7                     OR   A   
1569   ED 52                  SBC   HL,DE   
156B   7D                     LD   A,L   
156C   B4                     OR   H   
156D   CA C3 15               JP   Z,expectM_3043S61   
1570   CD 9C 0E               CALL   printStr   
1573   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1580   CD 9C 0E               CALL   printStr   
1583   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1592   21 01 00               LD   hl,1   
1595   E5                     PUSH   hl   
1596   E5                     PUSH   hl   
1597   CD A3 0F               CALL   run   
159A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15A1   CD 9C 0E               CALL   printStr   
15A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B1   E1                     POP   hl   
15B2   E5                     PUSH   hl   
15B3   E5                     PUSH   hl   
15B4   CD A3 0F               CALL   run   
15B7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15C2   76                     HALT      
15C3                EXPECTM_3043S61:      
15C3   E1                     POP   HL   
15C4                          ;*Macro unroll:  test "-1 1 +",0
15C4   31 00 4B               LD   SP,STACK   
15C7   CD D0 0E               CALL   coldInit   
15CA   CD 84 49               CALL   execStr   
15CD   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
15D4   E1                     POP   HL   
15D5   E5                     PUSH   HL   
15D6   11 00 00               LD   DE,0   
15D9   B7                     OR   A   
15DA   ED 52                  SBC   HL,DE   
15DC   7D                     LD   A,L   
15DD   B4                     OR   H   
15DE   CA 34 16               JP   Z,expectM_3044S62   
15E1   CD 9C 0E               CALL   printStr   
15E4   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
15F1   CD 9C 0E               CALL   printStr   
15F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1603   21 00 00               LD   hl,0   
1606   E5                     PUSH   hl   
1607   E5                     PUSH   hl   
1608   CD A3 0F               CALL   run   
160B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1612   CD 9C 0E               CALL   printStr   
1615   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1622   E1                     POP   hl   
1623   E5                     PUSH   hl   
1624   E5                     PUSH   hl   
1625   CD A3 0F               CALL   run   
1628   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1633   76                     HALT      
1634                EXPECTM_3044S62:      
1634   E1                     POP   HL   
1635                          ;*Macro unroll:  test "1 2 +", 3
1635   31 00 4B               LD   SP,STACK   
1638   CD D0 0E               CALL   coldInit   
163B   CD 84 49               CALL   execStr   
163E   31 20 32 20 2B 00      DB   "1 2 +",0   
1644   E1                     POP   HL   
1645   E5                     PUSH   HL   
1646   11 03 00               LD   DE,3   
1649   B7                     OR   A   
164A   ED 52                  SBC   HL,DE   
164C   7D                     LD   A,L   
164D   B4                     OR   H   
164E   CA A3 16               JP   Z,expectM_3045S63   
1651   CD 9C 0E               CALL   printStr   
1654   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1660   CD 9C 0E               CALL   printStr   
1663   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1672   21 03 00               LD   hl,3   
1675   E5                     PUSH   hl   
1676   E5                     PUSH   hl   
1677   CD A3 0F               CALL   run   
167A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1681   CD 9C 0E               CALL   printStr   
1684   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1691   E1                     POP   hl   
1692   E5                     PUSH   hl   
1693   E5                     PUSH   hl   
1694   CD A3 0F               CALL   run   
1697   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16A2   76                     HALT      
16A3                EXPECTM_3045S63:      
16A3   E1                     POP   HL   
16A4                          ;*Macro unroll:  test "4 1 2 +", 3
16A4   31 00 4B               LD   SP,STACK   
16A7   CD D0 0E               CALL   coldInit   
16AA   CD 84 49               CALL   execStr   
16AD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
16B5   E1                     POP   HL   
16B6   E5                     PUSH   HL   
16B7   11 03 00               LD   DE,3   
16BA   B7                     OR   A   
16BB   ED 52                  SBC   HL,DE   
16BD   7D                     LD   A,L   
16BE   B4                     OR   H   
16BF   CA 16 17               JP   Z,expectM_3046S64   
16C2   CD 9C 0E               CALL   printStr   
16C5   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
16D3   CD 9C 0E               CALL   printStr   
16D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16E5   21 03 00               LD   hl,3   
16E8   E5                     PUSH   hl   
16E9   E5                     PUSH   hl   
16EA   CD A3 0F               CALL   run   
16ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16F4   CD 9C 0E               CALL   printStr   
16F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1704   E1                     POP   hl   
1705   E5                     PUSH   hl   
1706   E5                     PUSH   hl   
1707   CD A3 0F               CALL   run   
170A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1715   76                     HALT      
1716                EXPECTM_3046S64:      
1716   E1                     POP   HL   
1717                          ;*Macro unroll:  test "123 456 +", 123+456
1717   31 00 4B               LD   SP,STACK   
171A   CD D0 0E               CALL   coldInit   
171D   CD 84 49               CALL   execStr   
1720   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
172A   E1                     POP   HL   
172B   E5                     PUSH   HL   
172C   11 43 02               LD   DE,123+456   
172F   B7                     OR   A   
1730   ED 52                  SBC   HL,DE   
1732   7D                     LD   A,L   
1733   B4                     OR   H   
1734   CA 8D 17               JP   Z,expectM_3047S65   
1737   CD 9C 0E               CALL   printStr   
173A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
174A   CD 9C 0E               CALL   printStr   
174D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
175C   21 43 02               LD   hl,123+456   
175F   E5                     PUSH   hl   
1760   E5                     PUSH   hl   
1761   CD A3 0F               CALL   run   
1764   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
176B   CD 9C 0E               CALL   printStr   
176E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177B   E1                     POP   hl   
177C   E5                     PUSH   hl   
177D   E5                     PUSH   hl   
177E   CD A3 0F               CALL   run   
1781   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
178C   76                     HALT      
178D                EXPECTM_3047S65:      
178D   E1                     POP   HL   
178E                          ;*Macro unroll:  test "64 128 +", 64+128
178E   31 00 4B               LD   SP,STACK   
1791   CD D0 0E               CALL   coldInit   
1794   CD 84 49               CALL   execStr   
1797   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
17A0   E1                     POP   HL   
17A1   E5                     PUSH   HL   
17A2   11 C0 00               LD   DE,64+128   
17A5   B7                     OR   A   
17A6   ED 52                  SBC   HL,DE   
17A8   7D                     LD   A,L   
17A9   B4                     OR   H   
17AA   CA 02 18               JP   Z,expectM_3048S66   
17AD   CD 9C 0E               CALL   printStr   
17B0   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
17BF   CD 9C 0E               CALL   printStr   
17C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D1   21 C0 00               LD   hl,64+128   
17D4   E5                     PUSH   hl   
17D5   E5                     PUSH   hl   
17D6   CD A3 0F               CALL   run   
17D9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17E0   CD 9C 0E               CALL   printStr   
17E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F0   E1                     POP   hl   
17F1   E5                     PUSH   hl   
17F2   E5                     PUSH   hl   
17F3   CD A3 0F               CALL   run   
17F6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1801   76                     HALT      
1802                EXPECTM_3048S66:      
1802   E1                     POP   HL   
1803                          ;*Macro unroll:  test "1 2 +", 3
1803   31 00 4B               LD   SP,STACK   
1806   CD D0 0E               CALL   coldInit   
1809   CD 84 49               CALL   execStr   
180C   31 20 32 20 2B 00      DB   "1 2 +",0   
1812   E1                     POP   HL   
1813   E5                     PUSH   HL   
1814   11 03 00               LD   DE,3   
1817   B7                     OR   A   
1818   ED 52                  SBC   HL,DE   
181A   7D                     LD   A,L   
181B   B4                     OR   H   
181C   CA 71 18               JP   Z,expectM_3049S67   
181F   CD 9C 0E               CALL   printStr   
1822   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
182E   CD 9C 0E               CALL   printStr   
1831   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1840   21 03 00               LD   hl,3   
1843   E5                     PUSH   hl   
1844   E5                     PUSH   hl   
1845   CD A3 0F               CALL   run   
1848   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
184F   CD 9C 0E               CALL   printStr   
1852   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185F   E1                     POP   hl   
1860   E5                     PUSH   hl   
1861   E5                     PUSH   hl   
1862   CD A3 0F               CALL   run   
1865   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1870   76                     HALT      
1871                EXPECTM_3049S67:      
1871   E1                     POP   HL   
1872                          ;*Macro unroll:  test "1a= a++ a",2
1872   31 00 4B               LD   SP,STACK   
1875   CD D0 0E               CALL   coldInit   
1878   CD 84 49               CALL   execStr   
187B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1885   E1                     POP   HL   
1886   E5                     PUSH   HL   
1887   11 02 00               LD   DE,2   
188A   B7                     OR   A   
188B   ED 52                  SBC   HL,DE   
188D   7D                     LD   A,L   
188E   B4                     OR   H   
188F   CA E8 18               JP   Z,expectM_3050S68   
1892   CD 9C 0E               CALL   printStr   
1895   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
18A5   CD 9C 0E               CALL   printStr   
18A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B7   21 02 00               LD   hl,2   
18BA   E5                     PUSH   hl   
18BB   E5                     PUSH   hl   
18BC   CD A3 0F               CALL   run   
18BF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18C6   CD 9C 0E               CALL   printStr   
18C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D6   E1                     POP   hl   
18D7   E5                     PUSH   hl   
18D8   E5                     PUSH   hl   
18D9   CD A3 0F               CALL   run   
18DC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18E7   76                     HALT      
18E8                EXPECTM_3050S68:      
18E8   E1                     POP   HL   
18E9                          ;*Macro unroll:  test "-1 -1 -",0
18E9   31 00 4B               LD   SP,STACK   
18EC   CD D0 0E               CALL   coldInit   
18EF   CD 84 49               CALL   execStr   
18F2   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
18FA   E1                     POP   HL   
18FB   E5                     PUSH   HL   
18FC   11 00 00               LD   DE,0   
18FF   B7                     OR   A   
1900   ED 52                  SBC   HL,DE   
1902   7D                     LD   A,L   
1903   B4                     OR   H   
1904   CA 5B 19               JP   Z,expectM_3051S69   
1907   CD 9C 0E               CALL   printStr   
190A   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1918   CD 9C 0E               CALL   printStr   
191B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192A   21 00 00               LD   hl,0   
192D   E5                     PUSH   hl   
192E   E5                     PUSH   hl   
192F   CD A3 0F               CALL   run   
1932   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1939   CD 9C 0E               CALL   printStr   
193C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1949   E1                     POP   hl   
194A   E5                     PUSH   hl   
194B   E5                     PUSH   hl   
194C   CD A3 0F               CALL   run   
194F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
195A   76                     HALT      
195B                EXPECTM_3051S69:      
195B   E1                     POP   HL   
195C                          ;*Macro unroll:  test "5 3 -", 2
195C   31 00 4B               LD   SP,STACK   
195F   CD D0 0E               CALL   coldInit   
1962   CD 84 49               CALL   execStr   
1965   35 20 33 20 2D 00      DB   "5 3 -",0   
196B   E1                     POP   HL   
196C   E5                     PUSH   HL   
196D   11 02 00               LD   DE,2   
1970   B7                     OR   A   
1971   ED 52                  SBC   HL,DE   
1973   7D                     LD   A,L   
1974   B4                     OR   H   
1975   CA CA 19               JP   Z,expectM_3052S70   
1978   CD 9C 0E               CALL   printStr   
197B   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1987   CD 9C 0E               CALL   printStr   
198A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1999   21 02 00               LD   hl,2   
199C   E5                     PUSH   hl   
199D   E5                     PUSH   hl   
199E   CD A3 0F               CALL   run   
19A1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19A8   CD 9C 0E               CALL   printStr   
19AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19B8   E1                     POP   hl   
19B9   E5                     PUSH   hl   
19BA   E5                     PUSH   hl   
19BB   CD A3 0F               CALL   run   
19BE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19C9   76                     HALT      
19CA                EXPECTM_3052S70:      
19CA   E1                     POP   HL   
19CB                          ;*Macro unroll:  test "2 1 -",1
19CB   31 00 4B               LD   SP,STACK   
19CE   CD D0 0E               CALL   coldInit   
19D1   CD 84 49               CALL   execStr   
19D4   32 20 31 20 2D 00      DB   "2 1 -",0   
19DA   E1                     POP   HL   
19DB   E5                     PUSH   HL   
19DC   11 01 00               LD   DE,1   
19DF   B7                     OR   A   
19E0   ED 52                  SBC   HL,DE   
19E2   7D                     LD   A,L   
19E3   B4                     OR   H   
19E4   CA 39 1A               JP   Z,expectM_3053S71   
19E7   CD 9C 0E               CALL   printStr   
19EA   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19F6   CD 9C 0E               CALL   printStr   
19F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A08   21 01 00               LD   hl,1   
1A0B   E5                     PUSH   hl   
1A0C   E5                     PUSH   hl   
1A0D   CD A3 0F               CALL   run   
1A10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A17   CD 9C 0E               CALL   printStr   
1A1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A27   E1                     POP   hl   
1A28   E5                     PUSH   hl   
1A29   E5                     PUSH   hl   
1A2A   CD A3 0F               CALL   run   
1A2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A38   76                     HALT      
1A39                EXPECTM_3053S71:      
1A39   E1                     POP   HL   
1A3A                          ;*Macro unroll:  test "3a= a-- a",2
1A3A   31 00 4B               LD   SP,STACK   
1A3D   CD D0 0E               CALL   coldInit   
1A40   CD 84 49               CALL   execStr   
1A43   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A4D   E1                     POP   HL   
1A4E   E5                     PUSH   HL   
1A4F   11 02 00               LD   DE,2   
1A52   B7                     OR   A   
1A53   ED 52                  SBC   HL,DE   
1A55   7D                     LD   A,L   
1A56   B4                     OR   H   
1A57   CA B0 1A               JP   Z,expectM_3054S72   
1A5A   CD 9C 0E               CALL   printStr   
1A5D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A6D   CD 9C 0E               CALL   printStr   
1A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A7F   21 02 00               LD   hl,2   
1A82   E5                     PUSH   hl   
1A83   E5                     PUSH   hl   
1A84   CD A3 0F               CALL   run   
1A87   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A8E   CD 9C 0E               CALL   printStr   
1A91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A9E   E1                     POP   hl   
1A9F   E5                     PUSH   hl   
1AA0   E5                     PUSH   hl   
1AA1   CD A3 0F               CALL   run   
1AA4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AAF   76                     HALT      
1AB0                EXPECTM_3054S72:      
1AB0   E1                     POP   HL   
1AB1                          ;*Macro unroll:  test "3 5 &", 1
1AB1   31 00 4B               LD   SP,STACK   
1AB4   CD D0 0E               CALL   coldInit   
1AB7   CD 84 49               CALL   execStr   
1ABA   33 20 35 20 26 00      DB   "3 5 &",0   
1AC0   E1                     POP   HL   
1AC1   E5                     PUSH   HL   
1AC2   11 01 00               LD   DE,1   
1AC5   B7                     OR   A   
1AC6   ED 52                  SBC   HL,DE   
1AC8   7D                     LD   A,L   
1AC9   B4                     OR   H   
1ACA   CA 1F 1B               JP   Z,expectM_3055S73   
1ACD   CD 9C 0E               CALL   printStr   
1AD0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ADC   CD 9C 0E               CALL   printStr   
1ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AEE   21 01 00               LD   hl,1   
1AF1   E5                     PUSH   hl   
1AF2   E5                     PUSH   hl   
1AF3   CD A3 0F               CALL   run   
1AF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AFD   CD 9C 0E               CALL   printStr   
1B00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B0D   E1                     POP   hl   
1B0E   E5                     PUSH   hl   
1B0F   E5                     PUSH   hl   
1B10   CD A3 0F               CALL   run   
1B13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B1E   76                     HALT      
1B1F                EXPECTM_3055S73:      
1B1F   E1                     POP   HL   
1B20                          ;*Macro unroll:  test "3 5 |", 7
1B20   31 00 4B               LD   SP,STACK   
1B23   CD D0 0E               CALL   coldInit   
1B26   CD 84 49               CALL   execStr   
1B29   33 20 35 20 7C 00      DB   "3 5 |",0   
1B2F   E1                     POP   HL   
1B30   E5                     PUSH   HL   
1B31   11 07 00               LD   DE,7   
1B34   B7                     OR   A   
1B35   ED 52                  SBC   HL,DE   
1B37   7D                     LD   A,L   
1B38   B4                     OR   H   
1B39   CA 8E 1B               JP   Z,expectM_3056S74   
1B3C   CD 9C 0E               CALL   printStr   
1B3F   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B4B   CD 9C 0E               CALL   printStr   
1B4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5D   21 07 00               LD   hl,7   
1B60   E5                     PUSH   hl   
1B61   E5                     PUSH   hl   
1B62   CD A3 0F               CALL   run   
1B65   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B6C   CD 9C 0E               CALL   printStr   
1B6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B7C   E1                     POP   hl   
1B7D   E5                     PUSH   hl   
1B7E   E5                     PUSH   hl   
1B7F   CD A3 0F               CALL   run   
1B82   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B8D   76                     HALT      
1B8E                EXPECTM_3056S74:      
1B8E   E1                     POP   HL   
1B8F                          ;*Macro unroll:  test "3 5 /x", 6
1B8F   31 00 4B               LD   SP,STACK   
1B92   CD D0 0E               CALL   coldInit   
1B95   CD 84 49               CALL   execStr   
1B98   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B9F   E1                     POP   HL   
1BA0   E5                     PUSH   HL   
1BA1   11 06 00               LD   DE,6   
1BA4   B7                     OR   A   
1BA5   ED 52                  SBC   HL,DE   
1BA7   7D                     LD   A,L   
1BA8   B4                     OR   H   
1BA9   CA FF 1B               JP   Z,expectM_3057S75   
1BAC   CD 9C 0E               CALL   printStr   
1BAF   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BBC   CD 9C 0E               CALL   printStr   
1BBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BCE   21 06 00               LD   hl,6   
1BD1   E5                     PUSH   hl   
1BD2   E5                     PUSH   hl   
1BD3   CD A3 0F               CALL   run   
1BD6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BDD   CD 9C 0E               CALL   printStr   
1BE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BED   E1                     POP   hl   
1BEE   E5                     PUSH   hl   
1BEF   E5                     PUSH   hl   
1BF0   CD A3 0F               CALL   run   
1BF3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BFE   76                     HALT      
1BFF                EXPECTM_3057S75:      
1BFF   E1                     POP   HL   
1C00                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C00   31 00 4B               LD   SP,STACK   
1C03   CD D0 0E               CALL   coldInit   
1C06   CD 84 49               CALL   execStr   
1C09   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C18   E1                     POP   HL   
1C19   E5                     PUSH   HL   
1C1A   11 06 00               LD   DE,6   
1C1D   B7                     OR   A   
1C1E   ED 52                  SBC   HL,DE   
1C20   7D                     LD   A,L   
1C21   B4                     OR   H   
1C22   CA 80 1C               JP   Z,expectM_3058S76   
1C25   CD 9C 0E               CALL   printStr   
1C28   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C3D   CD 9C 0E               CALL   printStr   
1C40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C4F   21 06 00               LD   hl,6   
1C52   E5                     PUSH   hl   
1C53   E5                     PUSH   hl   
1C54   CD A3 0F               CALL   run   
1C57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C5E   CD 9C 0E               CALL   printStr   
1C61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C6E   E1                     POP   hl   
1C6F   E5                     PUSH   hl   
1C70   E5                     PUSH   hl   
1C71   CD A3 0F               CALL   run   
1C74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C7F   76                     HALT      
1C80                EXPECTM_3058S76:      
1C80   E1                     POP   HL   
1C81                          ;*Macro unroll:  test "2 3 *", 6
1C81   31 00 4B               LD   SP,STACK   
1C84   CD D0 0E               CALL   coldInit   
1C87   CD 84 49               CALL   execStr   
1C8A   32 20 33 20 2A 00      DB   "2 3 *",0   
1C90   E1                     POP   HL   
1C91   E5                     PUSH   HL   
1C92   11 06 00               LD   DE,6   
1C95   B7                     OR   A   
1C96   ED 52                  SBC   HL,DE   
1C98   7D                     LD   A,L   
1C99   B4                     OR   H   
1C9A   CA EF 1C               JP   Z,expectM_3059S77   
1C9D   CD 9C 0E               CALL   printStr   
1CA0   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CAC   CD 9C 0E               CALL   printStr   
1CAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CBE   21 06 00               LD   hl,6   
1CC1   E5                     PUSH   hl   
1CC2   E5                     PUSH   hl   
1CC3   CD A3 0F               CALL   run   
1CC6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CCD   CD 9C 0E               CALL   printStr   
1CD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CDD   E1                     POP   hl   
1CDE   E5                     PUSH   hl   
1CDF   E5                     PUSH   hl   
1CE0   CD A3 0F               CALL   run   
1CE3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CEE   76                     HALT      
1CEF                EXPECTM_3059S77:      
1CEF   E1                     POP   HL   
1CF0                          ;*Macro unroll:  test "1 2 3 + *", 5
1CF0   31 00 4B               LD   SP,STACK   
1CF3   CD D0 0E               CALL   coldInit   
1CF6   CD 84 49               CALL   execStr   
1CF9   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D03   E1                     POP   HL   
1D04   E5                     PUSH   HL   
1D05   11 05 00               LD   DE,5   
1D08   B7                     OR   A   
1D09   ED 52                  SBC   HL,DE   
1D0B   7D                     LD   A,L   
1D0C   B4                     OR   H   
1D0D   CA 66 1D               JP   Z,expectM_3060S78   
1D10   CD 9C 0E               CALL   printStr   
1D13   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D23   CD 9C 0E               CALL   printStr   
1D26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D35   21 05 00               LD   hl,5   
1D38   E5                     PUSH   hl   
1D39   E5                     PUSH   hl   
1D3A   CD A3 0F               CALL   run   
1D3D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D44   CD 9C 0E               CALL   printStr   
1D47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D54   E1                     POP   hl   
1D55   E5                     PUSH   hl   
1D56   E5                     PUSH   hl   
1D57   CD A3 0F               CALL   run   
1D5A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D65   76                     HALT      
1D66                EXPECTM_3060S78:      
1D66   E1                     POP   HL   
1D67                          ;*Macro unroll:  test "7 3 /", 2
1D67   31 00 4B               LD   SP,STACK   
1D6A   CD D0 0E               CALL   coldInit   
1D6D   CD 84 49               CALL   execStr   
1D70   37 20 33 20 2F 00      DB   "7 3 /",0   
1D76   E1                     POP   HL   
1D77   E5                     PUSH   HL   
1D78   11 02 00               LD   DE,2   
1D7B   B7                     OR   A   
1D7C   ED 52                  SBC   HL,DE   
1D7E   7D                     LD   A,L   
1D7F   B4                     OR   H   
1D80   CA D5 1D               JP   Z,expectM_3061S79   
1D83   CD 9C 0E               CALL   printStr   
1D86   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D92   CD 9C 0E               CALL   printStr   
1D95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DA4   21 02 00               LD   hl,2   
1DA7   E5                     PUSH   hl   
1DA8   E5                     PUSH   hl   
1DA9   CD A3 0F               CALL   run   
1DAC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DB3   CD 9C 0E               CALL   printStr   
1DB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC3   E1                     POP   hl   
1DC4   E5                     PUSH   hl   
1DC5   E5                     PUSH   hl   
1DC6   CD A3 0F               CALL   run   
1DC9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DD4   76                     HALT      
1DD5                EXPECTM_3061S79:      
1DD5   E1                     POP   HL   
1DD6                          ;*Macro unroll:  test "100a= 1a+= a", 101
1DD6   31 00 4B               LD   SP,STACK   
1DD9   CD D0 0E               CALL   coldInit   
1DDC   CD 84 49               CALL   execStr   
1DDF   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1DEC   E1                     POP   HL   
1DED   E5                     PUSH   HL   
1DEE   11 65 00               LD   DE,101   
1DF1   B7                     OR   A   
1DF2   ED 52                  SBC   HL,DE   
1DF4   7D                     LD   A,L   
1DF5   B4                     OR   H   
1DF6   CA 52 1E               JP   Z,expectM_3062S80   
1DF9   CD 9C 0E               CALL   printStr   
1DFC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1E0F   CD 9C 0E               CALL   printStr   
1E12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E21   21 65 00               LD   hl,101   
1E24   E5                     PUSH   hl   
1E25   E5                     PUSH   hl   
1E26   CD A3 0F               CALL   run   
1E29   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E30   CD 9C 0E               CALL   printStr   
1E33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E40   E1                     POP   hl   
1E41   E5                     PUSH   hl   
1E42   E5                     PUSH   hl   
1E43   CD A3 0F               CALL   run   
1E46   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E51   76                     HALT      
1E52                EXPECTM_3062S80:      
1E52   E1                     POP   HL   
1E53                          ;*Macro unroll:  test "100a= a1-= a", 99
1E53   31 00 4B               LD   SP,STACK   
1E56   CD D0 0E               CALL   coldInit   
1E59   CD 84 49               CALL   execStr   
1E5C   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1E69   E1                     POP   HL   
1E6A   E5                     PUSH   HL   
1E6B   11 63 00               LD   DE,99   
1E6E   B7                     OR   A   
1E6F   ED 52                  SBC   HL,DE   
1E71   7D                     LD   A,L   
1E72   B4                     OR   H   
1E73   CA CF 1E               JP   Z,expectM_3063S81   
1E76   CD 9C 0E               CALL   printStr   
1E79   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1E8C   CD 9C 0E               CALL   printStr   
1E8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E9E   21 63 00               LD   hl,99   
1EA1   E5                     PUSH   hl   
1EA2   E5                     PUSH   hl   
1EA3   CD A3 0F               CALL   run   
1EA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EAD   CD 9C 0E               CALL   printStr   
1EB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EBD   E1                     POP   hl   
1EBE   E5                     PUSH   hl   
1EBF   E5                     PUSH   hl   
1EC0   CD A3 0F               CALL   run   
1EC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1ECE   76                     HALT      
1ECF                EXPECTM_3063S81:      
1ECF   E1                     POP   HL   
1ED0                          ;*Macro unroll:  test "100a= a2*= a", 200
1ED0   31 00 4B               LD   SP,STACK   
1ED3   CD D0 0E               CALL   coldInit   
1ED6   CD 84 49               CALL   execStr   
1ED9   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
1EE6   E1                     POP   HL   
1EE7   E5                     PUSH   HL   
1EE8   11 C8 00               LD   DE,200   
1EEB   B7                     OR   A   
1EEC   ED 52                  SBC   HL,DE   
1EEE   7D                     LD   A,L   
1EEF   B4                     OR   H   
1EF0   CA 4C 1F               JP   Z,expectM_3064S82   
1EF3   CD 9C 0E               CALL   printStr   
1EF6   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
1F09   CD 9C 0E               CALL   printStr   
1F0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1B   21 C8 00               LD   hl,200   
1F1E   E5                     PUSH   hl   
1F1F   E5                     PUSH   hl   
1F20   CD A3 0F               CALL   run   
1F23   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F2A   CD 9C 0E               CALL   printStr   
1F2D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F3A   E1                     POP   hl   
1F3B   E5                     PUSH   hl   
1F3C   E5                     PUSH   hl   
1F3D   CD A3 0F               CALL   run   
1F40   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F4B   76                     HALT      
1F4C                EXPECTM_3064S82:      
1F4C   E1                     POP   HL   
1F4D                          ;*Macro unroll:  test "100a= a2/= a", 50
1F4D   31 00 4B               LD   SP,STACK   
1F50   CD D0 0E               CALL   coldInit   
1F53   CD 84 49               CALL   execStr   
1F56   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
1F63   E1                     POP   HL   
1F64   E5                     PUSH   HL   
1F65   11 32 00               LD   DE,50   
1F68   B7                     OR   A   
1F69   ED 52                  SBC   HL,DE   
1F6B   7D                     LD   A,L   
1F6C   B4                     OR   H   
1F6D   CA C9 1F               JP   Z,expectM_3065S83   
1F70   CD 9C 0E               CALL   printStr   
1F73   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
1F86   CD 9C 0E               CALL   printStr   
1F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F98   21 32 00               LD   hl,50   
1F9B   E5                     PUSH   hl   
1F9C   E5                     PUSH   hl   
1F9D   CD A3 0F               CALL   run   
1FA0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FA7   CD 9C 0E               CALL   printStr   
1FAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FB7   E1                     POP   hl   
1FB8   E5                     PUSH   hl   
1FB9   E5                     PUSH   hl   
1FBA   CD A3 0F               CALL   run   
1FBD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FC8   76                     HALT      
1FC9                EXPECTM_3065S83:      
1FC9   E1                     POP   HL   
1FCA                          ;*Macro unroll:  test "$55a= $AAa&= a",0
1FCA   31 00 4B               LD   SP,STACK   
1FCD   CD D0 0E               CALL   coldInit   
1FD0   CD 84 49               CALL   execStr   
1FD3   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
1FE2   E1                     POP   HL   
1FE3   E5                     PUSH   HL   
1FE4   11 00 00               LD   DE,0   
1FE7   B7                     OR   A   
1FE8   ED 52                  SBC   HL,DE   
1FEA   7D                     LD   A,L   
1FEB   B4                     OR   H   
1FEC   CA 4A 20               JP   Z,expectM_3066S84   
1FEF   CD 9C 0E               CALL   printStr   
1FF2   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2007   CD 9C 0E               CALL   printStr   
200A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2019   21 00 00               LD   hl,0   
201C   E5                     PUSH   hl   
201D   E5                     PUSH   hl   
201E   CD A3 0F               CALL   run   
2021   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2028   CD 9C 0E               CALL   printStr   
202B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2038   E1                     POP   hl   
2039   E5                     PUSH   hl   
203A   E5                     PUSH   hl   
203B   CD A3 0F               CALL   run   
203E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2049   76                     HALT      
204A                EXPECTM_3066S84:      
204A   E1                     POP   HL   
204B                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
204B   31 00 4B               LD   SP,STACK   
204E   CD D0 0E               CALL   coldInit   
2051   CD 84 49               CALL   execStr   
2054   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2063   E1                     POP   HL   
2064   E5                     PUSH   HL   
2065   11 FF 00               LD   DE,$FF   
2068   B7                     OR   A   
2069   ED 52                  SBC   HL,DE   
206B   7D                     LD   A,L   
206C   B4                     OR   H   
206D   CA CB 20               JP   Z,expectM_3067S85   
2070   CD 9C 0E               CALL   printStr   
2073   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2088   CD 9C 0E               CALL   printStr   
208B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
209A   21 FF 00               LD   hl,$FF   
209D   E5                     PUSH   hl   
209E   E5                     PUSH   hl   
209F   CD A3 0F               CALL   run   
20A2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20A9   CD 9C 0E               CALL   printStr   
20AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20B9   E1                     POP   hl   
20BA   E5                     PUSH   hl   
20BB   E5                     PUSH   hl   
20BC   CD A3 0F               CALL   run   
20BF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20CA   76                     HALT      
20CB                EXPECTM_3067S85:      
20CB   E1                     POP   HL   
20CC                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
20CC   31 00 4B               LD   SP,STACK   
20CF   CD D0 0E               CALL   coldInit   
20D2   CD 84 49               CALL   execStr   
20D5   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
20E6   E1                     POP   HL   
20E7   E5                     PUSH   HL   
20E8   11 0F 00               LD   DE,$0F   
20EB   B7                     OR   A   
20EC   ED 52                  SBC   HL,DE   
20EE   7D                     LD   A,L   
20EF   B4                     OR   H   
20F0   CA 50 21               JP   Z,expectM_3068S86   
20F3   CD 9C 0E               CALL   printStr   
20F6   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
210D   CD 9C 0E               CALL   printStr   
2110   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
211F   21 0F 00               LD   hl,$0F   
2122   E5                     PUSH   hl   
2123   E5                     PUSH   hl   
2124   CD A3 0F               CALL   run   
2127   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
212E   CD 9C 0E               CALL   printStr   
2131   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
213E   E1                     POP   hl   
213F   E5                     PUSH   hl   
2140   E5                     PUSH   hl   
2141   CD A3 0F               CALL   run   
2144   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
214F   76                     HALT      
2150                EXPECTM_3068S86:      
2150   E1                     POP   HL   
2151                          ;*Macro unroll:  test "$00AA~",$FF55
2151   31 00 4B               LD   SP,STACK   
2154   CD D0 0E               CALL   coldInit   
2157   CD 84 49               CALL   execStr   
215A   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2161   E1                     POP   HL   
2162   E5                     PUSH   HL   
2163   11 55 FF               LD   DE,$FF55   
2166   B7                     OR   A   
2167   ED 52                  SBC   HL,DE   
2169   7D                     LD   A,L   
216A   B4                     OR   H   
216B   CA C1 21               JP   Z,expectM_3069S87   
216E   CD 9C 0E               CALL   printStr   
2171   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
217E   CD 9C 0E               CALL   printStr   
2181   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2190   21 55 FF               LD   hl,$FF55   
2193   E5                     PUSH   hl   
2194   E5                     PUSH   hl   
2195   CD A3 0F               CALL   run   
2198   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
219F   CD 9C 0E               CALL   printStr   
21A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AF   E1                     POP   hl   
21B0   E5                     PUSH   hl   
21B1   E5                     PUSH   hl   
21B2   CD A3 0F               CALL   run   
21B5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21C0   76                     HALT      
21C1                EXPECTM_3069S87:      
21C1   E1                     POP   HL   
21C2                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
21C2   31 00 4B               LD   SP,STACK   
21C5   CD D0 0E               CALL   coldInit   
21C8   CD 84 49               CALL   execStr   
21CB   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
21D9   E1                     POP   HL   
21DA   E5                     PUSH   HL   
21DB   11 55 55               LD   DE,$5555   
21DE   B7                     OR   A   
21DF   ED 52                  SBC   HL,DE   
21E1   7D                     LD   A,L   
21E2   B4                     OR   H   
21E3   CA 40 22               JP   Z,expectM_3070S88   
21E6   CD 9C 0E               CALL   printStr   
21E9   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
21FD   CD 9C 0E               CALL   printStr   
2200   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
220F   21 55 55               LD   hl,$5555   
2212   E5                     PUSH   hl   
2213   E5                     PUSH   hl   
2214   CD A3 0F               CALL   run   
2217   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
221E   CD 9C 0E               CALL   printStr   
2221   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
222E   E1                     POP   hl   
222F   E5                     PUSH   hl   
2230   E5                     PUSH   hl   
2231   CD A3 0F               CALL   run   
2234   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
223F   76                     HALT      
2240                EXPECTM_3070S88:      
2240   E1                     POP   HL   
2241                          ;*Macro unroll:  test "7 3 / /re", 1
2241   31 00 4B               LD   SP,STACK   
2244   CD D0 0E               CALL   coldInit   
2247   CD 84 49               CALL   execStr   
224A   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2254   E1                     POP   HL   
2255   E5                     PUSH   HL   
2256   11 01 00               LD   DE,1   
2259   B7                     OR   A   
225A   ED 52                  SBC   HL,DE   
225C   7D                     LD   A,L   
225D   B4                     OR   H   
225E   CA B7 22               JP   Z,expectM_3071S89   
2261   CD 9C 0E               CALL   printStr   
2264   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2274   CD 9C 0E               CALL   printStr   
2277   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2286   21 01 00               LD   hl,1   
2289   E5                     PUSH   hl   
228A   E5                     PUSH   hl   
228B   CD A3 0F               CALL   run   
228E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2295   CD 9C 0E               CALL   printStr   
2298   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A5   E1                     POP   hl   
22A6   E5                     PUSH   hl   
22A7   E5                     PUSH   hl   
22A8   CD A3 0F               CALL   run   
22AB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22B6   76                     HALT      
22B7                EXPECTM_3071S89:      
22B7   E1                     POP   HL   
22B8                          ;*Macro unroll:  test "7 3 /", 2
22B8   31 00 4B               LD   SP,STACK   
22BB   CD D0 0E               CALL   coldInit   
22BE   CD 84 49               CALL   execStr   
22C1   37 20 33 20 2F 00      DB   "7 3 /",0   
22C7   E1                     POP   HL   
22C8   E5                     PUSH   HL   
22C9   11 02 00               LD   DE,2   
22CC   B7                     OR   A   
22CD   ED 52                  SBC   HL,DE   
22CF   7D                     LD   A,L   
22D0   B4                     OR   H   
22D1   CA 26 23               JP   Z,expectM_3072S90   
22D4   CD 9C 0E               CALL   printStr   
22D7   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22E3   CD 9C 0E               CALL   printStr   
22E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22F5   21 02 00               LD   hl,2   
22F8   E5                     PUSH   hl   
22F9   E5                     PUSH   hl   
22FA   CD A3 0F               CALL   run   
22FD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2304   CD 9C 0E               CALL   printStr   
2307   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2314   E1                     POP   hl   
2315   E5                     PUSH   hl   
2316   E5                     PUSH   hl   
2317   CD A3 0F               CALL   run   
231A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2325   76                     HALT      
2326                EXPECTM_3072S90:      
2326   E1                     POP   HL   
2327                          ;*Macro unroll:  test "2 3 ==", FALSE
2327   31 00 4B               LD   SP,STACK   
232A   CD D0 0E               CALL   coldInit   
232D   CD 84 49               CALL   execStr   
2330   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2337   E1                     POP   HL   
2338   E5                     PUSH   HL   
2339   11 00 00               LD   DE,FALSE   
233C   B7                     OR   A   
233D   ED 52                  SBC   HL,DE   
233F   7D                     LD   A,L   
2340   B4                     OR   H   
2341   CA 97 23               JP   Z,expectM_3073S91   
2344   CD 9C 0E               CALL   printStr   
2347   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2354   CD 9C 0E               CALL   printStr   
2357   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2366   21 00 00               LD   hl,FALSE   
2369   E5                     PUSH   hl   
236A   E5                     PUSH   hl   
236B   CD A3 0F               CALL   run   
236E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2375   CD 9C 0E               CALL   printStr   
2378   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2385   E1                     POP   hl   
2386   E5                     PUSH   hl   
2387   E5                     PUSH   hl   
2388   CD A3 0F               CALL   run   
238B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2396   76                     HALT      
2397                EXPECTM_3073S91:      
2397   E1                     POP   HL   
2398                          ;*Macro unroll:  test "3 3 ==", TRUE
2398   31 00 4B               LD   SP,STACK   
239B   CD D0 0E               CALL   coldInit   
239E   CD 84 49               CALL   execStr   
23A1   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23A8   E1                     POP   HL   
23A9   E5                     PUSH   HL   
23AA   11 FF FF               LD   DE,TRUE   
23AD   B7                     OR   A   
23AE   ED 52                  SBC   HL,DE   
23B0   7D                     LD   A,L   
23B1   B4                     OR   H   
23B2   CA 08 24               JP   Z,expectM_3074S92   
23B5   CD 9C 0E               CALL   printStr   
23B8   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23C5   CD 9C 0E               CALL   printStr   
23C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D7   21 FF FF               LD   hl,TRUE   
23DA   E5                     PUSH   hl   
23DB   E5                     PUSH   hl   
23DC   CD A3 0F               CALL   run   
23DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23E6   CD 9C 0E               CALL   printStr   
23E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F6   E1                     POP   hl   
23F7   E5                     PUSH   hl   
23F8   E5                     PUSH   hl   
23F9   CD A3 0F               CALL   run   
23FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2407   76                     HALT      
2408                EXPECTM_3074S92:      
2408   E1                     POP   HL   
2409                          ;*Macro unroll:  test "1 2 <", TRUE
2409   31 00 4B               LD   SP,STACK   
240C   CD D0 0E               CALL   coldInit   
240F   CD 84 49               CALL   execStr   
2412   31 20 32 20 3C 00      DB   "1 2 <",0   
2418   E1                     POP   HL   
2419   E5                     PUSH   HL   
241A   11 FF FF               LD   DE,TRUE   
241D   B7                     OR   A   
241E   ED 52                  SBC   HL,DE   
2420   7D                     LD   A,L   
2421   B4                     OR   H   
2422   CA 77 24               JP   Z,expectM_3075S93   
2425   CD 9C 0E               CALL   printStr   
2428   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2434   CD 9C 0E               CALL   printStr   
2437   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2446   21 FF FF               LD   hl,TRUE   
2449   E5                     PUSH   hl   
244A   E5                     PUSH   hl   
244B   CD A3 0F               CALL   run   
244E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2455   CD 9C 0E               CALL   printStr   
2458   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2465   E1                     POP   hl   
2466   E5                     PUSH   hl   
2467   E5                     PUSH   hl   
2468   CD A3 0F               CALL   run   
246B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2476   76                     HALT      
2477                EXPECTM_3075S93:      
2477   E1                     POP   HL   
2478                          ;*Macro unroll:  test "2 1 <", FALSE
2478   31 00 4B               LD   SP,STACK   
247B   CD D0 0E               CALL   coldInit   
247E   CD 84 49               CALL   execStr   
2481   32 20 31 20 3C 00      DB   "2 1 <",0   
2487   E1                     POP   HL   
2488   E5                     PUSH   HL   
2489   11 00 00               LD   DE,FALSE   
248C   B7                     OR   A   
248D   ED 52                  SBC   HL,DE   
248F   7D                     LD   A,L   
2490   B4                     OR   H   
2491   CA E6 24               JP   Z,expectM_3076S94   
2494   CD 9C 0E               CALL   printStr   
2497   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24A3   CD 9C 0E               CALL   printStr   
24A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24B5   21 00 00               LD   hl,FALSE   
24B8   E5                     PUSH   hl   
24B9   E5                     PUSH   hl   
24BA   CD A3 0F               CALL   run   
24BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24C4   CD 9C 0E               CALL   printStr   
24C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D4   E1                     POP   hl   
24D5   E5                     PUSH   hl   
24D6   E5                     PUSH   hl   
24D7   CD A3 0F               CALL   run   
24DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24E5   76                     HALT      
24E6                EXPECTM_3076S94:      
24E6   E1                     POP   HL   
24E7                          ;*Macro unroll:  test "2 3 <", TRUE
24E7   31 00 4B               LD   SP,STACK   
24EA   CD D0 0E               CALL   coldInit   
24ED   CD 84 49               CALL   execStr   
24F0   32 20 33 20 3C 00      DB   "2 3 <",0   
24F6   E1                     POP   HL   
24F7   E5                     PUSH   HL   
24F8   11 FF FF               LD   DE,TRUE   
24FB   B7                     OR   A   
24FC   ED 52                  SBC   HL,DE   
24FE   7D                     LD   A,L   
24FF   B4                     OR   H   
2500   CA 55 25               JP   Z,expectM_3077S95   
2503   CD 9C 0E               CALL   printStr   
2506   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2512   CD 9C 0E               CALL   printStr   
2515   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2524   21 FF FF               LD   hl,TRUE   
2527   E5                     PUSH   hl   
2528   E5                     PUSH   hl   
2529   CD A3 0F               CALL   run   
252C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2533   CD 9C 0E               CALL   printStr   
2536   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2543   E1                     POP   hl   
2544   E5                     PUSH   hl   
2545   E5                     PUSH   hl   
2546   CD A3 0F               CALL   run   
2549   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2554   76                     HALT      
2555                EXPECTM_3077S95:      
2555   E1                     POP   HL   
2556                          ;*Macro unroll:  test "3 3 <", FALSE
2556   31 00 4B               LD   SP,STACK   
2559   CD D0 0E               CALL   coldInit   
255C   CD 84 49               CALL   execStr   
255F   33 20 33 20 3C 00      DB   "3 3 <",0   
2565   E1                     POP   HL   
2566   E5                     PUSH   HL   
2567   11 00 00               LD   DE,FALSE   
256A   B7                     OR   A   
256B   ED 52                  SBC   HL,DE   
256D   7D                     LD   A,L   
256E   B4                     OR   H   
256F   CA C4 25               JP   Z,expectM_3078S96   
2572   CD 9C 0E               CALL   printStr   
2575   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2581   CD 9C 0E               CALL   printStr   
2584   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2593   21 00 00               LD   hl,FALSE   
2596   E5                     PUSH   hl   
2597   E5                     PUSH   hl   
2598   CD A3 0F               CALL   run   
259B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25A2   CD 9C 0E               CALL   printStr   
25A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25B2   E1                     POP   hl   
25B3   E5                     PUSH   hl   
25B4   E5                     PUSH   hl   
25B5   CD A3 0F               CALL   run   
25B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25C3   76                     HALT      
25C4                EXPECTM_3078S96:      
25C4   E1                     POP   HL   
25C5                          ;*Macro unroll:  test "1 2 >", FALSE
25C5   31 00 4B               LD   SP,STACK   
25C8   CD D0 0E               CALL   coldInit   
25CB   CD 84 49               CALL   execStr   
25CE   31 20 32 20 3E 00      DB   "1 2 >",0   
25D4   E1                     POP   HL   
25D5   E5                     PUSH   HL   
25D6   11 00 00               LD   DE,FALSE   
25D9   B7                     OR   A   
25DA   ED 52                  SBC   HL,DE   
25DC   7D                     LD   A,L   
25DD   B4                     OR   H   
25DE   CA 33 26               JP   Z,expectM_3079S97   
25E1   CD 9C 0E               CALL   printStr   
25E4   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
25F0   CD 9C 0E               CALL   printStr   
25F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2602   21 00 00               LD   hl,FALSE   
2605   E5                     PUSH   hl   
2606   E5                     PUSH   hl   
2607   CD A3 0F               CALL   run   
260A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2611   CD 9C 0E               CALL   printStr   
2614   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2621   E1                     POP   hl   
2622   E5                     PUSH   hl   
2623   E5                     PUSH   hl   
2624   CD A3 0F               CALL   run   
2627   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2632   76                     HALT      
2633                EXPECTM_3079S97:      
2633   E1                     POP   HL   
2634                          ;*Macro unroll:  test "2 1 >", TRUE
2634   31 00 4B               LD   SP,STACK   
2637   CD D0 0E               CALL   coldInit   
263A   CD 84 49               CALL   execStr   
263D   32 20 31 20 3E 00      DB   "2 1 >",0   
2643   E1                     POP   HL   
2644   E5                     PUSH   HL   
2645   11 FF FF               LD   DE,TRUE   
2648   B7                     OR   A   
2649   ED 52                  SBC   HL,DE   
264B   7D                     LD   A,L   
264C   B4                     OR   H   
264D   CA A2 26               JP   Z,expectM_3080S98   
2650   CD 9C 0E               CALL   printStr   
2653   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
265F   CD 9C 0E               CALL   printStr   
2662   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2671   21 FF FF               LD   hl,TRUE   
2674   E5                     PUSH   hl   
2675   E5                     PUSH   hl   
2676   CD A3 0F               CALL   run   
2679   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2680   CD 9C 0E               CALL   printStr   
2683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2690   E1                     POP   hl   
2691   E5                     PUSH   hl   
2692   E5                     PUSH   hl   
2693   CD A3 0F               CALL   run   
2696   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
26A1   76                     HALT      
26A2                EXPECTM_3080S98:      
26A2   E1                     POP   HL   
26A3                          ;*Macro unroll:  test "3 3 >", FALSE
26A3   31 00 4B               LD   SP,STACK   
26A6   CD D0 0E               CALL   coldInit   
26A9   CD 84 49               CALL   execStr   
26AC   33 20 33 20 3E 00      DB   "3 3 >",0   
26B2   E1                     POP   HL   
26B3   E5                     PUSH   HL   
26B4   11 00 00               LD   DE,FALSE   
26B7   B7                     OR   A   
26B8   ED 52                  SBC   HL,DE   
26BA   7D                     LD   A,L   
26BB   B4                     OR   H   
26BC   CA 11 27               JP   Z,expectM_3081S99   
26BF   CD 9C 0E               CALL   printStr   
26C2   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
26CE   CD 9C 0E               CALL   printStr   
26D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E0   21 00 00               LD   hl,FALSE   
26E3   E5                     PUSH   hl   
26E4   E5                     PUSH   hl   
26E5   CD A3 0F               CALL   run   
26E8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26EF   CD 9C 0E               CALL   printStr   
26F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26FF   E1                     POP   hl   
2700   E5                     PUSH   hl   
2701   E5                     PUSH   hl   
2702   CD A3 0F               CALL   run   
2705   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2710   76                     HALT      
2711                EXPECTM_3081S99:      
2711   E1                     POP   HL   
2712                          ;*Macro unroll:  test "4 3 >", TRUE
2712   31 00 4B               LD   SP,STACK   
2715   CD D0 0E               CALL   coldInit   
2718   CD 84 49               CALL   execStr   
271B   34 20 33 20 3E 00      DB   "4 3 >",0   
2721   E1                     POP   HL   
2722   E5                     PUSH   HL   
2723   11 FF FF               LD   DE,TRUE   
2726   B7                     OR   A   
2727   ED 52                  SBC   HL,DE   
2729   7D                     LD   A,L   
272A   B4                     OR   H   
272B   CA 80 27               JP   Z,expectM_3082S100   
272E   CD 9C 0E               CALL   printStr   
2731   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
273D   CD 9C 0E               CALL   printStr   
2740   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
274F   21 FF FF               LD   hl,TRUE   
2752   E5                     PUSH   hl   
2753   E5                     PUSH   hl   
2754   CD A3 0F               CALL   run   
2757   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
275E   CD 9C 0E               CALL   printStr   
2761   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
276E   E1                     POP   hl   
276F   E5                     PUSH   hl   
2770   E5                     PUSH   hl   
2771   CD A3 0F               CALL   run   
2774   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
277F   76                     HALT      
2780                EXPECTM_3082S100:      
2780   E1                     POP   HL   
2781                          ;*Macro unroll:  test "2 2 <=", TRUE
2781   31 00 4B               LD   SP,STACK   
2784   CD D0 0E               CALL   coldInit   
2787   CD 84 49               CALL   execStr   
278A   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2791   E1                     POP   HL   
2792   E5                     PUSH   HL   
2793   11 FF FF               LD   DE,TRUE   
2796   B7                     OR   A   
2797   ED 52                  SBC   HL,DE   
2799   7D                     LD   A,L   
279A   B4                     OR   H   
279B   CA F1 27               JP   Z,expectM_3083S101   
279E   CD 9C 0E               CALL   printStr   
27A1   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
27AE   CD 9C 0E               CALL   printStr   
27B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C0   21 FF FF               LD   hl,TRUE   
27C3   E5                     PUSH   hl   
27C4   E5                     PUSH   hl   
27C5   CD A3 0F               CALL   run   
27C8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27CF   CD 9C 0E               CALL   printStr   
27D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DF   E1                     POP   hl   
27E0   E5                     PUSH   hl   
27E1   E5                     PUSH   hl   
27E2   CD A3 0F               CALL   run   
27E5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27F0   76                     HALT      
27F1                EXPECTM_3083S101:      
27F1   E1                     POP   HL   
27F2                          ;*Macro unroll:  test "2 2 >=", TRUE
27F2   31 00 4B               LD   SP,STACK   
27F5   CD D0 0E               CALL   coldInit   
27F8   CD 84 49               CALL   execStr   
27FB   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2802   E1                     POP   HL   
2803   E5                     PUSH   HL   
2804   11 FF FF               LD   DE,TRUE   
2807   B7                     OR   A   
2808   ED 52                  SBC   HL,DE   
280A   7D                     LD   A,L   
280B   B4                     OR   H   
280C   CA 62 28               JP   Z,expectM_3084S102   
280F   CD 9C 0E               CALL   printStr   
2812   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
281F   CD 9C 0E               CALL   printStr   
2822   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2831   21 FF FF               LD   hl,TRUE   
2834   E5                     PUSH   hl   
2835   E5                     PUSH   hl   
2836   CD A3 0F               CALL   run   
2839   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2840   CD 9C 0E               CALL   printStr   
2843   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2850   E1                     POP   hl   
2851   E5                     PUSH   hl   
2852   E5                     PUSH   hl   
2853   CD A3 0F               CALL   run   
2856   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2861   76                     HALT      
2862                EXPECTM_3084S102:      
2862   E1                     POP   HL   
2863                          ;*Macro unroll:  test "3 1 <<", 6
2863   31 00 4B               LD   SP,STACK   
2866   CD D0 0E               CALL   coldInit   
2869   CD 84 49               CALL   execStr   
286C   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2873   E1                     POP   HL   
2874   E5                     PUSH   HL   
2875   11 06 00               LD   DE,6   
2878   B7                     OR   A   
2879   ED 52                  SBC   HL,DE   
287B   7D                     LD   A,L   
287C   B4                     OR   H   
287D   CA D3 28               JP   Z,expectM_3085S103   
2880   CD 9C 0E               CALL   printStr   
2883   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2890   CD 9C 0E               CALL   printStr   
2893   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A2   21 06 00               LD   hl,6   
28A5   E5                     PUSH   hl   
28A6   E5                     PUSH   hl   
28A7   CD A3 0F               CALL   run   
28AA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28B1   CD 9C 0E               CALL   printStr   
28B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C1   E1                     POP   hl   
28C2   E5                     PUSH   hl   
28C3   E5                     PUSH   hl   
28C4   CD A3 0F               CALL   run   
28C7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28D2   76                     HALT      
28D3                EXPECTM_3085S103:      
28D3   E1                     POP   HL   
28D4                          ;*Macro unroll:  test "10 1 >>", 5
28D4   31 00 4B               LD   SP,STACK   
28D7   CD D0 0E               CALL   coldInit   
28DA   CD 84 49               CALL   execStr   
28DD   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
28E5   E1                     POP   HL   
28E6   E5                     PUSH   HL   
28E7   11 05 00               LD   DE,5   
28EA   B7                     OR   A   
28EB   ED 52                  SBC   HL,DE   
28ED   7D                     LD   A,L   
28EE   B4                     OR   H   
28EF   CA 46 29               JP   Z,expectM_3086S104   
28F2   CD 9C 0E               CALL   printStr   
28F5   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2903   CD 9C 0E               CALL   printStr   
2906   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2915   21 05 00               LD   hl,5   
2918   E5                     PUSH   hl   
2919   E5                     PUSH   hl   
291A   CD A3 0F               CALL   run   
291D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2924   CD 9C 0E               CALL   printStr   
2927   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2934   E1                     POP   hl   
2935   E5                     PUSH   hl   
2936   E5                     PUSH   hl   
2937   CD A3 0F               CALL   run   
293A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2945   76                     HALT      
2946                EXPECTM_3086S104:      
2946   E1                     POP   HL   
2947                          ;*Macro unroll:  test "1 x = x", 1
2947   31 00 4B               LD   SP,STACK   
294A   CD D0 0E               CALL   coldInit   
294D   CD 84 49               CALL   execStr   
2950   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2958   E1                     POP   HL   
2959   E5                     PUSH   HL   
295A   11 01 00               LD   DE,1   
295D   B7                     OR   A   
295E   ED 52                  SBC   HL,DE   
2960   7D                     LD   A,L   
2961   B4                     OR   H   
2962   CA B9 29               JP   Z,expectM_3087S105   
2965   CD 9C 0E               CALL   printStr   
2968   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2976   CD 9C 0E               CALL   printStr   
2979   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2988   21 01 00               LD   hl,1   
298B   E5                     PUSH   hl   
298C   E5                     PUSH   hl   
298D   CD A3 0F               CALL   run   
2990   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2997   CD 9C 0E               CALL   printStr   
299A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29A7   E1                     POP   hl   
29A8   E5                     PUSH   hl   
29A9   E5                     PUSH   hl   
29AA   CD A3 0F               CALL   run   
29AD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29B8   76                     HALT      
29B9                EXPECTM_3087S105:      
29B9   E1                     POP   HL   
29BA                          ;*Macro unroll:  test "1{}^", 1
29BA   31 00 4B               LD   SP,STACK   
29BD   CD D0 0E               CALL   coldInit   
29C0   CD 84 49               CALL   execStr   
29C3   31 7B 7D 5E 00         DB   "1{}^",0   
29C8   E1                     POP   HL   
29C9   E5                     PUSH   HL   
29CA   11 01 00               LD   DE,1   
29CD   B7                     OR   A   
29CE   ED 52                  SBC   HL,DE   
29D0   7D                     LD   A,L   
29D1   B4                     OR   H   
29D2   CA 26 2A               JP   Z,expectM_3088S106   
29D5   CD 9C 0E               CALL   printStr   
29D8   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
29E3   CD 9C 0E               CALL   printStr   
29E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F5   21 01 00               LD   hl,1   
29F8   E5                     PUSH   hl   
29F9   E5                     PUSH   hl   
29FA   CD A3 0F               CALL   run   
29FD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A04   CD 9C 0E               CALL   printStr   
2A07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A14   E1                     POP   hl   
2A15   E5                     PUSH   hl   
2A16   E5                     PUSH   hl   
2A17   CD A3 0F               CALL   run   
2A1A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A25   76                     HALT      
2A26                EXPECTM_3088S106:      
2A26   E1                     POP   HL   
2A27                          ;*Macro unroll:  test "{1}^", 1
2A27   31 00 4B               LD   SP,STACK   
2A2A   CD D0 0E               CALL   coldInit   
2A2D   CD 84 49               CALL   execStr   
2A30   7B 31 7D 5E 00         DB   "{1}^",0   
2A35   E1                     POP   HL   
2A36   E5                     PUSH   HL   
2A37   11 01 00               LD   DE,1   
2A3A   B7                     OR   A   
2A3B   ED 52                  SBC   HL,DE   
2A3D   7D                     LD   A,L   
2A3E   B4                     OR   H   
2A3F   CA 93 2A               JP   Z,expectM_3089S107   
2A42   CD 9C 0E               CALL   printStr   
2A45   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2A50   CD 9C 0E               CALL   printStr   
2A53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A62   21 01 00               LD   hl,1   
2A65   E5                     PUSH   hl   
2A66   E5                     PUSH   hl   
2A67   CD A3 0F               CALL   run   
2A6A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A71   CD 9C 0E               CALL   printStr   
2A74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A81   E1                     POP   hl   
2A82   E5                     PUSH   hl   
2A83   E5                     PUSH   hl   
2A84   CD A3 0F               CALL   run   
2A87   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A92   76                     HALT      
2A93                EXPECTM_3089S107:      
2A93   E1                     POP   HL   
2A94                          ;*Macro unroll:  test "{{1}^}^", 1
2A94   31 00 4B               LD   SP,STACK   
2A97   CD D0 0E               CALL   coldInit   
2A9A   CD 84 49               CALL   execStr   
2A9D   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2AA5   E1                     POP   HL   
2AA6   E5                     PUSH   HL   
2AA7   11 01 00               LD   DE,1   
2AAA   B7                     OR   A   
2AAB   ED 52                  SBC   HL,DE   
2AAD   7D                     LD   A,L   
2AAE   B4                     OR   H   
2AAF   CA 06 2B               JP   Z,expectM_3090S108   
2AB2   CD 9C 0E               CALL   printStr   
2AB5   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2AC3   CD 9C 0E               CALL   printStr   
2AC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD5   21 01 00               LD   hl,1   
2AD8   E5                     PUSH   hl   
2AD9   E5                     PUSH   hl   
2ADA   CD A3 0F               CALL   run   
2ADD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AE4   CD 9C 0E               CALL   printStr   
2AE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF4   E1                     POP   hl   
2AF5   E5                     PUSH   hl   
2AF6   E5                     PUSH   hl   
2AF7   CD A3 0F               CALL   run   
2AFA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B05   76                     HALT      
2B06                EXPECTM_3090S108:      
2B06   E1                     POP   HL   
2B07                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2B07   31 00 4B               LD   SP,STACK   
2B0A   CD D0 0E               CALL   coldInit   
2B0D   CD 84 49               CALL   execStr   
2B10   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2B1B   E1                     POP   HL   
2B1C   E5                     PUSH   HL   
2B1D   11 01 00               LD   DE,1   
2B20   B7                     OR   A   
2B21   ED 52                  SBC   HL,DE   
2B23   7D                     LD   A,L   
2B24   B4                     OR   H   
2B25   CA 7F 2B               JP   Z,expectM_3091S109   
2B28   CD 9C 0E               CALL   printStr   
2B2B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2B3C   CD 9C 0E               CALL   printStr   
2B3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B4E   21 01 00               LD   hl,1   
2B51   E5                     PUSH   hl   
2B52   E5                     PUSH   hl   
2B53   CD A3 0F               CALL   run   
2B56   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B5D   CD 9C 0E               CALL   printStr   
2B60   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B6D   E1                     POP   hl   
2B6E   E5                     PUSH   hl   
2B6F   E5                     PUSH   hl   
2B70   CD A3 0F               CALL   run   
2B73   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B7E   76                     HALT      
2B7F                EXPECTM_3091S109:      
2B7F   E1                     POP   HL   
2B80                          ;*Macro unroll:  test "5 /f{10} ?", 5
2B80   31 00 4B               LD   SP,STACK   
2B83   CD D0 0E               CALL   coldInit   
2B86   CD 84 49               CALL   execStr   
2B89   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2B94   E1                     POP   HL   
2B95   E5                     PUSH   HL   
2B96   11 05 00               LD   DE,5   
2B99   B7                     OR   A   
2B9A   ED 52                  SBC   HL,DE   
2B9C   7D                     LD   A,L   
2B9D   B4                     OR   H   
2B9E   CA F8 2B               JP   Z,expectM_3092S110   
2BA1   CD 9C 0E               CALL   printStr   
2BA4   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2BB5   CD 9C 0E               CALL   printStr   
2BB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BC7   21 05 00               LD   hl,5   
2BCA   E5                     PUSH   hl   
2BCB   E5                     PUSH   hl   
2BCC   CD A3 0F               CALL   run   
2BCF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BD6   CD 9C 0E               CALL   printStr   
2BD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BE6   E1                     POP   hl   
2BE7   E5                     PUSH   hl   
2BE8   E5                     PUSH   hl   
2BE9   CD A3 0F               CALL   run   
2BEC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BF7   76                     HALT      
2BF8                EXPECTM_3092S110:      
2BF8   E1                     POP   HL   
2BF9                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2BF9   31 00 4B               LD   SP,STACK   
2BFC   CD D0 0E               CALL   coldInit   
2BFF   CD 84 49               CALL   execStr   
2C02   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2C0F   E1                     POP   HL   
2C10   E5                     PUSH   HL   
2C11   11 0F 00               LD   DE,15   
2C14   B7                     OR   A   
2C15   ED 52                  SBC   HL,DE   
2C17   7D                     LD   A,L   
2C18   B4                     OR   H   
2C19   CA 75 2C               JP   Z,expectM_3093S111   
2C1C   CD 9C 0E               CALL   printStr   
2C1F   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2C32   CD 9C 0E               CALL   printStr   
2C35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C44   21 0F 00               LD   hl,15   
2C47   E5                     PUSH   hl   
2C48   E5                     PUSH   hl   
2C49   CD A3 0F               CALL   run   
2C4C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C53   CD 9C 0E               CALL   printStr   
2C56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C63   E1                     POP   hl   
2C64   E5                     PUSH   hl   
2C65   E5                     PUSH   hl   
2C66   CD A3 0F               CALL   run   
2C69   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C74   76                     HALT      
2C75                EXPECTM_3093S111:      
2C75   E1                     POP   HL   
2C76                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2C76   31 00 4B               LD   SP,STACK   
2C79   CD D0 0E               CALL   coldInit   
2C7C   CD 84 49               CALL   execStr   
2C7F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2C91   E1                     POP   HL   
2C92   E5                     PUSH   HL   
2C93   11 15 00               LD   DE,21   
2C96   B7                     OR   A   
2C97   ED 52                  SBC   HL,DE   
2C99   7D                     LD   A,L   
2C9A   B4                     OR   H   
2C9B   CA FC 2C               JP   Z,expectM_3094S112   
2C9E   CD 9C 0E               CALL   printStr   
2CA1   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2CB9   CD 9C 0E               CALL   printStr   
2CBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CCB   21 15 00               LD   hl,21   
2CCE   E5                     PUSH   hl   
2CCF   E5                     PUSH   hl   
2CD0   CD A3 0F               CALL   run   
2CD3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CDA   CD 9C 0E               CALL   printStr   
2CDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CEA   E1                     POP   hl   
2CEB   E5                     PUSH   hl   
2CEC   E5                     PUSH   hl   
2CED   CD A3 0F               CALL   run   
2CF0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CFB   76                     HALT      
2CFC                EXPECTM_3094S112:      
2CFC   E1                     POP   HL   
2CFD                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2CFD   31 00 4B               LD   SP,STACK   
2D00   CD D0 0E               CALL   coldInit   
2D03   CD 84 49               CALL   execStr   
2D06   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2D18   E1                     POP   HL   
2D19   E5                     PUSH   HL   
2D1A   11 0B 00               LD   DE,11   
2D1D   B7                     OR   A   
2D1E   ED 52                  SBC   HL,DE   
2D20   7D                     LD   A,L   
2D21   B4                     OR   H   
2D22   CA 83 2D               JP   Z,expectM_3095S113   
2D25   CD 9C 0E               CALL   printStr   
2D28   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2D40   CD 9C 0E               CALL   printStr   
2D43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D52   21 0B 00               LD   hl,11   
2D55   E5                     PUSH   hl   
2D56   E5                     PUSH   hl   
2D57   CD A3 0F               CALL   run   
2D5A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D61   CD 9C 0E               CALL   printStr   
2D64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D71   E1                     POP   hl   
2D72   E5                     PUSH   hl   
2D73   E5                     PUSH   hl   
2D74   CD A3 0F               CALL   run   
2D77   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D82   76                     HALT      
2D83                EXPECTM_3095S113:      
2D83   E1                     POP   HL   
2D84                          ;*Macro unroll:  test "\\{2}^", 2
2D84   31 00 4B               LD   SP,STACK   
2D87   CD D0 0E               CALL   coldInit   
2D8A   CD 84 49               CALL   execStr   
2D8D   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2D93   E1                     POP   HL   
2D94   E5                     PUSH   HL   
2D95   11 02 00               LD   DE,2   
2D98   B7                     OR   A   
2D99   ED 52                  SBC   HL,DE   
2D9B   7D                     LD   A,L   
2D9C   B4                     OR   H   
2D9D   CA F2 2D               JP   Z,expectM_3096S114   
2DA0   CD 9C 0E               CALL   printStr   
2DA3   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2DAF   CD 9C 0E               CALL   printStr   
2DB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC1   21 02 00               LD   hl,2   
2DC4   E5                     PUSH   hl   
2DC5   E5                     PUSH   hl   
2DC6   CD A3 0F               CALL   run   
2DC9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DD0   CD 9C 0E               CALL   printStr   
2DD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DE0   E1                     POP   hl   
2DE1   E5                     PUSH   hl   
2DE2   E5                     PUSH   hl   
2DE3   CD A3 0F               CALL   run   
2DE6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DF1   76                     HALT      
2DF2                EXPECTM_3096S114:      
2DF2   E1                     POP   HL   
2DF3                          ;*Macro unroll:  test "\\a{2}^", 2
2DF3   31 00 4B               LD   SP,STACK   
2DF6   CD D0 0E               CALL   coldInit   
2DF9   CD 84 49               CALL   execStr   
2DFC   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2E03   E1                     POP   HL   
2E04   E5                     PUSH   HL   
2E05   11 02 00               LD   DE,2   
2E08   B7                     OR   A   
2E09   ED 52                  SBC   HL,DE   
2E0B   7D                     LD   A,L   
2E0C   B4                     OR   H   
2E0D   CA 63 2E               JP   Z,expectM_3097S115   
2E10   CD 9C 0E               CALL   printStr   
2E13   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2E20   CD 9C 0E               CALL   printStr   
2E23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E32   21 02 00               LD   hl,2   
2E35   E5                     PUSH   hl   
2E36   E5                     PUSH   hl   
2E37   CD A3 0F               CALL   run   
2E3A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E41   CD 9C 0E               CALL   printStr   
2E44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E51   E1                     POP   hl   
2E52   E5                     PUSH   hl   
2E53   E5                     PUSH   hl   
2E54   CD A3 0F               CALL   run   
2E57   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E62   76                     HALT      
2E63                EXPECTM_3097S115:      
2E63   E1                     POP   HL   
2E64                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2E64   31 00 4B               LD   SP,STACK   
2E67   CD D0 0E               CALL   coldInit   
2E6A   CD 84 49               CALL   execStr   
2E6D   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2E77   E1                     POP   HL   
2E78   E5                     PUSH   HL   
2E79   11 05 00               LD   DE,5   
2E7C   B7                     OR   A   
2E7D   ED 52                  SBC   HL,DE   
2E7F   7D                     LD   A,L   
2E80   B4                     OR   H   
2E81   CA DA 2E               JP   Z,expectM_3098S116   
2E84   CD 9C 0E               CALL   printStr   
2E87   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2E97   CD 9C 0E               CALL   printStr   
2E9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EA9   21 05 00               LD   hl,5   
2EAC   E5                     PUSH   hl   
2EAD   E5                     PUSH   hl   
2EAE   CD A3 0F               CALL   run   
2EB1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EB8   CD 9C 0E               CALL   printStr   
2EBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EC8   E1                     POP   hl   
2EC9   E5                     PUSH   hl   
2ECA   E5                     PUSH   hl   
2ECB   CD A3 0F               CALL   run   
2ECE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2ED9   76                     HALT      
2EDA                EXPECTM_3098S116:      
2EDA   E1                     POP   HL   
2EDB                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2EDB   31 00 4B               LD   SP,STACK   
2EDE   CD D0 0E               CALL   coldInit   
2EE1   CD 84 49               CALL   execStr   
2EE4   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2EF0   E1                     POP   HL   
2EF1   E5                     PUSH   HL   
2EF2   11 05 00               LD   DE,5   
2EF5   B7                     OR   A   
2EF6   ED 52                  SBC   HL,DE   
2EF8   7D                     LD   A,L   
2EF9   B4                     OR   H   
2EFA   CA 55 2F               JP   Z,expectM_3099S117   
2EFD   CD 9C 0E               CALL   printStr   
2F00   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2F12   CD 9C 0E               CALL   printStr   
2F15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F24   21 05 00               LD   hl,5   
2F27   E5                     PUSH   hl   
2F28   E5                     PUSH   hl   
2F29   CD A3 0F               CALL   run   
2F2C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F33   CD 9C 0E               CALL   printStr   
2F36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F43   E1                     POP   hl   
2F44   E5                     PUSH   hl   
2F45   E5                     PUSH   hl   
2F46   CD A3 0F               CALL   run   
2F49   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F54   76                     HALT      
2F55                EXPECTM_3099S117:      
2F55   E1                     POP   HL   
2F56                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2F56   31 00 4B               LD   SP,STACK   
2F59   CD D0 0E               CALL   coldInit   
2F5C   CD 84 49               CALL   execStr   
2F5F   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2F69   E1                     POP   HL   
2F6A   E5                     PUSH   HL   
2F6B   11 02 00               LD   DE,2   
2F6E   B7                     OR   A   
2F6F   ED 52                  SBC   HL,DE   
2F71   7D                     LD   A,L   
2F72   B4                     OR   H   
2F73   CA CC 2F               JP   Z,expectM_3100S118   
2F76   CD 9C 0E               CALL   printStr   
2F79   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
2F89   CD 9C 0E               CALL   printStr   
2F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F9B   21 02 00               LD   hl,2   
2F9E   E5                     PUSH   hl   
2F9F   E5                     PUSH   hl   
2FA0   CD A3 0F               CALL   run   
2FA3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FAA   CD 9C 0E               CALL   printStr   
2FAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBA   E1                     POP   hl   
2FBB   E5                     PUSH   hl   
2FBC   E5                     PUSH   hl   
2FBD   CD A3 0F               CALL   run   
2FC0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FCB   76                     HALT      
2FCC                EXPECTM_3100S118:      
2FCC   E1                     POP   HL   
2FCD                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
2FCD   31 00 4B               LD   SP,STACK   
2FD0   CD D0 0E               CALL   coldInit   
2FD3   CD 84 49               CALL   execStr   
2FD6   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
2FE5   E1                     POP   HL   
2FE6   E5                     PUSH   HL   
2FE7   11 05 00               LD   DE,5   
2FEA   B7                     OR   A   
2FEB   ED 52                  SBC   HL,DE   
2FED   7D                     LD   A,L   
2FEE   B4                     OR   H   
2FEF   CA 4D 30               JP   Z,expectM_3101S119   
2FF2   CD 9C 0E               CALL   printStr   
2FF5   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
300A   CD 9C 0E               CALL   printStr   
300D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
301C   21 05 00               LD   hl,5   
301F   E5                     PUSH   hl   
3020   E5                     PUSH   hl   
3021   CD A3 0F               CALL   run   
3024   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
302B   CD 9C 0E               CALL   printStr   
302E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303B   E1                     POP   hl   
303C   E5                     PUSH   hl   
303D   E5                     PUSH   hl   
303E   CD A3 0F               CALL   run   
3041   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
304C   76                     HALT      
304D                EXPECTM_3101S119:      
304D   E1                     POP   HL   
304E                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
304E   31 00 4B               LD   SP,STACK   
3051   CD D0 0E               CALL   coldInit   
3054   CD 84 49               CALL   execStr   
3057   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3067   E1                     POP   HL   
3068   E5                     PUSH   HL   
3069   11 01 00               LD   DE,1   
306C   B7                     OR   A   
306D   ED 52                  SBC   HL,DE   
306F   7D                     LD   A,L   
3070   B4                     OR   H   
3071   CA D0 30               JP   Z,expectM_3102S120   
3074   CD 9C 0E               CALL   printStr   
3077   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
308D   CD 9C 0E               CALL   printStr   
3090   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
309F   21 01 00               LD   hl,1   
30A2   E5                     PUSH   hl   
30A3   E5                     PUSH   hl   
30A4   CD A3 0F               CALL   run   
30A7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30AE   CD 9C 0E               CALL   printStr   
30B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30BE   E1                     POP   hl   
30BF   E5                     PUSH   hl   
30C0   E5                     PUSH   hl   
30C1   CD A3 0F               CALL   run   
30C4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30CF   76                     HALT      
30D0                EXPECTM_3102S120:      
30D0   E1                     POP   HL   
30D1                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
30D1   31 00 4B               LD   SP,STACK   
30D4   CD D0 0E               CALL   coldInit   
30D7   CD 84 49               CALL   execStr   
30DA   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
30ED   E1                     POP   HL   
30EE   E5                     PUSH   HL   
30EF   11 07 00               LD   DE,7   
30F2   B7                     OR   A   
30F3   ED 52                  SBC   HL,DE   
30F5   7D                     LD   A,L   
30F6   B4                     OR   H   
30F7   CA 59 31               JP   Z,expectM_3103S121   
30FA   CD 9C 0E               CALL   printStr   
30FD   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3116   CD 9C 0E               CALL   printStr   
3119   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3128   21 07 00               LD   hl,7   
312B   E5                     PUSH   hl   
312C   E5                     PUSH   hl   
312D   CD A3 0F               CALL   run   
3130   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3137   CD 9C 0E               CALL   printStr   
313A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3147   E1                     POP   hl   
3148   E5                     PUSH   hl   
3149   E5                     PUSH   hl   
314A   CD A3 0F               CALL   run   
314D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3158   76                     HALT      
3159                EXPECTM_3103S121:      
3159   E1                     POP   HL   
315A                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
315A   31 00 4B               LD   SP,STACK   
315D   CD D0 0E               CALL   coldInit   
3160   CD 84 49               CALL   execStr   
3163   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3178   E1                     POP   HL   
3179   E5                     PUSH   HL   
317A   11 06 00               LD   DE,6   
317D   B7                     OR   A   
317E   ED 52                  SBC   HL,DE   
3180   7D                     LD   A,L   
3181   B4                     OR   H   
3182   CA E6 31               JP   Z,expectM_3104S122   
3185   CD 9C 0E               CALL   printStr   
3188   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
31A3   CD 9C 0E               CALL   printStr   
31A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B5   21 06 00               LD   hl,6   
31B8   E5                     PUSH   hl   
31B9   E5                     PUSH   hl   
31BA   CD A3 0F               CALL   run   
31BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31C4   CD 9C 0E               CALL   printStr   
31C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D4   E1                     POP   hl   
31D5   E5                     PUSH   hl   
31D6   E5                     PUSH   hl   
31D7   CD A3 0F               CALL   run   
31DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31E5   76                     HALT      
31E6                EXPECTM_3104S122:      
31E6   E1                     POP   HL   
31E7                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
31E7   31 00 4B               LD   SP,STACK   
31EA   CD D0 0E               CALL   coldInit   
31ED   CD 84 49               CALL   execStr   
31F0   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
31FE   E1                     POP   HL   
31FF   E5                     PUSH   HL   
3200   11 02 00               LD   DE,2   
3203   B7                     OR   A   
3204   ED 52                  SBC   HL,DE   
3206   7D                     LD   A,L   
3207   B4                     OR   H   
3208   CA 65 32               JP   Z,expectM_3105S123   
320B   CD 9C 0E               CALL   printStr   
320E   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3222   CD 9C 0E               CALL   printStr   
3225   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3234   21 02 00               LD   hl,2   
3237   E5                     PUSH   hl   
3238   E5                     PUSH   hl   
3239   CD A3 0F               CALL   run   
323C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3243   CD 9C 0E               CALL   printStr   
3246   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3253   E1                     POP   hl   
3254   E5                     PUSH   hl   
3255   E5                     PUSH   hl   
3256   CD A3 0F               CALL   run   
3259   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3264   76                     HALT      
3265                EXPECTM_3105S123:      
3265   E1                     POP   HL   
3266                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3266   31 00 4B               LD   SP,STACK   
3269   CD D0 0E               CALL   coldInit   
326C   CD 84 49               CALL   execStr   
326F   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3280   E1                     POP   HL   
3281   E5                     PUSH   HL   
3282   11 01 00               LD   DE,1   
3285   B7                     OR   A   
3286   ED 52                  SBC   HL,DE   
3288   7D                     LD   A,L   
3289   B4                     OR   H   
328A   CA EA 32               JP   Z,expectM_3106S124   
328D   CD 9C 0E               CALL   printStr   
3290   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
32A7   CD 9C 0E               CALL   printStr   
32AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32B9   21 01 00               LD   hl,1   
32BC   E5                     PUSH   hl   
32BD   E5                     PUSH   hl   
32BE   CD A3 0F               CALL   run   
32C1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32C8   CD 9C 0E               CALL   printStr   
32CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32D8   E1                     POP   hl   
32D9   E5                     PUSH   hl   
32DA   E5                     PUSH   hl   
32DB   CD A3 0F               CALL   run   
32DE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32E9   76                     HALT      
32EA                EXPECTM_3106S124:      
32EA   E1                     POP   HL   
32EB                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
32EB   31 00 4B               LD   SP,STACK   
32EE   CD D0 0E               CALL   coldInit   
32F1   CD 84 49               CALL   execStr   
32F4   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3306   E1                     POP   HL   
3307   E5                     PUSH   HL   
3308   11 02 00               LD   DE,2   
330B   B7                     OR   A   
330C   ED 52                  SBC   HL,DE   
330E   7D                     LD   A,L   
330F   B4                     OR   H   
3310   CA 71 33               JP   Z,expectM_3107S125   
3313   CD 9C 0E               CALL   printStr   
3316   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
332E   CD 9C 0E               CALL   printStr   
3331   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3340   21 02 00               LD   hl,2   
3343   E5                     PUSH   hl   
3344   E5                     PUSH   hl   
3345   CD A3 0F               CALL   run   
3348   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
334F   CD 9C 0E               CALL   printStr   
3352   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
335F   E1                     POP   hl   
3360   E5                     PUSH   hl   
3361   E5                     PUSH   hl   
3362   CD A3 0F               CALL   run   
3365   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3370   76                     HALT      
3371                EXPECTM_3107S125:      
3371   E1                     POP   HL   
3372                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3372   31 00 4B               LD   SP,STACK   
3375   CD D0 0E               CALL   coldInit   
3378   CD 84 49               CALL   execStr   
337B   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
338E   E1                     POP   HL   
338F   E5                     PUSH   HL   
3390   11 02 00               LD   DE,2   
3393   B7                     OR   A   
3394   ED 52                  SBC   HL,DE   
3396   7D                     LD   A,L   
3397   B4                     OR   H   
3398   CA FA 33               JP   Z,expectM_3108S126   
339B   CD 9C 0E               CALL   printStr   
339E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
33B7   CD 9C 0E               CALL   printStr   
33BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33C9   21 02 00               LD   hl,2   
33CC   E5                     PUSH   hl   
33CD   E5                     PUSH   hl   
33CE   CD A3 0F               CALL   run   
33D1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33D8   CD 9C 0E               CALL   printStr   
33DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33E8   E1                     POP   hl   
33E9   E5                     PUSH   hl   
33EA   E5                     PUSH   hl   
33EB   CD A3 0F               CALL   run   
33EE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33F9   76                     HALT      
33FA                EXPECTM_3108S126:      
33FA   E1                     POP   HL   
33FB                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
33FB   31 00 4B               LD   SP,STACK   
33FE   CD D0 0E               CALL   coldInit   
3401   CD 84 49               CALL   execStr   
3404   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3416   E1                     POP   HL   
3417   E5                     PUSH   HL   
3418   11 02 00               LD   DE,2   
341B   B7                     OR   A   
341C   ED 52                  SBC   HL,DE   
341E   7D                     LD   A,L   
341F   B4                     OR   H   
3420   CA 81 34               JP   Z,expectM_3109S127   
3423   CD 9C 0E               CALL   printStr   
3426   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
343E   CD 9C 0E               CALL   printStr   
3441   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3450   21 02 00               LD   hl,2   
3453   E5                     PUSH   hl   
3454   E5                     PUSH   hl   
3455   CD A3 0F               CALL   run   
3458   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
345F   CD 9C 0E               CALL   printStr   
3462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
346F   E1                     POP   hl   
3470   E5                     PUSH   hl   
3471   E5                     PUSH   hl   
3472   CD A3 0F               CALL   run   
3475   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3480   76                     HALT      
3481                EXPECTM_3109S127:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3482   31 00 4B               LD   SP,STACK   
3485   CD D0 0E               CALL   coldInit   
3488   CD 84 49               CALL   execStr   
348B   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
34A4   E1                     POP   HL   
34A5   E5                     PUSH   HL   
34A6   11 05 00               LD   DE,5   
34A9   B7                     OR   A   
34AA   ED 52                  SBC   HL,DE   
34AC   7D                     LD   A,L   
34AD   B4                     OR   H   
34AE   CA 16 35               JP   Z,expectM_3110S128   
34B1   CD 9C 0E               CALL   printStr   
34B4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
34D3   CD 9C 0E               CALL   printStr   
34D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E5   21 05 00               LD   hl,5   
34E8   E5                     PUSH   hl   
34E9   E5                     PUSH   hl   
34EA   CD A3 0F               CALL   run   
34ED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34F4   CD 9C 0E               CALL   printStr   
34F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3504   E1                     POP   hl   
3505   E5                     PUSH   hl   
3506   E5                     PUSH   hl   
3507   CD A3 0F               CALL   run   
350A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3515   76                     HALT      
3516                EXPECTM_3110S128:      
3516   E1                     POP   HL   
3517                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3517   31 00 4B               LD   SP,STACK   
351A   CD D0 0E               CALL   coldInit   
351D   CD 84 49               CALL   execStr   
3520   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3530   E1                     POP   HL   
3531   E5                     PUSH   HL   
3532   11 02 00               LD   DE,2   
3535   B7                     OR   A   
3536   ED 52                  SBC   HL,DE   
3538   7D                     LD   A,L   
3539   B4                     OR   H   
353A   CA 99 35               JP   Z,expectM_3111S129   
353D   CD 9C 0E               CALL   printStr   
3540   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3556   CD 9C 0E               CALL   printStr   
3559   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3568   21 02 00               LD   hl,2   
356B   E5                     PUSH   hl   
356C   E5                     PUSH   hl   
356D   CD A3 0F               CALL   run   
3570   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3577   CD 9C 0E               CALL   printStr   
357A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3587   E1                     POP   hl   
3588   E5                     PUSH   hl   
3589   E5                     PUSH   hl   
358A   CD A3 0F               CALL   run   
358D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3598   76                     HALT      
3599                EXPECTM_3111S129:      
3599   E1                     POP   HL   
359A                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
359A   31 00 4B               LD   SP,STACK   
359D   CD D0 0E               CALL   coldInit   
35A0   CD 84 49               CALL   execStr   
35A3   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
35BA   E1                     POP   HL   
35BB   E5                     PUSH   HL   
35BC   11 64 00               LD   DE,100   
35BF   B7                     OR   A   
35C0   ED 52                  SBC   HL,DE   
35C2   7D                     LD   A,L   
35C3   B4                     OR   H   
35C4   CA 2A 36               JP   Z,expectM_3112S130   
35C7   CD 9C 0E               CALL   printStr   
35CA   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
35E7   CD 9C 0E               CALL   printStr   
35EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35F9   21 64 00               LD   hl,100   
35FC   E5                     PUSH   hl   
35FD   E5                     PUSH   hl   
35FE   CD A3 0F               CALL   run   
3601   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3608   CD 9C 0E               CALL   printStr   
360B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3618   E1                     POP   hl   
3619   E5                     PUSH   hl   
361A   E5                     PUSH   hl   
361B   CD A3 0F               CALL   run   
361E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3629   76                     HALT      
362A                EXPECTM_3112S130:      
362A   E1                     POP   HL   
362B                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
362B   31 00 4B               LD   SP,STACK   
362E   CD D0 0E               CALL   coldInit   
3631   CD 84 49               CALL   execStr   
3634   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
364C   E1                     POP   HL   
364D   E5                     PUSH   HL   
364E   11 01 00               LD   DE,1   
3651   B7                     OR   A   
3652   ED 52                  SBC   HL,DE   
3654   7D                     LD   A,L   
3655   B4                     OR   H   
3656   CA BD 36               JP   Z,expectM_3113S131   
3659   CD 9C 0E               CALL   printStr   
365C   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
367A   CD 9C 0E               CALL   printStr   
367D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
368C   21 01 00               LD   hl,1   
368F   E5                     PUSH   hl   
3690   E5                     PUSH   hl   
3691   CD A3 0F               CALL   run   
3694   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
369B   CD 9C 0E               CALL   printStr   
369E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36AB   E1                     POP   hl   
36AC   E5                     PUSH   hl   
36AD   E5                     PUSH   hl   
36AE   CD A3 0F               CALL   run   
36B1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
36BC   76                     HALT      
36BD                EXPECTM_3113S131:      
36BD   E1                     POP   HL   
36BE                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
36BE   31 00 4B               LD   SP,STACK   
36C1   CD D0 0E               CALL   coldInit   
36C4   CD 84 49               CALL   execStr   
36C7   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
36E0   E1                     POP   HL   
36E1   E5                     PUSH   HL   
36E2   11 02 00               LD   DE,2   
36E5   B7                     OR   A   
36E6   ED 52                  SBC   HL,DE   
36E8   7D                     LD   A,L   
36E9   B4                     OR   H   
36EA   CA 52 37               JP   Z,expectM_3114S132   
36ED   CD 9C 0E               CALL   printStr   
36F0   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
370F   CD 9C 0E               CALL   printStr   
3712   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3721   21 02 00               LD   hl,2   
3724   E5                     PUSH   hl   
3725   E5                     PUSH   hl   
3726   CD A3 0F               CALL   run   
3729   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3730   CD 9C 0E               CALL   printStr   
3733   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3740   E1                     POP   hl   
3741   E5                     PUSH   hl   
3742   E5                     PUSH   hl   
3743   CD A3 0F               CALL   run   
3746   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3751   76                     HALT      
3752                EXPECTM_3114S132:      
3752   E1                     POP   HL   
3753                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3753   31 00 4B               LD   SP,STACK   
3756   CD D0 0E               CALL   coldInit   
3759   CD 84 49               CALL   execStr   
375C   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
377A   E1                     POP   HL   
377B   E5                     PUSH   HL   
377C   11 0B 00               LD   DE,11   
377F   B7                     OR   A   
3780   ED 52                  SBC   HL,DE   
3782   7D                     LD   A,L   
3783   B4                     OR   H   
3784   CA F1 37               JP   Z,expectM_3115S133   
3787   CD 9C 0E               CALL   printStr   
378A   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
37AE   CD 9C 0E               CALL   printStr   
37B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37C0   21 0B 00               LD   hl,11   
37C3   E5                     PUSH   hl   
37C4   E5                     PUSH   hl   
37C5   CD A3 0F               CALL   run   
37C8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
37CF   CD 9C 0E               CALL   printStr   
37D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37DF   E1                     POP   hl   
37E0   E5                     PUSH   hl   
37E1   E5                     PUSH   hl   
37E2   CD A3 0F               CALL   run   
37E5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37F0   76                     HALT      
37F1                EXPECTM_3115S133:      
37F1   E1                     POP   HL   
37F2                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
37F2   31 00 4B               LD   SP,STACK   
37F5   CD D0 0E               CALL   coldInit   
37F8   CD 84 49               CALL   execStr   
37FB   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3819   E1                     POP   HL   
381A   E5                     PUSH   HL   
381B   11 15 00               LD   DE,21   
381E   B7                     OR   A   
381F   ED 52                  SBC   HL,DE   
3821   7D                     LD   A,L   
3822   B4                     OR   H   
3823   CA 90 38               JP   Z,expectM_3116S134   
3826   CD 9C 0E               CALL   printStr   
3829   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
384D   CD 9C 0E               CALL   printStr   
3850   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
385F   21 15 00               LD   hl,21   
3862   E5                     PUSH   hl   
3863   E5                     PUSH   hl   
3864   CD A3 0F               CALL   run   
3867   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
386E   CD 9C 0E               CALL   printStr   
3871   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
387E   E1                     POP   hl   
387F   E5                     PUSH   hl   
3880   E5                     PUSH   hl   
3881   CD A3 0F               CALL   run   
3884   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
388F   76                     HALT      
3890                EXPECTM_3116S134:      
3890   E1                     POP   HL   
3891                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3891   31 00 4B               LD   SP,STACK   
3894   CD D0 0E               CALL   coldInit   
3897   CD 84 49               CALL   execStr   
389A   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
38A8   E1                     POP   HL   
38A9   E5                     PUSH   HL   
38AA   11 14 00               LD   DE,20   
38AD   B7                     OR   A   
38AE   ED 52                  SBC   HL,DE   
38B0   7D                     LD   A,L   
38B1   B4                     OR   H   
38B2   CA 0F 39               JP   Z,expectM_3117S135   
38B5   CD 9C 0E               CALL   printStr   
38B8   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
38CC   CD 9C 0E               CALL   printStr   
38CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38DE   21 14 00               LD   hl,20   
38E1   E5                     PUSH   hl   
38E2   E5                     PUSH   hl   
38E3   CD A3 0F               CALL   run   
38E6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
38ED   CD 9C 0E               CALL   printStr   
38F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38FD   E1                     POP   hl   
38FE   E5                     PUSH   hl   
38FF   E5                     PUSH   hl   
3900   CD A3 0F               CALL   run   
3903   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
390E   76                     HALT      
390F                EXPECTM_3117S135:      
390F   E1                     POP   HL   
3910                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3910   31 00 4B               LD   SP,STACK   
3913   CD D0 0E               CALL   coldInit   
3916   CD 84 49               CALL   execStr   
3919   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
392B   E1                     POP   HL   
392C   E5                     PUSH   HL   
392D   11 04 00               LD   DE,4   
3930   B7                     OR   A   
3931   ED 52                  SBC   HL,DE   
3933   7D                     LD   A,L   
3934   B4                     OR   H   
3935   CA 96 39               JP   Z,expectM_3118S136   
3938   CD 9C 0E               CALL   printStr   
393B   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3953   CD 9C 0E               CALL   printStr   
3956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3965   21 04 00               LD   hl,4   
3968   E5                     PUSH   hl   
3969   E5                     PUSH   hl   
396A   CD A3 0F               CALL   run   
396D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3974   CD 9C 0E               CALL   printStr   
3977   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3984   E1                     POP   hl   
3985   E5                     PUSH   hl   
3986   E5                     PUSH   hl   
3987   CD A3 0F               CALL   run   
398A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3995   76                     HALT      
3996                EXPECTM_3118S136:      
3996   E1                     POP   HL   
3997                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3997   31 00 4B               LD   SP,STACK   
399A   CD D0 0E               CALL   coldInit   
399D   CD 84 49               CALL   execStr   
39A0   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
39AF   E1                     POP   HL   
39B0   E5                     PUSH   HL   
39B1   11 02 00               LD   DE,2   
39B4   B7                     OR   A   
39B5   ED 52                  SBC   HL,DE   
39B7   7D                     LD   A,L   
39B8   B4                     OR   H   
39B9   CA 17 3A               JP   Z,expectM_3119S137   
39BC   CD 9C 0E               CALL   printStr   
39BF   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
39D4   CD 9C 0E               CALL   printStr   
39D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39E6   21 02 00               LD   hl,2   
39E9   E5                     PUSH   hl   
39EA   E5                     PUSH   hl   
39EB   CD A3 0F               CALL   run   
39EE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
39F5   CD 9C 0E               CALL   printStr   
39F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A05   E1                     POP   hl   
3A06   E5                     PUSH   hl   
3A07   E5                     PUSH   hl   
3A08   CD A3 0F               CALL   run   
3A0B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A16   76                     HALT      
3A17                EXPECTM_3119S137:      
3A17   E1                     POP   HL   
3A18                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3A18   31 00 4B               LD   SP,STACK   
3A1B   CD D0 0E               CALL   coldInit   
3A1E   CD 84 49               CALL   execStr   
3A21   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3A33   E1                     POP   HL   
3A34   E5                     PUSH   HL   
3A35   11 42 00               LD   DE,66   
3A38   B7                     OR   A   
3A39   ED 52                  SBC   HL,DE   
3A3B   7D                     LD   A,L   
3A3C   B4                     OR   H   
3A3D   CA 9E 3A               JP   Z,expectM_3120S138   
3A40   CD 9C 0E               CALL   printStr   
3A43   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
3A5B   CD 9C 0E               CALL   printStr   
3A5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A6D   21 42 00               LD   hl,66   
3A70   E5                     PUSH   hl   
3A71   E5                     PUSH   hl   
3A72   CD A3 0F               CALL   run   
3A75   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A7C   CD 9C 0E               CALL   printStr   
3A7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A8C   E1                     POP   hl   
3A8D   E5                     PUSH   hl   
3A8E   E5                     PUSH   hl   
3A8F   CD A3 0F               CALL   run   
3A92   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A9D   76                     HALT      
3A9E                EXPECTM_3120S138:      
3A9E   E1                     POP   HL   
3A9F                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3A9F   31 00 4B               LD   SP,STACK   
3AA2   CD D0 0E               CALL   coldInit   
3AA5   CD 84 49               CALL   execStr   
3AA8   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3ABC   E1                     POP   HL   
3ABD   E5                     PUSH   HL   
3ABE   11 0A 00               LD   DE,10   
3AC1   B7                     OR   A   
3AC2   ED 52                  SBC   HL,DE   
3AC4   7D                     LD   A,L   
3AC5   B4                     OR   H   
3AC6   CA 29 3B               JP   Z,expectM_3121S139   
3AC9   CD 9C 0E               CALL   printStr   
3ACC   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3AE6   CD 9C 0E               CALL   printStr   
3AE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AF8   21 0A 00               LD   hl,10   
3AFB   E5                     PUSH   hl   
3AFC   E5                     PUSH   hl   
3AFD   CD A3 0F               CALL   run   
3B00   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B07   CD 9C 0E               CALL   printStr   
3B0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B17   E1                     POP   hl   
3B18   E5                     PUSH   hl   
3B19   E5                     PUSH   hl   
3B1A   CD A3 0F               CALL   run   
3B1D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B28   76                     HALT      
3B29                EXPECTM_3121S139:      
3B29   E1                     POP   HL   
3B2A                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3B2A   31 00 4B               LD   SP,STACK   
3B2D   CD D0 0E               CALL   coldInit   
3B30   CD 84 49               CALL   execStr   
3B33   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3B4E   E1                     POP   HL   
3B4F   E5                     PUSH   HL   
3B50   11 0A 00               LD   DE,10   
3B53   B7                     OR   A   
3B54   ED 52                  SBC   HL,DE   
3B56   7D                     LD   A,L   
3B57   B4                     OR   H   
3B58   CA C2 3B               JP   Z,expectM_3122S140   
3B5B   CD 9C 0E               CALL   printStr   
3B5E   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3B7F   CD 9C 0E               CALL   printStr   
3B82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B91   21 0A 00               LD   hl,10   
3B94   E5                     PUSH   hl   
3B95   E5                     PUSH   hl   
3B96   CD A3 0F               CALL   run   
3B99   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BA0   CD 9C 0E               CALL   printStr   
3BA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BB0   E1                     POP   hl   
3BB1   E5                     PUSH   hl   
3BB2   E5                     PUSH   hl   
3BB3   CD A3 0F               CALL   run   
3BB6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BC1   76                     HALT      
3BC2                EXPECTM_3122S140:      
3BC2   E1                     POP   HL   
3BC3                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3BC3   31 00 4B               LD   SP,STACK   
3BC6   CD D0 0E               CALL   coldInit   
3BC9   CD 84 49               CALL   execStr   
3BCC   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3BEB   E1                     POP   HL   
3BEC   E5                     PUSH   HL   
3BED   11 0A 00               LD   DE,10   
3BF0   B7                     OR   A   
3BF1   ED 52                  SBC   HL,DE   
3BF3   7D                     LD   A,L   
3BF4   B4                     OR   H   
3BF5   CA 63 3C               JP   Z,expectM_3123S141   
3BF8   CD 9C 0E               CALL   printStr   
3BFB   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3C20   CD 9C 0E               CALL   printStr   
3C23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C32   21 0A 00               LD   hl,10   
3C35   E5                     PUSH   hl   
3C36   E5                     PUSH   hl   
3C37   CD A3 0F               CALL   run   
3C3A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C41   CD 9C 0E               CALL   printStr   
3C44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C51   E1                     POP   hl   
3C52   E5                     PUSH   hl   
3C53   E5                     PUSH   hl   
3C54   CD A3 0F               CALL   run   
3C57   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C62   76                     HALT      
3C63                EXPECTM_3123S141:      
3C63   E1                     POP   HL   
3C64                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3C64   31 00 4B               LD   SP,STACK   
3C67   CD D0 0E               CALL   coldInit   
3C6A   CD 84 49               CALL   execStr   
3C6D   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3C8C   E1                     POP   HL   
3C8D   E5                     PUSH   HL   
3C8E   11 14 00               LD   DE,20   
3C91   B7                     OR   A   
3C92   ED 52                  SBC   HL,DE   
3C94   7D                     LD   A,L   
3C95   B4                     OR   H   
3C96   CA 04 3D               JP   Z,expectM_3124S142   
3C99   CD 9C 0E               CALL   printStr   
3C9C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3CC1   CD 9C 0E               CALL   printStr   
3CC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD3   21 14 00               LD   hl,20   
3CD6   E5                     PUSH   hl   
3CD7   E5                     PUSH   hl   
3CD8   CD A3 0F               CALL   run   
3CDB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CE2   CD 9C 0E               CALL   printStr   
3CE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF2   E1                     POP   hl   
3CF3   E5                     PUSH   hl   
3CF4   E5                     PUSH   hl   
3CF5   CD A3 0F               CALL   run   
3CF8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D03   76                     HALT      
3D04                EXPECTM_3124S142:      
3D04   E1                     POP   HL   
3D05                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3D05   31 00 4B               LD   SP,STACK   
3D08   CD D0 0E               CALL   coldInit   
3D0B   CD 84 49               CALL   execStr   
3D0E   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3D26   E1                     POP   HL   
3D27   E5                     PUSH   HL   
3D28   11 06 00               LD   DE,6   
3D2B   B7                     OR   A   
3D2C   ED 52                  SBC   HL,DE   
3D2E   7D                     LD   A,L   
3D2F   B4                     OR   H   
3D30   CA 97 3D               JP   Z,expectM_3125S143   
3D33   CD 9C 0E               CALL   printStr   
3D36   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3D54   CD 9C 0E               CALL   printStr   
3D57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D66   21 06 00               LD   hl,6   
3D69   E5                     PUSH   hl   
3D6A   E5                     PUSH   hl   
3D6B   CD A3 0F               CALL   run   
3D6E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D75   CD 9C 0E               CALL   printStr   
3D78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D85   E1                     POP   hl   
3D86   E5                     PUSH   hl   
3D87   E5                     PUSH   hl   
3D88   CD A3 0F               CALL   run   
3D8B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D96   76                     HALT      
3D97                EXPECTM_3125S143:      
3D97   E1                     POP   HL   
3D98                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3D98   31 00 4B               LD   SP,STACK   
3D9B   CD D0 0E               CALL   coldInit   
3D9E   CD 84 49               CALL   execStr   
3DA1   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3DBC   E1                     POP   HL   
3DBD   E5                     PUSH   HL   
3DBE   11 02 00               LD   DE,2   
3DC1   B7                     OR   A   
3DC2   ED 52                  SBC   HL,DE   
3DC4   7D                     LD   A,L   
3DC5   B4                     OR   H   
3DC6   CA 30 3E               JP   Z,expectM_3126S144   
3DC9   CD 9C 0E               CALL   printStr   
3DCC   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3DED   CD 9C 0E               CALL   printStr   
3DF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DFF   21 02 00               LD   hl,2   
3E02   E5                     PUSH   hl   
3E03   E5                     PUSH   hl   
3E04   CD A3 0F               CALL   run   
3E07   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E0E   CD 9C 0E               CALL   printStr   
3E11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E1E   E1                     POP   hl   
3E1F   E5                     PUSH   hl   
3E20   E5                     PUSH   hl   
3E21   CD A3 0F               CALL   run   
3E24   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E2F   76                     HALT      
3E30                EXPECTM_3126S144:      
3E30   E1                     POP   HL   
3E31                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3E31   31 00 4B               LD   SP,STACK   
3E34   CD D0 0E               CALL   coldInit   
3E37   CD 84 49               CALL   execStr   
3E3A   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3E60   E1                     POP   HL   
3E61   E5                     PUSH   HL   
3E62   11 0A 00               LD   DE,10   
3E65   B7                     OR   A   
3E66   ED 52                  SBC   HL,DE   
3E68   7D                     LD   A,L   
3E69   B4                     OR   H   
3E6A   CA DF 3E               JP   Z,expectM_3127S145   
3E6D   CD 9C 0E               CALL   printStr   
3E70   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3E9C   CD 9C 0E               CALL   printStr   
3E9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EAE   21 0A 00               LD   hl,10   
3EB1   E5                     PUSH   hl   
3EB2   E5                     PUSH   hl   
3EB3   CD A3 0F               CALL   run   
3EB6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3EBD   CD 9C 0E               CALL   printStr   
3EC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ECD   E1                     POP   hl   
3ECE   E5                     PUSH   hl   
3ECF   E5                     PUSH   hl   
3ED0   CD A3 0F               CALL   run   
3ED3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3EDE   76                     HALT      
3EDF                EXPECTM_3127S145:      
3EDF   E1                     POP   HL   
3EE0                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3EE0   31 00 4B               LD   SP,STACK   
3EE3   CD D0 0E               CALL   coldInit   
3EE6   CD 84 49               CALL   execStr   
3EE9   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
3F14   E1                     POP   HL   
3F15   E5                     PUSH   HL   
3F16   11 06 00               LD   DE,6   
3F19   B7                     OR   A   
3F1A   ED 52                  SBC   HL,DE   
3F1C   7D                     LD   A,L   
3F1D   B4                     OR   H   
3F1E   CA 98 3F               JP   Z,expectM_3128S146   
3F21   CD 9C 0E               CALL   printStr   
3F24   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
3F55   CD 9C 0E               CALL   printStr   
3F58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F67   21 06 00               LD   hl,6   
3F6A   E5                     PUSH   hl   
3F6B   E5                     PUSH   hl   
3F6C   CD A3 0F               CALL   run   
3F6F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F76   CD 9C 0E               CALL   printStr   
3F79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F86   E1                     POP   hl   
3F87   E5                     PUSH   hl   
3F88   E5                     PUSH   hl   
3F89   CD A3 0F               CALL   run   
3F8C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F97   76                     HALT      
3F98                EXPECTM_3128S146:      
3F98   E1                     POP   HL   
3F99                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
3F99   31 00 4B               LD   SP,STACK   
3F9C   CD D0 0E               CALL   coldInit   
3F9F   CD 84 49               CALL   execStr   
3FA2   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
3FB6   E1                     POP   HL   
3FB7   E5                     PUSH   HL   
3FB8   11 03 00               LD   DE,3   
3FBB   B7                     OR   A   
3FBC   ED 52                  SBC   HL,DE   
3FBE   7D                     LD   A,L   
3FBF   B4                     OR   H   
3FC0   CA 23 40               JP   Z,expectM_3129S147   
3FC3   CD 9C 0E               CALL   printStr   
3FC6   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
3FE0   CD 9C 0E               CALL   printStr   
3FE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FF2   21 03 00               LD   hl,3   
3FF5   E5                     PUSH   hl   
3FF6   E5                     PUSH   hl   
3FF7   CD A3 0F               CALL   run   
3FFA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4001   CD 9C 0E               CALL   printStr   
4004   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4011   E1                     POP   hl   
4012   E5                     PUSH   hl   
4013   E5                     PUSH   hl   
4014   CD A3 0F               CALL   run   
4017   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4022   76                     HALT      
4023                EXPECTM_3129S147:      
4023   E1                     POP   HL   
4024                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4024   31 00 4B               LD   SP,STACK   
4027   CD D0 0E               CALL   coldInit   
402A   CD 84 49               CALL   execStr   
402D   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4041   E1                     POP   HL   
4042   E5                     PUSH   HL   
4043   11 01 00               LD   DE,1   
4046   B7                     OR   A   
4047   ED 52                  SBC   HL,DE   
4049   7D                     LD   A,L   
404A   B4                     OR   H   
404B   CA AE 40               JP   Z,expectM_3130S148   
404E   CD 9C 0E               CALL   printStr   
4051   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
406B   CD 9C 0E               CALL   printStr   
406E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
407D   21 01 00               LD   hl,1   
4080   E5                     PUSH   hl   
4081   E5                     PUSH   hl   
4082   CD A3 0F               CALL   run   
4085   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
408C   CD 9C 0E               CALL   printStr   
408F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
409C   E1                     POP   hl   
409D   E5                     PUSH   hl   
409E   E5                     PUSH   hl   
409F   CD A3 0F               CALL   run   
40A2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40AD   76                     HALT      
40AE                EXPECTM_3130S148:      
40AE   E1                     POP   HL   
40AF                          ;*Macro unroll:  test "_A 1 - /ad", NUL
40AF   31 00 4B               LD   SP,STACK   
40B2   CD D0 0E               CALL   coldInit   
40B5   CD 84 49               CALL   execStr   
40B8   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
40C3   E1                     POP   HL   
40C4   E5                     PUSH   HL   
40C5   11 00 00               LD   DE,NUL   
40C8   B7                     OR   A   
40C9   ED 52                  SBC   HL,DE   
40CB   7D                     LD   A,L   
40CC   B4                     OR   H   
40CD   CA 27 41               JP   Z,expectM_3131S149   
40D0   CD 9C 0E               CALL   printStr   
40D3   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
40E4   CD 9C 0E               CALL   printStr   
40E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40F6   21 00 00               LD   hl,NUL   
40F9   E5                     PUSH   hl   
40FA   E5                     PUSH   hl   
40FB   CD A3 0F               CALL   run   
40FE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4105   CD 9C 0E               CALL   printStr   
4108   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4115   E1                     POP   hl   
4116   E5                     PUSH   hl   
4117   E5                     PUSH   hl   
4118   CD A3 0F               CALL   run   
411B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4126   76                     HALT      
4127                EXPECTM_3131S149:      
4127   E1                     POP   HL   
4128                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4128   31 00 4B               LD   SP,STACK   
412B   CD D0 0E               CALL   coldInit   
412E   CD 84 49               CALL   execStr   
4131   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
413C   E1                     POP   HL   
413D   E5                     PUSH   HL   
413E   11 00 00               LD   DE,NUL   
4141   B7                     OR   A   
4142   ED 52                  SBC   HL,DE   
4144   7D                     LD   A,L   
4145   B4                     OR   H   
4146   CA A0 41               JP   Z,expectM_3132S150   
4149   CD 9C 0E               CALL   printStr   
414C   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
415D   CD 9C 0E               CALL   printStr   
4160   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416F   21 00 00               LD   hl,NUL   
4172   E5                     PUSH   hl   
4173   E5                     PUSH   hl   
4174   CD A3 0F               CALL   run   
4177   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
417E   CD 9C 0E               CALL   printStr   
4181   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
418E   E1                     POP   hl   
418F   E5                     PUSH   hl   
4190   E5                     PUSH   hl   
4191   CD A3 0F               CALL   run   
4194   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
419F   76                     HALT      
41A0                EXPECTM_3132S150:      
41A0   E1                     POP   HL   
41A1                          ;*Macro unroll:  test "_a 1 - /ad", NUL
41A1   31 00 4B               LD   SP,STACK   
41A4   CD D0 0E               CALL   coldInit   
41A7   CD 84 49               CALL   execStr   
41AA   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
41B5   E1                     POP   HL   
41B6   E5                     PUSH   HL   
41B7   11 00 00               LD   DE,NUL   
41BA   B7                     OR   A   
41BB   ED 52                  SBC   HL,DE   
41BD   7D                     LD   A,L   
41BE   B4                     OR   H   
41BF   CA 19 42               JP   Z,expectM_3133S151   
41C2   CD 9C 0E               CALL   printStr   
41C5   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
41D6   CD 9C 0E               CALL   printStr   
41D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41E8   21 00 00               LD   hl,NUL   
41EB   E5                     PUSH   hl   
41EC   E5                     PUSH   hl   
41ED   CD A3 0F               CALL   run   
41F0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
41F7   CD 9C 0E               CALL   printStr   
41FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4207   E1                     POP   hl   
4208   E5                     PUSH   hl   
4209   E5                     PUSH   hl   
420A   CD A3 0F               CALL   run   
420D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4218   76                     HALT      
4219                EXPECTM_3133S151:      
4219   E1                     POP   HL   
421A                          ;*Macro unroll:  test "_z 1 + /ad", NUL
421A   31 00 4B               LD   SP,STACK   
421D   CD D0 0E               CALL   coldInit   
4220   CD 84 49               CALL   execStr   
4223   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
422E   E1                     POP   HL   
422F   E5                     PUSH   HL   
4230   11 00 00               LD   DE,NUL   
4233   B7                     OR   A   
4234   ED 52                  SBC   HL,DE   
4236   7D                     LD   A,L   
4237   B4                     OR   H   
4238   CA 92 42               JP   Z,expectM_3134S152   
423B   CD 9C 0E               CALL   printStr   
423E   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
424F   CD 9C 0E               CALL   printStr   
4252   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4261   21 00 00               LD   hl,NUL   
4264   E5                     PUSH   hl   
4265   E5                     PUSH   hl   
4266   CD A3 0F               CALL   run   
4269   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4270   CD 9C 0E               CALL   printStr   
4273   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4280   E1                     POP   hl   
4281   E5                     PUSH   hl   
4282   E5                     PUSH   hl   
4283   CD A3 0F               CALL   run   
4286   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4291   76                     HALT      
4292                EXPECTM_3134S152:      
4292   E1                     POP   HL   
4293                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4293   31 00 4B               LD   SP,STACK   
4296   CD D0 0E               CALL   coldInit   
4299   CD 84 49               CALL   execStr   
429C   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
42A3   E1                     POP   HL   
42A4   E5                     PUSH   HL   
42A5   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42A8   B7                     OR   A   
42A9   ED 52                  SBC   HL,DE   
42AB   7D                     LD   A,L   
42AC   B4                     OR   H   
42AD   CA 03 43               JP   Z,expectM_3135S153   
42B0   CD 9C 0E               CALL   printStr   
42B3   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
42C0   CD 9C 0E               CALL   printStr   
42C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D2   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42D5   E5                     PUSH   hl   
42D6   E5                     PUSH   hl   
42D7   CD A3 0F               CALL   run   
42DA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42E1   CD 9C 0E               CALL   printStr   
42E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F1   E1                     POP   hl   
42F2   E5                     PUSH   hl   
42F3   E5                     PUSH   hl   
42F4   CD A3 0F               CALL   run   
42F7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4302   76                     HALT      
4303                EXPECTM_3135S153:      
4303   E1                     POP   HL   
4304                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4304   31 00 4B               LD   SP,STACK   
4307   CD D0 0E               CALL   coldInit   
430A   CD 84 49               CALL   execStr   
430D   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4314   E1                     POP   HL   
4315   E5                     PUSH   HL   
4316   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
4319   B7                     OR   A   
431A   ED 52                  SBC   HL,DE   
431C   7D                     LD   A,L   
431D   B4                     OR   H   
431E   CA 74 43               JP   Z,expectM_3136S154   
4321   CD 9C 0E               CALL   printStr   
4324   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
4331   CD 9C 0E               CALL   printStr   
4334   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4343   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
4346   E5                     PUSH   hl   
4347   E5                     PUSH   hl   
4348   CD A3 0F               CALL   run   
434B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4352   CD 9C 0E               CALL   printStr   
4355   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4362   E1                     POP   hl   
4363   E5                     PUSH   hl   
4364   E5                     PUSH   hl   
4365   CD A3 0F               CALL   run   
4368   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4373   76                     HALT      
4374                EXPECTM_3136S154:      
4374   E1                     POP   HL   
4375                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4375   31 00 4B               LD   SP,STACK   
4378   CD D0 0E               CALL   coldInit   
437B   CD 84 49               CALL   execStr   
437E   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4385   E1                     POP   HL   
4386   E5                     PUSH   HL   
4387   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
438A   B7                     OR   A   
438B   ED 52                  SBC   HL,DE   
438D   7D                     LD   A,L   
438E   B4                     OR   H   
438F   CA E5 43               JP   Z,expectM_3137S155   
4392   CD 9C 0E               CALL   printStr   
4395   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
43A2   CD 9C 0E               CALL   printStr   
43A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43B4   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
43B7   E5                     PUSH   hl   
43B8   E5                     PUSH   hl   
43B9   CD A3 0F               CALL   run   
43BC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
43C3   CD 9C 0E               CALL   printStr   
43C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43D3   E1                     POP   hl   
43D4   E5                     PUSH   hl   
43D5   E5                     PUSH   hl   
43D6   CD A3 0F               CALL   run   
43D9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43E4   76                     HALT      
43E5                EXPECTM_3137S155:      
43E5   E1                     POP   HL   
43E6                          ;*Macro unroll:  test "_A /ad", VARS
43E6   31 00 4B               LD   SP,STACK   
43E9   CD D0 0E               CALL   coldInit   
43EC   CD 84 49               CALL   execStr   
43EF   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
43F6   E1                     POP   HL   
43F7   E5                     PUSH   HL   
43F8   11 00 4D               LD   DE,VARS   
43FB   B7                     OR   A   
43FC   ED 52                  SBC   HL,DE   
43FE   7D                     LD   A,L   
43FF   B4                     OR   H   
4400   CA 56 44               JP   Z,expectM_3138S156   
4403   CD 9C 0E               CALL   printStr   
4406   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4413   CD 9C 0E               CALL   printStr   
4416   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4425   21 00 4D               LD   hl,VARS   
4428   E5                     PUSH   hl   
4429   E5                     PUSH   hl   
442A   CD A3 0F               CALL   run   
442D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4434   CD 9C 0E               CALL   printStr   
4437   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4444   E1                     POP   hl   
4445   E5                     PUSH   hl   
4446   E5                     PUSH   hl   
4447   CD A3 0F               CALL   run   
444A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4455   76                     HALT      
4456                EXPECTM_3138S156:      
4456   E1                     POP   HL   
4457                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4457   31 00 4B               LD   SP,STACK   
445A   CD D0 0E               CALL   coldInit   
445D   CD 84 49               CALL   execStr   
4460   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
446D   E1                     POP   HL   
446E   E5                     PUSH   HL   
446F   11 01 00               LD   DE,1   
4472   B7                     OR   A   
4473   ED 52                  SBC   HL,DE   
4475   7D                     LD   A,L   
4476   B4                     OR   H   
4477   CA D3 44               JP   Z,expectM_3139S157   
447A   CD 9C 0E               CALL   printStr   
447D   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4490   CD 9C 0E               CALL   printStr   
4493   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A2   21 01 00               LD   hl,1   
44A5   E5                     PUSH   hl   
44A6   E5                     PUSH   hl   
44A7   CD A3 0F               CALL   run   
44AA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
44B1   CD 9C 0E               CALL   printStr   
44B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44C1   E1                     POP   hl   
44C2   E5                     PUSH   hl   
44C3   E5                     PUSH   hl   
44C4   CD A3 0F               CALL   run   
44C7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44D2   76                     HALT      
44D3                EXPECTM_3139S157:      
44D3   E1                     POP   HL   
44D4                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
44D4   31 00 4B               LD   SP,STACK   
44D7   CD D0 0E               CALL   coldInit   
44DA   CD 84 49               CALL   execStr   
44DD   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
44F1   E1                     POP   HL   
44F2   E5                     PUSH   HL   
44F3   11 03 00               LD   DE,3   
44F6   B7                     OR   A   
44F7   ED 52                  SBC   HL,DE   
44F9   7D                     LD   A,L   
44FA   B4                     OR   H   
44FB   CA 5E 45               JP   Z,expectM_3140S158   
44FE   CD 9C 0E               CALL   printStr   
4501   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
451B   CD 9C 0E               CALL   printStr   
451E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
452D   21 03 00               LD   hl,3   
4530   E5                     PUSH   hl   
4531   E5                     PUSH   hl   
4532   CD A3 0F               CALL   run   
4535   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
453C   CD 9C 0E               CALL   printStr   
453F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
454C   E1                     POP   hl   
454D   E5                     PUSH   hl   
454E   E5                     PUSH   hl   
454F   CD A3 0F               CALL   run   
4552   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
455D   76                     HALT      
455E                EXPECTM_3140S158:      
455E   E1                     POP   HL   
455F                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
455F   31 00 4B               LD   SP,STACK   
4562   CD D0 0E               CALL   coldInit   
4565   CD 84 49               CALL   execStr   
4568   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
457F   E1                     POP   HL   
4580   E5                     PUSH   HL   
4581   11 02 00               LD   DE,2   
4584   B7                     OR   A   
4585   ED 52                  SBC   HL,DE   
4587   7D                     LD   A,L   
4588   B4                     OR   H   
4589   CA EF 45               JP   Z,expectM_3141S159   
458C   CD 9C 0E               CALL   printStr   
458F   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
45AC   CD 9C 0E               CALL   printStr   
45AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45BE   21 02 00               LD   hl,2   
45C1   E5                     PUSH   hl   
45C2   E5                     PUSH   hl   
45C3   CD A3 0F               CALL   run   
45C6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45CD   CD 9C 0E               CALL   printStr   
45D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45DD   E1                     POP   hl   
45DE   E5                     PUSH   hl   
45DF   E5                     PUSH   hl   
45E0   CD A3 0F               CALL   run   
45E3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
45EE   76                     HALT      
45EF                EXPECTM_3141S159:      
45EF   E1                     POP   HL   
45F0                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
45F0   31 00 4B               LD   SP,STACK   
45F3   CD D0 0E               CALL   coldInit   
45F6   CD 84 49               CALL   execStr   
45F9   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
461C   E1                     POP   HL   
461D   E5                     PUSH   HL   
461E   11 01 00               LD   DE,1   
4621   B7                     OR   A   
4622   ED 52                  SBC   HL,DE   
4624   7D                     LD   A,L   
4625   B4                     OR   H   
4626   CA 98 46               JP   Z,expectM_3142S160   
4629   CD 9C 0E               CALL   printStr   
462C   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4655   CD 9C 0E               CALL   printStr   
4658   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4667   21 01 00               LD   hl,1   
466A   E5                     PUSH   hl   
466B   E5                     PUSH   hl   
466C   CD A3 0F               CALL   run   
466F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4676   CD 9C 0E               CALL   printStr   
4679   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4686   E1                     POP   hl   
4687   E5                     PUSH   hl   
4688   E5                     PUSH   hl   
4689   CD A3 0F               CALL   run   
468C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4697   76                     HALT      
4698                EXPECTM_3142S160:      
4698   E1                     POP   HL   
4699                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4699   31 00 4B               LD   SP,STACK   
469C   CD D0 0E               CALL   coldInit   
469F   CD 84 49               CALL   execStr   
46A2   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
46C5   E1                     POP   HL   
46C6   E5                     PUSH   HL   
46C7   11 01 00               LD   DE,1   
46CA   B7                     OR   A   
46CB   ED 52                  SBC   HL,DE   
46CD   7D                     LD   A,L   
46CE   B4                     OR   H   
46CF   CA 41 47               JP   Z,expectM_3143S161   
46D2   CD 9C 0E               CALL   printStr   
46D5   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
46FE   CD 9C 0E               CALL   printStr   
4701   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4710   21 01 00               LD   hl,1   
4713   E5                     PUSH   hl   
4714   E5                     PUSH   hl   
4715   CD A3 0F               CALL   run   
4718   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
471F   CD 9C 0E               CALL   printStr   
4722   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472F   E1                     POP   hl   
4730   E5                     PUSH   hl   
4731   E5                     PUSH   hl   
4732   CD A3 0F               CALL   run   
4735   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4740   76                     HALT      
4741                EXPECTM_3143S161:      
4741   E1                     POP   HL   
4742                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4742   31 00 4B               LD   SP,STACK   
4745   CD D0 0E               CALL   coldInit   
4748   CD 84 49               CALL   execStr   
474B   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
477B   E1                     POP   HL   
477C   E5                     PUSH   HL   
477D   11 02 00               LD   DE,2   
4780   B7                     OR   A   
4781   ED 52                  SBC   HL,DE   
4783   7D                     LD   A,L   
4784   B4                     OR   H   
4785   CA 04 48               JP   Z,expectM_3144S162   
4788   CD 9C 0E               CALL   printStr   
478B   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
47C1   CD 9C 0E               CALL   printStr   
47C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47D3   21 02 00               LD   hl,2   
47D6   E5                     PUSH   hl   
47D7   E5                     PUSH   hl   
47D8   CD A3 0F               CALL   run   
47DB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47E2   CD 9C 0E               CALL   printStr   
47E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47F2   E1                     POP   hl   
47F3   E5                     PUSH   hl   
47F4   E5                     PUSH   hl   
47F5   CD A3 0F               CALL   run   
47F8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4803   76                     HALT      
4804                EXPECTM_3144S162:      
4804   E1                     POP   HL   
4805                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4805   31 00 4B               LD   SP,STACK   
4808   CD D0 0E               CALL   coldInit   
480B   CD 84 49               CALL   execStr   
480E   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4823   E1                     POP   HL   
4824   E5                     PUSH   HL   
4825   11 02 00               LD   DE,2   
4828   B7                     OR   A   
4829   ED 52                  SBC   HL,DE   
482B   7D                     LD   A,L   
482C   B4                     OR   H   
482D   CA 91 48               JP   Z,expectM_3145S163   
4830   CD 9C 0E               CALL   printStr   
4833   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
484E   CD 9C 0E               CALL   printStr   
4851   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4860   21 02 00               LD   hl,2   
4863   E5                     PUSH   hl   
4864   E5                     PUSH   hl   
4865   CD A3 0F               CALL   run   
4868   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
486F   CD 9C 0E               CALL   printStr   
4872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
487F   E1                     POP   hl   
4880   E5                     PUSH   hl   
4881   E5                     PUSH   hl   
4882   CD A3 0F               CALL   run   
4885   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4890   76                     HALT      
4891                EXPECTM_3145S163:      
4891   E1                     POP   HL   
4892                          ;*Macro unroll:  test "'hello'/sl",5
4892   31 00 4B               LD   SP,STACK   
4895   CD D0 0E               CALL   coldInit   
4898   CD 84 49               CALL   execStr   
489B   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
48A6   E1                     POP   HL   
48A7   E5                     PUSH   HL   
48A8   11 05 00               LD   DE,5   
48AB   B7                     OR   A   
48AC   ED 52                  SBC   HL,DE   
48AE   7D                     LD   A,L   
48AF   B4                     OR   H   
48B0   CA 0A 49               JP   Z,expectM_3146S164   
48B3   CD 9C 0E               CALL   printStr   
48B6   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
48C7   CD 9C 0E               CALL   printStr   
48CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48D9   21 05 00               LD   hl,5   
48DC   E5                     PUSH   hl   
48DD   E5                     PUSH   hl   
48DE   CD A3 0F               CALL   run   
48E1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
48E8   CD 9C 0E               CALL   printStr   
48EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48F8   E1                     POP   hl   
48F9   E5                     PUSH   hl   
48FA   E5                     PUSH   hl   
48FB   CD A3 0F               CALL   run   
48FE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4909   76                     HALT      
490A                EXPECTM_3146S164:      
490A   E1                     POP   HL   
490B                          ;*Macro unroll:  test "-1/ab", 1
490B   31 00 4B               LD   SP,STACK   
490E   CD D0 0E               CALL   coldInit   
4911   CD 84 49               CALL   execStr   
4914   2D 31 2F 61 62 00      DB   "-1/ab",0   
491A   E1                     POP   HL   
491B   E5                     PUSH   HL   
491C   11 01 00               LD   DE,1   
491F   B7                     OR   A   
4920   ED 52                  SBC   HL,DE   
4922   7D                     LD   A,L   
4923   B4                     OR   H   
4924   CA 79 49               JP   Z,expectM_3147S165   
4927   CD 9C 0E               CALL   printStr   
492A   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
4936   CD 9C 0E               CALL   printStr   
4939   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4948   21 01 00               LD   hl,1   
494B   E5                     PUSH   hl   
494C   E5                     PUSH   hl   
494D   CD A3 0F               CALL   run   
4950   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4957   CD 9C 0E               CALL   printStr   
495A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4967   E1                     POP   hl   
4968   E5                     PUSH   hl   
4969   E5                     PUSH   hl   
496A   CD A3 0F               CALL   run   
496D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4978   76                     HALT      
4979                EXPECTM_3147S165:      
4979   E1                     POP   HL   
497A                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
497A                             ; 
497A   CD 9C 0E               CALL   printStr   
497D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4983   76                     HALT      
4984                             ; executes a null teminated string (null executes exit_)
4984                             ; the string should be immedaitely following the call
4984                EXECSTR:      ; create a root stack frame
4984   C1                     POP   bc   ; bc = code*
4985   0B                     DEC   bc   ; dec to prepare for next routine
4986   11 00 00               LD   de,0   
4989   D5                     PUSH   de   ; push fake IP
498A   D5                     PUSH   de   ; push null arg_list*
498B   D5                     PUSH   de   ; push null first_arg*
498C   D5                     PUSH   de   ; push fake BP
498D   DD E9                  JP   (ix)   
498F                STKSIZE:   EQU   $100   ; Stack size
498F                TIBSIZE:   EQU   $100   ; 256 bytes
498F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
498F                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                VRECUR:   DS   2   ; 
4DF4                VDEFINE:   DS   2   ; 
4DF6                VSTRMODE:   DS   2   ; 
4DF8                             ; uninitialised sys variables (preserved)
4DF8                VPOINTER:   DS   2   ; 
4DFA                VREMAIN:   DS   2   ; 
4DFC                VSAVEDIP:   DS   2   ; 
4DFE                VSAVEDSP:   DS   2   ; 
4E00                VSAVEDNEXT:   DS   2   ; 
4E02                VSAVEDBP:   DS   2   ; 
4E04                             ; uninitialised sys variables (unpreserved)
4E04                VTEMP1:   DS   2   ; 
4E06                VTEMP2:   DS   2   ; 
4E08                VTEMP3:   DS   2   ; 
4E0A                VLASTDEF:   DS   2   ; 
4E0C                TBPTR:    DS   2   ; reserved for tests
4E0E                TITLEBUF:   DS   20   
4E22                HEAP:        
4E22                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
4E22                             ; db "{"
4E22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4E22                             ; db        "%L1#!/qt"                ; if not active don't send
4E22                             ; db        "%L0# %a="                ; store current index in A
4E22                             ; db        "%s %L0# +="              ; inc value of index by step
4E22                             ; db        "1%t!=/qt"                ; break if type != 0
4E22                             ; db        "%a %e <"                 ; ifte: in range?
4E22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
4E22                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
4E22                             ; db      "} 0 %k^"                   ; init sink
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC map, 0, "sf"                   ; map
4E22                             ; db "{"
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4E22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4E22                             ; db        "?? %t %k^"               ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; ; /ft filter
4E22                             ; ; src pred -- src1
4E22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\kt{"                       ; return talkback to receive data
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "["
4E22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4E22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4E22                             ; db          "{/t}"                  ; case 2: return true
4E22                             ; db        "]%t#^"                   ; select on %t
4E22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4E22                             ; db        "??"
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC forEach, 1, "spT"
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4E22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4E22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4E22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4E22                             ; db      "??"                      ; ifte:
4E22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4E22                             ; db    "} 0 %s^"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4E22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4E22                             ; db    "[%i]%A="
4E22                             ; db    "\\kt{"                         ; return talkback to receive data
4E22                             ; db      "\\dt{"                         ; call source with tb
4E22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4E22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4E22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02A6 DEFINED AT LINE 329 IN MAIN.asm
MUL2:               02A8 DEFINED AT LINE 332 IN MAIN.asm
MUL3:               02B0 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
PLUS_:              02C2 DEFINED AT LINE 352 IN MAIN.asm
PLUS:               02C2 DEFINED AT LINE 353 IN MAIN.asm
ADD:                02C2 DEFINED AT LINE 354 IN MAIN.asm
ADD1:               02CD DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ADD3:               02D1 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
ADD4:               02DB DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
COLON_:             02DE DEFINED AT LINE 378 IN MAIN.asm
COLON:              02DE DEFINED AT LINE 379 IN MAIN.asm
DEFINESTART:        02EB DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 395 IN MAIN.asm
SEMICOLON:          02F9 DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          02F9 DEFINED AT LINE 402 IN MAIN.asm
DEFINEEND1:         030B DEFINED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LOWCASE_:           030D DEFINED AT LINE 419 IN MAIN.asm
LOWCASE:            030D DEFINED AT LINE 420 IN MAIN.asm
IDENT1:             0312 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            031F DEFINED AT LINE 436 IN MAIN.asm
LBRACK:             031F DEFINED AT LINE 437 IN MAIN.asm
ARRAYSTART:         031F DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH_:         033B DEFINED AT LINE 453 IN MAIN.asm
BACKSLASH:          033B DEFINED AT LINE 454 IN MAIN.asm
LAMBDA:             033B DEFINED AT LINE 455 IN MAIN.asm
LAMBDA1:            0340 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
LAMBDA2:            0350 DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
RBRACK_:            035C DEFINED AT LINE 475 IN MAIN.asm
RBRACK:             035C DEFINED AT LINE 476 IN MAIN.asm
ARRAYEND:           035C DEFINED AT LINE 477 IN MAIN.asm
ARRAYEND1:          0378 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARRAYEND2:          0388 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
ARRAYEND3:          038D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
CARET_:             03AC DEFINED AT LINE 529 IN MAIN.asm
CARET:              03AC DEFINED AT LINE 533 IN MAIN.asm
GO:                 03AC DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03AD DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
GO2:                03B3 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
GRAVE_:             03C2 DEFINED AT LINE 550 IN MAIN.asm
GRAVE:              03C2 DEFINED AT LINE 551 IN MAIN.asm
PRINTLITERAL:       03C2 DEFINED AT LINE 552 IN MAIN.asm
PRINTLITERAL0:      03C9 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PRINTLITERAL1:      03CC DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
LBRACE_:            03D8 DEFINED AT LINE 567 IN MAIN.asm
LBRACE:             03D8 DEFINED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03DD DEFINED AT LINE 574 IN MAIN.asm
PIPE:               03DD DEFINED AT LINE 575 IN MAIN.asm
OR:                 03DD DEFINED AT LINE 576 IN MAIN.asm
RBRACE_:            03E8 DEFINED AT LINE 587 IN MAIN.asm
TILDE_:             03EB DEFINED AT LINE 591 IN MAIN.asm
UNDERSCORE_:        03EE DEFINED AT LINE 594 IN MAIN.asm
CHAR:               03EE DEFINED AT LINE 595 IN MAIN.asm
AT_:                03F6 DEFINED AT LINE 603 IN MAIN.asm
AT:                 03F6 DEFINED AT LINE 604 IN MAIN.asm
ADDR:               03F6 DEFINED AT LINE 605 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 617 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 787 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 788 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 789 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 798 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 848 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 858 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 864 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 884 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 891 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 897 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 901 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 907 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 911 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 922 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 932 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 946 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 950 IN MAIN.asm
COMMAND_W_:         05BC DEFINED AT LINE 966 IN MAIN.asm
XOR_:               05C2 DEFINED AT LINE 972 IN MAIN.asm
COMMAND_NOP_:       05C5 DEFINED AT LINE 977 IN MAIN.asm
COMMAND_DEFAULT_:   05C8 DEFINED AT LINE 982 IN MAIN.asm
NOP:                05CB DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
DIV:                05CD DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
ABSOLUTE:           05DE DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
ABSOLUTE1:          05E9 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
ADDROF:             05EC DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
ADDROF1:            0600 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
ADDROF2:            060B DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
ARRAYLENGTH:        060D DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0613 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
ARRAYSIZE:          0616 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
PERFORMM_1540S1061: 061D DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062A DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
BREAK1:             0631 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
BYTEMODE:           0644 DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
BYTEMODE1:          0647 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
COMMENT:            064C DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
CONSTHEAPSTART:     0655 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
CONSTTIBSTART:      065B DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
CONSTBUFSTART:      0661 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
DECBASE:            0667 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
DECBASE1:           066A DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
ERROR1:             066F DEFINED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
HEXBASE:            0675 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
INPUT:              067B DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
KEY:                0686 DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
OUTPUT:             068F DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
QUIT:               0698 DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
QUIT1:              069F DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
RECUR:              06A2 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
REMAIN:             06A8 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
STRINGBEGIN:        06AE DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
STRINGEND:          06B6 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
STRINGEND1:         06DD DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
STRINGLENGTH:       06E5 DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EB DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
STRINGLENGTH2:      06ED DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
STRINGLENGTH3:      06F1 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
STRINGSIZE:         06F4 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
PERFORMM_1688S1235: 06FB DEFINED AT LINE 45
                    > USED AT LINE 43
VARBUFPTR:          0700 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARHEAPPTR:         0709 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
VARTIBPTR:          0712 DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
VARIABLE:           071B DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
CONSTANT:           071E DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
WORDMODE:           0721 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
XOR:                0727 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
XOR1:               0728 DEFINED AT LINE 1269 IN MAIN.asm
RANGESRC:           0732 DEFINED AT LINE 32
                    > USED AT LINE 928 IN MAIN.asm
RANGESRCM_1730S1285: 0741 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07C6 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
ARRAYITERM_1749S1305: 07D3 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0847 DEFINED AT LINE 32
                    > USED AT LINE 938 IN MAIN.asm
STRINGITERM_1768S1325: 0854 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08CF DEFINED AT LINE 32
                    > USED AT LINE 903 IN MAIN.asm
MAPM_1788S1347:     08DC DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0911 DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
FILTERM_1802S1362:  091F DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               096F DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FOLDM_1821S1382:    097E DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
FOREACHM_1835S1397: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0D DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
FUNCSRCM_1849S1412: 0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A46 DEFINED AT LINE 32
                    > USED AT LINE 620 IN MAIN.asm
PRINTARRAYM_1859S1423: 0A54 DEFINED AT LINE 39
                    > USED AT LINE 35
TILDE:              0A8E DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
INVERT:             0A8E DEFINED AT LINE 1435 IN MAIN.asm
DOLLAR:             0A98 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0A98 DEFINED AT LINE 1447 IN MAIN.asm
HEXNUM1:            0A9B DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
HEXNUM2:            0AA3 DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
QUESTION:           0AB5 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0AB5 DEFINED AT LINE 1471 IN MAIN.asm
IFTE:               0AC1 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
IFTE1:              0AC2 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
QUOTE:              0ACE DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0ACE DEFINED AT LINE 1497 IN MAIN.asm
STRING1:            0AD7 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
STRING2:            0ADA DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
STRING3:            0AE0 DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
PERCENT:            0AE8 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0AE8 DEFINED AT LINE 1524 IN MAIN.asm
ARG0:               0B04 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
ARG0A:              0B0D DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
ARG1:               0B12 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
ARG1A:              0B1A DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
NUM:                0B1D DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0B26 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
NUM1:               0B27 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
NUM2:               0B3F DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
NUM3:               0B4A DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
RBRACE:             0B4D DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BLOCKEND:           0B4D DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
BLOCKEND1:          0B7F DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
BLOCKEND2:          0B8B DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
BLOCKEND3:          0B9D DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
BLOCKEND4:          0BB1 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
GOBLOCK:            0BBA DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
GOBLOCK2:           0BDF DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOBLOCK3:           0BE9 DEFINED AT LINE 1687 IN MAIN.asm
GOFUNC:             0BED DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
GOFUNC1:            0C06 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
GOFUNC2:            0C0C DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
GOFUNC3:            0C17 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
GOFUNC4:            0C2F DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
GOFUNC5:            0C32 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
GOFUNC6:            0C35 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
GOFUNC7:            0C38 DEFINED AT LINE 1750 IN MAIN.asm
GOFUNC8:            0C3C DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
ASSIGN:             0C47 DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0C49 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ASSIGN1:            0C4D DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
ASSIGN2:            0C56 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
EQUALS:             0C58 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0C5F DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0C66 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0C6B DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0C70 DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
TRUE1:              0C73 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
NULL1:              0C79 DEFINED AT LINE 1817 IN MAIN.asm
FALSE1:             0C79 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
SHIFTLEFT:          0C7F DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0C87 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
SHIFTLEFT2:         0C88 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
SHIFTRIGHT:         0C8F DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0C97 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
SHIFTRIGHT2:        0C9B DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
DIVIDE:             0CA2 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
DIVIDE1:            0CA7 DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
DIVIDE2:            0CB4 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
DIVIDE3:            0CB5 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
DOTNEXT:            0CBB DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DOTNEXT1:           0CC3 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
DOTNEXT2:           0CCF DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
DOTNEXT3:           0CD5 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
PARSEARGS:          0CE1 DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
PARSEARGS1:         0CEB DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
PARSEARGS1A:        0CF3 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
PARSEARGS2:         0CFB DEFINED AT LINE 1924 IN MAIN.asm
PARSEARGS3:         0D03 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PARSEARGS4:         0D06 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
PARSEARGS5:         0D0C DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
PARSEBLOCK:         0D17 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
PARSEBLOCK1:        0D1B DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
PARSEBLOCK2:        0D47 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
PARSEBLOCK3:        0D4A DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PARSEBLOCK4:        0D52 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PARSEBLOCK5:        0D55 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
PARSEBLOCK6:        0D7D DEFINED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
CREATEFUNC:         0D81 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
CREATEFUNC0:        0DA0 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CREATEFUNC1:        0DB8 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
CREATEFUNC2:        0DCB DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
CREATEFUNC2A:       0DEA DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
CREATEFUNC3:        0DF9 DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
CREATEFUNC4:        0E04 DEFINED AT LINE 2119 IN MAIN.asm
CREATEFUNC5:        0E05 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
COMMANDTABLE:       0E23 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
COMMANDTABLE1:      0E2D DEFINED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
COMMANDTABLE2:      0E34 DEFINED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
JUMPTABLE:          0E39 DEFINED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
JUMPTABLE1:         0E3A DEFINED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
JUMPTABLE2:         0E3B DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
JUMPTABLE3:         0E42 DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
JUMPTABLE4:         0E4B DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PRTSTR0:            0E51 DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
PRTSTR:             0E55 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
NESTING:            0E5A DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
NESTING0:           0E64 DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
NESTING1A:          0E6B DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
NESTING1:           0E6E DEFINED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
NESTING2:           0E7D DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
NESTING3:           0E7F DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
NESTING4:           0E8A DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
PROMPT:             0E8C DEFINED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
CRLF:               0E95 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
PRINTSTR:           0E9C DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 171
INIT:               0EA3 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
INIT1:              0EAB DEFINED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
WARMINIT:           0EB3 DEFINED AT LINE 2286 IN MAIN.asm
COLDBOOT0:          0EC6 DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
COLDINIT:           0ED0 DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EE1 DEFINED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
COLDSTART:          0EEE DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
START:              0EF7 DEFINED AT LINE 2321 IN MAIN.asm
START1:             0EFD DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
INTERPRET:          0F03 DEFINED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
INTERPRET2:         0F0F DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
INTERPRET3:         0F17 DEFINED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
INTERPRET4:         0F22 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
INTERPRET5:         0F27 DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
INTERPRET5A:        0F45 DEFINED AT LINE 2397 IN MAIN.asm
INTERPRET6:         0F47 DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
INTERPRET7:         0F55 DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
INTERPRET8:         0F68 DEFINED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
NEXT:               0F83 DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
NEXT0:              0F97 DEFINED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
NEXT1:              0F98 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
EXIT:               0F9F DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
RUN:                0FA3 DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FA7 DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
BACKSPACE_:         0FB9 DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
EDIT_:              0FC9 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
REEDIT_:            0FCC DEFINED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
F1:                 0FCF DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F1M_3003S12:        0FDA DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0FDB DEFINED AT LINE 32
                    > USED AT LINE 876 IN MAIN.asm
F2M_3005S15:        0FE6 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0FE7 DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
F3M_3007S18:        0FF2 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0FF3 DEFINED AT LINE 32
                    > USED AT LINE 880 IN MAIN.asm
F4M_3009S21:        0FFE DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3030S48:    1068 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S49:    10D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S50:    1138 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S51:    119F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S52:    1206 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S53:    126D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S54:    12D6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S55:    1341 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S56:    13AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S57:    1413 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S58:    147C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S59:    14E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S60:    1552 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S61:    15C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S62:    1634 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S63:    16A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S64:    1716 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S65:    178D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S66:    1802 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S67:    1871 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S68:    18E8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S69:    195B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S70:    19CA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S71:    1A39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S72:    1AB0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S73:    1B1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S74:    1B8E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S75:    1BFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S76:    1C80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S77:    1CEF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S78:    1D66 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S79:    1DD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S80:    1E52 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S81:    1ECF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S82:    1F4C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S83:    1FC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S84:    204A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S85:    20CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S86:    2150 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S87:    21C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S88:    2240 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S89:    22B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S90:    2326 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S91:    2397 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S92:    2408 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S93:    2477 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S94:    24E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S95:    2555 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S96:    25C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S97:    2633 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S98:    26A2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S99:    2711 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S100:   2780 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S101:   27F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S102:   2862 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S103:   28D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S104:   2946 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S105:   29B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S106:   2A26 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S107:   2A93 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S108:   2B06 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S109:   2B7F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S110:   2BF8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S111:   2C75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S112:   2CFC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S113:   2D83 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S114:   2DF2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S115:   2E63 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S116:   2EDA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S117:   2F55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S118:   2FCC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S119:   304D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S120:   30D0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S121:   3159 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S122:   31E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S123:   3265 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S124:   32EA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S125:   3371 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S126:   33FA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S127:   3481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S128:   3516 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S129:   3599 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S130:   362A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S131:   36BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S132:   3752 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S133:   37F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S134:   3890 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S135:   390F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S136:   3996 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S137:   3A17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S138:   3A9E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S139:   3B29 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S140:   3BC2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S141:   3C63 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S142:   3D04 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S143:   3D97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S144:   3E30 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S145:   3EDF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S146:   3F98 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S147:   4023 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S148:   40AE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S149:   4127 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S150:   41A0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S151:   4219 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S152:   4292 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S153:   4303 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S154:   4374 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S155:   43E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S156:   4456 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S157:   44D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S158:   455E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S159:   45EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S160:   4698 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S161:   4741 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S162:   4804 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S163:   4891 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S164:   490A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S165:   4979 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4984 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
BUFFER:             4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2301 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2313 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
VRECUR:             4DF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
VDEFINE:            4DF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
VSTRMODE:           4DF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
VPOINTER:           4DF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
VREMAIN:            4DFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
VSAVEDIP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
VSAVEDSP:           4DFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
VSAVEDNEXT:         4E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
VSAVEDBP:           4E02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
VTEMP1:             4E04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
VTEMP2:             4E06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
VTEMP3:             4E08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
VLASTDEF:           4E0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4E0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4E0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
HEAP:               4E22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
