0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD D5 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   60 09                  DW   next   ; g nNext
0186   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ; DEL
0220   A5                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A5                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A5                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   96                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   A5                     DB   lsb(nop_)   ; ;
023C   84                     DB   lsb(lt_)   ; <
023D   6A                     DB   lsb(eq_)   ; =
023E   79                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   A5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 B4 03               JP   addr   
0309                AND_:        
0309   C3 C0 03               JP   and   
030C                ARG_:        
030C   C3 DD 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 14 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 46 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 62 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 B0 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 D8 04               JP   block   
031E                BLOCKEND_:      
031E   C3 19 05               JP   blockend   
0321                CHAR_:       
0321   C3 72 05               JP   char   
0324                COMMAND_:      
0324   C3 87 05               JP   command   
0327                DOT_:        
0327   C3 D3 05               JP   dot   
032A                REMAIN_:      
032A   C3 A8 07               JP   remain   
032D                GO_:         
032D   C3 8B 06               JP   go   
0330                IDENTU_:      
0330   C3 0F 07               JP   identU   
0333                IDENTL_:      
0333   C3 14 07               JP   identL   
0336                IF_:         
0336   C3 26 07               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 D5 03               JP   xor1   
033F                MUL_:        
033F   C3 53 07               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 2E                  JR   eq1   
0347                NUM_:        
0347   C3 6F 07               JP   num   
034A                HEXNUM_:      
034A   C3 F2 06               JP   hexnum   
034D                OR_:         
034D   C3 CB 03               JP   or   
0350                XOR_:        
0350   C3 D4 03               JP   xor   
0353                STRING_:      
0353   C3 D3 07               JP   string   
0356                SUB_:        ; negative sign or subtract
0356   03                     INC   bc   ; check if sign of a number
0357   0A                     LD   a,(bc)   
0358   0B                     DEC   bc   
0359   FE 30                  CP   "0"   
035B   38 05                  JR   c,sub1   
035D   FE 3A                  CP   "9"+1   
035F   DA 47 03               JP   c,num_   
0362                SUB1:        ; Subtract the value 2nd on stack from top of stack
0362   D1                     POP   de   
0363   E1                     POP   hl   ; Entry point for INVert
0364                SUB2:        
0364   B7                     OR   a   ; Entry point for NEGate
0365   ED 52                  SBC   hl,de   
0367   E5                     PUSH   hl   
0368   DD E9                  JP   (ix)   
036A                EQ_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   ; is it == ?
036C   FE 3D                  CP   "="   
036E   28 04                  JR   z,eq0   ; no its equality
0370   0B                     DEC   bc   
0371   C3 C8 04               JP   assign   ; no its assignment
0374                EQ0:         
0374   E1                     POP   hl   
0375                EQ1:         
0375   D1                     POP   de   
0376   C3 16 06               JP   equals   
0379                GT_:         
0379   03                     INC   bc   
037A   0A                     LD   a,(bc)   
037B   FE 3E                  CP   ">"   
037D   CA C0 07               JP   z,shiftRight   
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   18 09                  JR   lt1   
0384                LT_:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 3C                  CP   "<"   
0388   CA B0 07               JP   z,shiftLeft   
038B   E1                     POP   hl   
038C   D1                     POP   de   
038D                LT1:         
038D   FE 3D                  CP   "="   
038F   CA 1E 06               JP   z,lessthaneq   
0392   0B                     DEC   bc   
0393   C3 23 06               JP   lessthan   
0396                DIV_:        
0396   D1                     POP   de   ; get first value
0397   E1                     POP   hl   ; get 2nd value
0398   C5                     PUSH   bc   ; preserve the IP
0399   44 4D                  LD   bc,hl   
039B   CD FD 05               CALL   divide   
039E   22 F4 19               LD   (vRemain),hl   
03A1   C1                     POP   bc   
03A2   D5                     PUSH   de   ; push result
03A3   DD E9                  JP   (ix)   
03A5                NOP_:        
03A5   DD E9                  JP   (ix)   
03A7                             ;*******************************************************************
03A7                             ; word operators
03A7                             ;*******************************************************************
03A7                ABS1:        
03A7   E1                     POP   hl   
03A8   CB 7C                  BIT   7,h   
03AA   C8                     RET   z   
03AB   AF                     XOR   a   
03AC   95                     SUB   l   
03AD   6F                     LD   l,a   
03AE   9F                     SBC   a,a   
03AF   94                     SUB   h   
03B0   67                     LD   h,a   
03B1   E5                     PUSH   hl   
03B2   DD E9                  JP   (ix)   
03B4                             ; -- ptr
03B4                ADDR:        
03B4   2A EE 19               LD   hl,(vPointer)   
03B7   E5                     PUSH   hl   
03B8   21 EE 19               LD   hl,vPointer   
03BB   22 EE 19               LD   (vPointer),hl   
03BE   DD E9                  JP   (ix)   
03C0                AND:         
03C0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03C1   E1                     POP   hl   
03C2   7B                     LD   a,e   
03C3   A5                     AND   l   
03C4   6F                     LD   l,a   
03C5   7A                     LD   a,d   
03C6   A4                     AND   h   
03C7                AND1:        
03C7   67                     LD   h,a   
03C8   E5                     PUSH   hl   
03C9   DD E9                  JP   (ix)   
03CB                OR:          
03CB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03CC   E1                     POP   hl   
03CD   7B                     LD   a,e   
03CE   B5                     OR   l   
03CF   6F                     LD   l,a   
03D0   7A                     LD   a,d   
03D1   B4                     OR   h   
03D2   18 F3                  JR   and1   
03D4                XOR:         
03D4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D5                XOR1:        
03D5   E1                     POP   hl   
03D6   7B                     LD   a,e   
03D7   AD                     XOR   l   
03D8   6F                     LD   l,a   
03D9   7A                     LD   a,d   
03DA   AC                     XOR   h   
03DB   18 EA                  JR   and1   
03DD                             ; $a .. $z
03DD                             ; -- value
03DD                             ; returns value of arg
03DD                ARG:         
03DD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03E0   FD 56 05               LD   d,(iy+5)   
03E3   EB                     EX   de,hl   
03E4   7D                     LD   a,l   ; arg_list* == null, skip
03E5   B4                     OR   h   
03E6   28 1C                  JR   z,arg0a   
03E8   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E9   2B                     DEC   hl   
03EA   7E                     LD   a,(hl)   
03EB   23                     INC   hl   
03EC   23                     INC   hl   
03ED   B7                     OR   a   
03EE   28 14                  JR   z,arg0a   ; num_args == 0, skip
03F0   5F                     LD   e,a   ; e = a = num_args
03F1   03                     INC   bc   ; a = next char = arg_name
03F2   0A                     LD   a,(bc)   
03F3   C5                     PUSH   bc   ; save IP
03F4   43                     LD   b,e   ; b = e = num_args
03F5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F8   FD 56 03               LD   d,(iy+3)   
03FB                ARG0:        
03FB   1B                     DEC   de   ; a = arg_name, de = next arg*
03FC   1B                     DEC   de   
03FD   BE                     CP   (hl)   
03FE   28 09                  JR   z,arg1   
0400   23                     INC   hl   ; hl = next arg_list*
0401   10 F8                  DJNZ   arg0   
0403   C1                     POP   bc   ; no match, restore IP
0404                ARG0A:       
0404   11 00 00               LD   de,0   ; return 0
0407   18 08                  JR   arg1a   
0409                ARG1:        
0409   C1                     POP   bc   ; restore IP
040A   EB                     EX   de,hl   ; hl = arg*
040B   22 EE 19               LD   (vPointer),hl   ; store arg* in setter
040E   5E                     LD   e,(hl)   
040F   23                     INC   hl   
0410   56                     LD   d,(hl)   ; de = arg
0411                ARG1A:       
0411   D5                     PUSH   de   ; push arg
0412   DD E9                  JP   (ix)   
0414                             ; arg_list - parses input (ab:c)
0414                             ; names after the : represent uninitialised locals
0414                             ; return values are the state of the stack after the block ends
0414                ARG_LIST:      
0414   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0417   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
041A   23                     INC   hl   ; skip length field to start
041B   23                     INC   hl   
041C   E5                     PUSH   hl   ; save start of arg_list
041D   03                     INC   bc   ; point to next char
041E                ARG_LIST1:      
041E   0A                     LD   a,(bc)   
041F   FE 29                  CP   ")"   ; ) is the arg_list terminator
0421   28 12                  JR   z,arg_list4   
0423   FE 3A                  CP   ":"   
0425   20 03                  JR   nz,arg_list2   
0427   14                     INC   d   ; non zero value local count acts as flag
0428   20 08                  JR   nz,arg_list3   
042A                ARG_LIST2:      
042A   77                     LD   (hl),a   
042B   23                     INC   hl   
042C   1C                     INC   e   ; increase arg count
042D   AF                     XOR   a   
042E   B2                     OR   d   
042F   28 01                  JR   z,arg_list3   
0431   14                     INC   d   ; if d > 0 increase local count
0432                ARG_LIST3:      
0432   03                     INC   bc   ; point to next char
0433   18 E9                  JR   arg_list1   
0435                ARG_LIST4:      
0435   AF                     XOR   a   
0436   B2                     OR   d   
0437   28 01                  JR   z,arg_list5   
0439   15                     DEC   d   ; remove initial inc
043A                ARG_LIST5:      
043A   23                     INC   hl   
043B   22 EC 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
043E   E1                     POP   hl   ; hl = start of arg_list
043F   E5                     PUSH   hl   ; return start of string
0440   2B                     DEC   hl   ; write length bytes to length field at start - 2
0441   72                     LD   (hl),d   
0442   2B                     DEC   hl   
0443   73                     LD   (hl),e   
0444   DD E9                  JP   (ix)   
0446                             ; arrBegin:
0446                             ;     ld hl,(vHeapPtr)            ; hl = heap
0446                             ;     inc hl                      ; reserve space for size
0446                             ;     inc hl
0446                             ;     ld (vHeapPtr),hl            ; hl = array start
0446                             ;     push hl                     ; return start of array
0446                             ;     jp (ix)
0446                             ; arrEnd:
0446                             ;     pop de                      ; de = dup array start
0446                             ;     push de
0446                             ;     push bc                     ; save IP
0446                             ;     ld bc,de                    ; bc = de = array start
0446                             ;     ld hl,(vHeapPtr)            ; hl = array end
0446                             ;     or a                        ; de = array length
0446                             ;     sbc hl,de
0446                             ;     ex de,hl
0446                             ;     ld hl,bc                    ; hl = array start
0446                             ;     dec hl
0446                             ;     ld (hl),d
0446                             ;     dec hl
0446                             ;     ld (hl),e
0446                             ;     pop bc                      ; bc = IP
0446                             ;     jp (ix)
0446                             ; arrItem:
0446                             ;     pop de                      ; new value
0446                             ;     ld hl,(vHeapPtr)
0446                             ;     ld (hl),e
0446                             ;     inc hl
0446                             ;     ld a,(vDataWidth)
0446                             ;     dec a                       ; is it byte?
0446                             ;     jr z,arrItem1
0446                             ;     ld (hl),d
0446                             ;     inc hl
0446                             ; arrItem1:	
0446                             ;     ld (vHeapPtr),hl
0446                             ;     jp (ix)
0446                ARRBEGIN:      
0446   11 00 00               LD   de,0   ; create stack frame
0449   D5                     PUSH   de   ; push null for IP
044A   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
044D   FD 56 05               LD   d,(iy+5)   ; 
0450   D5                     PUSH   de   ; 
0451   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
0454   FD 56 03               LD   d,(iy+3)   ; 
0457   D5                     PUSH   de   ; 
0458   FD E5                  PUSH   iy   ; push BP
045A   FD 21 00 00            LD   iy,0   ; BP = SP
045E   FD 39                  ADD   iy,sp   
0460   DD E9                  JP   (ix)   
0462                ARREND:      
0462   FD 54                  LD   d,iyh   ; de = BP
0464   FD 5D                  LD   e,iyl   
0466   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
046A   62 6B                  LD   hl,de   ; hl = de = BP
046C   B7                     OR   a   
046D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
046F   CB 3C                  SRL   h   ; 
0471   CB 1D                  RR   l   
0473   44 4D                  LD   bc,hl   ; bc = count
0475   2A EC 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
0478   71                     LD   (hl),c   ; write num items in length word
0479   23                     INC   hl   
047A   70                     LD   (hl),b   
047B   23                     INC   hl   ; hl = array[0], bc = count
047C                             ; de = BP, hl = array[0], bc = count
047C                ARREND1:      
047C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
047F   77                     LD   (hl),a   ; write lsb of array item
0480   23                     INC   hl   ; move to msb of array item
0481   3A E6 19               LD   a,(vDataWidth)   ; vDataWidth=1?
0484   3D                     DEC   a   
0485   28 05                  JR   z,arrEnd2   
0487   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
048A   77                     LD   (hl),a   ; write msb of array item
048B   23                     INC   hl   ; move to next word in array
048C                ARREND2:      
048C   FD 2B                  DEC   iy   ; move to next word on stack
048E   FD 2B                  DEC   iy   
0490   0B                     DEC   bc   ; dec items count
0491   79                     LD   a,c   ; if not zero loop
0492   B0                     OR   b   
0493   20 E7                  JR   nz,arrEnd1   
0495   EB                     EX   de,hl   ; de = end of array, hl = BP
0496   F9                     LD   sp,hl   ; sp = BP
0497   E1                     POP   hl   ; de = end of array, hl = old BP
0498   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0499   FD 62                  LD   iyh,d   
049B   FD 6B                  LD   iyl,e   
049D   D1                     POP   de   ; pop arg_list (discard)
049E   D1                     POP   de   ; pop ScopeBP (discard)
049F   D1                     POP   de   ; pop IP (discard)
04A0   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = array[-2]
04A4   22 EC 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
04A7   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
04AB   13                     INC   de   ; de = array[0]
04AC   13                     INC   de   
04AD   D5                     PUSH   de   ; return array[0]
04AE   DD E9                  JP   (ix)   
04B0                             ; index of an array, based on vDataWidth
04B0                             ; array num -- value    ; also sets vPointer to address
04B0                ARRINDEX:      
04B0   E1                     POP   hl   ; hl = index
04B1   D1                     POP   de   ; de = array
04B2   3A E6 19               LD   a,(vDataWidth)   ; a = data width
04B5   3D                     DEC   a   
04B6   28 01                  JR   z,arrIndex1   
04B8                ARRINDEX0:      
04B8   29                     ADD   hl,hl   ; if data width = 2 then double
04B9                ARRINDEX1:      
04B9   19                     ADD   hl,de   ; add addr
04BA   22 EE 19               LD   (vPointer),hl   ; store address in setter
04BD   16 00                  LD   d,0   
04BF   5E                     LD   e,(hl)   
04C0   B7                     OR   a   ; check data width again
04C1   28 02                  JR   z,arrIndex2   
04C3   23                     INC   hl   
04C4   56                     LD   d,(hl)   
04C5                ARRINDEX2:      
04C5   D5                     PUSH   de   
04C6   DD E9                  JP   (ix)   
04C8                             ; value _oldValue --            ; uses address in vPointer
04C8                ASSIGN:      
04C8   E1                     POP   hl   ; discard last accessed value
04C9   D1                     POP   de   ; new value
04CA   2A EE 19               LD   hl,(vPointer)   
04CD   73                     LD   (hl),e   
04CE   3A E6 19               LD   a,(vDataWidth)   
04D1   3D                     DEC   a   ; is it byte?
04D2   28 02                  JR   z,assign1   
04D4   23                     INC   hl   
04D5   72                     LD   (hl),d   
04D6                ASSIGN1:      
04D6   DD E9                  JP   (ix)   
04D8                BLOCK:       
04D8   C5                     PUSH   bc   ; return pointer to first { of block
04D9   03                     INC   bc   
04DA   16 01                  LD   d,1   ; nesting: count first parenthesis
04DC                BLOCK1:      ; Skip to end of definition
04DC   0A                     LD   a,(bc)   ; Get the next character
04DD   03                     INC   bc   ; Point to next character
04DE   FE 21                  CP   " " + 1   ; ignore whitespace
04E0   38 FA                  JR   c,block1   
04E2   FE 29                  CP   ")"   
04E4   28 2D                  JR   z,block4   
04E6   FE 7D                  CP   "}"   
04E8   28 29                  JR   z,block4   
04EA   FE 5D                  CP   "]"   
04EC   28 25                  JR   z,block4   
04EE   FE 28                  CP   "("   
04F0   28 16                  JR   z,block2   
04F2   FE 7B                  CP   "{"   
04F4   28 12                  JR   z,block2   
04F6   FE 5B                  CP   "["   
04F8   28 0E                  JR   z,block2   
04FA   FE 27                  CP   "'"   
04FC   28 0D                  JR   z,block3   
04FE   FE 60                  CP   "`"   
0500   28 09                  JR   z,block3   
0502   FE 22                  CP   $22   
0504   28 05                  JR   z,block3   
0506   18 D4                  JR   block1   
0508                BLOCK2:      
0508   14                     INC   d   
0509   18 D1                  JR   block1   
050B                BLOCK3:      
050B   3E 80                  LD   a,$80   
050D   AA                     XOR   d   
050E   47                     LD   b,a   
050F   20 CB                  JR   nz,block1   
0511   18 03                  JR   block5   
0513                BLOCK4:      
0513   15                     DEC   d   
0514   20 C6                  JR   nz,block1   ; get the next element
0516                BLOCK5:      
0516   0B                     DEC   bc   ; balanced, exit
0517   DD E9                  JP   (ix)   
0519                BLOCKEND:      
0519   D9                     EXX      
051A   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
051D   FD 56 01               LD   d,(iy+1)   
0520   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0523   FD 46 07               LD   b,(iy+7)   
0526   D9                     EXX      
0527   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
052A   FD 56 03               LD   d,(iy+3)   
052D   EB                     EX   de,hl   
052E   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0531   FD 56 01               LD   d,(iy+1)   
0534                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
0534   13                     INC   de   ; for carry flag <=
0535   B7                     OR   a   
0536   ED 52                  SBC   hl,de   
0538   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
053A   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
053C   FD 5D                  LD   e,iyl   
053E   21 08 00               LD   hl,8   
0541   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0542   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0543   18 0C                  JR   blockend2   
0545                BLOCKEND1:      ; same scope
0545   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0548   FD 56 03               LD   d,(iy+3)   
054B   EB                     EX   de,hl   
054C   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
054E   FD 5D                  LD   e,iyl   
0550   EB                     EX   de,hl   
0551                BLOCKEND2:      
0551   44 4D                  LD   bc,hl   ; bc = hl = BP
0553   B7                     OR   a   ; hl = BP - SP = count
0554   ED 72                  SBC   hl,sp   
0556   C5                     PUSH   bc   ; bc = count, hl = BP
0557   44 4D                  LD   bc,hl   
0559   E1                     POP   hl   
055A   2B                     DEC   hl   ; hl = BP-1
055B   1B                     DEC   de   ; de = args*-1
055C   ED B8                  LDDR      
055E   13                     INC   de   ; hl = new tos
055F   EB                     EX   de,hl   
0560   F9                     LD   sp,hl   ; sp = new tos
0561   D9                     EXX      ; bc = IP, iy = oldBP
0562   D5                     PUSH   de   
0563   C5                     PUSH   bc   
0564   D9                     EXX      
0565   C1                     POP   bc   
0566   FD E1                  POP   iy   
0568   DD E9                  JP   (ix)   
056A                BYTES:       
056A   21 01 00               LD   hl,1   
056D                BYTES1:      
056D   22 E6 19               LD   (vDataWidth),hl   
0570   DD E9                  JP   (ix)   
0572                CHAR:        
0572   21 00 00               LD   hl,0   ; if "" is empty or null
0575                CHAR1:       
0575   03                     INC   bc   ; point to next char
0576   0A                     LD   a,(bc)   
0577   FE 27                  CP   "'"   ; ' is the terminator
0579   28 09                  JR   z,char3   
057B   FE 5C                  CP   $5c   ; \ is the escape
057D   20 02                  JR   nz,char2   
057F   03                     INC   bc   
0580   0A                     LD   a,(bc)   
0581                CHAR2:       
0581   6F                     LD   l,a   
0582   18 F1                  JR   char1   
0584                CHAR3:       
0584   E5                     PUSH   hl   
0585   DD E9                  JP   (ix)   
0587                COMMAND:      
0587   03                     INC   bc   
0588   0A                     LD   a,(bc)   
0589   FE 5C                  CP   $5C   ; \\ comment
058B   28 3D                  JR   z,comment   
058D   FE 61                  CP   "a"   ; \a absolute
058F   CA A7 03               JP   z,abs1   
0592   FE 62                  CP   "b"   ; \b bytes
0594   CA 6A 05               JP   z,bytes   
0597   FE 66                  CP   "f"   ; \f func
0599   CA 37 06               JP   z,func   
059C   FE 46                  CP   "F"   ; \F false
059E   CA 31 06               JP   z,false1   
05A1   FE 69                  CP   "i"   ; \i input
05A3   CA 3F 07               JP   z,input   
05A6   FE 6B                  CP   "k"   ; \k key
05A8   CA 4A 07               JP   z,key   
05AB   FE 6F                  CP   "o"   ; \o output
05AD   CA 9F 07               JP   z,output   
05B0   FE 72                  CP   "r"   ; \r repeat
05B2   CA AE 07               JP   z,repeat   
05B5   FE 73                  CP   "s"   ; \s select
05B7   CA FB 07               JP   z,select   
05BA   FE 54                  CP   "T"   ; \T true
05BC   CA 2B 06               JP   z,true1   
05BF   FE 77                  CP   "w"   ; \w words
05C1   CA 05 08               JP   z,words   
05C4   21 01 00               LD   hl,1   ; error 1: unknown command
05C7   C3 79 09               JP   error   
05CA                COMMENT:      
05CA   03                     INC   bc   ; point to next char
05CB   0A                     LD   a,(bc)   
05CC   FE 20                  CP   " "   ; terminate on any char less than SP
05CE   30 FA                  JR   nc,comment   
05D0   0B                     DEC   bc   
05D1   DD E9                  JP   (ix)   
05D3                DOT:         
05D3   E1                     POP   hl   
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   FE 68                  CP   "h"   
05D8   20 05                  JR   nz,dot1   
05DA   CD 57 08               CALL   prthex   
05DD   18 17                  JR   dot4   
05DF                DOT1:        
05DF   FE 73                  CP   "s"   
05E1   20 05                  JR   nz,dot2   
05E3   CD 7A 08               CALL   prtstr   
05E6   18 0E                  JR   dot4   
05E8                DOT2:        
05E8   FE 63                  CP   "c"   
05EA   20 06                  JR   nz,dot3   
05EC   7D                     LD   a,l   
05ED   CD 85 00               CALL   putchar   
05F0   18 04                  JR   dot4   
05F2                DOT3:        
05F2   0B                     DEC   bc   
05F3   CD 0F 08               CALL   prtdec   
05F6                DOT4:        
05F6   3E 20                  LD   a," "   
05F8   CD 85 00               CALL   putchar   
05FB   DD E9                  JP   (ix)   
05FD                             ; division subroutine.
05FD                             ; bc: divisor, de: dividend, hl: remainder
05FD                DIVIDE:      
05FD   21 00 00               LD   hl,0   ; zero the remainder
0600   3E 10                  LD   a,16   ; loop counter
0602                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0602   CB 21                  SLA   c   
0604   CB 10                  RL   b   
0606   ED 6A                  ADC   hl,hl   
0608   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060A   38 03                  JR   c,divide2   
060C   0C                     INC   c   
060D   18 01                  JR   divide3   
060F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
060F   19                     ADD   hl,de   
0610                DIVIDE3:      
0610   3D                     DEC   a   
0611   20 EF                  JR   nz,divide1   
0613   50 59                  LD   de,bc   ; result from bc to de
0615   C9                     RET      
0616                             ; hl = value1, de = value2
0616                             ; hl = result
0616                EQUALS:      
0616   B7                     OR   a   ; reset the carry flag
0617   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0619   28 10                  JR   z,true1   
061B   C3 31 06               JP   false1   
061E                             ; hl = value1 de = value2
061E                             ; hl = result
061E                LESSTHANEQ:      
061E   B7                     OR   a   
061F   ED 52                  SBC   hl,de   
0621   18 05                  JR   lessthan1   
0623                             ; hl = value1 de = value2
0623                             ; hl = result
0623                LESSTHAN:      
0623   B7                     OR   a   
0624   ED 52                  SBC   hl,de   
0626   28 09                  JR   z,false1   
0628                LESSTHAN1:      
0628   FA 31 06               JP   m,false1   
062B                TRUE1:       
062B   21 FF FF               LD   hl,TRUE   
062E   E5                     PUSH   hl   
062F   DD E9                  JP   (ix)   
0631                NULL1:       
0631                FALSE1:      
0631   21 00 00               LD   hl,FALSE   
0634   E5                     PUSH   hl   
0635   DD E9                  JP   (ix)   
0637                             ; arg_list* block* -- ptr
0637                FUNC:        
0637   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heapptr
063A   D1                     POP   de   ; hl = heapPtr, de = block
063B   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
063C   E3                     EX   (sp),hl   
063D   EB                     EX   de,hl   
063E   73                     LD   (hl),e   ; compile arg_list*
063F   23                     INC   hl   
0640   72                     LD   (hl),d   
0641   23                     INC   hl   
0642   D1                     POP   de   ; de = block*
0643   13                     INC   de   
0644   C5                     PUSH   bc   ; (sp) = IP
0645   06 01                  LD   b,1   ; b = nesting
0647                FUNC1:       
0647   1A                     LD   a,(de)   
0648   13                     INC   de   
0649   77                     LD   (hl),a   
064A   23                     INC   hl   
064B   FE 29                  CP   ")"   
064D   28 2D                  JR   z,func4   
064F   FE 7D                  CP   "}"   
0651   28 29                  JR   z,func4   
0653   FE 5D                  CP   "]"   
0655   28 25                  JR   z,func4   
0657   FE 28                  CP   "("   
0659   28 16                  JR   z,func2   
065B   FE 7B                  CP   "{"   
065D   28 12                  JR   z,func2   
065F   FE 5B                  CP   "["   
0661   28 0E                  JR   z,func2   
0663   FE 22                  CP   DQUOTE   
0665   28 0D                  JR   z,func3   
0667   FE 27                  CP   "'"   
0669   28 09                  JR   z,func3   
066B   FE 60                  CP   "`"   
066D   28 05                  JR   z,func3   
066F   18 D6                  JR   func1   
0671                FUNC2:       
0671   04                     INC   b   
0672   18 D3                  JR   func1   
0674                FUNC3:       
0674   3E 80                  LD   a,$80   
0676   A8                     XOR   b   
0677   47                     LD   b,a   
0678   20 CD                  JR   nz,func1   
067A   18 03                  JR   func4a   
067C                FUNC4:       
067C   05                     DEC   b   
067D   20 C8                  JR   nz,func1   ; get the next element
067F                FUNC4A:      
067F   23                     INC   hl   
0680   C1                     POP   bc   ; de = defstart, hl = IP
0681   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = defstart
0685   D5                     PUSH   de   
0686   22 EC 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0689   DD E9                  JP   (ix)   
068B                             ; execute a block of code which ends with }
068B                             ; creates a root scope if BP == stack
068B                             ; else uses outer scope
068B                GO:          
068B   D1                     POP   de   ; de = block*
068C                GO0:         
068C   7B                     LD   a,e   ; if block* == null, exit
068D   B2                     OR   d   
068E   20 02                  JR   nz,go1   
0690   DD E9                  JP   (ix)   
0692                GO1:         
0692   1A                     LD   a,(de)   
0693   FE 7B                  CP   "{"   
0695   C2 CC 06               JP   nz,go10   
0698   13                     INC   de   
0699   C5                     PUSH   bc   ; push IP
069A   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
069D   FD 44                  LD   b,iyh   
069F   FD 4D                  LD   c,iyl   
06A1   B7                     OR   a   ; hl = stack - BP = root_scope
06A2   ED 42                  SBC   hl,bc   
06A4   7D                     LD   a,l   ; if root_scope, skip
06A5   B4                     OR   h   
06A6   28 11                  JR   z,go2   
06A8   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06AB   FD 46 05               LD   b,(iy+5)   
06AE   C5                     PUSH   bc   
06AF   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
06B2   FD 46 03               LD   b,(iy+3)   
06B5   60 69                  LD   hl,bc   
06B7   18 05                  JR   go3   
06B9                GO2:         
06B9   E5                     PUSH   hl   ; push arg_list (null)
06BA   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
06BD   39                     ADD   hl,sp   
06BE                GO3:         
06BE   E5                     PUSH   hl   ; push first_arg
06BF   FD E5                  PUSH   iy   ; push BP
06C1   FD 21 00 00            LD   iy,0   ; BP = SP
06C5   FD 39                  ADD   iy,sp   
06C7   42 4B                  LD   bc,de   ; bc = de = block*-1
06C9   0B                     DEC   bc   
06CA   DD E9                  JP   (ix)   
06CC                GO10:        ; execute code at pointer
06CC   EB                     EX   de,hl   ; hl = code*
06CD   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
06CE   23                     INC   hl   
06CF   56                     LD   d,(hl)   
06D0   23                     INC   hl   
06D1   EB                     EX   de,hl   
06D2   7D                     LD   a,l   ; if arg_list* != null skip
06D3   B4                     OR   h   
06D4   20 03                  JR   nz,go11   
06D6   C5                     PUSH   bc   ; push IP
06D7   18 E0                  JR   go2   
06D9                GO11:        
06D9   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
06DA   7E                     LD   a,(hl)   
06DB   23                     INC   hl   
06DC   B7                     OR   a   
06DD   28 05                  JR   z,go13   
06DF                GO12:        
06DF   3B                     DEC   sp   
06E0   3B                     DEC   sp   
06E1   3D                     DEC   a   
06E2   20 FB                  JR   nz,go12   
06E4                GO13:        
06E4   C5                     PUSH   bc   ; push IP
06E5   E5                     PUSH   hl   ; push arg_list*
06E6   2B                     DEC   hl   ; hl = num_args*
06E7   2B                     DEC   hl   
06E8   7E                     LD   a,(hl)   ; hl = num_args * 2
06E9   87                     ADD   a,a   
06EA   C6 04                  ADD   a,4   ; offset for IP and arg_list
06EC   6F                     LD   l,a   
06ED   26 00                  LD   h,$0   
06EF   39                     ADD   hl,sp   ; hl = first_arg*
06F0   18 CC                  JR   go3   
06F2                HEXNUM:      
06F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F5                HEXNUM1:      
06F5   03                     INC   bc   
06F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
06F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
06F9   28 02                  JR   z,hexnum2   ; no a decimal
06FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
06FD                HEXNUM2:      
06FD   D6 30                  SUB   $30   ; form decimal digit
06FF   DA 91 07               JP   c,num2   
0702   FE 10                  CP   $0F+1   
0704   D2 91 07               JP   nc,num2   
0707   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0708   29                     ADD   hl,hl   ; 4X
0709   29                     ADD   hl,hl   ; 8X
070A   29                     ADD   hl,hl   ; 16X
070B   85                     ADD   a,l   ; add into bottom of hl
070C   6F                     LD   l,a   
070D   18 E6                  JR   hexnum1   
070F                IDENTU:      
070F   0A                     LD   a,(bc)   ; a = identifier char
0710   D6 41                  SUB   "A"   ; "A" = 0
0712   18 05                  JR   ident1   
0714                IDENTL:      
0714   0A                     LD   a,(bc)   
0715   D6 61                  SUB   "a"   
0717   C6 1A                  ADD   a,26   
0719                IDENT1:      
0719   87                     ADD   a,a   ; l = a * 2
071A   6F                     LD   l,a   
071B   26 19                  LD   h,msb(vars)   
071D   22 EE 19               LD   (vPointer),hl   ; store address in setter
0720   5E                     LD   e,(hl)   
0721   23                     INC   hl   
0722   56                     LD   d,(hl)   
0723   D5                     PUSH   de   
0724   DD E9                  JP   (ix)   
0726                             ; if
0726                             ; condition then -- value
0726                IF:          
0726   03                     INC   bc   
0727   0A                     LD   a,(bc)   
0728   FE 3F                  CP   "?"   
072A   28 06                  JR   z,ifte   
072C   0B                     DEC   bc   
072D   11 00 00               LD   de,0   ; NUL pointer for else
0730   18 01                  JR   ifte1   
0732                             ; ifte
0732                             ; condition then else -- value
0732                IFTE:        
0732   D1                     POP   de   ; de = else
0733                IFTE1:       
0733   E1                     POP   hl   ; hl = then
0734   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0735   7C                     LD   a,h   
0736   B5                     OR   l   
0737   E1                     POP   hl   ; hl = then
0738   CA 8C 06               JP   z,go0   ; if z de = else
073B   EB                     EX   de,hl   ; condition = false, de = then
073C   C3 8C 06               JP   go0   
073F                             ; Z80 port input
073F                             ; port -- value
073F                INPUT:       
073F   E1                     POP   hl   
0740   59                     LD   e,c   ; save IP
0741   4D                     LD   c,l   
0742   ED 68                  IN   l,(c)   
0744   26 00                  LD   h,0   
0746   4B                     LD   c,e   ; restore IP
0747   E5                     PUSH   hl   
0748   DD E9                  JP   (ix)   
074A                KEY:         
074A   CD 81 00               CALL   getchar   
074D   26 00                  LD   h,0   
074F   6F                     LD   l,a   
0750   E5                     PUSH   hl   
0751   DD E9                  JP   (ix)   
0753                MUL:         
0753   D1                     POP   de   ; get first value
0754   E1                     POP   hl   
0755   C5                     PUSH   bc   ; Preserve the IP
0756   44                     LD   b,h   ; bc = 2nd value
0757   4D                     LD   c,l   
0758   21 00 00               LD   hl,0   
075B   3E 10                  LD   a,16   
075D                MUL2:        
075D   29                     ADD   hl,hl   
075E   CB 13                  RL   e   
0760   CB 12                  RL   d   
0762   30 04                  JR   nc,$+6   
0764   09                     ADD   hl,bc   
0765   30 01                  JR   nc,$+3   
0767   13                     INC   de   
0768   3D                     DEC   a   
0769   20 F2                  JR   nz,mul2   
076B   C1                     POP   bc   ; Restore the IP
076C   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
076D   DD E9                  JP   (ix)   
076F                NUM:         
076F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0772   0A                     LD   a,(bc)   ; Get numeral or -
0773   FE 2D                  CP   "-"   
0775   20 01                  JR   nz,num0   
0777   03                     INC   bc   ; move to next char, no flags affected
0778                NUM0:        
0778   08                     EX   af,af'   ; save zero flag = 0 for later
0779                NUM1:        
0779   0A                     LD   a,(bc)   ; read digit
077A   D6 30                  SUB   "0"   ; less than 0?
077C   38 13                  JR   c,num2   ; not a digit, exit loop
077E   FE 0A                  CP   10   ; greater that 9?
0780   30 0F                  JR   nc,num2   ; not a digit, exit loop
0782   03                     INC   bc   ; inc IP
0783   54 5D                  LD   de,hl   ; multiply hl * 10
0785   29                     ADD   hl,hl   
0786   29                     ADD   hl,hl   
0787   19                     ADD   hl,de   
0788   29                     ADD   hl,hl   
0789   85                     ADD   a,l   ; add digit in a to hl
078A   6F                     LD   l,a   
078B   3E 00                  LD   a,0   
078D   8C                     ADC   a,h   
078E   67                     LD   h,a   
078F   18 E8                  JR   num1   
0791                NUM2:        
0791   0B                     DEC   bc   
0792   08                     EX   af,af'   ; restore zero flag
0793   20 07                  JR   nz,num3   
0795   EB                     EX   de,hl   ; negate the value of hl
0796   21 00 00               LD   hl,0   
0799   B7                     OR   a   ; jump to sub2
079A   ED 52                  SBC   hl,de   
079C                NUM3:        
079C   E5                     PUSH   hl   ; Put the number on the stack
079D   DD E9                  JP   (ix)   ; and process the next character
079F                             ; Z80 port output
079F                             ; value port --
079F                OUTPUT:      
079F   E1                     POP   hl   
07A0   59                     LD   e,c   ; save IP
07A1   4D                     LD   c,l   
07A2   E1                     POP   hl   
07A3   ED 69                  OUT   (c),l   
07A5   4B                     LD   c,e   ; restore IP
07A6   DD E9                  JP   (ix)   
07A8                REMAIN:      
07A8   2A F4 19               LD   hl,(vRemain)   
07AB   E5                     PUSH   hl   
07AC   DD E9                  JP   (ix)   
07AE                REPEAT:      
07AE   DD E9                  JP   (ix)   
07B0                             ; shiftLeft
07B0                             ; value count -- value2          shift left count places
07B0                SHIFTLEFT:      
07B0   50 59                  LD   de,bc   ; save IP
07B2   C1                     POP   bc   ; bc = count
07B3   41                     LD   b,c   ; b = loop counter
07B4   E1                     POP   hl   
07B5   04                     INC   b   ; test for counter=0 case
07B6   18 01                  JR   shiftLeft2   
07B8                SHIFTLEFT1:      
07B8   29                     ADD   hl,hl   ; left shift hl
07B9                SHIFTLEFT2:      
07B9   10 FD                  DJNZ   shiftLeft1   
07BB   E5                     PUSH   hl   
07BC   42 4B                  LD   bc,de   ; restore IP
07BE   DD E9                  JP   (ix)   
07C0                             ; shiftRight
07C0                             ; value count -- value2          shift left count places
07C0                SHIFTRIGHT:      
07C0   50 59                  LD   de,bc   ; save IP
07C2   C1                     POP   bc   ; bc = count
07C3   41                     LD   b,c   ; b = loop counter
07C4   E1                     POP   hl   
07C5   04                     INC   b   ; test for counter=0 case
07C6   18 04                  JR   shiftRight2   
07C8                SHIFTRIGHT1:      
07C8   CB 3C                  SRL   h   ; right shift hl
07CA   CB 1D                  RR   l   
07CC                SHIFTRIGHT2:      
07CC   10 FA                  DJNZ   shiftRight1   
07CE   E5                     PUSH   hl   
07CF   42 4B                  LD   bc,de   ; restore IP
07D1   DD E9                  JP   (ix)   
07D3                             ; string
07D3                             ; -- ptr                        ; points to start of string chars,
07D3                             ; length is stored at start - 2 bytes
07D3                STRING:      
07D3   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
07D6   23                     INC   hl   ; skip length field to start
07D7   23                     INC   hl   
07D8   E5                     PUSH   hl   ; save start of string
07D9   03                     INC   bc   ; point to next char
07DA   18 03                  JR   string2   
07DC                STRING1:      
07DC   77                     LD   (hl),a   
07DD   23                     INC   hl   ; increase count
07DE   03                     INC   bc   ; point to next char
07DF                STRING2:      
07DF   0A                     LD   a,(bc)   
07E0   FE 22                  CP   DQUOTE   ; " is the string terminator
07E2   20 F8                  JR   nz,string1   
07E4   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07E6   20 F4                  JR   nz,string1   
07E8   AF                     XOR   a   ; write NUL to terminate string
07E9   77                     LD   (hl),a   ; hl = end of string
07EA   23                     INC   hl   
07EB   22 EC 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
07EE   2B                     DEC   hl   ; hl = end of string without terminator
07EF   D1                     POP   de   ; de = start of string
07F0   D5                     PUSH   de   ; return start of string
07F1   B7                     OR   a   ; hl = length bytes, de = start of string
07F2   ED 52                  SBC   hl,de   
07F4   EB                     EX   de,hl   
07F5   2B                     DEC   hl   ; write length bytes to length field at start - 2
07F6   72                     LD   (hl),d   
07F7   2B                     DEC   hl   
07F8   73                     LD   (hl),e   
07F9   DD E9                  JP   (ix)   
07FB                             ; select
07FB                             ; index array -- value
07FB                SELECT:      
07FB   D1                     POP   de   ; de = array
07FC   E1                     POP   hl   ; hl = index
07FD   29                     ADD   hl,hl   ; if data width = 2 then double
07FE   19                     ADD   hl,de   ; add addr
07FF   5E                     LD   e,(hl)   
0800   23                     INC   hl   
0801   56                     LD   d,(hl)   
0802   C3 8C 06               JP   go0   
0805                WORDS:       
0805   21 02 00               LD   hl,2   
0808   C3 6D 05               JP   bytes1   
080B                             ; 
080B                             ; 
080B                             ; 
080B                             ; 
080B                             ; 
080B                             ; c b --
080B                             ; loops until c = 0
080B                LOOP:        
080B   DD E9                  JP   (ix)   
080D                             ;     pop de                      ; de = block                    c
080D                             ;     pop hl                      ; hl = condition
080D                             ;     push de
080D                             ;     push bc                     ; push IP
080D                             ;     ld bc,de                    ; bc = block
080D                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
080D                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
080D                             ;     push de                     ; push ScopeBP
080D                             ;     push iy                     ; push BP
080D                             ;     ld iy,0                     ; iy = sp
080D                             ;     add iy,sp
080D                             ; loop1:
080D                             ;     ld a,l                      ; bc = block, hl = condition = zero?
080D                             ;     or h
080D                             ;     jr z,loop3
080D                             ;     ld de,loop2-1               ; IP return address
080D                             ;     push de
080D                             ;     ld e,(iy+2)                 ; push parent ScopeBP
080D                             ;     ld d,(iy+3)
080D                             ;     push de                     ;
080D                             ;     push iy                     ; push BP
080D                             ;     ld iy,0                     ; iy = sp
080D                             ;     add iy,sp
080D                             ;     push hl                     ; push condition
080D                             ;     dec bc
080D                             ;     jp (ix)
080D                             ; loop2:
080D                             ;     db ESC                      ; escape from interpreter
080D                             ;     ld c,(iy+6)                 ; bc = block
080D                             ;     ld b,(iy+7)
080D                             ;     pop hl                      ; hl = condition
080D                             ;     jr loop1
080D                             ; loop3:
080D                             ;     ld d,iyh                    ; de = BP
080D                             ;     ld e,iyl
080D                             ;     ex de,hl                    ; hl = BP, de = result
080D                             ;     ld sp,hl                    ; sp = BP
080D                             ;     pop hl                      ; hl = old BP
080D                             ;     pop bc                      ; pop ScopeBP (discard)
080D                             ;     pop bc                      ; bc = IP
080D                             ;     ld sp,hl                    ; sp = old BP
080D                             ;     ld iy,0                     ; iy = sp
080D                             ;     add iy,sp
080D                             ;     ld ix,(vNext)                  ; needed?
080D                             ;     jp (ix)
080D                             ; str -- num
080D                             ; hash:
080D                             ; pop hl
080D                             ; push bc
080D                             ; ld bc,hl
080D                             ; call hashStr
080D                             ; pop bc
080D                             ; push hl
080D                             ; jp (ix)
080D                             ; sqrt1:
080D                             ;     pop hl
080D                             ;     push bc
080D                             ;     call squareRoot
080D                             ;     ld (vRemain),bc
080D                             ;     pop bc
080D                             ;     push de
080D                             ;     jp (ix)
080D                FILTER:      
080D                MAP:         
080D                SCAN:        
080D   DD E9                  JP   (ix)   
080F                             ; -------------------------------------------------------------------------------
080F                             ; ; hash C-string
080F                             ; ; BC = str
080F                             ; ; HL = hash
080F                             ; hashStr:
080F                             ;     ld (vHashStr),bc                    ; store source string
080F                             ;     ld hl,0
080F                             ; hashStr1:
080F                             ;     ld a,(bc)                           ; load next char
080F                             ;     inc bc
080F                             ;     cp 0                                ; NUL?
080F                             ;     ret z
080F                             ; hashStr2:
080F                             ;     ld d,0
080F                             ;     ld e,a
080F                             ;     add hl,de
080F                             ;     ld de,hl                            ; hl *= 193 (11000001)
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,de                           ; add
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,hl                           ; shift left
080F                             ;     add hl,de                           ; add
080F                             ;     jr hashStr1
080F                             ; ; squareroot
080F                             ; ; Input: HL = value
080F                             ; ; Result: DE = square root BC = remainder
080F                             ; squareRoot:
080F                             ;     ld bc,0800h
080F                             ;     ld e,c
080F                             ;     xor a
080F                             ; squareRoot1:
080F                             ;     add hl,hl
080F                             ;     rl c
080F                             ;     adc hl,hl
080F                             ;     rl c
080F                             ;     jr nc,$+4
080F                             ;     set 0,l
080F                             ;     ld a,e
080F                             ;     add a,a
080F                             ;     ld e,a
080F                             ;     add a,a
080F                             ;     bit 0,l
080F                             ;     jr nz,$+5
080F                             ;     sub c
080F                             ;     jr nc,squareRoot4
080F                             ;     ld a,c
080F                             ;     sub e
080F                             ;     inc e
080F                             ;     sub e
080F                             ;     ld c,a
080F                             ; squareRoot4:
080F                             ;     djnz squareRoot1
080F                             ;     bit 0,l
080F                             ;     jr z,squareRoot5
080F                             ;     inc b
080F                             ; squareRoot5:
080F                             ;     ld d,0
080F                             ;     ret
080F                             ; print decimal
080F                             ; hl = value
080F                PRTDEC:      
080F   CB 7C                  BIT   7,h   
0811   28 0B                  JR   z,prtdec0   
0813   3E 2D                  LD   a,"-"   
0815   CD 85 00               CALL   putchar   
0818   AF                     XOR   a   
0819   95                     SUB   l   
081A   6F                     LD   l,a   
081B   9F                     SBC   a,a   
081C   94                     SUB   h   
081D   67                     LD   h,a   
081E                PRTDEC0:      
081E   C5                     PUSH   bc   
081F   0E 00                  LD   c,0   ; leading zeros flag = false
0821   11 F0 D8               LD   de,-10000   
0824   CD 40 08               CALL   prtdec1   
0827   11 18 FC               LD   de,-1000   
082A   CD 40 08               CALL   prtdec1   
082D   11 9C FF               LD   de,-100   
0830   CD 40 08               CALL   prtdec1   
0833   1E F6                  LD   e,-10   
0835   CD 40 08               CALL   prtdec1   
0838   0C                     INC   c   ; flag = true for at least digit
0839   1E FF                  LD   e,-1   
083B   CD 40 08               CALL   prtdec1   
083E   C1                     POP   bc   
083F   C9                     RET      
0840                PRTDEC1:      
0840   06 2F                  LD   b,"0"-1   
0842                PRTDEC2:      
0842   04                     INC   b   
0843   19                     ADD   hl,de   
0844   38 FC                  JR   c,prtdec2   
0846   ED 52                  SBC   hl,de   
0848   3E 30                  LD   a,"0"   
084A   B8                     CP   b   
084B   20 05                  JR   nz,prtdec3   
084D   AF                     XOR   a   
084E   B1                     OR   c   
084F   C8                     RET   z   
0850   18 01                  JR   prtdec4   
0852                PRTDEC3:      
0852   0C                     INC   c   
0853                PRTDEC4:      
0853   78                     LD   a,b   
0854   C3 85 00               JP   putchar   
0857                PRTHEX:      ; display hl as a 16-bit number in hex.
0857   C5                     PUSH   bc   ; preserve the IP
0858   7C                     LD   a,h   
0859   CD 62 08               CALL   prthex2   
085C   7D                     LD   a,l   
085D   CD 62 08               CALL   prthex2   
0860   C1                     POP   bc   
0861   C9                     RET      
0862                PRTHEX2:      
0862   4F                     LD   c,a   
0863   1F                     RRA      
0864   1F                     RRA      
0865   1F                     RRA      
0866   1F                     RRA      
0867   CD 6B 08               CALL   prthex3   
086A   79                     LD   a,c   
086B                PRTHEX3:      
086B   E6 0F                  AND   0x0F   
086D   C6 90                  ADD   a,0x90   
086F   27                     DAA      
0870   CE 40                  ADC   a,0x40   
0872   27                     DAA      
0873   C3 85 00               JP   putchar   
0876                PRTSTR0:      
0876   CD 85 00               CALL   putchar   
0879   23                     INC   hl   
087A                PRTSTR:      
087A   7E                     LD   a,(hl)   
087B   B7                     OR   a   
087C   20 F8                  JR   nz,prtstr0   
087E   C9                     RET      
087F                             ; **************************************************************************
087F                             ; calculate nesting value
087F                             ; a is char to be tested,
087F                             ; e is the nesting value (initially 0)
087F                             ; e is increased by ( and [
087F                             ; e is decreased by ) and ]
087F                             ; e has its bit 7 toggled by `
087F                             ; limited to 127 levels
087F                             ; **************************************************************************
087F                NESTING:      
087F   FE 22                  CP   DQUOTE   ; quote char
0881   28 06                  JR   z,nesting0   
0883   FE 60                  CP   "`"   ; quote char
0885   28 02                  JR   z,nesting0   
0887   18 0A                  JR   nesting1   
0889                NESTING0:      
0889   CB 7B                  BIT   7,e   
088B   28 03                  JR   z,nesting1a   
088D   CB BB                  RES   7,e   
088F   C9                     RET      
0890                NESTING1A:      
0890   CB FB                  SET   7,e   
0892   C9                     RET      
0893                NESTING1:      
0893   CB 7B                  BIT   7,e   
0895   C0                     RET   nz   
0896   FE 7B                  CP   "{"   
0898   28 08                  JR   z,nesting2   
089A   FE 5B                  CP   "["   
089C   28 04                  JR   z,nesting2   
089E   FE 28                  CP   "("   
08A0   20 02                  JR   nz,nesting3   
08A2                NESTING2:      
08A2   1C                     INC   e   
08A3   C9                     RET      
08A4                NESTING3:      
08A4   FE 7D                  CP   "}"   
08A6   28 07                  JR   z,nesting4   
08A8   FE 5D                  CP   "]"   
08AA   28 03                  JR   z,nesting4   
08AC   FE 29                  CP   ")"   
08AE   C0                     RET   nz   
08AF                NESTING4:      
08AF   1D                     DEC   e   
08B0   C9                     RET      
08B1                PROMPT:      
08B1   CD C1 08               CALL   printStr   
08B4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08B9   C9                     RET      
08BA                CRLF:        
08BA   CD C1 08               CALL   printStr   
08BD   0D 0A 00               .CSTR   "\r\n"   
08C0   C9                     RET      
08C1                             ; prints a null teminated string
08C1                             ; the string should be immedaitely following the call
08C1                PRINTSTR:      
08C1   E3                     EX   (sp),hl   ; swap			
08C2   CD 7A 08               CALL   prtstr   
08C5   23                     INC   hl   ; inc past NUL
08C6   E3                     EX   (sp),hl   ; put it back	
08C7   C9                     RET      
08C8                             ; executes a null teminated string (null executes exit_)
08C8                             ; the string should be immedaitely following the call
08C8                EXECSTR:      ; create a root stack frame
08C8   C1                     POP   bc   ; bc = code*
08C9   0B                     DEC   bc   ; dec to prepare for next routine
08CA   11 00 00               LD   de,0   
08CD   D5                     PUSH   de   ; push fake IP
08CE   D5                     PUSH   de   ; push null arg_list*
08CF   D5                     PUSH   de   ; push null first_arg*
08D0   D5                     PUSH   de   ; push fake BP
08D1   DD E9                  JP   (ix)   
08D3                             ; arg1 .. argn func -- ?
08D3                CALL:        
08D3   E1                     POP   hl   
08D4   E9                     JP   (hl)   
08D5                INIT:        
08D5   DD 2A EA 19            LD   ix,(vNext)   
08D9   FD 21 80 18            LD   iy,STACK   
08DD   21 80 01               LD   hl,isysVars   
08E0   11 E6 19               LD   de,sysVars   
08E3   01 10 00               LD   bc,8 * 2   
08E6   ED B0                  LDIR      
08E8   21 00 19               LD   hl,vars   ; 52 vars LO HI
08EB   06 34                  LD   b,26*2   
08ED   AF                     XOR   a   
08EE                INIT0:       
08EE   77                     LD   (hl),a   
08EF   23                     INC   hl   
08F0   10 FC                  DJNZ   init0   
08F2   C9                     RET      
08F3                START:       
08F3   31 80 18               LD   sp,STACK   ; start of monty
08F6   CD D5 08               CALL   init   ; setups
08F9   CD C1 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08FC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0909                INTERPRET:      
0909   CD B1 08               CALL   prompt   
090C   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
090F   ED 43 E8 19            LD   (vTIBPtr),bc   
0913                INTERPRET2:      ; calc nesting (a macro might have changed it)
0913   1E 00                  LD   e,0   ; initilize nesting value
0915   C5                     PUSH   bc   ; save offset into TIB,
0916                             ; bc is also the count of chars in TIB
0916   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0919   18 06                  JR   interpret4   
091B                INTERPRET3:      
091B   7E                     LD   a,(hl)   ; a = char in TIB
091C   23                     INC   hl   ; inc pointer into TIB
091D   0B                     DEC   bc   ; dec count of chars in TIB
091E   CD 7F 08               CALL   nesting   ; update nesting value
0921                INTERPRET4:      
0921   79                     LD   a,c   ; is count zero?
0922   B0                     OR   b   
0923   20 F6                  JR   nz,interpret3   ; if not loop
0925   C1                     POP   bc   ; restore offset into TIB
0926                INTERPRET5:      
0926   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0929   FE 20                  CP   $20   ; compare to space
092B   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
092D   FE 00                  CP   $0   ; is it end of string? NUL end of string
092F                             ; ???? NEEDED?
092F   28 27                  JR   z,interpret8   
0931   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0933   28 10                  JR   z,interpret7   ; if anything else its macro/control
0935                             ; macro
0935                             ;  ld (vTIBPtr),bc
0935                             ;  ld hl,ctrlCodes
0935                             ;  add a,l			            ; look up key of macros
0935                             ;  ld l,a
0935                             ;  ld e,(hl)
0935                             ;  ld a,e
0935                             ;  or a
0935                             ;  jr z,macro1
0935                             ;  ld d,msb(macros)
0935                             ;  push de
0935                             ;  call call		            ; monty exec_ operation and jump to it
0935                             ;  db DC1,0
0935                             ; macro1:
0935                             ;  ld bc,(vTIBPtr)
0935   18 DC                  JR   interpret2   
0937                INTERPRET6:      
0937   21 00 1A               LD   hl,TIB   
093A   09                     ADD   hl,bc   
093B   77                     LD   (hl),a   ; store the character in textbuf
093C   03                     INC   bc   
093D   CD 85 00               CALL   putchar   ; echo character to screen
0940   CD 7F 08               CALL   nesting   
0943   18 E1                  JR   interpret5   ; wait for next character
0945                INTERPRET7:      
0945   21 00 1A               LD   hl,TIB   
0948   09                     ADD   hl,bc   
0949   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
094B   23                     INC   hl   
094C   36 0A                  LD   (hl),"\n"   
094E   23                     INC   hl   
094F   03                     INC   bc   
0950   03                     INC   bc   
0951   CD BA 08               CALL   crlf   ; echo character to screen
0954   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0955   B7                     OR   a   
0956   20 CE                  JR   nz,interpret5   
0958                INTERPRET8:      
0958   ED 43 E8 19            LD   (vTIBPtr),bc   
095C   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
095F                             ; we pressed enter
095F   0B                     DEC   bc   
0960                NEXT:        
0960   03                     INC   bc   ; Increment the IP
0961   0A                     LD   a,(bc)   ; Get the next character and dispatch
0962   FE 20                  CP   " "   ; whitespace?
0964   28 FA                  JR   z,next   ; space? ignore
0966   38 07                  JR   c,next1   
0968   6F                     LD   l,a   ; index into table
0969   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
096B   6E                     LD   l,(hl)   ; get low jump address
096C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
096E   E9                     JP   (hl)   ; Jump to routine
096F                NEXT1:       
096F   FE 00                  CP   NUL   ; end of input string?
0971   28 03                  JR   z,exit_   
0973   C3 09 09               JP   interpret   ; no, other whitespace, macros?
0976                EXIT_:       
0976   60 69                  LD   hl,bc   
0978   E9                     JP   (hl)   
0979                ERROR:       
0979   CD C1 08               CALL   printStr   
097C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0983   CD 0F 08               CALL   prtdec   
0986   C3 09 09               JP   interpret   
0989                             ; .pstr "hash",0
0989                             ; dw hash \hsh
0989                             ; .pstr "input",0
0989                             ; dw input \in ?
0989                             ; call define
0989                             ; .pstr "output",0
0989                             ; dw output \out ?
0989                             ; .pstr "key",0
0989                             ; dw key \k
0989                             ; .pstr "loop",0
0989                             ; dw loop \rpt
0989                             ; .pstr "select",0
0989                             ; dw select. \sw
0989                             ; call define
0989                             ; .pstr "filter",0
0989                             ; dw filter \f ?
0989                             ; call define
0989                             ; .pstr "map",0
0989                             ; dw map \m ?
0989                             ; call define
0989                             ; .pstr "scan",0
0989                             ; dw scan.  \fold ?
0989                             ; call define
0989                             ; .pstr "sqrt",0
0989                             ; dw sqrt1 \sqt
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                             ; initialised sys variables
19E6                VDATAWIDTH:   DS   2   ; 
19E8                VTIBPTR:   DS   2   ; 
19EA                VNEXT:    DS   2   ; 
19EC                VHEAPPTR:   DS   2   ; 
19EE                             ; uninitialised sys variables
19EE                VPOINTER:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VLASTDEF:   DS   2   ; 
19F4                VREMAIN:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; 
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
4000   31 80 18               LD   SP,STACK   
4003   CD D5 08               CALL   init   
4006   CD C8 08               CALL   execStr   
4009   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
402D                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
402D   E1                     POP   HL   
402E   E5                     PUSH   HL   
402F   11 0A 00               LD   DE,10   
4032   B7                     OR   A   
4033   ED 52                  SBC   HL,DE   
4035   7D                     LD   A,L   
4036   B4                     OR   H   
4037   28 6E                  JR   Z,expectM_0_2235S43   
4039   CD C1 08               CALL   printStr   
403C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
4066   CD C1 08               CALL   printStr   
4069   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4078   21 0A 00               LD   HL,10   
407B   CD 0F 08               CALL   prtdec   
407E   CD C1 08               CALL   printStr   
4081   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
408E   E1                     POP   hl   
408F   E5                     PUSH   hl   
4090   CD 0F 08               CALL   prtdec   
4093   E1                     POP   hl   
4094   CD C1 08               CALL   printStr   
4097   20 28 23 00            .CSTR   " (#"   
409B   CD 57 08               CALL   prthex   
409E   CD C1 08               CALL   printStr   
40A1   29 0D 0A 00            .CSTR   ")\r\n"   
40A5   76                     HALT      
40A6   00                     .CSTR      
40A7                EXPECTM_0_2235S43:      
40A7   E1                     POP   HL   
40A8                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
40A8   31 80 18               LD   SP,STACK   
40AB   CD D5 08               CALL   init   
40AE   CD C8 08               CALL   execStr   
40B1   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
40D7                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
40D7   E1                     POP   HL   
40D8   E5                     PUSH   HL   
40D9   11 0A 00               LD   DE,10   
40DC   B7                     OR   A   
40DD   ED 52                  SBC   HL,DE   
40DF   7D                     LD   A,L   
40E0   B4                     OR   H   
40E1   28 70                  JR   Z,expectM_0_2236S43   
40E3   CD C1 08               CALL   printStr   
40E6   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
4112   CD C1 08               CALL   printStr   
4115   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4124   21 0A 00               LD   HL,10   
4127   CD 0F 08               CALL   prtdec   
412A   CD C1 08               CALL   printStr   
412D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
413A   E1                     POP   hl   
413B   E5                     PUSH   hl   
413C   CD 0F 08               CALL   prtdec   
413F   E1                     POP   hl   
4140   CD C1 08               CALL   printStr   
4143   20 28 23 00            .CSTR   " (#"   
4147   CD 57 08               CALL   prthex   
414A   CD C1 08               CALL   printStr   
414D   29 0D 0A 00            .CSTR   ")\r\n"   
4151   76                     HALT      
4152   00                     .CSTR      
4153                EXPECTM_0_2236S43:      
4153   E1                     POP   HL   
4154                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
4154   31 80 18               LD   SP,STACK   
4157   CD D5 08               CALL   init   
415A   CD C8 08               CALL   execStr   
415D   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
4183                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
4183   E1                     POP   HL   
4184   E5                     PUSH   HL   
4185   11 14 00               LD   DE,20   
4188   B7                     OR   A   
4189   ED 52                  SBC   HL,DE   
418B   7D                     LD   A,L   
418C   B4                     OR   H   
418D   28 70                  JR   Z,expectM_0_2237S43   
418F   CD C1 08               CALL   printStr   
4192   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
41BE   CD C1 08               CALL   printStr   
41C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D0   21 14 00               LD   HL,20   
41D3   CD 0F 08               CALL   prtdec   
41D6   CD C1 08               CALL   printStr   
41D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E6   E1                     POP   hl   
41E7   E5                     PUSH   hl   
41E8   CD 0F 08               CALL   prtdec   
41EB   E1                     POP   hl   
41EC   CD C1 08               CALL   printStr   
41EF   20 28 23 00            .CSTR   " (#"   
41F3   CD 57 08               CALL   prthex   
41F6   CD C1 08               CALL   printStr   
41F9   29 0D 0A 00            .CSTR   ")\r\n"   
41FD   76                     HALT      
41FE   00                     .CSTR      
41FF                EXPECTM_0_2237S43:      
41FF   E1                     POP   HL   
4200                             ; 
4200                          ;*Macro unroll:  test "\\F", false
4200   31 80 18               LD   SP,STACK   
4203   CD D5 08               CALL   init   
4206   CD C8 08               CALL   execStr   
4209   5C 46 00               .CSTR   "\\F"   
420C                          ;*Macro unroll:  expect "\\F",false
420C   E1                     POP   HL   
420D   E5                     PUSH   HL   
420E   11 00 00               LD   DE,false   
4211   B7                     OR   A   
4212   ED 52                  SBC   HL,DE   
4214   7D                     LD   A,L   
4215   B4                     OR   H   
4216   28 4D                  JR   Z,expectM_0_2239S43   
4218   CD C1 08               CALL   printStr   
421B   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
4224   CD C1 08               CALL   printStr   
4227   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4236   21 00 00               LD   HL,false   
4239   CD 0F 08               CALL   prtdec   
423C   CD C1 08               CALL   printStr   
423F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424C   E1                     POP   hl   
424D   E5                     PUSH   hl   
424E   CD 0F 08               CALL   prtdec   
4251   E1                     POP   hl   
4252   CD C1 08               CALL   printStr   
4255   20 28 23 00            .CSTR   " (#"   
4259   CD 57 08               CALL   prthex   
425C   CD C1 08               CALL   printStr   
425F   29 0D 0A 00            .CSTR   ")\r\n"   
4263   76                     HALT      
4264   00                     .CSTR      
4265                EXPECTM_0_2239S43:      
4265   E1                     POP   HL   
4266                          ;*Macro unroll:  test "\\T", true
4266   31 80 18               LD   SP,STACK   
4269   CD D5 08               CALL   init   
426C   CD C8 08               CALL   execStr   
426F   5C 54 00               .CSTR   "\\T"   
4272                          ;*Macro unroll:  expect "\\T",true
4272   E1                     POP   HL   
4273   E5                     PUSH   HL   
4274   11 FF FF               LD   DE,true   
4277   B7                     OR   A   
4278   ED 52                  SBC   HL,DE   
427A   7D                     LD   A,L   
427B   B4                     OR   H   
427C   28 4D                  JR   Z,expectM_0_2240S43   
427E   CD C1 08               CALL   printStr   
4281   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
428A   CD C1 08               CALL   printStr   
428D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
429C   21 FF FF               LD   HL,true   
429F   CD 0F 08               CALL   prtdec   
42A2   CD C1 08               CALL   printStr   
42A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B2   E1                     POP   hl   
42B3   E5                     PUSH   hl   
42B4   CD 0F 08               CALL   prtdec   
42B7   E1                     POP   hl   
42B8   CD C1 08               CALL   printStr   
42BB   20 28 23 00            .CSTR   " (#"   
42BF   CD 57 08               CALL   prthex   
42C2   CD C1 08               CALL   printStr   
42C5   29 0D 0A 00            .CSTR   ")\r\n"   
42C9   76                     HALT      
42CA   00                     .CSTR      
42CB                EXPECTM_0_2240S43:      
42CB   E1                     POP   HL   
42CC                          ;*Macro unroll:  test "1", 1
42CC   31 80 18               LD   SP,STACK   
42CF   CD D5 08               CALL   init   
42D2   CD C8 08               CALL   execStr   
42D5   31 00                  .CSTR   "1"   
42D7                          ;*Macro unroll:  expect "1",1
42D7   E1                     POP   HL   
42D8   E5                     PUSH   HL   
42D9   11 01 00               LD   DE,1   
42DC   B7                     OR   A   
42DD   ED 52                  SBC   HL,DE   
42DF   7D                     LD   A,L   
42E0   B4                     OR   H   
42E1   28 4C                  JR   Z,expectM_0_2241S43   
42E3   CD C1 08               CALL   printStr   
42E6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
42EE   CD C1 08               CALL   printStr   
42F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4300   21 01 00               LD   HL,1   
4303   CD 0F 08               CALL   prtdec   
4306   CD C1 08               CALL   printStr   
4309   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4316   E1                     POP   hl   
4317   E5                     PUSH   hl   
4318   CD 0F 08               CALL   prtdec   
431B   E1                     POP   hl   
431C   CD C1 08               CALL   printStr   
431F   20 28 23 00            .CSTR   " (#"   
4323   CD 57 08               CALL   prthex   
4326   CD C1 08               CALL   printStr   
4329   29 0D 0A 00            .CSTR   ")\r\n"   
432D   76                     HALT      
432E   00                     .CSTR      
432F                EXPECTM_0_2241S43:      
432F   E1                     POP   HL   
4330                          ;*Macro unroll:  test "2", 2
4330   31 80 18               LD   SP,STACK   
4333   CD D5 08               CALL   init   
4336   CD C8 08               CALL   execStr   
4339   32 00                  .CSTR   "2"   
433B                          ;*Macro unroll:  expect "2",2
433B   E1                     POP   HL   
433C   E5                     PUSH   HL   
433D   11 02 00               LD   DE,2   
4340   B7                     OR   A   
4341   ED 52                  SBC   HL,DE   
4343   7D                     LD   A,L   
4344   B4                     OR   H   
4345   28 4C                  JR   Z,expectM_0_2242S43   
4347   CD C1 08               CALL   printStr   
434A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4352   CD C1 08               CALL   printStr   
4355   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4364   21 02 00               LD   HL,2   
4367   CD 0F 08               CALL   prtdec   
436A   CD C1 08               CALL   printStr   
436D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437A   E1                     POP   hl   
437B   E5                     PUSH   hl   
437C   CD 0F 08               CALL   prtdec   
437F   E1                     POP   hl   
4380   CD C1 08               CALL   printStr   
4383   20 28 23 00            .CSTR   " (#"   
4387   CD 57 08               CALL   prthex   
438A   CD C1 08               CALL   printStr   
438D   29 0D 0A 00            .CSTR   ")\r\n"   
4391   76                     HALT      
4392   00                     .CSTR      
4393                EXPECTM_0_2242S43:      
4393   E1                     POP   HL   
4394                          ;*Macro unroll:  test "1", 1
4394   31 80 18               LD   SP,STACK   
4397   CD D5 08               CALL   init   
439A   CD C8 08               CALL   execStr   
439D   31 00                  .CSTR   "1"   
439F                          ;*Macro unroll:  expect "1",1
439F   E1                     POP   HL   
43A0   E5                     PUSH   HL   
43A1   11 01 00               LD   DE,1   
43A4   B7                     OR   A   
43A5   ED 52                  SBC   HL,DE   
43A7   7D                     LD   A,L   
43A8   B4                     OR   H   
43A9   28 4C                  JR   Z,expectM_0_2243S43   
43AB   CD C1 08               CALL   printStr   
43AE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
43B6   CD C1 08               CALL   printStr   
43B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C8   21 01 00               LD   HL,1   
43CB   CD 0F 08               CALL   prtdec   
43CE   CD C1 08               CALL   printStr   
43D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DE   E1                     POP   hl   
43DF   E5                     PUSH   hl   
43E0   CD 0F 08               CALL   prtdec   
43E3   E1                     POP   hl   
43E4   CD C1 08               CALL   printStr   
43E7   20 28 23 00            .CSTR   " (#"   
43EB   CD 57 08               CALL   prthex   
43EE   CD C1 08               CALL   printStr   
43F1   29 0D 0A 00            .CSTR   ")\r\n"   
43F5   76                     HALT      
43F6   00                     .CSTR      
43F7                EXPECTM_0_2243S43:      
43F7   E1                     POP   HL   
43F8                          ;*Macro unroll:  test "0", 0
43F8   31 80 18               LD   SP,STACK   
43FB   CD D5 08               CALL   init   
43FE   CD C8 08               CALL   execStr   
4401   30 00                  .CSTR   "0"   
4403                          ;*Macro unroll:  expect "0",0
4403   E1                     POP   HL   
4404   E5                     PUSH   HL   
4405   11 00 00               LD   DE,0   
4408   B7                     OR   A   
4409   ED 52                  SBC   HL,DE   
440B   7D                     LD   A,L   
440C   B4                     OR   H   
440D   28 4C                  JR   Z,expectM_0_2244S43   
440F   CD C1 08               CALL   printStr   
4412   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
441A   CD C1 08               CALL   printStr   
441D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
442C   21 00 00               LD   HL,0   
442F   CD 0F 08               CALL   prtdec   
4432   CD C1 08               CALL   printStr   
4435   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4442   E1                     POP   hl   
4443   E5                     PUSH   hl   
4444   CD 0F 08               CALL   prtdec   
4447   E1                     POP   hl   
4448   CD C1 08               CALL   printStr   
444B   20 28 23 00            .CSTR   " (#"   
444F   CD 57 08               CALL   prthex   
4452   CD C1 08               CALL   printStr   
4455   29 0D 0A 00            .CSTR   ")\r\n"   
4459   76                     HALT      
445A   00                     .CSTR      
445B                EXPECTM_0_2244S43:      
445B   E1                     POP   HL   
445C                          ;*Macro unroll:  test "10", 10
445C   31 80 18               LD   SP,STACK   
445F   CD D5 08               CALL   init   
4462   CD C8 08               CALL   execStr   
4465   31 30 00               .CSTR   "10"   
4468                          ;*Macro unroll:  expect "10",10
4468   E1                     POP   HL   
4469   E5                     PUSH   HL   
446A   11 0A 00               LD   DE,10   
446D   B7                     OR   A   
446E   ED 52                  SBC   HL,DE   
4470   7D                     LD   A,L   
4471   B4                     OR   H   
4472   28 4D                  JR   Z,expectM_0_2245S43   
4474   CD C1 08               CALL   printStr   
4477   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4480   CD C1 08               CALL   printStr   
4483   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4492   21 0A 00               LD   HL,10   
4495   CD 0F 08               CALL   prtdec   
4498   CD C1 08               CALL   printStr   
449B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44A8   E1                     POP   hl   
44A9   E5                     PUSH   hl   
44AA   CD 0F 08               CALL   prtdec   
44AD   E1                     POP   hl   
44AE   CD C1 08               CALL   printStr   
44B1   20 28 23 00            .CSTR   " (#"   
44B5   CD 57 08               CALL   prthex   
44B8   CD C1 08               CALL   printStr   
44BB   29 0D 0A 00            .CSTR   ")\r\n"   
44BF   76                     HALT      
44C0   00                     .CSTR      
44C1                EXPECTM_0_2245S43:      
44C1   E1                     POP   HL   
44C2                          ;*Macro unroll:  test "123", 123
44C2   31 80 18               LD   SP,STACK   
44C5   CD D5 08               CALL   init   
44C8   CD C8 08               CALL   execStr   
44CB   31 32 33 00            .CSTR   "123"   
44CF                          ;*Macro unroll:  expect "123",123
44CF   E1                     POP   HL   
44D0   E5                     PUSH   HL   
44D1   11 7B 00               LD   DE,123   
44D4   B7                     OR   A   
44D5   ED 52                  SBC   HL,DE   
44D7   7D                     LD   A,L   
44D8   B4                     OR   H   
44D9   28 4E                  JR   Z,expectM_0_2246S43   
44DB   CD C1 08               CALL   printStr   
44DE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
44E8   CD C1 08               CALL   printStr   
44EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44FA   21 7B 00               LD   HL,123   
44FD   CD 0F 08               CALL   prtdec   
4500   CD C1 08               CALL   printStr   
4503   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4510   E1                     POP   hl   
4511   E5                     PUSH   hl   
4512   CD 0F 08               CALL   prtdec   
4515   E1                     POP   hl   
4516   CD C1 08               CALL   printStr   
4519   20 28 23 00            .CSTR   " (#"   
451D   CD 57 08               CALL   prthex   
4520   CD C1 08               CALL   printStr   
4523   29 0D 0A 00            .CSTR   ")\r\n"   
4527   76                     HALT      
4528   00                     .CSTR      
4529                EXPECTM_0_2246S43:      
4529   E1                     POP   HL   
452A                          ;*Macro unroll:  test "-1",-1
452A   31 80 18               LD   SP,STACK   
452D   CD D5 08               CALL   init   
4530   CD C8 08               CALL   execStr   
4533   2D 31 00               .CSTR   "-1"   
4536                          ;*Macro unroll:  expect "-1",-1
4536   E1                     POP   HL   
4537   E5                     PUSH   HL   
4538   11 FF FF               LD   DE,-1   
453B   B7                     OR   A   
453C   ED 52                  SBC   HL,DE   
453E   7D                     LD   A,L   
453F   B4                     OR   H   
4540   28 4D                  JR   Z,expectM_0_2247S43   
4542   CD C1 08               CALL   printStr   
4545   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
454E   CD C1 08               CALL   printStr   
4551   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4560   21 FF FF               LD   HL,-1   
4563   CD 0F 08               CALL   prtdec   
4566   CD C1 08               CALL   printStr   
4569   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4576   E1                     POP   hl   
4577   E5                     PUSH   hl   
4578   CD 0F 08               CALL   prtdec   
457B   E1                     POP   hl   
457C   CD C1 08               CALL   printStr   
457F   20 28 23 00            .CSTR   " (#"   
4583   CD 57 08               CALL   prthex   
4586   CD C1 08               CALL   printStr   
4589   29 0D 0A 00            .CSTR   ")\r\n"   
458D   76                     HALT      
458E   00                     .CSTR      
458F                EXPECTM_0_2247S43:      
458F   E1                     POP   HL   
4590                          ;*Macro unroll:  test "''", 0
4590   31 80 18               LD   SP,STACK   
4593   CD D5 08               CALL   init   
4596   CD C8 08               CALL   execStr   
4599   27 27 00               .CSTR   "''"   
459C                          ;*Macro unroll:  expect "''",0
459C   E1                     POP   HL   
459D   E5                     PUSH   HL   
459E   11 00 00               LD   DE,0   
45A1   B7                     OR   A   
45A2   ED 52                  SBC   HL,DE   
45A4   7D                     LD   A,L   
45A5   B4                     OR   H   
45A6   28 4D                  JR   Z,expectM_0_2248S43   
45A8   CD C1 08               CALL   printStr   
45AB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
45B4   CD C1 08               CALL   printStr   
45B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45C6   21 00 00               LD   HL,0   
45C9   CD 0F 08               CALL   prtdec   
45CC   CD C1 08               CALL   printStr   
45CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45DC   E1                     POP   hl   
45DD   E5                     PUSH   hl   
45DE   CD 0F 08               CALL   prtdec   
45E1   E1                     POP   hl   
45E2   CD C1 08               CALL   printStr   
45E5   20 28 23 00            .CSTR   " (#"   
45E9   CD 57 08               CALL   prthex   
45EC   CD C1 08               CALL   printStr   
45EF   29 0D 0A 00            .CSTR   ")\r\n"   
45F3   76                     HALT      
45F4   00                     .CSTR      
45F5                EXPECTM_0_2248S43:      
45F5   E1                     POP   HL   
45F6                          ;*Macro unroll:  test "'a'", $61
45F6   31 80 18               LD   SP,STACK   
45F9   CD D5 08               CALL   init   
45FC   CD C8 08               CALL   execStr   
45FF   27 61 27 00            .CSTR   "'a'"   
4603                          ;*Macro unroll:  expect "'a'",$61
4603   E1                     POP   HL   
4604   E5                     PUSH   HL   
4605   11 61 00               LD   DE,$61   
4608   B7                     OR   A   
4609   ED 52                  SBC   HL,DE   
460B   7D                     LD   A,L   
460C   B4                     OR   H   
460D   28 4E                  JR   Z,expectM_0_2249S43   
460F   CD C1 08               CALL   printStr   
4612   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
461C   CD C1 08               CALL   printStr   
461F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
462E   21 61 00               LD   HL,$61   
4631   CD 0F 08               CALL   prtdec   
4634   CD C1 08               CALL   printStr   
4637   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4644   E1                     POP   hl   
4645   E5                     PUSH   hl   
4646   CD 0F 08               CALL   prtdec   
4649   E1                     POP   hl   
464A   CD C1 08               CALL   printStr   
464D   20 28 23 00            .CSTR   " (#"   
4651   CD 57 08               CALL   prthex   
4654   CD C1 08               CALL   printStr   
4657   29 0D 0A 00            .CSTR   ")\r\n"   
465B   76                     HALT      
465C   00                     .CSTR      
465D                EXPECTM_0_2249S43:      
465D   E1                     POP   HL   
465E                          ;*Macro unroll:  test "'\\''", $27
465E   31 80 18               LD   SP,STACK   
4661   CD D5 08               CALL   init   
4664   CD C8 08               CALL   execStr   
4667   27 5C 27 27 00         .CSTR   "'\\''"   
466C                          ;*Macro unroll:  expect "'\\''",$27
466C   E1                     POP   HL   
466D   E5                     PUSH   HL   
466E   11 27 00               LD   DE,$27   
4671   B7                     OR   A   
4672   ED 52                  SBC   HL,DE   
4674   7D                     LD   A,L   
4675   B4                     OR   H   
4676   28 4F                  JR   Z,expectM_0_2250S43   
4678   CD C1 08               CALL   printStr   
467B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
4686   CD C1 08               CALL   printStr   
4689   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4698   21 27 00               LD   HL,$27   
469B   CD 0F 08               CALL   prtdec   
469E   CD C1 08               CALL   printStr   
46A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46AE   E1                     POP   hl   
46AF   E5                     PUSH   hl   
46B0   CD 0F 08               CALL   prtdec   
46B3   E1                     POP   hl   
46B4   CD C1 08               CALL   printStr   
46B7   20 28 23 00            .CSTR   " (#"   
46BB   CD 57 08               CALL   prthex   
46BE   CD C1 08               CALL   printStr   
46C1   29 0D 0A 00            .CSTR   ")\r\n"   
46C5   76                     HALT      
46C6   00                     .CSTR      
46C7                EXPECTM_0_2250S43:      
46C7   E1                     POP   HL   
46C8                          ;*Macro unroll:  test "#10", $10
46C8   31 80 18               LD   SP,STACK   
46CB   CD D5 08               CALL   init   
46CE   CD C8 08               CALL   execStr   
46D1   23 31 30 00            .CSTR   "#10"   
46D5                          ;*Macro unroll:  expect "#10",$10
46D5   E1                     POP   HL   
46D6   E5                     PUSH   HL   
46D7   11 10 00               LD   DE,$10   
46DA   B7                     OR   A   
46DB   ED 52                  SBC   HL,DE   
46DD   7D                     LD   A,L   
46DE   B4                     OR   H   
46DF   28 4E                  JR   Z,expectM_0_2251S43   
46E1   CD C1 08               CALL   printStr   
46E4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
46EE   CD C1 08               CALL   printStr   
46F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4700   21 10 00               LD   HL,$10   
4703   CD 0F 08               CALL   prtdec   
4706   CD C1 08               CALL   printStr   
4709   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4716   E1                     POP   hl   
4717   E5                     PUSH   hl   
4718   CD 0F 08               CALL   prtdec   
471B   E1                     POP   hl   
471C   CD C1 08               CALL   printStr   
471F   20 28 23 00            .CSTR   " (#"   
4723   CD 57 08               CALL   prthex   
4726   CD C1 08               CALL   printStr   
4729   29 0D 0A 00            .CSTR   ")\r\n"   
472D   76                     HALT      
472E   00                     .CSTR      
472F                EXPECTM_0_2251S43:      
472F   E1                     POP   HL   
4730                          ;*Macro unroll:  test "#FF", $FF
4730   31 80 18               LD   SP,STACK   
4733   CD D5 08               CALL   init   
4736   CD C8 08               CALL   execStr   
4739   23 46 46 00            .CSTR   "#FF"   
473D                          ;*Macro unroll:  expect "#FF",$FF
473D   E1                     POP   HL   
473E   E5                     PUSH   HL   
473F   11 FF 00               LD   DE,$FF   
4742   B7                     OR   A   
4743   ED 52                  SBC   HL,DE   
4745   7D                     LD   A,L   
4746   B4                     OR   H   
4747   28 4E                  JR   Z,expectM_0_2252S43   
4749   CD C1 08               CALL   printStr   
474C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
4756   CD C1 08               CALL   printStr   
4759   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4768   21 FF 00               LD   HL,$FF   
476B   CD 0F 08               CALL   prtdec   
476E   CD C1 08               CALL   printStr   
4771   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
477E   E1                     POP   hl   
477F   E5                     PUSH   hl   
4780   CD 0F 08               CALL   prtdec   
4783   E1                     POP   hl   
4784   CD C1 08               CALL   printStr   
4787   20 28 23 00            .CSTR   " (#"   
478B   CD 57 08               CALL   prthex   
478E   CD C1 08               CALL   printStr   
4791   29 0D 0A 00            .CSTR   ")\r\n"   
4795   76                     HALT      
4796   00                     .CSTR      
4797                EXPECTM_0_2252S43:      
4797   E1                     POP   HL   
4798                          ;*Macro unroll:  test "-1 2 +",1
4798   31 80 18               LD   SP,STACK   
479B   CD D5 08               CALL   init   
479E   CD C8 08               CALL   execStr   
47A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
47A8                          ;*Macro unroll:  expect "-1 2 +",1
47A8   E1                     POP   HL   
47A9   E5                     PUSH   HL   
47AA   11 01 00               LD   DE,1   
47AD   B7                     OR   A   
47AE   ED 52                  SBC   HL,DE   
47B0   7D                     LD   A,L   
47B1   B4                     OR   H   
47B2   28 51                  JR   Z,expectM_0_2253S43   
47B4   CD C1 08               CALL   printStr   
47B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
47C4   CD C1 08               CALL   printStr   
47C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47D6   21 01 00               LD   HL,1   
47D9   CD 0F 08               CALL   prtdec   
47DC   CD C1 08               CALL   printStr   
47DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47EC   E1                     POP   hl   
47ED   E5                     PUSH   hl   
47EE   CD 0F 08               CALL   prtdec   
47F1   E1                     POP   hl   
47F2   CD C1 08               CALL   printStr   
47F5   20 28 23 00            .CSTR   " (#"   
47F9   CD 57 08               CALL   prthex   
47FC   CD C1 08               CALL   printStr   
47FF   29 0D 0A 00            .CSTR   ")\r\n"   
4803   76                     HALT      
4804   00                     .CSTR      
4805                EXPECTM_0_2253S43:      
4805   E1                     POP   HL   
4806                          ;*Macro unroll:  test "-1 1 +",0
4806   31 80 18               LD   SP,STACK   
4809   CD D5 08               CALL   init   
480C   CD C8 08               CALL   execStr   
480F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
4816                          ;*Macro unroll:  expect "-1 1 +",0
4816   E1                     POP   HL   
4817   E5                     PUSH   HL   
4818   11 00 00               LD   DE,0   
481B   B7                     OR   A   
481C   ED 52                  SBC   HL,DE   
481E   7D                     LD   A,L   
481F   B4                     OR   H   
4820   28 51                  JR   Z,expectM_0_2254S43   
4822   CD C1 08               CALL   printStr   
4825   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
4832   CD C1 08               CALL   printStr   
4835   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4844   21 00 00               LD   HL,0   
4847   CD 0F 08               CALL   prtdec   
484A   CD C1 08               CALL   printStr   
484D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
485A   E1                     POP   hl   
485B   E5                     PUSH   hl   
485C   CD 0F 08               CALL   prtdec   
485F   E1                     POP   hl   
4860   CD C1 08               CALL   printStr   
4863   20 28 23 00            .CSTR   " (#"   
4867   CD 57 08               CALL   prthex   
486A   CD C1 08               CALL   printStr   
486D   29 0D 0A 00            .CSTR   ")\r\n"   
4871   76                     HALT      
4872   00                     .CSTR      
4873                EXPECTM_0_2254S43:      
4873   E1                     POP   HL   
4874                          ;*Macro unroll:  test "1 2 +", 3
4874   31 80 18               LD   SP,STACK   
4877   CD D5 08               CALL   init   
487A   CD C8 08               CALL   execStr   
487D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4883                          ;*Macro unroll:  expect "1 2 +",3
4883   E1                     POP   HL   
4884   E5                     PUSH   HL   
4885   11 03 00               LD   DE,3   
4888   B7                     OR   A   
4889   ED 52                  SBC   HL,DE   
488B   7D                     LD   A,L   
488C   B4                     OR   H   
488D   28 50                  JR   Z,expectM_0_2255S43   
488F   CD C1 08               CALL   printStr   
4892   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
489E   CD C1 08               CALL   printStr   
48A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48B0   21 03 00               LD   HL,3   
48B3   CD 0F 08               CALL   prtdec   
48B6   CD C1 08               CALL   printStr   
48B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C6   E1                     POP   hl   
48C7   E5                     PUSH   hl   
48C8   CD 0F 08               CALL   prtdec   
48CB   E1                     POP   hl   
48CC   CD C1 08               CALL   printStr   
48CF   20 28 23 00            .CSTR   " (#"   
48D3   CD 57 08               CALL   prthex   
48D6   CD C1 08               CALL   printStr   
48D9   29 0D 0A 00            .CSTR   ")\r\n"   
48DD   76                     HALT      
48DE   00                     .CSTR      
48DF                EXPECTM_0_2255S43:      
48DF   E1                     POP   HL   
48E0                          ;*Macro unroll:  test "4 1 2 +", 3
48E0   31 80 18               LD   SP,STACK   
48E3   CD D5 08               CALL   init   
48E6   CD C8 08               CALL   execStr   
48E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
48F1                          ;*Macro unroll:  expect "4 1 2 +",3
48F1   E1                     POP   HL   
48F2   E5                     PUSH   HL   
48F3   11 03 00               LD   DE,3   
48F6   B7                     OR   A   
48F7   ED 52                  SBC   HL,DE   
48F9   7D                     LD   A,L   
48FA   B4                     OR   H   
48FB   28 52                  JR   Z,expectM_0_2256S43   
48FD   CD C1 08               CALL   printStr   
4900   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
490E   CD C1 08               CALL   printStr   
4911   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4920   21 03 00               LD   HL,3   
4923   CD 0F 08               CALL   prtdec   
4926   CD C1 08               CALL   printStr   
4929   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4936   E1                     POP   hl   
4937   E5                     PUSH   hl   
4938   CD 0F 08               CALL   prtdec   
493B   E1                     POP   hl   
493C   CD C1 08               CALL   printStr   
493F   20 28 23 00            .CSTR   " (#"   
4943   CD 57 08               CALL   prthex   
4946   CD C1 08               CALL   printStr   
4949   29 0D 0A 00            .CSTR   ")\r\n"   
494D   76                     HALT      
494E   00                     .CSTR      
494F                EXPECTM_0_2256S43:      
494F   E1                     POP   HL   
4950                          ;*Macro unroll:  test "1 2 +", 3
4950   31 80 18               LD   SP,STACK   
4953   CD D5 08               CALL   init   
4956   CD C8 08               CALL   execStr   
4959   31 20 32 20 2B 00      .CSTR   "1 2 +"   
495F                          ;*Macro unroll:  expect "1 2 +",3
495F   E1                     POP   HL   
4960   E5                     PUSH   HL   
4961   11 03 00               LD   DE,3   
4964   B7                     OR   A   
4965   ED 52                  SBC   HL,DE   
4967   7D                     LD   A,L   
4968   B4                     OR   H   
4969   28 50                  JR   Z,expectM_0_2257S43   
496B   CD C1 08               CALL   printStr   
496E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
497A   CD C1 08               CALL   printStr   
497D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
498C   21 03 00               LD   HL,3   
498F   CD 0F 08               CALL   prtdec   
4992   CD C1 08               CALL   printStr   
4995   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49A2   E1                     POP   hl   
49A3   E5                     PUSH   hl   
49A4   CD 0F 08               CALL   prtdec   
49A7   E1                     POP   hl   
49A8   CD C1 08               CALL   printStr   
49AB   20 28 23 00            .CSTR   " (#"   
49AF   CD 57 08               CALL   prthex   
49B2   CD C1 08               CALL   printStr   
49B5   29 0D 0A 00            .CSTR   ")\r\n"   
49B9   76                     HALT      
49BA   00                     .CSTR      
49BB                EXPECTM_0_2257S43:      
49BB   E1                     POP   HL   
49BC                          ;*Macro unroll:  test "123 456 +", 123+456
49BC   31 80 18               LD   SP,STACK   
49BF   CD D5 08               CALL   init   
49C2   CD C8 08               CALL   execStr   
49C5   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
49CF                          ;*Macro unroll:  expect "123 456 +",123+456
49CF   E1                     POP   HL   
49D0   E5                     PUSH   HL   
49D1   11 43 02               LD   DE,123+456   
49D4   B7                     OR   A   
49D5   ED 52                  SBC   HL,DE   
49D7   7D                     LD   A,L   
49D8   B4                     OR   H   
49D9   28 54                  JR   Z,expectM_0_2258S43   
49DB   CD C1 08               CALL   printStr   
49DE   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
49EE   CD C1 08               CALL   printStr   
49F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A00   21 43 02               LD   HL,123+456   
4A03   CD 0F 08               CALL   prtdec   
4A06   CD C1 08               CALL   printStr   
4A09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A16   E1                     POP   hl   
4A17   E5                     PUSH   hl   
4A18   CD 0F 08               CALL   prtdec   
4A1B   E1                     POP   hl   
4A1C   CD C1 08               CALL   printStr   
4A1F   20 28 23 00            .CSTR   " (#"   
4A23   CD 57 08               CALL   prthex   
4A26   CD C1 08               CALL   printStr   
4A29   29 0D 0A 00            .CSTR   ")\r\n"   
4A2D   76                     HALT      
4A2E   00                     .CSTR      
4A2F                EXPECTM_0_2258S43:      
4A2F   E1                     POP   HL   
4A30                          ;*Macro unroll:  test "64 128 +", 64+128
4A30   31 80 18               LD   SP,STACK   
4A33   CD D5 08               CALL   init   
4A36   CD C8 08               CALL   execStr   
4A39   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4A42                          ;*Macro unroll:  expect "64 128 +",64+128
4A42   E1                     POP   HL   
4A43   E5                     PUSH   HL   
4A44   11 C0 00               LD   DE,64+128   
4A47   B7                     OR   A   
4A48   ED 52                  SBC   HL,DE   
4A4A   7D                     LD   A,L   
4A4B   B4                     OR   H   
4A4C   28 53                  JR   Z,expectM_0_2259S43   
4A4E   CD C1 08               CALL   printStr   
4A51   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4A60   CD C1 08               CALL   printStr   
4A63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A72   21 C0 00               LD   HL,64+128   
4A75   CD 0F 08               CALL   prtdec   
4A78   CD C1 08               CALL   printStr   
4A7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A88   E1                     POP   hl   
4A89   E5                     PUSH   hl   
4A8A   CD 0F 08               CALL   prtdec   
4A8D   E1                     POP   hl   
4A8E   CD C1 08               CALL   printStr   
4A91   20 28 23 00            .CSTR   " (#"   
4A95   CD 57 08               CALL   prthex   
4A98   CD C1 08               CALL   printStr   
4A9B   29 0D 0A 00            .CSTR   ")\r\n"   
4A9F   76                     HALT      
4AA0   00                     .CSTR      
4AA1                EXPECTM_0_2259S43:      
4AA1   E1                     POP   HL   
4AA2                          ;*Macro unroll:  test "-1 -1 -",0
4AA2   31 80 18               LD   SP,STACK   
4AA5   CD D5 08               CALL   init   
4AA8   CD C8 08               CALL   execStr   
4AAB   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
4AB3                          ;*Macro unroll:  expect "-1 -1 -",0
4AB3   E1                     POP   HL   
4AB4   E5                     PUSH   HL   
4AB5   11 00 00               LD   DE,0   
4AB8   B7                     OR   A   
4AB9   ED 52                  SBC   HL,DE   
4ABB   7D                     LD   A,L   
4ABC   B4                     OR   H   
4ABD   28 52                  JR   Z,expectM_0_2260S43   
4ABF   CD C1 08               CALL   printStr   
4AC2   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4AD0   CD C1 08               CALL   printStr   
4AD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AE2   21 00 00               LD   HL,0   
4AE5   CD 0F 08               CALL   prtdec   
4AE8   CD C1 08               CALL   printStr   
4AEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF8   E1                     POP   hl   
4AF9   E5                     PUSH   hl   
4AFA   CD 0F 08               CALL   prtdec   
4AFD   E1                     POP   hl   
4AFE   CD C1 08               CALL   printStr   
4B01   20 28 23 00            .CSTR   " (#"   
4B05   CD 57 08               CALL   prthex   
4B08   CD C1 08               CALL   printStr   
4B0B   29 0D 0A 00            .CSTR   ")\r\n"   
4B0F   76                     HALT      
4B10   00                     .CSTR      
4B11                EXPECTM_0_2260S43:      
4B11   E1                     POP   HL   
4B12                          ;*Macro unroll:  test "5 3 -", 2
4B12   31 80 18               LD   SP,STACK   
4B15   CD D5 08               CALL   init   
4B18   CD C8 08               CALL   execStr   
4B1B   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4B21                          ;*Macro unroll:  expect "5 3 -",2
4B21   E1                     POP   HL   
4B22   E5                     PUSH   HL   
4B23   11 02 00               LD   DE,2   
4B26   B7                     OR   A   
4B27   ED 52                  SBC   HL,DE   
4B29   7D                     LD   A,L   
4B2A   B4                     OR   H   
4B2B   28 50                  JR   Z,expectM_0_2261S43   
4B2D   CD C1 08               CALL   printStr   
4B30   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4B3C   CD C1 08               CALL   printStr   
4B3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B4E   21 02 00               LD   HL,2   
4B51   CD 0F 08               CALL   prtdec   
4B54   CD C1 08               CALL   printStr   
4B57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B64   E1                     POP   hl   
4B65   E5                     PUSH   hl   
4B66   CD 0F 08               CALL   prtdec   
4B69   E1                     POP   hl   
4B6A   CD C1 08               CALL   printStr   
4B6D   20 28 23 00            .CSTR   " (#"   
4B71   CD 57 08               CALL   prthex   
4B74   CD C1 08               CALL   printStr   
4B77   29 0D 0A 00            .CSTR   ")\r\n"   
4B7B   76                     HALT      
4B7C   00                     .CSTR      
4B7D                EXPECTM_0_2261S43:      
4B7D   E1                     POP   HL   
4B7E                          ;*Macro unroll:  test "3 5 &", 1
4B7E   31 80 18               LD   SP,STACK   
4B81   CD D5 08               CALL   init   
4B84   CD C8 08               CALL   execStr   
4B87   33 20 35 20 26 00      .CSTR   "3 5 &"   
4B8D                          ;*Macro unroll:  expect "3 5 &",1
4B8D   E1                     POP   HL   
4B8E   E5                     PUSH   HL   
4B8F   11 01 00               LD   DE,1   
4B92   B7                     OR   A   
4B93   ED 52                  SBC   HL,DE   
4B95   7D                     LD   A,L   
4B96   B4                     OR   H   
4B97   28 50                  JR   Z,expectM_0_2262S43   
4B99   CD C1 08               CALL   printStr   
4B9C   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4BA8   CD C1 08               CALL   printStr   
4BAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BBA   21 01 00               LD   HL,1   
4BBD   CD 0F 08               CALL   prtdec   
4BC0   CD C1 08               CALL   printStr   
4BC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BD0   E1                     POP   hl   
4BD1   E5                     PUSH   hl   
4BD2   CD 0F 08               CALL   prtdec   
4BD5   E1                     POP   hl   
4BD6   CD C1 08               CALL   printStr   
4BD9   20 28 23 00            .CSTR   " (#"   
4BDD   CD 57 08               CALL   prthex   
4BE0   CD C1 08               CALL   printStr   
4BE3   29 0D 0A 00            .CSTR   ")\r\n"   
4BE7   76                     HALT      
4BE8   00                     .CSTR      
4BE9                EXPECTM_0_2262S43:      
4BE9   E1                     POP   HL   
4BEA                          ;*Macro unroll:  test "3 5 |", 7
4BEA   31 80 18               LD   SP,STACK   
4BED   CD D5 08               CALL   init   
4BF0   CD C8 08               CALL   execStr   
4BF3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4BF9                          ;*Macro unroll:  expect "3 5 |",7
4BF9   E1                     POP   HL   
4BFA   E5                     PUSH   HL   
4BFB   11 07 00               LD   DE,7   
4BFE   B7                     OR   A   
4BFF   ED 52                  SBC   HL,DE   
4C01   7D                     LD   A,L   
4C02   B4                     OR   H   
4C03   28 50                  JR   Z,expectM_0_2263S43   
4C05   CD C1 08               CALL   printStr   
4C08   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4C14   CD C1 08               CALL   printStr   
4C17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C26   21 07 00               LD   HL,7   
4C29   CD 0F 08               CALL   prtdec   
4C2C   CD C1 08               CALL   printStr   
4C2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C3C   E1                     POP   hl   
4C3D   E5                     PUSH   hl   
4C3E   CD 0F 08               CALL   prtdec   
4C41   E1                     POP   hl   
4C42   CD C1 08               CALL   printStr   
4C45   20 28 23 00            .CSTR   " (#"   
4C49   CD 57 08               CALL   prthex   
4C4C   CD C1 08               CALL   printStr   
4C4F   29 0D 0A 00            .CSTR   ")\r\n"   
4C53   76                     HALT      
4C54   00                     .CSTR      
4C55                EXPECTM_0_2263S43:      
4C55   E1                     POP   HL   
4C56                          ;*Macro unroll:  test "2 3 *", 6
4C56   31 80 18               LD   SP,STACK   
4C59   CD D5 08               CALL   init   
4C5C   CD C8 08               CALL   execStr   
4C5F   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4C65                          ;*Macro unroll:  expect "2 3 *",6
4C65   E1                     POP   HL   
4C66   E5                     PUSH   HL   
4C67   11 06 00               LD   DE,6   
4C6A   B7                     OR   A   
4C6B   ED 52                  SBC   HL,DE   
4C6D   7D                     LD   A,L   
4C6E   B4                     OR   H   
4C6F   28 50                  JR   Z,expectM_0_2264S43   
4C71   CD C1 08               CALL   printStr   
4C74   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4C80   CD C1 08               CALL   printStr   
4C83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C92   21 06 00               LD   HL,6   
4C95   CD 0F 08               CALL   prtdec   
4C98   CD C1 08               CALL   printStr   
4C9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CA8   E1                     POP   hl   
4CA9   E5                     PUSH   hl   
4CAA   CD 0F 08               CALL   prtdec   
4CAD   E1                     POP   hl   
4CAE   CD C1 08               CALL   printStr   
4CB1   20 28 23 00            .CSTR   " (#"   
4CB5   CD 57 08               CALL   prthex   
4CB8   CD C1 08               CALL   printStr   
4CBB   29 0D 0A 00            .CSTR   ")\r\n"   
4CBF   76                     HALT      
4CC0   00                     .CSTR      
4CC1                EXPECTM_0_2264S43:      
4CC1   E1                     POP   HL   
4CC2                          ;*Macro unroll:  test "1 2 3 + *", 5
4CC2   31 80 18               LD   SP,STACK   
4CC5   CD D5 08               CALL   init   
4CC8   CD C8 08               CALL   execStr   
4CCB   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4CD5                          ;*Macro unroll:  expect "1 2 3 + *",5
4CD5   E1                     POP   HL   
4CD6   E5                     PUSH   HL   
4CD7   11 05 00               LD   DE,5   
4CDA   B7                     OR   A   
4CDB   ED 52                  SBC   HL,DE   
4CDD   7D                     LD   A,L   
4CDE   B4                     OR   H   
4CDF   28 54                  JR   Z,expectM_0_2265S43   
4CE1   CD C1 08               CALL   printStr   
4CE4   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4CF4   CD C1 08               CALL   printStr   
4CF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D06   21 05 00               LD   HL,5   
4D09   CD 0F 08               CALL   prtdec   
4D0C   CD C1 08               CALL   printStr   
4D0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D1C   E1                     POP   hl   
4D1D   E5                     PUSH   hl   
4D1E   CD 0F 08               CALL   prtdec   
4D21   E1                     POP   hl   
4D22   CD C1 08               CALL   printStr   
4D25   20 28 23 00            .CSTR   " (#"   
4D29   CD 57 08               CALL   prthex   
4D2C   CD C1 08               CALL   printStr   
4D2F   29 0D 0A 00            .CSTR   ")\r\n"   
4D33   76                     HALT      
4D34   00                     .CSTR      
4D35                EXPECTM_0_2265S43:      
4D35   E1                     POP   HL   
4D36                          ;*Macro unroll:  test "7 3 /", 2
4D36   31 80 18               LD   SP,STACK   
4D39   CD D5 08               CALL   init   
4D3C   CD C8 08               CALL   execStr   
4D3F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4D45                          ;*Macro unroll:  expect "7 3 /",2
4D45   E1                     POP   HL   
4D46   E5                     PUSH   HL   
4D47   11 02 00               LD   DE,2   
4D4A   B7                     OR   A   
4D4B   ED 52                  SBC   HL,DE   
4D4D   7D                     LD   A,L   
4D4E   B4                     OR   H   
4D4F   28 50                  JR   Z,expectM_0_2266S43   
4D51   CD C1 08               CALL   printStr   
4D54   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4D60   CD C1 08               CALL   printStr   
4D63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D72   21 02 00               LD   HL,2   
4D75   CD 0F 08               CALL   prtdec   
4D78   CD C1 08               CALL   printStr   
4D7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D88   E1                     POP   hl   
4D89   E5                     PUSH   hl   
4D8A   CD 0F 08               CALL   prtdec   
4D8D   E1                     POP   hl   
4D8E   CD C1 08               CALL   printStr   
4D91   20 28 23 00            .CSTR   " (#"   
4D95   CD 57 08               CALL   prthex   
4D98   CD C1 08               CALL   printStr   
4D9B   29 0D 0A 00            .CSTR   ")\r\n"   
4D9F   76                     HALT      
4DA0   00                     .CSTR      
4DA1                EXPECTM_0_2266S43:      
4DA1   E1                     POP   HL   
4DA2                          ;*Macro unroll:  test "7 3 / _", 1
4DA2   31 80 18               LD   SP,STACK   
4DA5   CD D5 08               CALL   init   
4DA8   CD C8 08               CALL   execStr   
4DAB   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
4DB3                          ;*Macro unroll:  expect "7 3 / _",1
4DB3   E1                     POP   HL   
4DB4   E5                     PUSH   HL   
4DB5   11 01 00               LD   DE,1   
4DB8   B7                     OR   A   
4DB9   ED 52                  SBC   HL,DE   
4DBB   7D                     LD   A,L   
4DBC   B4                     OR   H   
4DBD   28 52                  JR   Z,expectM_0_2267S43   
4DBF   CD C1 08               CALL   printStr   
4DC2   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
4DD0   CD C1 08               CALL   printStr   
4DD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DE2   21 01 00               LD   HL,1   
4DE5   CD 0F 08               CALL   prtdec   
4DE8   CD C1 08               CALL   printStr   
4DEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DF8   E1                     POP   hl   
4DF9   E5                     PUSH   hl   
4DFA   CD 0F 08               CALL   prtdec   
4DFD   E1                     POP   hl   
4DFE   CD C1 08               CALL   printStr   
4E01   20 28 23 00            .CSTR   " (#"   
4E05   CD 57 08               CALL   prthex   
4E08   CD C1 08               CALL   printStr   
4E0B   29 0D 0A 00            .CSTR   ")\r\n"   
4E0F   76                     HALT      
4E10   00                     .CSTR      
4E11                EXPECTM_0_2267S43:      
4E11   E1                     POP   HL   
4E12                          ;*Macro unroll:  test "2 3 ==", FALSE
4E12   31 80 18               LD   SP,STACK   
4E15   CD D5 08               CALL   init   
4E18   CD C8 08               CALL   execStr   
4E1B   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4E22                          ;*Macro unroll:  expect "2 3 ==",FALSE
4E22   E1                     POP   HL   
4E23   E5                     PUSH   HL   
4E24   11 00 00               LD   DE,FALSE   
4E27   B7                     OR   A   
4E28   ED 52                  SBC   HL,DE   
4E2A   7D                     LD   A,L   
4E2B   B4                     OR   H   
4E2C   28 51                  JR   Z,expectM_0_2268S43   
4E2E   CD C1 08               CALL   printStr   
4E31   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4E3E   CD C1 08               CALL   printStr   
4E41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E50   21 00 00               LD   HL,FALSE   
4E53   CD 0F 08               CALL   prtdec   
4E56   CD C1 08               CALL   printStr   
4E59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E66   E1                     POP   hl   
4E67   E5                     PUSH   hl   
4E68   CD 0F 08               CALL   prtdec   
4E6B   E1                     POP   hl   
4E6C   CD C1 08               CALL   printStr   
4E6F   20 28 23 00            .CSTR   " (#"   
4E73   CD 57 08               CALL   prthex   
4E76   CD C1 08               CALL   printStr   
4E79   29 0D 0A 00            .CSTR   ")\r\n"   
4E7D   76                     HALT      
4E7E   00                     .CSTR      
4E7F                EXPECTM_0_2268S43:      
4E7F   E1                     POP   HL   
4E80                          ;*Macro unroll:  test "3 3 ==", TRUE
4E80   31 80 18               LD   SP,STACK   
4E83   CD D5 08               CALL   init   
4E86   CD C8 08               CALL   execStr   
4E89   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4E90                          ;*Macro unroll:  expect "3 3 ==",TRUE
4E90   E1                     POP   HL   
4E91   E5                     PUSH   HL   
4E92   11 FF FF               LD   DE,TRUE   
4E95   B7                     OR   A   
4E96   ED 52                  SBC   HL,DE   
4E98   7D                     LD   A,L   
4E99   B4                     OR   H   
4E9A   28 51                  JR   Z,expectM_0_2269S43   
4E9C   CD C1 08               CALL   printStr   
4E9F   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4EAC   CD C1 08               CALL   printStr   
4EAF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EBE   21 FF FF               LD   HL,TRUE   
4EC1   CD 0F 08               CALL   prtdec   
4EC4   CD C1 08               CALL   printStr   
4EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ED4   E1                     POP   hl   
4ED5   E5                     PUSH   hl   
4ED6   CD 0F 08               CALL   prtdec   
4ED9   E1                     POP   hl   
4EDA   CD C1 08               CALL   printStr   
4EDD   20 28 23 00            .CSTR   " (#"   
4EE1   CD 57 08               CALL   prthex   
4EE4   CD C1 08               CALL   printStr   
4EE7   29 0D 0A 00            .CSTR   ")\r\n"   
4EEB   76                     HALT      
4EEC   00                     .CSTR      
4EED                EXPECTM_0_2269S43:      
4EED   E1                     POP   HL   
4EEE                          ;*Macro unroll:  test "1 2 <", TRUE
4EEE   31 80 18               LD   SP,STACK   
4EF1   CD D5 08               CALL   init   
4EF4   CD C8 08               CALL   execStr   
4EF7   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4EFD                          ;*Macro unroll:  expect "1 2 <",TRUE
4EFD   E1                     POP   HL   
4EFE   E5                     PUSH   HL   
4EFF   11 FF FF               LD   DE,TRUE   
4F02   B7                     OR   A   
4F03   ED 52                  SBC   HL,DE   
4F05   7D                     LD   A,L   
4F06   B4                     OR   H   
4F07   28 50                  JR   Z,expectM_0_2270S43   
4F09   CD C1 08               CALL   printStr   
4F0C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4F18   CD C1 08               CALL   printStr   
4F1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F2A   21 FF FF               LD   HL,TRUE   
4F2D   CD 0F 08               CALL   prtdec   
4F30   CD C1 08               CALL   printStr   
4F33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F40   E1                     POP   hl   
4F41   E5                     PUSH   hl   
4F42   CD 0F 08               CALL   prtdec   
4F45   E1                     POP   hl   
4F46   CD C1 08               CALL   printStr   
4F49   20 28 23 00            .CSTR   " (#"   
4F4D   CD 57 08               CALL   prthex   
4F50   CD C1 08               CALL   printStr   
4F53   29 0D 0A 00            .CSTR   ")\r\n"   
4F57   76                     HALT      
4F58   00                     .CSTR      
4F59                EXPECTM_0_2270S43:      
4F59   E1                     POP   HL   
4F5A                          ;*Macro unroll:  test "2 1 <", FALSE
4F5A   31 80 18               LD   SP,STACK   
4F5D   CD D5 08               CALL   init   
4F60   CD C8 08               CALL   execStr   
4F63   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4F69                          ;*Macro unroll:  expect "2 1 <",FALSE
4F69   E1                     POP   HL   
4F6A   E5                     PUSH   HL   
4F6B   11 00 00               LD   DE,FALSE   
4F6E   B7                     OR   A   
4F6F   ED 52                  SBC   HL,DE   
4F71   7D                     LD   A,L   
4F72   B4                     OR   H   
4F73   28 50                  JR   Z,expectM_0_2271S43   
4F75   CD C1 08               CALL   printStr   
4F78   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4F84   CD C1 08               CALL   printStr   
4F87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F96   21 00 00               LD   HL,FALSE   
4F99   CD 0F 08               CALL   prtdec   
4F9C   CD C1 08               CALL   printStr   
4F9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FAC   E1                     POP   hl   
4FAD   E5                     PUSH   hl   
4FAE   CD 0F 08               CALL   prtdec   
4FB1   E1                     POP   hl   
4FB2   CD C1 08               CALL   printStr   
4FB5   20 28 23 00            .CSTR   " (#"   
4FB9   CD 57 08               CALL   prthex   
4FBC   CD C1 08               CALL   printStr   
4FBF   29 0D 0A 00            .CSTR   ")\r\n"   
4FC3   76                     HALT      
4FC4   00                     .CSTR      
4FC5                EXPECTM_0_2271S43:      
4FC5   E1                     POP   HL   
4FC6                          ;*Macro unroll:  test "2 3 <", TRUE
4FC6   31 80 18               LD   SP,STACK   
4FC9   CD D5 08               CALL   init   
4FCC   CD C8 08               CALL   execStr   
4FCF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4FD5                          ;*Macro unroll:  expect "2 3 <",TRUE
4FD5   E1                     POP   HL   
4FD6   E5                     PUSH   HL   
4FD7   11 FF FF               LD   DE,TRUE   
4FDA   B7                     OR   A   
4FDB   ED 52                  SBC   HL,DE   
4FDD   7D                     LD   A,L   
4FDE   B4                     OR   H   
4FDF   28 50                  JR   Z,expectM_0_2272S43   
4FE1   CD C1 08               CALL   printStr   
4FE4   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4FF0   CD C1 08               CALL   printStr   
4FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5002   21 FF FF               LD   HL,TRUE   
5005   CD 0F 08               CALL   prtdec   
5008   CD C1 08               CALL   printStr   
500B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5018   E1                     POP   hl   
5019   E5                     PUSH   hl   
501A   CD 0F 08               CALL   prtdec   
501D   E1                     POP   hl   
501E   CD C1 08               CALL   printStr   
5021   20 28 23 00            .CSTR   " (#"   
5025   CD 57 08               CALL   prthex   
5028   CD C1 08               CALL   printStr   
502B   29 0D 0A 00            .CSTR   ")\r\n"   
502F   76                     HALT      
5030   00                     .CSTR      
5031                EXPECTM_0_2272S43:      
5031   E1                     POP   HL   
5032                          ;*Macro unroll:  test "3 3 <", FALSE
5032   31 80 18               LD   SP,STACK   
5035   CD D5 08               CALL   init   
5038   CD C8 08               CALL   execStr   
503B   33 20 33 20 3C 00      .CSTR   "3 3 <"   
5041                          ;*Macro unroll:  expect "3 3 <",FALSE
5041   E1                     POP   HL   
5042   E5                     PUSH   HL   
5043   11 00 00               LD   DE,FALSE   
5046   B7                     OR   A   
5047   ED 52                  SBC   HL,DE   
5049   7D                     LD   A,L   
504A   B4                     OR   H   
504B   28 50                  JR   Z,expectM_0_2273S43   
504D   CD C1 08               CALL   printStr   
5050   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
505C   CD C1 08               CALL   printStr   
505F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
506E   21 00 00               LD   HL,FALSE   
5071   CD 0F 08               CALL   prtdec   
5074   CD C1 08               CALL   printStr   
5077   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5084   E1                     POP   hl   
5085   E5                     PUSH   hl   
5086   CD 0F 08               CALL   prtdec   
5089   E1                     POP   hl   
508A   CD C1 08               CALL   printStr   
508D   20 28 23 00            .CSTR   " (#"   
5091   CD 57 08               CALL   prthex   
5094   CD C1 08               CALL   printStr   
5097   29 0D 0A 00            .CSTR   ")\r\n"   
509B   76                     HALT      
509C   00                     .CSTR      
509D                EXPECTM_0_2273S43:      
509D   E1                     POP   HL   
509E                          ;*Macro unroll:  test "1 2 >", FALSE
509E   31 80 18               LD   SP,STACK   
50A1   CD D5 08               CALL   init   
50A4   CD C8 08               CALL   execStr   
50A7   31 20 32 20 3E 00      .CSTR   "1 2 >"   
50AD                          ;*Macro unroll:  expect "1 2 >",FALSE
50AD   E1                     POP   HL   
50AE   E5                     PUSH   HL   
50AF   11 00 00               LD   DE,FALSE   
50B2   B7                     OR   A   
50B3   ED 52                  SBC   HL,DE   
50B5   7D                     LD   A,L   
50B6   B4                     OR   H   
50B7   28 50                  JR   Z,expectM_0_2274S43   
50B9   CD C1 08               CALL   printStr   
50BC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
50C8   CD C1 08               CALL   printStr   
50CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50DA   21 00 00               LD   HL,FALSE   
50DD   CD 0F 08               CALL   prtdec   
50E0   CD C1 08               CALL   printStr   
50E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50F0   E1                     POP   hl   
50F1   E5                     PUSH   hl   
50F2   CD 0F 08               CALL   prtdec   
50F5   E1                     POP   hl   
50F6   CD C1 08               CALL   printStr   
50F9   20 28 23 00            .CSTR   " (#"   
50FD   CD 57 08               CALL   prthex   
5100   CD C1 08               CALL   printStr   
5103   29 0D 0A 00            .CSTR   ")\r\n"   
5107   76                     HALT      
5108   00                     .CSTR      
5109                EXPECTM_0_2274S43:      
5109   E1                     POP   HL   
510A                          ;*Macro unroll:  test "2 1 >", TRUE
510A   31 80 18               LD   SP,STACK   
510D   CD D5 08               CALL   init   
5110   CD C8 08               CALL   execStr   
5113   32 20 31 20 3E 00      .CSTR   "2 1 >"   
5119                          ;*Macro unroll:  expect "2 1 >",TRUE
5119   E1                     POP   HL   
511A   E5                     PUSH   HL   
511B   11 FF FF               LD   DE,TRUE   
511E   B7                     OR   A   
511F   ED 52                  SBC   HL,DE   
5121   7D                     LD   A,L   
5122   B4                     OR   H   
5123   28 50                  JR   Z,expectM_0_2275S43   
5125   CD C1 08               CALL   printStr   
5128   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
5134   CD C1 08               CALL   printStr   
5137   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5146   21 FF FF               LD   HL,TRUE   
5149   CD 0F 08               CALL   prtdec   
514C   CD C1 08               CALL   printStr   
514F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
515C   E1                     POP   hl   
515D   E5                     PUSH   hl   
515E   CD 0F 08               CALL   prtdec   
5161   E1                     POP   hl   
5162   CD C1 08               CALL   printStr   
5165   20 28 23 00            .CSTR   " (#"   
5169   CD 57 08               CALL   prthex   
516C   CD C1 08               CALL   printStr   
516F   29 0D 0A 00            .CSTR   ")\r\n"   
5173   76                     HALT      
5174   00                     .CSTR      
5175                EXPECTM_0_2275S43:      
5175   E1                     POP   HL   
5176                          ;*Macro unroll:  test "3 3 >", FALSE
5176   31 80 18               LD   SP,STACK   
5179   CD D5 08               CALL   init   
517C   CD C8 08               CALL   execStr   
517F   33 20 33 20 3E 00      .CSTR   "3 3 >"   
5185                          ;*Macro unroll:  expect "3 3 >",FALSE
5185   E1                     POP   HL   
5186   E5                     PUSH   HL   
5187   11 00 00               LD   DE,FALSE   
518A   B7                     OR   A   
518B   ED 52                  SBC   HL,DE   
518D   7D                     LD   A,L   
518E   B4                     OR   H   
518F   28 50                  JR   Z,expectM_0_2276S43   
5191   CD C1 08               CALL   printStr   
5194   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
51A0   CD C1 08               CALL   printStr   
51A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51B2   21 00 00               LD   HL,FALSE   
51B5   CD 0F 08               CALL   prtdec   
51B8   CD C1 08               CALL   printStr   
51BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51C8   E1                     POP   hl   
51C9   E5                     PUSH   hl   
51CA   CD 0F 08               CALL   prtdec   
51CD   E1                     POP   hl   
51CE   CD C1 08               CALL   printStr   
51D1   20 28 23 00            .CSTR   " (#"   
51D5   CD 57 08               CALL   prthex   
51D8   CD C1 08               CALL   printStr   
51DB   29 0D 0A 00            .CSTR   ")\r\n"   
51DF   76                     HALT      
51E0   00                     .CSTR      
51E1                EXPECTM_0_2276S43:      
51E1   E1                     POP   HL   
51E2                          ;*Macro unroll:  test "4 3 >", TRUE
51E2   31 80 18               LD   SP,STACK   
51E5   CD D5 08               CALL   init   
51E8   CD C8 08               CALL   execStr   
51EB   34 20 33 20 3E 00      .CSTR   "4 3 >"   
51F1                          ;*Macro unroll:  expect "4 3 >",TRUE
51F1   E1                     POP   HL   
51F2   E5                     PUSH   HL   
51F3   11 FF FF               LD   DE,TRUE   
51F6   B7                     OR   A   
51F7   ED 52                  SBC   HL,DE   
51F9   7D                     LD   A,L   
51FA   B4                     OR   H   
51FB   28 50                  JR   Z,expectM_0_2277S43   
51FD   CD C1 08               CALL   printStr   
5200   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
520C   CD C1 08               CALL   printStr   
520F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
521E   21 FF FF               LD   HL,TRUE   
5221   CD 0F 08               CALL   prtdec   
5224   CD C1 08               CALL   printStr   
5227   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5234   E1                     POP   hl   
5235   E5                     PUSH   hl   
5236   CD 0F 08               CALL   prtdec   
5239   E1                     POP   hl   
523A   CD C1 08               CALL   printStr   
523D   20 28 23 00            .CSTR   " (#"   
5241   CD 57 08               CALL   prthex   
5244   CD C1 08               CALL   printStr   
5247   29 0D 0A 00            .CSTR   ")\r\n"   
524B   76                     HALT      
524C   00                     .CSTR      
524D                EXPECTM_0_2277S43:      
524D   E1                     POP   HL   
524E                          ;*Macro unroll:  test "2 2 <=", TRUE
524E   31 80 18               LD   SP,STACK   
5251   CD D5 08               CALL   init   
5254   CD C8 08               CALL   execStr   
5257   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
525E                          ;*Macro unroll:  expect "2 2 <=",TRUE
525E   E1                     POP   HL   
525F   E5                     PUSH   HL   
5260   11 FF FF               LD   DE,TRUE   
5263   B7                     OR   A   
5264   ED 52                  SBC   HL,DE   
5266   7D                     LD   A,L   
5267   B4                     OR   H   
5268   28 51                  JR   Z,expectM_0_2278S43   
526A   CD C1 08               CALL   printStr   
526D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
527A   CD C1 08               CALL   printStr   
527D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
528C   21 FF FF               LD   HL,TRUE   
528F   CD 0F 08               CALL   prtdec   
5292   CD C1 08               CALL   printStr   
5295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52A2   E1                     POP   hl   
52A3   E5                     PUSH   hl   
52A4   CD 0F 08               CALL   prtdec   
52A7   E1                     POP   hl   
52A8   CD C1 08               CALL   printStr   
52AB   20 28 23 00            .CSTR   " (#"   
52AF   CD 57 08               CALL   prthex   
52B2   CD C1 08               CALL   printStr   
52B5   29 0D 0A 00            .CSTR   ")\r\n"   
52B9   76                     HALT      
52BA   00                     .CSTR      
52BB                EXPECTM_0_2278S43:      
52BB   E1                     POP   HL   
52BC                          ;*Macro unroll:  test "2 2 >=", TRUE
52BC   31 80 18               LD   SP,STACK   
52BF   CD D5 08               CALL   init   
52C2   CD C8 08               CALL   execStr   
52C5   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
52CC                          ;*Macro unroll:  expect "2 2 >=",TRUE
52CC   E1                     POP   HL   
52CD   E5                     PUSH   HL   
52CE   11 FF FF               LD   DE,TRUE   
52D1   B7                     OR   A   
52D2   ED 52                  SBC   HL,DE   
52D4   7D                     LD   A,L   
52D5   B4                     OR   H   
52D6   28 51                  JR   Z,expectM_0_2279S43   
52D8   CD C1 08               CALL   printStr   
52DB   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
52E8   CD C1 08               CALL   printStr   
52EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52FA   21 FF FF               LD   HL,TRUE   
52FD   CD 0F 08               CALL   prtdec   
5300   CD C1 08               CALL   printStr   
5303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5310   E1                     POP   hl   
5311   E5                     PUSH   hl   
5312   CD 0F 08               CALL   prtdec   
5315   E1                     POP   hl   
5316   CD C1 08               CALL   printStr   
5319   20 28 23 00            .CSTR   " (#"   
531D   CD 57 08               CALL   prthex   
5320   CD C1 08               CALL   printStr   
5323   29 0D 0A 00            .CSTR   ")\r\n"   
5327   76                     HALT      
5328   00                     .CSTR      
5329                EXPECTM_0_2279S43:      
5329   E1                     POP   HL   
532A                          ;*Macro unroll:  test "3 1 <<", 6
532A   31 80 18               LD   SP,STACK   
532D   CD D5 08               CALL   init   
5330   CD C8 08               CALL   execStr   
5333   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
533A                          ;*Macro unroll:  expect "3 1 <<",6
533A   E1                     POP   HL   
533B   E5                     PUSH   HL   
533C   11 06 00               LD   DE,6   
533F   B7                     OR   A   
5340   ED 52                  SBC   HL,DE   
5342   7D                     LD   A,L   
5343   B4                     OR   H   
5344   28 51                  JR   Z,expectM_0_2280S43   
5346   CD C1 08               CALL   printStr   
5349   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
5356   CD C1 08               CALL   printStr   
5359   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5368   21 06 00               LD   HL,6   
536B   CD 0F 08               CALL   prtdec   
536E   CD C1 08               CALL   printStr   
5371   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
537E   E1                     POP   hl   
537F   E5                     PUSH   hl   
5380   CD 0F 08               CALL   prtdec   
5383   E1                     POP   hl   
5384   CD C1 08               CALL   printStr   
5387   20 28 23 00            .CSTR   " (#"   
538B   CD 57 08               CALL   prthex   
538E   CD C1 08               CALL   printStr   
5391   29 0D 0A 00            .CSTR   ")\r\n"   
5395   76                     HALT      
5396   00                     .CSTR      
5397                EXPECTM_0_2280S43:      
5397   E1                     POP   HL   
5398                          ;*Macro unroll:  test "10 1 >>", 5
5398   31 80 18               LD   SP,STACK   
539B   CD D5 08               CALL   init   
539E   CD C8 08               CALL   execStr   
53A1   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
53A9                          ;*Macro unroll:  expect "10 1 >>",5
53A9   E1                     POP   HL   
53AA   E5                     PUSH   HL   
53AB   11 05 00               LD   DE,5   
53AE   B7                     OR   A   
53AF   ED 52                  SBC   HL,DE   
53B1   7D                     LD   A,L   
53B2   B4                     OR   H   
53B3   28 52                  JR   Z,expectM_0_2281S43   
53B5   CD C1 08               CALL   printStr   
53B8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
53C6   CD C1 08               CALL   printStr   
53C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53D8   21 05 00               LD   HL,5   
53DB   CD 0F 08               CALL   prtdec   
53DE   CD C1 08               CALL   printStr   
53E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53EE   E1                     POP   hl   
53EF   E5                     PUSH   hl   
53F0   CD 0F 08               CALL   prtdec   
53F3   E1                     POP   hl   
53F4   CD C1 08               CALL   printStr   
53F7   20 28 23 00            .CSTR   " (#"   
53FB   CD 57 08               CALL   prthex   
53FE   CD C1 08               CALL   printStr   
5401   29 0D 0A 00            .CSTR   ")\r\n"   
5405   76                     HALT      
5406   00                     .CSTR      
5407                EXPECTM_0_2281S43:      
5407   E1                     POP   HL   
5408                          ;*Macro unroll:  test "1 x = x", 1
5408   31 80 18               LD   SP,STACK   
540B   CD D5 08               CALL   init   
540E   CD C8 08               CALL   execStr   
5411   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
5419                          ;*Macro unroll:  expect "1 x = x",1
5419   E1                     POP   HL   
541A   E5                     PUSH   HL   
541B   11 01 00               LD   DE,1   
541E   B7                     OR   A   
541F   ED 52                  SBC   HL,DE   
5421   7D                     LD   A,L   
5422   B4                     OR   H   
5423   28 52                  JR   Z,expectM_0_2282S43   
5425   CD C1 08               CALL   printStr   
5428   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
5436   CD C1 08               CALL   printStr   
5439   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5448   21 01 00               LD   HL,1   
544B   CD 0F 08               CALL   prtdec   
544E   CD C1 08               CALL   printStr   
5451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
545E   E1                     POP   hl   
545F   E5                     PUSH   hl   
5460   CD 0F 08               CALL   prtdec   
5463   E1                     POP   hl   
5464   CD C1 08               CALL   printStr   
5467   20 28 23 00            .CSTR   " (#"   
546B   CD 57 08               CALL   prthex   
546E   CD C1 08               CALL   printStr   
5471   29 0D 0A 00            .CSTR   ")\r\n"   
5475   76                     HALT      
5476   00                     .CSTR      
5477                EXPECTM_0_2282S43:      
5477   E1                     POP   HL   
5478                          ;*Macro unroll:  test "{1}:", 1
5478   31 80 18               LD   SP,STACK   
547B   CD D5 08               CALL   init   
547E   CD C8 08               CALL   execStr   
5481   7B 31 7D 3A 00         .CSTR   "{1}:"   
5486                          ;*Macro unroll:  expect "{1}:",1
5486   E1                     POP   HL   
5487   E5                     PUSH   HL   
5488   11 01 00               LD   DE,1   
548B   B7                     OR   A   
548C   ED 52                  SBC   HL,DE   
548E   7D                     LD   A,L   
548F   B4                     OR   H   
5490   28 4F                  JR   Z,expectM_0_2283S43   
5492   CD C1 08               CALL   printStr   
5495   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
54A0   CD C1 08               CALL   printStr   
54A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54B2   21 01 00               LD   HL,1   
54B5   CD 0F 08               CALL   prtdec   
54B8   CD C1 08               CALL   printStr   
54BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54C8   E1                     POP   hl   
54C9   E5                     PUSH   hl   
54CA   CD 0F 08               CALL   prtdec   
54CD   E1                     POP   hl   
54CE   CD C1 08               CALL   printStr   
54D1   20 28 23 00            .CSTR   " (#"   
54D5   CD 57 08               CALL   prthex   
54D8   CD C1 08               CALL   printStr   
54DB   29 0D 0A 00            .CSTR   ")\r\n"   
54DF   76                     HALT      
54E0   00                     .CSTR      
54E1                EXPECTM_0_2283S43:      
54E1   E1                     POP   HL   
54E2                          ;*Macro unroll:  test "{{1}:}:", 1
54E2   31 80 18               LD   SP,STACK   
54E5   CD D5 08               CALL   init   
54E8   CD C8 08               CALL   execStr   
54EB   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
54F3                          ;*Macro unroll:  expect "{{1}:}:",1
54F3   E1                     POP   HL   
54F4   E5                     PUSH   HL   
54F5   11 01 00               LD   DE,1   
54F8   B7                     OR   A   
54F9   ED 52                  SBC   HL,DE   
54FB   7D                     LD   A,L   
54FC   B4                     OR   H   
54FD   28 52                  JR   Z,expectM_0_2284S43   
54FF   CD C1 08               CALL   printStr   
5502   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
5510   CD C1 08               CALL   printStr   
5513   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5522   21 01 00               LD   HL,1   
5525   CD 0F 08               CALL   prtdec   
5528   CD C1 08               CALL   printStr   
552B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5538   E1                     POP   hl   
5539   E5                     PUSH   hl   
553A   CD 0F 08               CALL   prtdec   
553D   E1                     POP   hl   
553E   CD C1 08               CALL   printStr   
5541   20 28 23 00            .CSTR   " (#"   
5545   CD 57 08               CALL   prthex   
5548   CD C1 08               CALL   printStr   
554B   29 0D 0A 00            .CSTR   ")\r\n"   
554F   76                     HALT      
5550   00                     .CSTR      
5551                EXPECTM_0_2284S43:      
5551   E1                     POP   HL   
5552                          ;*Macro unroll:  test "{{{1}:}:}:", 1
5552   31 80 18               LD   SP,STACK   
5555   CD D5 08               CALL   init   
5558   CD C8 08               CALL   execStr   
555B   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
5566                          ;*Macro unroll:  expect "{{{1}:}:}:",1
5566   E1                     POP   HL   
5567   E5                     PUSH   HL   
5568   11 01 00               LD   DE,1   
556B   B7                     OR   A   
556C   ED 52                  SBC   HL,DE   
556E   7D                     LD   A,L   
556F   B4                     OR   H   
5570   28 55                  JR   Z,expectM_0_2285S43   
5572   CD C1 08               CALL   printStr   
5575   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
5586   CD C1 08               CALL   printStr   
5589   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5598   21 01 00               LD   HL,1   
559B   CD 0F 08               CALL   prtdec   
559E   CD C1 08               CALL   printStr   
55A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55AE   E1                     POP   hl   
55AF   E5                     PUSH   hl   
55B0   CD 0F 08               CALL   prtdec   
55B3   E1                     POP   hl   
55B4   CD C1 08               CALL   printStr   
55B7   20 28 23 00            .CSTR   " (#"   
55BB   CD 57 08               CALL   prthex   
55BE   CD C1 08               CALL   printStr   
55C1   29 0D 0A 00            .CSTR   ")\r\n"   
55C5   76                     HALT      
55C6   00                     .CSTR      
55C7                EXPECTM_0_2285S43:      
55C7   E1                     POP   HL   
55C8                          ;*Macro unroll:  test "5 \\F {10} ?", 5
55C8   31 80 18               LD   SP,STACK   
55CB   CD D5 08               CALL   init   
55CE   CD C8 08               CALL   execStr   
55D1   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
55DD                          ;*Macro unroll:  expect "5 \\F {10} ?",5
55DD   E1                     POP   HL   
55DE   E5                     PUSH   HL   
55DF   11 05 00               LD   DE,5   
55E2   B7                     OR   A   
55E3   ED 52                  SBC   HL,DE   
55E5   7D                     LD   A,L   
55E6   B4                     OR   H   
55E7   28 56                  JR   Z,expectM_0_2286S43   
55E9   CD C1 08               CALL   printStr   
55EC   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
55FE   CD C1 08               CALL   printStr   
5601   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5610   21 05 00               LD   HL,5   
5613   CD 0F 08               CALL   prtdec   
5616   CD C1 08               CALL   printStr   
5619   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5626   E1                     POP   hl   
5627   E5                     PUSH   hl   
5628   CD 0F 08               CALL   prtdec   
562B   E1                     POP   hl   
562C   CD C1 08               CALL   printStr   
562F   20 28 23 00            .CSTR   " (#"   
5633   CD 57 08               CALL   prthex   
5636   CD C1 08               CALL   printStr   
5639   29 0D 0A 00            .CSTR   ")\r\n"   
563D   76                     HALT      
563E   00                     .CSTR      
563F                EXPECTM_0_2286S43:      
563F   E1                     POP   HL   
5640                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
5640   31 80 18               LD   SP,STACK   
5643   CD D5 08               CALL   init   
5646   CD C8 08               CALL   execStr   
5649   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
5657                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
5657   E1                     POP   HL   
5658   E5                     PUSH   HL   
5659   11 0F 00               LD   DE,15   
565C   B7                     OR   A   
565D   ED 52                  SBC   HL,DE   
565F   7D                     LD   A,L   
5660   B4                     OR   H   
5661   28 58                  JR   Z,expectM_0_2287S43   
5663   CD C1 08               CALL   printStr   
5666   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
567A   CD C1 08               CALL   printStr   
567D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
568C   21 0F 00               LD   HL,15   
568F   CD 0F 08               CALL   prtdec   
5692   CD C1 08               CALL   printStr   
5695   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56A2   E1                     POP   hl   
56A3   E5                     PUSH   hl   
56A4   CD 0F 08               CALL   prtdec   
56A7   E1                     POP   hl   
56A8   CD C1 08               CALL   printStr   
56AB   20 28 23 00            .CSTR   " (#"   
56AF   CD 57 08               CALL   prthex   
56B2   CD C1 08               CALL   printStr   
56B5   29 0D 0A 00            .CSTR   ")\r\n"   
56B9   76                     HALT      
56BA   00                     .CSTR      
56BB                EXPECTM_0_2287S43:      
56BB   E1                     POP   HL   
56BC                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
56BC   31 80 18               LD   SP,STACK   
56BF   CD D5 08               CALL   init   
56C2   CD C8 08               CALL   execStr   
56C5   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
56D9                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
56D9   E1                     POP   HL   
56DA   E5                     PUSH   HL   
56DB   11 15 00               LD   DE,21   
56DE   B7                     OR   A   
56DF   ED 52                  SBC   HL,DE   
56E1   7D                     LD   A,L   
56E2   B4                     OR   H   
56E3   28 5E                  JR   Z,expectM_0_2288S43   
56E5   CD C1 08               CALL   printStr   
56E8   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
5702   CD C1 08               CALL   printStr   
5705   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5714   21 15 00               LD   HL,21   
5717   CD 0F 08               CALL   prtdec   
571A   CD C1 08               CALL   printStr   
571D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
572A   E1                     POP   hl   
572B   E5                     PUSH   hl   
572C   CD 0F 08               CALL   prtdec   
572F   E1                     POP   hl   
5730   CD C1 08               CALL   printStr   
5733   20 28 23 00            .CSTR   " (#"   
5737   CD 57 08               CALL   prthex   
573A   CD C1 08               CALL   printStr   
573D   29 0D 0A 00            .CSTR   ")\r\n"   
5741   76                     HALT      
5742   00                     .CSTR      
5743                EXPECTM_0_2288S43:      
5743   E1                     POP   HL   
5744                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
5744   31 80 18               LD   SP,STACK   
5747   CD D5 08               CALL   init   
574A   CD C8 08               CALL   execStr   
574D   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
5761                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
5761   E1                     POP   HL   
5762   E5                     PUSH   HL   
5763   11 0B 00               LD   DE,11   
5766   B7                     OR   A   
5767   ED 52                  SBC   HL,DE   
5769   7D                     LD   A,L   
576A   B4                     OR   H   
576B   28 5E                  JR   Z,expectM_0_2289S43   
576D   CD C1 08               CALL   printStr   
5770   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
578A   CD C1 08               CALL   printStr   
578D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
579C   21 0B 00               LD   HL,11   
579F   CD 0F 08               CALL   prtdec   
57A2   CD C1 08               CALL   printStr   
57A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57B2   E1                     POP   hl   
57B3   E5                     PUSH   hl   
57B4   CD 0F 08               CALL   prtdec   
57B7   E1                     POP   hl   
57B8   CD C1 08               CALL   printStr   
57BB   20 28 23 00            .CSTR   " (#"   
57BF   CD 57 08               CALL   prthex   
57C2   CD C1 08               CALL   printStr   
57C5   29 0D 0A 00            .CSTR   ")\r\n"   
57C9   76                     HALT      
57CA   00                     .CSTR      
57CB                EXPECTM_0_2289S43:      
57CB   E1                     POP   HL   
57CC                          ;*Macro unroll:  test "() -2%", $0000
57CC   31 80 18               LD   SP,STACK   
57CF   CD D5 08               CALL   init   
57D2   CD C8 08               CALL   execStr   
57D5   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
57DC                          ;*Macro unroll:  expect "() -2%",$0000
57DC   E1                     POP   HL   
57DD   E5                     PUSH   HL   
57DE   11 00 00               LD   DE,$0000   
57E1   B7                     OR   A   
57E2   ED 52                  SBC   HL,DE   
57E4   7D                     LD   A,L   
57E5   B4                     OR   H   
57E6   28 51                  JR   Z,expectM_0_2290S43   
57E8   CD C1 08               CALL   printStr   
57EB   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
57F8   CD C1 08               CALL   printStr   
57FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
580A   21 00 00               LD   HL,$0000   
580D   CD 0F 08               CALL   prtdec   
5810   CD C1 08               CALL   printStr   
5813   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5820   E1                     POP   hl   
5821   E5                     PUSH   hl   
5822   CD 0F 08               CALL   prtdec   
5825   E1                     POP   hl   
5826   CD C1 08               CALL   printStr   
5829   20 28 23 00            .CSTR   " (#"   
582D   CD 57 08               CALL   prthex   
5830   CD C1 08               CALL   printStr   
5833   29 0D 0A 00            .CSTR   ")\r\n"   
5837   76                     HALT      
5838   00                     .CSTR      
5839                EXPECTM_0_2290S43:      
5839   E1                     POP   HL   
583A                          ;*Macro unroll:  test "(a) -1%", $0001
583A   31 80 18               LD   SP,STACK   
583D   CD D5 08               CALL   init   
5840   CD C8 08               CALL   execStr   
5843   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
584B                          ;*Macro unroll:  expect "(a) -1%",$0001
584B   E1                     POP   HL   
584C   E5                     PUSH   HL   
584D   11 01 00               LD   DE,$0001   
5850   B7                     OR   A   
5851   ED 52                  SBC   HL,DE   
5853   7D                     LD   A,L   
5854   B4                     OR   H   
5855   28 52                  JR   Z,expectM_0_2291S43   
5857   CD C1 08               CALL   printStr   
585A   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
5868   CD C1 08               CALL   printStr   
586B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
587A   21 01 00               LD   HL,$0001   
587D   CD 0F 08               CALL   prtdec   
5880   CD C1 08               CALL   printStr   
5883   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5890   E1                     POP   hl   
5891   E5                     PUSH   hl   
5892   CD 0F 08               CALL   prtdec   
5895   E1                     POP   hl   
5896   CD C1 08               CALL   printStr   
5899   20 28 23 00            .CSTR   " (#"   
589D   CD 57 08               CALL   prthex   
58A0   CD C1 08               CALL   printStr   
58A3   29 0D 0A 00            .CSTR   ")\r\n"   
58A7   76                     HALT      
58A8   00                     .CSTR      
58A9                EXPECTM_0_2291S43:      
58A9   E1                     POP   HL   
58AA                          ;*Macro unroll:  test "(a:) -1%", $0001
58AA   31 80 18               LD   SP,STACK   
58AD   CD D5 08               CALL   init   
58B0   CD C8 08               CALL   execStr   
58B3   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
58BC                          ;*Macro unroll:  expect "(a:) -1%",$0001
58BC   E1                     POP   HL   
58BD   E5                     PUSH   HL   
58BE   11 01 00               LD   DE,$0001   
58C1   B7                     OR   A   
58C2   ED 52                  SBC   HL,DE   
58C4   7D                     LD   A,L   
58C5   B4                     OR   H   
58C6   28 53                  JR   Z,expectM_0_2292S43   
58C8   CD C1 08               CALL   printStr   
58CB   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
58DA   CD C1 08               CALL   printStr   
58DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58EC   21 01 00               LD   HL,$0001   
58EF   CD 0F 08               CALL   prtdec   
58F2   CD C1 08               CALL   printStr   
58F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5902   E1                     POP   hl   
5903   E5                     PUSH   hl   
5904   CD 0F 08               CALL   prtdec   
5907   E1                     POP   hl   
5908   CD C1 08               CALL   printStr   
590B   20 28 23 00            .CSTR   " (#"   
590F   CD 57 08               CALL   prthex   
5912   CD C1 08               CALL   printStr   
5915   29 0D 0A 00            .CSTR   ")\r\n"   
5919   76                     HALT      
591A   00                     .CSTR      
591B                EXPECTM_0_2292S43:      
591B   E1                     POP   HL   
591C                          ;*Macro unroll:  test "(a:b) -1%", $0102
591C   31 80 18               LD   SP,STACK   
591F   CD D5 08               CALL   init   
5922   CD C8 08               CALL   execStr   
5925   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
592F                          ;*Macro unroll:  expect "(a:b) -1%",$0102
592F   E1                     POP   HL   
5930   E5                     PUSH   HL   
5931   11 02 01               LD   DE,$0102   
5934   B7                     OR   A   
5935   ED 52                  SBC   HL,DE   
5937   7D                     LD   A,L   
5938   B4                     OR   H   
5939   28 54                  JR   Z,expectM_0_2293S43   
593B   CD C1 08               CALL   printStr   
593E   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
594E   CD C1 08               CALL   printStr   
5951   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5960   21 02 01               LD   HL,$0102   
5963   CD 0F 08               CALL   prtdec   
5966   CD C1 08               CALL   printStr   
5969   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5976   E1                     POP   hl   
5977   E5                     PUSH   hl   
5978   CD 0F 08               CALL   prtdec   
597B   E1                     POP   hl   
597C   CD C1 08               CALL   printStr   
597F   20 28 23 00            .CSTR   " (#"   
5983   CD 57 08               CALL   prthex   
5986   CD C1 08               CALL   printStr   
5989   29 0D 0A 00            .CSTR   ")\r\n"   
598D   76                     HALT      
598E   00                     .CSTR      
598F                EXPECTM_0_2293S43:      
598F   E1                     POP   HL   
5990                          ;*Macro unroll:  test "(:b) -1%", $0101
5990   31 80 18               LD   SP,STACK   
5993   CD D5 08               CALL   init   
5996   CD C8 08               CALL   execStr   
5999   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
59A2                          ;*Macro unroll:  expect "(:b) -1%",$0101
59A2   E1                     POP   HL   
59A3   E5                     PUSH   HL   
59A4   11 01 01               LD   DE,$0101   
59A7   B7                     OR   A   
59A8   ED 52                  SBC   HL,DE   
59AA   7D                     LD   A,L   
59AB   B4                     OR   H   
59AC   28 53                  JR   Z,expectM_0_2294S43   
59AE   CD C1 08               CALL   printStr   
59B1   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
59C0   CD C1 08               CALL   printStr   
59C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59D2   21 01 01               LD   HL,$0101   
59D5   CD 0F 08               CALL   prtdec   
59D8   CD C1 08               CALL   printStr   
59DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59E8   E1                     POP   hl   
59E9   E5                     PUSH   hl   
59EA   CD 0F 08               CALL   prtdec   
59ED   E1                     POP   hl   
59EE   CD C1 08               CALL   printStr   
59F1   20 28 23 00            .CSTR   " (#"   
59F5   CD 57 08               CALL   prthex   
59F8   CD C1 08               CALL   printStr   
59FB   29 0D 0A 00            .CSTR   ")\r\n"   
59FF   76                     HALT      
5A00   00                     .CSTR      
5A01                EXPECTM_0_2294S43:      
5A01   E1                     POP   HL   
5A02                          ;*Macro unroll:  test "() {2} \\f:", 2
5A02   31 80 18               LD   SP,STACK   
5A05   CD D5 08               CALL   init   
5A08   CD C8 08               CALL   execStr   
5A0B   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
5A16                          ;*Macro unroll:  expect "() {2} \\f:",2
5A16   E1                     POP   HL   
5A17   E5                     PUSH   HL   
5A18   11 02 00               LD   DE,2   
5A1B   B7                     OR   A   
5A1C   ED 52                  SBC   HL,DE   
5A1E   7D                     LD   A,L   
5A1F   B4                     OR   H   
5A20   28 55                  JR   Z,expectM_0_2295S43   
5A22   CD C1 08               CALL   printStr   
5A25   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
5A36   CD C1 08               CALL   printStr   
5A39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A48   21 02 00               LD   HL,2   
5A4B   CD 0F 08               CALL   prtdec   
5A4E   CD C1 08               CALL   printStr   
5A51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A5E   E1                     POP   hl   
5A5F   E5                     PUSH   hl   
5A60   CD 0F 08               CALL   prtdec   
5A63   E1                     POP   hl   
5A64   CD C1 08               CALL   printStr   
5A67   20 28 23 00            .CSTR   " (#"   
5A6B   CD 57 08               CALL   prthex   
5A6E   CD C1 08               CALL   printStr   
5A71   29 0D 0A 00            .CSTR   ")\r\n"   
5A75   76                     HALT      
5A76   00                     .CSTR      
5A77                EXPECTM_0_2295S43:      
5A77   E1                     POP   HL   
5A78                          ;*Macro unroll:  test "(a) {2} \\f:", 2
5A78   31 80 18               LD   SP,STACK   
5A7B   CD D5 08               CALL   init   
5A7E   CD C8 08               CALL   execStr   
5A81   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
5A8D                          ;*Macro unroll:  expect "(a) {2} \\f:",2
5A8D   E1                     POP   HL   
5A8E   E5                     PUSH   HL   
5A8F   11 02 00               LD   DE,2   
5A92   B7                     OR   A   
5A93   ED 52                  SBC   HL,DE   
5A95   7D                     LD   A,L   
5A96   B4                     OR   H   
5A97   28 56                  JR   Z,expectM_0_2296S43   
5A99   CD C1 08               CALL   printStr   
5A9C   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
5AAE   CD C1 08               CALL   printStr   
5AB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AC0   21 02 00               LD   HL,2   
5AC3   CD 0F 08               CALL   prtdec   
5AC6   CD C1 08               CALL   printStr   
5AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AD6   E1                     POP   hl   
5AD7   E5                     PUSH   hl   
5AD8   CD 0F 08               CALL   prtdec   
5ADB   E1                     POP   hl   
5ADC   CD C1 08               CALL   printStr   
5ADF   20 28 23 00            .CSTR   " (#"   
5AE3   CD 57 08               CALL   prthex   
5AE6   CD C1 08               CALL   printStr   
5AE9   29 0D 0A 00            .CSTR   ")\r\n"   
5AED   76                     HALT      
5AEE   00                     .CSTR      
5AEF                EXPECTM_0_2296S43:      
5AEF   E1                     POP   HL   
5AF0                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
5AF0   31 80 18               LD   SP,STACK   
5AF3   CD D5 08               CALL   init   
5AF6   CD C8 08               CALL   execStr   
5AF9   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
5B08                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
5B08   E1                     POP   HL   
5B09   E5                     PUSH   HL   
5B0A   11 05 00               LD   DE,5   
5B0D   B7                     OR   A   
5B0E   ED 52                  SBC   HL,DE   
5B10   7D                     LD   A,L   
5B11   B4                     OR   H   
5B12   28 59                  JR   Z,expectM_0_2297S43   
5B14   CD C1 08               CALL   printStr   
5B17   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
5B2C   CD C1 08               CALL   printStr   
5B2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B3E   21 05 00               LD   HL,5   
5B41   CD 0F 08               CALL   prtdec   
5B44   CD C1 08               CALL   printStr   
5B47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B54   E1                     POP   hl   
5B55   E5                     PUSH   hl   
5B56   CD 0F 08               CALL   prtdec   
5B59   E1                     POP   hl   
5B5A   CD C1 08               CALL   printStr   
5B5D   20 28 23 00            .CSTR   " (#"   
5B61   CD 57 08               CALL   prthex   
5B64   CD C1 08               CALL   printStr   
5B67   29 0D 0A 00            .CSTR   ")\r\n"   
5B6B   76                     HALT      
5B6C   00                     .CSTR      
5B6D                EXPECTM_0_2297S43:      
5B6D   E1                     POP   HL   
5B6E                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
5B6E   31 80 18               LD   SP,STACK   
5B71   CD D5 08               CALL   init   
5B74   CD C8 08               CALL   execStr   
5B77   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
5B88                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
5B88   E1                     POP   HL   
5B89   E5                     PUSH   HL   
5B8A   11 05 00               LD   DE,5   
5B8D   B7                     OR   A   
5B8E   ED 52                  SBC   HL,DE   
5B90   7D                     LD   A,L   
5B91   B4                     OR   H   
5B92   28 5B                  JR   Z,expectM_0_2298S43   
5B94   CD C1 08               CALL   printStr   
5B97   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
5BAE   CD C1 08               CALL   printStr   
5BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BC0   21 05 00               LD   HL,5   
5BC3   CD 0F 08               CALL   prtdec   
5BC6   CD C1 08               CALL   printStr   
5BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5BD6   E1                     POP   hl   
5BD7   E5                     PUSH   hl   
5BD8   CD 0F 08               CALL   prtdec   
5BDB   E1                     POP   hl   
5BDC   CD C1 08               CALL   printStr   
5BDF   20 28 23 00            .CSTR   " (#"   
5BE3   CD 57 08               CALL   prthex   
5BE6   CD C1 08               CALL   printStr   
5BE9   29 0D 0A 00            .CSTR   ")\r\n"   
5BED   76                     HALT      
5BEE   00                     .CSTR      
5BEF                EXPECTM_0_2298S43:      
5BEF   E1                     POP   HL   
5BF0                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
5BF0   31 80 18               LD   SP,STACK   
5BF3   CD D5 08               CALL   init   
5BF6   CD C8 08               CALL   execStr   
5BF9   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
5C08                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
5C08   E1                     POP   HL   
5C09   E5                     PUSH   HL   
5C0A   11 02 00               LD   DE,2   
5C0D   B7                     OR   A   
5C0E   ED 52                  SBC   HL,DE   
5C10   7D                     LD   A,L   
5C11   B4                     OR   H   
5C12   28 59                  JR   Z,expectM_0_2299S43   
5C14   CD C1 08               CALL   printStr   
5C17   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
5C2C   CD C1 08               CALL   printStr   
5C2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C3E   21 02 00               LD   HL,2   
5C41   CD 0F 08               CALL   prtdec   
5C44   CD C1 08               CALL   printStr   
5C47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C54   E1                     POP   hl   
5C55   E5                     PUSH   hl   
5C56   CD 0F 08               CALL   prtdec   
5C59   E1                     POP   hl   
5C5A   CD C1 08               CALL   printStr   
5C5D   20 28 23 00            .CSTR   " (#"   
5C61   CD 57 08               CALL   prthex   
5C64   CD C1 08               CALL   printStr   
5C67   29 0D 0A 00            .CSTR   ")\r\n"   
5C6B   76                     HALT      
5C6C   00                     .CSTR      
5C6D                EXPECTM_0_2299S43:      
5C6D   E1                     POP   HL   
5C6E                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
5C6E   31 80 18               LD   SP,STACK   
5C71   CD D5 08               CALL   init   
5C74   CD C8 08               CALL   execStr   
5C77   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
5C8B                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
5C8B   E1                     POP   HL   
5C8C   E5                     PUSH   HL   
5C8D   11 05 00               LD   DE,5   
5C90   B7                     OR   A   
5C91   ED 52                  SBC   HL,DE   
5C93   7D                     LD   A,L   
5C94   B4                     OR   H   
5C95   28 5E                  JR   Z,expectM_0_2300S43   
5C97   CD C1 08               CALL   printStr   
5C9A   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
5CB4   CD C1 08               CALL   printStr   
5CB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5CC6   21 05 00               LD   HL,5   
5CC9   CD 0F 08               CALL   prtdec   
5CCC   CD C1 08               CALL   printStr   
5CCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5CDC   E1                     POP   hl   
5CDD   E5                     PUSH   hl   
5CDE   CD 0F 08               CALL   prtdec   
5CE1   E1                     POP   hl   
5CE2   CD C1 08               CALL   printStr   
5CE5   20 28 23 00            .CSTR   " (#"   
5CE9   CD 57 08               CALL   prthex   
5CEC   CD C1 08               CALL   printStr   
5CEF   29 0D 0A 00            .CSTR   ")\r\n"   
5CF3   76                     HALT      
5CF4   00                     .CSTR      
5CF5                EXPECTM_0_2300S43:      
5CF5   E1                     POP   HL   
5CF6                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
5CF6   31 80 18               LD   SP,STACK   
5CF9   CD D5 08               CALL   init   
5CFC   CD C8 08               CALL   execStr   
5CFF   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
5D14                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
5D14   E1                     POP   HL   
5D15   E5                     PUSH   HL   
5D16   11 01 00               LD   DE,1   
5D19   B7                     OR   A   
5D1A   ED 52                  SBC   HL,DE   
5D1C   7D                     LD   A,L   
5D1D   B4                     OR   H   
5D1E   28 5F                  JR   Z,expectM_0_2301S43   
5D20   CD C1 08               CALL   printStr   
5D23   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
5D3E   CD C1 08               CALL   printStr   
5D41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D50   21 01 00               LD   HL,1   
5D53   CD 0F 08               CALL   prtdec   
5D56   CD C1 08               CALL   printStr   
5D59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D66   E1                     POP   hl   
5D67   E5                     PUSH   hl   
5D68   CD 0F 08               CALL   prtdec   
5D6B   E1                     POP   hl   
5D6C   CD C1 08               CALL   printStr   
5D6F   20 28 23 00            .CSTR   " (#"   
5D73   CD 57 08               CALL   prthex   
5D76   CD C1 08               CALL   printStr   
5D79   29 0D 0A 00            .CSTR   ")\r\n"   
5D7D   76                     HALT      
5D7E   00                     .CSTR      
5D7F                EXPECTM_0_2301S43:      
5D7F   E1                     POP   HL   
5D80                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
5D80   31 80 18               LD   SP,STACK   
5D83   CD D5 08               CALL   init   
5D86   CD C8 08               CALL   execStr   
5D89   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
5DA1                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
5DA1   E1                     POP   HL   
5DA2   E5                     PUSH   HL   
5DA3   11 07 00               LD   DE,7   
5DA6   B7                     OR   A   
5DA7   ED 52                  SBC   HL,DE   
5DA9   7D                     LD   A,L   
5DAA   B4                     OR   H   
5DAB   28 62                  JR   Z,expectM_0_2302S43   
5DAD   CD C1 08               CALL   printStr   
5DB0   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
5DCE   CD C1 08               CALL   printStr   
5DD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5DE0   21 07 00               LD   HL,7   
5DE3   CD 0F 08               CALL   prtdec   
5DE6   CD C1 08               CALL   printStr   
5DE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5DF6   E1                     POP   hl   
5DF7   E5                     PUSH   hl   
5DF8   CD 0F 08               CALL   prtdec   
5DFB   E1                     POP   hl   
5DFC   CD C1 08               CALL   printStr   
5DFF   20 28 23 00            .CSTR   " (#"   
5E03   CD 57 08               CALL   prthex   
5E06   CD C1 08               CALL   printStr   
5E09   29 0D 0A 00            .CSTR   ")\r\n"   
5E0D   76                     HALT      
5E0E   00                     .CSTR      
5E0F                EXPECTM_0_2302S43:      
5E0F   E1                     POP   HL   
5E10                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
5E10   31 80 18               LD   SP,STACK   
5E13   CD D5 08               CALL   init   
5E16   CD C8 08               CALL   execStr   
5E19   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
5E33                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
5E33   E1                     POP   HL   
5E34   E5                     PUSH   HL   
5E35   11 06 00               LD   DE,6   
5E38   B7                     OR   A   
5E39   ED 52                  SBC   HL,DE   
5E3B   7D                     LD   A,L   
5E3C   B4                     OR   H   
5E3D   28 64                  JR   Z,expectM_0_2303S43   
5E3F   CD C1 08               CALL   printStr   
5E42   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
5E62   CD C1 08               CALL   printStr   
5E65   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E74   21 06 00               LD   HL,6   
5E77   CD 0F 08               CALL   prtdec   
5E7A   CD C1 08               CALL   printStr   
5E7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E8A   E1                     POP   hl   
5E8B   E5                     PUSH   hl   
5E8C   CD 0F 08               CALL   prtdec   
5E8F   E1                     POP   hl   
5E90   CD C1 08               CALL   printStr   
5E93   20 28 23 00            .CSTR   " (#"   
5E97   CD 57 08               CALL   prthex   
5E9A   CD C1 08               CALL   printStr   
5E9D   29 0D 0A 00            .CSTR   ")\r\n"   
5EA1   76                     HALT      
5EA2   00                     .CSTR      
5EA3                EXPECTM_0_2303S43:      
5EA3   E1                     POP   HL   
5EA4                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
5EA4   31 80 18               LD   SP,STACK   
5EA7   CD D5 08               CALL   init   
5EAA   CD C8 08               CALL   execStr   
5EAD   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
5EC0                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
5EC0   E1                     POP   HL   
5EC1   E5                     PUSH   HL   
5EC2   11 02 00               LD   DE,2   
5EC5   B7                     OR   A   
5EC6   ED 52                  SBC   HL,DE   
5EC8   7D                     LD   A,L   
5EC9   B4                     OR   H   
5ECA   28 5D                  JR   Z,expectM_0_2304S43   
5ECC   CD C1 08               CALL   printStr   
5ECF   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
5EE8   CD C1 08               CALL   printStr   
5EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5EFA   21 02 00               LD   HL,2   
5EFD   CD 0F 08               CALL   prtdec   
5F00   CD C1 08               CALL   printStr   
5F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F10   E1                     POP   hl   
5F11   E5                     PUSH   hl   
5F12   CD 0F 08               CALL   prtdec   
5F15   E1                     POP   hl   
5F16   CD C1 08               CALL   printStr   
5F19   20 28 23 00            .CSTR   " (#"   
5F1D   CD 57 08               CALL   prthex   
5F20   CD C1 08               CALL   printStr   
5F23   29 0D 0A 00            .CSTR   ")\r\n"   
5F27   76                     HALT      
5F28   00                     .CSTR      
5F29                EXPECTM_0_2304S43:      
5F29   E1                     POP   HL   
5F2A                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
5F2A   31 80 18               LD   SP,STACK   
5F2D   CD D5 08               CALL   init   
5F30   CD C8 08               CALL   execStr   
5F33   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
5F49                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
5F49   E1                     POP   HL   
5F4A   E5                     PUSH   HL   
5F4B   11 01 00               LD   DE,1   
5F4E   B7                     OR   A   
5F4F   ED 52                  SBC   HL,DE   
5F51   7D                     LD   A,L   
5F52   B4                     OR   H   
5F53   28 60                  JR   Z,expectM_0_2305S43   
5F55   CD C1 08               CALL   printStr   
5F58   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
5F74   CD C1 08               CALL   printStr   
5F77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F86   21 01 00               LD   HL,1   
5F89   CD 0F 08               CALL   prtdec   
5F8C   CD C1 08               CALL   printStr   
5F8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F9C   E1                     POP   hl   
5F9D   E5                     PUSH   hl   
5F9E   CD 0F 08               CALL   prtdec   
5FA1   E1                     POP   hl   
5FA2   CD C1 08               CALL   printStr   
5FA5   20 28 23 00            .CSTR   " (#"   
5FA9   CD 57 08               CALL   prthex   
5FAC   CD C1 08               CALL   printStr   
5FAF   29 0D 0A 00            .CSTR   ")\r\n"   
5FB3   76                     HALT      
5FB4   00                     .CSTR      
5FB5                EXPECTM_0_2305S43:      
5FB5   E1                     POP   HL   
5FB6                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5FB6   31 80 18               LD   SP,STACK   
5FB9   CD D5 08               CALL   init   
5FBC   CD C8 08               CALL   execStr   
5FBF   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5FD6                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5FD6   E1                     POP   HL   
5FD7   E5                     PUSH   HL   
5FD8   11 02 00               LD   DE,2   
5FDB   B7                     OR   A   
5FDC   ED 52                  SBC   HL,DE   
5FDE   7D                     LD   A,L   
5FDF   B4                     OR   H   
5FE0   28 61                  JR   Z,expectM_0_2306S43   
5FE2   CD C1 08               CALL   printStr   
5FE5   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
6002   CD C1 08               CALL   printStr   
6005   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6014   21 02 00               LD   HL,2   
6017   CD 0F 08               CALL   prtdec   
601A   CD C1 08               CALL   printStr   
601D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
602A   E1                     POP   hl   
602B   E5                     PUSH   hl   
602C   CD 0F 08               CALL   prtdec   
602F   E1                     POP   hl   
6030   CD C1 08               CALL   printStr   
6033   20 28 23 00            .CSTR   " (#"   
6037   CD 57 08               CALL   prthex   
603A   CD C1 08               CALL   printStr   
603D   29 0D 0A 00            .CSTR   ")\r\n"   
6041   76                     HALT      
6042   00                     .CSTR      
6043                EXPECTM_0_2306S43:      
6043   E1                     POP   HL   
6044                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
6044   31 80 18               LD   SP,STACK   
6047   CD D5 08               CALL   init   
604A   CD C8 08               CALL   execStr   
604D   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
6065                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
6065   E1                     POP   HL   
6066   E5                     PUSH   HL   
6067   11 02 00               LD   DE,2   
606A   B7                     OR   A   
606B   ED 52                  SBC   HL,DE   
606D   7D                     LD   A,L   
606E   B4                     OR   H   
606F   28 62                  JR   Z,expectM_0_2307S43   
6071   CD C1 08               CALL   printStr   
6074   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
6092   CD C1 08               CALL   printStr   
6095   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
60A4   21 02 00               LD   HL,2   
60A7   CD 0F 08               CALL   prtdec   
60AA   CD C1 08               CALL   printStr   
60AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
60BA   E1                     POP   hl   
60BB   E5                     PUSH   hl   
60BC   CD 0F 08               CALL   prtdec   
60BF   E1                     POP   hl   
60C0   CD C1 08               CALL   printStr   
60C3   20 28 23 00            .CSTR   " (#"   
60C7   CD 57 08               CALL   prthex   
60CA   CD C1 08               CALL   printStr   
60CD   29 0D 0A 00            .CSTR   ")\r\n"   
60D1   76                     HALT      
60D2   00                     .CSTR      
60D3                EXPECTM_0_2307S43:      
60D3   E1                     POP   HL   
60D4                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
60D4   31 80 18               LD   SP,STACK   
60D7   CD D5 08               CALL   init   
60DA   CD C8 08               CALL   execStr   
60DD   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
60F4                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
60F4   E1                     POP   HL   
60F5   E5                     PUSH   HL   
60F6   11 02 00               LD   DE,2   
60F9   B7                     OR   A   
60FA   ED 52                  SBC   HL,DE   
60FC   7D                     LD   A,L   
60FD   B4                     OR   H   
60FE   28 61                  JR   Z,expectM_0_2308S43   
6100   CD C1 08               CALL   printStr   
6103   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
6120   CD C1 08               CALL   printStr   
6123   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6132   21 02 00               LD   HL,2   
6135   CD 0F 08               CALL   prtdec   
6138   CD C1 08               CALL   printStr   
613B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6148   E1                     POP   hl   
6149   E5                     PUSH   hl   
614A   CD 0F 08               CALL   prtdec   
614D   E1                     POP   hl   
614E   CD C1 08               CALL   printStr   
6151   20 28 23 00            .CSTR   " (#"   
6155   CD 57 08               CALL   prthex   
6158   CD C1 08               CALL   printStr   
615B   29 0D 0A 00            .CSTR   ")\r\n"   
615F   76                     HALT      
6160   00                     .CSTR      
6161                EXPECTM_0_2308S43:      
6161   E1                     POP   HL   
6162                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
6162   31 80 18               LD   SP,STACK   
6165   CD D5 08               CALL   init   
6168   CD C8 08               CALL   execStr   
616B   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
6189                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
6189   E1                     POP   HL   
618A   E5                     PUSH   HL   
618B   11 05 00               LD   DE,5   
618E   B7                     OR   A   
618F   ED 52                  SBC   HL,DE   
6191   7D                     LD   A,L   
6192   B4                     OR   H   
6193   28 68                  JR   Z,expectM_0_2309S43   
6195   CD C1 08               CALL   printStr   
6198   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
61BC   CD C1 08               CALL   printStr   
61BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
61CE   21 05 00               LD   HL,5   
61D1   CD 0F 08               CALL   prtdec   
61D4   CD C1 08               CALL   printStr   
61D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
61E4   E1                     POP   hl   
61E5   E5                     PUSH   hl   
61E6   CD 0F 08               CALL   prtdec   
61E9   E1                     POP   hl   
61EA   CD C1 08               CALL   printStr   
61ED   20 28 23 00            .CSTR   " (#"   
61F1   CD 57 08               CALL   prthex   
61F4   CD C1 08               CALL   printStr   
61F7   29 0D 0A 00            .CSTR   ")\r\n"   
61FB   76                     HALT      
61FC   00                     .CSTR      
61FD                EXPECTM_0_2309S43:      
61FD   E1                     POP   HL   
61FE                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
61FE   31 80 18               LD   SP,STACK   
6201   CD D5 08               CALL   init   
6204   CD C8 08               CALL   execStr   
6207   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
621C                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
621C   E1                     POP   HL   
621D   E5                     PUSH   HL   
621E   11 02 00               LD   DE,2   
6221   B7                     OR   A   
6222   ED 52                  SBC   HL,DE   
6224   7D                     LD   A,L   
6225   B4                     OR   H   
6226   28 5F                  JR   Z,expectM_0_2310S43   
6228   CD C1 08               CALL   printStr   
622B   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
6246   CD C1 08               CALL   printStr   
6249   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6258   21 02 00               LD   HL,2   
625B   CD 0F 08               CALL   prtdec   
625E   CD C1 08               CALL   printStr   
6261   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
626E   E1                     POP   hl   
626F   E5                     PUSH   hl   
6270   CD 0F 08               CALL   prtdec   
6273   E1                     POP   hl   
6274   CD C1 08               CALL   printStr   
6277   20 28 23 00            .CSTR   " (#"   
627B   CD 57 08               CALL   prthex   
627E   CD C1 08               CALL   printStr   
6281   29 0D 0A 00            .CSTR   ")\r\n"   
6285   76                     HALT      
6286   00                     .CSTR      
6287                EXPECTM_0_2310S43:      
6287   E1                     POP   HL   
6288                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
6288   31 80 18               LD   SP,STACK   
628B   CD D5 08               CALL   init   
628E   CD C8 08               CALL   execStr   
6291   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
62AC                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
62AC   E1                     POP   HL   
62AD   E5                     PUSH   HL   
62AE   11 64 00               LD   DE,100   
62B1   B7                     OR   A   
62B2   ED 52                  SBC   HL,DE   
62B4   7D                     LD   A,L   
62B5   B4                     OR   H   
62B6   28 65                  JR   Z,expectM_0_2311S43   
62B8   CD C1 08               CALL   printStr   
62BB   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
62DC   CD C1 08               CALL   printStr   
62DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
62EE   21 64 00               LD   HL,100   
62F1   CD 0F 08               CALL   prtdec   
62F4   CD C1 08               CALL   printStr   
62F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6304   E1                     POP   hl   
6305   E5                     PUSH   hl   
6306   CD 0F 08               CALL   prtdec   
6309   E1                     POP   hl   
630A   CD C1 08               CALL   printStr   
630D   20 28 23 00            .CSTR   " (#"   
6311   CD 57 08               CALL   prthex   
6314   CD C1 08               CALL   printStr   
6317   29 0D 0A 00            .CSTR   ")\r\n"   
631B   76                     HALT      
631C   00                     .CSTR      
631D                EXPECTM_0_2311S43:      
631D   E1                     POP   HL   
631E                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
631E   31 80 18               LD   SP,STACK   
6321   CD D5 08               CALL   init   
6324   CD C8 08               CALL   execStr   
6327   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
6343                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
6343   E1                     POP   HL   
6344   E5                     PUSH   HL   
6345   11 01 00               LD   DE,1   
6348   B7                     OR   A   
6349   ED 52                  SBC   HL,DE   
634B   7D                     LD   A,L   
634C   B4                     OR   H   
634D   28 66                  JR   Z,expectM_0_2312S43   
634F   CD C1 08               CALL   printStr   
6352   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
6374   CD C1 08               CALL   printStr   
6377   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6386   21 01 00               LD   HL,1   
6389   CD 0F 08               CALL   prtdec   
638C   CD C1 08               CALL   printStr   
638F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
639C   E1                     POP   hl   
639D   E5                     PUSH   hl   
639E   CD 0F 08               CALL   prtdec   
63A1   E1                     POP   hl   
63A2   CD C1 08               CALL   printStr   
63A5   20 28 23 00            .CSTR   " (#"   
63A9   CD 57 08               CALL   prthex   
63AC   CD C1 08               CALL   printStr   
63AF   29 0D 0A 00            .CSTR   ")\r\n"   
63B3   76                     HALT      
63B4   00                     .CSTR      
63B5                EXPECTM_0_2312S43:      
63B5   E1                     POP   HL   
63B6                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
63B6   31 80 18               LD   SP,STACK   
63B9   CD D5 08               CALL   init   
63BC   CD C8 08               CALL   execStr   
63BF   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
63DC                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
63DC   E1                     POP   HL   
63DD   E5                     PUSH   HL   
63DE   11 02 00               LD   DE,2   
63E1   B7                     OR   A   
63E2   ED 52                  SBC   HL,DE   
63E4   7D                     LD   A,L   
63E5   B4                     OR   H   
63E6   28 67                  JR   Z,expectM_0_2313S43   
63E8   CD C1 08               CALL   printStr   
63EB   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
640E   CD C1 08               CALL   printStr   
6411   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6420   21 02 00               LD   HL,2   
6423   CD 0F 08               CALL   prtdec   
6426   CD C1 08               CALL   printStr   
6429   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6436   E1                     POP   hl   
6437   E5                     PUSH   hl   
6438   CD 0F 08               CALL   prtdec   
643B   E1                     POP   hl   
643C   CD C1 08               CALL   printStr   
643F   20 28 23 00            .CSTR   " (#"   
6443   CD 57 08               CALL   prthex   
6446   CD C1 08               CALL   printStr   
6449   29 0D 0A 00            .CSTR   ")\r\n"   
644D   76                     HALT      
644E   00                     .CSTR      
644F                EXPECTM_0_2313S43:      
644F   E1                     POP   HL   
6450                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
6450   31 80 18               LD   SP,STACK   
6453   CD D5 08               CALL   init   
6456   CD C8 08               CALL   execStr   
6459   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
647E                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
647E   E1                     POP   HL   
647F   E5                     PUSH   HL   
6480   11 0B 00               LD   DE,11   
6483   B7                     OR   A   
6484   ED 52                  SBC   HL,DE   
6486   7D                     LD   A,L   
6487   B4                     OR   H   
6488   28 6F                  JR   Z,expectM_0_2314S43   
648A   CD C1 08               CALL   printStr   
648D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
64B8   CD C1 08               CALL   printStr   
64BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
64CA   21 0B 00               LD   HL,11   
64CD   CD 0F 08               CALL   prtdec   
64D0   CD C1 08               CALL   printStr   
64D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
64E0   E1                     POP   hl   
64E1   E5                     PUSH   hl   
64E2   CD 0F 08               CALL   prtdec   
64E5   E1                     POP   hl   
64E6   CD C1 08               CALL   printStr   
64E9   20 28 23 00            .CSTR   " (#"   
64ED   CD 57 08               CALL   prthex   
64F0   CD C1 08               CALL   printStr   
64F3   29 0D 0A 00            .CSTR   ")\r\n"   
64F7   76                     HALT      
64F8   00                     .CSTR      
64F9                EXPECTM_0_2314S43:      
64F9   E1                     POP   HL   
64FA                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
64FA   31 80 18               LD   SP,STACK   
64FD   CD D5 08               CALL   init   
6500   CD C8 08               CALL   execStr   
6503   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
6528                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
6528   E1                     POP   HL   
6529   E5                     PUSH   HL   
652A   11 15 00               LD   DE,21   
652D   B7                     OR   A   
652E   ED 52                  SBC   HL,DE   
6530   7D                     LD   A,L   
6531   B4                     OR   H   
6532   28 6F                  JR   Z,expectM_0_2315S43   
6534   CD C1 08               CALL   printStr   
6537   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
6562   CD C1 08               CALL   printStr   
6565   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6574   21 15 00               LD   HL,21   
6577   CD 0F 08               CALL   prtdec   
657A   CD C1 08               CALL   printStr   
657D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
658A   E1                     POP   hl   
658B   E5                     PUSH   hl   
658C   CD 0F 08               CALL   prtdec   
658F   E1                     POP   hl   
6590   CD C1 08               CALL   printStr   
6593   20 28 23 00            .CSTR   " (#"   
6597   CD 57 08               CALL   prthex   
659A   CD C1 08               CALL   printStr   
659D   29 0D 0A 00            .CSTR   ")\r\n"   
65A1   76                     HALT      
65A2   00                     .CSTR      
65A3                EXPECTM_0_2315S43:      
65A3   E1                     POP   HL   
65A4                          ;*Macro unroll:  test "[10 20 30] 1%", 20
65A4   31 80 18               LD   SP,STACK   
65A7   CD D5 08               CALL   init   
65AA   CD C8 08               CALL   execStr   
65AD   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
65BB                          ;*Macro unroll:  expect "[10 20 30] 1%",20
65BB   E1                     POP   HL   
65BC   E5                     PUSH   HL   
65BD   11 14 00               LD   DE,20   
65C0   B7                     OR   A   
65C1   ED 52                  SBC   HL,DE   
65C3   7D                     LD   A,L   
65C4   B4                     OR   H   
65C5   28 58                  JR   Z,expectM_0_2316S43   
65C7   CD C1 08               CALL   printStr   
65CA   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
65DE   CD C1 08               CALL   printStr   
65E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
65F0   21 14 00               LD   HL,20   
65F3   CD 0F 08               CALL   prtdec   
65F6   CD C1 08               CALL   printStr   
65F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6606   E1                     POP   hl   
6607   E5                     PUSH   hl   
6608   CD 0F 08               CALL   prtdec   
660B   E1                     POP   hl   
660C   CD C1 08               CALL   printStr   
660F   20 28 23 00            .CSTR   " (#"   
6613   CD 57 08               CALL   prthex   
6616   CD C1 08               CALL   printStr   
6619   29 0D 0A 00            .CSTR   ")\r\n"   
661D   76                     HALT      
661E   00                     .CSTR      
661F                EXPECTM_0_2316S43:      
661F   E1                     POP   HL   
6620                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
6620   31 80 18               LD   SP,STACK   
6623   CD D5 08               CALL   init   
6626   CD C8 08               CALL   execStr   
6629   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
6637                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
6637   E1                     POP   HL   
6638   E5                     PUSH   HL   
6639   11 02 00               LD   DE,2   
663C   B7                     OR   A   
663D   ED 52                  SBC   HL,DE   
663F   7D                     LD   A,L   
6640   B4                     OR   H   
6641   28 58                  JR   Z,expectM_0_2317S43   
6643   CD C1 08               CALL   printStr   
6646   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
665A   CD C1 08               CALL   printStr   
665D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
666C   21 02 00               LD   HL,2   
666F   CD 0F 08               CALL   prtdec   
6672   CD C1 08               CALL   printStr   
6675   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6682   E1                     POP   hl   
6683   E5                     PUSH   hl   
6684   CD 0F 08               CALL   prtdec   
6687   E1                     POP   hl   
6688   CD C1 08               CALL   printStr   
668B   20 28 23 00            .CSTR   " (#"   
668F   CD 57 08               CALL   prthex   
6692   CD C1 08               CALL   printStr   
6695   29 0D 0A 00            .CSTR   ")\r\n"   
6699   76                     HALT      
669A   00                     .CSTR      
669B                EXPECTM_0_2317S43:      
669B   E1                     POP   HL   
669C                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
669C   31 80 18               LD   SP,STACK   
669F   CD D5 08               CALL   init   
66A2   CD C8 08               CALL   execStr   
66A5   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
66B9                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
66B9   E1                     POP   HL   
66BA   E5                     PUSH   HL   
66BB   11 42 00               LD   DE,66   
66BE   B7                     OR   A   
66BF   ED 52                  SBC   HL,DE   
66C1   7D                     LD   A,L   
66C2   B4                     OR   H   
66C3   28 5E                  JR   Z,expectM_0_2318S43   
66C5   CD C1 08               CALL   printStr   
66C8   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
66E2   CD C1 08               CALL   printStr   
66E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
66F4   21 42 00               LD   HL,66   
66F7   CD 0F 08               CALL   prtdec   
66FA   CD C1 08               CALL   printStr   
66FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
670A   E1                     POP   hl   
670B   E5                     PUSH   hl   
670C   CD 0F 08               CALL   prtdec   
670F   E1                     POP   hl   
6710   CD C1 08               CALL   printStr   
6713   20 28 23 00            .CSTR   " (#"   
6717   CD 57 08               CALL   prthex   
671A   CD C1 08               CALL   printStr   
671D   29 0D 0A 00            .CSTR   ")\r\n"   
6721   76                     HALT      
6722   00                     .CSTR      
6723                EXPECTM_0_2318S43:      
6723   E1                     POP   HL   
6724                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
6724   31 80 18               LD   SP,STACK   
6727   CD D5 08               CALL   init   
672A   CD C8 08               CALL   execStr   
672D   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
6743                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
6743   E1                     POP   HL   
6744   E5                     PUSH   HL   
6745   11 0A 00               LD   DE,10   
6748   B7                     OR   A   
6749   ED 52                  SBC   HL,DE   
674B   7D                     LD   A,L   
674C   B4                     OR   H   
674D   28 60                  JR   Z,expectM_0_2319S43   
674F   CD C1 08               CALL   printStr   
6752   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
676E   CD C1 08               CALL   printStr   
6771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6780   21 0A 00               LD   HL,10   
6783   CD 0F 08               CALL   prtdec   
6786   CD C1 08               CALL   printStr   
6789   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6796   E1                     POP   hl   
6797   E5                     PUSH   hl   
6798   CD 0F 08               CALL   prtdec   
679B   E1                     POP   hl   
679C   CD C1 08               CALL   printStr   
679F   20 28 23 00            .CSTR   " (#"   
67A3   CD 57 08               CALL   prthex   
67A6   CD C1 08               CALL   printStr   
67A9   29 0D 0A 00            .CSTR   ")\r\n"   
67AD   76                     HALT      
67AE   00                     .CSTR      
67AF                EXPECTM_0_2319S43:      
67AF   E1                     POP   HL   
67B0                             ; 
67B0                             ; 
67B0                             ; 
67B0                             ; 
67B0                             ; 
67B0                             ; 
67B0                             ; 
67B0                             ; test "10 sqrt", 3
67B0                             ; test "10 sqrt frac", 1
67B0                             ; test "[ 1 ] closure call", 1
67B0                             ; test "[ [ 2 ] ] closure call 0%", 2
67B0                             ; call:Str
67B0                             ; db "9"
67B0                             ; kall sqrt1
67B0                             ; db 0
67B0                             ; expect "9 sqrt",3
67B0   CD C1 08               CALL   printStr   
67B3   44 6F 6E 65 21 00      .CSTR   "Done!"   
67B9   76                     HALT      
67BA                          ALIGN   2   
67BA                PRINTER:      
67BA   E1                     POP   hl   
67BB   CD 0F 08               CALL   prtdec   
67BE   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               080D DEFINED AT LINE 1344 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1088 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 806 IN monty.asm
                    > USED AT LINE 813 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 44 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 864 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 869 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1696 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 905 IN monty.asm
                    > USED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1508 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1584 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
DOT_:               0327 DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 245 IN monty.asm
GO_:                032D DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 251 IN monty.asm
IF_:                0336 DEFINED AT LINE 253 IN monty.asm
INV_:               0339 DEFINED AT LINE 255 IN monty.asm
MUL_:               033F DEFINED AT LINE 258 IN monty.asm
NOT_:               0342 DEFINED AT LINE 260 IN monty.asm
NUM_:               0347 DEFINED AT LINE 263 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 265 IN monty.asm
OR_:                034D DEFINED AT LINE 267 IN monty.asm
XOR_:               0350 DEFINED AT LINE 269 IN monty.asm
STRING_:            0353 DEFINED AT LINE 271 IN monty.asm
SUB_:               0356 DEFINED AT LINE 273 IN monty.asm
SUB1:               0362 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
SUB2:               0364 DEFINED AT LINE 284 IN monty.asm
EQ_:                036A DEFINED AT LINE 290 IN monty.asm
EQ0:                0374 DEFINED AT LINE 297 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
EQ1:                0375 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
GT_:                0379 DEFINED AT LINE 303 IN monty.asm
LT_:                0384 DEFINED AT LINE 312 IN monty.asm
LT1:                038D DEFINED AT LINE 319 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DIV_:               0396 DEFINED AT LINE 325 IN monty.asm
NOP_:               03A5 DEFINED AT LINE 336 IN monty.asm
ABS1:               03A7 DEFINED AT LINE 343 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
ADDR:               03B4 DEFINED AT LINE 357 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03C0 DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03C7 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
                    > USED AT LINE 393 IN monty.asm
OR:                 03CB DEFINED AT LINE 375 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
XOR:                03D4 DEFINED AT LINE 384 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR1:               03D5 DEFINED AT LINE 386 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
ARG:                03DD DEFINED AT LINE 398 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03FB DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 425 IN monty.asm
ARG0A:              0404 DEFINED AT LINE 427 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
                    > USED AT LINE 411 IN monty.asm
ARG1:               0409 DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 423 IN monty.asm
ARG1A:              0411 DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 429 IN monty.asm
ARG_LIST:           0414 DEFINED AT LINE 446 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          041E DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 471 IN monty.asm
ARG_LIST2:          042A DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
ARG_LIST3:          0432 DEFINED AT LINE 469 IN monty.asm
                    > USED AT LINE 460 IN monty.asm
                    > USED AT LINE 467 IN monty.asm
ARG_LIST4:          0435 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 456 IN monty.asm
ARG_LIST5:          043A DEFINED AT LINE 477 IN monty.asm
                    > USED AT LINE 475 IN monty.asm
ARRBEGIN:           0446 DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0462 DEFINED AT LINE 541 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            047C DEFINED AT LINE 557 IN monty.asm
                    > USED AT LINE 573 IN monty.asm
ARREND2:            048C DEFINED AT LINE 567 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
ARRINDEX:           04B0 DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04B8 DEFINED AT LINE 600 IN monty.asm
ARRINDEX1:          04B9 DEFINED AT LINE 602 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
ARRINDEX2:          04C5 DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
ASSIGN:             04C8 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
ASSIGN1:            04D6 DEFINED AT LINE 627 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
BLOCK:              04D8 DEFINED AT LINE 630 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04DC DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
                    > USED AT LINE 663 IN monty.asm
                    > USED AT LINE 668 IN monty.asm
                    > USED AT LINE 672 IN monty.asm
BLOCK2:             0508 DEFINED AT LINE 661 IN monty.asm
                    > USED AT LINE 648 IN monty.asm
                    > USED AT LINE 650 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
BLOCK3:             050B DEFINED AT LINE 664 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 657 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCK4:             0513 DEFINED AT LINE 670 IN monty.asm
                    > USED AT LINE 641 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 645 IN monty.asm
BLOCK5:             0516 DEFINED AT LINE 673 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
BLOCKEND:           0519 DEFINED AT LINE 677 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCKEND1:          0545 DEFINED AT LINE 700 IN monty.asm
                    > USED AT LINE 693 IN monty.asm
BLOCKEND2:          0551 DEFINED AT LINE 707 IN monty.asm
                    > USED AT LINE 699 IN monty.asm
BYTES:              056A DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
BYTES1:             056D DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 1259 IN monty.asm
CHAR:               0572 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              0575 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
CHAR2:              0581 DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
CHAR3:              0584 DEFINED AT LINE 748 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
COMMAND:            0587 DEFINED AT LINE 752 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
COMMENT:            05CA DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
                    > USED AT LINE 786 IN monty.asm
DOT:                05D3 DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05DF DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 794 IN monty.asm
DOT2:               05E8 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 799 IN monty.asm
DOT3:               05F2 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
DOT4:               05F6 DEFINED AT LINE 811 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
                    > USED AT LINE 801 IN monty.asm
                    > USED AT LINE 807 IN monty.asm
DIVIDE:             05FD DEFINED AT LINE 819 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
DIVIDE1:            0602 DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 834 IN monty.asm
DIVIDE2:            060F DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 827 IN monty.asm
DIVIDE3:            0610 DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 829 IN monty.asm
EQUALS:             0616 DEFINED AT LINE 840 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
LESSTHANEQ:         061E DEFINED AT LINE 848 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
LESSTHAN:           0623 DEFINED AT LINE 855 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN1:          0628 DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
TRUE1:              062B DEFINED AT LINE 863 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
                    > USED AT LINE 843 IN monty.asm
NULL1:              0631 DEFINED AT LINE 867 IN monty.asm
FALSE1:             0631 DEFINED AT LINE 868 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
                    > USED AT LINE 844 IN monty.asm
                    > USED AT LINE 858 IN monty.asm
                    > USED AT LINE 861 IN monty.asm
FUNC:               0637 DEFINED AT LINE 874 IN monty.asm
                    > USED AT LINE 762 IN monty.asm
FUNC1:              0647 DEFINED AT LINE 888 IN monty.asm
                    > USED AT LINE 911 IN monty.asm
                    > USED AT LINE 914 IN monty.asm
                    > USED AT LINE 919 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
FUNC2:              0671 DEFINED AT LINE 912 IN monty.asm
                    > USED AT LINE 900 IN monty.asm
                    > USED AT LINE 902 IN monty.asm
                    > USED AT LINE 904 IN monty.asm
FUNC3:              0674 DEFINED AT LINE 915 IN monty.asm
                    > USED AT LINE 906 IN monty.asm
                    > USED AT LINE 908 IN monty.asm
                    > USED AT LINE 910 IN monty.asm
FUNC4:              067C DEFINED AT LINE 921 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
                    > USED AT LINE 898 IN monty.asm
FUNC4A:             067F DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 920 IN monty.asm
GO:                 068B DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
GO0:                068C DEFINED AT LINE 937 IN monty.asm
                    > USED AT LINE 1071 IN monty.asm
                    > USED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
GO1:                0692 DEFINED AT LINE 942 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
GO2:                06B9 DEFINED AT LINE 963 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
                    > USED AT LINE 987 IN monty.asm
GO3:                06BE DEFINED AT LINE 967 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
                    > USED AT LINE 1010 IN monty.asm
GO10:               06CC DEFINED AT LINE 976 IN monty.asm
                    > USED AT LINE 945 IN monty.asm
GO11:               06D9 DEFINED AT LINE 988 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
GO12:               06DF DEFINED AT LINE 994 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
GO13:               06E4 DEFINED AT LINE 999 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
HEXNUM:             06F2 DEFINED AT LINE 1012 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
HEXNUM1:            06F5 DEFINED AT LINE 1014 IN monty.asm
                    > USED AT LINE 1031 IN monty.asm
HEXNUM2:            06FD DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 1018 IN monty.asm
IDENTU:             070F DEFINED AT LINE 1032 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             0714 DEFINED AT LINE 1036 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0719 DEFINED AT LINE 1040 IN monty.asm
                    > USED AT LINE 1035 IN monty.asm
IF:                 0726 DEFINED AT LINE 1053 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               0732 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1057 IN monty.asm
IFTE1:              0733 DEFINED AT LINE 1065 IN monty.asm
                    > USED AT LINE 1060 IN monty.asm
INPUT:              073F DEFINED AT LINE 1077 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
KEY:                074A DEFINED AT LINE 1087 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
MUL:                0753 DEFINED AT LINE 1094 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
MUL2:               075D DEFINED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1112 IN monty.asm
NUM:                076F DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
NUM0:               0778 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 1121 IN monty.asm
NUM1:               0779 DEFINED AT LINE 1125 IN monty.asm
                    > USED AT LINE 1142 IN monty.asm
NUM2:               0791 DEFINED AT LINE 1143 IN monty.asm
                    > USED AT LINE 1022 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
NUM3:               079C DEFINED AT LINE 1151 IN monty.asm
                    > USED AT LINE 1146 IN monty.asm
OUTPUT:             079F DEFINED AT LINE 1157 IN monty.asm
                    > USED AT LINE 770 IN monty.asm
REMAIN:             07A8 DEFINED AT LINE 1166 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
REPEAT:             07AE DEFINED AT LINE 1171 IN monty.asm
                    > USED AT LINE 772 IN monty.asm
SHIFTLEFT:          07B0 DEFINED AT LINE 1176 IN monty.asm
                    > USED AT LINE 316 IN monty.asm
SHIFTLEFT1:         07B8 DEFINED AT LINE 1183 IN monty.asm
                    > USED AT LINE 1186 IN monty.asm
SHIFTLEFT2:         07B9 DEFINED AT LINE 1185 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
SHIFTRIGHT:         07C0 DEFINED AT LINE 1193 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
SHIFTRIGHT1:        07C8 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1204 IN monty.asm
SHIFTRIGHT2:        07CC DEFINED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1199 IN monty.asm
STRING:             07D3 DEFINED AT LINE 1212 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
STRING1:            07DC DEFINED AT LINE 1219 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
                    > USED AT LINE 1228 IN monty.asm
STRING2:            07DF DEFINED AT LINE 1223 IN monty.asm
                    > USED AT LINE 1218 IN monty.asm
SELECT:             07FB DEFINED AT LINE 1247 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
WORDS:              0805 DEFINED AT LINE 1257 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
LOOP:               080B DEFINED AT LINE 1273 IN monty.asm
FILTER:             080D DEFINED AT LINE 1342 IN monty.asm
MAP:                080D DEFINED AT LINE 1343 IN monty.asm
PRTDEC:             080F DEFINED AT LINE 1417 IN monty.asm
                    > USED AT LINE 810 IN monty.asm
                    > USED AT LINE 1706 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 138
PRTDEC0:            081E DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 1419 IN monty.asm
PRTDEC1:            0840 DEFINED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
                    > USED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
                    > USED AT LINE 1441 IN monty.asm
PRTDEC2:            0842 DEFINED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1449 IN monty.asm
PRTDEC3:            0852 DEFINED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
PRTDEC4:            0853 DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
PRTHEX:             0857 DEFINED AT LINE 1464 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0862 DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
PRTHEX3:            086B DEFINED AT LINE 1480 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
PRTSTR0:            0876 DEFINED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
PRTSTR:             087A DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 800 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
NESTING:            087F DEFINED AT LINE 1507 IN monty.asm
                    > USED AT LINE 1620 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
NESTING0:           0889 DEFINED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1511 IN monty.asm
NESTING1A:          0890 DEFINED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1515 IN monty.asm
NESTING1:           0893 DEFINED AT LINE 1521 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
NESTING2:           08A2 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1525 IN monty.asm
                    > USED AT LINE 1527 IN monty.asm
NESTING3:           08A4 DEFINED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
NESTING4:           08AF DEFINED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
                    > USED AT LINE 1537 IN monty.asm
PROMPT:             08B1 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1604 IN monty.asm
CRLF:               08BA DEFINED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1673 IN monty.asm
PRINTSTR:           08C1 DEFINED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1704 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 131
EXECSTR:            08C8 DEFINED AT LINE 1565 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               08D3 DEFINED AT LINE 1576 IN monty.asm
INIT:               08D5 DEFINED AT LINE 1581 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1599 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              08EE DEFINED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1594 IN monty.asm
START:              08F3 DEFINED AT LINE 1597 IN monty.asm
INTERPRET:          0909 DEFINED AT LINE 1603 IN monty.asm
                    > USED AT LINE 1698 IN monty.asm
                    > USED AT LINE 1707 IN monty.asm
INTERPRET2:         0913 DEFINED AT LINE 1609 IN monty.asm
                    > USED AT LINE 1653 IN monty.asm
INTERPRET3:         091B DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1625 IN monty.asm
INTERPRET4:         0921 DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
INTERPRET5:         0926 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1662 IN monty.asm
                    > USED AT LINE 1676 IN monty.asm
INTERPRET6:         0937 DEFINED AT LINE 1655 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
INTERPRET7:         0945 DEFINED AT LINE 1664 IN monty.asm
                    > USED AT LINE 1636 IN monty.asm
INTERPRET8:         0958 DEFINED AT LINE 1678 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
NEXT:               0960 DEFINED AT LINE 1684 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1688 IN monty.asm
NEXT1:              096F DEFINED AT LINE 1695 IN monty.asm
                    > USED AT LINE 1689 IN monty.asm
EXIT_:              0976 DEFINED AT LINE 1699 IN monty.asm
                    > USED AT LINE 1697 IN monty.asm
ERROR:              0979 DEFINED AT LINE 1703 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 948 IN monty.asm
                    > USED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1588 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1585 IN monty.asm
VDATAWIDTH:         19E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 561 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
                    > USED AT LINE 731 IN monty.asm
VTIBPTR:            19E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1679 IN monty.asm
VNEXT:              19EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1582 IN monty.asm
VHEAPPTR:           19EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 448 IN monty.asm
                    > USED AT LINE 479 IN monty.asm
                    > USED AT LINE 551 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
                    > USED AT LINE 875 IN monty.asm
                    > USED AT LINE 927 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
                    > USED AT LINE 1213 IN monty.asm
                    > USED AT LINE 1232 IN monty.asm
VPOINTER:           19EE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 358 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
                    > USED AT LINE 361 IN monty.asm
                    > USED AT LINE 433 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
                    > USED AT LINE 1044 IN monty.asm
VHASHSTR:           19F0 DEFINED AT LINE 36 IN ram.asm
VLASTDEF:           19F2 DEFINED AT LINE 37 IN ram.asm
VREMAIN:            19F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 331 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 544 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 40 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 41 IN ram.asm
TIB:                1A00 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1656 IN monty.asm
                    > USED AT LINE 1665 IN monty.asm
                    > USED AT LINE 1680 IN monty.asm
PAD:                1B00 DEFINED AT LINE 47 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2235S43:  40A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  4153 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  41FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  4265 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  42CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  432F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  4393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  43F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  445B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  44C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2246S43:  4529 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2247S43:  458F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2248S43:  45F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2249S43:  465D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  46C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  472F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  4797 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  4805 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  4873 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  48DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  494F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  49BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  4A2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  4AA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  4B11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  4B7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  4BE9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  4C55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  4CC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  4D35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  4DA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  4E11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  4E7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  4EED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  4F59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  4FC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  5031 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  509D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  5109 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  5175 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  51E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  524D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  52BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  5329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  5397 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  5407 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  5477 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  54E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  5551 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  55C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  563F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  56BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  5743 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  57CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  5839 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  58A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  591B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  598F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  5A01 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  5A77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  5AEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  5B6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  5BEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2299S43:  5C6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2300S43:  5CF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2301S43:  5D7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2302S43:  5E0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2303S43:  5EA3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2304S43:  5F29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2305S43:  5FB5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2306S43:  6043 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2307S43:  60D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2308S43:  6161 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2309S43:  61FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2310S43:  6287 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2311S43:  631D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2312S43:  63B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2313S43:  644F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2314S43:  64F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2315S43:  65A3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2316S43:  661F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2317S43:  669B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2318S43:  6723 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2319S43:  67AF DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            67BA DEFINED AT LINE 136
