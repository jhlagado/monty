0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 37               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 37               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 37               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 37               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 37               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 37               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 37               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 37               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 37               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 37               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 36               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 37               LD   (RST08),HL   
0094   22 D2 37               LD   (RST10),HL   
0097   22 D4 37               LD   (RST18),HL   
009A   22 D6 37               LD   (RST20),HL   
009D   22 D8 37               LD   (RST28),HL   
00A0   22 DA 37               LD   (RST30),HL   
00A3   22 DE 37               LD   (INTVEC),HL   
00A6   22 E0 37               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 37               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 37               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 36               LD   SP,STACK   
00C6   CD 47 09               CALL   init   
00C9   C3 00 0A               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   D2 09                  DW   next   ; g nNext
0186   00 3A                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   91                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   91                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   91                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   91                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   91                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 93 03               JP   add   
0303                ADDR_:       
0303   C3 B1 03               JP   addr   
0306                AND_:        
0306   C3 BD 03               JP   and   
0309                ARG_:        
0309   C3 DA 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 11 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 43 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 5F 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 AD 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 D6 04               JP   block   
031B                BLOCKEND_:      
031B   C3 3F 05               JP   blockend   
031E                CHAR_:       
031E   C3 94 05               JP   char   
0321                COMMAND_:      
0321   C3 91 07               JP   command   
0324                DOT_:        
0324   C3 A9 05               JP   dot   
0327                REMAIN_:      
0327   C3 15 07               JP   remain   
032A                GO_:         
032A   C3 0D 06               JP   go   
032D                IDENTU_:      
032D   C3 99 06               JP   identU   
0330                IDENTL_:      
0330   C3 9E 06               JP   identL   
0333                IF_:         
0333   C3 B0 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 D2 03               JP   xor1   
033C                MUL_:        
033C   C3 C9 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 E5 06               JP   num   
0347                HEXNUM_:      
0347   C3 7C 06               JP   hexnum   
034A                OR_:         
034A   C3 C8 03               JP   or   
034D                XOR_:        
034D   C3 D1 03               JP   xor   
0350                STRING_:      
0350   C3 3E 07               JP   string   
0353                SUB_:        
0353   C3 66 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 C5 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EC 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 2B 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 1B 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F4 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 F9 05               JP   lessthan   
0382                DIV_:        
0382   D1                     POP   de   ; get first value
0383   E1                     POP   hl   ; get 2nd value
0384   C5                     PUSH   bc   ; preserve the IP
0385   44 4D                  LD   bc,hl   
0387   CD D3 05               CALL   divide   
038A   22 F6 37               LD   (vRemain),hl   
038D   C1                     POP   bc   
038E   D5                     PUSH   de   ; push result
038F   DD E9                  JP   (ix)   
0391                NOP_:        
0391   DD E9                  JP   (ix)   
0393                             ;*******************************************************************
0393                             ; word operators
0393                             ;*******************************************************************
0393                ADD:         
0393   03                     INC   bc   
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 2B                  CP   "+"   ; ++ increment variable
0398   20 06                  JR   nz,add1   
039A   03                     INC   bc   
039B   E1                     POP   hl   ; second term
039C   23                     INC   hl   
039D   C3 C7 04               JP   assign0   
03A0                ADD1:        
03A0   FE 3D                  CP   "="   ; += add to variable
03A2   20 07                  JR   nz,add2   
03A4   03                     INC   bc   
03A5   E1                     POP   hl   ; second term
03A6   D1                     POP   de   ; first term
03A7   19                     ADD   hl,de   
03A8   C3 C7 04               JP   assign0   
03AB                ADD2:        
03AB   D1                     POP   de   ; second term
03AC   E1                     POP   hl   ; first term
03AD   19                     ADD   hl,de   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                             ; -- ptr
03B1                ADDR:        
03B1   2A F0 37               LD   hl,(vPointer)   
03B4   E5                     PUSH   hl   
03B5   21 F0 37               LD   hl,vPointer   
03B8   22 F0 37               LD   (vPointer),hl   
03BB   DD E9                  JP   (ix)   
03BD                AND:         
03BD   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03BE   E1                     POP   hl   
03BF   7B                     LD   a,e   
03C0   A5                     AND   l   
03C1   6F                     LD   l,a   
03C2   7A                     LD   a,d   
03C3   A4                     AND   h   
03C4                AND1:        
03C4   67                     LD   h,a   
03C5   E5                     PUSH   hl   
03C6   DD E9                  JP   (ix)   
03C8                OR:          
03C8   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C9   E1                     POP   hl   
03CA   7B                     LD   a,e   
03CB   B5                     OR   l   
03CC   6F                     LD   l,a   
03CD   7A                     LD   a,d   
03CE   B4                     OR   h   
03CF   18 F3                  JR   and1   
03D1                XOR:         
03D1   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D2                XOR1:        
03D2   E1                     POP   hl   
03D3   7B                     LD   a,e   
03D4   AD                     XOR   l   
03D5   6F                     LD   l,a   
03D6   7A                     LD   a,d   
03D7   AC                     XOR   h   
03D8   18 EA                  JR   and1   
03DA                             ; $a .. $z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1C                  JR   z,arg0a   
03E5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E6   2B                     DEC   hl   
03E7   7E                     LD   a,(hl)   
03E8   23                     INC   hl   
03E9   23                     INC   hl   
03EA   B7                     OR   a   
03EB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03ED   5F                     LD   e,a   ; e = a = num_args
03EE   03                     INC   bc   ; a = next char = arg_name
03EF   0A                     LD   a,(bc)   
03F0   C5                     PUSH   bc   ; save IP
03F1   43                     LD   b,e   ; b = e = num_args
03F2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F5   FD 56 03               LD   d,(iy+3)   
03F8                ARG0:        
03F8   1B                     DEC   de   ; a = arg_name, de = next arg*
03F9   1B                     DEC   de   
03FA   BE                     CP   (hl)   
03FB   28 09                  JR   z,arg1   
03FD   23                     INC   hl   ; hl = next arg_list*
03FE   10 F8                  DJNZ   arg0   
0400   C1                     POP   bc   ; no match, restore IP
0401                ARG0A:       
0401   11 00 00               LD   de,0   ; return 0
0404   18 08                  JR   arg1a   
0406                ARG1:        
0406   C1                     POP   bc   ; restore IP
0407   EB                     EX   de,hl   ; hl = arg*
0408   22 F0 37               LD   (vPointer),hl   ; store arg* in setter
040B   5E                     LD   e,(hl)   
040C   23                     INC   hl   
040D   56                     LD   d,(hl)   ; de = arg
040E                ARG1A:       
040E   D5                     PUSH   de   ; push arg
040F   DD E9                  JP   (ix)   
0411                             ; arg_list - parses input (ab:c)
0411                             ; names after the : represent uninitialised locals
0411                             ; return values are the state of the stack after the block ends
0411                ARG_LIST:      
0411   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0414   2A EC 37               LD   hl,(vHeapPtr)   ; hl = heap*
0417   23                     INC   hl   ; skip length field to start
0418   23                     INC   hl   
0419   E5                     PUSH   hl   ; save start of arg_list
041A   03                     INC   bc   ; point to next char
041B                ARG_LIST1:      
041B   0A                     LD   a,(bc)   
041C   FE 29                  CP   ")"   ; ) is the arg_list terminator
041E   28 12                  JR   z,arg_list4   
0420   FE 3A                  CP   ":"   
0422   20 03                  JR   nz,arg_list2   
0424   14                     INC   d   ; non zero value local count acts as flag
0425   20 08                  JR   nz,arg_list3   
0427                ARG_LIST2:      
0427   77                     LD   (hl),a   
0428   23                     INC   hl   
0429   1C                     INC   e   ; increase arg count
042A   AF                     XOR   a   
042B   B2                     OR   d   
042C   28 01                  JR   z,arg_list3   
042E   14                     INC   d   ; if d > 0 increase local count
042F                ARG_LIST3:      
042F   03                     INC   bc   ; point to next char
0430   18 E9                  JR   arg_list1   
0432                ARG_LIST4:      
0432   AF                     XOR   a   
0433   B2                     OR   d   
0434   28 01                  JR   z,arg_list5   
0436   15                     DEC   d   ; remove initial inc
0437                ARG_LIST5:      
0437   23                     INC   hl   
0438   22 EC 37               LD   (vHeapPtr),hl   ; bump heap* to after end of string
043B   E1                     POP   hl   ; hl = start of arg_list
043C   E5                     PUSH   hl   ; return start of string
043D   2B                     DEC   hl   ; write length bytes to length field at start - 2
043E   72                     LD   (hl),d   
043F   2B                     DEC   hl   
0440   73                     LD   (hl),e   
0441   DD E9                  JP   (ix)   
0443                ARRBEGIN:      
0443   11 00 00               LD   de,0   ; create stack frame
0446   D5                     PUSH   de   ; push null for IP
0447   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
044A   FD 56 05               LD   d,(iy+5)   ; 
044D   D5                     PUSH   de   ; 
044E   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0451   FD 56 03               LD   d,(iy+3)   ; 
0454   D5                     PUSH   de   ; 
0455   FD E5                  PUSH   iy   ; push BP
0457   FD 21 00 00            LD   iy,0   ; BP = SP
045B   FD 39                  ADD   iy,sp   
045D   DD E9                  JP   (ix)   
045F                ARREND:      
045F   FD 54                  LD   d,iyh   ; de = BP
0461   FD 5D                  LD   e,iyl   
0463   ED 43 F8 37            LD   (vTemp1),bc   ; save IP
0467   62 6B                  LD   hl,de   ; hl = de = BP
0469   B7                     OR   a   
046A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
046C   CB 3C                  SRL   h   ; 
046E   CB 1D                  RR   l   
0470   44 4D                  LD   bc,hl   ; bc = count
0472   2A EC 37               LD   hl,(vHeapPtr)   ; hl = array[-2]
0475   71                     LD   (hl),c   ; write num items in length word
0476   23                     INC   hl   
0477   70                     LD   (hl),b   
0478   23                     INC   hl   ; hl = array[0], bc = count
0479                             ; de = BP, hl = array[0], bc = count
0479                ARREND1:      
0479   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
047C   77                     LD   (hl),a   ; write lsb of array item
047D   23                     INC   hl   ; move to msb of array item
047E   3A E6 37               LD   a,(vDataWidth)   ; vDataWidth=1?
0481   3D                     DEC   a   
0482   28 05                  JR   z,arrEnd2   
0484   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0487   77                     LD   (hl),a   ; write msb of array item
0488   23                     INC   hl   ; move to next word in array
0489                ARREND2:      
0489   FD 2B                  DEC   iy   ; move to next word on stack
048B   FD 2B                  DEC   iy   
048D   0B                     DEC   bc   ; dec items count
048E   79                     LD   a,c   ; if not zero loop
048F   B0                     OR   b   
0490   20 E7                  JR   nz,arrEnd1   
0492   EB                     EX   de,hl   ; de = end of array, hl = BP
0493   F9                     LD   sp,hl   ; sp = BP
0494   E1                     POP   hl   ; de = end of array, hl = old BP
0495   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0496   FD 62                  LD   iyh,d   
0498   FD 6B                  LD   iyl,e   
049A   D1                     POP   de   ; pop arg_list (discard)
049B   D1                     POP   de   ; pop first_arg* (discard)
049C   D1                     POP   de   ; pop IP (discard)
049D   ED 5B EC 37            LD   de,(vHeapPtr)   ; de = array[-2]
04A1   22 EC 37               LD   (vHeapPtr),hl   ; move heap* to end of array
04A4   ED 4B F8 37            LD   bc,(vTemp1)   ; restore IP
04A8   13                     INC   de   ; de = array[0]
04A9   13                     INC   de   
04AA   D5                     PUSH   de   ; return array[0]
04AB   DD E9                  JP   (ix)   
04AD                             ; index of an array, based on vDataWidth
04AD                             ; array num -- value    ; also sets vPointer to address
04AD                ARRINDEX:      
04AD   E1                     POP   hl   ; hl = index
04AE   D1                     POP   de   ; de = array
04AF   3A E6 37               LD   a,(vDataWidth)   ; a = data width
04B2   3D                     DEC   a   
04B3   28 01                  JR   z,arrIndex1   
04B5                ARRINDEX0:      
04B5   29                     ADD   hl,hl   ; if data width = 2 then double
04B6                ARRINDEX1:      
04B6   19                     ADD   hl,de   ; add addr
04B7   22 F0 37               LD   (vPointer),hl   ; store address in setter
04BA   16 00                  LD   d,0   
04BC   5E                     LD   e,(hl)   
04BD   B7                     OR   a   ; check data width again
04BE   28 02                  JR   z,arrIndex2   
04C0   23                     INC   hl   
04C1   56                     LD   d,(hl)   
04C2                ARRINDEX2:      
04C2   D5                     PUSH   de   
04C3   DD E9                  JP   (ix)   
04C5                             ; value _oldValue --            ; uses address in vPointer
04C5                ASSIGN:      
04C5   E1                     POP   hl   ; discard last accessed value
04C6   E1                     POP   hl   ; hl = new value
04C7                ASSIGN0:      
04C7   EB                     EX   de,hl   ; de = new value
04C8                ASSIGNX:      
04C8   2A F0 37               LD   hl,(vPointer)   
04CB   73                     LD   (hl),e   
04CC   3A E6 37               LD   a,(vDataWidth)   
04CF   3D                     DEC   a   ; is it byte?
04D0   28 02                  JR   z,assign1   
04D2   23                     INC   hl   
04D3   72                     LD   (hl),d   
04D4                ASSIGN1:      
04D4   DD E9                  JP   (ix)   
04D6                BLOCK:       
04D6   C5                     PUSH   bc   ; return pointer to first { of block
04D7   03                     INC   bc   
04D8   16 01                  LD   d,1   ; nesting: count first parenthesis
04DA                BLOCK1:      ; Skip to end of definition
04DA   0A                     LD   a,(bc)   ; Get the next character
04DB   03                     INC   bc   ; Point to next character
04DC   FE 21                  CP   " " + 1   ; ignore whitespace
04DE   38 FA                  JR   c,block1   
04E0   FE 29                  CP   ")"   
04E2   28 2D                  JR   z,block4   
04E4   FE 7D                  CP   "}"   
04E6   28 29                  JR   z,block4   
04E8   FE 5D                  CP   "]"   
04EA   28 25                  JR   z,block4   
04EC   FE 28                  CP   "("   
04EE   28 16                  JR   z,block2   
04F0   FE 7B                  CP   "{"   
04F2   28 12                  JR   z,block2   
04F4   FE 5B                  CP   "["   
04F6   28 0E                  JR   z,block2   
04F8   FE 27                  CP   "'"   
04FA   28 0D                  JR   z,block3   
04FC   FE 60                  CP   "`"   
04FE   28 09                  JR   z,block3   
0500   FE 22                  CP   $22   
0502   28 05                  JR   z,block3   
0504   18 D4                  JR   block1   
0506                BLOCK2:      
0506   14                     INC   d   
0507   18 D1                  JR   block1   
0509                BLOCK3:      
0509   3E 80                  LD   a,$80   
050B   AA                     XOR   d   
050C   47                     LD   b,a   
050D   20 CB                  JR   nz,block1   
050F   18 03                  JR   block5   
0511                BLOCK4:      
0511   15                     DEC   d   
0512   20 C6                  JR   nz,block1   ; get the next element
0514                BLOCK5:      
0514   60 69                  LD   hl,bc   ; hl = IP
0516   11 00 3A               LD   de,HEAP   ; is IP pointing to object in heap
0519   B7                     OR   a   ; IP - HEAP
051A   ED 52                  SBC   hl,de   
051C   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051E   28 1C                  JR   z,block6   
0520   60 69                  LD   hl,bc   ; hl = IP
0522   D1                     POP   de   ; de = block*
0523   ED 43 F8 37            LD   (vTemp1),bc   ; save IP
0527   B7                     OR   a   ; bc = size
0528   ED 52                  SBC   hl,de   
052A   44 4D                  LD   bc,hl   
052C   EB                     EX   de,hl   ; hl = block* de = heap*
052D   ED 5B EC 37            LD   de,(vHeapPtr)   
0531   D5                     PUSH   de   ; return hblock*
0532   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0534   ED 53 EC 37            LD   (vHeapPtr),de   ; heap* += size
0538   ED 4B F8 37            LD   bc,(vTemp1)   ; restore IP
053C                BLOCK6:      
053C   0B                     DEC   bc   ; balanced, exit
053D   DD E9                  JP   (ix)   
053F                BLOCKEND:      
053F   D9                     EXX      ; de" = oldBP bc" = oldIP
0540   FD 5E 00               LD   e,(iy+0)   
0543   FD 56 01               LD   d,(iy+1)   
0546   FD 4E 06               LD   c,(iy+6)   
0549   FD 46 07               LD   b,(iy+7)   
054C   D9                     EXX      
054D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0550   FD 56 03               LD   d,(iy+3)   
0553   EB                     EX   de,hl   
0554   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0557   FD 56 01               LD   d,(iy+1)   
055A   13                     INC   de   ; for carry flag <=
055B   B7                     OR   a   
055C   ED 52                  SBC   hl,de   
055E   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0560   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0562   FD 5D                  LD   e,iyl   
0564   21 08 00               LD   hl,8   
0567   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0568   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0569   18 0C                  JR   blockend2   
056B                BLOCKEND1:      ; same scope
056B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056E   FD 56 03               LD   d,(iy+3)   
0571   EB                     EX   de,hl   
0572   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0574   FD 5D                  LD   e,iyl   
0576   EB                     EX   de,hl   
0577                BLOCKEND2:      
0577   44 4D                  LD   bc,hl   ; bc = hl = BP
0579   B7                     OR   a   ; hl = BP - SP = count
057A   ED 72                  SBC   hl,sp   
057C   7D                     LD   a,l   
057D   B4                     OR   h   
057E   28 09                  JR   z,blockend3   
0580   C5                     PUSH   bc   ; bc = count, hl = BP
0581   44 4D                  LD   bc,hl   
0583   E1                     POP   hl   
0584   2B                     DEC   hl   ; hl = BP-1
0585   1B                     DEC   de   ; de = args*-1
0586   ED B8                  LDDR      
0588   13                     INC   de   
0589                BLOCKEND3:      
0589   EB                     EX   de,hl   ; hl = new tos
058A   F9                     LD   sp,hl   ; sp = new tos
058B   D9                     EXX      ; bc = IP, iy = oldBP
058C   D5                     PUSH   de   
058D   C5                     PUSH   bc   
058E   D9                     EXX      
058F   C1                     POP   bc   
0590   FD E1                  POP   iy   
0592   DD E9                  JP   (ix)   
0594                CHAR:        
0594   21 00 00               LD   hl,0   ; if "" is empty or null
0597                CHAR1:       
0597   03                     INC   bc   ; point to next char
0598   0A                     LD   a,(bc)   
0599   FE 27                  CP   "'"   ; ' is the terminator
059B   28 09                  JR   z,char3   
059D   FE 5C                  CP   $5c   ; \ is the escape
059F   20 02                  JR   nz,char2   
05A1   03                     INC   bc   
05A2   0A                     LD   a,(bc)   
05A3                CHAR2:       
05A3   6F                     LD   l,a   
05A4   18 F1                  JR   char1   
05A6                CHAR3:       
05A6   E5                     PUSH   hl   
05A7   DD E9                  JP   (ix)   
05A9                             ; ; ;
05A9                             ; ; block* -- hblock*
05A9                             ; ; copies bytes from TOS to IP to the heap
05A9                             ; compile:
05A9                             ;   ld (vTemp1),bc              ; save IP
05A9                             ; pop de                      ; de = block*
05A9                             ; ld hl,bc                    ; hl = IP
05A9                             ; or a                        ; bc = size
05A9                             ; sbc hl,de
05A9                             ; ld bc,hl
05A9                             ; ex de,hl                    ; hl = block*
05A9                             ; ld de,(vHeapPtr)            ; de = heap*
05A9                             ; push de                     ; return hblock*
05A9                             ; ldir                        ; copy size bytes from block* to hblock*
05A9                             ; ld (vHeapPtr),de
05A9                             ; ld bc,(vTemp1)              ; restore IP
05A9                             ; jp (ix)
05A9                DOT:         
05A9   E1                     POP   hl   
05AA   03                     INC   bc   
05AB   0A                     LD   a,(bc)   
05AC   FE 68                  CP   "h"   
05AE   20 05                  JR   nz,dot1   
05B0   CD BB 08               CALL   prthex   
05B3   18 17                  JR   dot4   
05B5                DOT1:        
05B5   FE 73                  CP   "s"   
05B7   20 05                  JR   nz,dot2   
05B9   CD DE 08               CALL   prtstr   
05BC   18 0E                  JR   dot4   
05BE                DOT2:        
05BE   FE 63                  CP   "c"   
05C0   20 06                  JR   nz,dot3   
05C2   7D                     LD   a,l   
05C3   CD 85 00               CALL   putchar   
05C6   18 04                  JR   dot4   
05C8                DOT3:        
05C8   0B                     DEC   bc   
05C9   CD 73 08               CALL   prtdec   
05CC                DOT4:        
05CC   3E 20                  LD   a," "   
05CE   CD 85 00               CALL   putchar   
05D1   DD E9                  JP   (ix)   
05D3                             ; division subroutine.
05D3                             ; bc: divisor, de: dividend, hl: remainder
05D3                DIVIDE:      
05D3   21 00 00               LD   hl,0   ; zero the remainder
05D6   3E 10                  LD   a,16   ; loop counter
05D8                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05D8   CB 21                  SLA   c   
05DA   CB 10                  RL   b   
05DC   ED 6A                  ADC   hl,hl   
05DE   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E0   38 03                  JR   c,divide2   
05E2   0C                     INC   c   
05E3   18 01                  JR   divide3   
05E5                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E5   19                     ADD   hl,de   
05E6                DIVIDE3:      
05E6   3D                     DEC   a   
05E7   20 EF                  JR   nz,divide1   
05E9   50 59                  LD   de,bc   ; result from bc to de
05EB   C9                     RET      
05EC                             ; hl = value1, de = value2
05EC                             ; hl = result
05EC                EQUALS:      
05EC   B7                     OR   a   ; reset the carry flag
05ED   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05EF   28 10                  JR   z,true1   
05F1   C3 07 06               JP   false1   
05F4                             ; hl = value1 de = value2
05F4                             ; hl = result
05F4                LESSTHANEQ:      
05F4   B7                     OR   a   
05F5   ED 52                  SBC   hl,de   
05F7   18 05                  JR   lessthan1   
05F9                             ; hl = value1 de = value2
05F9                             ; hl = result
05F9                LESSTHAN:      
05F9   B7                     OR   a   
05FA   ED 52                  SBC   hl,de   
05FC   28 09                  JR   z,false1   
05FE                LESSTHAN1:      
05FE   FA 07 06               JP   m,false1   
0601                TRUE1:       
0601   21 FF FF               LD   hl,TRUE   
0604   E5                     PUSH   hl   
0605   DD E9                  JP   (ix)   
0607                NULL1:       
0607                FALSE1:      
0607   21 00 00               LD   hl,FALSE   
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                             ; execute a block of code which ends with }
060D                             ; creates a root scope if BP == stack
060D                             ; else uses outer scope
060D                GO:          
060D   D1                     POP   de   ; de = block*
060E                GO1:         
060E   7B                     LD   a,e   ; if block* == null, exit
060F   B2                     OR   d   
0610   20 02                  JR   nz,go2   
0612   DD E9                  JP   (ix)   
0614                GO2:         
0614   1A                     LD   a,(de)   
0615   FE 7B                  CP   "{"   
0617   CA 48 06               JP   z,goBlock   
061A                GOFUNC:      ; execute code at pointer
061A   EB                     EX   de,hl   ; hl = func*
061B   13                     INC   de   ; skip closure
061C   13                     INC   de   
061D   5E                     LD   e,(hl)   ; de = hblock*
061E   23                     INC   hl   
061F   56                     LD   d,(hl)   
0620   23                     INC   hl   
0621   D5                     PUSH   de   ; save hblock*
0622   5E                     LD   e,(hl)   ; de = arg_list*
0623   23                     INC   hl   
0624   56                     LD   d,(hl)   
0625   23                     INC   hl   
0626   EB                     EX   de,hl   ; hl = arg_list*
0627   D1                     POP   de   ; restore hblock*
0628   7D                     LD   a,l   ; if arg_list* != null skip
0629   B4                     OR   h   
062A   20 03                  JR   nz,goFunc1   
062C   C5                     PUSH   bc   ; push IP
062D   18 3A                  JR   goBlock2   
062F                GOFUNC1:      
062F   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0630   7E                     LD   a,(hl)   
0631   23                     INC   hl   
0632   B7                     OR   a   
0633   28 05                  JR   z,goFunc3   
0635                GOFUNC2:      
0635   3B                     DEC   sp   
0636   3B                     DEC   sp   
0637   3D                     DEC   a   
0638   20 FB                  JR   nz,goFunc2   
063A                GOFUNC3:      
063A   C5                     PUSH   bc   ; push IP
063B   E5                     PUSH   hl   ; push arg_list*
063C   2B                     DEC   hl   ; hl = num_args*
063D   2B                     DEC   hl   
063E   7E                     LD   a,(hl)   ; hl = num_args * 2
063F   87                     ADD   a,a   
0640   C6 04                  ADD   a,4   ; offset for IP and arg_list
0642   6F                     LD   l,a   
0643   26 00                  LD   h,$0   
0645   39                     ADD   hl,sp   ; hl = first_arg*
0646   18 27                  JR   goBlock4   
0648                GOBLOCK:      
0648   13                     INC   de   
0649   C5                     PUSH   bc   ; push IP
064A   21 80 36               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
064D   FD 44                  LD   b,iyh   
064F   FD 4D                  LD   c,iyl   
0651   B7                     OR   a   ; hl = stack - BP = root_scope
0652   ED 42                  SBC   hl,bc   
0654   7D                     LD   a,l   ; if root_scope, skip
0655   B4                     OR   h   
0656   28 11                  JR   z,goBlock2   
0658   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
065B   FD 46 05               LD   b,(iy+5)   
065E   C5                     PUSH   bc   
065F   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0662   FD 46 03               LD   b,(iy+3)   
0665   60 69                  LD   hl,bc   
0667   18 05                  JR   goBlock3   
0669                GOBLOCK2:      
0669   E5                     PUSH   hl   ; push arg_list (null)
066A   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
066D   39                     ADD   hl,sp   
066E                GOBLOCK3:      
066E   1B                     DEC   de   
066F                GOBLOCK4:      
066F   E5                     PUSH   hl   ; push first_arg
0670   FD E5                  PUSH   iy   ; push BP
0672   FD 21 00 00            LD   iy,0   ; BP = SP
0676   FD 39                  ADD   iy,sp   
0678   42 4B                  LD   bc,de   ; bc = de = block*-1
067A   DD E9                  JP   (ix)   
067C                HEXNUM:      
067C   21 00 00               LD   hl,0   ; Clear hl to accept the number
067F                HEXNUM1:      
067F   03                     INC   bc   
0680   0A                     LD   a,(bc)   ; Get the character which is a numeral
0681   CB 77                  BIT   6,a   ; is it uppercase alpha?
0683   28 02                  JR   z,hexnum2   ; no a decimal
0685   D6 07                  SUB   7   ; sub 7  to make $a - $F
0687                HEXNUM2:      
0687   D6 30                  SUB   $30   ; form decimal digit
0689   DA 07 07               JP   c,num2   
068C   FE 10                  CP   $0F+1   
068E   D2 07 07               JP   nc,num2   
0691   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0692   29                     ADD   hl,hl   ; 4X
0693   29                     ADD   hl,hl   ; 8X
0694   29                     ADD   hl,hl   ; 16X
0695   85                     ADD   a,l   ; add into bottom of hl
0696   6F                     LD   l,a   
0697   18 E6                  JR   hexnum1   
0699                IDENTU:      
0699   0A                     LD   a,(bc)   ; a = identifier char
069A   D6 41                  SUB   "A"   ; "A" = 0
069C   18 05                  JR   ident1   
069E                IDENTL:      
069E   0A                     LD   a,(bc)   
069F   D6 61                  SUB   "a"   
06A1   C6 1A                  ADD   a,26   
06A3                IDENT1:      
06A3   87                     ADD   a,a   ; l = a * 2
06A4   6F                     LD   l,a   
06A5   26 37                  LD   h,msb(vars)   
06A7   22 F0 37               LD   (vPointer),hl   ; store address in setter
06AA   5E                     LD   e,(hl)   
06AB   23                     INC   hl   
06AC   56                     LD   d,(hl)   
06AD   D5                     PUSH   de   
06AE   DD E9                  JP   (ix)   
06B0                             ; if
06B0                             ; condition then -- value
06B0                IF:          
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   
06B2   FE 3F                  CP   "?"   
06B4   28 06                  JR   z,ifte   
06B6   0B                     DEC   bc   
06B7   11 00 00               LD   de,0   ; NUL pointer for else
06BA   18 01                  JR   ifte1   
06BC                             ; ifte
06BC                             ; condition then else -- value
06BC                IFTE:        
06BC   D1                     POP   de   ; de = else
06BD                IFTE1:       
06BD   E1                     POP   hl   ; hl = then
06BE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06BF   7C                     LD   a,h   
06C0   B5                     OR   l   
06C1   E1                     POP   hl   ; hl = then
06C2   CA 0E 06               JP   z,go1   ; if z de = else
06C5   EB                     EX   de,hl   ; condition = false, de = then
06C6   C3 0E 06               JP   go1   
06C9                MUL:         
06C9   D1                     POP   de   ; get first value
06CA   E1                     POP   hl   
06CB   C5                     PUSH   bc   ; Preserve the IP
06CC   44                     LD   b,h   ; bc = 2nd value
06CD   4D                     LD   c,l   
06CE   21 00 00               LD   hl,0   
06D1   3E 10                  LD   a,16   
06D3                MUL2:        
06D3   29                     ADD   hl,hl   
06D4   CB 13                  RL   e   
06D6   CB 12                  RL   d   
06D8   30 04                  JR   nc,$+6   
06DA   09                     ADD   hl,bc   
06DB   30 01                  JR   nc,$+3   
06DD   13                     INC   de   
06DE   3D                     DEC   a   
06DF   20 F2                  JR   nz,mul2   
06E1   C1                     POP   bc   ; Restore the IP
06E2   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06E3   DD E9                  JP   (ix)   
06E5                NUM:         
06E5   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06E8   0A                     LD   a,(bc)   ; Get numeral or -
06E9   FE 2D                  CP   "-"   
06EB   20 01                  JR   nz,num0   
06ED   03                     INC   bc   ; move to next char, no flags affected
06EE                NUM0:        
06EE   08                     EX   af,af'   ; save zero flag = 0 for later
06EF                NUM1:        
06EF   0A                     LD   a,(bc)   ; read digit
06F0   D6 30                  SUB   "0"   ; less than 0?
06F2   38 13                  JR   c,num2   ; not a digit, exit loop
06F4   FE 0A                  CP   10   ; greater that 9?
06F6   30 0F                  JR   nc,num2   ; not a digit, exit loop
06F8   03                     INC   bc   ; inc IP
06F9   54 5D                  LD   de,hl   ; multiply hl * 10
06FB   29                     ADD   hl,hl   
06FC   29                     ADD   hl,hl   
06FD   19                     ADD   hl,de   
06FE   29                     ADD   hl,hl   
06FF   85                     ADD   a,l   ; add digit in a to hl
0700   6F                     LD   l,a   
0701   3E 00                  LD   a,0   
0703   8C                     ADC   a,h   
0704   67                     LD   h,a   
0705   18 E8                  JR   num1   
0707                NUM2:        
0707   0B                     DEC   bc   
0708   08                     EX   af,af'   ; restore zero flag
0709   20 07                  JR   nz,num3   
070B   EB                     EX   de,hl   ; negate the value of hl
070C   21 00 00               LD   hl,0   
070F   B7                     OR   a   ; jump to sub2
0710   ED 52                  SBC   hl,de   
0712                NUM3:        
0712   E5                     PUSH   hl   ; Put the number on the stack
0713   DD E9                  JP   (ix)   ; and process the next character
0715                REMAIN:      
0715   2A F6 37               LD   hl,(vRemain)   
0718   E5                     PUSH   hl   
0719   DD E9                  JP   (ix)   
071B                             ; shiftLeft
071B                             ; value count -- value2          shift left count places
071B                SHIFTLEFT:      
071B   50 59                  LD   de,bc   ; save IP
071D   C1                     POP   bc   ; bc = count
071E   41                     LD   b,c   ; b = loop counter
071F   E1                     POP   hl   
0720   04                     INC   b   ; test for counter=0 case
0721   18 01                  JR   shiftLeft2   
0723                SHIFTLEFT1:      
0723   29                     ADD   hl,hl   ; left shift hl
0724                SHIFTLEFT2:      
0724   10 FD                  DJNZ   shiftLeft1   
0726   E5                     PUSH   hl   
0727   42 4B                  LD   bc,de   ; restore IP
0729   DD E9                  JP   (ix)   
072B                             ; shiftRight
072B                             ; value count -- value2          shift left count places
072B                SHIFTRIGHT:      
072B   50 59                  LD   de,bc   ; save IP
072D   C1                     POP   bc   ; bc = count
072E   41                     LD   b,c   ; b = loop counter
072F   E1                     POP   hl   
0730   04                     INC   b   ; test for counter=0 case
0731   18 04                  JR   shiftRight2   
0733                SHIFTRIGHT1:      
0733   CB 3C                  SRL   h   ; right shift hl
0735   CB 1D                  RR   l   
0737                SHIFTRIGHT2:      
0737   10 FA                  DJNZ   shiftRight1   
0739   E5                     PUSH   hl   
073A   42 4B                  LD   bc,de   ; restore IP
073C   DD E9                  JP   (ix)   
073E                             ; string
073E                             ; -- ptr                        ; points to start of string chars,
073E                             ; length is stored at start - 2 bytes
073E                STRING:      
073E   2A EC 37               LD   hl,(vHeapPtr)   ; hl = heap*
0741   23                     INC   hl   ; skip length field to start
0742   23                     INC   hl   
0743   E5                     PUSH   hl   ; save start of string
0744   03                     INC   bc   ; point to next char
0745   18 03                  JR   string2   
0747                STRING1:      
0747   77                     LD   (hl),a   
0748   23                     INC   hl   ; increase count
0749   03                     INC   bc   ; point to next char
074A                STRING2:      
074A   0A                     LD   a,(bc)   
074B   FE 22                  CP   DQUOTE   ; " is the string terminator
074D   20 F8                  JR   nz,string1   
074F   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0751   20 F4                  JR   nz,string1   
0753   AF                     XOR   a   ; write NUL to terminate string
0754   77                     LD   (hl),a   ; hl = end of string
0755   23                     INC   hl   
0756   22 EC 37               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0759   2B                     DEC   hl   ; hl = end of string without terminator
075A   D1                     POP   de   ; de = start of string
075B   D5                     PUSH   de   ; return start of string
075C   B7                     OR   a   ; hl = length bytes, de = start of string
075D   ED 52                  SBC   hl,de   
075F   EB                     EX   de,hl   
0760   2B                     DEC   hl   ; write length bytes to length field at start - 2
0761   72                     LD   (hl),d   
0762   2B                     DEC   hl   
0763   73                     LD   (hl),e   
0764   DD E9                  JP   (ix)   
0766                SUB:         ; negative sign or subtract
0766   03                     INC   bc   ; check if sign of a number
0767   0A                     LD   a,(bc)   
0768   0B                     DEC   bc   
0769   FE 30                  CP   "0"   
076B   38 05                  JR   c,sub1   
076D   FE 3A                  CP   "9"+1   
076F   DA 44 03               JP   c,num_   
0772                SUB1:        ; Subtract the value 2nd on stack from top of stack
0772   FE 2D                  CP   "-"   
0774   20 06                  JR   nz,sub2   
0776   03                     INC   bc   
0777   E1                     POP   hl   
0778   2B                     DEC   hl   
0779   C3 C7 04               JP   assign0   
077C                SUB2:        
077C   FE 3D                  CP   "="   ; += add to variable
077E   20 09                  JR   nz,sub3   
0780   03                     INC   bc   
0781   E1                     POP   hl   ; second term
0782   D1                     POP   de   ; first term
0783   B7                     OR   a   
0784   ED 52                  SBC   hl,de   
0786   C3 C7 04               JP   assign0   
0789                SUB3:        
0789   D1                     POP   de   ; second term
078A   E1                     POP   hl   ; first term
078B   B7                     OR   a   
078C   ED 52                  SBC   hl,de   
078E   E5                     PUSH   hl   
078F   DD E9                  JP   (ix)   
0791                             ;*******************************************************************
0791                             ; commands
0791                             ;*******************************************************************
0791                COMMAND:      
0791   03                     INC   bc   
0792   0A                     LD   a,(bc)   
0793   FE 5C                  CP   $5C   ; \\ comment
0795   CA E7 07               JP   z,comment   
0798   FE 61                  CP   "a"   ; \a absolute
079A   CA DA 07               JP   z,abs1   
079D   FE 62                  CP   "b"   ; \b bytes
079F   CA F0 07               JP   z,bytes   
07A2   FE 66                  CP   "f"   ; \f func
07A4   CA F8 07               JP   z,func   
07A7   FE 46                  CP   "F"   ; \F false
07A9   CA 07 06               JP   z,false1   
07AC   FE 69                  CP   "i"   ; \i input
07AE   CA 14 08               JP   z,input   
07B1   FE 6B                  CP   "k"   ; \k key
07B3   CA 1F 08               JP   z,key   
07B6   FE 6F                  CP   "o"   ; \o output
07B8   CA 28 08               JP   z,output   
07BB   FE 72                  CP   "r"   ; \r repeat
07BD   CA 31 08               JP   z,repeat   
07C0   FE 73                  CP   "s"   ; \s select
07C2   CA 39 08               JP   z,select   
07C5   FE 54                  CP   "T"   ; \T true
07C7   CA 01 06               JP   z,true1   
07CA   FE 77                  CP   "w"   ; \w words
07CC   CA 43 08               JP   z,words   
07CF   FE 78                  CP   "x"   ; \x exit loop or block
07D1   CA 49 08               JP   z,blockExit   
07D4   21 01 00               LD   hl,1   ; error 1: unknown command
07D7   C3 EB 09               JP   error   
07DA                ABS1:        
07DA   E1                     POP   hl   
07DB   CB 7C                  BIT   7,h   
07DD   C8                     RET   z   
07DE   AF                     XOR   a   
07DF   95                     SUB   l   
07E0   6F                     LD   l,a   
07E1   9F                     SBC   a,a   
07E2   94                     SUB   h   
07E3   67                     LD   h,a   
07E4   E5                     PUSH   hl   
07E5   DD E9                  JP   (ix)   
07E7                COMMENT:      
07E7   03                     INC   bc   ; point to next char
07E8   0A                     LD   a,(bc)   
07E9   FE 20                  CP   " "   ; terminate on any char less than SP
07EB   30 FA                  JR   nc,comment   
07ED   0B                     DEC   bc   
07EE   DD E9                  JP   (ix)   
07F0                BYTES:       
07F0   21 01 00               LD   hl,1   
07F3                BYTES1:      
07F3   22 E6 37               LD   (vDataWidth),hl   
07F6   DD E9                  JP   (ix)   
07F8                             ; arg_list* block* -- ptr
07F8                FUNC:        
07F8   D1                     POP   de   ; de = block* hl = heap*
07F9   2A EC 37               LD   hl,(vHeapPtr)   
07FC   AF                     XOR   a   
07FD   77                     LD   (hl),a   ; compile null closure*
07FE   23                     INC   hl   
07FF   77                     LD   (hl),a   
0800   23                     INC   hl   
0801   73                     LD   (hl),e   ; compile block*
0802   23                     INC   hl   
0803   72                     LD   (hl),d   
0804   23                     INC   hl   
0805   D1                     POP   de   ; de = block*
0806   73                     LD   (hl),e   ; compile arg_list*
0807   23                     INC   hl   
0808   72                     LD   (hl),d   
0809   23                     INC   hl   
080A   ED 5B EC 37            LD   de,(vHeapPtr)   ; return func*
080E   D5                     PUSH   de   
080F   22 EC 37               LD   (vHeapPtr),hl   ; heap* += 4
0812   DD E9                  JP   (ix)   
0814                             ; Z80 port input
0814                             ; port -- value
0814                INPUT:       
0814   E1                     POP   hl   
0815   59                     LD   e,c   ; save IP
0816   4D                     LD   c,l   
0817   ED 68                  IN   l,(c)   
0819   26 00                  LD   h,0   
081B   4B                     LD   c,e   ; restore IP
081C   E5                     PUSH   hl   
081D   DD E9                  JP   (ix)   
081F                KEY:         
081F   CD 81 00               CALL   getchar   
0822   26 00                  LD   h,0   
0824   6F                     LD   l,a   
0825   E5                     PUSH   hl   
0826   DD E9                  JP   (ix)   
0828                             ; Z80 port output
0828                             ; value port --
0828                OUTPUT:      
0828   E1                     POP   hl   
0829   59                     LD   e,c   ; save IP
082A   4D                     LD   c,l   
082B   E1                     POP   hl   
082C   ED 69                  OUT   (c),l   
082E   4B                     LD   c,e   ; restore IP
082F   DD E9                  JP   (ix)   
0831                             ; repeat
0831                             ; block* --
0831                REPEAT:      
0831   0B                     DEC   bc   ; rewind IP to before \r
0832   0B                     DEC   bc   
0833   E1                     POP   hl   
0834   E5                     PUSH   hl   
0835   E5                     PUSH   hl   
0836   C3 0D 06               JP   go   
0839                             ; select
0839                             ; index array -- value
0839                SELECT:      
0839   D1                     POP   de   ; de = array
083A   E1                     POP   hl   ; hl = index
083B   29                     ADD   hl,hl   ; if data width = 2 then double
083C   19                     ADD   hl,de   ; add addr
083D   5E                     LD   e,(hl)   
083E   23                     INC   hl   
083F   56                     LD   d,(hl)   
0840   C3 0E 06               JP   go1   
0843                WORDS:       
0843   21 02 00               LD   hl,2   
0846   C3 F3 07               JP   bytes1   
0849                BLOCKEXIT:      
0849   E1                     POP   hl   
084A   7D                     LD   a,l   
084B   B4                     OR   h   
084C   28 02                  JR   z,blockExit1   
084E   DD E9                  JP   (ix)   
0850                BLOCKEXIT1:      
0850   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0853   FD 66 07               LD   h,(iy+7)   
0856   23                     INC   hl   ; forward IP on stack to after \r
0857   23                     INC   hl   
0858   FD 75 06               LD   (iy+6),l   
085B   FD 74 07               LD   (iy+7),h   
085E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0861   FD 56 03               LD   d,(iy+3)   
0864   13                     INC   de   
0865   13                     INC   de   
0866   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
0869   FD 72 03               LD   (iy+3),d   
086C   C3 3F 05               JP   blockEnd   
086F                             ; 
086F                             ; 
086F                             ; 
086F                             ; 
086F                             ; c b --
086F                             ; loops until c = 0
086F                LOOP:        
086F   DD E9                  JP   (ix)   
0871                             ;     pop de                      ; de = block                    c
0871                             ;     pop hl                      ; hl = condition
0871                             ;     push de
0871                             ;     push bc                     ; push IP
0871                             ;     ld bc,de                    ; bc = block
0871                             ;     ld e,(iy+2)                 ; get first_arg* from parent stack frame
0871                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0871                             ;     push de                     ; push first_arg*
0871                             ;     push iy                     ; push BP
0871                             ;     ld iy,0                     ; iy = sp
0871                             ;     add iy,sp
0871                             ; loop1:
0871                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0871                             ;     or h
0871                             ;     jr z,loop3
0871                             ;     ld de,loop2-1               ; IP return address
0871                             ;     push de
0871                             ;     ld e,(iy+2)                 ; push parent first_arg*
0871                             ;     ld d,(iy+3)
0871                             ;     push de                     ;
0871                             ;     push iy                     ; push BP
0871                             ;     ld iy,0                     ; iy = sp
0871                             ;     add iy,sp
0871                             ;     push hl                     ; push condition
0871                             ;     dec bc
0871                             ;     jp (ix)
0871                             ; loop2:
0871                             ;     db ESC                      ; escape from interpreter
0871                             ;     ld c,(iy+6)                 ; bc = block
0871                             ;     ld b,(iy+7)
0871                             ;     pop hl                      ; hl = condition
0871                             ;     jr loop1
0871                             ; loop3:
0871                             ;     ld d,iyh                    ; de = BP
0871                             ;     ld e,iyl
0871                             ;     ex de,hl                    ; hl = BP, de = result
0871                             ;     ld sp,hl                    ; sp = BP
0871                             ;     pop hl                      ; hl = old BP
0871                             ;     pop bc                      ; pop first_arg* (discard)
0871                             ;     pop bc                      ; bc = IP
0871                             ;     ld sp,hl                    ; sp = old BP
0871                             ;     ld iy,0                     ; iy = sp
0871                             ;     add iy,sp
0871                             ;     ld ix,(vNext)                  ; needed?
0871                             ;     jp (ix)
0871                             ; str -- num
0871                             ; hash:
0871                             ; pop hl
0871                             ; push bc
0871                             ; ld bc,hl
0871                             ; call hashStr
0871                             ; pop bc
0871                             ; push hl
0871                             ; jp (ix)
0871                             ; sqrt1:
0871                             ;     pop hl
0871                             ;     push bc
0871                             ;     call squareRoot
0871                             ;     ld (vRemain),bc
0871                             ;     pop bc
0871                             ;     push de
0871                             ;     jp (ix)
0871                FILTER:      
0871                MAP:         
0871                SCAN:        
0871   DD E9                  JP   (ix)   
0873                             ; -------------------------------------------------------------------------------
0873                             ; ; hash C-string
0873                             ; ; BC = str
0873                             ; ; HL = hash
0873                             ; hashStr:
0873                             ;     ld (vHashStr),bc                    ; store source string
0873                             ;     ld hl,0
0873                             ; hashStr1:
0873                             ;     ld a,(bc)                           ; load next char
0873                             ;     inc bc
0873                             ;     cp 0                                ; NUL?
0873                             ;     ret z
0873                             ; hashStr2:
0873                             ;     ld d,0
0873                             ;     ld e,a
0873                             ;     add hl,de
0873                             ;     ld de,hl                            ; hl *= 193 (11000001)
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,de                           ; add
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,hl                           ; shift left
0873                             ;     add hl,de                           ; add
0873                             ;     jr hashStr1
0873                             ; ; squareroot
0873                             ; ; Input: HL = value
0873                             ; ; Result: DE = square root BC = remainder
0873                             ; squareRoot:
0873                             ;     ld bc,0800h
0873                             ;     ld e,c
0873                             ;     xor a
0873                             ; squareRoot1:
0873                             ;     add hl,hl
0873                             ;     rl c
0873                             ;     adc hl,hl
0873                             ;     rl c
0873                             ;     jr nc,$+4
0873                             ;     set 0,l
0873                             ;     ld a,e
0873                             ;     add a,a
0873                             ;     ld e,a
0873                             ;     add a,a
0873                             ;     bit 0,l
0873                             ;     jr nz,$+5
0873                             ;     sub c
0873                             ;     jr nc,squareRoot4
0873                             ;     ld a,c
0873                             ;     sub e
0873                             ;     inc e
0873                             ;     sub e
0873                             ;     ld c,a
0873                             ; squareRoot4:
0873                             ;     djnz squareRoot1
0873                             ;     bit 0,l
0873                             ;     jr z,squareRoot5
0873                             ;     inc b
0873                             ; squareRoot5:
0873                             ;     ld d,0
0873                             ;     ret
0873                             ; print decimal
0873                             ; hl = value
0873                PRTDEC:      
0873   CB 7C                  BIT   7,h   
0875   28 0B                  JR   z,prtdec0   
0877   3E 2D                  LD   a,"-"   
0879   CD 85 00               CALL   putchar   
087C   AF                     XOR   a   
087D   95                     SUB   l   
087E   6F                     LD   l,a   
087F   9F                     SBC   a,a   
0880   94                     SUB   h   
0881   67                     LD   h,a   
0882                PRTDEC0:      
0882   C5                     PUSH   bc   
0883   0E 00                  LD   c,0   ; leading zeros flag = false
0885   11 F0 D8               LD   de,-10000   
0888   CD A4 08               CALL   prtdec1   
088B   11 18 FC               LD   de,-1000   
088E   CD A4 08               CALL   prtdec1   
0891   11 9C FF               LD   de,-100   
0894   CD A4 08               CALL   prtdec1   
0897   1E F6                  LD   e,-10   
0899   CD A4 08               CALL   prtdec1   
089C   0C                     INC   c   ; flag = true for at least digit
089D   1E FF                  LD   e,-1   
089F   CD A4 08               CALL   prtdec1   
08A2   C1                     POP   bc   
08A3   C9                     RET      
08A4                PRTDEC1:      
08A4   06 2F                  LD   b,"0"-1   
08A6                PRTDEC2:      
08A6   04                     INC   b   
08A7   19                     ADD   hl,de   
08A8   38 FC                  JR   c,prtdec2   
08AA   ED 52                  SBC   hl,de   
08AC   3E 30                  LD   a,"0"   
08AE   B8                     CP   b   
08AF   20 05                  JR   nz,prtdec3   
08B1   AF                     XOR   a   
08B2   B1                     OR   c   
08B3   C8                     RET   z   
08B4   18 01                  JR   prtdec4   
08B6                PRTDEC3:      
08B6   0C                     INC   c   
08B7                PRTDEC4:      
08B7   78                     LD   a,b   
08B8   C3 85 00               JP   putchar   
08BB                PRTHEX:      ; display hl as a 16-bit number in hex.
08BB   C5                     PUSH   bc   ; preserve the IP
08BC   7C                     LD   a,h   
08BD   CD C6 08               CALL   prthex2   
08C0   7D                     LD   a,l   
08C1   CD C6 08               CALL   prthex2   
08C4   C1                     POP   bc   
08C5   C9                     RET      
08C6                PRTHEX2:      
08C6   4F                     LD   c,a   
08C7   1F                     RRA      
08C8   1F                     RRA      
08C9   1F                     RRA      
08CA   1F                     RRA      
08CB   CD CF 08               CALL   prthex3   
08CE   79                     LD   a,c   
08CF                PRTHEX3:      
08CF   E6 0F                  AND   0x0F   
08D1   C6 90                  ADD   a,0x90   
08D3   27                     DAA      
08D4   CE 40                  ADC   a,0x40   
08D6   27                     DAA      
08D7   C3 85 00               JP   putchar   
08DA                PRTSTR0:      
08DA   CD 85 00               CALL   putchar   
08DD   23                     INC   hl   
08DE                PRTSTR:      
08DE   7E                     LD   a,(hl)   
08DF   B7                     OR   a   
08E0   20 F8                  JR   nz,prtstr0   
08E2   C9                     RET      
08E3                             ; **************************************************************************
08E3                             ; calculate nesting value
08E3                             ; a is char to be tested,
08E3                             ; e is the nesting value (initially 0)
08E3                             ; e is increased by ( and [
08E3                             ; e is decreased by ) and ]
08E3                             ; e has its bit 7 toggled by `
08E3                             ; limited to 127 levels
08E3                             ; **************************************************************************
08E3                NESTING:      
08E3   FE 22                  CP   DQUOTE   ; quote char
08E5   28 06                  JR   z,nesting0   
08E7   FE 60                  CP   "`"   ; quote char
08E9   28 02                  JR   z,nesting0   
08EB   18 0A                  JR   nesting1   
08ED                NESTING0:      
08ED   CB 7B                  BIT   7,e   
08EF   28 03                  JR   z,nesting1a   
08F1   CB BB                  RES   7,e   
08F3   C9                     RET      
08F4                NESTING1A:      
08F4   CB FB                  SET   7,e   
08F6   C9                     RET      
08F7                NESTING1:      
08F7   CB 7B                  BIT   7,e   
08F9   C0                     RET   nz   
08FA   FE 7B                  CP   "{"   
08FC   28 08                  JR   z,nesting2   
08FE   FE 5B                  CP   "["   
0900   28 04                  JR   z,nesting2   
0902   FE 28                  CP   "("   
0904   20 02                  JR   nz,nesting3   
0906                NESTING2:      
0906   1C                     INC   e   
0907   C9                     RET      
0908                NESTING3:      
0908   FE 7D                  CP   "}"   
090A   28 07                  JR   z,nesting4   
090C   FE 5D                  CP   "]"   
090E   28 03                  JR   z,nesting4   
0910   FE 29                  CP   ")"   
0912   C0                     RET   nz   
0913                NESTING4:      
0913   1D                     DEC   e   
0914   C9                     RET      
0915                PROMPT:      
0915   CD 25 09               CALL   printStr   
0918   0D 0A 3E 20 00         .CSTR   "\r\n> "   
091D   C9                     RET      
091E                CRLF:        
091E   CD 25 09               CALL   printStr   
0921   0D 0A 00               .CSTR   "\r\n"   
0924   C9                     RET      
0925                             ; prints a null teminated string
0925                             ; the string should be immedaitely following the call
0925                PRINTSTR:      
0925   E3                     EX   (sp),hl   ; swap			
0926   CD DE 08               CALL   prtstr   
0929   23                     INC   hl   ; inc past NUL
092A   E3                     EX   (sp),hl   ; put it back	
092B   C9                     RET      
092C                             ; push contents of array on stack
092C                             ; hl = array*
092C                PUSHARRAY:      
092C   ED 43 F8 37            LD   (vTemp1),bc   ; save IP
0930   2B                     DEC   hl   ; bc = count
0931   46                     LD   b,(hl)   
0932   2B                     DEC   hl   
0933   4E                     LD   c,(hl)   
0934   23                     INC   hl   ; push each item on stack
0935   23                     INC   hl   
0936   18 06                  JR   pushArray2   
0938                PUSHARRAY1:      
0938   5E                     LD   e,(hl)   
0939   23                     INC   hl   
093A   56                     LD   d,(hl)   
093B   23                     INC   hl   
093C   D5                     PUSH   de   
093D   0B                     DEC   bc   
093E                PUSHARRAY2:      
093E   79                     LD   a,c   
093F   B0                     OR   b   
0940   20 F6                  JR   nz,pushArray1   
0942   ED 4B F8 37            LD   bc,(vTemp1)   ; restore IP
0946   C9                     RET      
0947                INIT:        
0947   DD 2A EA 37            LD   ix,(vNext)   
094B   FD 21 80 36            LD   iy,STACK   
094F   21 80 01               LD   hl,isysVars   
0952   11 E6 37               LD   de,sysVars   
0955   01 10 00               LD   bc,8 * 2   
0958   ED B0                  LDIR      
095A   21 00 37               LD   hl,vars   ; 52 vars LO HI
095D   06 34                  LD   b,26*2   
095F   AF                     XOR   a   
0960                INIT0:       
0960   77                     LD   (hl),a   
0961   23                     INC   hl   
0962   10 FC                  DJNZ   init0   
0964   C9                     RET      
0965                START:       
0965   31 80 36               LD   sp,STACK   ; start of monty
0968   CD 47 09               CALL   init   ; setups
096B   CD 25 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
096E   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
097B                INTERPRET:      
097B   CD 15 09               CALL   prompt   
097E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0981   ED 43 E8 37            LD   (vTIBPtr),bc   
0985                INTERPRET2:      ; calc nesting (a macro might have changed it)
0985   1E 00                  LD   e,0   ; initilize nesting value
0987   C5                     PUSH   bc   ; save offset into TIB,
0988                             ; bc is also the count of chars in TIB
0988   21 00 38               LD   hl,TIB   ; hl is start of TIB
098B   18 06                  JR   interpret4   
098D                INTERPRET3:      
098D   7E                     LD   a,(hl)   ; a = char in TIB
098E   23                     INC   hl   ; inc pointer into TIB
098F   0B                     DEC   bc   ; dec count of chars in TIB
0990   CD E3 08               CALL   nesting   ; update nesting value
0993                INTERPRET4:      
0993   79                     LD   a,c   ; is count zero?
0994   B0                     OR   b   
0995   20 F6                  JR   nz,interpret3   ; if not loop
0997   C1                     POP   bc   ; restore offset into TIB
0998                INTERPRET5:      
0998   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
099B   FE 20                  CP   $20   ; compare to space
099D   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
099F   FE 00                  CP   $0   ; is it end of string? NUL end of string
09A1                             ; ???? NEEDED?
09A1   28 27                  JR   z,interpret8   
09A3   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09A5   28 10                  JR   z,interpret7   ; if anything else its macro/control
09A7                             ; macro
09A7                             ;  ld (vTIBPtr),bc
09A7                             ;  ld hl,ctrlCodes
09A7                             ;  add a,l			            ; look up key of macros
09A7                             ;  ld l,a
09A7                             ;  ld e,(hl)
09A7                             ;  ld a,e
09A7                             ;  or a
09A7                             ;  jr z,macro1
09A7                             ;  ld d,msb(macros)
09A7                             ;  push de
09A7                             ;  call call		            ; monty exec_ operation and jump to it
09A7                             ;  db DC1,0
09A7                             ; macro1:
09A7                             ;  ld bc,(vTIBPtr)
09A7   18 DC                  JR   interpret2   
09A9                INTERPRET6:      
09A9   21 00 38               LD   hl,TIB   
09AC   09                     ADD   hl,bc   
09AD   77                     LD   (hl),a   ; store the character in textbuf
09AE   03                     INC   bc   
09AF   CD 85 00               CALL   putchar   ; echo character to screen
09B2   CD E3 08               CALL   nesting   
09B5   18 E1                  JR   interpret5   ; wait for next character
09B7                INTERPRET7:      
09B7   21 00 38               LD   hl,TIB   
09BA   09                     ADD   hl,bc   
09BB   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09BD   23                     INC   hl   
09BE   36 0A                  LD   (hl),"\n"   
09C0   23                     INC   hl   
09C1   03                     INC   bc   
09C2   03                     INC   bc   
09C3   CD 1E 09               CALL   crlf   ; echo character to screen
09C6   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09C7   B7                     OR   a   
09C8   20 CE                  JR   nz,interpret5   
09CA                INTERPRET8:      
09CA   ED 43 E8 37            LD   (vTIBPtr),bc   
09CE   01 00 38               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09D1                             ; we pressed enter
09D1   0B                     DEC   bc   
09D2                NEXT:        
09D2   03                     INC   bc   ; Increment the IP
09D3   0A                     LD   a,(bc)   ; Get the next character and dispatch
09D4   FE 20                  CP   " "   ; whitespace?
09D6   28 FA                  JR   z,next   ; space? ignore
09D8   38 07                  JR   c,next1   
09DA   6F                     LD   l,a   ; index into table
09DB   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09DD   6E                     LD   l,(hl)   ; get low jump address
09DE   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09E0   E9                     JP   (hl)   ; Jump to routine
09E1                NEXT1:       
09E1   FE 00                  CP   NUL   ; end of input string?
09E3   28 03                  JR   z,exit_   
09E5   C3 7B 09               JP   interpret   ; no, other whitespace, macros?
09E8                EXIT_:       
09E8   60 69                  LD   hl,bc   
09EA   E9                     JP   (hl)   
09EB                ERROR:       
09EB   CD 25 09               CALL   printStr   
09EE   45 72 72 6F 72 20 00   .CSTR   "Error "   
09F5   CD 73 08               CALL   prtdec   
09F8   C3 7B 09               JP   interpret   
09FB                          ALIGN   $100   
0A00                TESTSSTART:      
0A00                          ;*Macro unroll:  test "5 \\F {10} ?", 5
0A00   31 80 36               LD   SP,STACK   
0A03   CD 47 09               CALL   init   
0A06   CD AA 35               CALL   execStr   
0A09   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
0A15                          ;*Macro unroll:  expect "5 \\F {10} ?",5
0A15   E1                     POP   HL   
0A16   E5                     PUSH   HL   
0A17   11 05 00               LD   DE,5   
0A1A   B7                     OR   A   
0A1B   ED 52                  SBC   HL,DE   
0A1D   7D                     LD   A,L   
0A1E   B4                     OR   H   
0A1F   28 56                  JR   Z,expectM_0_2230S43   
0A21   CD 25 09               CALL   printStr   
0A24   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
0A36   CD 25 09               CALL   printStr   
0A39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0A48   21 05 00               LD   HL,5   
0A4B   CD 73 08               CALL   prtdec   
0A4E   CD 25 09               CALL   printStr   
0A51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0A5E   E1                     POP   hl   
0A5F   E5                     PUSH   hl   
0A60   CD 73 08               CALL   prtdec   
0A63   E1                     POP   hl   
0A64   CD 25 09               CALL   printStr   
0A67   20 28 23 00            .CSTR   " (#"   
0A6B   CD BB 08               CALL   prthex   
0A6E   CD 25 09               CALL   printStr   
0A71   29 0D 0A 00            .CSTR   ")\r\n"   
0A75   76                     HALT      
0A76   00                     .CSTR      
0A77                EXPECTM_0_2230S43:      
0A77   E1                     POP   HL   
0A78   CD 25 09               CALL   printStr   
0A7B   44 6F 6E 65 21 00      .CSTR   "Done!"   
0A81   76                     HALT      
0A82                             ; 
0A82                          ;*Macro unroll:  test "\\F", false
0A82   31 80 36               LD   SP,STACK   
0A85   CD 47 09               CALL   init   
0A88   CD AA 35               CALL   execStr   
0A8B   5C 46 00               .CSTR   "\\F"   
0A8E                          ;*Macro unroll:  expect "\\F",false
0A8E   E1                     POP   HL   
0A8F   E5                     PUSH   HL   
0A90   11 00 00               LD   DE,false   
0A93   B7                     OR   A   
0A94   ED 52                  SBC   HL,DE   
0A96   7D                     LD   A,L   
0A97   B4                     OR   H   
0A98   28 4D                  JR   Z,expectM_0_2235S43   
0A9A   CD 25 09               CALL   printStr   
0A9D   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0AA6   CD 25 09               CALL   printStr   
0AA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0AB8   21 00 00               LD   HL,false   
0ABB   CD 73 08               CALL   prtdec   
0ABE   CD 25 09               CALL   printStr   
0AC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ACE   E1                     POP   hl   
0ACF   E5                     PUSH   hl   
0AD0   CD 73 08               CALL   prtdec   
0AD3   E1                     POP   hl   
0AD4   CD 25 09               CALL   printStr   
0AD7   20 28 23 00            .CSTR   " (#"   
0ADB   CD BB 08               CALL   prthex   
0ADE   CD 25 09               CALL   printStr   
0AE1   29 0D 0A 00            .CSTR   ")\r\n"   
0AE5   76                     HALT      
0AE6   00                     .CSTR      
0AE7                EXPECTM_0_2235S43:      
0AE7   E1                     POP   HL   
0AE8                          ;*Macro unroll:  test "\\T", true
0AE8   31 80 36               LD   SP,STACK   
0AEB   CD 47 09               CALL   init   
0AEE   CD AA 35               CALL   execStr   
0AF1   5C 54 00               .CSTR   "\\T"   
0AF4                          ;*Macro unroll:  expect "\\T",true
0AF4   E1                     POP   HL   
0AF5   E5                     PUSH   HL   
0AF6   11 FF FF               LD   DE,true   
0AF9   B7                     OR   A   
0AFA   ED 52                  SBC   HL,DE   
0AFC   7D                     LD   A,L   
0AFD   B4                     OR   H   
0AFE   28 4D                  JR   Z,expectM_0_2236S43   
0B00   CD 25 09               CALL   printStr   
0B03   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0B0C   CD 25 09               CALL   printStr   
0B0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B1E   21 FF FF               LD   HL,true   
0B21   CD 73 08               CALL   prtdec   
0B24   CD 25 09               CALL   printStr   
0B27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B34   E1                     POP   hl   
0B35   E5                     PUSH   hl   
0B36   CD 73 08               CALL   prtdec   
0B39   E1                     POP   hl   
0B3A   CD 25 09               CALL   printStr   
0B3D   20 28 23 00            .CSTR   " (#"   
0B41   CD BB 08               CALL   prthex   
0B44   CD 25 09               CALL   printStr   
0B47   29 0D 0A 00            .CSTR   ")\r\n"   
0B4B   76                     HALT      
0B4C   00                     .CSTR      
0B4D                EXPECTM_0_2236S43:      
0B4D   E1                     POP   HL   
0B4E                          ;*Macro unroll:  test "1", 1
0B4E   31 80 36               LD   SP,STACK   
0B51   CD 47 09               CALL   init   
0B54   CD AA 35               CALL   execStr   
0B57   31 00                  .CSTR   "1"   
0B59                          ;*Macro unroll:  expect "1",1
0B59   E1                     POP   HL   
0B5A   E5                     PUSH   HL   
0B5B   11 01 00               LD   DE,1   
0B5E   B7                     OR   A   
0B5F   ED 52                  SBC   HL,DE   
0B61   7D                     LD   A,L   
0B62   B4                     OR   H   
0B63   28 4C                  JR   Z,expectM_0_2237S43   
0B65   CD 25 09               CALL   printStr   
0B68   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0B70   CD 25 09               CALL   printStr   
0B73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B82   21 01 00               LD   HL,1   
0B85   CD 73 08               CALL   prtdec   
0B88   CD 25 09               CALL   printStr   
0B8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B98   E1                     POP   hl   
0B99   E5                     PUSH   hl   
0B9A   CD 73 08               CALL   prtdec   
0B9D   E1                     POP   hl   
0B9E   CD 25 09               CALL   printStr   
0BA1   20 28 23 00            .CSTR   " (#"   
0BA5   CD BB 08               CALL   prthex   
0BA8   CD 25 09               CALL   printStr   
0BAB   29 0D 0A 00            .CSTR   ")\r\n"   
0BAF   76                     HALT      
0BB0   00                     .CSTR      
0BB1                EXPECTM_0_2237S43:      
0BB1   E1                     POP   HL   
0BB2                          ;*Macro unroll:  test "2", 2
0BB2   31 80 36               LD   SP,STACK   
0BB5   CD 47 09               CALL   init   
0BB8   CD AA 35               CALL   execStr   
0BBB   32 00                  .CSTR   "2"   
0BBD                          ;*Macro unroll:  expect "2",2
0BBD   E1                     POP   HL   
0BBE   E5                     PUSH   HL   
0BBF   11 02 00               LD   DE,2   
0BC2   B7                     OR   A   
0BC3   ED 52                  SBC   HL,DE   
0BC5   7D                     LD   A,L   
0BC6   B4                     OR   H   
0BC7   28 4C                  JR   Z,expectM_0_2238S43   
0BC9   CD 25 09               CALL   printStr   
0BCC   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0BD4   CD 25 09               CALL   printStr   
0BD7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BE6   21 02 00               LD   HL,2   
0BE9   CD 73 08               CALL   prtdec   
0BEC   CD 25 09               CALL   printStr   
0BEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BFC   E1                     POP   hl   
0BFD   E5                     PUSH   hl   
0BFE   CD 73 08               CALL   prtdec   
0C01   E1                     POP   hl   
0C02   CD 25 09               CALL   printStr   
0C05   20 28 23 00            .CSTR   " (#"   
0C09   CD BB 08               CALL   prthex   
0C0C   CD 25 09               CALL   printStr   
0C0F   29 0D 0A 00            .CSTR   ")\r\n"   
0C13   76                     HALT      
0C14   00                     .CSTR      
0C15                EXPECTM_0_2238S43:      
0C15   E1                     POP   HL   
0C16                          ;*Macro unroll:  test "1", 1
0C16   31 80 36               LD   SP,STACK   
0C19   CD 47 09               CALL   init   
0C1C   CD AA 35               CALL   execStr   
0C1F   31 00                  .CSTR   "1"   
0C21                          ;*Macro unroll:  expect "1",1
0C21   E1                     POP   HL   
0C22   E5                     PUSH   HL   
0C23   11 01 00               LD   DE,1   
0C26   B7                     OR   A   
0C27   ED 52                  SBC   HL,DE   
0C29   7D                     LD   A,L   
0C2A   B4                     OR   H   
0C2B   28 4C                  JR   Z,expectM_0_2239S43   
0C2D   CD 25 09               CALL   printStr   
0C30   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C38   CD 25 09               CALL   printStr   
0C3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C4A   21 01 00               LD   HL,1   
0C4D   CD 73 08               CALL   prtdec   
0C50   CD 25 09               CALL   printStr   
0C53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C60   E1                     POP   hl   
0C61   E5                     PUSH   hl   
0C62   CD 73 08               CALL   prtdec   
0C65   E1                     POP   hl   
0C66   CD 25 09               CALL   printStr   
0C69   20 28 23 00            .CSTR   " (#"   
0C6D   CD BB 08               CALL   prthex   
0C70   CD 25 09               CALL   printStr   
0C73   29 0D 0A 00            .CSTR   ")\r\n"   
0C77   76                     HALT      
0C78   00                     .CSTR      
0C79                EXPECTM_0_2239S43:      
0C79   E1                     POP   HL   
0C7A                          ;*Macro unroll:  test "0", 0
0C7A   31 80 36               LD   SP,STACK   
0C7D   CD 47 09               CALL   init   
0C80   CD AA 35               CALL   execStr   
0C83   30 00                  .CSTR   "0"   
0C85                          ;*Macro unroll:  expect "0",0
0C85   E1                     POP   HL   
0C86   E5                     PUSH   HL   
0C87   11 00 00               LD   DE,0   
0C8A   B7                     OR   A   
0C8B   ED 52                  SBC   HL,DE   
0C8D   7D                     LD   A,L   
0C8E   B4                     OR   H   
0C8F   28 4C                  JR   Z,expectM_0_2240S43   
0C91   CD 25 09               CALL   printStr   
0C94   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0C9C   CD 25 09               CALL   printStr   
0C9F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CAE   21 00 00               LD   HL,0   
0CB1   CD 73 08               CALL   prtdec   
0CB4   CD 25 09               CALL   printStr   
0CB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CC4   E1                     POP   hl   
0CC5   E5                     PUSH   hl   
0CC6   CD 73 08               CALL   prtdec   
0CC9   E1                     POP   hl   
0CCA   CD 25 09               CALL   printStr   
0CCD   20 28 23 00            .CSTR   " (#"   
0CD1   CD BB 08               CALL   prthex   
0CD4   CD 25 09               CALL   printStr   
0CD7   29 0D 0A 00            .CSTR   ")\r\n"   
0CDB   76                     HALT      
0CDC   00                     .CSTR      
0CDD                EXPECTM_0_2240S43:      
0CDD   E1                     POP   HL   
0CDE                          ;*Macro unroll:  test "10", 10
0CDE   31 80 36               LD   SP,STACK   
0CE1   CD 47 09               CALL   init   
0CE4   CD AA 35               CALL   execStr   
0CE7   31 30 00               .CSTR   "10"   
0CEA                          ;*Macro unroll:  expect "10",10
0CEA   E1                     POP   HL   
0CEB   E5                     PUSH   HL   
0CEC   11 0A 00               LD   DE,10   
0CEF   B7                     OR   A   
0CF0   ED 52                  SBC   HL,DE   
0CF2   7D                     LD   A,L   
0CF3   B4                     OR   H   
0CF4   28 4D                  JR   Z,expectM_0_2241S43   
0CF6   CD 25 09               CALL   printStr   
0CF9   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D02   CD 25 09               CALL   printStr   
0D05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D14   21 0A 00               LD   HL,10   
0D17   CD 73 08               CALL   prtdec   
0D1A   CD 25 09               CALL   printStr   
0D1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D2A   E1                     POP   hl   
0D2B   E5                     PUSH   hl   
0D2C   CD 73 08               CALL   prtdec   
0D2F   E1                     POP   hl   
0D30   CD 25 09               CALL   printStr   
0D33   20 28 23 00            .CSTR   " (#"   
0D37   CD BB 08               CALL   prthex   
0D3A   CD 25 09               CALL   printStr   
0D3D   29 0D 0A 00            .CSTR   ")\r\n"   
0D41   76                     HALT      
0D42   00                     .CSTR      
0D43                EXPECTM_0_2241S43:      
0D43   E1                     POP   HL   
0D44                          ;*Macro unroll:  test "123", 123
0D44   31 80 36               LD   SP,STACK   
0D47   CD 47 09               CALL   init   
0D4A   CD AA 35               CALL   execStr   
0D4D   31 32 33 00            .CSTR   "123"   
0D51                          ;*Macro unroll:  expect "123",123
0D51   E1                     POP   HL   
0D52   E5                     PUSH   HL   
0D53   11 7B 00               LD   DE,123   
0D56   B7                     OR   A   
0D57   ED 52                  SBC   HL,DE   
0D59   7D                     LD   A,L   
0D5A   B4                     OR   H   
0D5B   28 4E                  JR   Z,expectM_0_2242S43   
0D5D   CD 25 09               CALL   printStr   
0D60   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0D6A   CD 25 09               CALL   printStr   
0D6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D7C   21 7B 00               LD   HL,123   
0D7F   CD 73 08               CALL   prtdec   
0D82   CD 25 09               CALL   printStr   
0D85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D92   E1                     POP   hl   
0D93   E5                     PUSH   hl   
0D94   CD 73 08               CALL   prtdec   
0D97   E1                     POP   hl   
0D98   CD 25 09               CALL   printStr   
0D9B   20 28 23 00            .CSTR   " (#"   
0D9F   CD BB 08               CALL   prthex   
0DA2   CD 25 09               CALL   printStr   
0DA5   29 0D 0A 00            .CSTR   ")\r\n"   
0DA9   76                     HALT      
0DAA   00                     .CSTR      
0DAB                EXPECTM_0_2242S43:      
0DAB   E1                     POP   HL   
0DAC                          ;*Macro unroll:  test "-1",-1
0DAC   31 80 36               LD   SP,STACK   
0DAF   CD 47 09               CALL   init   
0DB2   CD AA 35               CALL   execStr   
0DB5   2D 31 00               .CSTR   "-1"   
0DB8                          ;*Macro unroll:  expect "-1",-1
0DB8   E1                     POP   HL   
0DB9   E5                     PUSH   HL   
0DBA   11 FF FF               LD   DE,-1   
0DBD   B7                     OR   A   
0DBE   ED 52                  SBC   HL,DE   
0DC0   7D                     LD   A,L   
0DC1   B4                     OR   H   
0DC2   28 4D                  JR   Z,expectM_0_2243S43   
0DC4   CD 25 09               CALL   printStr   
0DC7   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0DD0   CD 25 09               CALL   printStr   
0DD3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DE2   21 FF FF               LD   HL,-1   
0DE5   CD 73 08               CALL   prtdec   
0DE8   CD 25 09               CALL   printStr   
0DEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DF8   E1                     POP   hl   
0DF9   E5                     PUSH   hl   
0DFA   CD 73 08               CALL   prtdec   
0DFD   E1                     POP   hl   
0DFE   CD 25 09               CALL   printStr   
0E01   20 28 23 00            .CSTR   " (#"   
0E05   CD BB 08               CALL   prthex   
0E08   CD 25 09               CALL   printStr   
0E0B   29 0D 0A 00            .CSTR   ")\r\n"   
0E0F   76                     HALT      
0E10   00                     .CSTR      
0E11                EXPECTM_0_2243S43:      
0E11   E1                     POP   HL   
0E12                          ;*Macro unroll:  test "''", 0
0E12   31 80 36               LD   SP,STACK   
0E15   CD 47 09               CALL   init   
0E18   CD AA 35               CALL   execStr   
0E1B   27 27 00               .CSTR   "''"   
0E1E                          ;*Macro unroll:  expect "''",0
0E1E   E1                     POP   HL   
0E1F   E5                     PUSH   HL   
0E20   11 00 00               LD   DE,0   
0E23   B7                     OR   A   
0E24   ED 52                  SBC   HL,DE   
0E26   7D                     LD   A,L   
0E27   B4                     OR   H   
0E28   28 4D                  JR   Z,expectM_0_2244S43   
0E2A   CD 25 09               CALL   printStr   
0E2D   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0E36   CD 25 09               CALL   printStr   
0E39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E48   21 00 00               LD   HL,0   
0E4B   CD 73 08               CALL   prtdec   
0E4E   CD 25 09               CALL   printStr   
0E51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5E   E1                     POP   hl   
0E5F   E5                     PUSH   hl   
0E60   CD 73 08               CALL   prtdec   
0E63   E1                     POP   hl   
0E64   CD 25 09               CALL   printStr   
0E67   20 28 23 00            .CSTR   " (#"   
0E6B   CD BB 08               CALL   prthex   
0E6E   CD 25 09               CALL   printStr   
0E71   29 0D 0A 00            .CSTR   ")\r\n"   
0E75   76                     HALT      
0E76   00                     .CSTR      
0E77                EXPECTM_0_2244S43:      
0E77   E1                     POP   HL   
0E78                          ;*Macro unroll:  test "'a'", $61
0E78   31 80 36               LD   SP,STACK   
0E7B   CD 47 09               CALL   init   
0E7E   CD AA 35               CALL   execStr   
0E81   27 61 27 00            .CSTR   "'a'"   
0E85                          ;*Macro unroll:  expect "'a'",$61
0E85   E1                     POP   HL   
0E86   E5                     PUSH   HL   
0E87   11 61 00               LD   DE,$61   
0E8A   B7                     OR   A   
0E8B   ED 52                  SBC   HL,DE   
0E8D   7D                     LD   A,L   
0E8E   B4                     OR   H   
0E8F   28 4E                  JR   Z,expectM_0_2245S43   
0E91   CD 25 09               CALL   printStr   
0E94   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0E9E   CD 25 09               CALL   printStr   
0EA1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EB0   21 61 00               LD   HL,$61   
0EB3   CD 73 08               CALL   prtdec   
0EB6   CD 25 09               CALL   printStr   
0EB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EC6   E1                     POP   hl   
0EC7   E5                     PUSH   hl   
0EC8   CD 73 08               CALL   prtdec   
0ECB   E1                     POP   hl   
0ECC   CD 25 09               CALL   printStr   
0ECF   20 28 23 00            .CSTR   " (#"   
0ED3   CD BB 08               CALL   prthex   
0ED6   CD 25 09               CALL   printStr   
0ED9   29 0D 0A 00            .CSTR   ")\r\n"   
0EDD   76                     HALT      
0EDE   00                     .CSTR      
0EDF                EXPECTM_0_2245S43:      
0EDF   E1                     POP   HL   
0EE0                          ;*Macro unroll:  test "'\\''", $27
0EE0   31 80 36               LD   SP,STACK   
0EE3   CD 47 09               CALL   init   
0EE6   CD AA 35               CALL   execStr   
0EE9   27 5C 27 27 00         .CSTR   "'\\''"   
0EEE                          ;*Macro unroll:  expect "'\\''",$27
0EEE   E1                     POP   HL   
0EEF   E5                     PUSH   HL   
0EF0   11 27 00               LD   DE,$27   
0EF3   B7                     OR   A   
0EF4   ED 52                  SBC   HL,DE   
0EF6   7D                     LD   A,L   
0EF7   B4                     OR   H   
0EF8   28 4F                  JR   Z,expectM_0_2246S43   
0EFA   CD 25 09               CALL   printStr   
0EFD   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F08   CD 25 09               CALL   printStr   
0F0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F1A   21 27 00               LD   HL,$27   
0F1D   CD 73 08               CALL   prtdec   
0F20   CD 25 09               CALL   printStr   
0F23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F30   E1                     POP   hl   
0F31   E5                     PUSH   hl   
0F32   CD 73 08               CALL   prtdec   
0F35   E1                     POP   hl   
0F36   CD 25 09               CALL   printStr   
0F39   20 28 23 00            .CSTR   " (#"   
0F3D   CD BB 08               CALL   prthex   
0F40   CD 25 09               CALL   printStr   
0F43   29 0D 0A 00            .CSTR   ")\r\n"   
0F47   76                     HALT      
0F48   00                     .CSTR      
0F49                EXPECTM_0_2246S43:      
0F49   E1                     POP   HL   
0F4A                          ;*Macro unroll:  test "#10", $10
0F4A   31 80 36               LD   SP,STACK   
0F4D   CD 47 09               CALL   init   
0F50   CD AA 35               CALL   execStr   
0F53   23 31 30 00            .CSTR   "#10"   
0F57                          ;*Macro unroll:  expect "#10",$10
0F57   E1                     POP   HL   
0F58   E5                     PUSH   HL   
0F59   11 10 00               LD   DE,$10   
0F5C   B7                     OR   A   
0F5D   ED 52                  SBC   HL,DE   
0F5F   7D                     LD   A,L   
0F60   B4                     OR   H   
0F61   28 4E                  JR   Z,expectM_0_2247S43   
0F63   CD 25 09               CALL   printStr   
0F66   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0F70   CD 25 09               CALL   printStr   
0F73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F82   21 10 00               LD   HL,$10   
0F85   CD 73 08               CALL   prtdec   
0F88   CD 25 09               CALL   printStr   
0F8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F98   E1                     POP   hl   
0F99   E5                     PUSH   hl   
0F9A   CD 73 08               CALL   prtdec   
0F9D   E1                     POP   hl   
0F9E   CD 25 09               CALL   printStr   
0FA1   20 28 23 00            .CSTR   " (#"   
0FA5   CD BB 08               CALL   prthex   
0FA8   CD 25 09               CALL   printStr   
0FAB   29 0D 0A 00            .CSTR   ")\r\n"   
0FAF   76                     HALT      
0FB0   00                     .CSTR      
0FB1                EXPECTM_0_2247S43:      
0FB1   E1                     POP   HL   
0FB2                          ;*Macro unroll:  test "#FF", $FF
0FB2   31 80 36               LD   SP,STACK   
0FB5   CD 47 09               CALL   init   
0FB8   CD AA 35               CALL   execStr   
0FBB   23 46 46 00            .CSTR   "#FF"   
0FBF                          ;*Macro unroll:  expect "#FF",$FF
0FBF   E1                     POP   HL   
0FC0   E5                     PUSH   HL   
0FC1   11 FF 00               LD   DE,$FF   
0FC4   B7                     OR   A   
0FC5   ED 52                  SBC   HL,DE   
0FC7   7D                     LD   A,L   
0FC8   B4                     OR   H   
0FC9   28 4E                  JR   Z,expectM_0_2248S43   
0FCB   CD 25 09               CALL   printStr   
0FCE   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
0FD8   CD 25 09               CALL   printStr   
0FDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FEA   21 FF 00               LD   HL,$FF   
0FED   CD 73 08               CALL   prtdec   
0FF0   CD 25 09               CALL   printStr   
0FF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1000   E1                     POP   hl   
1001   E5                     PUSH   hl   
1002   CD 73 08               CALL   prtdec   
1005   E1                     POP   hl   
1006   CD 25 09               CALL   printStr   
1009   20 28 23 00            .CSTR   " (#"   
100D   CD BB 08               CALL   prthex   
1010   CD 25 09               CALL   printStr   
1013   29 0D 0A 00            .CSTR   ")\r\n"   
1017   76                     HALT      
1018   00                     .CSTR      
1019                EXPECTM_0_2248S43:      
1019   E1                     POP   HL   
101A                          ;*Macro unroll:  test "-1 2 +",1
101A   31 80 36               LD   SP,STACK   
101D   CD 47 09               CALL   init   
1020   CD AA 35               CALL   execStr   
1023   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
102A                          ;*Macro unroll:  expect "-1 2 +",1
102A   E1                     POP   HL   
102B   E5                     PUSH   HL   
102C   11 01 00               LD   DE,1   
102F   B7                     OR   A   
1030   ED 52                  SBC   HL,DE   
1032   7D                     LD   A,L   
1033   B4                     OR   H   
1034   28 51                  JR   Z,expectM_0_2249S43   
1036   CD 25 09               CALL   printStr   
1039   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1046   CD 25 09               CALL   printStr   
1049   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1058   21 01 00               LD   HL,1   
105B   CD 73 08               CALL   prtdec   
105E   CD 25 09               CALL   printStr   
1061   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
106E   E1                     POP   hl   
106F   E5                     PUSH   hl   
1070   CD 73 08               CALL   prtdec   
1073   E1                     POP   hl   
1074   CD 25 09               CALL   printStr   
1077   20 28 23 00            .CSTR   " (#"   
107B   CD BB 08               CALL   prthex   
107E   CD 25 09               CALL   printStr   
1081   29 0D 0A 00            .CSTR   ")\r\n"   
1085   76                     HALT      
1086   00                     .CSTR      
1087                EXPECTM_0_2249S43:      
1087   E1                     POP   HL   
1088                          ;*Macro unroll:  test "-1 1 +",0
1088   31 80 36               LD   SP,STACK   
108B   CD 47 09               CALL   init   
108E   CD AA 35               CALL   execStr   
1091   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1098                          ;*Macro unroll:  expect "-1 1 +",0
1098   E1                     POP   HL   
1099   E5                     PUSH   HL   
109A   11 00 00               LD   DE,0   
109D   B7                     OR   A   
109E   ED 52                  SBC   HL,DE   
10A0   7D                     LD   A,L   
10A1   B4                     OR   H   
10A2   28 51                  JR   Z,expectM_0_2250S43   
10A4   CD 25 09               CALL   printStr   
10A7   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
10B4   CD 25 09               CALL   printStr   
10B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10C6   21 00 00               LD   HL,0   
10C9   CD 73 08               CALL   prtdec   
10CC   CD 25 09               CALL   printStr   
10CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10DC   E1                     POP   hl   
10DD   E5                     PUSH   hl   
10DE   CD 73 08               CALL   prtdec   
10E1   E1                     POP   hl   
10E2   CD 25 09               CALL   printStr   
10E5   20 28 23 00            .CSTR   " (#"   
10E9   CD BB 08               CALL   prthex   
10EC   CD 25 09               CALL   printStr   
10EF   29 0D 0A 00            .CSTR   ")\r\n"   
10F3   76                     HALT      
10F4   00                     .CSTR      
10F5                EXPECTM_0_2250S43:      
10F5   E1                     POP   HL   
10F6                          ;*Macro unroll:  test "1 2 +", 3
10F6   31 80 36               LD   SP,STACK   
10F9   CD 47 09               CALL   init   
10FC   CD AA 35               CALL   execStr   
10FF   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1105                          ;*Macro unroll:  expect "1 2 +",3
1105   E1                     POP   HL   
1106   E5                     PUSH   HL   
1107   11 03 00               LD   DE,3   
110A   B7                     OR   A   
110B   ED 52                  SBC   HL,DE   
110D   7D                     LD   A,L   
110E   B4                     OR   H   
110F   28 50                  JR   Z,expectM_0_2251S43   
1111   CD 25 09               CALL   printStr   
1114   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1120   CD 25 09               CALL   printStr   
1123   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1132   21 03 00               LD   HL,3   
1135   CD 73 08               CALL   prtdec   
1138   CD 25 09               CALL   printStr   
113B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1148   E1                     POP   hl   
1149   E5                     PUSH   hl   
114A   CD 73 08               CALL   prtdec   
114D   E1                     POP   hl   
114E   CD 25 09               CALL   printStr   
1151   20 28 23 00            .CSTR   " (#"   
1155   CD BB 08               CALL   prthex   
1158   CD 25 09               CALL   printStr   
115B   29 0D 0A 00            .CSTR   ")\r\n"   
115F   76                     HALT      
1160   00                     .CSTR      
1161                EXPECTM_0_2251S43:      
1161   E1                     POP   HL   
1162                          ;*Macro unroll:  test "4 1 2 +", 3
1162   31 80 36               LD   SP,STACK   
1165   CD 47 09               CALL   init   
1168   CD AA 35               CALL   execStr   
116B   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1173                          ;*Macro unroll:  expect "4 1 2 +",3
1173   E1                     POP   HL   
1174   E5                     PUSH   HL   
1175   11 03 00               LD   DE,3   
1178   B7                     OR   A   
1179   ED 52                  SBC   HL,DE   
117B   7D                     LD   A,L   
117C   B4                     OR   H   
117D   28 52                  JR   Z,expectM_0_2252S43   
117F   CD 25 09               CALL   printStr   
1182   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1190   CD 25 09               CALL   printStr   
1193   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A2   21 03 00               LD   HL,3   
11A5   CD 73 08               CALL   prtdec   
11A8   CD 25 09               CALL   printStr   
11AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B8   E1                     POP   hl   
11B9   E5                     PUSH   hl   
11BA   CD 73 08               CALL   prtdec   
11BD   E1                     POP   hl   
11BE   CD 25 09               CALL   printStr   
11C1   20 28 23 00            .CSTR   " (#"   
11C5   CD BB 08               CALL   prthex   
11C8   CD 25 09               CALL   printStr   
11CB   29 0D 0A 00            .CSTR   ")\r\n"   
11CF   76                     HALT      
11D0   00                     .CSTR      
11D1                EXPECTM_0_2252S43:      
11D1   E1                     POP   HL   
11D2                          ;*Macro unroll:  test "1 2 +", 3
11D2   31 80 36               LD   SP,STACK   
11D5   CD 47 09               CALL   init   
11D8   CD AA 35               CALL   execStr   
11DB   31 20 32 20 2B 00      .CSTR   "1 2 +"   
11E1                          ;*Macro unroll:  expect "1 2 +",3
11E1   E1                     POP   HL   
11E2   E5                     PUSH   HL   
11E3   11 03 00               LD   DE,3   
11E6   B7                     OR   A   
11E7   ED 52                  SBC   HL,DE   
11E9   7D                     LD   A,L   
11EA   B4                     OR   H   
11EB   28 50                  JR   Z,expectM_0_2253S43   
11ED   CD 25 09               CALL   printStr   
11F0   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
11FC   CD 25 09               CALL   printStr   
11FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
120E   21 03 00               LD   HL,3   
1211   CD 73 08               CALL   prtdec   
1214   CD 25 09               CALL   printStr   
1217   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1224   E1                     POP   hl   
1225   E5                     PUSH   hl   
1226   CD 73 08               CALL   prtdec   
1229   E1                     POP   hl   
122A   CD 25 09               CALL   printStr   
122D   20 28 23 00            .CSTR   " (#"   
1231   CD BB 08               CALL   prthex   
1234   CD 25 09               CALL   printStr   
1237   29 0D 0A 00            .CSTR   ")\r\n"   
123B   76                     HALT      
123C   00                     .CSTR      
123D                EXPECTM_0_2253S43:      
123D   E1                     POP   HL   
123E                          ;*Macro unroll:  test "123 456 +", 123+456
123E   31 80 36               LD   SP,STACK   
1241   CD 47 09               CALL   init   
1244   CD AA 35               CALL   execStr   
1247   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1251                          ;*Macro unroll:  expect "123 456 +",123+456
1251   E1                     POP   HL   
1252   E5                     PUSH   HL   
1253   11 43 02               LD   DE,123+456   
1256   B7                     OR   A   
1257   ED 52                  SBC   HL,DE   
1259   7D                     LD   A,L   
125A   B4                     OR   H   
125B   28 54                  JR   Z,expectM_0_2254S43   
125D   CD 25 09               CALL   printStr   
1260   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1270   CD 25 09               CALL   printStr   
1273   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1282   21 43 02               LD   HL,123+456   
1285   CD 73 08               CALL   prtdec   
1288   CD 25 09               CALL   printStr   
128B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1298   E1                     POP   hl   
1299   E5                     PUSH   hl   
129A   CD 73 08               CALL   prtdec   
129D   E1                     POP   hl   
129E   CD 25 09               CALL   printStr   
12A1   20 28 23 00            .CSTR   " (#"   
12A5   CD BB 08               CALL   prthex   
12A8   CD 25 09               CALL   printStr   
12AB   29 0D 0A 00            .CSTR   ")\r\n"   
12AF   76                     HALT      
12B0   00                     .CSTR      
12B1                EXPECTM_0_2254S43:      
12B1   E1                     POP   HL   
12B2                          ;*Macro unroll:  test "64 128 +", 64+128
12B2   31 80 36               LD   SP,STACK   
12B5   CD 47 09               CALL   init   
12B8   CD AA 35               CALL   execStr   
12BB   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12C4                          ;*Macro unroll:  expect "64 128 +",64+128
12C4   E1                     POP   HL   
12C5   E5                     PUSH   HL   
12C6   11 C0 00               LD   DE,64+128   
12C9   B7                     OR   A   
12CA   ED 52                  SBC   HL,DE   
12CC   7D                     LD   A,L   
12CD   B4                     OR   H   
12CE   28 53                  JR   Z,expectM_0_2255S43   
12D0   CD 25 09               CALL   printStr   
12D3   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12E2   CD 25 09               CALL   printStr   
12E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12F4   21 C0 00               LD   HL,64+128   
12F7   CD 73 08               CALL   prtdec   
12FA   CD 25 09               CALL   printStr   
12FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
130A   E1                     POP   hl   
130B   E5                     PUSH   hl   
130C   CD 73 08               CALL   prtdec   
130F   E1                     POP   hl   
1310   CD 25 09               CALL   printStr   
1313   20 28 23 00            .CSTR   " (#"   
1317   CD BB 08               CALL   prthex   
131A   CD 25 09               CALL   printStr   
131D   29 0D 0A 00            .CSTR   ")\r\n"   
1321   76                     HALT      
1322   00                     .CSTR      
1323                EXPECTM_0_2255S43:      
1323   E1                     POP   HL   
1324                          ;*Macro unroll:  test "1 a= a++ a",2
1324   31 80 36               LD   SP,STACK   
1327   CD 47 09               CALL   init   
132A   CD AA 35               CALL   execStr   
132D   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1338                          ;*Macro unroll:  expect "1 a= a++ a",2
1338   E1                     POP   HL   
1339   E5                     PUSH   HL   
133A   11 02 00               LD   DE,2   
133D   B7                     OR   A   
133E   ED 52                  SBC   HL,DE   
1340   7D                     LD   A,L   
1341   B4                     OR   H   
1342   28 55                  JR   Z,expectM_0_2256S43   
1344   CD 25 09               CALL   printStr   
1347   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1358   CD 25 09               CALL   printStr   
135B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
136A   21 02 00               LD   HL,2   
136D   CD 73 08               CALL   prtdec   
1370   CD 25 09               CALL   printStr   
1373   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1380   E1                     POP   hl   
1381   E5                     PUSH   hl   
1382   CD 73 08               CALL   prtdec   
1385   E1                     POP   hl   
1386   CD 25 09               CALL   printStr   
1389   20 28 23 00            .CSTR   " (#"   
138D   CD BB 08               CALL   prthex   
1390   CD 25 09               CALL   printStr   
1393   29 0D 0A 00            .CSTR   ")\r\n"   
1397   76                     HALT      
1398   00                     .CSTR      
1399                EXPECTM_0_2256S43:      
1399   E1                     POP   HL   
139A                          ;*Macro unroll:  test "1 a= 2 a += a",3
139A   31 80 36               LD   SP,STACK   
139D   CD 47 09               CALL   init   
13A0   CD AA 35               CALL   execStr   
13A3   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
13B1                          ;*Macro unroll:  expect "1 a= 2 a += a",3
13B1   E1                     POP   HL   
13B2   E5                     PUSH   HL   
13B3   11 03 00               LD   DE,3   
13B6   B7                     OR   A   
13B7   ED 52                  SBC   HL,DE   
13B9   7D                     LD   A,L   
13BA   B4                     OR   H   
13BB   28 58                  JR   Z,expectM_0_2257S43   
13BD   CD 25 09               CALL   printStr   
13C0   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
13D4   CD 25 09               CALL   printStr   
13D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E6   21 03 00               LD   HL,3   
13E9   CD 73 08               CALL   prtdec   
13EC   CD 25 09               CALL   printStr   
13EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FC   E1                     POP   hl   
13FD   E5                     PUSH   hl   
13FE   CD 73 08               CALL   prtdec   
1401   E1                     POP   hl   
1402   CD 25 09               CALL   printStr   
1405   20 28 23 00            .CSTR   " (#"   
1409   CD BB 08               CALL   prthex   
140C   CD 25 09               CALL   printStr   
140F   29 0D 0A 00            .CSTR   ")\r\n"   
1413   76                     HALT      
1414   00                     .CSTR      
1415                EXPECTM_0_2257S43:      
1415   E1                     POP   HL   
1416                          ;*Macro unroll:  test "-1 -1 -",0
1416   31 80 36               LD   SP,STACK   
1419   CD 47 09               CALL   init   
141C   CD AA 35               CALL   execStr   
141F   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
1427                          ;*Macro unroll:  expect "-1 -1 -",0
1427   E1                     POP   HL   
1428   E5                     PUSH   HL   
1429   11 00 00               LD   DE,0   
142C   B7                     OR   A   
142D   ED 52                  SBC   HL,DE   
142F   7D                     LD   A,L   
1430   B4                     OR   H   
1431   28 52                  JR   Z,expectM_0_2258S43   
1433   CD 25 09               CALL   printStr   
1436   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1444   CD 25 09               CALL   printStr   
1447   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1456   21 00 00               LD   HL,0   
1459   CD 73 08               CALL   prtdec   
145C   CD 25 09               CALL   printStr   
145F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146C   E1                     POP   hl   
146D   E5                     PUSH   hl   
146E   CD 73 08               CALL   prtdec   
1471   E1                     POP   hl   
1472   CD 25 09               CALL   printStr   
1475   20 28 23 00            .CSTR   " (#"   
1479   CD BB 08               CALL   prthex   
147C   CD 25 09               CALL   printStr   
147F   29 0D 0A 00            .CSTR   ")\r\n"   
1483   76                     HALT      
1484   00                     .CSTR      
1485                EXPECTM_0_2258S43:      
1485   E1                     POP   HL   
1486                          ;*Macro unroll:  test "5 3 -", 2
1486   31 80 36               LD   SP,STACK   
1489   CD 47 09               CALL   init   
148C   CD AA 35               CALL   execStr   
148F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1495                          ;*Macro unroll:  expect "5 3 -",2
1495   E1                     POP   HL   
1496   E5                     PUSH   HL   
1497   11 02 00               LD   DE,2   
149A   B7                     OR   A   
149B   ED 52                  SBC   HL,DE   
149D   7D                     LD   A,L   
149E   B4                     OR   H   
149F   28 50                  JR   Z,expectM_0_2259S43   
14A1   CD 25 09               CALL   printStr   
14A4   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
14B0   CD 25 09               CALL   printStr   
14B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C2   21 02 00               LD   HL,2   
14C5   CD 73 08               CALL   prtdec   
14C8   CD 25 09               CALL   printStr   
14CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D8   E1                     POP   hl   
14D9   E5                     PUSH   hl   
14DA   CD 73 08               CALL   prtdec   
14DD   E1                     POP   hl   
14DE   CD 25 09               CALL   printStr   
14E1   20 28 23 00            .CSTR   " (#"   
14E5   CD BB 08               CALL   prthex   
14E8   CD 25 09               CALL   printStr   
14EB   29 0D 0A 00            .CSTR   ")\r\n"   
14EF   76                     HALT      
14F0   00                     .CSTR      
14F1                EXPECTM_0_2259S43:      
14F1   E1                     POP   HL   
14F2                          ;*Macro unroll:  test "2 1 -",1
14F2   31 80 36               LD   SP,STACK   
14F5   CD 47 09               CALL   init   
14F8   CD AA 35               CALL   execStr   
14FB   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1501                          ;*Macro unroll:  expect "2 1 -",1
1501   E1                     POP   HL   
1502   E5                     PUSH   HL   
1503   11 01 00               LD   DE,1   
1506   B7                     OR   A   
1507   ED 52                  SBC   HL,DE   
1509   7D                     LD   A,L   
150A   B4                     OR   H   
150B   28 50                  JR   Z,expectM_0_2260S43   
150D   CD 25 09               CALL   printStr   
1510   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
151C   CD 25 09               CALL   printStr   
151F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
152E   21 01 00               LD   HL,1   
1531   CD 73 08               CALL   prtdec   
1534   CD 25 09               CALL   printStr   
1537   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1544   E1                     POP   hl   
1545   E5                     PUSH   hl   
1546   CD 73 08               CALL   prtdec   
1549   E1                     POP   hl   
154A   CD 25 09               CALL   printStr   
154D   20 28 23 00            .CSTR   " (#"   
1551   CD BB 08               CALL   prthex   
1554   CD 25 09               CALL   printStr   
1557   29 0D 0A 00            .CSTR   ")\r\n"   
155B   76                     HALT      
155C   00                     .CSTR      
155D                EXPECTM_0_2260S43:      
155D   E1                     POP   HL   
155E                          ;*Macro unroll:  test "3 a= a-- a",2
155E   31 80 36               LD   SP,STACK   
1561   CD 47 09               CALL   init   
1564   CD AA 35               CALL   execStr   
1567   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
1572                          ;*Macro unroll:  expect "3 a= a-- a",2
1572   E1                     POP   HL   
1573   E5                     PUSH   HL   
1574   11 02 00               LD   DE,2   
1577   B7                     OR   A   
1578   ED 52                  SBC   HL,DE   
157A   7D                     LD   A,L   
157B   B4                     OR   H   
157C   28 55                  JR   Z,expectM_0_2261S43   
157E   CD 25 09               CALL   printStr   
1581   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
1592   CD 25 09               CALL   printStr   
1595   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A4   21 02 00               LD   HL,2   
15A7   CD 73 08               CALL   prtdec   
15AA   CD 25 09               CALL   printStr   
15AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15BA   E1                     POP   hl   
15BB   E5                     PUSH   hl   
15BC   CD 73 08               CALL   prtdec   
15BF   E1                     POP   hl   
15C0   CD 25 09               CALL   printStr   
15C3   20 28 23 00            .CSTR   " (#"   
15C7   CD BB 08               CALL   prthex   
15CA   CD 25 09               CALL   printStr   
15CD   29 0D 0A 00            .CSTR   ")\r\n"   
15D1   76                     HALT      
15D2   00                     .CSTR      
15D3                EXPECTM_0_2261S43:      
15D3   E1                     POP   HL   
15D4                          ;*Macro unroll:  test "4 a= 2 a -= a",2
15D4   31 80 36               LD   SP,STACK   
15D7   CD 47 09               CALL   init   
15DA   CD AA 35               CALL   execStr   
15DD   34 20 61 3D 20 32 20 61 20 2D 3D 20 61 00 .CSTR   "4 a= 2 a -= a"   
15EB                          ;*Macro unroll:  expect "4 a= 2 a -= a",2
15EB   E1                     POP   HL   
15EC   E5                     PUSH   HL   
15ED   11 02 00               LD   DE,2   
15F0   B7                     OR   A   
15F1   ED 52                  SBC   HL,DE   
15F3   7D                     LD   A,L   
15F4   B4                     OR   H   
15F5   28 58                  JR   Z,expectM_0_2262S43   
15F7   CD 25 09               CALL   printStr   
15FA   43 6F 64 65 3A 20 34 20 61 3D 20 32 20 61 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= 2 a -= a"   
160E   CD 25 09               CALL   printStr   
1611   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1620   21 02 00               LD   HL,2   
1623   CD 73 08               CALL   prtdec   
1626   CD 25 09               CALL   printStr   
1629   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1636   E1                     POP   hl   
1637   E5                     PUSH   hl   
1638   CD 73 08               CALL   prtdec   
163B   E1                     POP   hl   
163C   CD 25 09               CALL   printStr   
163F   20 28 23 00            .CSTR   " (#"   
1643   CD BB 08               CALL   prthex   
1646   CD 25 09               CALL   printStr   
1649   29 0D 0A 00            .CSTR   ")\r\n"   
164D   76                     HALT      
164E   00                     .CSTR      
164F                EXPECTM_0_2262S43:      
164F   E1                     POP   HL   
1650                          ;*Macro unroll:  test "3 5 &", 1
1650   31 80 36               LD   SP,STACK   
1653   CD 47 09               CALL   init   
1656   CD AA 35               CALL   execStr   
1659   33 20 35 20 26 00      .CSTR   "3 5 &"   
165F                          ;*Macro unroll:  expect "3 5 &",1
165F   E1                     POP   HL   
1660   E5                     PUSH   HL   
1661   11 01 00               LD   DE,1   
1664   B7                     OR   A   
1665   ED 52                  SBC   HL,DE   
1667   7D                     LD   A,L   
1668   B4                     OR   H   
1669   28 50                  JR   Z,expectM_0_2263S43   
166B   CD 25 09               CALL   printStr   
166E   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
167A   CD 25 09               CALL   printStr   
167D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
168C   21 01 00               LD   HL,1   
168F   CD 73 08               CALL   prtdec   
1692   CD 25 09               CALL   printStr   
1695   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16A2   E1                     POP   hl   
16A3   E5                     PUSH   hl   
16A4   CD 73 08               CALL   prtdec   
16A7   E1                     POP   hl   
16A8   CD 25 09               CALL   printStr   
16AB   20 28 23 00            .CSTR   " (#"   
16AF   CD BB 08               CALL   prthex   
16B2   CD 25 09               CALL   printStr   
16B5   29 0D 0A 00            .CSTR   ")\r\n"   
16B9   76                     HALT      
16BA   00                     .CSTR      
16BB                EXPECTM_0_2263S43:      
16BB   E1                     POP   HL   
16BC                          ;*Macro unroll:  test "3 5 |", 7
16BC   31 80 36               LD   SP,STACK   
16BF   CD 47 09               CALL   init   
16C2   CD AA 35               CALL   execStr   
16C5   33 20 35 20 7C 00      .CSTR   "3 5 |"   
16CB                          ;*Macro unroll:  expect "3 5 |",7
16CB   E1                     POP   HL   
16CC   E5                     PUSH   HL   
16CD   11 07 00               LD   DE,7   
16D0   B7                     OR   A   
16D1   ED 52                  SBC   HL,DE   
16D3   7D                     LD   A,L   
16D4   B4                     OR   H   
16D5   28 50                  JR   Z,expectM_0_2264S43   
16D7   CD 25 09               CALL   printStr   
16DA   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
16E6   CD 25 09               CALL   printStr   
16E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F8   21 07 00               LD   HL,7   
16FB   CD 73 08               CALL   prtdec   
16FE   CD 25 09               CALL   printStr   
1701   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170E   E1                     POP   hl   
170F   E5                     PUSH   hl   
1710   CD 73 08               CALL   prtdec   
1713   E1                     POP   hl   
1714   CD 25 09               CALL   printStr   
1717   20 28 23 00            .CSTR   " (#"   
171B   CD BB 08               CALL   prthex   
171E   CD 25 09               CALL   printStr   
1721   29 0D 0A 00            .CSTR   ")\r\n"   
1725   76                     HALT      
1726   00                     .CSTR      
1727                EXPECTM_0_2264S43:      
1727   E1                     POP   HL   
1728                          ;*Macro unroll:  test "2 3 *", 6
1728   31 80 36               LD   SP,STACK   
172B   CD 47 09               CALL   init   
172E   CD AA 35               CALL   execStr   
1731   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1737                          ;*Macro unroll:  expect "2 3 *",6
1737   E1                     POP   HL   
1738   E5                     PUSH   HL   
1739   11 06 00               LD   DE,6   
173C   B7                     OR   A   
173D   ED 52                  SBC   HL,DE   
173F   7D                     LD   A,L   
1740   B4                     OR   H   
1741   28 50                  JR   Z,expectM_0_2265S43   
1743   CD 25 09               CALL   printStr   
1746   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1752   CD 25 09               CALL   printStr   
1755   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1764   21 06 00               LD   HL,6   
1767   CD 73 08               CALL   prtdec   
176A   CD 25 09               CALL   printStr   
176D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
177A   E1                     POP   hl   
177B   E5                     PUSH   hl   
177C   CD 73 08               CALL   prtdec   
177F   E1                     POP   hl   
1780   CD 25 09               CALL   printStr   
1783   20 28 23 00            .CSTR   " (#"   
1787   CD BB 08               CALL   prthex   
178A   CD 25 09               CALL   printStr   
178D   29 0D 0A 00            .CSTR   ")\r\n"   
1791   76                     HALT      
1792   00                     .CSTR      
1793                EXPECTM_0_2265S43:      
1793   E1                     POP   HL   
1794                          ;*Macro unroll:  test "1 2 3 + *", 5
1794   31 80 36               LD   SP,STACK   
1797   CD 47 09               CALL   init   
179A   CD AA 35               CALL   execStr   
179D   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
17A7                          ;*Macro unroll:  expect "1 2 3 + *",5
17A7   E1                     POP   HL   
17A8   E5                     PUSH   HL   
17A9   11 05 00               LD   DE,5   
17AC   B7                     OR   A   
17AD   ED 52                  SBC   HL,DE   
17AF   7D                     LD   A,L   
17B0   B4                     OR   H   
17B1   28 54                  JR   Z,expectM_0_2266S43   
17B3   CD 25 09               CALL   printStr   
17B6   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
17C6   CD 25 09               CALL   printStr   
17C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D8   21 05 00               LD   HL,5   
17DB   CD 73 08               CALL   prtdec   
17DE   CD 25 09               CALL   printStr   
17E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17EE   E1                     POP   hl   
17EF   E5                     PUSH   hl   
17F0   CD 73 08               CALL   prtdec   
17F3   E1                     POP   hl   
17F4   CD 25 09               CALL   printStr   
17F7   20 28 23 00            .CSTR   " (#"   
17FB   CD BB 08               CALL   prthex   
17FE   CD 25 09               CALL   printStr   
1801   29 0D 0A 00            .CSTR   ")\r\n"   
1805   76                     HALT      
1806   00                     .CSTR      
1807                EXPECTM_0_2266S43:      
1807   E1                     POP   HL   
1808                          ;*Macro unroll:  test "7 3 /", 2
1808   31 80 36               LD   SP,STACK   
180B   CD 47 09               CALL   init   
180E   CD AA 35               CALL   execStr   
1811   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1817                          ;*Macro unroll:  expect "7 3 /",2
1817   E1                     POP   HL   
1818   E5                     PUSH   HL   
1819   11 02 00               LD   DE,2   
181C   B7                     OR   A   
181D   ED 52                  SBC   HL,DE   
181F   7D                     LD   A,L   
1820   B4                     OR   H   
1821   28 50                  JR   Z,expectM_0_2267S43   
1823   CD 25 09               CALL   printStr   
1826   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1832   CD 25 09               CALL   printStr   
1835   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1844   21 02 00               LD   HL,2   
1847   CD 73 08               CALL   prtdec   
184A   CD 25 09               CALL   printStr   
184D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185A   E1                     POP   hl   
185B   E5                     PUSH   hl   
185C   CD 73 08               CALL   prtdec   
185F   E1                     POP   hl   
1860   CD 25 09               CALL   printStr   
1863   20 28 23 00            .CSTR   " (#"   
1867   CD BB 08               CALL   prthex   
186A   CD 25 09               CALL   printStr   
186D   29 0D 0A 00            .CSTR   ")\r\n"   
1871   76                     HALT      
1872   00                     .CSTR      
1873                EXPECTM_0_2267S43:      
1873   E1                     POP   HL   
1874                          ;*Macro unroll:  test "7 3 / _", 1
1874   31 80 36               LD   SP,STACK   
1877   CD 47 09               CALL   init   
187A   CD AA 35               CALL   execStr   
187D   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1885                          ;*Macro unroll:  expect "7 3 / _",1
1885   E1                     POP   HL   
1886   E5                     PUSH   HL   
1887   11 01 00               LD   DE,1   
188A   B7                     OR   A   
188B   ED 52                  SBC   HL,DE   
188D   7D                     LD   A,L   
188E   B4                     OR   H   
188F   28 52                  JR   Z,expectM_0_2268S43   
1891   CD 25 09               CALL   printStr   
1894   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
18A2   CD 25 09               CALL   printStr   
18A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B4   21 01 00               LD   HL,1   
18B7   CD 73 08               CALL   prtdec   
18BA   CD 25 09               CALL   printStr   
18BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18CA   E1                     POP   hl   
18CB   E5                     PUSH   hl   
18CC   CD 73 08               CALL   prtdec   
18CF   E1                     POP   hl   
18D0   CD 25 09               CALL   printStr   
18D3   20 28 23 00            .CSTR   " (#"   
18D7   CD BB 08               CALL   prthex   
18DA   CD 25 09               CALL   printStr   
18DD   29 0D 0A 00            .CSTR   ")\r\n"   
18E1   76                     HALT      
18E2   00                     .CSTR      
18E3                EXPECTM_0_2268S43:      
18E3   E1                     POP   HL   
18E4                          ;*Macro unroll:  test "2 3 ==", FALSE
18E4   31 80 36               LD   SP,STACK   
18E7   CD 47 09               CALL   init   
18EA   CD AA 35               CALL   execStr   
18ED   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
18F4                          ;*Macro unroll:  expect "2 3 ==",FALSE
18F4   E1                     POP   HL   
18F5   E5                     PUSH   HL   
18F6   11 00 00               LD   DE,FALSE   
18F9   B7                     OR   A   
18FA   ED 52                  SBC   HL,DE   
18FC   7D                     LD   A,L   
18FD   B4                     OR   H   
18FE   28 51                  JR   Z,expectM_0_2269S43   
1900   CD 25 09               CALL   printStr   
1903   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1910   CD 25 09               CALL   printStr   
1913   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1922   21 00 00               LD   HL,FALSE   
1925   CD 73 08               CALL   prtdec   
1928   CD 25 09               CALL   printStr   
192B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1938   E1                     POP   hl   
1939   E5                     PUSH   hl   
193A   CD 73 08               CALL   prtdec   
193D   E1                     POP   hl   
193E   CD 25 09               CALL   printStr   
1941   20 28 23 00            .CSTR   " (#"   
1945   CD BB 08               CALL   prthex   
1948   CD 25 09               CALL   printStr   
194B   29 0D 0A 00            .CSTR   ")\r\n"   
194F   76                     HALT      
1950   00                     .CSTR      
1951                EXPECTM_0_2269S43:      
1951   E1                     POP   HL   
1952                          ;*Macro unroll:  test "3 3 ==", TRUE
1952   31 80 36               LD   SP,STACK   
1955   CD 47 09               CALL   init   
1958   CD AA 35               CALL   execStr   
195B   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1962                          ;*Macro unroll:  expect "3 3 ==",TRUE
1962   E1                     POP   HL   
1963   E5                     PUSH   HL   
1964   11 FF FF               LD   DE,TRUE   
1967   B7                     OR   A   
1968   ED 52                  SBC   HL,DE   
196A   7D                     LD   A,L   
196B   B4                     OR   H   
196C   28 51                  JR   Z,expectM_0_2270S43   
196E   CD 25 09               CALL   printStr   
1971   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
197E   CD 25 09               CALL   printStr   
1981   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1990   21 FF FF               LD   HL,TRUE   
1993   CD 73 08               CALL   prtdec   
1996   CD 25 09               CALL   printStr   
1999   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19A6   E1                     POP   hl   
19A7   E5                     PUSH   hl   
19A8   CD 73 08               CALL   prtdec   
19AB   E1                     POP   hl   
19AC   CD 25 09               CALL   printStr   
19AF   20 28 23 00            .CSTR   " (#"   
19B3   CD BB 08               CALL   prthex   
19B6   CD 25 09               CALL   printStr   
19B9   29 0D 0A 00            .CSTR   ")\r\n"   
19BD   76                     HALT      
19BE   00                     .CSTR      
19BF                EXPECTM_0_2270S43:      
19BF   E1                     POP   HL   
19C0                          ;*Macro unroll:  test "1 2 <", TRUE
19C0   31 80 36               LD   SP,STACK   
19C3   CD 47 09               CALL   init   
19C6   CD AA 35               CALL   execStr   
19C9   31 20 32 20 3C 00      .CSTR   "1 2 <"   
19CF                          ;*Macro unroll:  expect "1 2 <",TRUE
19CF   E1                     POP   HL   
19D0   E5                     PUSH   HL   
19D1   11 FF FF               LD   DE,TRUE   
19D4   B7                     OR   A   
19D5   ED 52                  SBC   HL,DE   
19D7   7D                     LD   A,L   
19D8   B4                     OR   H   
19D9   28 50                  JR   Z,expectM_0_2271S43   
19DB   CD 25 09               CALL   printStr   
19DE   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
19EA   CD 25 09               CALL   printStr   
19ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19FC   21 FF FF               LD   HL,TRUE   
19FF   CD 73 08               CALL   prtdec   
1A02   CD 25 09               CALL   printStr   
1A05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A12   E1                     POP   hl   
1A13   E5                     PUSH   hl   
1A14   CD 73 08               CALL   prtdec   
1A17   E1                     POP   hl   
1A18   CD 25 09               CALL   printStr   
1A1B   20 28 23 00            .CSTR   " (#"   
1A1F   CD BB 08               CALL   prthex   
1A22   CD 25 09               CALL   printStr   
1A25   29 0D 0A 00            .CSTR   ")\r\n"   
1A29   76                     HALT      
1A2A   00                     .CSTR      
1A2B                EXPECTM_0_2271S43:      
1A2B   E1                     POP   HL   
1A2C                          ;*Macro unroll:  test "2 1 <", FALSE
1A2C   31 80 36               LD   SP,STACK   
1A2F   CD 47 09               CALL   init   
1A32   CD AA 35               CALL   execStr   
1A35   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1A3B                          ;*Macro unroll:  expect "2 1 <",FALSE
1A3B   E1                     POP   HL   
1A3C   E5                     PUSH   HL   
1A3D   11 00 00               LD   DE,FALSE   
1A40   B7                     OR   A   
1A41   ED 52                  SBC   HL,DE   
1A43   7D                     LD   A,L   
1A44   B4                     OR   H   
1A45   28 50                  JR   Z,expectM_0_2272S43   
1A47   CD 25 09               CALL   printStr   
1A4A   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1A56   CD 25 09               CALL   printStr   
1A59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A68   21 00 00               LD   HL,FALSE   
1A6B   CD 73 08               CALL   prtdec   
1A6E   CD 25 09               CALL   printStr   
1A71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A7E   E1                     POP   hl   
1A7F   E5                     PUSH   hl   
1A80   CD 73 08               CALL   prtdec   
1A83   E1                     POP   hl   
1A84   CD 25 09               CALL   printStr   
1A87   20 28 23 00            .CSTR   " (#"   
1A8B   CD BB 08               CALL   prthex   
1A8E   CD 25 09               CALL   printStr   
1A91   29 0D 0A 00            .CSTR   ")\r\n"   
1A95   76                     HALT      
1A96   00                     .CSTR      
1A97                EXPECTM_0_2272S43:      
1A97   E1                     POP   HL   
1A98                          ;*Macro unroll:  test "2 3 <", TRUE
1A98   31 80 36               LD   SP,STACK   
1A9B   CD 47 09               CALL   init   
1A9E   CD AA 35               CALL   execStr   
1AA1   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1AA7                          ;*Macro unroll:  expect "2 3 <",TRUE
1AA7   E1                     POP   HL   
1AA8   E5                     PUSH   HL   
1AA9   11 FF FF               LD   DE,TRUE   
1AAC   B7                     OR   A   
1AAD   ED 52                  SBC   HL,DE   
1AAF   7D                     LD   A,L   
1AB0   B4                     OR   H   
1AB1   28 50                  JR   Z,expectM_0_2273S43   
1AB3   CD 25 09               CALL   printStr   
1AB6   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1AC2   CD 25 09               CALL   printStr   
1AC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD4   21 FF FF               LD   HL,TRUE   
1AD7   CD 73 08               CALL   prtdec   
1ADA   CD 25 09               CALL   printStr   
1ADD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEA   E1                     POP   hl   
1AEB   E5                     PUSH   hl   
1AEC   CD 73 08               CALL   prtdec   
1AEF   E1                     POP   hl   
1AF0   CD 25 09               CALL   printStr   
1AF3   20 28 23 00            .CSTR   " (#"   
1AF7   CD BB 08               CALL   prthex   
1AFA   CD 25 09               CALL   printStr   
1AFD   29 0D 0A 00            .CSTR   ")\r\n"   
1B01   76                     HALT      
1B02   00                     .CSTR      
1B03                EXPECTM_0_2273S43:      
1B03   E1                     POP   HL   
1B04                          ;*Macro unroll:  test "3 3 <", FALSE
1B04   31 80 36               LD   SP,STACK   
1B07   CD 47 09               CALL   init   
1B0A   CD AA 35               CALL   execStr   
1B0D   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1B13                          ;*Macro unroll:  expect "3 3 <",FALSE
1B13   E1                     POP   HL   
1B14   E5                     PUSH   HL   
1B15   11 00 00               LD   DE,FALSE   
1B18   B7                     OR   A   
1B19   ED 52                  SBC   HL,DE   
1B1B   7D                     LD   A,L   
1B1C   B4                     OR   H   
1B1D   28 50                  JR   Z,expectM_0_2274S43   
1B1F   CD 25 09               CALL   printStr   
1B22   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1B2E   CD 25 09               CALL   printStr   
1B31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B40   21 00 00               LD   HL,FALSE   
1B43   CD 73 08               CALL   prtdec   
1B46   CD 25 09               CALL   printStr   
1B49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B56   E1                     POP   hl   
1B57   E5                     PUSH   hl   
1B58   CD 73 08               CALL   prtdec   
1B5B   E1                     POP   hl   
1B5C   CD 25 09               CALL   printStr   
1B5F   20 28 23 00            .CSTR   " (#"   
1B63   CD BB 08               CALL   prthex   
1B66   CD 25 09               CALL   printStr   
1B69   29 0D 0A 00            .CSTR   ")\r\n"   
1B6D   76                     HALT      
1B6E   00                     .CSTR      
1B6F                EXPECTM_0_2274S43:      
1B6F   E1                     POP   HL   
1B70                          ;*Macro unroll:  test "1 2 >", FALSE
1B70   31 80 36               LD   SP,STACK   
1B73   CD 47 09               CALL   init   
1B76   CD AA 35               CALL   execStr   
1B79   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1B7F                          ;*Macro unroll:  expect "1 2 >",FALSE
1B7F   E1                     POP   HL   
1B80   E5                     PUSH   HL   
1B81   11 00 00               LD   DE,FALSE   
1B84   B7                     OR   A   
1B85   ED 52                  SBC   HL,DE   
1B87   7D                     LD   A,L   
1B88   B4                     OR   H   
1B89   28 50                  JR   Z,expectM_0_2275S43   
1B8B   CD 25 09               CALL   printStr   
1B8E   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1B9A   CD 25 09               CALL   printStr   
1B9D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BAC   21 00 00               LD   HL,FALSE   
1BAF   CD 73 08               CALL   prtdec   
1BB2   CD 25 09               CALL   printStr   
1BB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC2   E1                     POP   hl   
1BC3   E5                     PUSH   hl   
1BC4   CD 73 08               CALL   prtdec   
1BC7   E1                     POP   hl   
1BC8   CD 25 09               CALL   printStr   
1BCB   20 28 23 00            .CSTR   " (#"   
1BCF   CD BB 08               CALL   prthex   
1BD2   CD 25 09               CALL   printStr   
1BD5   29 0D 0A 00            .CSTR   ")\r\n"   
1BD9   76                     HALT      
1BDA   00                     .CSTR      
1BDB                EXPECTM_0_2275S43:      
1BDB   E1                     POP   HL   
1BDC                          ;*Macro unroll:  test "2 1 >", TRUE
1BDC   31 80 36               LD   SP,STACK   
1BDF   CD 47 09               CALL   init   
1BE2   CD AA 35               CALL   execStr   
1BE5   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1BEB                          ;*Macro unroll:  expect "2 1 >",TRUE
1BEB   E1                     POP   HL   
1BEC   E5                     PUSH   HL   
1BED   11 FF FF               LD   DE,TRUE   
1BF0   B7                     OR   A   
1BF1   ED 52                  SBC   HL,DE   
1BF3   7D                     LD   A,L   
1BF4   B4                     OR   H   
1BF5   28 50                  JR   Z,expectM_0_2276S43   
1BF7   CD 25 09               CALL   printStr   
1BFA   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1C06   CD 25 09               CALL   printStr   
1C09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C18   21 FF FF               LD   HL,TRUE   
1C1B   CD 73 08               CALL   prtdec   
1C1E   CD 25 09               CALL   printStr   
1C21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C2E   E1                     POP   hl   
1C2F   E5                     PUSH   hl   
1C30   CD 73 08               CALL   prtdec   
1C33   E1                     POP   hl   
1C34   CD 25 09               CALL   printStr   
1C37   20 28 23 00            .CSTR   " (#"   
1C3B   CD BB 08               CALL   prthex   
1C3E   CD 25 09               CALL   printStr   
1C41   29 0D 0A 00            .CSTR   ")\r\n"   
1C45   76                     HALT      
1C46   00                     .CSTR      
1C47                EXPECTM_0_2276S43:      
1C47   E1                     POP   HL   
1C48                          ;*Macro unroll:  test "3 3 >", FALSE
1C48   31 80 36               LD   SP,STACK   
1C4B   CD 47 09               CALL   init   
1C4E   CD AA 35               CALL   execStr   
1C51   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1C57                          ;*Macro unroll:  expect "3 3 >",FALSE
1C57   E1                     POP   HL   
1C58   E5                     PUSH   HL   
1C59   11 00 00               LD   DE,FALSE   
1C5C   B7                     OR   A   
1C5D   ED 52                  SBC   HL,DE   
1C5F   7D                     LD   A,L   
1C60   B4                     OR   H   
1C61   28 50                  JR   Z,expectM_0_2277S43   
1C63   CD 25 09               CALL   printStr   
1C66   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1C72   CD 25 09               CALL   printStr   
1C75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C84   21 00 00               LD   HL,FALSE   
1C87   CD 73 08               CALL   prtdec   
1C8A   CD 25 09               CALL   printStr   
1C8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C9A   E1                     POP   hl   
1C9B   E5                     PUSH   hl   
1C9C   CD 73 08               CALL   prtdec   
1C9F   E1                     POP   hl   
1CA0   CD 25 09               CALL   printStr   
1CA3   20 28 23 00            .CSTR   " (#"   
1CA7   CD BB 08               CALL   prthex   
1CAA   CD 25 09               CALL   printStr   
1CAD   29 0D 0A 00            .CSTR   ")\r\n"   
1CB1   76                     HALT      
1CB2   00                     .CSTR      
1CB3                EXPECTM_0_2277S43:      
1CB3   E1                     POP   HL   
1CB4                          ;*Macro unroll:  test "4 3 >", TRUE
1CB4   31 80 36               LD   SP,STACK   
1CB7   CD 47 09               CALL   init   
1CBA   CD AA 35               CALL   execStr   
1CBD   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1CC3                          ;*Macro unroll:  expect "4 3 >",TRUE
1CC3   E1                     POP   HL   
1CC4   E5                     PUSH   HL   
1CC5   11 FF FF               LD   DE,TRUE   
1CC8   B7                     OR   A   
1CC9   ED 52                  SBC   HL,DE   
1CCB   7D                     LD   A,L   
1CCC   B4                     OR   H   
1CCD   28 50                  JR   Z,expectM_0_2278S43   
1CCF   CD 25 09               CALL   printStr   
1CD2   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1CDE   CD 25 09               CALL   printStr   
1CE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF0   21 FF FF               LD   HL,TRUE   
1CF3   CD 73 08               CALL   prtdec   
1CF6   CD 25 09               CALL   printStr   
1CF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D06   E1                     POP   hl   
1D07   E5                     PUSH   hl   
1D08   CD 73 08               CALL   prtdec   
1D0B   E1                     POP   hl   
1D0C   CD 25 09               CALL   printStr   
1D0F   20 28 23 00            .CSTR   " (#"   
1D13   CD BB 08               CALL   prthex   
1D16   CD 25 09               CALL   printStr   
1D19   29 0D 0A 00            .CSTR   ")\r\n"   
1D1D   76                     HALT      
1D1E   00                     .CSTR      
1D1F                EXPECTM_0_2278S43:      
1D1F   E1                     POP   HL   
1D20                          ;*Macro unroll:  test "2 2 <=", TRUE
1D20   31 80 36               LD   SP,STACK   
1D23   CD 47 09               CALL   init   
1D26   CD AA 35               CALL   execStr   
1D29   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1D30                          ;*Macro unroll:  expect "2 2 <=",TRUE
1D30   E1                     POP   HL   
1D31   E5                     PUSH   HL   
1D32   11 FF FF               LD   DE,TRUE   
1D35   B7                     OR   A   
1D36   ED 52                  SBC   HL,DE   
1D38   7D                     LD   A,L   
1D39   B4                     OR   H   
1D3A   28 51                  JR   Z,expectM_0_2279S43   
1D3C   CD 25 09               CALL   printStr   
1D3F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1D4C   CD 25 09               CALL   printStr   
1D4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D5E   21 FF FF               LD   HL,TRUE   
1D61   CD 73 08               CALL   prtdec   
1D64   CD 25 09               CALL   printStr   
1D67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D74   E1                     POP   hl   
1D75   E5                     PUSH   hl   
1D76   CD 73 08               CALL   prtdec   
1D79   E1                     POP   hl   
1D7A   CD 25 09               CALL   printStr   
1D7D   20 28 23 00            .CSTR   " (#"   
1D81   CD BB 08               CALL   prthex   
1D84   CD 25 09               CALL   printStr   
1D87   29 0D 0A 00            .CSTR   ")\r\n"   
1D8B   76                     HALT      
1D8C   00                     .CSTR      
1D8D                EXPECTM_0_2279S43:      
1D8D   E1                     POP   HL   
1D8E                          ;*Macro unroll:  test "2 2 >=", TRUE
1D8E   31 80 36               LD   SP,STACK   
1D91   CD 47 09               CALL   init   
1D94   CD AA 35               CALL   execStr   
1D97   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
1D9E                          ;*Macro unroll:  expect "2 2 >=",TRUE
1D9E   E1                     POP   HL   
1D9F   E5                     PUSH   HL   
1DA0   11 FF FF               LD   DE,TRUE   
1DA3   B7                     OR   A   
1DA4   ED 52                  SBC   HL,DE   
1DA6   7D                     LD   A,L   
1DA7   B4                     OR   H   
1DA8   28 51                  JR   Z,expectM_0_2280S43   
1DAA   CD 25 09               CALL   printStr   
1DAD   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
1DBA   CD 25 09               CALL   printStr   
1DBD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DCC   21 FF FF               LD   HL,TRUE   
1DCF   CD 73 08               CALL   prtdec   
1DD2   CD 25 09               CALL   printStr   
1DD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DE2   E1                     POP   hl   
1DE3   E5                     PUSH   hl   
1DE4   CD 73 08               CALL   prtdec   
1DE7   E1                     POP   hl   
1DE8   CD 25 09               CALL   printStr   
1DEB   20 28 23 00            .CSTR   " (#"   
1DEF   CD BB 08               CALL   prthex   
1DF2   CD 25 09               CALL   printStr   
1DF5   29 0D 0A 00            .CSTR   ")\r\n"   
1DF9   76                     HALT      
1DFA   00                     .CSTR      
1DFB                EXPECTM_0_2280S43:      
1DFB   E1                     POP   HL   
1DFC                          ;*Macro unroll:  test "3 1 <<", 6
1DFC   31 80 36               LD   SP,STACK   
1DFF   CD 47 09               CALL   init   
1E02   CD AA 35               CALL   execStr   
1E05   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
1E0C                          ;*Macro unroll:  expect "3 1 <<",6
1E0C   E1                     POP   HL   
1E0D   E5                     PUSH   HL   
1E0E   11 06 00               LD   DE,6   
1E11   B7                     OR   A   
1E12   ED 52                  SBC   HL,DE   
1E14   7D                     LD   A,L   
1E15   B4                     OR   H   
1E16   28 51                  JR   Z,expectM_0_2281S43   
1E18   CD 25 09               CALL   printStr   
1E1B   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
1E28   CD 25 09               CALL   printStr   
1E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E3A   21 06 00               LD   HL,6   
1E3D   CD 73 08               CALL   prtdec   
1E40   CD 25 09               CALL   printStr   
1E43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E50   E1                     POP   hl   
1E51   E5                     PUSH   hl   
1E52   CD 73 08               CALL   prtdec   
1E55   E1                     POP   hl   
1E56   CD 25 09               CALL   printStr   
1E59   20 28 23 00            .CSTR   " (#"   
1E5D   CD BB 08               CALL   prthex   
1E60   CD 25 09               CALL   printStr   
1E63   29 0D 0A 00            .CSTR   ")\r\n"   
1E67   76                     HALT      
1E68   00                     .CSTR      
1E69                EXPECTM_0_2281S43:      
1E69   E1                     POP   HL   
1E6A                          ;*Macro unroll:  test "10 1 >>", 5
1E6A   31 80 36               LD   SP,STACK   
1E6D   CD 47 09               CALL   init   
1E70   CD AA 35               CALL   execStr   
1E73   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
1E7B                          ;*Macro unroll:  expect "10 1 >>",5
1E7B   E1                     POP   HL   
1E7C   E5                     PUSH   HL   
1E7D   11 05 00               LD   DE,5   
1E80   B7                     OR   A   
1E81   ED 52                  SBC   HL,DE   
1E83   7D                     LD   A,L   
1E84   B4                     OR   H   
1E85   28 52                  JR   Z,expectM_0_2282S43   
1E87   CD 25 09               CALL   printStr   
1E8A   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
1E98   CD 25 09               CALL   printStr   
1E9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EAA   21 05 00               LD   HL,5   
1EAD   CD 73 08               CALL   prtdec   
1EB0   CD 25 09               CALL   printStr   
1EB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC0   E1                     POP   hl   
1EC1   E5                     PUSH   hl   
1EC2   CD 73 08               CALL   prtdec   
1EC5   E1                     POP   hl   
1EC6   CD 25 09               CALL   printStr   
1EC9   20 28 23 00            .CSTR   " (#"   
1ECD   CD BB 08               CALL   prthex   
1ED0   CD 25 09               CALL   printStr   
1ED3   29 0D 0A 00            .CSTR   ")\r\n"   
1ED7   76                     HALT      
1ED8   00                     .CSTR      
1ED9                EXPECTM_0_2282S43:      
1ED9   E1                     POP   HL   
1EDA                          ;*Macro unroll:  test "1 x = x", 1
1EDA   31 80 36               LD   SP,STACK   
1EDD   CD 47 09               CALL   init   
1EE0   CD AA 35               CALL   execStr   
1EE3   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
1EEB                          ;*Macro unroll:  expect "1 x = x",1
1EEB   E1                     POP   HL   
1EEC   E5                     PUSH   HL   
1EED   11 01 00               LD   DE,1   
1EF0   B7                     OR   A   
1EF1   ED 52                  SBC   HL,DE   
1EF3   7D                     LD   A,L   
1EF4   B4                     OR   H   
1EF5   28 52                  JR   Z,expectM_0_2283S43   
1EF7   CD 25 09               CALL   printStr   
1EFA   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
1F08   CD 25 09               CALL   printStr   
1F0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1A   21 01 00               LD   HL,1   
1F1D   CD 73 08               CALL   prtdec   
1F20   CD 25 09               CALL   printStr   
1F23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F30   E1                     POP   hl   
1F31   E5                     PUSH   hl   
1F32   CD 73 08               CALL   prtdec   
1F35   E1                     POP   hl   
1F36   CD 25 09               CALL   printStr   
1F39   20 28 23 00            .CSTR   " (#"   
1F3D   CD BB 08               CALL   prthex   
1F40   CD 25 09               CALL   printStr   
1F43   29 0D 0A 00            .CSTR   ")\r\n"   
1F47   76                     HALT      
1F48   00                     .CSTR      
1F49                EXPECTM_0_2283S43:      
1F49   E1                     POP   HL   
1F4A                          ;*Macro unroll:  test "1{}:", 1
1F4A   31 80 36               LD   SP,STACK   
1F4D   CD 47 09               CALL   init   
1F50   CD AA 35               CALL   execStr   
1F53   31 7B 7D 3A 00         .CSTR   "1{}:"   
1F58                          ;*Macro unroll:  expect "1{}:",1
1F58   E1                     POP   HL   
1F59   E5                     PUSH   HL   
1F5A   11 01 00               LD   DE,1   
1F5D   B7                     OR   A   
1F5E   ED 52                  SBC   HL,DE   
1F60   7D                     LD   A,L   
1F61   B4                     OR   H   
1F62   28 4F                  JR   Z,expectM_0_2284S43   
1F64   CD 25 09               CALL   printStr   
1F67   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
1F72   CD 25 09               CALL   printStr   
1F75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F84   21 01 00               LD   HL,1   
1F87   CD 73 08               CALL   prtdec   
1F8A   CD 25 09               CALL   printStr   
1F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9A   E1                     POP   hl   
1F9B   E5                     PUSH   hl   
1F9C   CD 73 08               CALL   prtdec   
1F9F   E1                     POP   hl   
1FA0   CD 25 09               CALL   printStr   
1FA3   20 28 23 00            .CSTR   " (#"   
1FA7   CD BB 08               CALL   prthex   
1FAA   CD 25 09               CALL   printStr   
1FAD   29 0D 0A 00            .CSTR   ")\r\n"   
1FB1   76                     HALT      
1FB2   00                     .CSTR      
1FB3                EXPECTM_0_2284S43:      
1FB3   E1                     POP   HL   
1FB4                          ;*Macro unroll:  test "{1}:", 1
1FB4   31 80 36               LD   SP,STACK   
1FB7   CD 47 09               CALL   init   
1FBA   CD AA 35               CALL   execStr   
1FBD   7B 31 7D 3A 00         .CSTR   "{1}:"   
1FC2                          ;*Macro unroll:  expect "{1}:",1
1FC2   E1                     POP   HL   
1FC3   E5                     PUSH   HL   
1FC4   11 01 00               LD   DE,1   
1FC7   B7                     OR   A   
1FC8   ED 52                  SBC   HL,DE   
1FCA   7D                     LD   A,L   
1FCB   B4                     OR   H   
1FCC   28 4F                  JR   Z,expectM_0_2285S43   
1FCE   CD 25 09               CALL   printStr   
1FD1   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
1FDC   CD 25 09               CALL   printStr   
1FDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FEE   21 01 00               LD   HL,1   
1FF1   CD 73 08               CALL   prtdec   
1FF4   CD 25 09               CALL   printStr   
1FF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2004   E1                     POP   hl   
2005   E5                     PUSH   hl   
2006   CD 73 08               CALL   prtdec   
2009   E1                     POP   hl   
200A   CD 25 09               CALL   printStr   
200D   20 28 23 00            .CSTR   " (#"   
2011   CD BB 08               CALL   prthex   
2014   CD 25 09               CALL   printStr   
2017   29 0D 0A 00            .CSTR   ")\r\n"   
201B   76                     HALT      
201C   00                     .CSTR      
201D                EXPECTM_0_2285S43:      
201D   E1                     POP   HL   
201E                          ;*Macro unroll:  test "{{1}:}:", 1
201E   31 80 36               LD   SP,STACK   
2021   CD 47 09               CALL   init   
2024   CD AA 35               CALL   execStr   
2027   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
202F                          ;*Macro unroll:  expect "{{1}:}:",1
202F   E1                     POP   HL   
2030   E5                     PUSH   HL   
2031   11 01 00               LD   DE,1   
2034   B7                     OR   A   
2035   ED 52                  SBC   HL,DE   
2037   7D                     LD   A,L   
2038   B4                     OR   H   
2039   28 52                  JR   Z,expectM_0_2286S43   
203B   CD 25 09               CALL   printStr   
203E   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
204C   CD 25 09               CALL   printStr   
204F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
205E   21 01 00               LD   HL,1   
2061   CD 73 08               CALL   prtdec   
2064   CD 25 09               CALL   printStr   
2067   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2074   E1                     POP   hl   
2075   E5                     PUSH   hl   
2076   CD 73 08               CALL   prtdec   
2079   E1                     POP   hl   
207A   CD 25 09               CALL   printStr   
207D   20 28 23 00            .CSTR   " (#"   
2081   CD BB 08               CALL   prthex   
2084   CD 25 09               CALL   printStr   
2087   29 0D 0A 00            .CSTR   ")\r\n"   
208B   76                     HALT      
208C   00                     .CSTR      
208D                EXPECTM_0_2286S43:      
208D   E1                     POP   HL   
208E                          ;*Macro unroll:  test "{{{1}:}:}:", 1
208E   31 80 36               LD   SP,STACK   
2091   CD 47 09               CALL   init   
2094   CD AA 35               CALL   execStr   
2097   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
20A2                          ;*Macro unroll:  expect "{{{1}:}:}:",1
20A2   E1                     POP   HL   
20A3   E5                     PUSH   HL   
20A4   11 01 00               LD   DE,1   
20A7   B7                     OR   A   
20A8   ED 52                  SBC   HL,DE   
20AA   7D                     LD   A,L   
20AB   B4                     OR   H   
20AC   28 55                  JR   Z,expectM_0_2287S43   
20AE   CD 25 09               CALL   printStr   
20B1   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
20C2   CD 25 09               CALL   printStr   
20C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D4   21 01 00               LD   HL,1   
20D7   CD 73 08               CALL   prtdec   
20DA   CD 25 09               CALL   printStr   
20DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20EA   E1                     POP   hl   
20EB   E5                     PUSH   hl   
20EC   CD 73 08               CALL   prtdec   
20EF   E1                     POP   hl   
20F0   CD 25 09               CALL   printStr   
20F3   20 28 23 00            .CSTR   " (#"   
20F7   CD BB 08               CALL   prthex   
20FA   CD 25 09               CALL   printStr   
20FD   29 0D 0A 00            .CSTR   ")\r\n"   
2101   76                     HALT      
2102   00                     .CSTR      
2103                EXPECTM_0_2287S43:      
2103   E1                     POP   HL   
2104                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2104   31 80 36               LD   SP,STACK   
2107   CD 47 09               CALL   init   
210A   CD AA 35               CALL   execStr   
210D   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
2119                          ;*Macro unroll:  expect "5 \\F {10} ?",5
2119   E1                     POP   HL   
211A   E5                     PUSH   HL   
211B   11 05 00               LD   DE,5   
211E   B7                     OR   A   
211F   ED 52                  SBC   HL,DE   
2121   7D                     LD   A,L   
2122   B4                     OR   H   
2123   28 56                  JR   Z,expectM_0_2288S43   
2125   CD 25 09               CALL   printStr   
2128   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
213A   CD 25 09               CALL   printStr   
213D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214C   21 05 00               LD   HL,5   
214F   CD 73 08               CALL   prtdec   
2152   CD 25 09               CALL   printStr   
2155   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2162   E1                     POP   hl   
2163   E5                     PUSH   hl   
2164   CD 73 08               CALL   prtdec   
2167   E1                     POP   hl   
2168   CD 25 09               CALL   printStr   
216B   20 28 23 00            .CSTR   " (#"   
216F   CD BB 08               CALL   prthex   
2172   CD 25 09               CALL   printStr   
2175   29 0D 0A 00            .CSTR   ")\r\n"   
2179   76                     HALT      
217A   00                     .CSTR      
217B                EXPECTM_0_2288S43:      
217B   E1                     POP   HL   
217C                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
217C   31 80 36               LD   SP,STACK   
217F   CD 47 09               CALL   init   
2182   CD AA 35               CALL   execStr   
2185   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
2193                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
2193   E1                     POP   HL   
2194   E5                     PUSH   HL   
2195   11 0F 00               LD   DE,15   
2198   B7                     OR   A   
2199   ED 52                  SBC   HL,DE   
219B   7D                     LD   A,L   
219C   B4                     OR   H   
219D   28 58                  JR   Z,expectM_0_2289S43   
219F   CD 25 09               CALL   printStr   
21A2   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
21B6   CD 25 09               CALL   printStr   
21B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C8   21 0F 00               LD   HL,15   
21CB   CD 73 08               CALL   prtdec   
21CE   CD 25 09               CALL   printStr   
21D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21DE   E1                     POP   hl   
21DF   E5                     PUSH   hl   
21E0   CD 73 08               CALL   prtdec   
21E3   E1                     POP   hl   
21E4   CD 25 09               CALL   printStr   
21E7   20 28 23 00            .CSTR   " (#"   
21EB   CD BB 08               CALL   prthex   
21EE   CD 25 09               CALL   printStr   
21F1   29 0D 0A 00            .CSTR   ")\r\n"   
21F5   76                     HALT      
21F6   00                     .CSTR      
21F7                EXPECTM_0_2289S43:      
21F7   E1                     POP   HL   
21F8                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
21F8   31 80 36               LD   SP,STACK   
21FB   CD 47 09               CALL   init   
21FE   CD AA 35               CALL   execStr   
2201   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2215                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2215   E1                     POP   HL   
2216   E5                     PUSH   HL   
2217   11 15 00               LD   DE,21   
221A   B7                     OR   A   
221B   ED 52                  SBC   HL,DE   
221D   7D                     LD   A,L   
221E   B4                     OR   H   
221F   28 5E                  JR   Z,expectM_0_2290S43   
2221   CD 25 09               CALL   printStr   
2224   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
223E   CD 25 09               CALL   printStr   
2241   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2250   21 15 00               LD   HL,21   
2253   CD 73 08               CALL   prtdec   
2256   CD 25 09               CALL   printStr   
2259   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2266   E1                     POP   hl   
2267   E5                     PUSH   hl   
2268   CD 73 08               CALL   prtdec   
226B   E1                     POP   hl   
226C   CD 25 09               CALL   printStr   
226F   20 28 23 00            .CSTR   " (#"   
2273   CD BB 08               CALL   prthex   
2276   CD 25 09               CALL   printStr   
2279   29 0D 0A 00            .CSTR   ")\r\n"   
227D   76                     HALT      
227E   00                     .CSTR      
227F                EXPECTM_0_2290S43:      
227F   E1                     POP   HL   
2280                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
2280   31 80 36               LD   SP,STACK   
2283   CD 47 09               CALL   init   
2286   CD AA 35               CALL   execStr   
2289   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
229D                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
229D   E1                     POP   HL   
229E   E5                     PUSH   HL   
229F   11 0B 00               LD   DE,11   
22A2   B7                     OR   A   
22A3   ED 52                  SBC   HL,DE   
22A5   7D                     LD   A,L   
22A6   B4                     OR   H   
22A7   28 5E                  JR   Z,expectM_0_2291S43   
22A9   CD 25 09               CALL   printStr   
22AC   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
22C6   CD 25 09               CALL   printStr   
22C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D8   21 0B 00               LD   HL,11   
22DB   CD 73 08               CALL   prtdec   
22DE   CD 25 09               CALL   printStr   
22E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22EE   E1                     POP   hl   
22EF   E5                     PUSH   hl   
22F0   CD 73 08               CALL   prtdec   
22F3   E1                     POP   hl   
22F4   CD 25 09               CALL   printStr   
22F7   20 28 23 00            .CSTR   " (#"   
22FB   CD BB 08               CALL   prthex   
22FE   CD 25 09               CALL   printStr   
2301   29 0D 0A 00            .CSTR   ")\r\n"   
2305   76                     HALT      
2306   00                     .CSTR      
2307                EXPECTM_0_2291S43:      
2307   E1                     POP   HL   
2308                          ;*Macro unroll:  test "() -2%", $0000
2308   31 80 36               LD   SP,STACK   
230B   CD 47 09               CALL   init   
230E   CD AA 35               CALL   execStr   
2311   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
2318                          ;*Macro unroll:  expect "() -2%",$0000
2318   E1                     POP   HL   
2319   E5                     PUSH   HL   
231A   11 00 00               LD   DE,$0000   
231D   B7                     OR   A   
231E   ED 52                  SBC   HL,DE   
2320   7D                     LD   A,L   
2321   B4                     OR   H   
2322   28 51                  JR   Z,expectM_0_2292S43   
2324   CD 25 09               CALL   printStr   
2327   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
2334   CD 25 09               CALL   printStr   
2337   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2346   21 00 00               LD   HL,$0000   
2349   CD 73 08               CALL   prtdec   
234C   CD 25 09               CALL   printStr   
234F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
235C   E1                     POP   hl   
235D   E5                     PUSH   hl   
235E   CD 73 08               CALL   prtdec   
2361   E1                     POP   hl   
2362   CD 25 09               CALL   printStr   
2365   20 28 23 00            .CSTR   " (#"   
2369   CD BB 08               CALL   prthex   
236C   CD 25 09               CALL   printStr   
236F   29 0D 0A 00            .CSTR   ")\r\n"   
2373   76                     HALT      
2374   00                     .CSTR      
2375                EXPECTM_0_2292S43:      
2375   E1                     POP   HL   
2376                          ;*Macro unroll:  test "(a) -1%", $0001
2376   31 80 36               LD   SP,STACK   
2379   CD 47 09               CALL   init   
237C   CD AA 35               CALL   execStr   
237F   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
2387                          ;*Macro unroll:  expect "(a) -1%",$0001
2387   E1                     POP   HL   
2388   E5                     PUSH   HL   
2389   11 01 00               LD   DE,$0001   
238C   B7                     OR   A   
238D   ED 52                  SBC   HL,DE   
238F   7D                     LD   A,L   
2390   B4                     OR   H   
2391   28 52                  JR   Z,expectM_0_2293S43   
2393   CD 25 09               CALL   printStr   
2396   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
23A4   CD 25 09               CALL   printStr   
23A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B6   21 01 00               LD   HL,$0001   
23B9   CD 73 08               CALL   prtdec   
23BC   CD 25 09               CALL   printStr   
23BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CC   E1                     POP   hl   
23CD   E5                     PUSH   hl   
23CE   CD 73 08               CALL   prtdec   
23D1   E1                     POP   hl   
23D2   CD 25 09               CALL   printStr   
23D5   20 28 23 00            .CSTR   " (#"   
23D9   CD BB 08               CALL   prthex   
23DC   CD 25 09               CALL   printStr   
23DF   29 0D 0A 00            .CSTR   ")\r\n"   
23E3   76                     HALT      
23E4   00                     .CSTR      
23E5                EXPECTM_0_2293S43:      
23E5   E1                     POP   HL   
23E6                          ;*Macro unroll:  test "(a:) -1%", $0001
23E6   31 80 36               LD   SP,STACK   
23E9   CD 47 09               CALL   init   
23EC   CD AA 35               CALL   execStr   
23EF   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
23F8                          ;*Macro unroll:  expect "(a:) -1%",$0001
23F8   E1                     POP   HL   
23F9   E5                     PUSH   HL   
23FA   11 01 00               LD   DE,$0001   
23FD   B7                     OR   A   
23FE   ED 52                  SBC   HL,DE   
2400   7D                     LD   A,L   
2401   B4                     OR   H   
2402   28 53                  JR   Z,expectM_0_2294S43   
2404   CD 25 09               CALL   printStr   
2407   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2416   CD 25 09               CALL   printStr   
2419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2428   21 01 00               LD   HL,$0001   
242B   CD 73 08               CALL   prtdec   
242E   CD 25 09               CALL   printStr   
2431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
243E   E1                     POP   hl   
243F   E5                     PUSH   hl   
2440   CD 73 08               CALL   prtdec   
2443   E1                     POP   hl   
2444   CD 25 09               CALL   printStr   
2447   20 28 23 00            .CSTR   " (#"   
244B   CD BB 08               CALL   prthex   
244E   CD 25 09               CALL   printStr   
2451   29 0D 0A 00            .CSTR   ")\r\n"   
2455   76                     HALT      
2456   00                     .CSTR      
2457                EXPECTM_0_2294S43:      
2457   E1                     POP   HL   
2458                          ;*Macro unroll:  test "(a:b) -1%", $0102
2458   31 80 36               LD   SP,STACK   
245B   CD 47 09               CALL   init   
245E   CD AA 35               CALL   execStr   
2461   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
246B                          ;*Macro unroll:  expect "(a:b) -1%",$0102
246B   E1                     POP   HL   
246C   E5                     PUSH   HL   
246D   11 02 01               LD   DE,$0102   
2470   B7                     OR   A   
2471   ED 52                  SBC   HL,DE   
2473   7D                     LD   A,L   
2474   B4                     OR   H   
2475   28 54                  JR   Z,expectM_0_2295S43   
2477   CD 25 09               CALL   printStr   
247A   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
248A   CD 25 09               CALL   printStr   
248D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
249C   21 02 01               LD   HL,$0102   
249F   CD 73 08               CALL   prtdec   
24A2   CD 25 09               CALL   printStr   
24A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24B2   E1                     POP   hl   
24B3   E5                     PUSH   hl   
24B4   CD 73 08               CALL   prtdec   
24B7   E1                     POP   hl   
24B8   CD 25 09               CALL   printStr   
24BB   20 28 23 00            .CSTR   " (#"   
24BF   CD BB 08               CALL   prthex   
24C2   CD 25 09               CALL   printStr   
24C5   29 0D 0A 00            .CSTR   ")\r\n"   
24C9   76                     HALT      
24CA   00                     .CSTR      
24CB                EXPECTM_0_2295S43:      
24CB   E1                     POP   HL   
24CC                          ;*Macro unroll:  test "(:b) -1%", $0101
24CC   31 80 36               LD   SP,STACK   
24CF   CD 47 09               CALL   init   
24D2   CD AA 35               CALL   execStr   
24D5   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
24DE                          ;*Macro unroll:  expect "(:b) -1%",$0101
24DE   E1                     POP   HL   
24DF   E5                     PUSH   HL   
24E0   11 01 01               LD   DE,$0101   
24E3   B7                     OR   A   
24E4   ED 52                  SBC   HL,DE   
24E6   7D                     LD   A,L   
24E7   B4                     OR   H   
24E8   28 53                  JR   Z,expectM_0_2296S43   
24EA   CD 25 09               CALL   printStr   
24ED   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
24FC   CD 25 09               CALL   printStr   
24FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
250E   21 01 01               LD   HL,$0101   
2511   CD 73 08               CALL   prtdec   
2514   CD 25 09               CALL   printStr   
2517   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2524   E1                     POP   hl   
2525   E5                     PUSH   hl   
2526   CD 73 08               CALL   prtdec   
2529   E1                     POP   hl   
252A   CD 25 09               CALL   printStr   
252D   20 28 23 00            .CSTR   " (#"   
2531   CD BB 08               CALL   prthex   
2534   CD 25 09               CALL   printStr   
2537   29 0D 0A 00            .CSTR   ")\r\n"   
253B   76                     HALT      
253C   00                     .CSTR      
253D                EXPECTM_0_2296S43:      
253D   E1                     POP   HL   
253E                          ;*Macro unroll:  test "() {2} \\f:", 2
253E   31 80 36               LD   SP,STACK   
2541   CD 47 09               CALL   init   
2544   CD AA 35               CALL   execStr   
2547   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
2552                          ;*Macro unroll:  expect "() {2} \\f:",2
2552   E1                     POP   HL   
2553   E5                     PUSH   HL   
2554   11 02 00               LD   DE,2   
2557   B7                     OR   A   
2558   ED 52                  SBC   HL,DE   
255A   7D                     LD   A,L   
255B   B4                     OR   H   
255C   28 55                  JR   Z,expectM_0_2297S43   
255E   CD 25 09               CALL   printStr   
2561   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
2572   CD 25 09               CALL   printStr   
2575   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2584   21 02 00               LD   HL,2   
2587   CD 73 08               CALL   prtdec   
258A   CD 25 09               CALL   printStr   
258D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
259A   E1                     POP   hl   
259B   E5                     PUSH   hl   
259C   CD 73 08               CALL   prtdec   
259F   E1                     POP   hl   
25A0   CD 25 09               CALL   printStr   
25A3   20 28 23 00            .CSTR   " (#"   
25A7   CD BB 08               CALL   prthex   
25AA   CD 25 09               CALL   printStr   
25AD   29 0D 0A 00            .CSTR   ")\r\n"   
25B1   76                     HALT      
25B2   00                     .CSTR      
25B3                EXPECTM_0_2297S43:      
25B3   E1                     POP   HL   
25B4                          ;*Macro unroll:  test "(a) {2} \\f:", 2
25B4   31 80 36               LD   SP,STACK   
25B7   CD 47 09               CALL   init   
25BA   CD AA 35               CALL   execStr   
25BD   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
25C9                          ;*Macro unroll:  expect "(a) {2} \\f:",2
25C9   E1                     POP   HL   
25CA   E5                     PUSH   HL   
25CB   11 02 00               LD   DE,2   
25CE   B7                     OR   A   
25CF   ED 52                  SBC   HL,DE   
25D1   7D                     LD   A,L   
25D2   B4                     OR   H   
25D3   28 56                  JR   Z,expectM_0_2298S43   
25D5   CD 25 09               CALL   printStr   
25D8   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
25EA   CD 25 09               CALL   printStr   
25ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25FC   21 02 00               LD   HL,2   
25FF   CD 73 08               CALL   prtdec   
2602   CD 25 09               CALL   printStr   
2605   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2612   E1                     POP   hl   
2613   E5                     PUSH   hl   
2614   CD 73 08               CALL   prtdec   
2617   E1                     POP   hl   
2618   CD 25 09               CALL   printStr   
261B   20 28 23 00            .CSTR   " (#"   
261F   CD BB 08               CALL   prthex   
2622   CD 25 09               CALL   printStr   
2625   29 0D 0A 00            .CSTR   ")\r\n"   
2629   76                     HALT      
262A   00                     .CSTR      
262B                EXPECTM_0_2298S43:      
262B   E1                     POP   HL   
262C                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
262C   31 80 36               LD   SP,STACK   
262F   CD 47 09               CALL   init   
2632   CD AA 35               CALL   execStr   
2635   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
2644                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
2644   E1                     POP   HL   
2645   E5                     PUSH   HL   
2646   11 05 00               LD   DE,5   
2649   B7                     OR   A   
264A   ED 52                  SBC   HL,DE   
264C   7D                     LD   A,L   
264D   B4                     OR   H   
264E   28 59                  JR   Z,expectM_0_2299S43   
2650   CD 25 09               CALL   printStr   
2653   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
2668   CD 25 09               CALL   printStr   
266B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267A   21 05 00               LD   HL,5   
267D   CD 73 08               CALL   prtdec   
2680   CD 25 09               CALL   printStr   
2683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2690   E1                     POP   hl   
2691   E5                     PUSH   hl   
2692   CD 73 08               CALL   prtdec   
2695   E1                     POP   hl   
2696   CD 25 09               CALL   printStr   
2699   20 28 23 00            .CSTR   " (#"   
269D   CD BB 08               CALL   prthex   
26A0   CD 25 09               CALL   printStr   
26A3   29 0D 0A 00            .CSTR   ")\r\n"   
26A7   76                     HALT      
26A8   00                     .CSTR      
26A9                EXPECTM_0_2299S43:      
26A9   E1                     POP   HL   
26AA                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
26AA   31 80 36               LD   SP,STACK   
26AD   CD 47 09               CALL   init   
26B0   CD AA 35               CALL   execStr   
26B3   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
26C4                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
26C4   E1                     POP   HL   
26C5   E5                     PUSH   HL   
26C6   11 05 00               LD   DE,5   
26C9   B7                     OR   A   
26CA   ED 52                  SBC   HL,DE   
26CC   7D                     LD   A,L   
26CD   B4                     OR   H   
26CE   28 5B                  JR   Z,expectM_0_2300S43   
26D0   CD 25 09               CALL   printStr   
26D3   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
26EA   CD 25 09               CALL   printStr   
26ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FC   21 05 00               LD   HL,5   
26FF   CD 73 08               CALL   prtdec   
2702   CD 25 09               CALL   printStr   
2705   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2712   E1                     POP   hl   
2713   E5                     PUSH   hl   
2714   CD 73 08               CALL   prtdec   
2717   E1                     POP   hl   
2718   CD 25 09               CALL   printStr   
271B   20 28 23 00            .CSTR   " (#"   
271F   CD BB 08               CALL   prthex   
2722   CD 25 09               CALL   printStr   
2725   29 0D 0A 00            .CSTR   ")\r\n"   
2729   76                     HALT      
272A   00                     .CSTR      
272B                EXPECTM_0_2300S43:      
272B   E1                     POP   HL   
272C                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
272C   31 80 36               LD   SP,STACK   
272F   CD 47 09               CALL   init   
2732   CD AA 35               CALL   execStr   
2735   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
2744                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
2744   E1                     POP   HL   
2745   E5                     PUSH   HL   
2746   11 02 00               LD   DE,2   
2749   B7                     OR   A   
274A   ED 52                  SBC   HL,DE   
274C   7D                     LD   A,L   
274D   B4                     OR   H   
274E   28 59                  JR   Z,expectM_0_2301S43   
2750   CD 25 09               CALL   printStr   
2753   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
2768   CD 25 09               CALL   printStr   
276B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
277A   21 02 00               LD   HL,2   
277D   CD 73 08               CALL   prtdec   
2780   CD 25 09               CALL   printStr   
2783   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2790   E1                     POP   hl   
2791   E5                     PUSH   hl   
2792   CD 73 08               CALL   prtdec   
2795   E1                     POP   hl   
2796   CD 25 09               CALL   printStr   
2799   20 28 23 00            .CSTR   " (#"   
279D   CD BB 08               CALL   prthex   
27A0   CD 25 09               CALL   printStr   
27A3   29 0D 0A 00            .CSTR   ")\r\n"   
27A7   76                     HALT      
27A8   00                     .CSTR      
27A9                EXPECTM_0_2301S43:      
27A9   E1                     POP   HL   
27AA                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
27AA   31 80 36               LD   SP,STACK   
27AD   CD 47 09               CALL   init   
27B0   CD AA 35               CALL   execStr   
27B3   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
27C7                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
27C7   E1                     POP   HL   
27C8   E5                     PUSH   HL   
27C9   11 05 00               LD   DE,5   
27CC   B7                     OR   A   
27CD   ED 52                  SBC   HL,DE   
27CF   7D                     LD   A,L   
27D0   B4                     OR   H   
27D1   28 5E                  JR   Z,expectM_0_2302S43   
27D3   CD 25 09               CALL   printStr   
27D6   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
27F0   CD 25 09               CALL   printStr   
27F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2802   21 05 00               LD   HL,5   
2805   CD 73 08               CALL   prtdec   
2808   CD 25 09               CALL   printStr   
280B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2818   E1                     POP   hl   
2819   E5                     PUSH   hl   
281A   CD 73 08               CALL   prtdec   
281D   E1                     POP   hl   
281E   CD 25 09               CALL   printStr   
2821   20 28 23 00            .CSTR   " (#"   
2825   CD BB 08               CALL   prthex   
2828   CD 25 09               CALL   printStr   
282B   29 0D 0A 00            .CSTR   ")\r\n"   
282F   76                     HALT      
2830   00                     .CSTR      
2831                EXPECTM_0_2302S43:      
2831   E1                     POP   HL   
2832                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2832   31 80 36               LD   SP,STACK   
2835   CD 47 09               CALL   init   
2838   CD AA 35               CALL   execStr   
283B   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2850                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2850   E1                     POP   HL   
2851   E5                     PUSH   HL   
2852   11 01 00               LD   DE,1   
2855   B7                     OR   A   
2856   ED 52                  SBC   HL,DE   
2858   7D                     LD   A,L   
2859   B4                     OR   H   
285A   28 5F                  JR   Z,expectM_0_2303S43   
285C   CD 25 09               CALL   printStr   
285F   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
287A   CD 25 09               CALL   printStr   
287D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
288C   21 01 00               LD   HL,1   
288F   CD 73 08               CALL   prtdec   
2892   CD 25 09               CALL   printStr   
2895   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28A2   E1                     POP   hl   
28A3   E5                     PUSH   hl   
28A4   CD 73 08               CALL   prtdec   
28A7   E1                     POP   hl   
28A8   CD 25 09               CALL   printStr   
28AB   20 28 23 00            .CSTR   " (#"   
28AF   CD BB 08               CALL   prthex   
28B2   CD 25 09               CALL   printStr   
28B5   29 0D 0A 00            .CSTR   ")\r\n"   
28B9   76                     HALT      
28BA   00                     .CSTR      
28BB                EXPECTM_0_2303S43:      
28BB   E1                     POP   HL   
28BC                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
28BC   31 80 36               LD   SP,STACK   
28BF   CD 47 09               CALL   init   
28C2   CD AA 35               CALL   execStr   
28C5   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
28DD                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
28DD   E1                     POP   HL   
28DE   E5                     PUSH   HL   
28DF   11 07 00               LD   DE,7   
28E2   B7                     OR   A   
28E3   ED 52                  SBC   HL,DE   
28E5   7D                     LD   A,L   
28E6   B4                     OR   H   
28E7   28 62                  JR   Z,expectM_0_2304S43   
28E9   CD 25 09               CALL   printStr   
28EC   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
290A   CD 25 09               CALL   printStr   
290D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
291C   21 07 00               LD   HL,7   
291F   CD 73 08               CALL   prtdec   
2922   CD 25 09               CALL   printStr   
2925   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2932   E1                     POP   hl   
2933   E5                     PUSH   hl   
2934   CD 73 08               CALL   prtdec   
2937   E1                     POP   hl   
2938   CD 25 09               CALL   printStr   
293B   20 28 23 00            .CSTR   " (#"   
293F   CD BB 08               CALL   prthex   
2942   CD 25 09               CALL   printStr   
2945   29 0D 0A 00            .CSTR   ")\r\n"   
2949   76                     HALT      
294A   00                     .CSTR      
294B                EXPECTM_0_2304S43:      
294B   E1                     POP   HL   
294C                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
294C   31 80 36               LD   SP,STACK   
294F   CD 47 09               CALL   init   
2952   CD AA 35               CALL   execStr   
2955   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
296F                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
296F   E1                     POP   HL   
2970   E5                     PUSH   HL   
2971   11 06 00               LD   DE,6   
2974   B7                     OR   A   
2975   ED 52                  SBC   HL,DE   
2977   7D                     LD   A,L   
2978   B4                     OR   H   
2979   28 64                  JR   Z,expectM_0_2305S43   
297B   CD 25 09               CALL   printStr   
297E   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
299E   CD 25 09               CALL   printStr   
29A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B0   21 06 00               LD   HL,6   
29B3   CD 73 08               CALL   prtdec   
29B6   CD 25 09               CALL   printStr   
29B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29C6   E1                     POP   hl   
29C7   E5                     PUSH   hl   
29C8   CD 73 08               CALL   prtdec   
29CB   E1                     POP   hl   
29CC   CD 25 09               CALL   printStr   
29CF   20 28 23 00            .CSTR   " (#"   
29D3   CD BB 08               CALL   prthex   
29D6   CD 25 09               CALL   printStr   
29D9   29 0D 0A 00            .CSTR   ")\r\n"   
29DD   76                     HALT      
29DE   00                     .CSTR      
29DF                EXPECTM_0_2305S43:      
29DF   E1                     POP   HL   
29E0                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
29E0   31 80 36               LD   SP,STACK   
29E3   CD 47 09               CALL   init   
29E6   CD AA 35               CALL   execStr   
29E9   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
29FC                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
29FC   E1                     POP   HL   
29FD   E5                     PUSH   HL   
29FE   11 02 00               LD   DE,2   
2A01   B7                     OR   A   
2A02   ED 52                  SBC   HL,DE   
2A04   7D                     LD   A,L   
2A05   B4                     OR   H   
2A06   28 5D                  JR   Z,expectM_0_2306S43   
2A08   CD 25 09               CALL   printStr   
2A0B   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2A24   CD 25 09               CALL   printStr   
2A27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A36   21 02 00               LD   HL,2   
2A39   CD 73 08               CALL   prtdec   
2A3C   CD 25 09               CALL   printStr   
2A3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A4C   E1                     POP   hl   
2A4D   E5                     PUSH   hl   
2A4E   CD 73 08               CALL   prtdec   
2A51   E1                     POP   hl   
2A52   CD 25 09               CALL   printStr   
2A55   20 28 23 00            .CSTR   " (#"   
2A59   CD BB 08               CALL   prthex   
2A5C   CD 25 09               CALL   printStr   
2A5F   29 0D 0A 00            .CSTR   ")\r\n"   
2A63   76                     HALT      
2A64   00                     .CSTR      
2A65                EXPECTM_0_2306S43:      
2A65   E1                     POP   HL   
2A66                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2A66   31 80 36               LD   SP,STACK   
2A69   CD 47 09               CALL   init   
2A6C   CD AA 35               CALL   execStr   
2A6F   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2A85                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2A85   E1                     POP   HL   
2A86   E5                     PUSH   HL   
2A87   11 01 00               LD   DE,1   
2A8A   B7                     OR   A   
2A8B   ED 52                  SBC   HL,DE   
2A8D   7D                     LD   A,L   
2A8E   B4                     OR   H   
2A8F   28 60                  JR   Z,expectM_0_2307S43   
2A91   CD 25 09               CALL   printStr   
2A94   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2AB0   CD 25 09               CALL   printStr   
2AB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC2   21 01 00               LD   HL,1   
2AC5   CD 73 08               CALL   prtdec   
2AC8   CD 25 09               CALL   printStr   
2ACB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD8   E1                     POP   hl   
2AD9   E5                     PUSH   hl   
2ADA   CD 73 08               CALL   prtdec   
2ADD   E1                     POP   hl   
2ADE   CD 25 09               CALL   printStr   
2AE1   20 28 23 00            .CSTR   " (#"   
2AE5   CD BB 08               CALL   prthex   
2AE8   CD 25 09               CALL   printStr   
2AEB   29 0D 0A 00            .CSTR   ")\r\n"   
2AEF   76                     HALT      
2AF0   00                     .CSTR      
2AF1                EXPECTM_0_2307S43:      
2AF1   E1                     POP   HL   
2AF2                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2AF2   31 80 36               LD   SP,STACK   
2AF5   CD 47 09               CALL   init   
2AF8   CD AA 35               CALL   execStr   
2AFB   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2B12                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2B12   E1                     POP   HL   
2B13   E5                     PUSH   HL   
2B14   11 02 00               LD   DE,2   
2B17   B7                     OR   A   
2B18   ED 52                  SBC   HL,DE   
2B1A   7D                     LD   A,L   
2B1B   B4                     OR   H   
2B1C   28 61                  JR   Z,expectM_0_2308S43   
2B1E   CD 25 09               CALL   printStr   
2B21   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2B3E   CD 25 09               CALL   printStr   
2B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B50   21 02 00               LD   HL,2   
2B53   CD 73 08               CALL   prtdec   
2B56   CD 25 09               CALL   printStr   
2B59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B66   E1                     POP   hl   
2B67   E5                     PUSH   hl   
2B68   CD 73 08               CALL   prtdec   
2B6B   E1                     POP   hl   
2B6C   CD 25 09               CALL   printStr   
2B6F   20 28 23 00            .CSTR   " (#"   
2B73   CD BB 08               CALL   prthex   
2B76   CD 25 09               CALL   printStr   
2B79   29 0D 0A 00            .CSTR   ")\r\n"   
2B7D   76                     HALT      
2B7E   00                     .CSTR      
2B7F                EXPECTM_0_2308S43:      
2B7F   E1                     POP   HL   
2B80                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2B80   31 80 36               LD   SP,STACK   
2B83   CD 47 09               CALL   init   
2B86   CD AA 35               CALL   execStr   
2B89   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2BA1                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2BA1   E1                     POP   HL   
2BA2   E5                     PUSH   HL   
2BA3   11 02 00               LD   DE,2   
2BA6   B7                     OR   A   
2BA7   ED 52                  SBC   HL,DE   
2BA9   7D                     LD   A,L   
2BAA   B4                     OR   H   
2BAB   28 62                  JR   Z,expectM_0_2309S43   
2BAD   CD 25 09               CALL   printStr   
2BB0   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2BCE   CD 25 09               CALL   printStr   
2BD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BE0   21 02 00               LD   HL,2   
2BE3   CD 73 08               CALL   prtdec   
2BE6   CD 25 09               CALL   printStr   
2BE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BF6   E1                     POP   hl   
2BF7   E5                     PUSH   hl   
2BF8   CD 73 08               CALL   prtdec   
2BFB   E1                     POP   hl   
2BFC   CD 25 09               CALL   printStr   
2BFF   20 28 23 00            .CSTR   " (#"   
2C03   CD BB 08               CALL   prthex   
2C06   CD 25 09               CALL   printStr   
2C09   29 0D 0A 00            .CSTR   ")\r\n"   
2C0D   76                     HALT      
2C0E   00                     .CSTR      
2C0F                EXPECTM_0_2309S43:      
2C0F   E1                     POP   HL   
2C10                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2C10   31 80 36               LD   SP,STACK   
2C13   CD 47 09               CALL   init   
2C16   CD AA 35               CALL   execStr   
2C19   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2C30                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2C30   E1                     POP   HL   
2C31   E5                     PUSH   HL   
2C32   11 02 00               LD   DE,2   
2C35   B7                     OR   A   
2C36   ED 52                  SBC   HL,DE   
2C38   7D                     LD   A,L   
2C39   B4                     OR   H   
2C3A   28 61                  JR   Z,expectM_0_2310S43   
2C3C   CD 25 09               CALL   printStr   
2C3F   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2C5C   CD 25 09               CALL   printStr   
2C5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6E   21 02 00               LD   HL,2   
2C71   CD 73 08               CALL   prtdec   
2C74   CD 25 09               CALL   printStr   
2C77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C84   E1                     POP   hl   
2C85   E5                     PUSH   hl   
2C86   CD 73 08               CALL   prtdec   
2C89   E1                     POP   hl   
2C8A   CD 25 09               CALL   printStr   
2C8D   20 28 23 00            .CSTR   " (#"   
2C91   CD BB 08               CALL   prthex   
2C94   CD 25 09               CALL   printStr   
2C97   29 0D 0A 00            .CSTR   ")\r\n"   
2C9B   76                     HALT      
2C9C   00                     .CSTR      
2C9D                EXPECTM_0_2310S43:      
2C9D   E1                     POP   HL   
2C9E                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2C9E   31 80 36               LD   SP,STACK   
2CA1   CD 47 09               CALL   init   
2CA4   CD AA 35               CALL   execStr   
2CA7   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2CC5                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2CC5   E1                     POP   HL   
2CC6   E5                     PUSH   HL   
2CC7   11 05 00               LD   DE,5   
2CCA   B7                     OR   A   
2CCB   ED 52                  SBC   HL,DE   
2CCD   7D                     LD   A,L   
2CCE   B4                     OR   H   
2CCF   28 68                  JR   Z,expectM_0_2311S43   
2CD1   CD 25 09               CALL   printStr   
2CD4   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2CF8   CD 25 09               CALL   printStr   
2CFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D0A   21 05 00               LD   HL,5   
2D0D   CD 73 08               CALL   prtdec   
2D10   CD 25 09               CALL   printStr   
2D13   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D20   E1                     POP   hl   
2D21   E5                     PUSH   hl   
2D22   CD 73 08               CALL   prtdec   
2D25   E1                     POP   hl   
2D26   CD 25 09               CALL   printStr   
2D29   20 28 23 00            .CSTR   " (#"   
2D2D   CD BB 08               CALL   prthex   
2D30   CD 25 09               CALL   printStr   
2D33   29 0D 0A 00            .CSTR   ")\r\n"   
2D37   76                     HALT      
2D38   00                     .CSTR      
2D39                EXPECTM_0_2311S43:      
2D39   E1                     POP   HL   
2D3A                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2D3A   31 80 36               LD   SP,STACK   
2D3D   CD 47 09               CALL   init   
2D40   CD AA 35               CALL   execStr   
2D43   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2D58                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2D58   E1                     POP   HL   
2D59   E5                     PUSH   HL   
2D5A   11 02 00               LD   DE,2   
2D5D   B7                     OR   A   
2D5E   ED 52                  SBC   HL,DE   
2D60   7D                     LD   A,L   
2D61   B4                     OR   H   
2D62   28 5F                  JR   Z,expectM_0_2312S43   
2D64   CD 25 09               CALL   printStr   
2D67   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2D82   CD 25 09               CALL   printStr   
2D85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D94   21 02 00               LD   HL,2   
2D97   CD 73 08               CALL   prtdec   
2D9A   CD 25 09               CALL   printStr   
2D9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DAA   E1                     POP   hl   
2DAB   E5                     PUSH   hl   
2DAC   CD 73 08               CALL   prtdec   
2DAF   E1                     POP   hl   
2DB0   CD 25 09               CALL   printStr   
2DB3   20 28 23 00            .CSTR   " (#"   
2DB7   CD BB 08               CALL   prthex   
2DBA   CD 25 09               CALL   printStr   
2DBD   29 0D 0A 00            .CSTR   ")\r\n"   
2DC1   76                     HALT      
2DC2   00                     .CSTR      
2DC3                EXPECTM_0_2312S43:      
2DC3   E1                     POP   HL   
2DC4                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
2DC4   31 80 36               LD   SP,STACK   
2DC7   CD 47 09               CALL   init   
2DCA   CD AA 35               CALL   execStr   
2DCD   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
2DE8                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
2DE8   E1                     POP   HL   
2DE9   E5                     PUSH   HL   
2DEA   11 64 00               LD   DE,100   
2DED   B7                     OR   A   
2DEE   ED 52                  SBC   HL,DE   
2DF0   7D                     LD   A,L   
2DF1   B4                     OR   H   
2DF2   28 65                  JR   Z,expectM_0_2313S43   
2DF4   CD 25 09               CALL   printStr   
2DF7   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
2E18   CD 25 09               CALL   printStr   
2E1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2A   21 64 00               LD   HL,100   
2E2D   CD 73 08               CALL   prtdec   
2E30   CD 25 09               CALL   printStr   
2E33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E40   E1                     POP   hl   
2E41   E5                     PUSH   hl   
2E42   CD 73 08               CALL   prtdec   
2E45   E1                     POP   hl   
2E46   CD 25 09               CALL   printStr   
2E49   20 28 23 00            .CSTR   " (#"   
2E4D   CD BB 08               CALL   prthex   
2E50   CD 25 09               CALL   printStr   
2E53   29 0D 0A 00            .CSTR   ")\r\n"   
2E57   76                     HALT      
2E58   00                     .CSTR      
2E59                EXPECTM_0_2313S43:      
2E59   E1                     POP   HL   
2E5A                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
2E5A   31 80 36               LD   SP,STACK   
2E5D   CD 47 09               CALL   init   
2E60   CD AA 35               CALL   execStr   
2E63   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
2E7F                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
2E7F   E1                     POP   HL   
2E80   E5                     PUSH   HL   
2E81   11 01 00               LD   DE,1   
2E84   B7                     OR   A   
2E85   ED 52                  SBC   HL,DE   
2E87   7D                     LD   A,L   
2E88   B4                     OR   H   
2E89   28 66                  JR   Z,expectM_0_2314S43   
2E8B   CD 25 09               CALL   printStr   
2E8E   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
2EB0   CD 25 09               CALL   printStr   
2EB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EC2   21 01 00               LD   HL,1   
2EC5   CD 73 08               CALL   prtdec   
2EC8   CD 25 09               CALL   printStr   
2ECB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED8   E1                     POP   hl   
2ED9   E5                     PUSH   hl   
2EDA   CD 73 08               CALL   prtdec   
2EDD   E1                     POP   hl   
2EDE   CD 25 09               CALL   printStr   
2EE1   20 28 23 00            .CSTR   " (#"   
2EE5   CD BB 08               CALL   prthex   
2EE8   CD 25 09               CALL   printStr   
2EEB   29 0D 0A 00            .CSTR   ")\r\n"   
2EEF   76                     HALT      
2EF0   00                     .CSTR      
2EF1                EXPECTM_0_2314S43:      
2EF1   E1                     POP   HL   
2EF2                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
2EF2   31 80 36               LD   SP,STACK   
2EF5   CD 47 09               CALL   init   
2EF8   CD AA 35               CALL   execStr   
2EFB   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
2F18                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
2F18   E1                     POP   HL   
2F19   E5                     PUSH   HL   
2F1A   11 02 00               LD   DE,2   
2F1D   B7                     OR   A   
2F1E   ED 52                  SBC   HL,DE   
2F20   7D                     LD   A,L   
2F21   B4                     OR   H   
2F22   28 67                  JR   Z,expectM_0_2315S43   
2F24   CD 25 09               CALL   printStr   
2F27   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
2F4A   CD 25 09               CALL   printStr   
2F4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F5C   21 02 00               LD   HL,2   
2F5F   CD 73 08               CALL   prtdec   
2F62   CD 25 09               CALL   printStr   
2F65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F72   E1                     POP   hl   
2F73   E5                     PUSH   hl   
2F74   CD 73 08               CALL   prtdec   
2F77   E1                     POP   hl   
2F78   CD 25 09               CALL   printStr   
2F7B   20 28 23 00            .CSTR   " (#"   
2F7F   CD BB 08               CALL   prthex   
2F82   CD 25 09               CALL   printStr   
2F85   29 0D 0A 00            .CSTR   ")\r\n"   
2F89   76                     HALT      
2F8A   00                     .CSTR      
2F8B                EXPECTM_0_2315S43:      
2F8B   E1                     POP   HL   
2F8C                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
2F8C   31 80 36               LD   SP,STACK   
2F8F   CD 47 09               CALL   init   
2F92   CD AA 35               CALL   execStr   
2F95   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2FBA                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
2FBA   E1                     POP   HL   
2FBB   E5                     PUSH   HL   
2FBC   11 0B 00               LD   DE,11   
2FBF   B7                     OR   A   
2FC0   ED 52                  SBC   HL,DE   
2FC2   7D                     LD   A,L   
2FC3   B4                     OR   H   
2FC4   28 6F                  JR   Z,expectM_0_2316S43   
2FC6   CD 25 09               CALL   printStr   
2FC9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
2FF4   CD 25 09               CALL   printStr   
2FF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3006   21 0B 00               LD   HL,11   
3009   CD 73 08               CALL   prtdec   
300C   CD 25 09               CALL   printStr   
300F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
301C   E1                     POP   hl   
301D   E5                     PUSH   hl   
301E   CD 73 08               CALL   prtdec   
3021   E1                     POP   hl   
3022   CD 25 09               CALL   printStr   
3025   20 28 23 00            .CSTR   " (#"   
3029   CD BB 08               CALL   prthex   
302C   CD 25 09               CALL   printStr   
302F   29 0D 0A 00            .CSTR   ")\r\n"   
3033   76                     HALT      
3034   00                     .CSTR      
3035                EXPECTM_0_2316S43:      
3035   E1                     POP   HL   
3036                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
3036   31 80 36               LD   SP,STACK   
3039   CD 47 09               CALL   init   
303C   CD AA 35               CALL   execStr   
303F   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
3064                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
3064   E1                     POP   HL   
3065   E5                     PUSH   HL   
3066   11 15 00               LD   DE,21   
3069   B7                     OR   A   
306A   ED 52                  SBC   HL,DE   
306C   7D                     LD   A,L   
306D   B4                     OR   H   
306E   28 6F                  JR   Z,expectM_0_2317S43   
3070   CD 25 09               CALL   printStr   
3073   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
309E   CD 25 09               CALL   printStr   
30A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30B0   21 15 00               LD   HL,21   
30B3   CD 73 08               CALL   prtdec   
30B6   CD 25 09               CALL   printStr   
30B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30C6   E1                     POP   hl   
30C7   E5                     PUSH   hl   
30C8   CD 73 08               CALL   prtdec   
30CB   E1                     POP   hl   
30CC   CD 25 09               CALL   printStr   
30CF   20 28 23 00            .CSTR   " (#"   
30D3   CD BB 08               CALL   prthex   
30D6   CD 25 09               CALL   printStr   
30D9   29 0D 0A 00            .CSTR   ")\r\n"   
30DD   76                     HALT      
30DE   00                     .CSTR      
30DF                EXPECTM_0_2317S43:      
30DF   E1                     POP   HL   
30E0                          ;*Macro unroll:  test "[10 20 30] 1%", 20
30E0   31 80 36               LD   SP,STACK   
30E3   CD 47 09               CALL   init   
30E6   CD AA 35               CALL   execStr   
30E9   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
30F7                          ;*Macro unroll:  expect "[10 20 30] 1%",20
30F7   E1                     POP   HL   
30F8   E5                     PUSH   HL   
30F9   11 14 00               LD   DE,20   
30FC   B7                     OR   A   
30FD   ED 52                  SBC   HL,DE   
30FF   7D                     LD   A,L   
3100   B4                     OR   H   
3101   28 58                  JR   Z,expectM_0_2318S43   
3103   CD 25 09               CALL   printStr   
3106   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
311A   CD 25 09               CALL   printStr   
311D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312C   21 14 00               LD   HL,20   
312F   CD 73 08               CALL   prtdec   
3132   CD 25 09               CALL   printStr   
3135   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3142   E1                     POP   hl   
3143   E5                     PUSH   hl   
3144   CD 73 08               CALL   prtdec   
3147   E1                     POP   hl   
3148   CD 25 09               CALL   printStr   
314B   20 28 23 00            .CSTR   " (#"   
314F   CD BB 08               CALL   prthex   
3152   CD 25 09               CALL   printStr   
3155   29 0D 0A 00            .CSTR   ")\r\n"   
3159   76                     HALT      
315A   00                     .CSTR      
315B                EXPECTM_0_2318S43:      
315B   E1                     POP   HL   
315C                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
315C   31 80 36               LD   SP,STACK   
315F   CD 47 09               CALL   init   
3162   CD AA 35               CALL   execStr   
3165   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
3173                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
3173   E1                     POP   HL   
3174   E5                     PUSH   HL   
3175   11 02 00               LD   DE,2   
3178   B7                     OR   A   
3179   ED 52                  SBC   HL,DE   
317B   7D                     LD   A,L   
317C   B4                     OR   H   
317D   28 58                  JR   Z,expectM_0_2319S43   
317F   CD 25 09               CALL   printStr   
3182   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
3196   CD 25 09               CALL   printStr   
3199   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31A8   21 02 00               LD   HL,2   
31AB   CD 73 08               CALL   prtdec   
31AE   CD 25 09               CALL   printStr   
31B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31BE   E1                     POP   hl   
31BF   E5                     PUSH   hl   
31C0   CD 73 08               CALL   prtdec   
31C3   E1                     POP   hl   
31C4   CD 25 09               CALL   printStr   
31C7   20 28 23 00            .CSTR   " (#"   
31CB   CD BB 08               CALL   prthex   
31CE   CD 25 09               CALL   printStr   
31D1   29 0D 0A 00            .CSTR   ")\r\n"   
31D5   76                     HALT      
31D6   00                     .CSTR      
31D7                EXPECTM_0_2319S43:      
31D7   E1                     POP   HL   
31D8                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
31D8   31 80 36               LD   SP,STACK   
31DB   CD 47 09               CALL   init   
31DE   CD AA 35               CALL   execStr   
31E1   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
31F5                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
31F5   E1                     POP   HL   
31F6   E5                     PUSH   HL   
31F7   11 42 00               LD   DE,66   
31FA   B7                     OR   A   
31FB   ED 52                  SBC   HL,DE   
31FD   7D                     LD   A,L   
31FE   B4                     OR   H   
31FF   28 5E                  JR   Z,expectM_0_2320S43   
3201   CD 25 09               CALL   printStr   
3204   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
321E   CD 25 09               CALL   printStr   
3221   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3230   21 42 00               LD   HL,66   
3233   CD 73 08               CALL   prtdec   
3236   CD 25 09               CALL   printStr   
3239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3246   E1                     POP   hl   
3247   E5                     PUSH   hl   
3248   CD 73 08               CALL   prtdec   
324B   E1                     POP   hl   
324C   CD 25 09               CALL   printStr   
324F   20 28 23 00            .CSTR   " (#"   
3253   CD BB 08               CALL   prthex   
3256   CD 25 09               CALL   printStr   
3259   29 0D 0A 00            .CSTR   ")\r\n"   
325D   76                     HALT      
325E   00                     .CSTR      
325F                EXPECTM_0_2320S43:      
325F   E1                     POP   HL   
3260                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
3260   31 80 36               LD   SP,STACK   
3263   CD 47 09               CALL   init   
3266   CD AA 35               CALL   execStr   
3269   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
327F                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
327F   E1                     POP   HL   
3280   E5                     PUSH   HL   
3281   11 0A 00               LD   DE,10   
3284   B7                     OR   A   
3285   ED 52                  SBC   HL,DE   
3287   7D                     LD   A,L   
3288   B4                     OR   H   
3289   28 60                  JR   Z,expectM_0_2321S43   
328B   CD 25 09               CALL   printStr   
328E   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
32AA   CD 25 09               CALL   printStr   
32AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32BC   21 0A 00               LD   HL,10   
32BF   CD 73 08               CALL   prtdec   
32C2   CD 25 09               CALL   printStr   
32C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32D2   E1                     POP   hl   
32D3   E5                     PUSH   hl   
32D4   CD 73 08               CALL   prtdec   
32D7   E1                     POP   hl   
32D8   CD 25 09               CALL   printStr   
32DB   20 28 23 00            .CSTR   " (#"   
32DF   CD BB 08               CALL   prthex   
32E2   CD 25 09               CALL   printStr   
32E5   29 0D 0A 00            .CSTR   ")\r\n"   
32E9   76                     HALT      
32EA   00                     .CSTR      
32EB                EXPECTM_0_2321S43:      
32EB   E1                     POP   HL   
32EC                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
32EC   31 80 36               LD   SP,STACK   
32EF   CD 47 09               CALL   init   
32F2   CD AA 35               CALL   execStr   
32F5   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3319                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
3319   E1                     POP   HL   
331A   E5                     PUSH   HL   
331B   11 0A 00               LD   DE,10   
331E   B7                     OR   A   
331F   ED 52                  SBC   HL,DE   
3321   7D                     LD   A,L   
3322   B4                     OR   H   
3323   28 6E                  JR   Z,expectM_0_2322S43   
3325   CD 25 09               CALL   printStr   
3328   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3352   CD 25 09               CALL   printStr   
3355   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3364   21 0A 00               LD   HL,10   
3367   CD 73 08               CALL   prtdec   
336A   CD 25 09               CALL   printStr   
336D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
337A   E1                     POP   hl   
337B   E5                     PUSH   hl   
337C   CD 73 08               CALL   prtdec   
337F   E1                     POP   hl   
3380   CD 25 09               CALL   printStr   
3383   20 28 23 00            .CSTR   " (#"   
3387   CD BB 08               CALL   prthex   
338A   CD 25 09               CALL   printStr   
338D   29 0D 0A 00            .CSTR   ")\r\n"   
3391   76                     HALT      
3392   00                     .CSTR      
3393                EXPECTM_0_2322S43:      
3393   E1                     POP   HL   
3394                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3394   31 80 36               LD   SP,STACK   
3397   CD 47 09               CALL   init   
339A   CD AA 35               CALL   execStr   
339D   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
33C3                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
33C3   E1                     POP   HL   
33C4   E5                     PUSH   HL   
33C5   11 0A 00               LD   DE,10   
33C8   B7                     OR   A   
33C9   ED 52                  SBC   HL,DE   
33CB   7D                     LD   A,L   
33CC   B4                     OR   H   
33CD   28 70                  JR   Z,expectM_0_2323S43   
33CF   CD 25 09               CALL   printStr   
33D2   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
33FE   CD 25 09               CALL   printStr   
3401   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3410   21 0A 00               LD   HL,10   
3413   CD 73 08               CALL   prtdec   
3416   CD 25 09               CALL   printStr   
3419   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3426   E1                     POP   hl   
3427   E5                     PUSH   hl   
3428   CD 73 08               CALL   prtdec   
342B   E1                     POP   hl   
342C   CD 25 09               CALL   printStr   
342F   20 28 23 00            .CSTR   " (#"   
3433   CD BB 08               CALL   prthex   
3436   CD 25 09               CALL   printStr   
3439   29 0D 0A 00            .CSTR   ")\r\n"   
343D   76                     HALT      
343E   00                     .CSTR      
343F                EXPECTM_0_2323S43:      
343F   E1                     POP   HL   
3440                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
3440   31 80 36               LD   SP,STACK   
3443   CD 47 09               CALL   init   
3446   CD AA 35               CALL   execStr   
3449   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
346F                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
346F   E1                     POP   HL   
3470   E5                     PUSH   HL   
3471   11 14 00               LD   DE,20   
3474   B7                     OR   A   
3475   ED 52                  SBC   HL,DE   
3477   7D                     LD   A,L   
3478   B4                     OR   H   
3479   28 70                  JR   Z,expectM_0_2324S43   
347B   CD 25 09               CALL   printStr   
347E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
34AA   CD 25 09               CALL   printStr   
34AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34BC   21 14 00               LD   HL,20   
34BF   CD 73 08               CALL   prtdec   
34C2   CD 25 09               CALL   printStr   
34C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34D2   E1                     POP   hl   
34D3   E5                     PUSH   hl   
34D4   CD 73 08               CALL   prtdec   
34D7   E1                     POP   hl   
34D8   CD 25 09               CALL   printStr   
34DB   20 28 23 00            .CSTR   " (#"   
34DF   CD BB 08               CALL   prthex   
34E2   CD 25 09               CALL   printStr   
34E5   29 0D 0A 00            .CSTR   ")\r\n"   
34E9   76                     HALT      
34EA   00                     .CSTR      
34EB                EXPECTM_0_2324S43:      
34EB   E1                     POP   HL   
34EC                          ;*Macro unroll:  test "0 j= 4 i= { i j += i \\x 1 i -= } \\r j ", 10
34EC   31 80 36               LD   SP,STACK   
34EF   CD 47 09               CALL   init   
34F2   CD AA 35               CALL   execStr   
34F5   30 20 6A 3D 20 34 20 69 3D 20 7B 20 69 20 6A 20 2B 3D 20 69 20 5C 78 20 31 20 69 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { i j += i \\x 1 i -= } \\r j "   
351C                          ;*Macro unroll:  expect "0 j= 4 i= { i j += i \\x 1 i -= } \\r j ",10
351C   E1                     POP   HL   
351D   E5                     PUSH   HL   
351E   11 0A 00               LD   DE,10   
3521   B7                     OR   A   
3522   ED 52                  SBC   HL,DE   
3524   7D                     LD   A,L   
3525   B4                     OR   H   
3526   28 71                  JR   Z,expectM_0_2325S43   
3528   CD 25 09               CALL   printStr   
352B   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 69 20 6A 20 2B 3D 20 69 20 5C 78 20 31 20 69 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { i j += i \\x 1 i -= } \\r j "   
3558   CD 25 09               CALL   printStr   
355B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
356A   21 0A 00               LD   HL,10   
356D   CD 73 08               CALL   prtdec   
3570   CD 25 09               CALL   printStr   
3573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3580   E1                     POP   hl   
3581   E5                     PUSH   hl   
3582   CD 73 08               CALL   prtdec   
3585   E1                     POP   hl   
3586   CD 25 09               CALL   printStr   
3589   20 28 23 00            .CSTR   " (#"   
358D   CD BB 08               CALL   prthex   
3590   CD 25 09               CALL   printStr   
3593   29 0D 0A 00            .CSTR   ")\r\n"   
3597   76                     HALT      
3598   00                     .CSTR      
3599                EXPECTM_0_2325S43:      
3599   E1                     POP   HL   
359A                             ; 
359A                             ; 
359A                             ; 
359A                             ; 
359A                             ; 
359A                             ; 
359A                             ; 
359A                             ; test "10 sqrt", 3
359A                             ; test "10 sqrt %", 1
359A                             ; test "[ 1 ] closure call", 1
359A                             ; test "[ [ 2 ] ] closure call 0%", 2
359A   CD 25 09               CALL   printStr   
359D   44 6F 6E 65 21 00      .CSTR   "Done!"   
35A3   76                     HALT      
35A4                          ALIGN   2   
35A4                PRINTER:      
35A4   E1                     POP   hl   
35A5   CD 73 08               CALL   prtdec   
35A8   DD E9                  JP   (ix)   
35AA                             ; executes a null teminated string (null executes exit_)
35AA                             ; the string should be immedaitely following the call
35AA                EXECSTR:      ; create a root stack frame
35AA   C1                     POP   bc   ; bc = code*
35AB   0B                     DEC   bc   ; dec to prepare for next routine
35AC   11 00 00               LD   de,0   
35AF   D5                     PUSH   de   ; push fake IP
35B0   D5                     PUSH   de   ; push null arg_list*
35B1   D5                     PUSH   de   ; push null first_arg*
35B2   D5                     PUSH   de   ; push fake BP
35B3   DD E9                  JP   (ix)   
35B5                          ALIGN   $100   
3600                             ; .org RAMSTART
3600                          DS   DSIZE   
3680                STACK:       
3680                          ALIGN   $100   
3700                VARS:        
3700                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
37D0                RESTARTS:      
37D0                RST08:    DS   2   
37D2                RST10:    DS   2   
37D4                RST18:    DS   2   
37D6                RST20:    DS   2   
37D8                RST28:    DS   2   
37DA                RST30:    DS   2   ; 
37DC                BAUD:     DS   2   ; 
37DE                INTVEC:   DS   2   ; 
37E0                NMIVEC:   DS   2   ; 
37E2                GETCVEC:   DS   2   ; 
37E4                PUTCVEC:   DS   2   ; 
37E6                SYSVARS:      
37E6                             ; initialised sys variables
37E6                VDATAWIDTH:   DS   2   ; 
37E8                VTIBPTR:   DS   2   ; 
37EA                VNEXT:    DS   2   ; 
37EC                VHEAPPTR:   DS   2   ; 
37EE                             ; uninitialised sys variables
37EE                VBLOCKEND:   DS   2   ; 
37F0                VPOINTER:   DS   2   ; 
37F2                VHASHSTR:   DS   2   ; 
37F4                VLASTDEF:   DS   2   ; 
37F6                VREMAIN:   DS   2   ; 
37F8                VTEMP1:   DS   2   ; 
37FA                VTEMP2:   DS   2   ; 
37FC                TBPTR:    DS   2   ; reserved for tests
37FE                          ALIGN   $100   
3800                TIB:      DS   TIBSIZE   
3900                          ALIGN   $100   
3900                PAD:      DS   $100   
3A00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0871 DEFINED AT LINE 1394 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1249 IN monty.asm
                    > USED AT LINE 1686 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 759 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
                    > USED AT LINE 1717 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 817 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1753 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1641 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1125 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0391 DEFINED AT LINE 317 IN monty.asm
ADD:                0393 DEFINED AT LINE 324 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               03A0 DEFINED AT LINE 334 IN monty.asm
                    > USED AT LINE 329 IN monty.asm
ADD2:               03AB DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
ADDR:               03B1 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03BD DEFINED AT LINE 356 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03C4 DEFINED AT LINE 364 IN monty.asm
                    > USED AT LINE 376 IN monty.asm
                    > USED AT LINE 386 IN monty.asm
OR:                 03C8 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03D1 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03D2 DEFINED AT LINE 379 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03DA DEFINED AT LINE 391 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03F8 DEFINED AT LINE 412 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG0A:              0401 DEFINED AT LINE 420 IN monty.asm
                    > USED AT LINE 397 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG1:               0406 DEFINED AT LINE 423 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG1A:              040E DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 422 IN monty.asm
ARG_LIST:           0411 DEFINED AT LINE 439 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          041B DEFINED AT LINE 446 IN monty.asm
                    > USED AT LINE 464 IN monty.asm
ARG_LIST2:          0427 DEFINED AT LINE 454 IN monty.asm
                    > USED AT LINE 451 IN monty.asm
ARG_LIST3:          042F DEFINED AT LINE 462 IN monty.asm
                    > USED AT LINE 453 IN monty.asm
                    > USED AT LINE 460 IN monty.asm
ARG_LIST4:          0432 DEFINED AT LINE 465 IN monty.asm
                    > USED AT LINE 449 IN monty.asm
ARG_LIST5:          0437 DEFINED AT LINE 470 IN monty.asm
                    > USED AT LINE 468 IN monty.asm
ARRBEGIN:           0443 DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             045F DEFINED AT LINE 495 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0479 DEFINED AT LINE 511 IN monty.asm
                    > USED AT LINE 527 IN monty.asm
ARREND2:            0489 DEFINED AT LINE 521 IN monty.asm
                    > USED AT LINE 517 IN monty.asm
ARRINDEX:           04AD DEFINED AT LINE 548 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04B5 DEFINED AT LINE 554 IN monty.asm
ARRINDEX1:          04B6 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 553 IN monty.asm
ARRINDEX2:          04C2 DEFINED AT LINE 565 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
ASSIGN:             04C5 DEFINED AT LINE 570 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04C7 DEFINED AT LINE 573 IN monty.asm
                    > USED AT LINE 333 IN monty.asm
                    > USED AT LINE 341 IN monty.asm
                    > USED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
ASSIGNX:            04C8 DEFINED AT LINE 575 IN monty.asm
ASSIGN1:            04D4 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
BLOCK:              04D6 DEFINED AT LINE 586 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04DA DEFINED AT LINE 590 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
BLOCK2:             0506 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
BLOCK3:             0509 DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
BLOCK4:             0511 DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK5:             0514 DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
BLOCK6:             053C DEFINED AT LINE 648 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
BLOCKEND:           053F DEFINED AT LINE 652 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1311 IN monty.asm
BLOCKEND1:          056B DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 667 IN monty.asm
BLOCKEND2:          0577 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
BLOCKEND3:          0589 DEFINED AT LINE 695 IN monty.asm
                    > USED AT LINE 687 IN monty.asm
CHAR:               0594 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0597 DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
CHAR2:              05A3 DEFINED AT LINE 717 IN monty.asm
                    > USED AT LINE 714 IN monty.asm
CHAR3:              05A6 DEFINED AT LINE 720 IN monty.asm
                    > USED AT LINE 712 IN monty.asm
DOT:                05A9 DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B5 DEFINED AT LINE 750 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
DOT2:               05BE DEFINED AT LINE 755 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
DOT3:               05C8 DEFINED AT LINE 761 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
DOT4:               05CC DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
                    > USED AT LINE 754 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
DIVIDE:             05D3 DEFINED AT LINE 772 IN monty.asm
                    > USED AT LINE 311 IN monty.asm
DIVIDE1:            05D8 DEFINED AT LINE 775 IN monty.asm
                    > USED AT LINE 787 IN monty.asm
DIVIDE2:            05E5 DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DIVIDE3:            05E6 DEFINED AT LINE 785 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
EQUALS:             05EC DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F4 DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05F9 DEFINED AT LINE 808 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          05FE DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
TRUE1:              0601 DEFINED AT LINE 816 IN monty.asm
                    > USED AT LINE 796 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
NULL1:              0607 DEFINED AT LINE 820 IN monty.asm
FALSE1:             0607 DEFINED AT LINE 821 IN monty.asm
                    > USED AT LINE 797 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 1165 IN monty.asm
GO:                 060D DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1274 IN monty.asm
GO1:                060E DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
                    > USED AT LINE 979 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
GO2:                0614 DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
GOFUNC:             061A DEFINED AT LINE 842 IN monty.asm
GOFUNC1:            062F DEFINED AT LINE 862 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
GOFUNC2:            0635 DEFINED AT LINE 868 IN monty.asm
                    > USED AT LINE 872 IN monty.asm
GOFUNC3:            063A DEFINED AT LINE 873 IN monty.asm
                    > USED AT LINE 867 IN monty.asm
GOBLOCK:            0648 DEFINED AT LINE 886 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
GOBLOCK2:           0669 DEFINED AT LINE 904 IN monty.asm
                    > USED AT LINE 861 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
GOBLOCK3:           066E DEFINED AT LINE 908 IN monty.asm
                    > USED AT LINE 903 IN monty.asm
GOBLOCK4:           066F DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
HEXNUM:             067C DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            067F DEFINED AT LINE 920 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
HEXNUM2:            0687 DEFINED AT LINE 926 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
IDENTU:             0699 DEFINED AT LINE 938 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             069E DEFINED AT LINE 942 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06A3 DEFINED AT LINE 946 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
IF:                 06B0 DEFINED AT LINE 959 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06BC DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 963 IN monty.asm
IFTE1:              06BD DEFINED AT LINE 971 IN monty.asm
                    > USED AT LINE 966 IN monty.asm
MUL:                06C9 DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06D3 DEFINED AT LINE 990 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
NUM:                06E5 DEFINED AT LINE 1004 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               06EE DEFINED AT LINE 1010 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
NUM1:               06EF DEFINED AT LINE 1012 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
NUM2:               0707 DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 928 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
                    > USED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1017 IN monty.asm
NUM3:               0712 DEFINED AT LINE 1038 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
REMAIN:             0715 DEFINED AT LINE 1042 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          071B DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         0723 DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 1059 IN monty.asm
SHIFTLEFT2:         0724 DEFINED AT LINE 1058 IN monty.asm
                    > USED AT LINE 1055 IN monty.asm
SHIFTRIGHT:         072B DEFINED AT LINE 1066 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        0733 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
SHIFTRIGHT2:        0737 DEFINED AT LINE 1076 IN monty.asm
                    > USED AT LINE 1072 IN monty.asm
STRING:             073E DEFINED AT LINE 1085 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            0747 DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1101 IN monty.asm
STRING2:            074A DEFINED AT LINE 1096 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
SUB:                0766 DEFINED AT LINE 1118 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB1:               0772 DEFINED AT LINE 1126 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
SUB2:               077C DEFINED AT LINE 1133 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
SUB3:               0789 DEFINED AT LINE 1142 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
COMMAND:            0791 DEFINED AT LINE 1153 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               07DA DEFINED AT LINE 1186 IN monty.asm
                    > USED AT LINE 1159 IN monty.asm
COMMENT:            07E7 DEFINED AT LINE 1199 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
BYTES:              07F0 DEFINED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1161 IN monty.asm
BYTES1:             07F3 DEFINED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
FUNC:               07F8 DEFINED AT LINE 1214 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
INPUT:              0814 DEFINED AT LINE 1238 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
KEY:                081F DEFINED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
OUTPUT:             0828 DEFINED AT LINE 1257 IN monty.asm
                    > USED AT LINE 1171 IN monty.asm
REPEAT:             0831 DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1173 IN monty.asm
SELECT:             0839 DEFINED AT LINE 1278 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
WORDS:              0843 DEFINED AT LINE 1288 IN monty.asm
                    > USED AT LINE 1179 IN monty.asm
BLOCKEXIT:          0849 DEFINED AT LINE 1292 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
BLOCKEXIT1:         0850 DEFINED AT LINE 1298 IN monty.asm
                    > USED AT LINE 1296 IN monty.asm
LOOP:               086F DEFINED AT LINE 1321 IN monty.asm
FILTER:             0871 DEFINED AT LINE 1392 IN monty.asm
MAP:                0871 DEFINED AT LINE 1393 IN monty.asm
PRTDEC:             0873 DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
                    > USED AT LINE 1763 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 138
PRTDEC0:            0882 DEFINED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
PRTDEC1:            08A4 DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1482 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
PRTDEC2:            08A6 DEFINED AT LINE 1496 IN monty.asm
                    > USED AT LINE 1499 IN monty.asm
PRTDEC3:            08B6 DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
PRTDEC4:            08B7 DEFINED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1507 IN monty.asm
PRTHEX:             08BB DEFINED AT LINE 1514 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08C6 DEFINED AT LINE 1522 IN monty.asm
                    > USED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
PRTHEX3:            08CF DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
PRTSTR0:            08DA DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
PRTSTR:             08DE DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
NESTING:            08E3 DEFINED AT LINE 1557 IN monty.asm
                    > USED AT LINE 1677 IN monty.asm
                    > USED AT LINE 1718 IN monty.asm
NESTING0:           08ED DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
NESTING1A:          08F4 DEFINED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
NESTING1:           08F7 DEFINED AT LINE 1571 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
NESTING2:           0906 DEFINED AT LINE 1580 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
NESTING3:           0908 DEFINED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1579 IN monty.asm
NESTING4:           0913 DEFINED AT LINE 1590 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
PROMPT:             0915 DEFINED AT LINE 1594 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
CRLF:               091E DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1730 IN monty.asm
PRINTSTR:           0925 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
                    > USED AT LINE 1761 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 19
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 131
PUSHARRAY:          092C DEFINED AT LINE 1615 IN monty.asm
PUSHARRAY1:         0938 DEFINED AT LINE 1624 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
PUSHARRAY2:         093E DEFINED AT LINE 1631 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
INIT:               0947 DEFINED AT LINE 1638 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1656 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0960 DEFINED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1651 IN monty.asm
START:              0965 DEFINED AT LINE 1654 IN monty.asm
INTERPRET:          097B DEFINED AT LINE 1660 IN monty.asm
                    > USED AT LINE 1755 IN monty.asm
                    > USED AT LINE 1764 IN monty.asm
INTERPRET2:         0985 DEFINED AT LINE 1666 IN monty.asm
                    > USED AT LINE 1710 IN monty.asm
INTERPRET3:         098D DEFINED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1682 IN monty.asm
INTERPRET4:         0993 DEFINED AT LINE 1679 IN monty.asm
                    > USED AT LINE 1671 IN monty.asm
INTERPRET5:         0998 DEFINED AT LINE 1685 IN monty.asm
                    > USED AT LINE 1719 IN monty.asm
                    > USED AT LINE 1733 IN monty.asm
INTERPRET6:         09A9 DEFINED AT LINE 1712 IN monty.asm
                    > USED AT LINE 1688 IN monty.asm
INTERPRET7:         09B7 DEFINED AT LINE 1721 IN monty.asm
                    > USED AT LINE 1693 IN monty.asm
INTERPRET8:         09CA DEFINED AT LINE 1735 IN monty.asm
                    > USED AT LINE 1691 IN monty.asm
NEXT:               09D2 DEFINED AT LINE 1741 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1745 IN monty.asm
NEXT1:              09E1 DEFINED AT LINE 1752 IN monty.asm
                    > USED AT LINE 1746 IN monty.asm
EXIT_:              09E8 DEFINED AT LINE 1756 IN monty.asm
                    > USED AT LINE 1754 IN monty.asm
ERROR:              09EB DEFINED AT LINE 1760 IN monty.asm
                    > USED AT LINE 1184 IN monty.asm
TESTSSTART:         0A00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2230S43:  0A77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  0AE7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  0B4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  0BB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  0C15 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  0C79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  0CDD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  0D43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  0DAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2243S43:  0E11 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2244S43:  0E77 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2245S43:  0EDF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2246S43:  0F49 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2247S43:  0FB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2248S43:  1019 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2249S43:  1087 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2250S43:  10F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2251S43:  1161 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2252S43:  11D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2253S43:  123D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2254S43:  12B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2255S43:  1323 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2256S43:  1399 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2257S43:  1415 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  1485 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  14F1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  155D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  15D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  164F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  16BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  1727 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  1793 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  1807 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  1873 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  18E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  1951 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  19BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  1A2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  1A97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  1B03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  1B6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  1BDB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  1C47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  1CB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  1D1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  1D8D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  1DFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  1E69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  1ED9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  1F49 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  1FB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  201D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  208D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  2103 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  217B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  21F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  227F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  2307 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  2375 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  23E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  2457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  24CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  253D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  25B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  262B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2299S43:  26A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2300S43:  272B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2301S43:  27A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2302S43:  2831 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2303S43:  28BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2304S43:  294B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2305S43:  29DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2306S43:  2A65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2307S43:  2AF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2308S43:  2B7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2309S43:  2C0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2310S43:  2C9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2311S43:  2D39 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2312S43:  2DC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2313S43:  2E59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2314S43:  2EF1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2315S43:  2F8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2316S43:  3035 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2317S43:  30DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2318S43:  315B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2319S43:  31D7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2320S43:  325F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2321S43:  32EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2322S43:  3393 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2323S43:  343F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2324S43:  34EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2325S43:  3599 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            35A4 DEFINED AT LINE 136
EXECSTR:            35AA DEFINED AT LINE 143
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3680 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 889 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
                    > USED AT LINE 1655 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3700 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1645 IN monty.asm
RESTARTS:           37D0 DEFINED AT LINE 11 IN ram.asm
RST08:              37D0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              37D2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              37D4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              37D6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              37D8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              37DA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               37DC DEFINED AT LINE 19 IN ram.asm
INTVEC:             37DE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             37E0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            37E2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            37E4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            37E6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1642 IN monty.asm
VDATAWIDTH:         37E6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 551 IN monty.asm
                    > USED AT LINE 578 IN monty.asm
                    > USED AT LINE 1210 IN monty.asm
VTIBPTR:            37E8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1664 IN monty.asm
                    > USED AT LINE 1736 IN monty.asm
VNEXT:              37EA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1639 IN monty.asm
VHEAPPTR:           37EC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 441 IN monty.asm
                    > USED AT LINE 472 IN monty.asm
                    > USED AT LINE 505 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 1086 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
                    > USED AT LINE 1216 IN monty.asm
                    > USED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
VBLOCKEND:          37EE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           37F0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 351 IN monty.asm
                    > USED AT LINE 353 IN monty.asm
                    > USED AT LINE 354 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
                    > USED AT LINE 950 IN monty.asm
VHASHSTR:           37F2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           37F4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            37F6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 312 IN monty.asm
                    > USED AT LINE 1043 IN monty.asm
VTEMP1:             37F8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 498 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
                    > USED AT LINE 638 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1635 IN monty.asm
VTEMP2:             37FA DEFINED AT LINE 42 IN ram.asm
TBPTR:              37FC DEFINED AT LINE 43 IN ram.asm
TIB:                3800 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1670 IN monty.asm
                    > USED AT LINE 1713 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
                    > USED AT LINE 1737 IN monty.asm
PAD:                3900 DEFINED AT LINE 49 IN ram.asm
HEAP:               3A00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 631 IN monty.asm
